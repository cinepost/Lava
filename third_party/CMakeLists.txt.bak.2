cmake_minimum_required(VERSION 3.17)

project("ThirdParty_External")

include(ExternalProject)

message("Running third party dependencies build...")

set(EXTRA_CMAKE_ARGS)
set(LAVA_3RD_LIB_LINK_WITH_STATIC OFF)

set(EXTERNALS_BUILD_DIR ${CMAKE_CURRENT_BINARY_DIR}/external)
set(EXTERNALS_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external)

find_program(MAKE_EXECUTABLE
  NAMES gmake mingw32-make make
  NAMES_PER_DIR
  DOC "GNU Make"
)

find_program(CHMOD_EXECUTABLE
  NAMES chmod
  NAMES_PER_DIR
)

find_package(Git)
if(Git_FOUND)
  message("Git found: ${GIT_EXECUTABLE}")
endif()

########################
# Slang section
########################

set(SLANG_VER 0.19.14) # last working version 0.18.6
set(SLANG_PREFIX slang)
set(SLANG_PLATFORM linux-x64)
set(SLANG_BUILD_LIBS "slang slang-glslang")

set(SLANG_RELEASE_BIN_DIR "bin/${SLANG_PLATFORM}/release")
set(SLANG_DEBUG_BIN_DIR "bin/${SLANG_PLATFORM}/debug")

if (CMAKE_BUILD_TYPE STREQUAL "Release")
  set(SLANG_BUILD_CONFIG release_x64)
  set(SLANG_BIN_DIR ${SLANG_RELEASE_BIN_DIR})
else()
  set(SLANG_BUILD_CONFIG debug_x64)
  set(SLANG_BIN_DIR ${SLANG_DEBUG_BIN_DIR})
endif()

set(SLANG_RELEASE_BIN_DIR "bin/${SLANG_PLATFORM}/release")
set(SLANG_DEBUG_BIN_DIR "bin/${SLANG_PLATFORM}/debug")

string(REPLACE " " ";" SLANG_BUILD_LIBS_LIST ${SLANG_BUILD_LIBS})

ExternalProject_Add( Slang
  PREFIX ${EXTERNALS_SOURCE_DIR}/${SLANG_PREFIX}
  GIT_REPOSITORY https://github.com/shader-slang/slang.git
  GIT_REMOTE_NAME releases/tags/v${SLANG_VER}
  UPDATE_DISCONNECTED ON
  BUILD_IN_SOURCE   TRUE
  #EXCLUDE_FROM_ALL  TRUE
  #BUILD_ALWAYS      TRUE
  LOG_BUILD ON
  USES_TERMINAL ON
  USES_TERMINAL_CONFIGURE ON

  CONFIGURE_COMMAND 
    COMMAND ${CMAKE_COMMAND}
      -D GIT_EXECUTABLE=${GIT_EXECUTABLE}
      -D INPUT_FILE=${CMAKE_CURRENT_SOURCE_DIR}/slang-tag-version.h.in
      -D OUTPUT_FILE=<SOURCE_DIR>/slang-tag-version.h
      -P ${CMAKE_CURRENT_SOURCE_DIR}/slang_generate_version.cmake
    COMMAND ./premake5 gmake --build-glslang=true --enable-embed-stdlib=true --arch=x64
  
  BUILD_COMMAND ${MAKE_EXECUTABLE} ${SLANG_BUILD_LIBS_LIST} config=${SLANG_BUILD_CONFIG}
  INSTALL_COMMAND ${CMAKE_COMMAND}
    -D SLANG_LIBS_LIST=${SLANG_BUILD_LIBS}
    -D SOURCE_DIR=<SOURCE_DIR>/${SLANG_BIN_DIR}/
    -D DEST_DIR=${EXTERNALS_BUILD_DIR}
    -P ${CMAKE_CURRENT_SOURCE_DIR}/slang_install_files.cmake

  #BUILD_BYPRODUCTS "<SOURCE_DIR>/${SLANG_BIN_DIR}/libslang.so"
  #BUILD_BYPRODUCTS "<SOURCE_DIR>/${SLANG_BIN_DIR}/libslang-glslang.so"
)

ExternalProject_Add_Step(
  Slang download_premake5
  COMMENT "Downloading premake5 ..."
  ALWAYS ON
  COMMAND ${CMAKE_COMMAND}
    -D PREMAKE_URL=https://github.com/shader-slang/slang-binaries/blob/master/premake/premake-5.0.0-alpha16/bin/linux-64/premake5?raw=true
    -D OUTPUT_FILE=<SOURCE_DIR>/premake5
    -P ${CMAKE_CURRENT_SOURCE_DIR}/slang_download_premake.cmake
  DEPENDERS configure build install
)

ExternalProject_Get_Property(Slang SOURCE_DIR)
set(Slang_SOURCE_DIR ${SOURCE_DIR})

#set(SLANG_LIBRARY ${Slang_SOURCE_DIR}/${SLANG_BIN_DIR}/libslang.so)

add_library(Slang::LibSlang SHARED IMPORTED GLOBAL)
set_target_properties(Slang::LibSlang PROPERTIES
  #INTERFACE_INCLUDE_DIRECTORIES ${MyLibFoo_INCLUDE_DIR}
  IMPORTED_LOCATION ${EXTERNALS_BUILD_DIR}/lib/libslang.so
  #IMPORTED_LOCATION_DEBUG ${Slang_SOURCE_DIR}/${SLANG_DEBUG_BIN_DIR}/libslang.so
)

add_library(Slang::LibSlangGlslang SHARED IMPORTED GLOBAL)
set_target_properties(Slang::LibSlangGlslang PROPERTIES
  #INTERFACE_INCLUDE_DIRECTORIES ${MyLibFoo_INCLUDE_DIR}
  IMPORTED_LOCATION ${EXTERNALS_BUILD_DIR}/lib/libslang-glslang.so
  #IMPORTED_LOCATION_DEBUG ${Slang_SOURCE_DIR}/${SLANG_DEBUG_BIN_DIR}/libslang-glslang.so
)

add_library(Slang::Slang INTERFACE IMPORTED GLOBAL)
set_property(TARGET Slang::Slang PROPERTY
  INTERFACE_LINK_LIBRARIES Slang::Slang Slang::LibSlangGlslang
)

#set_property(
#    TARGET slang
#    PROPERTY
#        IMPORTED_LOCATION "${SLANG_LIBRARY}"
#)

#message("Slang_lib_file ${SLANG_LIBRARY}")
#message("Slang ${slang}")
#message("Slang " Slang::Slang)
add_dependencies(Slang::Slang Slang)


add_custom_target( huy COMMAND echo "Third party project dummy target")
add_dependencies(huy 
  Slang::Slang
  Slang::LibSlang
  Slang::LibSlangGlslang
)