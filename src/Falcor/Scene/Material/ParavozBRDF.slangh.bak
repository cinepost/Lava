#pragma once

#include "Utils/Math/MathConstants.slangh"
#include "Experimental/Scene/Material/BxDFConfig.slangh"
#include "Scene/Material/BRDFCommon.slangh"

import Scene.ShadingData;
import Scene.Lights.Lights;

/** Qualitative Oren-Nayar diffuse
*/

float parovozDiffuseFresnel(float NdotV, float NdotL, float LdotH, float linearRoughness) {
    float fd90 = 0.5 + 2 * LdotH * LdotH * linearRoughness;
    float fd0 = 1;
    float lightScatter = fresnelSchlick(fd0, fd90, NdotL).r;
    float viewScatter = fresnelSchlick(fd0, fd90, NdotV).r;
    return lightScatter * viewScatter;
}

float3 evalParovozDiffuse(ShadingData sd, LightSample ls) {
    float a = sd.ggxAlpha;
    float3 color = sd.diffuse.rgb;
    float theta_i = acos(ls.NdotL);
    float theta_r = acos(sd.NdotV);
    float LdotV = dot(normalize(ls.L), normalize(sd.V));
    float cos_phi_diff = (LdotV - ls.NdotL*sd.NdotV) / (sin(theta_i)*sin(theta_r) + FLT_EPSILON);
    float alpha = max(theta_i, theta_r);
    float beta  = min(theta_i, theta_r);
    
    if (alpha > M_PI * 0.5) {
        return float3(0);
    }

    float A = 1.0 - 0.5 * a / (a + 0.33);
    float B = 0.45 * a / (a + 0.09);
    float C = sin(alpha) * tan(beta);
    float L1 = A + B * max(0.0, cos_phi_diff) * C;

    float fr = (sd.IoR - 1.f) / (sd.IoR + 1.f);
    float FT0 = 1.0 - fr * fr;
    float FT90 = 0.0;
    float transmittance = lerp(FT0, FT90, schlickWeight(sd.NdotV));

    return color * (L1 * M_1_PI) * transmittance;
}

float3 evalParovozSpecularBrdf(ShadingData sd, LightSample ls) {
    float ggxAlpha = sd.ggxAlpha;

    float D = evalGGX(ggxAlpha, ls.NdotH);
    float G = evalSmithGGX(ls.NdotL, sd.NdotV, ggxAlpha);
    float3 F = fresnelSchlick(sd.specular, 1, saturate(ls.LdotH));
    
    float a = saturate(ls.NdotL);

    float fr = (sd.IoR - 1.f) / (sd.IoR + 1.f);
    float FR0 = fr * fr;
    float FR90 = 1.0;
    float reflectance = lerp(FR0, FR90, schlickWeight(sd.NdotV));
    reflectance = lerp(1 - FR0, 0.0, schlickWeight(sd.NdotV));

    return D * G * F * M_1_PI * lerp(a, 1, reflectance);
}


// Some experimental models
float3 evalDiffuseFrostbiteBrdf2(ShadingData sd, LightSample ls) {
    float energyBias = lerp(0, 0.5, sd.linearRoughness);
    float energyFactor = lerp(1, 1.0 / 1.51, sd.linearRoughness);

    float fd90 = energyBias + 2 * ls.LdotH * ls.LdotH * sd.linearRoughness;
    float fd0 = 1;
    float lightScatter = fresnelSchlick(fd0, fd90, ls.LdotH).r;
    float viewScatter = fresnelSchlick(fd0, fd90, sd.NdotV).r;

    float fr = (sd.IoR - 1.f) / (sd.IoR + 1.f);
    float FT0 = 1.0 - fr * fr;
    float FT90 = 0.0;
    float reflectance = lerp(FT0, FT90, schlickWeight(sd.NdotV));

    return float3(1, 0, 0);

    return (viewScatter * lightScatter * energyFactor * M_1_PI) * reflectance * sd.diffuse.rgb;
}

/** Oren-Nayar diffuse
*/
float3 evalOrenNayarDiffuse(ShadingData sd, LightSample ls) {
    float a = sd.ggxAlpha;
    float3 color = sd.diffuse.rgb;
    float theta_i = acos(ls.NdotL);
    float theta_r = acos(sd.NdotV);
    float LdotV = dot(normalize(ls.L), normalize(sd.V));
    float cos_phi_diff = (LdotV - ls.NdotL*sd.NdotV) / (sin(theta_i)*sin(theta_r) + FLT_EPSILON);
    float alpha = max(theta_i, theta_r);
    float beta  = min(theta_i, theta_r);
    
    if (alpha > M_PI * 0.5) {
        return float3(0);
    }

    float C1 = 1.0 - 0.5 * a / (a + 0.33);
    float C2 = 0.45 * a / (a + 0.09);
    
    if (cos_phi_diff >= 0.0) {
        C2 *= sin(alpha);
    } else {
        C2 *= (sin(alpha) - pow(2.0*beta / M_PI, 3.0));
    }
    
    float C3 = 0.125 * a / (a + 0.09) * pow((4.0*alpha*beta)/M_PI_2, 2.0);

    float L1 = C1 + cos_phi_diff * C2 * tan(beta) + (1.0 - abs(cos_phi_diff)) * C3 * tan((alpha+beta)/2.0);
    float L2 = 0.17 * (a / (a + 0.13)) * (1.0 - cos_phi_diff * (4.0 * beta * beta) / (M_PI_2));
    //return color * (L1 * M_1_PI) + color * color * (L2 * M_1_PI);
    return color * color * (L2 * M_1_PI);
}

/** Oren-Nayar diffuse
*/
float3 evalOrenNayarDiffuse2(ShadingData sd, LightSample ls) {
    float roughness2 = sd.ggxAlpha;
    float3 color = sd.diffuse.rgb;
    float theta_i = acos(ls.NdotL);
    float theta_r = acos(sd.NdotV);
    float LdotV = dot(normalize(ls.L), normalize(sd.V));
    float3 vDir = normalize(sd.V);
    float3 lDir = normalize(ls.L);
    float3 N = sd.N;

    float a = 1.0 - 0.5 * roughness2 / (roughness2 + 0.33);
    float b = 0.45 * roughness2 / (roughness2 + 0.09);

    float cosPhi = dot(normalize(vDir - sd.NdotV * N), normalize(lDir - ls.NdotL * N));
    
    float sinNV = sqrt(1.0 - sd.NdotV * sd.NdotV);
    float sinNL = sqrt(1.0 - ls.NdotL * ls.NdotL);
    
    float s = sd.NdotV < ls.NdotL ? sinNV : sinNL;
    float t = sd.NdotV > ls.NdotL ? sinNV / sd.NdotV : sinNL / ls.NdotL;
    return sd.diffuse.rgb * M_1_PI * (a + b * cosPhi * s * t);
}