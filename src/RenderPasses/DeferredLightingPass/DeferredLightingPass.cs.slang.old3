#include "Utils/Math/MathConstants.slangh"

import Scene.Raster;
import Scene.Shading;
import Scene.RaytracingInline;

import Utils.Math.MathHelpers;
import Utils.Sampling.SampleGenerator;
import Experimental.Scene.Lights.LightHelpers;
import Experimental.Scene.Lights.EnvMapSampler;
import Experimental.Scene.Lights.EnvMapLighting;

import Experimental.Scene.Material.Fresnel;
import Experimental.Scene.Material.Microfacet;
import Experimental.Scene.Material.StandardMaterial;
import Experimental.Scene.Material.IBxDF;

#define is_valid(name) (is_valid_##name != 0)

import DeferredLightingHelpers;
import DeferredLightingAOV;

#ifndef _MAX_RAY_LEVEL
#define _MAX_RAY_LEVEL 0
#endif

#define _FIX_SHADOW_TERMINATOR
#define _USE_MULTIPLE_IMPORTANCE_SAMPLING
#define _CACHE_NEXT_RAY

#define LUMA_REC709(f3color) dot(f3color, float3(0.2126f, 0.7152f, 0.0722f))
#define LUMA_CCIR601(f3color) dot(f3color, float3(0.299f, 0.587f, 0.114f))

#define GREY(f3color) (LUMA_REC709(f3color) + 0.5f)

// Extra input channels
Texture2D<float> gDepth;
Texture2D<PackedHitInfo> gVbuffer;
Texture2D<float4> gTextureGrads;

// Extra UAV output channels
RasterizerOrderedTexture2D<float>  gOutPz;
RasterizerOrderedTexture2D<float4> gOutPosition;
RasterizerOrderedTexture2D<float4> gOutAlbedo;
RasterizerOrderedTexture2D<float4> gOutEmission;
RasterizerOrderedTexture2D<float4> gOutShadows;
RasterizerOrderedTexture2D<float4> gOutNormals;
RasterizerOrderedTexture2D<float2> gOutMotionVecs;
RasterizerOrderedTexture2D<float>  gOutOcclusion;
RasterizerOrderedTexture2D<float>  gOutFresnel;
RasterizerOrderedTexture2D<float>  gPrimID;
RasterizerOrderedTexture2D<float>  gOpID;
RasterizerOrderedTexture2D<float16_t>  gVariance;

RasterizerOrderedTexture2D<float16_t4> gLastFrameSum;

// Main output channel
RWTexture2D<float4> gInOutColor;

cbuffer PerFrameCB {
  uint2             gNoiseOffset;
  uint              gSampleNumber;                 // Interframe sample number.
  bool              gUseImportanceSampling = true; // Use BRDF importance sampling.
  int               usePdf = 0;                    // Use BRDF sampling pdf explicitly, otherwise the precomputed weight (for debugging).
  float16_t3        gColorLimit = float3(10.0, 10.0, 10.0);
  float16_t3        gIndirectColorLimit = float3(3.0, 3.0, 3.0);
  uint              gRayDiffuseLimit = 0;
  uint              gRayReflectLimit = 0;
  uint              gRayRefractLimit = 0;
  float             gRayBias = 0.0001;
  float             gRayContribThresh = 0.1;
  uint              gRussRouletteLevel = 2;
  uint2             gFrameDim;
  uint              gSamplesPerFrame;

  EnvMapSampler     gEnvMapSampler;
};

EnvMapLighting gEnvMapLighting; 

SamplerState gNoiseSampler;
SamplerState gDepthSampler;
Texture2D gNoiseTex;


/** write AOVData
*/
void writeAOV(uint2 ipos, const AOVData d) {
#if is_valid(gOutPz)
        gOutPz[ipos] = d.depth;
#endif  // gOutPz

#if is_valid(gOutAlbedo)
        gOutAlbedo[ipos] = float4(d.albedo, .0);
#endif  // gOutAlbedo

#if is_valid(gOutEmission)
        gOutEmission[ipos] = float4(d.emission, .0);
#endif  // gOutEmission

#if is_valid(gOutNormals)
        gOutNormals[ipos] = float4(d.normal, .0f);
#endif  // gOutNormals

#if is_valid(gOutShadows)
        gOutShadows[ipos] = float4(d.shadow, .0f);
#endif  // gOutShadows

#if is_valid(gOutPosition)
        gOutPosition[ipos] = float4(d.position, .0);
#endif  // gOutPosition

#if is_valid(gOutFresnel)
        gOutFresnel[ipos] = d.fresnel;
#endif  // gOutFresnel

#if is_valid(gPrimID)
        gPrimID[ipos] = d.primID;
#endif  // gOutFresnel

#if is_valid(gOpID)
        gOpID[ipos] = d.opID;
#endif  // gOpID

}

struct RayData {
    float  depth;
    float3 origin;
    float3 direction;
    uint   lobes;
    
    static RayData create() {
        RayData r;
        r.depth = 0.0f;
        r.origin = r.direction = float3(0.0);
        r.lobes = (uint)LobeType::All;
        return r;
    }
};

float _computeEnvironmentMapLOD(float pdf, Texture2D environmentMap) {
    uint txw, txh;
    environmentMap.GetDimensions(txw, txh);
    return log2(pdf * txh * M_1_PI);                                // From chapter 21 in Ray Tracing Gems.
}

/** Helper to create a texture sampler instance.
    The method for computing texture level-of-detail depends on the configuration.
    \param[in] pixel Current pixel coordinates.
    \return Texture sampler instance.
*/
ITextureSampler createTextureSampler(const uint2 pixel_pos) {
    if (is_valid(gTextureGrads)) {
        float4 texGrads = gTextureGrads[pixel_pos];
        return ExplicitGradientTextureSampler(texGrads.xy, texGrads.zw);
    } else {
        return ExplicitLodTextureSampler(0.f);
    }
}

float4 calcIlluminance<S : ISampleGenerator, L : ITextureSampler>(inout float3 rayDir, inout HitInfo hit, TriangleHit triangleHit, ShadingData sd, inout float4 sampleWeight, inout S sg, inout AOVData aov_data, const float4 rnd, L lod, uint rayLevel, const uint maxRayLevel){

    float4 surfaceColor = float4(0.0);

    const float lumaWeight = LUMA_CCIR601(sampleWeight.rgb) / gRayContribThresh;
    const float rrThreshold = rnd.x;// * ((float)rayLevel / (float)min(1, maxRayLevel));  // range should be [0, 1]
    if(rayLevel >= gRussRouletteLevel && lumaWeight < rrThreshold) {
        sampleWeight = float4(0.f);
        return surfaceColor;
    }

    ITextureSampler _lod = lod; //ExplicitLodTextureSampler(4.0);

    float3 rayOrigin = sd.posW;
    float3 rayShadow = rayOrigin;
    float3 geometryFaceNormalW = getGeometricFaceNormalW(triangleHit.instanceID, triangleHit.primitiveIndex);

    // Face forwad interpolated normal
    //sd.N = faceforward(sd.N, rayDir, geometryFaceNormalW);

    [[branch ]] if (gScene.doFixShadowTerminator(triangleHit.instanceID)) {
        rayShadow = gScene.computeShadingPosition(triangleHit.instanceID, triangleHit.primitiveIndex, sd.posW, sd.N, triangleHit.getBarycentricWeights());
    }

    //rayOrigin -= rayDir * gRayBias;

    RayQuery<RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES | RAY_FLAG_FORCE_OPAQUE | RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH> rayShadowQuery;
    let rayFlags = RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES | RAY_FLAG_FORCE_OPAQUE | RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH;

    let bsdf = gScene.materials.getBSDF(sd, _lod);
    let bsdfProperties = bsdf.getProperties(sd);

    uint shadingLobes = (uint)LobeType::SpecularReflection | (uint)LobeType::DiffuseReflection | (uint)LobeType::SpecularTransmission;
    
    // Ray level common stuff
    if (rayLevel > 0) { 
        // Ray level 1+

        // Terminate specular caustics.
        shadingLobes = (uint)LobeType::DiffuseReflection | (uint)LobeType::SpecularTransmission | (uint)LobeType::SpecularReflection;
    } else {
        // Ray level 0 (camera ray)
        aov_data.position = sd.posW;
        aov_data.normal = sd.N;
        aov_data.albedo = bsdfProperties.diffuseReflectionAlbedo;
    }

    HitInfo bsdfHit = {}; // We store bsdf hit here as a candidate for the next bounce
    float bsdfHitT = 0.f; // We store hit distance to check agains potential light source to sample from the surface bsdf
    BSDFSample bsdfSample;

    sd.mtl.setActiveLobes(shadingLobes);
    bool validBsdfSample = bsdf.sample(sd, sg, bsdfSample, true);
    float3 nextRayDir = normalize(bsdfSample.wo);

    float4 diffuseColor  = float4(0.f);
    float4 specularColor = float4(0.f);
    float4 shadowColor   = float4(1.f);

    // Process lights
#if _SCENE_LIGHT_COUNT
    [unroll]
    for (int lightIndex = 0; lightIndex < _SCENE_LIGHT_COUNT; lightIndex++) {
#else
    [loop]
    for (int lightIndex = 0; lightIndex < gScene.getLightCount(); lightIndex++) {
#endif

        LightData light = gScene.getLight(lightIndex);
        float4 shadowFactor = float4(1.0f);
        if(rayLevel == 0) {
            if(!light.contributesDirectIllumination()) continue;
        } else {
            if(!light.contributesIndirectIllumination()) continue;
        }

        AnalyticLightSample ls;

        // Sample light and reject sample if lower hemisphere.
        sd.mtl.setActiveLobes(shadingLobes);

        if (sampleLight(sd.posW, sd.N, light, rnd, ls) && dot(ls.dir, sd.N) > kMinCosTheta) {
            if ((light.shadowType == uint(LightShadowType.RayTraced)) && (gScene.isObjectShadowsReceiving(triangleHit.instanceID))) {
                
                // Test visibility by tracing a shadow ray.
                RayDesc ray;
                ray.Origin = rayShadow;
                ray.Direction = ls.shadowDir;
                ray.TMin = .001f;
                ray.TMax = ls.distance;

                rayShadowQuery.TraceRayInline(gScene.rtAccel, rayFlags, 0x02, ray);
                rayShadowQuery.Proceed();
                shadowFactor = (rayShadowQuery.CommittedStatus() == COMMITTED_TRIANGLE_HIT) ? float4(light.shadowColor, 0.0) : float4(1.0);
            }

            float misDiffWeight = 1.0f;
            float misSpecWeight = 1.0f;
            float misRefrWeight = 1.0f;

#ifdef _USE_MULTIPLE_IMPORTANCE_SAMPLING            
            [[branch ]] if (!light.isDeltaLight() && (ls.pdf > .0f)) {
                sd.mtl.setActiveLobes((uint)LobeType::DiffuseReflection);
                misDiffWeight = evalMIS(1.0f, ls.pdf, 1.0f, bsdf.evalPdf(sd, ls.dir));
                misDiffWeight /= ls.pdf;

                sd.mtl.setActiveLobes((uint)LobeType::SpecularReflection);
                misSpecWeight = evalMIS(1.0f, ls.pdf, 1.0f, bsdf.evalPdf(sd, ls.dir));
                misSpecWeight /= ls.pdf;

                sd.mtl.setActiveLobes((uint)LobeType::SpecularTransmission);
                misRefrWeight = evalMIS(1.0f, ls.pdf, 1.0f, bsdf.evalPdf(sd, ls.dir));
                misRefrWeight /= ls.pdf;
            }
#endif //_USE_MULTIPLE_IMPORTANCE_SAMPLING

            [[branch ]] if ((rayLevel == 0 && light.contributesDirectDiffuseIllumination()) || (rayLevel > 0 && light.contributesIndirectDiffuseIllumination())) {
                sd.mtl.setActiveLobes((uint)LobeType::DiffuseReflection);
                diffuseColor.rgb += bsdf.eval(sd, ls.dir, sg) * ls.i *((rayLevel == 0) ? light.directDiffuseIntensity : light.indirectDiffuseIntensity ) * shadowFactor.rgb * misDiffWeight;
                diffuseColor.a = LUMA_CCIR601(diffuseColor.rgb / bsdfProperties.diffuseReflectionAlbedo);
            }

            [[branch ]] if ((rayLevel == 0 && light.contributesDirectSpecularIllumination()) || (rayLevel > 0 && light.contributesIndirectSpecularIllumination())) {
                sd.mtl.setActiveLobes((uint)LobeType::SpecularReflection);
                specularColor.rgb += bsdf.eval(sd, ls.dir, sg) * ls.i * ((rayLevel == 0) ? light.directSpecularIntensity : light.indirectSpecularIntensity ) * shadowFactor.rgb * misSpecWeight;
                diffuseColor.a = LUMA_CCIR601(diffuseColor.rgb / bsdfProperties.diffuseReflectionAlbedo);

                sd.mtl.setActiveLobes((uint)LobeType::SpecularTransmission);
                specularColor.rgb += bsdf.eval(sd, ls.dir, sg) * ls.i * ((rayLevel == 0) ? light.directSpecularIntensity : light.indirectSpecularIntensity ) * shadowFactor.rgb * misRefrWeight;
            }

            shadowColor *= shadowFactor;
        }

#ifdef _USE_MULTIPLE_IMPORTANCE_SAMPLING

        // Sample bsdf for non singular light
        if(!light.isDeltaLight()) {
#ifdef _CACHE_NEXT_RAY
            //RayQuery<RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES | RAY_FLAG_FORCE_OPAQUE> rayShadowQuery;
            //let rayFlags = RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES | RAY_FLAG_FORCE_OPAQUE;

            RayQuery<RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES | RAY_FLAG_FORCE_OPAQUE | RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH> rayShadowQuery;
            let rayFlags = RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES | RAY_FLAG_FORCE_OPAQUE | RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH;
#endif

            uint _shadingLobes = 0;
            [[branch ]] if ((rayLevel == 0 && light.contributesDirectDiffuseIllumination()) || (rayLevel > 0 && light.contributesIndirectDiffuseIllumination())) {
                _shadingLobes |= (uint)LobeType::DiffuseReflection;
            }

            [[branch ]] if ((rayLevel == 0 && light.contributesDirectSpecularIllumination()) || (rayLevel > 0 && light.contributesIndirectSpecularIllumination())) {
                _shadingLobes |= (uint)LobeType::SpecularReflection | (uint)LobeType::SpecularTransmission;
            }
            sd.mtl.setActiveLobes(_shadingLobes);
            validBsdfSample = bsdf.sample(sd, sg, bsdfSample, true);
            
            if((1 == 1) && validBsdfSample && (bsdfSample.pdf > 0.0f)) {
                
                // Intersect light source and reject invalid light sample.
                if (intersectLight(sd.posW, bsdfSample.wo, light, ls) && dot(ls.dir, sd.N) > kMinCosTheta) {
                    float misWeight = evalMIS(1., bsdfSample.pdf, 1., ls.pdf);
                    
                    shadowFactor = float4(1.0f);

                    RayDesc ray;
                    ray.Origin = rayShadow;
                    ray.Direction = bsdfSample.wo;
                    ray.TMin = .001f;
                    ray.TMax = ls.distance;

                    rayShadowQuery.TraceRayInline(gScene.rtAccel, rayFlags, 0x02, ray);
                    rayShadowQuery.Proceed();

                    if(rayShadowQuery.CommittedStatus() == COMMITTED_TRIANGLE_HIT) {
                        shadowFactor = float4(light.shadowColor, 0.0);
#ifdef _CACHE_NEXT_RAY
                        bsdfHit = HitInfo(getCommittedTriangleHit(rayShadowQuery));
                        bsdfHitT = rayShadowQuery.CommittedRayT();
#endif
                    }

                    [branch]
                    if(bsdfSample.isLobe(LobeType::DiffuseReflection)) {
                        sd.mtl.setActiveLobes((uint)LobeType::DiffuseReflection);
                        float misWeight = evalMIS(1., bsdf.evalPdf(sd, bsdfSample.wo), 1., ls.pdf);
                        diffuseColor.rgb += bsdfSample.weight * ls.i * ((rayLevel == 0) ? light.directDiffuseIntensity : light.indirectDiffuseIntensity ) * shadowFactor.rgb * misWeight;
                    } else if(bsdfSample.isLobe(LobeType::SpecularReflection)) {
                        sd.mtl.setActiveLobes((uint)LobeType::SpecularReflection);
                        float misWeight = evalMIS(1., bsdf.evalPdf(sd, bsdfSample.wo), 1., ls.pdf);
                        specularColor.rgb += bsdfSample.weight * ls.i * ((rayLevel == 0) ? light.directSpecularIntensity : light.indirectSpecularIntensity ) * shadowFactor.rgb * misWeight;
                    } else if(bsdfSample.isLobe(LobeType::SpecularTransmission) || bsdfSample.isLobe(LobeType::DeltaTransmission)) {
                        sd.mtl.setActiveLobes((uint)LobeType::SpecularReflection);
                        float misWeight = evalMIS(1., bsdf.evalPdf(sd, bsdfSample.wo), 1., ls.pdf);
                        specularColor.rgb += bsdfSample.weight * ls.i * ((rayLevel == 0) ? light.directSpecularIntensity : light.indirectSpecularIntensity ) * shadowFactor.rgb * misWeight;
                    }
                }
            }
        }
#endif  // _USE_MULTIPLE_IMPORTANCE_SAMPLING

    } // light loop

    aov_data.shadow += float3(1.f) - shadowColor.rgb;

    float4 _surfaceColor = diffuseColor + specularColor;

    bool emissionIllumnatesObjects = false;
    _surfaceColor.rgb += ((rayLevel == 0) || emissionIllumnatesObjects) ? bsdf.getProperties(sd).emission : float3(0.0);
    _surfaceColor *= sampleWeight;
    
    float3 colorLimit = rayLevel == 0 ? (float3)gColorLimit : (float3)gIndirectColorLimit;
    surfaceColor = float4(min(_surfaceColor.r, colorLimit.r), min(_surfaceColor.g, colorLimit.g), min(_surfaceColor.b, colorLimit.b), _surfaceColor.a);
    
    [[branch ]] if( rayLevel >= maxRayLevel) return surfaceColor;

    /// Next hit point
    hit = {};
    float hitT = 0.f;

    uint lobes = (uint)LobeType::None;

    [[branch ]] if(rayLevel < gRayDiffuseLimit) lobes |= (uint)LobeType::DiffuseReflection;
    [[branch ]] if(rayLevel < gRayReflectLimit) lobes |= (uint)LobeType::SpecularReflection;
    [[branch ]] if(rayLevel < gRayRefractLimit) lobes |= (uint)LobeType::SpecularTransmission | (uint)LobeType::DeltaTransmission;
    
    sd.mtl.setActiveLobes(lobes);

#ifdef _CACHE_NEXT_RAY
    
    //Invalid bsdf sample. Terminate here
    [[branch ]] if(!validBsdfSample || (bsdfSample.pdf <= 0.0f)) {
        return surfaceColor;
    }

    if(bsdfHitT > 0.0 && (1 == 2)) {
        // Reuse found surface hit
        
        sampleWeight.rgb *= bsdfSample.weight;
        rayDir = normalize(bsdfSample.wo);   
        hit = bsdfHit;
        hitT = bsdfHitT;

    } else {
        // Find next hit

        if(bsdf.sample(sd, sg, bsdfSample, true) && (bsdfSample.pdf > 0.0f)) {
            RayQuery<RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES | RAY_FLAG_FORCE_OPAQUE> rayQuery;
            let rayFlags = RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES | RAY_FLAG_FORCE_OPAQUE;

            bool useAlphaTest = false;
            
            sampleWeight.rgb *= bsdfSample.weight;
            rayDir = normalize(bsdfSample.wo);

            RayDesc ray;
            ray.Origin = sd.posW;
            ray.Direction = rayDir;
            ray.TMin =  .001f;
            ray.TMax = 100000.0f;

            rayQuery.TraceRayInline(gScene.rtAccel, rayFlags, 0x02, ray);
            rayQuery.Proceed();

            if (rayQuery.CommittedStatus() == COMMITTED_TRIANGLE_HIT) {
                hit = HitInfo(getCommittedTriangleHit(rayQuery));
                hitT = rayQuery.CommittedRayT();
            } else {
                if(bsdfSample.isLobe(LobeType::SpecularTransmission) || bsdfSample.isLobe(LobeType::DeltaTransmission)) {

                    [loop]
                    for (int lightIndex = 0; lightIndex < gScene.getLightCount(); lightIndex++) {
                        LightData light = gScene.getLight(lightIndex);
                        if(!light.isDeltaLight()) {
                            AnalyticLightSample ls;
                            if (intersectLight(sd.posW, rayDir, light, ls)) {
                                surfaceColor.rgb += sampleWeight.rgb * ls.i * ((rayLevel == 0) ? light.directSpecularIntensity : light.indirectSpecularIntensity );
                            }
                        }
                    }
                }
            }   
        }
    }
#else
    [[branch ]] if(bsdf.sample(sd, sg, bsdfSample, true) && (bsdfSample.pdf > 0.0f)) {

        RayQuery<RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES | RAY_FLAG_FORCE_OPAQUE> rayQuery;
        let rayFlags = RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES | RAY_FLAG_FORCE_OPAQUE;

        bool useAlphaTest = false;

        sampleWeight *= bsdfSample.weight;
        rayDir = normalize(bsdfSample.wo);

        RayDesc ray;
        ray.Origin = sd.posW;
        ray.Direction = rayDir;
        ray.TMin =  .001f;
        ray.TMax = 100000.0f;

        rayQuery.TraceRayInline(gScene.rtAccel, rayFlags, 0x02, ray);
        rayQuery.Proceed();

        [[branch ]] if (rayQuery.CommittedStatus() == COMMITTED_TRIANGLE_HIT) {
            // Next hit
            hit = HitInfo(getCommittedTriangleHit(rayQuery));
            hitT = rayQuery.CommittedRayT();
        }
    }
#endif

    return surfaceColor;
}

[numthreads(16, 16, 1)]
void main(uint3 dispatchThreadId : SV_DispatchThreadID) {
    // pixel position
    const uint2 ipos = dispatchThreadId.xy;

    // early out
    [[branch ]] if (any(ipos >= gFrameDim)) return;

    const HitInfo hit = HitInfo(gVbuffer[ipos]);
    AOVData aov_data = AOVData.create();
    
    [[branch ]] if (!hit.isValid() || hit.getType() != HitType::Triangle) {
        writeAOV(ipos, aov_data);        
        return;
    }

    const float3 rayDir = normalize(gScene.camera.computeRayPinhole(ipos, gFrameDim).dir);
    let lod = createTextureSampler(ipos);

    // Primary ray surface data
    TriangleHit primaryTriangleHit;
    ShadingData primaryShadingData;
    if(!calcShadingData(rayDir, hit, lod, primaryShadingData, primaryTriangleHit)) return;

    // Sample generator
    SampleGenerator sg = SampleGenerator.create(ipos, gSampleNumber);

    float2 screenUV = float2(ipos) / float2(gFrameDim); 

    // Beauty pass color
    float4 surfaceColor = float4(float3(0.0f), 1.0f);

    const uint maxRayLevel = _MAX_RAY_LEVEL;
    float16_t variance = 1.f;

#if is_valid(gLastFrameSum)
    const float16_t4 _lastFrameSum = gLastFrameSum[ipos];
    const float16_t3 lastFrameSum = _lastFrameSum.rgb;
    const float16_t lastVariance = _lastFrameSum.a;
#else
    const float16_t3 lastFrameSum = float16_t3(0.0);
    const float16_t lastVariance = 1.0;
#endif

#ifdef _SHADING_RATE
    [loop]
    //[unroll]
    for(int shadingIter = 0; shadingIter < _SHADING_RATE; shadingIter++) {
#else
    const int shadingIter = 0;
#endif

    // Spatio temporal blue noise
#ifdef _USE_STBN_SAMPLING
    float4 rnd = gNoiseTex.SampleLevel(gNoiseSampler, float2((ipos + gNoiseOffset + uint2(sampleNext2D(sg) * uint2(64))) / float2(64)), 0);
#else
    float4 rnd = float4(sampleNext2D(sg), sampleNext2D(sg));
#endif
    
    float4 _sampleWeight = float4(1.0);
    float3 _rayDir = rayDir;
    HitInfo _hit = hit;

    RayData rayData = RayData.create();
    rayData.direction = rayDir;

    TriangleHit _triangleHit = primaryTriangleHit;
    ShadingData _shadingData = primaryShadingData;
    
#if _MAX_RAY_LEVEL != 0
    [loop]
    for(uint rayLevel = 0; rayLevel <= maxRayLevel; rayLevel++) {
        if(rayLevel > 0) {
            if(!calcShadingData(_rayDir, _hit, lod, _shadingData, _triangleHit)) break;
        }
#else
        const uint rayLevel = 0;
#endif
        const float4 illumColor = calcIlluminance(_rayDir, _hit, _triangleHit, _shadingData, _sampleWeight, sg, aov_data, rnd, lod, rayLevel, maxRayLevel);
        surfaceColor += illumColor;

#if _USE_VARIANCE
        if(gSampleNumber > 0) {
            variance = abs(LUMA_CCIR601(lastFrameSum / float(gSampleNumber)) - LUMA_CCIR601((lastFrameSum + illumColor.rgb) / float(gSampleNumber + 1)));
        }
#endif

#if _MAX_RAY_LEVEL != 0
        if(!_hit.isValid()) break;
    }
#endif

#ifdef _SHADING_RATE
    }
    surfaceColor /= (float)(_SHADING_RATE);
#endif

    // Write main channel output color
    gInOutColor[ipos] = float4(min(surfaceColor.r, gColorLimit.r), min(surfaceColor.g, gColorLimit.g), min(surfaceColor.b, gColorLimit.b), 1.0);

    // Calc aov variables
#if is_valid(gOutPz)
    {
    #if is_valid(gDepth)
        float2 _screenUV = screenUV * 2.0 - float2(1.f);
        float4 screenP = float4(_screenUV.x, _screenUV.y, gDepth[ipos], 1.0);
    #else
        float4 screenP = mul(float4(primaryShadingData.posW, 1.f), gScene.camera.getViewProj());
    #endif  // gDepth
        float4 viewP = mul(screenP, gScene.camera.data.invProjMat);
        aov_data.depth = -(viewP.z / viewP.w);
    }
#endif  // gOutPz

#if is_valid(gOutFresnel)
    {
        aov_data.fresnel = evalFresnelSchlick(0.f, 1.f, dot(primaryShadingData.V, primaryShadingData.N));
    }
#endif

#if is_valid(gOutEmission)
    {
        let bsdf = gScene.materials.getBSDF(primaryShadingData, lod);
        aov_data.emission = bsdf.getProperties(primaryShadingData).emission;
    }
#endif  // gOutEmission

#if is_valid(gOutShadows)
    #ifdef _SHADING_RATE
        aov_data.shadow /= (float)_SHADING_RATE;
    #endif
#endif  // gOutShadows

#if is_valid(gPrimID)
    {
        aov_data.primID = primaryTriangleHit.primitiveIndex;
    }
#endif

#if is_valid(gOpID)
    {
        aov_data.opID = gScene.getGeometryInstance(primaryTriangleHit.instanceID).globalMatrixID + 1;
    }
#endif

    // Write available AOVs
    writeAOV(ipos, aov_data);

#if is_valid(gLastFrameSum)
    {
        gLastFrameSum[ipos] = float4_16t(lastFrameSum + surfaceColor, variance);
    }
#endif

#if is_valid(gVariance)
    {
        gVariance[ipos] = variance;
    }
#endif

}
