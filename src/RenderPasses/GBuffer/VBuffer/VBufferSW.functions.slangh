#pragma once
#include "VBufferSW.MicroTriangle.slangh"

// Transform world position to clip space
float4 transformPointToClip(const float3 p) {
    return mul(float4(p, 1.f), gScene.camera.getViewProjMat());
}

float4 transformPointToClip(const float3 p, float t) {
    const CameraXformData xform = gScene.camera.getXformData(t);
    return mul(float4(p, 1.f), xform.viewProjMat);
}

double4 transformPointToClipDouble(const double3 p) {
    return mul(double4(p, 1.0), gScene.camera.getViewProjMat());
}

double4 transformPointToClipDouble(const double3 p, float t) {
    const CameraXformData xform = gScene.camera.getXformData(t);
    return mul(double4(p, 1.0), xform.viewProjMat);
}

// Transform world position to sceen space
float4 transformPointToScreen(const float3 p) {
    const float4 pV = transformPointToClip(p);
    float4 pS = float4(pV.xyz / pV.w, pV.w);
    pS.xy = pS.xy * float2(.5f, -.5f) + float2(0.5f);
    pS.xy = pS.xy * float2(gVBufferSW.frameDim) - float2(0.5f);
    return pS;
}

float4 transformPointToScreen(const float3 p, float t) {
    const float4 pV = transformPointToClip(p, t);
    float4 pS = float4(pV.xyz / pV.w, pV.w);
    pS.xy = pS.xy * float2(.5f, -.5f) + float2(0.5f);
    pS.xy = pS.xy * float2(gVBufferSW.frameDim) - float2(0.5f);
    return pS;
}

double4 transformPointToScreenDouble(const double3 p) {
    const double4 pV = transformPointToClipDouble(p);
    double4 pS = double4(pV.xyz / pV.w, pV.w);
    pS.xy = pS.xy * double2(.5, -.5) + double2(0.5);
    pS.xy = pS.xy * double2(gVBufferSW.frameDim) - double2(0.5);
    return pS;
}

double4 transformPointToScreenDouble(const double3 p, float t) {
    const double4 pV = transformPointToClipDouble(p, t);
    double4 pS = double4(pV.xyz / pV.w, pV.w);
    pS.xy = pS.xy * double2(.5, -.5) + double2(0.5);
    pS.xy = pS.xy * double2(gVBufferSW.frameDim) - double2(0.5);
    return pS;
}

// Transform clip position to screen 
float4 transformClipToScreen(const float4 pV) {
    float4 pS = float4(pV.xyz / pV.w, pV.w);
    pS.xy = pS.xy * float2(.5f, -.5f) + float2(0.5f);
    pS.xy = pS.xy * float2(gVBufferSW.frameDim) - float2(0.5f);
    return pS;
}

double4 transformClipToScreenDouble(const double4 pV) {
    double4 pS = double4(pV.xyz / pV.w, pV.w);
    pS.xy = pS.xy * double2(.5, -.5) + double2(0.5);
    pS.xy = pS.xy * double2(gVBufferSW.frameDim) - double2(0.5);
    return pS;
}

// Ray-MicroTriangle intersection
MicroTriangleIntersection intersect(in float3 ro, in float3 rd, in float3 a, in float3 b, in float3 c) {
    ro -= a; b -= a; c -= a; a = float3(0.0);
    float3 ba = b - a, cb = c - b, ac = a - c;

    float3 n = cross(ba, -ac);
    float denom = dot(rd, n);
    if (denom != 0.0) {
        float t = -dot(ro, n) / denom;

        float3 p = ro + rd * t;
        float3 pa = p - a, pb = p - b, pc = p - c;

        float abc = length(n);
        float u = length(cross(cb, pb)) / abc;
        float v = length(cross(ac, pc)) / abc;
        float w = length(cross(ba, pa)) / abc;

        return MicroTriangleIntersection(abs(u + v + w - 1.0) < 0.001, p, t, float3(u, v, w));
    }

    return MicroTriangleIntersection(false, float3(0.0), 0.0, float3(0.0));
}

/*
float3 barycentric(in float2 p, in float2 a, in float2 b, in float2 c) {
    float2 pa = p - a, pb = p - b, pc = p - c;
    float2 ba = b - a, cb = c - b, ac = a - c;

    float abc = abs(ba.y * ac.x - ba.x * ac.y);
    float abp = abs(ba.x * pa.y - ba.y * pa.x);
    float bcp = abs(cb.x * pb.y - cb.y * pb.x);
    float cap = abs(ac.x * pc.y - ac.y * pc.x);

    return float3(bcp, cap, abp) / abc;
}
*/
