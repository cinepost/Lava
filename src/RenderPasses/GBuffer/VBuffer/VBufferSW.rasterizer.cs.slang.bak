void writeMicropolyPixel(uint3 pos, float2 texcoord, uint geometryInstanceIndex, uint primitiveIndex, uint meshletID) {
    const uint64_t z64 = uint64_t(asuint(pos.z)) << 32;

    const uint idx = (gVBufferSW.frameDim.x * pos.y + pos.x) << 3;
    const uint64_t prim_value = z64 | primitiveIndex;
    const uint tx = asuint(f32tof16(texcoord.x));
    const uint ty = asuint(f32tof16(texcoord.y));
    const uint64_t parm_value = (z64 | (tx << 16)) | ty;
    const uint64_t inst_value = z64 | geometryInstanceIndex;

    const uint64_t v = gLocalDepthBuffer.InterlockedMinU64(idx, prim_value);
    
    if ( prim_value < v) {
        gVBufferSW.writeMeshletID(pos.xy, meshletID);
        gVBufferSW.writeMicroPolyID(pos.xy, primitiveIndex);
    }
}


void rasterizeMicroTriangle(float3 pt0, float3 pt1, float3 pt2, float2 min_p, float2 max_p) {
    for(float y = min_p.y; y <= max_p.y; y += 1.0f) {
        for(float x = min_p.x; x <= max_p.x; x += 1.0f) {
            TriangleHit triangleHit = {};
            //GeometryInstanceID instanceID;
            triangleHit.primitiveIndex = 1;
            triangleHit.barycentrics = float2(0.5f);
            gVBufferSW.writeHit(uint2(x, y), HitInfo(triangleHit.pack()));
        }
    }
}
