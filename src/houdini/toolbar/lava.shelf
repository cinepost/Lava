<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>

  <toolshelf name="lava_shelf" label="Lava">
    <memberTool name="ltx_delete"/>
  </toolshelf>

  <tool name="ltx_delete" label="LTX Delete" icon="LAVA_Delete">
    <helpText><![CDATA[Deletes *.ltx converted textures from filesystem.]]></helpText>
    <script scriptType="python">
      <![CDATA[
import os

def generateUDIMStingIndices():
  id_strings = []
  for x in range(1, 11):
    for y in range(0, 10):
      id_strings += [str(1000 + x + y*10)]

  return id_strings


def isFileParm(parm):
  t = parm.parmTemplate()
  if t.type() == hou.parmTemplateType.String:
    if t.stringType() == hou.stringParmType.FileReference:
      return True

    return False


def isStringParm(parm):
  if parm.parmTemplate().type() == hou.parmTemplateType.String:
    return True

  return False


def findLtxTexturePaths(node):
  paths = []
  
  gUDIMStringIndices = generateUDIMStingIndices()

  for parm in node.parms():
    if isFileParm(parm) or isStringParm(parm):
      parm_value = parm.eval()
      if isinstance(parm_value, str) and parm_value != '':
        filepath = parm_value
        if filepath.lower().endswith((".exr", ".png", ".jpg", ".jpeg", ".bmp", ".tga", ".tif", ".tiff", ".hdr")):
          udim_wildcard_pos = filepath.find('<UDIM>')
          if udim_wildcard_pos != -1:
            # UDIM texture
            for udim_idx_str in gUDIMStringIndices:
              ltx_path = filepath.replace('<UDIM>', udim_idx_str) + ".ltx"
              if os.path.isfile(ltx_path):
                paths += [ltx_path]
          else:
            # Simple texture
            ltx_path = filepath + ".ltx"
            if os.path.isfile(ltx_path):
              paths += [ltx_path]        

  for child in node.children():
    paths += findLtxTexturePaths(child)

  return paths

paths = findLtxTexturePaths(hou.node("/"))

details_text = "Found textures: \n"
for path in paths:
  details_text += "%s \n" % path

if hou.ui.displayConfirmation("Do you really wand to delete %s LTX textures from filesystem ?" % len(paths), severity=hou.severityType.Warning, help=None, title="Delete LTX textures from filesystem", details=details_text, details_label=None, suppress=hou.confirmType.OverwriteFile):

  deleted_count = 0

  for ltx_path in paths:
    if os.path.exists(ltx_path):
      os.remove(ltx_path)
      deleted_count += 1
  
  hou.ui.displayMessage("Complete. %s LTX textures deleted from filesystem!" % deleted_count)

      ]]>
    </script>
  </tool>
</shelfDocument>