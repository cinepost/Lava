#include "CommonMacros.ds"

// Labels for folder tabs
#define OUTPUT_LABEL			"Output"
#define DEEP_OUTPUT_LABEL		"Deep Output"
#define CRYPTO_OUTPUT_LABEL		"Cryptomatte"
#define EXTRA_IMAGE_LABEL		"Extra Image Planes"
#define META_DATA_LABEL			"Meta Data"
#define RENDERING_MAIN_LABEL		"Rendering"
#define RENDERING_RENDER_LABEL		"Render"
#define RENDERING_SAMPLING_LABEL	"Sampling"
#define RENDERING_BAKING_LABEL		"Baking"
#define RENDERING_SHADING_LABEL		"Shading"
#define RENDERING_LIMITS_LABEL		"Limits"
#define RENDERING_DICING_LABEL		"Dicing"
#define RENDERING_GEOMETRY_LABEL	"Geometry"
#define RENDERING_STATISTICS_LABEL	"Statistics"
#define RENDERING_PBR_LABEL		"PBR"
#define RENDERING_DRIVER_LABEL		"Driver"

#define VEX_QUANTIZE_MENU	\
	menu { \
	    "8"		"8 bit integer" \
	    "16"	"16 bit integer" \
	    "half"	"16 bit float" \
	    "float"	"32 bit float" \
	}

// Other pixel filters:
//	"ubox"			- Special unit box filter
#define VEX_PIXEL_FILTERS \
	"box -w 1"		"Unit Box Filter" \
	"gaussian -w 2"		"Gaussian 2x2" \
	"gaussian -w 3"		"Gaussian 3x3 (softer)" \
	"gaussian -w 2 -r 1"	"Gaussian 2x2 with noisy sample refiltering" \
	"combine -t 20.0"	"Ray Histogram Fusion" \
	"bartlett -w 2"		"Bartlett (triangle)" \
	"catrom -w 3"		"Catmull-Rom" \
	"hanning -w 2"		"Hanning" \
	"blackman -w 2"		"Blackman" \
	"sinc -w 3"		"Sinc (sharpening)" \
	"edgedetect"		"Edge Detection Filter" \
	"minmax min"		"Closest Sample Filter" \
	"minmax max"		"Farthest Sample Filter" \
	"minmax median"		"Median Sample Filter" \
	"minmax edge"		"Disable Edge Antialiasing" \
	"minmax ocover"		"Object With Most Pixel Coverage (average)" \
	"minmax idcover"	"Object With Most Coverage (no filtering)" \
	"minmax omin"		"Object With Most Coverage (minimum z-value)" \
	"minmax omax"		"Object With Most Coverage (maximum z-value)" \
	"minmax omedian"	"Object With Most Coverage (median z-value)" \
	"denoise optix -a basecolor"	"NVIDIA OptiX Denoiser" \
	"denoise intel -a basecolor"	"Intel OIDN Denoiser"

#define VEX_PIXEL_FILTER_MENU	\
	menureplace { \
	    VEX_PIXEL_FILTERS \
	}

#define VEX_AUX_PIXEL_FILTER_MENU	\
	menureplace { \
	    ""			"Inherit from main plane" \
	    VEX_PIXEL_FILTERS \
	}

#define VEX_FILTER_MENU	\
	menu { \
	    "box"		"Box Filter" \
	    "gaussian"		"Gaussian" \
	    "bartlett"		"Bartlett (triangle)" \
	    "catrom"		"Catmull-Rom" \
	    "hanning"		"Hanning" \
	    "blackman"		"Blackman" \
	    "sinc"		"Sinc (sharpening)" \
	}

#define VEX_TYPE_MENU	\
	menu { \
	    "float"	"Float Type" \
	    "vector"	"Vector Type" \
	    "vector4"	"Vector4 Type" \
	    "unitvector" "Unit Vector Type" \
	}

#define VEX_IMAGE_FORMAT_MENU \
    menu { \
        ""		"Infer from filename" \
        "Houdini"	"Houdini Pic (PIC)" \
        "RAT"		"Random Access Texture (RAT)" \
        "OpenEXR"	"Open EXR (EXR)" \
        "TIFF"		"Tagged Image File (TIFF)" \
        "PNG"		"Portable Network Graphics (PNG)" \
        "Targa"		"Targa (TGA)" \
        "JPEG"		"JPEG (JPG)" \
    }

#define LAVA_PROP(CLASS, NAME)	\
	parmtag	{ mantra_class	CLASS } \
	parmtag	{ mantra_name	NAME }

#define	LAVA_FORCE_OUTPUT	parmtag { mantra_force_output	"1" }
#define LAVA_FORCE_TYPE(TYPE)	parmtag { mantra_type TYPE }

{
    name	lava
    label	"Lava-Beach"
    parmtag	{ spare_opfilter	"!!SHOP/PROPERTIES!!" }
    parmtag	{ spare_classtags	"render" }

#include "CommonControl.ds"
#include "CommonView.ds"
#include "CommonObject.ds"
#include "Instance.ds"


    multiparm {
	name	    lv_cryptolayers
	label	    "Cryptomatte Layers"
	default	    { 0 }
	parmtag	{ spare_category CRYPTO_OUTPUT_LABEL }
	parm {
	    name	"lv_cryptolayerenable#"
	    type	toggle
	    default	{ 1 }
	    nolabel
	    joinnext
	}
	parm {
            name	"lv_cryptolayerprop#"
            label	"Property"
            type	string
            default	{ "materialname" }
	    menureplace {
			"materialname"	 "Material Name"
			"name"		 "Object Name"
	    }
	}
	parm {
	    name	"lv_cryptolayername#"
            label	"Channel Name"
	    type	string
	    default	{ "CryptoMaterial" }
	}
	parm {
	    name	"lv_cryptolayerrank#"
            label	"Overlap Limit"
            type	int
            default	{ 6 }
	    range       { 1 10 }
	}
	parm {
	    name	"lv_cryptolayeroutputenable#"
	    type	toggle
	    default	{ 0 }
	    nolabel
	    joinnext
	}
	parm {
	    name	"lv_cryptolayeroutput#"
            label	"Different File"
	    type	file
	    disablewhen	"{ lv_cryptolayeroutputenable# != 1 }"
	    default	{ "$HIP/CryptoMaterial.exr" }
	    parmtag     { "filechooser_mode" "write" }
	}
	parm {
	    name	"lv_cryptolayersidecarenable#"
	    type	toggle
	    default	{ 0 }
	    nolabel
	    joinnext
	}
	parm {
	    name	"lv_cryptolayersidecar#"
            label	"Manifest File"
	    type	string
	    disablewhen	"{ lv_cryptolayersidecarenable# != 1 }"
	    default	{ "CryptoMaterial.json" }
	}
    }


    parm {
        SOHO_STRING(lv_exportcomponents, "Export Components",
		EXTRA_IMAGE_LABEL, "diffuse reflect coat refract volume sss")
	LAVA_PROP("renderer", "exportcomponents")
	menureplace {
	    "diffuse reflect sss"	"Basic Components"
	    "diffuse reflect coat refract volume sss"	"Common Components"
	}
    }
    parm {
        SOHO_STRING(lv_diffusecomponents, "Diffuse Components",
		RENDERING_SHADING_LABEL, "diffuse")
	LAVA_PROP("renderer", "diffusecomponents")
    }
    parm {
        SOHO_STRING(lv_refractcomponents, "Refract Components",
		RENDERING_SHADING_LABEL, "refract")
	LAVA_PROP("renderer", "refractcomponents")
    }
    parm {
        SOHO_STRING(lv_volumecomponents, "Volume Components",
		RENDERING_SHADING_LABEL, "volume")
	LAVA_PROP("renderer", "volumecomponents")
    }
    parm {
        SOHO_STRING(lv_ssscomponents, "SSS Components",
		RENDERING_SHADING_LABEL, "sss")
	LAVA_PROP("renderer", "ssscomponents")
    }

    parm {
        SOHO_STRING(lv_fogimports, "Variables Imported By Fog Shaders",
	    RENDERING_SHADING_LABEL, "")
	LAVA_PROP("renderer", "fogimports")
    }
    parm {
	SOHO_TOGGLE(lv_nesteddielectric,
	    "Enable Absorption and Nested Dielectrics",
	    RENDERING_SHADING_LABEL, 0)
	LAVA_PROP("renderer", "nesteddielectric")
    }
    parm {
	SOHO_TOGGLE(lv_constrainmaxrough,
	    "Constrain by Maximum Roughness",
	    RENDERING_SHADING_LABEL, 0)
	LAVA_PROP("renderer", "constrainmaxrough")
    }

    parm {
        SOHO_TOGGLE(lv_showextraplaneparms, "Show extra image plane parameters", EXTRA_IMAGE_LABEL, 0)
	invisible
    }
    // UV rendering parameters
    parm {
        SOHO_TOGGLE(lv_isuvrendering, "Is UV Rendering", RENDERING_RENDER_LABEL, 0)
	invisible
    }
    parm {
        SOHO_STRING(lv_uvcurrentuvobject, "UV Current UV Object", RENDERING_RENDER_LABEL, "")
        invisible
    }
    parm {
        SOHO_STRING(lv_uvcurrentcageobject, "UV Current Cage Object", RENDERING_RENDER_LABEL, "")
        invisible
    }
    parm {
        SOHO_STRING(lv_uvcurrenthiresobject, "UV Current Hires Object", RENDERING_RENDER_LABEL, "")
        invisible
    }
    group
    {
	name	ptexres
	parmtag	{ spare_category RENDERING_RENDER_LABEL }
	parm {
	    name	lv_ptexmapminres
	    label	"Minimum Map Resolution"
	    parmtag	{ spare_category RENDERING_RENDER_LABEL }
	    type	intvector2
	    default	{ 8 8 }
	    hidewhen	"{ lv_uvtype != \"ptex\" }"
	    LAVA_PROP("renderer", "ptexmapminres")
	    joinnext
	}
	parm {
	    name	lv_uvptexminresmenu
	    type	button
	    label	"Minimum Map Resolution Menu"
	    nolabel
	    parmtag	{ spare_category RENDERING_RENDER_LABEL }
	    callback    "opparm . lv_ptexmapminres ( $script_value $script_value )"
	    menumini    {
		"4"	"4 x 4"
		"8"	"8 x 8"
		"16"	"16 x 16"
		"32"	"32 x 32"
		"64"	"64 x 64"
	    }
	    hidewhen	"{ lv_uvtype != \"ptex\" }"
	}
	parm {
	    name	lv_ptexmapmaxres
	    label	"Maximum Map Resolution"
	    parmtag	{ spare_category RENDERING_RENDER_LABEL }
	    type	intvector2
	    default	{ 64 64 }
	    hidewhen	"{ lv_uvtype != \"ptex\" }"
	    LAVA_PROP("renderer", "ptexmapmaxres")
	    joinnext
	}
	parm {
	    name	lv_uvptexmaxresmenu
	    type	button
	    label	"Maximum Map Resolution Menu"
	    nolabel
	    parmtag	{ spare_category RENDERING_RENDER_LABEL }
	    callback    "opparm . lv_ptexmapmaxres ( $script_value $script_value )"
	    menumini    {
		"32"	"32 x 32"
		"64"	"64 x 64"
		"128"	"128 x 128"
		"256"	"256 x 256"
		"512"	"512 x 512"
	    }
	    hidewhen "{ lv_uvtype != \"ptex\" }"
	}
    }
    parm {
        SOHO_FLOAT(lv_ptexmapscale, "Ptex Resolution Scale",
		RENDERING_RENDER_LABEL, 1.0)
        LAVA_PROP("renderer", "ptexmapscale")
    }
    parm {
        SOHO_STRING(lv_ptexscaleattr, "Ptex Scale Prim Attribute",
		RENDERING_RENDER_LABEL, "ptexscale")
        LAVA_PROP("renderer", "ptexscaleattr")
    }
    parm {
        SOHO_TOGGLE(lv_ptexrelativescale, "Ptex Use Relative Scale",
		RENDERING_RENDER_LABEL, 1)
        LAVA_PROP("renderer", "ptexrelativescale")
    }
    parm {
        name	    lv_uvshadingquality
        label	    "Shading Quality"
        type	    float
        default     { 1 }
        help        "Controls the sharpness of baked textures. Higher values produce sharper results."
        parmtag     { spare_category RENDERING_RENDER_LABEL }
        LAVA_PROP("renderer", "uvshadingquality")
    }
    parm {
        SOHO_TOGGLE(lv_ptexwraporient, "Orient Ptex Subfaces Clockwise",
		RENDERING_RENDER_LABEL, 1)
        LAVA_PROP("renderer", "ptexwraporient")
    }
    parm {
        SOHO_TOGGLE(lv_uv_flip_normal, "Reverse Normals",
		RENDERING_RENDER_LABEL, 0)
    }
    parm {
        SOHO_FLOAT(lv_uv_ray_bias, "Ray Bias", RENDERING_RENDER_LABEL, 0.001)
    }
    parm {
        SOHO_FLOAT(lv_uv_ray_maxdist, "Ray Max Distance",
		RENDERING_RENDER_LABEL, -1.0)
    }
    parm {
        SOHO_INT(lv_uv_unwrap_method, "Unwrap Method",
		RENDERING_RENDER_LABEL, 0)
        menu {
            "0"	"UV To Surface"
            "1"	"Trace Closest Surface"
            "2"	"UV Match"
        }
    }
    parm {
        SOHO_STRING(lv_uvattribute, "UV Attribute",
		RENDERING_RENDER_LABEL, "uv")
        LAVA_PROP("renderer", "uvattribute")
    }
    parm {
        SOHO_INT(lv_uvborderpixels, "UV Additional Pixels at Border",
		RENDERING_RENDER_LABEL, 4)
        LAVA_PROP("renderer", "uvborderpixels")
    }
    parm {
        SOHO_TOGGLE(lv_uvhidecage, "Hide UV cage objects",
		RENDERING_RENDER_LABEL, 1)
    }
    parm {
        SOHO_STRING(lv_uvlightpaths, "Exclude Light Paths",
		RENDERING_RENDER_LABEL, "-diffuse & -volume")
    }
    parm {
        SOHO_TOGGLE(lv_uvmkpath, "Create Intermediate Directories",
		RENDERING_RENDER_LABEL, 1)
        LAVA_PROP("renderer", "uvmkpath")
    }
    parm {
        SOHO_STRING(lv_uvpostprocess, "UDIM Post Process",
		RENDERING_RENDER_LABEL, "diffusefill")
        menu {
            "none"		"No Post Processing"
            "borderfill"	"Border Expansion"
            "backgroundfill"	"Fill Background With Average Color"
            "diffusefill"	"Diffuse Fill"
        }
	hidewhen	"{ lv_uvtype != \"udim\" }"
        LAVA_PROP("renderer", "uvpostprocess")
    }
    parm {
        SOHO_STRING(lv_uvtype, "Texture Format", RENDERING_RENDER_LABEL, "udim")
        menu {
            "udim"	"UDIM"
            "ptex"	"Ptex"
        }
        LAVA_PROP("renderer", "uvtype")
    }
    parm {
        SOHO_PARM(lv_uvunwrapres, "UV Unwrap Resolution",
		RENDERING_RENDER_LABEL, int, 2, 1024 1024)
        LAVA_PROP("image", "resolution")
    }

#define QUICK_PLANE(NAME, LABEL) \
	parm { SOHO_TOGGLE(NAME, LABEL, EXTRA_IMAGE_LABEL, 0) }
#define QUICK_PLANE_CH(VAR, NAME, LABEL) \
	parm { SOHO_TOGGLE(NAME, LABEL, EXTRA_IMAGE_LABEL, 0) } \
	parm { \
	    SOHO_STRING(NAME##_channel, VAR##" Channel Name", \
		    EXTRA_IMAGE_LABEL, VAR) \
	    disablewhen "{ \""#NAME"\" == 0 }" \
	}
    QUICK_PLANE_CH("P",  lv_quickplane_P,	    "Shading Position (P)")
    QUICK_PLANE_CH("Pz", lv_quickplane_Pz,	    "Shading Depth (Pz)")
    QUICK_PLANE_CH("N",  lv_quickplane_N,	    "Shading Normal (N)")

    QUICK_PLANE(lv_quickplane_all_comp,		    "Combined Lighting (per-component)")
    QUICK_PLANE(lv_quickplane_all_emission,	    "Combined Emission")
    QUICK_PLANE(lv_quickplane_direct_comp,	    "Direct Lighting (per-component)")
    QUICK_PLANE(lv_quickplane_indirect_comp,	    "Indirect Lighting (per-component)")

    QUICK_PLANE(lv_quickplane_direct_noshadow,	    "Direct Unshadowed")
    QUICK_PLANE(lv_quickplane_direct_noshadow_comp, "Direct Unshadowed (per-component, PBR only)")
    QUICK_PLANE(lv_quickplane_direct_samples,	    "Direct Ray Samples")
    QUICK_PLANE(lv_quickplane_indirect_samples,	    "Indirect Ray Samples")
    QUICK_PLANE(lv_quickplane_sss,		    "SSS Single/Multi")

    // UV rendering planes
    QUICK_PLANE_CH("Cu", lv_quickplane_Cu,	    "Curvature (Cu)")
    QUICK_PLANE_CH("Cv", lv_quickplane_Cv,	    "Cavity (Cv)")
    QUICK_PLANE_CH("Nt", lv_quickplane_Nt,	    "Tangent-Space Normal (Nt)")
    QUICK_PLANE_CH("Ds", lv_quickplane_Ds,	    "Displacement (Ds)")
    QUICK_PLANE_CH("Vd", lv_quickplane_Vd,	    "Vector Displacement (Vd)")
    QUICK_PLANE_CH("Vdt",lv_quickplane_Vdt,	    "Tangent-Space Vector Displacement (Vdt)")
    QUICK_PLANE_CH("Oc", lv_quickplane_Oc,	    "Occlusion (Oc)")
    QUICK_PLANE_CH("Th", lv_quickplane_Th,	    "Thickness (Th)")
    QUICK_PLANE_CH("Ab", lv_quickplane_Ab,	    "Surface Alpha (Ab)")
    QUICK_PLANE_CH("basecolor", lv_quickplane_basecolor,    "Surface Unlit Base Color (basecolor)")
    QUICK_PLANE_CH("diffcolor", lv_quickplane_diffcolor,    "Surface Unlit Diffuse Color (diffcolor)")
    QUICK_PLANE_CH("speccolor", lv_quickplane_speccolor,    "Surface Unlit Specular Color (speccolor)")
    QUICK_PLANE_CH("emitcolor", lv_quickplane_emitcolor,    "Surface Emission Color (emitcolor)")
    QUICK_PLANE_CH("ssscolor", lv_quickplane_ssscolor,	    "Surface SSS Color (ssscolor)")
    QUICK_PLANE_CH("metallic", lv_quickplane_metallic,	    "Surface Metallic (metallic)")
    QUICK_PLANE_CH("specrough", lv_quickplane_specrough,    "Surface Specular Roughness (specrough)")
#undef QUICK_PLANE

    multiparm {
	name	lv_numpathmap
	label	"Path Map Entries"
	parmtag	{ spare_category	RENDERING_DRIVER_LABEL }

	parm {
	    SOHO_PARM("lv_pathmap#", "Source/Target Map",
		    RENDERING_DRIVER_LABEL, string, 2, "" "")
	}
    }
    parm {
        SOHO_TOGGLE(lv_extractimageplanes, "Extract Image Planes",
		EXTRA_IMAGE_LABEL, 0)
	LAVA_PROP("renderer", "extractimageplanes")
    }
    parm {
        SOHO_TOGGLE(lv_extractremoveintermediate, "Remove Intermediate Output",
		EXTRA_IMAGE_LABEL, 0)
        hidewhen "{ \"lv_extractimageplanes\" == 0 }"
	LAVA_PROP("renderer", "extractremoveintermediate")
    }
    parm {
        SOHO_STRING(lv_extractimageplanesformat, "Extract Format",
		EXTRA_IMAGE_LABEL, "")
        VEX_IMAGE_FORMAT_MENU
        hidewhen "{ \"lv_extractimageplanes\" == 0 }"
	LAVA_PROP("renderer", "extractimageplanesformat")
    }
    parm {
	SOHO_STRING(lv_extractlinearplanes, "Extracted Linear Planes",
		"Driver",
		"`propertys('lv_quickplane_Nt_channel','Nt')`,`propertys('lv_quickplane_Ds_channel','Ds')`,`propertys('lv_quickplane_Vd_channel','Vd')`,`propertys('lv_quickplane_Vdt_channel','Vdt')`,`propertys('lv_quickplane_Cv_channel','Cv')`,`propertys('lv_quickplane_Th_channel','Th')`,`propertys('lv_quickplane_Cu_channel','Cu')`,`propertys('lv_quickplane_N_channel','N')`,`propertys('lv_quickplane_P_channel','P')`"
	)
	LAVA_PROP("renderer", "extractlinearplanes")
        hidewhen "{ \"lv_extractimageplanes\" == 0 }"
    }
    parm {
	SOHO_STRING(lv_bake_alphadestplanes, "Copy Alpha To Planes",
		"Driver",
		"`propertys('lv_quickplane_basecolor_channel','basecolor')`,`propertys('lv_quickplane_diffcolor_channel','diffcolor')`"
	)
	LAVA_PROP("renderer", "bake_alphadestplanes")
        hidewhen "{ \"lv_extractimageplanes\" == 0 }"
    }
    parm {
        SOHO_STRING(lv_extractseparator, "Name Separator",
		EXTRA_IMAGE_LABEL, "_")
        hidewhen "{ \"lv_extractimageplanes\" == 0 }"
	LAVA_PROP("renderer", "extractseparator")
    }
    parm {
	name	lv_channel_names_seperator_bar
	label	"Separator"
	type	separator
	parmtag	{ spare_category EXTRA_IMAGE_LABEL }
    }
    multiparm {
	name	lv_numaux
	label	"Extra Image Planes"
	parmtag	{ spare_category	EXTRA_IMAGE_LABEL }

	parm {
	    SOHO_TOGGLE("lv_disable_plane#", "Disable Plane #",
		    EXTRA_IMAGE_LABEL, 0)
	    joinnext
	}
	parm {
	    SOHO_TOGGLE("lv_excludedcm_plane#", "Exclude from DCM",
		    EXTRA_IMAGE_LABEL, 0)
	    hidewhen	"{ lv_deepresolver != camera }"
	}
	parm {
	    SOHO_STRING("lv_variable_plane#", "VEX Variable",
		    EXTRA_IMAGE_LABEL, "")
	    menureplace {
		[ "__import__('toolutils').parseDialogScriptMenu('MantraPlanes', forhscript=False)" ]
		language	python
	    }
	    disablewhen	"{ \"lv_disable_plane#\" == 1 }"
	    callback	"`pythonexprs(\"__import__('toolutils').updatePlaneType($script_multiparm_index, \'$script_value\')\")`"
	}
	parm {
	    SOHO_STRING("lv_vextype_plane#", "VEX Type",
		    EXTRA_IMAGE_LABEL, "vector")
	    VEX_TYPE_MENU
	    disablewhen	"{ \"lv_disable_plane#\" == 1 }"
	}
	parm {
	    SOHO_STRING("lv_channel_plane#", "Channel Name", EXTRA_IMAGE_LABEL, "")
	    VEX_DISABLE_AUXPLANE
	}
	parm {
	    SOHO_TOGGLE("lv_usefile_plane#", "Different File", EXTRA_IMAGE_LABEL, 0)
	    hidewhen "{ \"lv_disable_plane#\" == 1 } { \"lv_variable_plane#\" == \"\" } { \"lv_picture\" == \"ip\" }"
	    nolabel
	    joinnext
	}
	parm {
	    SOHO_IMAGE("lv_filename_plane#", "Different File", EXTRA_IMAGE_LABEL, "")
	    parmtag	{ filechooser_mode	"write" }
	    hidewhen "{ \"lv_disable_plane#\" == 1 } { \"lv_variable_plane#\" == \"\" } { \"lv_picture\" == \"ip\" }"
	    disablewhen "{ \"lv_usefile_plane#\" == 0 }"
	    menureplace {
		[ "echo `pythonexprs(\"__import__('toolutils').parseDialogScriptMenu('FBrender')\")`" ]
		[ ]
	    }
	}
	parm {
	    SOHO_STRING("lv_quantize_plane#", "Quantize", EXTRA_IMAGE_LABEL, "half")
	    VEX_QUANTIZE_MENU
	    VEX_DISABLE_AUXPLANE
	    help	"image:quantize"
	}
	parm {
	    SOHO_STRING("lv_sfilter_plane#", "Sample Filter",
			    EXTRA_IMAGE_LABEL, "alpha")
	    menu	{
		"alpha"		"Opacity Filtering"
		"fullopacity"	"Full Opacity Filtering"
		"closest"	"Closest Surface"
	    }
	    VEX_DISABLE_AUXPLANE
	    help	"image:sfilter"
	}
	parm {
	    SOHO_STRING("lv_pfilter_plane#", "Pixel Filter",
			    EXTRA_IMAGE_LABEL, "")
	    VEX_AUX_PIXEL_FILTER_MENU
	    VEX_DISABLE_AUXPLANE
	    help	"image:pfilter"
	}
	parm {
	    SOHO_FLOAT("lv_gamma_plane#", "Gamma", EXTRA_IMAGE_LABEL, 1)
	    range	{ 0.001 3 }
	    VEX_DISABLE_AUXPLANE
	    hidewhen "{ \"lv_showextraplaneparms\" == 0 }"
	    help	"image:gamma"
	}
	parm {
	    SOHO_FLOAT("lv_gain_plane#", "Gain", EXTRA_IMAGE_LABEL, 1)
	    range	{ 0.001 10 }
	    VEX_DISABLE_AUXPLANE
	    hidewhen "{ \"lv_showextraplaneparms\" == 0 }"
	    help	"image:gain"
	}
	parm {
	    SOHO_FLOAT("lv_dither_plane#", "Dither", EXTRA_IMAGE_LABEL, 0.5)
	    range	{ 0 1 }
	    VEX_DISABLE_AUXPLANE
	    hidewhen "{ \"lv_showextraplaneparms\" == 0 }"
	    help	"image:dither"
	}
	parm {
	    SOHO_FLOAT("lv_whitepoint_plane#", "White Point", EXTRA_IMAGE_LABEL, 1)
	    range	{ 0 1 }
	    VEX_DISABLE_AUXPLANE
	    hidewhen "{ \"lv_showextraplaneparms\" == 0 }"
	    help	"image:whitepoint"
	}
	parm {
	    SOHO_TOGGLE("lv_componentexport#", "Export variable for each component", EXTRA_IMAGE_LABEL, 0)
	    VEX_DISABLE_AUXPLANE_NONLPE
	}
	parm {
	    SOHO_INT("lv_lightexport#", "Light Exports",
			    "", 0)
	    menu {
		"0"	"No light exports"
		"1"	"Export variable for each light"
		"2"	"Merge all lights into single channel"
	    }
	    VEX_DISABLE_AUXPLANE_NONLPE
	}
	parm {
	    name	"lv_lightexport_scope#"
	    label	"Light Mask"
	    type	oplist
	    default	{ "*" }
	    parmtag	{ opfilter "!!OBJ/LIGHT!!" }
	    parmtag	{ opexpand "1" }
	    VEX_DISABLE_AUXPLANE
	    hidewhen "{ \"lv_disable_plane#\" == 1 } { \"lv_variable_plane#\" == \"\" } { \"lv_lightexport#\" == 0 }"
	}
	parm {
	    name	"lv_lightexport_select#"
	    label	"Light Selection"
	    type	string
	    default	{ "*" }
	    hidewhen "{ \"lv_disable_plane#\" == 1 } { \"lv_variable_plane#\" == \"\" } { \"lv_lightexport#\" == 0 }"
	}
    }

    // Image format options
    collection {
	name	common_format_options
	label	"Common Meta Data"
	parmtag	{ spare_category	META_DATA_LABEL }
	parm	{
	    SOHO_STRING(lv_image_artist, "Artist", META_DATA_LABEL, "")
	    LAVA_PROP("imageoption", "artist")
	}
	parm	{
	    SOHO_STRING(lv_image_comment, "Comment", META_DATA_LABEL, "")
	    LAVA_PROP("imageoption", "comment")
	}
	parm	{
	    SOHO_STRING(lv_image_hostname, "Hostname", META_DATA_LABEL, "")
	    LAVA_PROP("imageoption", "hostname")
	}
    }

    collection {
	name	exr_data_window_options
	label	"EXR Data Window Options"
	parmtag	{ spare_category	META_DATA_LABEL }
	parm	{
	    SOHO_TOGGLE(lv_setexrdatawindow, "Set EXR Data Window", META_DATA_LABEL, 0)
	    LAVA_PROP("image", "setexrdatawindow")
	}
	parm	{
	    SOHO_INT(lv_exrdatawindowpadding, "EXR Data Window Padding", META_DATA_LABEL, 0)
	    hidewhen "{ lv_setexrdatawindow == 0 }"
	    LAVA_PROP("image", "exrdatawindowpadding")
	}
	parm	{
	    SOHO_FLOAT(lv_exrdatawindowthreshold, "EXR Data Window Threshold", META_DATA_LABEL, 0.0)
	    hidewhen "{ lv_setexrdatawindow == 0 }"
	    LAVA_PROP("image", "exrdatawindowthreshold")
	}
	parm	{
	    SOHO_STRING(lv_exrdatawindowplanes, "EXR Data Window Planes", META_DATA_LABEL, "*")
	    hidewhen "{ lv_setexrdatawindow == 0 }"
	    LAVA_PROP("image", "exrdatawindowplanes")
	}
    }

    parm	{
	SOHO_STRING(lv_image_tiff_compression, "TIFF Compression",
			    META_DATA_LABEL, "LZW")
	menu {
	    "None"			"No compression"
	    "LZW"			"LZW Compression"
	    "AdobeDeflate"		"Adobe Deflate"
	    "PackBits"		"PackBits"
	    "JPEG"			"JPEG"
	    "PixarLog"		"Pixar Log"
	    "SGILog"		"LogLuv"
	    "SGILog24"		"LogLuv (24 bit)"
	}
	LAVA_PROP("imageoption", "TIFF.compression")
    }
    parm	{
	SOHO_STRING(lv_image_tiff_predictor, "TIFF Predictor",
			    META_DATA_LABEL, "auto")
	menu {
	    "auto"		"Auto-detect based on format"
	    "none"		"No prediction"
	    "horizontal"	"Horizontal differencing"
	}
	LAVA_PROP("imageoption", "TIFF.predictor")
    }
    parm	{
	SOHO_STRING(lv_image_rat_compression, "RAT Compression",
			    META_DATA_LABEL, "deflate")
	menu {
	    "none"		"No compression"
	    "deflate"	"GZip Deflate Compression"
	}
	LAVA_PROP("imageoption", "RAT.compression")
    }
    parm	{
	SOHO_TOGGLE(lv_image_rat_makemips, "RAT Generate MIP Maps",
			    META_DATA_LABEL, 1)
	LAVA_PROP("imageoption", "RAT.makemips")
    }

    parm	{
	SOHO_INT(lv_image_jpeg_quality, "JPEG Quality",
		    META_DATA_LABEL, 100)
	range	{ 20 100 }
	LAVA_PROP("imageoption", "JPEG.quality")
    }

    parm {
	SOHO_STRING(lv_image_cineon_space, "Cineon Color Space",
			    META_DATA_LABEL, "lin")
	menu {
	    "lin"	"Linear"
	    "log"	"Logarithmic (unconverted)"
	}
	LAVA_PROP("imageoption", "Cineon.cinspace")
    }
    parm {
	SOHO_FILE(lv_image_cineon_lut, "Cineon LUT",
			    META_DATA_LABEL, "")
	parmtag	{ filechooser_mode	"read" }
	LAVA_PROP("imageoption", "Cineon.cinlut")
    }
    parm {
	SOHO_INT(lv_image_cineon_whitepoint, "Cineon White Point",
			    META_DATA_LABEL, 685)
	range	{ 0 1023 }
	LAVA_PROP("imageoption", "Cineon.cinwhite")
    }
    parm {
	SOHO_FLOAT(lv_image_cineon_gamma, "Cineon Gamma",
			    META_DATA_LABEL, 0.6)
	range	{ 0.001 4 }
	LAVA_PROP("imageoption", "Cineon.cingamma")
    }
    parm {
	name	lv_overscan
	label	"Image Overscan"
	parmtag	{ spare_category "View" }
	type	int
	size	2
	default	{ 0 0 }
	range	{ 0 100 }
    }
    parm {
	SOHO_TOGGLE(lv_image_exr_postprocess, "Enable EXR Post Processing",
			    META_DATA_LABEL, 1)
	LAVA_PROP("imageoption", "OpenEXR.enablepostprocess")
    }
    parm	{
	SOHO_STRING(lv_image_exr_compression, "EXR Compression",
			    META_DATA_LABEL, "zips")
	menu {
	    "none"		"No compression"
	    "dwab"		"DWA-B, Lossy and Fast (256-scanline block)"
	    "dwaa"		"DWA-A, Lossy and Fast (32-scanline block)",
	    "piz"		"PIZ Wavelet"
	    "rle"		"Runlength Encoding"
	    "zips"		"ZIP (Single scanline)"
	    "zip"		"ZIP (Multi-scanline blocks)"
	    "piz"		"PXR24 (32 bit float compression, lossy)"
	    "b44"		"B44 (4x4 block compression, lossy)"
	    "b44a"		"B44A (4x4 block extra compression, lossy)"
	}
	LAVA_PROP("imageoption", "OpenEXR.compression")
    }
    parm {
	SOHO_FLOAT(lv_image_exr_dwa_level, "DWA Compression Level",
			    META_DATA_LABEL, 85)
	range		 { 1 200 }
    	hidewhen	"{ lv_image_exr_compression != dwab lv_image_exr_compression != dwaa }"
	LAVA_PROP("imageoption", "OpenEXR.dwa_compression")
    }
    parm	{
	SOHO_STRING(lv_image_exr_storage, "EXR Storage",
			    META_DATA_LABEL, "scan")
	menu {
	    "scan"		"Scanline Storage"
	    "tile"		"Tile Storage"
	}
	LAVA_PROP("imageoption", "OpenEXR.storage")
    }
    parm	{
	SOHO_STRING(lv_image_exr_attributes, "EXR Attributes",
			    META_DATA_LABEL, "{}")
	LAVA_PROP("imageoption", "OpenEXR.attributes")
    }
    parm	{
	SOHO_STRING(lv_image_png_frompremult, "PNG Premultiplied",
		    META_DATA_LABEL, "premult")
	menu	{
	    "premult"	"Premultiplied"
	    "unpremult"	"Un-premultiplied"
	}
	LAVA_PROP("imageoption", "PNG.frompremult")
    }
    parm {
	SOHO_STRING(lv_image_mplay_rendermode, "MPlay Render Mode",
		META_DATA_LABEL, "current")
	menu {
	    "current"	"Render to current sequence"
	    "new"		"Start new sequence"
	}
	LAVA_PROP("imageoption", "IPlay.rendermode")
    }
    parm {
	SOHO_STRING(lv_image_mplay_framemode, "MPlay Frame Mode",
		META_DATA_LABEL, "append")
	menu {
	    "append"	"Append Frames To Sequence"
	    "match"	"Match Houdini Frame Numbers (overwrite frame)"
	}
	LAVA_PROP("imageoption", "IPlay.framemode")
    }

    parm {
	name	lv_image_mplay_label
	label	"MPlay Session Label"
	parmtag { spare_category META_DATA_LABEL }
	size	1
	type	string
	//default { "`pythonexprs(\"__import__('os').getpid()\")`" }
	default { "" }
	menureplace {
	    "`pythonexprs(\"__import__('os').getpid()\")`" "One per Houdini Process"
	    "$HIPNAME"	"One per Houdini File Name (.hip)"
	    "$OS"	"One per Output Driver Name (ROP)"
	    ""		"One MPlay session only"
	}
	LAVA_PROP("imageoption", "IPlay.label")
    }
    parm {
	name	lv_image_mplay_bgimage
	label	"MPlay Background Image"
	parmtag { spare_category META_DATA_LABEL }
	size	1
	type	string
	default { "" }
	LAVA_PROP("imageoption", "IPlay.bgimage")
    }
    collection
    {
        name    lv_remote_mplay_display
        label   "Remote MPlay Display"
        parmtag { spare_category        META_DATA_LABEL }
        parm
        {
            SOHO_STRING("lv_image_mplay_sockethost",
                        "MPlay Remote Host", META_DATA_LABEL, "")
            help "(Advanced) The name of the remote host where mplay is running"
	    LAVA_PROP("imageoption", "IPlay.sockethost")
        }
        parm
        {
            SOHO_INT("lv_image_mplay_socketport",
                        "MPlay Remote Port", META_DATA_LABEL, "")
            help "(Advanced) The socket port number associated with mplay on the remote host (see mplay -K)"
	    LAVA_PROP("imageoption", "IPlay.socketport")
        }
    }
    parm {
	SOHO_STRING(lv_image_mplay_direction, "MPlay Tile Order",
		META_DATA_LABEL, "middle")
	menu {
	    "middle"	"Interactive (starting in middle)"
	    "top"		"Top down"
	    "bottom"	"Bottom up"
	    "hilbert"	"Hilbert Curve"
	}
	LAVA_PROP("imageoption", "IPlay.direction")
    }
    parm {
	SOHO_FLOAT(lv_image_mplay_gamma, "MPlay Gamma",
		META_DATA_LABEL, 2.2)
	range	{ 0.001	4 }
	LAVA_PROP("imageoption", "IPlay.gamma")
    }
    parm {
	SOHO_FILE(lv_image_mplay_lut, "MPlay Display LUT",
		META_DATA_LABEL, "")
	parmtag	{ filechooser_mode	"read" }
	LAVA_PROP("imageoption", "IPlay.lut")
    }

    //
    // Image parameters
    collection {
	name	override_resolution
	label	"Override Res"
	parmtag	{ spare_category	OUTPUT_LABEL }
	parm	{
	    name	override_camerares
	    label	"Override Camera Resolution"
	    parmtag	{ spare_category	OUTPUT_LABEL }
	    type	toggle
	    default	{ 0 }
	}
	parm {
	    name	res_fraction
	    label	"Resolution Scale"
	    parmtag	{ spare_category	OUTPUT_LABEL }
	    type	string
	    default	{ "0.5" }
	    menu	{
		"0.1"		"1/10 (One Tenth Resolution)"
		"0.2"		"1/5 (One Fifth Resolution)"
		"0.25"		"1/4 (Quarter Resolution)"
		"0.3333333"	"1/3 (One Third Resolution)"
		"0.5"		"1/2 (Half Resolution)"
		"0.6666666"	"2/3 (Two Thirds Resolution)"
		"0.75"		"3/4 (Three Quarter Resolution)"
		"specific"	"User Specified Resolution"
	    }
	    hidewhen	"{ override_camerares == 0 }"
	}
	parm {
	    name	res_override
	    label	Resolution
	    parmtag	{ spare_category	OUTPUT_LABEL }

	    type	intvector2
	    default	{ 1280 720 }
	    disablewhen	"{ res_fraction != \"specific\" }"
	    hidewhen	"{ override_camerares == 0 }"
	    joinnext
	}
	parm {
	    name	res_overrideMenu
	    label	"Choose Resolution"
	    parmtag	{ spare_category	OUTPUT_LABEL }
	    type	button
	    nolabel
	    callback	"opparm . res_override ( `arg(\"$script_value\", 0)` `arg(\"$script_value\", 1)` aspect_override ( `arg(\"$script_value\", 2)` )"
	    disablewhen	"{ res_fraction != \"specific\" }"
	    hidewhen	"{ override_camerares == 0 }"
	    menumini	{
		RESOLUTION_MENU
	    }
	}
	parm {
	    name	aspect_override
	    label	"Pixel Aspect Ratio"
	    parmtag	{ spare_category OUTPUT_LABEL }
	    type	float
	    size	1
	    default	{ 1 }
	    range	{ 0.05 2 }
	    hidewhen	"{ override_camerares == 0 }"
	    disablewhen	"{ res_fraction != \"specific\" }"
	}
    }
    collection
    {
	name	lv_tiled_rendering
	label	"Tiled Renders"
	parmtag	{ spare_category	OUTPUT_LABEL }
	parm	{
	    name	lv_tile_render
	    label	"Tiled Render"
	    parmtag	{ spare_category	OUTPUT_LABEL }
	    type	toggle
	    default	{ 0 }
	}
	parm
	{
	    SOHO_INT(lv_tile_count_x, "Horizontal Tiles", OUTPUT_LABEL, 4)
	    range	{ 1! 8 }
	    hidewhen	"{ lv_tile_render == 0 }"
	}
	parm
	{
	    SOHO_INT(lv_tile_count_y, "Vertical Tiles", OUTPUT_LABEL, 4)
	    range	{ 1! 8 }
	    hidewhen	"{ lv_tile_render == 0 }"
	}
	parm
	{
	    SOHO_INT(lv_tile_index, "Tile Index", OUTPUT_LABEL, 0)
	    range	{ 0 63 }
	    hidewhen	"{ lv_tile_render == 0 }"
	}
    }
    parm {
	SOHO_TOGGLE(lv_writecheckpoint, "Output Checkpoint Files", OUTPUT_LABEL, 1)
	LAVA_PROP("image", "writecheckpoint")
    }
    parm {
	SOHO_TOGGLE(lv_readcheckpoint, "Resume from Checkpoint Files", OUTPUT_LABEL, 0)
	LAVA_PROP("image", "readcheckpoint")
    }
    collection
    {
	name lv_checkpoint_naming
	parmtag { spare_category OUTPUT_LABEL }
	parm {
	    SOHO_TOGGLE(lv_overridecheckpointname, "Override Checkpoint File Name", OUTPUT_LABEL, 0)
	    LAVA_PROP("image", "overridecheckpointname")
	}
	parm {
	    name        lv_checkpointname
	    label       "Checkpoint File Name"
	    parmtag     { spare_category OUTPUT_LABEL }
	    size        1
	    type        string
	    default     { "`chs(\"lv_picture\")`.mantra_checkpoint" }
	    hidewhen    "{ lv_overridecheckpointname == 0 }"
	    LAVA_PROP("image", "checkpointname")
	}
    }
    parm {
	SOHO_INT(lv_checkpointcachesize, "Checkpoint Cache Size (MB)", OUTPUT_LABEL, 1)
	range { 1 100000 }
	logarithmic
	LAVA_PROP("image", "checkpointcachesize")
    }
    parm {
	SOHO_FLOAT(lv_checkpointperiod, "Checkpoint Period (s)", OUTPUT_LABEL, 30)
	LAVA_PROP("image", "checkpointperiod")
    }

    //
    // Baking parameters
    parm {
	SOHO_TOGGLE(lv_bake_skipcf, "Disable Lighting/Emission", RENDERING_BAKING_LABEL, 0)
    }
    parm {
	SOHO_TOGGLE(lv_bake_layerexport, "Add Baking Exports to Shader Layers", RENDERING_BAKING_LABEL, 0)
    }
    parm {
	SOHO_INT(lv_bake_samples, "Baking Samples", RENDERING_BAKING_LABEL, 16)
	range	{ 1 256 }
    }
    parm {
	SOHO_TOGGLE(lv_bake_normalizep, "Fit P To Object Bounding Box", RENDERING_BAKING_LABEL, 1)
	disablewhen	"{ lv_quickplane_P == 0 }"
	LAVA_PROP("renderer", "bake_normalizep")
    }
    collection
    {
	name lv_bake_tangentnormal_group
	parmtag { spare_category RENDERING_BAKING_LABEL }
	parm {
	    SOHO_TOGGLE(lv_bake_usemikkt, "Use MikkT Tangent Space", RENDERING_BAKING_LABEL, 0)
	    LAVA_PROP("renderer", "bake_usemikkt")
	}
	parm {
	    SOHO_TOGGLE(lv_bake_normalsfaceforward, "Tangent Normal Face Forward", RENDERING_BAKING_LABEL, 0)
	    LAVA_PROP("renderer", "bake_normalsfaceforward")
	}
	parm {
	    SOHO_TOGGLE(lv_bake_tangentnormalflipx, "Tangent Normal Flip X", RENDERING_BAKING_LABEL, 0)
	}
	parm {
	    SOHO_TOGGLE(lv_bake_tangentnormalflipy, "Tangent Normal Flip Y", RENDERING_BAKING_LABEL, 0)
	}
	parm {
	    SOHO_TOGGLE(lv_bake_tangentnormalincludedisp, "Include Displacement In Tangent Normal", RENDERING_BAKING_LABEL, 1)
	}
    }
    parm {
	SOHO_FLOAT(lv_bake_occlusionbias, "Occlusion Bias", RENDERING_BAKING_LABEL, 0.5)
	range	{ 0 1 }
    }
    collection
    {
	name lv_bake_cavity_group
	parmtag { spare_category RENDERING_BAKING_LABEL }
	parm {
	    SOHO_FLOAT(lv_bake_cavitydistance, "Cavity Distance", RENDERING_BAKING_LABEL, 1.0)
	    range	{ 0 1 }
	}
	parm {
	    SOHO_FLOAT(lv_bake_cavitybias, "Cavity Bias", RENDERING_BAKING_LABEL, 0.5)
	    range	{ 0 1 }
	}
    }
    collection
    {
	name lv_bake_curvature_group
	parmtag { spare_category RENDERING_BAKING_LABEL }
	parm {
	    SOHO_TOGGLE(lv_bake_curvatureocc, "Occlusion-based Curvature", RENDERING_BAKING_LABEL, 0)
	}
	parm {
	    SOHO_FLOAT(lv_bake_curvaturesdist, "Curvature Ray Distance", RENDERING_BAKING_LABEL, 0.1)
	    disablewhen	"{ lv_bake_curvatureocc == 0 }"
	    range	{ 0 1 }
	}
	parm {
	    SOHO_FLOAT(lv_bake_curvaturescale, "Curvature Scale", RENDERING_BAKING_LABEL, 1.0)
	    range	{ 0 1 }
	}
	parm {
	    SOHO_FLOAT(lv_bake_curvaturebias, "Curvature Bias", RENDERING_BAKING_LABEL, 0.5)
	    range	{ 0 1 }
	}
    }
    parm {
	SOHO_STRING(lv_bake_udimrange, "Custom UDIM Range", RENDERING_BAKING_LABEL, "")
	LAVA_PROP("renderer", "bake_udimrange")
    }

    parm
    {
	SOHO_STRING(lv_auto_engine_procedural, "Auto Engine Procedural",
		RENDERING_GEOMETRY_LABEL, "")
	menu {
	    ""	"Use SOP Geometry"
	    "enginepointgen"	"Create HDA for Point Generation"
	    "enginecurvegen"	"Create HDA for Curve Generation"
	    "engineinstance"	"Create HDA for Full Engine Instancing"
	}
    }
    parm
    {
	SOHO_STRING(lv_auto_engine_boundsop, "Engine Procedural - Bounding Box SOP",
		RENDERING_GEOMETRY_LABEL, "")
    }
    parm
    {
	SOHO_TOGGLE(lv_auto_engine_unload,
		"Engine Procedural - Unload SOP Geometry"
		RENDERING_GEOMETRY_LABEL, 1)
	disablewhen	"{ lv_auto_engine_procedural == 0 }"
    }
    parm
    {
	SOHO_TOGGLE(lv_auto_engine_requirelod,
		"Engine Procedural - HDA Uses LOD Parameter"
		RENDERING_GEOMETRY_LABEL, 0)
	disablewhen	"{ lv_auto_engine_procedural == 0 }"
    }
    parm
    {
	SOHO_TOGGLE(lv_auto_engine_doorient,
		"Engine Procedural - Orient HDA instances to points"
		RENDERING_GEOMETRY_LABEL, 1)
	disablewhen	"{ lv_auto_engine_procedural == 0 }"
    }
    parm
    {
	SOHO_STRING(lv_tile_filename_suffix,
		    "Tile Suffix", OUTPUT_LABEL, "_tile%02d_")
	hidewhen	"{ lv_tile_render == 0 }"
    }
    parm {
	SOHO_TOGGLE(allowmotionblur, "Allow Motion Blur", RENDERING_MAIN_LABEL, 0)
    }
    parm {
	SOHO_FLOAT(shutter, "Shutter Time", "Sampling", 0.5)
	range	{ 0 1 }
	disablewhen	"{ allowmotionblur == 0 }"
    }
    parm {
	SOHO_FLOAT(shutteroffset, "Shutter Offset", RENDERING_MAIN_LABEL, 1.0)
	range	{ -1 1 }
	hidewhen	"{ allowmotionblur == 0 }"
    }
    parm {
	name	motionstyle
	label	"Motion Blur Style"
	parmtag	{ spare_category RENDERING_SAMPLING_LABEL }
	type	string
	default	{ "trailing" }
	menu	{
	    "leading"	"Leading Blur"
	    "centered"	"Frame Centered Blur"
	    "trailing"	"Trailing Blur"
	}
	disablewhen	"{ allowmotionblur == 0 }"
    }
    parm {
	SOHO_INT(xform_motionsamples, "Xform Time Samples", RENDERING_MAIN_LABEL, 2)
	range	{ 1 10 }
	hidewhen	"{ allowmotionblur == 0 }"
    }
    parm {
	SOHO_INT(geo_motionsamples, "Geo Time Samples", RENDERING_MAIN_LABEL, 1)
	range	{ 1 10 }
	hidewhen	"{ allowmotionblur == 0 }"
    }
    collection {
	name	velocityblur
	parmtag	{ spare_category RENDERING_SAMPLING_LABEL }
	parm {
	    name	geo_velocityblur
	    label	"Geometry Velocity Blur"
	    type	ordinal
	    default	{ "off" }
	    menu {
		"off"		"No Velocity Blur"
		"on"		"Velocity Blur"
		"accelblur"	"Acceleration Blur"
	    }
	    disablewhen	"{ allowmotionblur == 0 }"
	}
	parm {
	    SOHO_STRING(geo_accelattribute, "Acceleration Attribute",
			RENDERING_SAMPLING_LABEL, "accel")
	    hidewhen	"{ geo_velocityblur != "accelblur" }"
	}
    }
    parm {
    	name	lv_shuttershape
    	label	"Shutter Shape"
    	parmtag { spare_category RENDERING_SAMPLING_LABEL }
    	type	ramp_flt
    	default	{ "2" }
    	parmtag { rampfloatdefault "1pos 0 1value 1 1interp catmull-rom 2pos 1 2value 1 2interp catmull-rom" }
	disablewhen	"{ allowmotionblur == 0 } { lv_renderengine == micropoly } { lv_renderengine == pbrmicropoly }"
	LAVA_PROP("camera", "shuttershape")
    }
    parm {
	SOHO_FLOAT(lv_dofaspect, "DOF Aspect", RENDERING_SAMPLING_LABEL, 1.0)
	range	{ 0.01 100 }
	LAVA_PROP("camera", "dofaspect")
    }

    parm {
	name	lv_samples
	label	"Pixel Samples"
	parmtag	{ spare_category RENDERING_SAMPLING_LABEL }
	type	intvector2
	default	{ 3 3 }
	range	{ 1 32 }
	LAVA_PROP("image", "samples")
	LAVA_FORCE_OUTPUT
    }
    parm {
	SOHO_TOGGLE(lv_dorayvariance, "Ray Variance Antialiasing", RENDERING_SAMPLING_LABEL, 1)
	LAVA_PROP("object", "dorayvariance")
    }
    parm {
	name	"lv_maxnumberofindirectsamples"
	label	"Maximum Number of Indirect Samples"
	type	label
	nolabel
	default	{ "Maximum number of indirect samples: `floor(ch(lv_maxraysamples) * (ch(lv_globalquality) * (ch(lv_diffusequality) + ch(lv_sssquality) + ch(lv_reflectionquality) + ch(lv_refractionquality) ) + 1) )`" }
	hidewhen	"{ lv_dorayvariance == 0 }"
	parmtag	{ "spare_category" "Sampling" }
    }
    parm {
	SOHO_INT(lv_minraysamples, "Min Ray Samples", RENDERING_SAMPLING_LABEL, 1)
	range	{ 1 64 }
	LAVA_PROP("object", "minraysamples")
    }
    parm {
	SOHO_INT(lv_maxraysamples, "Max Ray Samples", RENDERING_SAMPLING_LABEL, 9)
	range	{ 1 64 }
	hidewhen "{ lv_dorayvariance == 0 }"
	LAVA_PROP("object", "maxraysamples")
    }
    parm {
	SOHO_FLOAT(lv_variance, "Noise Level", RENDERING_SAMPLING_LABEL, 0.01)
	range	{ 0 0.1 }
	logarithmic
	hidewhen "{ lv_dorayvariance == 0 }"
	LAVA_PROP("object", "variance")
    }
    parm {
        SOHO_FLOAT(lv_globalquality, "Global Quality", RENDERING_SAMPLING_LABEL, 1.0)
        range	{ 0 10 }
        hidewhen "{ lv_dorayvariance == 0 }"
        LAVA_PROP("object", "globalquality")
    }
    parm {
	SOHO_FLOAT(lv_diffusequality, "Diffuse Quality", RENDERING_SAMPLING_LABEL, 1.0)
        range	{ 0 10 }
        hidewhen "{ lv_dorayvariance == 0 }"
	LAVA_PROP("object", "diffusequality")
    }
    parm {
        SOHO_FLOAT(lv_sssquality, "SSS Quality", RENDERING_SAMPLING_LABEL, 1.0)
        range	{ 0 10 }
        hidewhen "{ lv_dorayvariance == 0 }"
        LAVA_PROP("object", "sssquality")
    }
    parm {
	SOHO_FLOAT(lv_reflectionquality, "Reflection Quality", RENDERING_SAMPLING_LABEL, 1.0)
        range	{ 0 10 }
        hidewhen "{ lv_dorayvariance == 0 }"
	LAVA_PROP("object", "reflectionquality")
    }
    parm {
	SOHO_FLOAT(lv_refractionquality, "Refraction Quality", RENDERING_SAMPLING_LABEL, 1.0)
        range	{ 0 10 }
        hidewhen "{ lv_dorayvariance == 0 }"
	LAVA_PROP("object", "refractionquality")
    }
    parm {
	SOHO_FLOAT(lv_volumequality, "Volume Quality", RENDERING_SAMPLING_LABEL, 1.0)
        range	{ 0 10 }
        hidewhen "{ lv_dorayvariance == 0 }"
	LAVA_PROP("object", "volumequality")
    }
    parm {
	SOHO_STRING(lv_colorspace, "Variance Color Space", RENDERING_SAMPLING_LABEL, "gamma")
	menu {
	    "linear"		"Linear"
	    "gamma"		"Gamma 2.2"
	}
	hidewhen "{ lv_dorayvariance == 0 }"
	LAVA_PROP("renderer", "colorspace")
	LAVA_FORCE_OUTPUT
    }
    collection {
	name	lv_indirectlimits
	parmtag	{ spare_category RENDERING_SAMPLING_LABEL }
        parm {
	    SOHO_TOGGLE(lv_decoupleindirect, "Enable Indirect Sample Limits", RENDERING_SAMPLING_LABEL, 0)
	    LAVA_PROP("object", "decoupleindirect")
        }
        parm {
	    SOHO_INT(lv_minindirectraysamples, "Min Indirect Ray Samples", RENDERING_SAMPLING_LABEL, 1)
	    range	{ 1 64 }
            hidewhen "{ lv_decoupleindirect == 0 }"
	    LAVA_PROP("object", "minindirectraysamples")
        }
        parm {
	    SOHO_INT(lv_maxindirectraysamples, "Max Indirect Ray Samples", RENDERING_SAMPLING_LABEL, 9)
	    range	{ 1 64 }
	    hidewhen "{ lv_decoupleindirect == 0 } { lv_dorayvariance == 0 }"
	    LAVA_PROP("object", "maxindirectraysamples")
        }
        parm {
	    SOHO_FLOAT(lv_indirectvariance, "Indirect Noise Level", RENDERING_SAMPLING_LABEL, 0.05)
	    range	{ 0 0.1 }
	    hidewhen "{ lv_decoupleindirect == 0 } { lv_dorayvariance == 0 }"
	    LAVA_PROP("object", "indirectvariance")
        }
    }
    parm {
	SOHO_FLOAT(lv_samplingquality, "Sampling Quality", RENDERING_SAMPLING_LABEL, 1)
	range	{ 0 10 }
	LAVA_PROP("object", "samplingquality")
    }
    parm {
	SOHO_FLOAT(lv_jitter, "Jitter", RENDERING_SAMPLING_LABEL, 1)
	range	{ 0 1 }
	LAVA_PROP("image", "jitter")
    }
    parm {
	SOHO_INT(lv_pbrssssamplingmode, "SSS Sampling Mode", RENDERING_SAMPLING_LABEL, 1)
        menu {
            "0"	"Ideal"
            "1"	"Perceptual"
        }
	LAVA_PROP("renderer", "pbrssssamplingmode")
    }
    parm {
	SOHO_TOGGLE(lv_subpixel, "Sub-Pixel Output", OUTPUT_LABEL, 0)
	LAVA_PROP("image", "subpixel")
    }
    parm {
	SOHO_TOGGLE(lv_imagebatchmode, "Disable rendering to mplay",
			OUTPUT_LABEL, 0)
	LAVA_PROP("image", "batchmode")
    }
    parm {
	SOHO_STRING(lv_renderengine, "Rendering Engine", RENDERING_MAIN_LABEL, "raytrace")
	menu {
	    "micropoly"		"Micropolygon Rendering"
	    "raytrace"		"Ray Tracing"
	    "pbrmicropoly"	"Micropolygon Physically Based Rendering"
	    "pbrraytrace"	"Physically Based Rendering"
	    "photon"		"Photon Map Generation"
	}
	LAVA_PROP("renderer", "renderengine")
	LAVA_FORCE_OUTPUT
    }
    parm {
	SOHO_INT("lv_bucketsize", "Tile Size", RENDERING_RENDER_LABEL, 16)
	range	{ 1 64 }
	LAVA_PROP("image", "bucket")
    }
    parm {
	SOHO_TOGGLE(lv_bucketthreadcolor, "Color Tile Borders by Thread Index",
		    RENDERING_RENDER_LABEL, 0)
	LAVA_PROP("image", "bucketthreadcolor")
    }
    parm {
	SOHO_INT(lv_randomseed, "Random Seed", RENDERING_SAMPLING_LABEL, 0)
	LAVA_PROP("image", "randomseed")
    }
    parm {
	SOHO_TOGGLE(lv_samplelock, "Sample Lock", RENDERING_SAMPLING_LABEL, 0)
	LAVA_PROP("image", "samplelock")
    }
    parm {
	SOHO_TOGGLE(lv_decorrelatedof, "Decorrelate Depth of Field from Motion Blur Samples", RENDERING_SAMPLING_LABEL, 0)
	disablewhen "{ lv_dof == 0 } { allowmotionblur == 0 }"
	LAVA_PROP("image", "decorrelatedof")
    }
    parm {
	SOHO_FLOAT(lv_opacitythresh, "Opacity Threshold", RENDERING_RENDER_LABEL, 0)
	LAVA_PROP("image", "opacitythresh")
    }
    parm {
	SOHO_FLOAT(lv_opacitylimit, "Opacity Limit", RENDERING_LIMITS_LABEL, 0.995)
	range	{ 0 1 }
	LAVA_PROP("image", "opacitylimit")
    }
    parm {
	SOHO_FLOAT(lv_shadingfactor, "Shading Quality Multiplier", RENDERING_DICING_LABEL, 1)
	LAVA_PROP("renderer", "shadingfactor")
    }
    collection {
	name	lv_cachelimit
	parmtag	{ spare_category RENDERING_RENDER_LABEL }
	parm {
	    SOHO_INT(lv_usecacheratio, "Cache Limit", RENDERING_RENDER_LABEL, 1)
	    menu {
		"0"		"Fixed Size"
		"1"		"Proportion of Physical Memory"
	    }
	    LAVA_PROP("renderer", "usecacheratio")
	    LAVA_FORCE_TYPE("bool")
	}
	parm {
	    SOHO_FLOAT(lv_cacheratio, "Cache Memory Ratio", RENDERING_RENDER_LABEL, 0.25)
	    range	{ 0 1 }
	    hidewhen "{ lv_usecacheratio != 1 }"
	    LAVA_PROP("renderer", "cacheratio")
	}
	parm {
	    SOHO_INT(lv_cachesize, "Cache Size (MB)", RENDERING_RENDER_LABEL, 1000)
	    range	{ 100 100000 }
	    logarithmic
	    hidewhen "{ lv_usecacheratio == 1 }"
	    LAVA_PROP("renderer", "cachesize")
	}
    }
    parm {
	SOHO_INT(lv_samplecachesize, "Sample Data Cache Size (MB)", RENDERING_RENDER_LABEL, 512)
	range { 100 100000 }
	logarithmic
	LAVA_PROP("renderer", "samplecachesize")
    }
    parm {
	SOHO_TOGGLE(lv_hidden, "Enable Hiding", RENDERING_RENDER_LABEL, 1)
	LAVA_PROP("renderer", "hidden")
    }
    collection {
	name	lv_threads
	parmtag	{ spare_category RENDERING_RENDER_LABEL }
	parm {
	    SOHO_INT(lv_usemaxthreads, "Use Max Processors", RENDERING_RENDER_LABEL, 1)
	    menu {
		"0"	"User Specified Thread Count"
		"1"	"Use All Processors"
		"2"	"Use All Processors Except One"
	    }
	    LAVA_PROP("renderer", "usemaxthreads")
	}
	parm {
	    SOHO_INT(lv_threadcount, "Thread Count", RENDERING_RENDER_LABEL, 1)
	    range	{ 1 16 }
	    disablewhen "{ lv_usemaxthreads > 0 }"
	    LAVA_PROP("renderer", "threadcount")
	}
    }
    parm {
	SOHO_STRING(lv_hippath, "Override HIP in IFD", RENDERING_RENDER_LABEL, "$HIP")
    }
    parm {
	SOHO_TOGGLE("lv_inheritproperties", "Inherit Properties", RENDERING_RENDER_LABEL, 0)
    }
    parm {
	name	declare_stylesheets
	label	"Declare Style Sheets"
	parmtag	{ spare_category RENDERING_RENDER_LABEL }
	type	string
	default	{ "*" }
	menutoggle {
	    [ "result = ['*', 'All\\t(*)']" ]
	    [ "styles = hou.styles.styles()" ]
	    [ "for style in styles:" ]
	    [ "    desc = hou.styles.description(style)" ]
	    [ "    desc = desc if len(desc) > 0 else 'No description'" ]
	    [ "    result.append(style)" ]
	    [ "    result.append(style + '\\t (' + desc + ')')" ]
	    [ "" ]
	    [ "return result" ]
	    language	python
	}
    }
    parm {
	name	apply_stylesheets
	label	"Apply Style Sheets"
	parmtag	{ spare_category RENDERING_RENDER_LABEL }
	type	file
	default	{ "`pythonexprs(\"' '.join(hou.styles.styles())\")`" }
	menutoggle {
	    [ "result = []" ]
	    [ "styles = hou.styles.styles()" ]
	    [ "for style in styles:" ]
	    [ "    desc = hou.styles.description(style)" ]
	    [ "    desc = desc if len(desc) > 0 else 'No description'" ]
	    [ "    result.append(style)" ]
	    [ "    result.append(style + '\\t (' + desc + ')')" ]
	    [ "" ]
	    [ "return result" ]
	    language	python
	}
	parmtag	{ "filechooser_pattern" "*.json" }
    }
    parm {
	SOHO_TOGGLE(declare_bundles, "Declare All Bundles", RENDERING_RENDER_LABEL, 0)
    }
    parm {
	name	declare_all_shops
	label	"Declare Materials"
	parmtag	{ spare_category RENDERING_RENDER_LABEL }
	type	ordinal
	default	{ "off" }
	menu {
	    "off"	"Save Only Referenced Materials and Shaders"
	    "on"	"Save All Materials"
	    "all"	"Save All Materials and Shaders"
	}
    }
    parm {
	SOHO_TOGGLE(lv_otlfullpath, "Output OTLs with full paths", RENDERING_RENDER_LABEL, 0)
    }
    parm {
	SOHO_TOGGLE(lv_embedvex, "Force VEX Shader Embedding", RENDERING_RENDER_LABEL, 0)
    }
    parm {
	SOHO_TOGGLE(lv_blurquality, "Enable Motion Blur", RENDERING_RENDER_LABEL, 1)
	LAVA_PROP("renderer", "blurquality")
    }
    parm {
	SOHO_TOGGLE(lv_rayblurquality, "Enable Raytraced Motion Blur", RENDERING_RENDER_LABEL, 1)
	LAVA_PROP("renderer", "rayblurquality")
    }
    parm {
	SOHO_TOGGLE(lv_dofquality, "Enable Depth of Field", RENDERING_RENDER_LABEL, 1)
	LAVA_PROP("renderer", "dofquality")
    }
    parm {
	SOHO_TOGGLE(lv_rayquality, "Enable Raytracing", RENDERING_RENDER_LABEL, 1)
	LAVA_PROP("renderer", "rayquality")
    }
    parm {
	SOHO_TOGGLE(lv_giquality, "Enable GI", RENDERING_RENDER_LABEL, 1)
	LAVA_PROP("renderer", "giquality")
    }
    parm {
	SOHO_TOGGLE(lv_dicingquality, "Enable Dicing", RENDERING_RENDER_LABEL, 1)
	LAVA_PROP("renderer", "dicingquality")
    }

    parm {
	SOHO_TOGGLE(lv_renderinterrupt, "Enable Render Interrupt", RENDERING_RENDER_LABEL, 0)
	LAVA_PROP("renderer", "renderinterrupt")
    }
    parm {
	SOHO_STRING(lv_octreestyle, "Ray Tracing Accelerator", RENDERING_RENDER_LABEL, "bboxtree")
	menu {
	    "kdtree"		"KD-Tree"
	    "bboxtree"		"Bounding Volume Hierarchy"
	}
	LAVA_PROP("renderer", "octreestyle")
    }
    parm {
	SOHO_FLOAT(lv_kdmemfactor, "KD-Tree Memory Factor", RENDERING_RENDER_LABEL, 1)
	range	{ 0.001 2 }
	hidewhen	"{ lv_octreestyle != kdtree }"
	LAVA_PROP("renderer", "kdmemfactor")
    }
    parm {
	SOHO_TOGGLE(lv_bvhoriented, "Enable Oriented BVH Construction", RENDERING_RENDER_LABEL, 0)
	LAVA_PROP("renderer", "bvhoriented")
    }
    parm {
	SOHO_INT(lv_curvebunchsize, "Ray Tracing Curve Bunch Size", RENDERING_RENDER_LABEL, 4)
	range	{ 1 10 }
	LAVA_PROP("renderer", "curvebunchsize")
    }
    parm {
	SOHO_TOGGLE(lv_bboxenablelod, "Use Ray Level of Detail", RENDERING_RENDER_LABEL, 1)
	LAVA_PROP("renderer", "bboxenablelod")
    }
    parm {
	SOHO_TOGGLE(lv_preview, "Enable Preview", "Preview", 0)
	LAVA_PROP("renderer", "preview")
    }
    parm {
	SOHO_STRING(lv_previewmode, "Preview Mode", "Preview", "blur")

	menu {
	    "blur"		"Blur"
	    "sharp"		"Sharp"
	    "ordered"		"Ordered"
	}
	LAVA_PROP("renderer", "previewmode")
    }
    parm {
	SOHO_FLOAT(lv_previewtime, "Preview Time", "Preview", 1)
	LAVA_PROP("renderer", "previewtime")
    }
    parm {
	SOHO_TOGGLE(lv_previewadaptive, "Enable Adaptive Preview", "Preview", 0)
	LAVA_PROP("renderer", "previewadaptive")
    }
    parm {
	SOHO_FLOAT(lv_previewadaptivefactor, "Adaptive Preview Factor", "Preview", 0.9)
	range { 0 1 }
	LAVA_PROP("renderer", "previewadaptivefactor")
    }
    parm {
	SOHO_TOGGLE(lv_stylesheets, "Render evaluated material style sheet information for IPR inspection", "Preview", 0)
	LAVA_PROP("renderer", "stylesheets")
    }
    parm {
	SOHO_TOGGLE(lv_relightingbuffer, "Use the Relighting Buffer For Preview", "Preview", 0)
	disablewhen	"{ lv_preview == 0 }"
	LAVA_PROP("renderer", "relightingbuffer")
    }
    parm {
	SOHO_TOGGLE(lv_iprfixsamples, "Preview Uses Fixed Samples Per Pass", "Preview", 0)
	disablewhen	"{ lv_preview == 0 }"
	LAVA_PROP("renderer", "iprfixsamples")
    }
    parm {
	SOHO_FLOAT(lv_iprpasssamples, "Preview Samples Per Pass", "Preview", 1)
	range   { 0.001 200 }
	disablewhen	"{ lv_iprfixsamples == 0 } { lv_preview == 0 }"
	LAVA_PROP("renderer", "iprpasssamples")
    }
    parm {
	SOHO_TOGGLE(lv_iprfakerelight, "Use Fake Relighting Buffer", "Preview", 0)
	disablewhen	"{ lv_relightingbuffer == 0 } { lv_preview == 0 }"
	LAVA_PROP("renderer", "iprfakerelight")
    }
    parm {
	SOHO_INT("lv_iprbucketsize", "Minimum Preview Tile Size", "Preview", 64)
	range	{ 1 64 }
	LAVA_PROP("image", "iprbucket")
    }
    parm {
	SOHO_FLOAT(lv_previewmouseradius, "Preview Mouse Radius", "Preview", 100.0)
	LAVA_PROP("renderer", "previewmouseradius")
    }
    parm {
	SOHO_TOGGLE(lv_iprraytraceshadows, "Always Use Raytraced Shadows in Preview Mode", "Preview", 1)
    }

    parm {
        SOHO_STRING(lv_pbrpathtype, "Allowable Paths", RENDERING_SHADING_LABEL, "diffuse")
        menu {
            "diffuse"   "Specular, Diffuse Paths"
            "all"       "All Paths"
        }
	LAVA_PROP("renderer", "pbrpathtype")
    }
    parm {
	SOHO_FLOAT(lv_colorlimit, "Color Limit", RENDERING_LIMITS_LABEL, 10)
	range	{ 0 20 }
	LAVA_PROP("image", "colorlimit")
    }
    parm {
        SOHO_INT(lv_colorlimitdepth, "Color Limit Depth", RENDERING_LIMITS_LABEL, 2)
	range	{ 0 100 }
	LAVA_PROP("image", "colorlimitdepth")
    }
    collection {
	name	lv_pathcutoffgroup
	parmtag	{ spare_category RENDERING_LIMITS_LABEL }
	parm {
	    SOHO_TOGGLE(lv_pathcutoff, "Stochastic Path Early Cut Off",
			RENDERING_LIMITS_LABEL, 1)
	    LAVA_PROP("renderer", "pathcutoff")
	}
	parm {
	    SOHO_INT(lv_pathcutoffmethod, "Cut Off Method",
			RENDERING_LIMITS_LABEL, 2)
	    menu {
		"0" "Probability"
		"1" "Albedo"
		"2" "Throughput"
	    }
	    hidewhen    "{ lv_pathcutoff == 0 }"
	    LAVA_PROP("renderer", "pathcutoffmethod")
	}
	parm {
	    SOHO_FLOAT(lv_pathcutoffthresh, "Cut Off Threshold",
			RENDERING_LIMITS_LABEL, 1)
	    range       { 0 1 }
	    hidewhen    "{ lv_pathcutoff == 0 }"
	    LAVA_PROP("renderer", "pathcutoffthresh")
	}
	parm {
	    SOHO_INT(lv_pathcutoffdepth, "Cut Off Depth",
			RENDERING_LIMITS_LABEL, 2)
	    hidewhen    "{ lv_pathcutoff == 0 }"
	    LAVA_PROP("renderer", "pathcutoffdepth")
	}
    }
    parm {
	name	lv_pbrshader
	label	"PBR Shader"
	parmtag	{ spare_category RENDERING_PBR_LABEL }
	type	oppath
	parmtag	{ opfilter	"!!SHOP/ATMOSPHERE!!" }
	default	{ "" }
	disablewhen	"{ lv_renderengine == micropoly } { lv_renderengine == raytrace }"
    }
    parm {
	name	lv_generatorshader
	label	"Generator Shader"
	parmtag	{ spare_category RENDERING_SHADING_LABEL }
	type	oppath
	parmtag	{ opfilter	"!!SHOP/ATMOSPHERE!!" }
	default	{ "" }
    }
    parm {
	SOHO_FLOAT(lv_timelimit, "Render Time Limit", RENDERING_RENDER_LABEL, 0)
	LAVA_PROP("renderer", "timelimit")
    }

    //
    // Camera properties
    //
    parm {
	name	lv_cameralist
	label	"Render Cameras"
	type	oplist
	parmtag	{ opfilter	"!!OBJ/CAMERA!!" }
	parmtag	{ oprelative	"/obj" }
	parmtag	{ spare_category "Stereo" }
	default	{ "" }
    }

    parm {
	SOHO_STRING(lv_bokeh, "Bokeh", "Sampling", "radial")
	menureplace {
	    "radial"			"Radial Bokeh"
	    "file"			"Image File Bokeh"
	    "box"			"Box Filter Bokeh"
	    "null"			"Disable Bokeh"
	}
    }
    parm {
	SOHO_PARM(lv_bokehfile, "Bokeh Image File", "Sampling", "image", 1, "default.pic")
	parmtag	{ filechooser_mode	"read" }
	disablewhen	"{ lv_bokeh != file }"
	LAVA_PROP("bokeh", "-f")
    }
    parm {
	SOHO_FLOAT(lv_bokehrotation,	"Bokeh Rotation", "Sampling", 0)
	range { 0 360 }
	disablewhen	"{ lv_bokeh != file }"
	LAVA_PROP("bokeh", "-r")
    }

    parm {
	SOHO_INT(lv_field, "Video Field", OUTPUT_LABEL, "0")
	menu {
	    "0"	"Both Fields"
	    "1" "Odd Field"
	    "2"	"Even Field"
	}
	range { 0 2 }
	LAVA_PROP("camera", "field")
    }
    parm {
	SOHO_INT(lv_vexprofile, "VEX Profiling", RENDERING_STATISTICS_LABEL, 0)
	menu {
	    "0"	"No VEX Profiling"
	    "1"	"Execution profiling"
	    "2"	"Profiling and NAN detection"
	}
	LAVA_PROP("renderer", "vexprofile")
    }
    parm {
	SOHO_INT(lv_verbose, "Verbose Level", RENDERING_STATISTICS_LABEL, 0)
	range { 0 5 }
	LAVA_PROP("renderer", "verbose")
	LAVA_FORCE_OUTPUT
    }
    parm {
	SOHO_TOGGLE(lv_alfprogress, "Alfred Style Progress", RENDERING_STATISTICS_LABEL, 0)
	LAVA_PROP("renderer", "alfprogress")
    }
    parm {
	SOHO_FILE(lv_tilecallback, "Python Tile Callback", RENDERING_STATISTICS_LABEL, "")
	parmtag	{ filechooser_mode	"read" }
	LAVA_PROP("renderer", "tilecallback")
    }
    parm {
	SOHO_INT(lv_logcolors, "Colorize Output", RENDERING_STATISTICS_LABEL, 0)
	menu {
	    "0" "Colored Shell"
	    "1" "HTML Tags"
	    "2" "No Coloring"
	}
	LAVA_PROP("renderer", "logcolors")
	LAVA_FORCE_OUTPUT
    }
    parm {
	SOHO_TOGGLE(lv_logtimestamps, "Log Timestamp", RENDERING_STATISTICS_LABEL, 1)
	LAVA_PROP("renderer", "logtimestamps")
    }
    parm {
	SOHO_TOGGLE(lv_quickexit, "Quick Exit", RENDERING_RENDER_LABEL, 1)
    }
    parm {
	SOHO_TOGGLE(lv_fogbackground, "Add Background for Fog", "Fog", 1)
	LAVA_PROP("renderer", "fogbackground")
    }
    parm {
	SOHO_STRING(lv_filenamesuffix, "Image File Suffix", "Stereo", "")
    }
    parm {
	SOHO_TOGGLE(lv_s3dleftcamera, "Is Left Camera", "Stereo", 0)
    }
    parm {
	SOHO_TOGGLE(lv_s3drightcamera, "Is Right Camera", "Stereo", 0)
    }
    parm {
	SOHO_STRING(subcamtag, "Sub Camera Tag", "Stereo", "")
    }
    parm {
	SOHO_TOGGLE(viewmenu, "Include in Viewport Menu", "Stereo", 1)
    }
    parm {
	SOHO_PARM(viewxformpath, "View Xform Node", "Stereo", oplist, 1, "")
    }
    parm {
	name	lv_lensshader
	label	"Lens Shader"
	parmtag	{ spare_category "View" }
	type	oppath
	default	{ "" }
	disablewhen	"{ projection != lens }"
    }

    //
    // Object Properties
    parm {
	name	shop_propertiespath
	label	"Rendering Properties"
	parmtag	{ spare_category "Shaders" }
	type	oppath
	parmtag	{ opfilter	"!!SHOP/PROPERTIES!!" }
	default	{ "" }
    }
    parm {
	name	shop_materialpath
	label	"Material"
	parmtag	{ spare_category "Shaders" }
	type	oppath
	parmtag	{ opfilter	"!!SHOP!!" }
	default	{ "" }
    }
    parm {
	name	shop_materialstylesheet
	label	"Material Style Sheet"
	parmtag	{ spare_category "Shaders" }
	type	string
	parmtag	{ editor "1" }
	parmtag     { "script_action" "import toolutils\n\np = toolutils.dataTree('Material Style Sheets')\np.setCurrentPath(kwargs['node'].path() + '/Style Sheet Parameter')" }
	parmtag     { "script_action_help" "Open in Material Style Sheet editor." }
	parmtag     { "script_action_icon" "DATATYPES_stylesheet" }
	default	{ "" }
    }
    parm {
	name	shop_surfacepath
	label	"Surface Shader"
	parmtag	{ spare_category "Shaders" }
	type	oppath
	parmtag	{ opfilter	"!!SHOP/SURFACE!!" }
	default	{ "" }
    }
    parm {
	SOHO_TOGGLE(shop_disable_surface_shader,
		    "Disable Surface Shader Rendering", "Shaders", 0)
    }
    parm {
	name	shop_photonpath
	label	"Photon Shader"
	parmtag	{ spare_category "Shaders" }
	type	oppath
	parmtag	{ opfilter	"!!SHOP/PHOTON!!" }
	default	{ "" }
    }
    parm {
	name	shop_displacepath
	label	"Displacement Shader"
	parmtag	{ spare_category "Shaders" }
	type	oppath
	parmtag	{ opfilter	"!!SHOP/DISPLACEMENT!!" }
	default	{ "" }
    }
    parm {
	SOHO_TOGGLE(shop_disable_displace_shader,
		    "Disable Displace Shader Rendering", "Shaders", 0)
    }
    parm {
	name	lv_matteshader
	label	"Matte Shader"
	parmtag	{ spare_category "Shaders" }
	type	oppath
	parmtag	{ opfilter	"!!SHOP/SURFACE!!" }
	default	{ "" }
    }
    parm {
	SOHO_FLOAT(lv_displacebound,	"Displacement Bound", "Shading", 0)
	LAVA_PROP("object", "displacebound")
    }
    parm {
	SOHO_STRING(lv_displacespace, "Displacement Space",
			"Shading", "camera")
	menu {
	    "camera"	"Bounds specified in world space"
	    "object"	"Bounds specified in object space"
	}
	LAVA_PROP("object", "displacespace")
    }
    parm {
	SOHO_FLOAT(lv_velocitybound,	"Volume Velocity Bound", "Shading", 0)
	LAVA_PROP("object", "velocitybound")
    }
    parm {
	SOHO_FLOAT(lv_velocityquality,	"Volume Velocity Quality", "Sampling", 0.1)
	disablewhen	"{ allowmotionblur == 0 }"
	LAVA_PROP("object", "velocityquality")
    }
    parm {
	SOHO_TOGGLE(lv_redice, "Re-Dice Displacements", "Shading", 0)
	LAVA_PROP("object", "redice")
    }
    parm {
	SOHO_TOGGLE(lv_overridedetail, "Ignore Geometry Attribute Shaders",
			"Geometry", 0)
	LAVA_PROP("object", "overridedetail")
    }
    parm {
        SOHO_TOGGLE(lv_procuseroottransform, "Proc Use Root Transform",
                        "Geometry", 1)
        LAVA_PROP("object", "procuseroottransform")
    }
    parm {
	SOHO_TOGGLE(lv_matte, "Matte shading", "Shading", 0)
	LAVA_PROP("object", "matte")
    }
    parm {
	SOHO_TOGGLE(lv_truedisplace, "True Displacements", "Shading", 1)
	LAVA_PROP("object", "truedisplace")
    }
    parm {
	SOHO_TOGGLE(lv_bumpraydisplace, "Add Bump To Ray Traced Displacements", "Shading", 0)
	disablewhen	"{ lv_truedisplace == 0 }"
	LAVA_PROP("object", "bumpraydisplace")
    }
    parm {
	SOHO_FLOAT(lv_shadingquality, "Shading Quality", "Dicing", 1)
	LAVA_PROP("object", "shadingquality")
    }
    parm {
	SOHO_TOGGLE(lv_curvesurface, "Shade Curves As Surfaces", "Dicing", 0)
	LAVA_PROP("object", "curvesurface")
    }
    parm {
	SOHO_STRING(lv_volumefilter, "Volume Filter", "Shading", "box")
	VEX_FILTER_MENU
	LAVA_PROP("object", "filter")
    }
    parm {
        SOHO_INT(lv_photonmodifier, "Photon Modifier", RENDERING_SHADING_LABEL, 0)
        menu {
            "0"	"None"
            "1"	"Pass Through"
            "2"	"Block"
        }
        LAVA_PROP("object", "photonmodifier")
    }
    parm {
	SOHO_STRING(lv_volumevelocitynames, "Volume Velocity Names",
		"Geometry", "v,vel")
	LAVA_PROP("geometry", "volumevelocitynames")
    }
    parm {
	SOHO_FLOAT(lv_volumefilterwidth, "Volume Filter Width", "Shading", 1)
	range	{ 0.001 5 }
	LAVA_PROP("object", "filterwidth")
    }
    parm {
	SOHO_TOGGLE(lv_jitcurves, "JIT Curves", "Geometry", 0)
	LAVA_PROP("object", "jitcurves")
    }
    parm {
	SOHO_TOGGLE(lv_rayshade, "Raytrace Shading", "Shading", 0)
	LAVA_PROP("object", "rayshade")
    }
    parm {
	SOHO_STRING(lv_lpetag, "LPE Tag", "Shading", "")
	LAVA_PROP("object", "lpetag")
    }
    parm {
	SOHO_FLOAT(lv_raybias, "Raytracing Bias", RENDERING_SHADING_LABEL, 0.001)
	LAVA_PROP("renderer", "raybias")
    }
    parm {
	SOHO_INT(lv_unshadedlimit, "Ray Unshaded Limit", RENDERING_LIMITS_LABEL, 32)
	range	{ 1 32 }
	LAVA_PROP("renderer", "unshadedlimit")
    }
    parm {
        SOHO_STRING(lv_raylimiteval, "At Ray Limit", RENDERING_LIMITS_LABEL, "none")
        menu {
            "none"      "Use Black Background"
            "direct"    "Use Direct Lighting as Background Color"
        }
	LAVA_PROP("renderer", "raylimiteval")
    }
    parm {
        SOHO_STRING(lv_raylimitcomponents, "Ray Limit Components", RENDERING_LIMITS_LABEL, "all")
        hidewhen "{ \"lv_raylimiteval\" != \"direct\" }"
        LAVA_PROP("renderer", "raylimitcomponents")
    }
    parm {
        name	"lv_raylimitlightmask"
        label	"Ray Limit Light Mask"
        type	oplist
        default	{ "*" }
        parmtag	{ opfilter "!!OBJ/LIGHT!!" }
        parmtag	{ opexpand "1" }
        hidewhen "{ \"lv_raylimiteval\" != \"direct\" }"
        parmtag	{ spare_category RENDERING_LIMITS_LABEL }
        LAVA_PROP("renderer", "raylimitlightmask")
    }
    parm {
        SOHO_FLOAT(lv_rayderivbias, "Ray Derivative Bias", "Shading", 1.0)
	range	{ 0.001 1 }
	LAVA_PROP("renderer", "rayderivbias")
    }
    parm {
        SOHO_TOGGLE(lv_rayderivrandom, "Randomize Ray Derivative Basis", "Shading", 0)
	LAVA_PROP("renderer", "rayderivrandom")
    }
    parm {
	SOHO_FLOAT(lv_volumesteprate, "Volume Step Rate", RENDERING_SAMPLING_LABEL, 0.25)
	range	{ 0.1 10 }
	logarithmic
	LAVA_PROP("object", "volumesteprate")
    }
    parm {
	SOHO_TOGGLE(lv_volumeuniform, "Uniform Volume", "Sampling", 0)
	LAVA_PROP("object", "volumeuniform")
    }
    parm {
	SOHO_FLOAT(lv_volumeuniformflipthresh, "Uniform Volume Flipped Normal Detection Threshold", "Sampling", 0)
	LAVA_PROP("object", "volumeuniformflipthresh")
    }
    parm {
	SOHO_INT(lv_volumeuniformtype, "Uniform Volume Type", "Sampling", 0)
	menu {
	    "0"	"Continuous"
	    "1"	"Segment"
	}
	LAVA_PROP("object", "volumeuniformtype")
    }
    parm {
	SOHO_TOGGLE(lv_volumesurface, "Volume Surface", "Sampling", 0)
	LAVA_PROP("object", "volumesurface")
    }
    parm {
	SOHO_TOGGLE(lv_volumeiso, "Volume Isosurface", "Sampling", 0)
	LAVA_PROP("object", "volumeiso")
    }
    parm {
	SOHO_TOGGLE(lv_volumeisodefault, "Use default volume isosurface evaluator", "Sampling", 0)
	LAVA_PROP("object", "volumeisodefault")
    }
    parm {
	SOHO_FLOAT(lv_volumedensity, "Volume Density", "Sampling", 1)
	range	{ 0.1 10 }
	LAVA_PROP("object", "volumedensity")
    }
    parm {
	SOHO_INT(lv_volumesamples, "Volume Samples", "Sampling", 1)
	range	{ 1 16 }
	LAVA_PROP("object", "volumesamples")
    }
    parm {
	SOHO_FLOAT(lv_volumeshadowsteprate, "Volume Shadow Step Rate", "Sampling", 1)
	range	{ 0.1 10 }
	logarithmic
	LAVA_PROP("object", "volumeshadowsteprate")
    }
    parm {
	SOHO_FLOAT(lv_volumezerothresh, "Volume Zero Threshold", "Sampling", 0)
	range	{ 0 0.01 }
	LAVA_PROP("object", "volumezerothresh")
    }
    parm {
	SOHO_STRING(lv_volumesamplingchannel, "Volume Sampling Channel", "Sampling", "density")
	LAVA_PROP("object", "volumesamplingchannel")
    }
    parm {
	name	lv_volumeupvector
	label	"Volume Up Vector"
	parmtag	{ spare_category "Sampling" }
	type	direction
	default	{ 0 1 0 }
	LAVA_PROP("object", "volumeupvector")
    }
    parm {
	SOHO_TOGGLE(lv_transparent, "Stochastic Transparency", RENDERING_SAMPLING_LABEL, 1)
	disablewhen "{ lv_renderengine == micropoly } { lv_renderengine == pbrmicropoly } { lv_renderengine == photon }"
	LAVA_PROP("image", "transparent")
    }
    parm {
	SOHO_INT(lv_transparentsamples, "Stochastic Samples", RENDERING_SAMPLING_LABEL, 4)
	range	{ 1 16 }
	disablewhen	"{ lv_transparent == 0 } { lv_renderengine == micropoly } { lv_renderengine == pbrmicropoly } { lv_renderengine == photon }"
	LAVA_PROP("image", "transparentsamples")
    }
    parm {
	SOHO_TOGGLE(lv_smoothcolor, "Smooth Grid Colors", RENDERING_SHADING_LABEL, 1)
	LAVA_PROP("object", "smoothcolor")
    }
    parm {
	SOHO_TOGGLE(lv_smoothP, "Fix Shadow Terminator", RENDERING_SHADING_LABEL, 1)
	LAVA_PROP("object", "smoothP")
    }
    parm {
	SOHO_INT(lv_reflectlimit, "Reflect Limit", RENDERING_LIMITS_LABEL, 10)
	LAVA_PROP("object", "reflectlimit")
    }
    parm {
	SOHO_INT(lv_refractlimit, "Refract Limit", RENDERING_LIMITS_LABEL, 10)
	LAVA_PROP("object", "refractlimit")
    }
    parm {
	SOHO_INT(lv_diffuselimit, "Diffuse Limit", RENDERING_LIMITS_LABEL, 0)
	LAVA_PROP("object", "diffuselimit")
    }
    parm {
        SOHO_INT(lv_ssslimit, "SSS Limit", RENDERING_LIMITS_LABEL, 0)
        LAVA_PROP("object", "ssslimit")
    }
    parm {
	SOHO_INT(lv_volumelimit, "Volume Limit", RENDERING_LIMITS_LABEL, 0)
	LAVA_PROP("object", "volumelimit")
    }
    parm {
	SOHO_FLOAT(lv_rayweight, "Contribution Limit", RENDERING_LIMITS_LABEL, 0.001)
	LAVA_PROP("object", "rayweight")
    }

    DEF_COMMON_OBJECT_CATEGORIES()
    COMMON_OBJECT_LIGHTMASK( "Shading" )
    COMMON_OBJECT_REFLECTMASK( "Shading" )
    COMMON_OBJECT_REFRACTMASK( "Shading" )
    COMMON_OBJECT_SHADOWMASK( "Shadow" )

    parm {
	SOHO_FLOAT(lv_motionfactor, "Motion Factor", RENDERING_DICING_LABEL, 0)
	range	{ 0 1 }
	disablewhen	"{ allowmotionblur == 0 lv_dof == 0 }"
	LAVA_PROP("object", "motionfactor")
    }
    parm {
	SOHO_TOGGLE(lv_phantom, "Phantom", "Render", 0)
	// LAVA_PROP("object", "phantom")
    }
    parm {
	SOHO_TOGGLE(lv_renderable, "Renderable", "Render", 1)
	LAVA_PROP("object", "renderable")
    }
    parm {
	SOHO_STRING(lv_rendervisibility, "Render Visibility", "Render", "*")
	menureplace {
	    "*"	"Visible to all"
	    "primary"	"Visible only to primary rays"
	    "primary|shadow"	"Visible only to primary and shadow rays"
	    "-primary"	"Invisible to primary rays (Phantom)"
	    "-diffuse"	"Invisible to diffuse rays"
	    "-diffuse&-reflect&-refract"	"Invisible to secondary rays"
	    ""	"Invisible (Unrenderable)"
	}
	LAVA_PROP("object", "rendervisibility")
    }
    parm {
	SOHO_TOGGLE(lv_biasnormal, "Bias Along Normal", "Shading", 0)
	LAVA_PROP("object", "biasnormal")
    }
    parm {
	SOHO_TOGGLE(lv_emitillum, "Emission Illuminates Objects", "Shading", 1)
	LAVA_PROP("object", "emitillum")
    }
    collection {
	name	lv_measuring
	parmtag	{ spare_category RENDERING_DICING_LABEL }
	parm {
	    SOHO_STRING(lv_measure, "Geometry Measuring", RENDERING_DICING_LABEL,
			    "nonraster")
	    menu {
		"nonraster"	"Non-Raster Measuring"
		"raster"	"Raster Space Measuring"
		"uniform"	"Uniform Measuring"
	    }
	}
	parm {
	    SOHO_FLOAT(lv_measurezimportance, "Z-Importance", RENDERING_DICING_LABEL, 1)
	    disablewhen	"{ lv_measure != \"nonraster\" }"
	    LAVA_PROP("measure", "zimportance")
	    LAVA_FORCE_OUTPUT
	}
	parm {
	    SOHO_FLOAT(lv_measureoffscreenquality, "Offscreen Quality", RENDERING_DICING_LABEL, 0.25)
	    range { 0 1 }
	    disablewhen	"{ lv_measure != \"nonraster\" }"
	    LAVA_PROP("measure", "offscreenquality")
	    LAVA_FORCE_OUTPUT
	}
    }
    parm {
	SOHO_FLOAT(lv_geofilterwidth, "Geometry Filter Width", "Dicing", 0)
	LAVA_PROP("object", "geofilterwidth")
    }
    parm {
	SOHO_STRING(lv_materialoverride, "Material Override", "Geometry",
		    "compact")
	menu {
	    "none"		"Disabled"
	    "full"		"Evaluate for Each Primitve/Point"
	    "compact"		"Evaluate Once"
	}
    }
    parm {
	SOHO_INT(lv_heightfieldtess, "Heightfield Tessellation", RENDERING_DICING_LABEL, 1)
	menu {
	    "0"	"Uniform"
	    "1"	"Edge Length"
	}
	LAVA_PROP("object", "heightfieldtess")
    }

    // Light properties
    parm {
	// TODO:  This parameter is currently only required for
	// ambient lights.  We need to fix this since it's a hack.
	name	light_color
	label	"Light Color"
	parmtag	{ spare_category	"Light" }
	type	color
	size	3
	default	{ .5 .5 .5 }
    }
    parm {
	name	lv_export_prefix
	label	"Export Plane Prefix"
	parmtag	{ spare_category	"Light" }
	type	string
	default	{ "$OS" }
    }
    parm {
	name	lv_export_suffix
	label	"Export Plane Suffix"
	parmtag	{ spare_category	"Light" }
	type	string
	default	{ "" }
    }
    parm {
	name	shop_lightpath
	label	"Light Shader"
	parmtag	{ spare_category "Shaders" }
	type	oppath
	parmtag	{ opfilter	"!!SHOP/LIGHT!!" }
	default	{ "" }
    }
    parm {
	SOHO_TOGGLE(shop_disable_light_shader,
		    "Disable Light Shader Rendering", "Shaders", 0)
    }
    parm {
	name	shop_shadowpath
	label	"Shadow Shader"
	parmtag	{ spare_category "Shaders" }
	type	oppath
	parmtag	{ opfilter	"!!SHOP/LIGHT_SHADOW!!" }
	default	{ "" }
    }
    parm {
	SOHO_TOGGLE(shop_disable_shadow_shader,
		    "Disable Shadow Shader Rendering", "Shaders", 0)
    }
    parm {
	name	lv_areashape
	label	"Area Shape"
	parmtag	{ spare_category	"Light" }
	type	string
	default	{ "none" }
	menu	{
	    "none"	"Point/Cone Light"
	    "line"	"Line Light"
	    "grid"	"Grid Light"
	    "disk"	"Disk Light"
	    "sphere"	"Spherical Light"
	    "env"	"Environmental Light"
	    "sun"	"Sun Light"
	    "geo"	"Geometry Light"
	    "tube"	"Tube Light"
	}
	LAVA_PROP("light", "areashape")
    }
    parm {
	name	lv_areasize
	label	"Area Size"
	parmtag	{ spare_category	"Light" }
	type	vector2
	default	{ 0 0 }
	LAVA_PROP("light", "areasize")
    }
    parm {
	name	lv_areamap
	label	"Area Texture"
	parmtag	{ spare_category	"Light" }
	type	image
	parmtag	{ filechooser_mode	"read" }
	default	{ "" }
	LAVA_PROP("light", "areamap")
    }
    parm {
	SOHO_TOGGLE(lv_areafullsphere, "Full Sphere Environment", "Light", 0)
	disablewhen	"{ lv_areashape != \"env\" }"
	LAVA_PROP("light", "areafullsphere")
    }
    parm {
	SOHO_INT(lv_importancelevels, "Light Importance Levels",
			"Light", 10)
	LAVA_PROP("light", "importancelevels")
    }
    parm {
	SOHO_FLOAT(lv_activeradius, "Active Radius", "Light", -1)
	LAVA_PROP("light", "activeradius")
    }
    parm {
	SOHO_TOGGLE(lv_nondiffuse, "Non Diffuse Light", "Light", 0)
	LAVA_PROP("light", "__nondiffuse")
    }
    parm {
	SOHO_TOGGLE(lv_nonspecular, "Non Specular Light", "Light", 0)
	LAVA_PROP("light", "__nonspecular")
    }
    parm {
	SOHO_TOGGLE(lv_lightcache, "Light Stores Cached Illumination", "Light", 0)
	LAVA_PROP("light", "lightcache")
    }
    parm {
	SOHO_TOGGLE(lv_raybackground, "Ray Tracing Background", "Light", 0)
	LAVA_PROP("light", "raybackground")
    }
    parm {
	SOHO_FLOAT(lv_envangle, "Sun Angle", "Light", 5)
	LAVA_PROP("light", "envangle")
    }
    parm {
	SOHO_FLOAT(lv_misbias, "MIS Bias", "Light", 0)
	range { -1 1 }
    }
    parm {
	SOHO_TOGGLE(render_viewcamera,
		    "Create Image From Viewing Camera", OUTPUT_LABEL, 1)
    }
    parm {
	SOHO_TOGGLE(render_any_shadowmap,
		    "Auto-Generate Shadow Maps", OUTPUT_LABEL, 1)
    }
    parm {
	SOHO_TOGGLE(render_any_envmap,
		    "Auto-Generate Environment Maps", OUTPUT_LABEL, 1)
    }
    parm {
	SOHO_TOGGLE(render_any_photonmap,
		    "Auto-Generate Photon Maps", OUTPUT_LABEL, 1)
    }
    parm {
	SOHO_TOGGLE(render_any_pointcloud,
		    "Auto-Generate Light Point Clouds", OUTPUT_LABEL, 1)
    }
    parm {
	SOHO_TOGGLE(render_shadowmap,
		    "Auto-Generate Shadow Map", OUTPUT_LABEL, 0)
    }
    parm {
	SOHO_TOGGLE(render_envmap,
		    "Auto-Generate Environment Map", OUTPUT_LABEL, 0)
    }
    parm {
	SOHO_TOGGLE(render_photonmap,
		    "Auto-Generate Photon Map", OUTPUT_LABEL, 0)
    }
    parm {
	name	lv_objroot
	label	"Object Root Path"
	parmtag	{ spare_category RENDERING_RENDER_LABEL }
	type	oppath
	default	{ "/obj/" }
    	parmtag	{ opfullpath "on" }
	LAVA_PROP("renderer", "objroot")
    }
    // Fog objects
    parm {
	name	shop_fogpath
	label	"Fog Shader"
	parmtag	{ spare_category "Shaders" }
	type	oppath
	parmtag	{ opfilter	"!!SHOP/ATMOSPHERE!!" }
	default	{ "" }
    }
    parm {
	SOHO_TOGGLE(shop_disable_fog_shader,
		    "Disable Fog Shader Rendering", "Shaders", 0)
    }

    // Geometry
    parm {
	name	shop_geometrypath
	label	"Procedural Shader"
	parmtag	{ spare_category "Geometry" }
	type	oppath
	parmtag	{ opfilter	"!!SHOP/GEOMETRY!!" }
	default	{ "" }
    }
    parm {
	SOHO_TOGGLE(shop_disable_geometry_shader,
		    "Disable Geometry Shader Rendering", "Shaders", 0)
    }
    parm {
	name	lv_auto_archive
	label	"Auto-Archiving"
	parmtag	{ spare_category "Geometry" }
	type	string
	default	{ "off" }
	menu	{
	    "off"	"No auto-archiving"
	    "exist"	"Create archive if missing on disk"
	    "force"	"Overwrite archive always"
	}
    }
    parm {
	name	lv_archive
	label	"Geometry Disk File"
	parmtag	{ spare_category "Geometry" }
	parmtag	{ filechooser_mode  "read_and_write" }
	type	file
	default	{ "" }
    }
    collection {
	name	lv_subd
	label	"Subdivision Surfaces"
	parmtag	{ spare_category	"Geometry" }
	parm {
	    SOHO_TOGGLE(lv_rendersubd, "Render Polygons As Subdivision (Mantra)", "Geometry", 0)
	    LAVA_PROP("object", "rendersubd")
	}
	parm {
	    SOHO_STRING(lv_subdstyle, "Subdivision Style", "Geometry", "mantra_catclark")
	    menu {
		"mantra_catclark"	"Mantra Catmull-Clark"
		"osd_catclark"	"OpenSubdiv Catmull-Clark"
	    }
	    hidewhen "{ lv_rendersubd == 0 }"
	    LAVA_PROP("object", "subdstyle")
	}
	parm {
	    SOHO_STRING(lv_subdgroup, "Subdivision Group", "Geometry", "")
	    hidewhen "{ lv_rendersubd == 0 }"
	    LAVA_PROP("object", "subdgroup")
	}
	parm {
	    SOHO_FLOAT(lv_osd_quality, "Open Subdiv Quality", "Geometry", 1)
	    hidewhen "{ lv_rendersubd == 0 lv_subdstyle != osd_catclark }"
	    LAVA_PROP("object", "osd_quality")
	}
	parm {
	    SOHO_INT(lv_osd_vtxinterp, "OSD Vtx Interp", "Geometry", 2)
	    hidewhen "{ lv_rendersubd == 0 lv_subdstyle != osd_catclark }"
	    menu {
		"0"	"No vertex interpolation"
		"1"	"Edges only"
		"2"	"Edges and Corners"
	    }
	    LAVA_PROP("object", "osd_vtxinterp")
	}
	parm {
	    SOHO_INT(lv_osd_fvarinterp, "OSD FVar Interp", "Geometry", 4)
	    hidewhen "{ lv_rendersubd == 0 lv_subdstyle != osd_catclark }"
	    menu {
		"0"	"Smooth everywhere"
		"1"	"Sharpen corners only"
		"2"	"Sharpen edges and corners"
		"3"	"Sharpen edges and propagated corners"
		"4"	"Sharpen all boundaries"
		"5"	"Bilinear interpolation"
	    }
	    LAVA_PROP("object", "osd_fvarinterp")
	}
    }
    parm {
	SOHO_TOGGLE(lv_rendersubdcurves, "Render Polygon Curves As Subdivision (Mantra)", "Geometry", 0)
	LAVA_PROP("object", "rendersubdcurves")
    }
    parm {
	SOHO_INT(lv_renderpoints, "Render As Points (Mantra)", "Geometry", 2)
	menu {
	    "0"	"No Point Rendering"
	    "1"	"Render Only Points"
	    "2"	"Render Unconnected Points"
	}
	LAVA_PROP("object", "renderpoints")
    }
    parm {
	SOHO_INT(lv_renderpointsas, "Render Points As (Mantra)", "Geometry", 0)
	menu {
	    "0"	"Spheres"
	    "1"	"Circles"
	}
	disablewhen "{ lv_renderpoints == 0 }"
	LAVA_PROP("object", "renderpointsas")
    }
    parm {
	SOHO_FLOAT(lv_pointscale, "Point Scale", "Geometry", 1)
	range { 0! 10 }
	disablewhen "{ lv_renderpoints == 0 }"
	LAVA_PROP("object", "pointscale")
    }
    parm {
	SOHO_TOGGLE(lv_pscalediameter,
		"Treat Point Scale as Diameter Instead of Radius", "Geometry", 0)
	LAVA_PROP("object", "pscalediameter")
    }
    parm {
	SOHO_TOGGLE(lv_packinstance,
		"Auto-Instancing Of Alembic/Packed Primitives", "Geometry", 1)
	LAVA_PROP("object", "packinstance")
    }
    parm {
	SOHO_TOGGLE(lv_pack_mergefragments,
		"Merge packed fragments into single geometry", "Geometry", 1)
	LAVA_PROP("object", "pack_mergefragments")
    }
    parm {
	SOHO_INT(lv_pack_sequencesubsteps,
		"Packed Sequence Segments", "Geometry", 4)
	LAVA_PROP("object", "pack_sequencesubsteps")
    }
    parm {
	SOHO_STRING(lv_pack_refineoptions,
		"Packed refinement options", "Geometry", {})
	LAVA_PROP("object", "pack_refineoptions")
    }
    parm {
	SOHO_INT(lv_flattenprocedural, "Flatten Procedurals",
		    "Geometry", 1)
	menu {
	    "0"	"No pre-processing of procedurals"
	    "1" "Flatten procedurals that use shared geometry"
	    "2" "Flatten all procedurals"
	}
	LAVA_PROP("object", "flattenprocedural")
    }
    parm {
	SOHO_INT(lv_flattentoroot, "Flatten Procedurals To Root Level",
		    "Geometry", 1)
	LAVA_PROP("object", "flattentoroot")
    }
    parm {
	SOHO_TOGGLE(lv_usenforpoints, "Use N For Point Rendering", "Geometry", 0)
	disablewhen "{ lv_renderpoints == 0 }"
	LAVA_PROP("object", "usenforpoints")
    }
    parm {
	SOHO_TOGGLE(lv_metavolume, "Metaballs as Volume", "Geometry", 0)
	LAVA_PROP("object", "metavolume")
    }
    parm {
	SOHO_TOGGLE(lv_curveunitst, "Use Unit s/t for Curves", "Geometry", 1)
	LAVA_PROP("object", "curveunitst")
    }
    parm {
	SOHO_TOGGLE(lv_volumenormal, "Compute Normals for Volumes", "Geometry", 0)
	LAVA_PROP("object", "volumenormal")
    }
    parm {
        SOHO_TOGGLE(lv_volumedpdzfov, "Normalize dPdz over FOV", "Geometry", 0)
        LAVA_PROP("object", "volumedpdzfov")
    }
    parm {
	SOHO_TOGGLE(lv_traceblur, "Raytrace Motion Blur", RENDERING_MAIN_LABEL, 0)
	hidewhen	"{ allowmotionblur == 0 } { lv_renderengine != micropoly lv_renderengine != pbrmicropoly }"
	LAVA_PROP("object", "traceblur")
    }
    parm {
	SOHO_TOGGLE(lv_imageblur, "Allow Image Motion Blur", RENDERING_SAMPLING_LABEL, 1)
	disablewhen	"{ allowmotionblur == 0 }"
	LAVA_PROP("renderer", "imageblur")
    }
    parm {
	SOHO_TOGGLE(lv_forcegeometry, "Force Procedural Geometry Output", "Geometry", 1)
    }
    parm {
	SOHO_INT(lv_coving, "Coving", "Geometry", 1)
	menu {
	    "0"	"Disable Coving"
	    "1" "Coving for displacement/sub-d"
	    "2" "Coving for all primitives"
	}
	LAVA_PROP("object", "coving")
    }
    parm {
	SOHO_TOGGLE(lv_samplecoving, "Use Sample Coving", "Geometry", 0)
	disablewhen	"{ lv_coving == 0 }"
	LAVA_PROP("object", "samplecoving")
    }
    parm {
	SOHO_FLOAT(lv_samplecovingexpansion, "Sample Coving Expansion Factor", "Geometry", 0.5)
	disablewhen	"{ lv_coving == 0 } { lv_samplecoving == 0 }"
        range   { -1 100 }
	LAVA_PROP("object", "samplecovingexpansion")
    }
    parm {
	SOHO_TOGGLE(lv_sharedisplace, "Share Displacements Between Instances", RENDERING_SHADING_LABEL, 0)
	LAVA_PROP("object", "sharedisplace")
    }
    parm {
	SOHO_INT(lv_shadingqueuesize, "Shading Queue Size", RENDERING_LIMITS_LABEL, 256)
	range	{ 1 256 }
	LAVA_PROP("renderer", "shadingqueuesize")
    }
    parm {
	SOHO_FLOAT(lv_flatness, "Dicing Flatness", "Dicing", 0.05)
	range	{ 0 1 }
	LAVA_PROP("object", "flatness")
    }
    parm {
	SOHO_INT(lv_raypredice, "Ray Predicing", "Dicing", 0)
	menu {
	    "0"	"Disable Predicing"
	    "1"	"Full Predicing"
	    "2"	"Precompute Bounds"
	}
	LAVA_PROP("object", "raypredice")
    }
    parm {
	SOHO_TOGGLE(lv_rmbackface, "Backface Removal", "Geometry", 0)
	LAVA_PROP("object", "rmbackface")
    }
    parm {
	SOHO_STRING(lv_geometrygroup, "Render Group", "Geometry", "")
	LAVA_PROP("object", "geometrygroup")
    }
    parm {
	SOHO_TOGGLE(lv_generate_opid, "Generate Op Ids for objects",
			EXTRA_IMAGE_LABEL, 0)
    }

    parm {
        SOHO_INT(lv_addnormalsto, "Add Normals to Geometry",
                        RENDERING_GEOMETRY_LABEL, 1)
        menu {
            "0" "None"
            "1" "Vertex Normals"
            "2" "Point Normals"
        }
    }
    parm {
        SOHO_FLOAT(lv_cuspangle, "Cusp Angle for Vertex Normals", RENDERING_GEOMETRY_LABEL, 60.0)
        range { 0 180 }
        disablewhen "{ lv_addnormalsto != 1 }"
    }
    parm {
	SOHO_TOGGLE(lv_computeN, "Automatically Compute Normals (Old)",
			RENDERING_GEOMETRY_LABEL, 1)
	LAVA_PROP("geometry", "computeN")
    }
    parm {
	SOHO_STRING(lv_segmentattrs, "Motion Blurred Attributes",
			"Geometry", "")
	LAVA_PROP("geometry", "segmentattrs")
    }
    parm {
	SOHO_TOGGLE(lv_inlinestorage, "Save Geometry Inline",
					  RENDERING_DRIVER_LABEL, 0)
    }
    parm {
	SOHO_TOGGLE(lv_reuseoutlinecache, "Reuse cached outlined geometry",
					  RENDERING_DRIVER_LABEL, 0)
	disablewhen "{ lv_inlinestorage != 0 }"
    }
    parm {
	SOHO_FILE(lv_tmpsharedstorage, "Shared temp storage",
			  RENDERING_DRIVER_LABEL,
			  "$HIP/ifds/storage")
	parmtag	{ filechooser_mode	"write" }
	disablewhen "{ lv_inlinestorage != 0 }"
    }
    parm {
	SOHO_FILE(lv_tmplocalstorage, "Local temp storage",
			  RENDERING_DRIVER_LABEL,
			  "$HOUDINI_TEMP_DIR/ifds/storage")
	parmtag	{ filechooser_mode	"write" }
	disablewhen "{ lv_inlinestorage != 0 }"
    }
    parm {
	SOHO_TOGGLE(lv_binarygeometry, "Save Binary Geometry",
					  RENDERING_DRIVER_LABEL, 1)
    }
    parm {
	SOHO_TOGGLE(lv_savegroups, "Save Geometry Groups",
					  RENDERING_RENDER_LABEL, 1)
    }
    parm {
	SOHO_TOGGLE(lv_abort_missing_texture, "Abort on missing texture",
					  RENDERING_RENDER_LABEL, 0)
	LAVA_PROP("renderer", "abortmissingtexture")
    }

    parm {
	SOHO_FILE(lv_defaults, "Mantra Defaults", RENDERING_DRIVER_LABEL, "")
	parmtag	{ filechooser_mode	"read" }
    }

    parm {
        SOHO_INT(lv_photoncount, "Photon Storage Count",
			RENDERING_SHADING_LABEL, 100000)
	range		{ 0 1000000 }
	disablewhen	"{ lv_renderengine != photon }"
	LAVA_PROP("photon", "photoncount")
    }
    parm {
        SOHO_FLOAT(lv_photonminratio, "Minimum Photon Storage Ratio", RENDERING_SHADING_LABEL, 0.01)
	range	{ 0 1 }
	LAVA_PROP("photon", "photonminratio")
    }
    parm {
	SOHO_FILE(lv_photongfile, "Global Photon File",
                                       RENDERING_SHADING_LABEL, "$HIP/global.pmap")
	parmtag	{ filechooser_mode	"read_and_write" }
	LAVA_PROP("photon", "photongfile")
    }
    parm {
	SOHO_FILE(lv_photoncfile, "Caustic Photon File",
                                       RENDERING_SHADING_LABEL, "$HIP/caustic.pmap")
	parmtag	{ filechooser_mode	"read_and_write" }
	LAVA_PROP("photon", "photoncfile")
    }
    parm {
        SOHO_STRING(lv_photontarget, "Photon Target", RENDERING_SHADING_LABEL, "*")
        LAVA_PROP("light", "photontarget")
    }
    parm {
        SOHO_FLOAT(lv_photonweight, "Photon Weight", RENDERING_SHADING_LABEL, 1)
        LAVA_PROP("light", "photonweight")
    }

    parm {
	SOHO_TOGGLE(lv_gienable, "Enable Irradiance Cache", "Irradiance", 0)
	LAVA_PROP("object", "gienable")
    }
    parm {
	SOHO_FILE(lv_gifile, "Irradiance Cache File", "Irradiance", "")
	parmtag		{ filechooser_mode	"read_and_write" }
	disablewhen	"{ lv_gienable != 1 }"
	LAVA_PROP("object", "gifile")
    }
    parm {
	SOHO_STRING(lv_gifilemode, "Read/Write Mode", "Irradiance", "")
	menu {
	    ""		"None"
	    "r"		"Read"
	    "w"		"Write"
	    "rw"	"Read/Write"
	}
	disablewhen	"{ lv_gienable != 1 }"
	LAVA_PROP("object", "gifilemode")
    }
    parm {
	SOHO_INT(lv_gisample, "Default Samples", "Irradiance", 256)
	disablewhen	"{ lv_gienable != 1 }"
	LAVA_PROP("object", "gisample")
    }
    parm {
	SOHO_FLOAT(lv_gierror, "Irradiance Error", "Irradiance", 0.1)
	range	{ 0 1 }
	disablewhen	"{ lv_gienable != 1 }"
	LAVA_PROP("object", "gierror")
    }
    parm {
	SOHO_FLOAT(lv_giminspacing, "Min Spacing (Pixels)", "Irradiance", 1.5)
	range	{ 0 20 }
	disablewhen	"{ lv_gienable != 1 }"
	LAVA_PROP("object", "giminspacing")
    }
    parm {
	SOHO_FLOAT(lv_gimaxspacing, "Max Spacing (Pixels)", "Irradiance", 20)
	range	{ 0 20 }
	disablewhen	"{ lv_gienable != 1 }"
	LAVA_PROP("object", "gimaxspacing")
    }

    multiparm {
	name	lv_numuserattrib
	label	"User Properties"
	parmtag	{ spare_category	"User" }

	parm {
	    SOHO_STRING("lv_username#", "Property #", "User", "")
	}
	parm {
	    SOHO_STRING("lv_usertype#", "Type #", "User", "float")
	    menu {
		"int"		"Integer/Bool"
		"float"		"Float"
		"vector"	"Vector"
		"string"	"String"
		"vector4"	"Vector 4"
		// "matrix3"	"Matrix 3"
		// "matrix4"	"Matrix 4"
	    }
	}
	parm {
	    SOHO_INT("lv_userint#", "Integer Value", "User", 0)
	    disablewhen	"{ lv_usertype# != int }"
	}
	parm {
	    SOHO_FLOAT("lv_userscalar#", "Float Value", "User", 0)
	    disablewhen	"{ lv_usertype# != float }"
	}
	parm {
	    name	"lv_user3tuple#"
	    label	"Vector Value"
	    size	3
	    type	float
	    default	{ 0 0 0 }
	    disablewhen	"{ lv_usertype# != vector }"
	}
	parm {
	    name	"lv_user4tuple#"
	    label	"Vector4 Value"
	    size	4
	    type	float
	    default	{ 0 0 0 0 }
	    disablewhen	"{ lv_usertype# != vector4 }"
	}
	parm {
	    SOHO_STRING("lv_userstring#", "String Value", "User", "")
	    disablewhen	"{ lv_usertype# != string }"
	}
    }

    parm {
	SOHO_TOGGLE(soho_forceheadlight, "Force Headlight Creation", "Objects", 0)
    }

// This file will be included if it exists to provide additional
// collections of parameters which are defined on a per job, site, etc.
// basis.
// The file will be searched for in $HOUDINI_PATH/soho, so it should
// be prefixed with "parameters/"
#sinclude "parameters/IFDmantra.user.ds"

    // Default parameter lists for objects.

#if !defined(USER_DEFINED_IFD_CAMERA_PARMS)
    parm {
	name	default_camera
	label	"Default Camera"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	"iconscale resolution aspect projection lv_lensshader focal_length aperture orthowidth near far background_parms shutter viewport_window viewport_crop focus fstop lv_bokeh lv_bokehfile lv_bokehrotation" }
    }

    parm {
	name	default_stereocamera
	label	"Default Stereo Camera"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	"iconscale resolution aspect projection lv_lensshader focal_length aperture orthowidth near far shutter viewport_window viewport_crop focus fstop lv_bokeh lv_bokehfile lv_bokehrotation lv_cameralist" }
    }

#endif

#if !defined(USER_DEFINED_IFD_LIGHT_PARMS)
    parm {
	name	default_light
	label	"Default Light"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	"categories shop_lightpath shop_shadowpath shadowmask" }
    }
#endif

#if !defined(USER_DEFINED_IFD_AMBIENT_PARMS)
    parm {
	name	default_ambient
	label	"Default Ambient"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	"shop_lightpath light_color" }
    }
#endif

#if !defined(USER_DEFINED_IFD_GEOMETRY_PARMS)
    parm {
	name	default_geometry
	label	"Default Geometry"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
	    categories
	    reflectmask
	    refractmask
	    lightmask
	    lightcategories
	    lv_lpetag
	    lv_volumefilter
	    lv_volumefilterwidth
	    lv_matte
	    velocityblur
	    lv_shadingquality
	    lv_flatness
	    lv_raypredice
	    lv_curvesurface
	    lv_rayshade
	    lv_rmbackface
	    shop_geometrypath
	    lv_forcegeometry
	    lv_rendersubdcurves
	    lv_renderpoints
            lv_renderpointsas
	    lv_usenforpoints
	    lv_pointscale
            lv_pscalediameter
	    lv_metavolume
	    lv_coving
	    lv_materialoverride
	    lv_overridedetail
            lv_procuseroottransform
	    )" }
    }
#endif

#if !defined(USER_DEFINED_IFD_OUTPUT_PARMS)
    parm {
	// Parameters for the "Images/Output" tab
	name	default_images_output
	label	"Default Images/Output"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
	    lv_pfilter
	    lv_sfilter
	    lv_quantize
	    lv_gamma
	    lv_subpixel
	    res_fraction
	    lv_tiled_rendering
	    lv_writecheckpoint
	    lv_readcheckpoint
	    render_viewcamera
	    render_any_shadowmap
	    render_any_envmap
	    render_any_photonmap
	    render_any_pointcloud
	    )"
	}
    }
    parm {
	// Parameters for the "Images/Output" tab
	name	unwrap_images_output
	label	"Unwrap Images/Output"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
            lv_pfilter
	    lv_sfilter
	    lv_quantize
	    lv_gamma
	    lv_subpixel
	    lv_tiled_rendering
	    render_viewcamera
	    render_any_shadowmap
	    render_any_envmap
	    render_any_photonmap
	    render_any_pointcloud
	    )"
	}
    }
    parm {
	name	default_images_deep_output
	label	"Default Deep Output"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
	    lv_deepresolver
	    lv_dcmfilename
	    lv_matchdeeppixelfilter
	    lv_dcmcompositing
	    lv_dcmdepthplanes
	    lv_dsmfilename
	    )"
	}
    }
    parm {
	name	default_images_crypto_output
	label	"Default Crypto Output"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
	    lv_cryptolayers
	    )"
	}
    }
    parm {
        // Parameters for the "Images/Extra Image Planes" tab
        name	default_images_extra_pre
        label	"Default Images/Extra Image Planes"
        parmtag	{ spare_category	"__spare_parmlist" }
        parmtag	{ spare_parmlist	R"(
            )"
        }
    }
    parm {
	// Parameters for the "Images/Extra Image Planes" tab
	name	mantra_images_extra
	label	"Default Images/Extra Image Planes"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
            lv_exportcomponents
	    lv_quickplane_P
	    lv_quickplane_Pz
            lv_quickplane_N
	    lv_quickplane_all_comp
	    lv_quickplane_direct_comp
	    lv_quickplane_indirect_comp
	    lv_quickplane_all_emission
	    lv_quickplane_direct_noshadow
	    lv_quickplane_direct_samples
	    lv_quickplane_indirect_samples
	    lv_quickplane_sss
            lv_quickplane_basecolor
            lv_quickplane_diffcolor
            lv_quickplane_speccolor
            lv_quickplane_emitcolor
            lv_quickplane_ssscolor
            lv_quickplane_metallic
            lv_quickplane_specrough
	    )"
	}
    }
    parm {
        // Parameters for the "Images/Extra Image Planes" tab
        name	unwrap_images_extra
        label	"Default Images/Extra Image Planes"
        parmtag	{ spare_category	"__spare_parmlist" }
        parmtag	{ spare_parmlist	R"(
	    lv_bake_normalizep
            lv_extractimageplanes
            lv_extractremoveintermediate
            lv_extractimageplanesformat
            lv_quickplane_Nt
            lv_quickplane_Ds
            lv_quickplane_Vd
            lv_quickplane_Vdt
            lv_quickplane_Oc
            lv_quickplane_Cv
            lv_quickplane_Th
            lv_quickplane_Cu
	    lv_quickplane_P
	    lv_quickplane_N
            lv_quickplane_basecolor
            lv_quickplane_diffcolor
            lv_quickplane_speccolor
            lv_quickplane_emitcolor
            lv_quickplane_ssscolor
            lv_quickplane_metallic
            lv_quickplane_specrough
            )"
        }
    }
    parm {
        // Parameters for the "Images/Extra Image Planes" tab
        name	unwrap_images_channels
        label	"Image Planes Output"
        parmtag	{ spare_category	"__spare_parmlist" }
        parmtag	{ spare_parmlist	R"(
	    lv_extractseparator
	    lv_channel_names_seperator_bar
            lv_quickplane_Nt_channel
            lv_quickplane_Ds_channel
            lv_quickplane_Vd_channel
            lv_quickplane_Vdt_channel
            lv_quickplane_Oc_channel
            lv_quickplane_Cv_channel
            lv_quickplane_Th_channel
            lv_quickplane_Cu_channel
	    lv_quickplane_P_channel
	    lv_quickplane_N_channel
            lv_quickplane_basecolor_channel
            lv_quickplane_diffcolor_channel
            lv_quickplane_speccolor_channel
            lv_quickplane_emitcolor_channel
            lv_quickplane_ssscolor_channel
            lv_quickplane_metallic_channel
            lv_quickplane_specrough_channel
            )"
        }
    }
    parm {
        // Parameters for the "Images/Extra Image Planes" tab
        name	default_images_extra_post
        label	"Default Images/Extra Image Planes"
        parmtag	{ spare_category	"__spare_parmlist" }
        parmtag	{ spare_parmlist	R"(
            lv_showextraplaneparms
            lv_numaux
            )"
        }
    }
    parm {
	// Parameters for the "Images/Meta Data" tab
	name	default_images_meta
	label	"Default Images/Meta Data"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
	    common_format_options
	    lv_image_mplay_direction
	    lv_image_mplay_framemode
	    lv_image_mplay_label
	    lv_image_jpeg_quality
	    lv_image_tiff_compression
	    lv_image_exr_compression
	    lv_image_exr_dwa_level
	    )"
	}
    }
    parm {
	// Parameters for the "Images/Meta Data" tab
	name	unwrap_images_meta
	label	"Unwrap Images/Meta Data"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
	    common_format_options
	    lv_image_jpeg_quality
	    lv_image_tiff_compression
	    lv_image_exr_compression
	    lv_image_exr_dwa_level
	    )"
	}
    }
    parm {
	// Parameters for the "Rendering" tab
	name	default_rendering
	label	"Default Rendering"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
	    lv_renderengine
	    lv_dof
	    allowmotionblur
	    xform_motionsamples
	    geo_motionsamples
	    shutteroffset
	    lv_traceblur
	    )"
	}
    }
    parm {
	// Parameters for the "Rendering" tab
	name	unwrap_rendering
	label	"Unwrap Rendering"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
	    lv_renderengine
	    )"
	}
    }
    parm {
	// Parameters for the "Rendering/Render" tab
	name	default_rendering_render
	label	"Default Rendering/Render"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
	    lv_bucketsize
	    lv_threads
	    lv_cachelimit
	    lv_octreestyle
	    lv_kdmemfactor
	    lv_hidden
	    lv_otlfullpath
	    lv_embedvex
	    declare_stylesheets
	    apply_stylesheets
	    declare_all_shops
	    )"
	}
    }
    parm {
	// Parameters for the "Rendering/Render" tab
	name	unwrap_rendering_render
	label	"Unwrap Rendering/Render"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
	    lv_bucketsize
	    lv_threads
	    lv_cachelimit
	    lv_kdmemfactor
	    lv_otlfullpath
	    lv_embedvex
	    declare_all_shops
	    )"
	}
    }
    parm {
	// Parameters for the "Rendering/Baking" tab
	name	default_rendering_baking
	label	"Default Rendering/Baking"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
	    lv_bake_skipcf
	    lv_bake_layerexport
	    lv_bake_samples
	    lv_bake_tangentnormal_group
	    lv_bake_occlusionbias
	    lv_bake_cavity_group
	    lv_bake_curvature_group
	    )"
	}
    }
    parm {
	// Parameters for the "Rendering/Sampling" tab
	name	default_rendering_sampling
	label	"Default Rendering/Sampling"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
	    lv_samples
	    lv_dorayvariance
	    lv_colorspace
	    lv_maxnumberofindirectsamples
	    lv_minraysamples
	    lv_maxraysamples
	    lv_variance
            lv_globalquality
	    lv_diffusequality
            lv_sssquality
	    lv_reflectionquality
	    lv_refractionquality
	    lv_volumequality
	    lv_volumesteprate
	    lv_volumeshadowsteprate
	    lv_volumezerothreshold
	    lv_transparent
	    lv_transparentsamples
	    lv_samplelock
	    lv_randomseed
	    lv_imageblur
	    )"
	}
    }
    parm {
	// Parameters for the "Rendering/Sampling" tab
	name	unwrap_rendering_sampling
	label	"Unwrap Rendering/Sampling"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
	    lv_samples
	    lv_dorayvariance
	    lv_colorspace
	    lv_maxnumberofindirectsamples
	    lv_minraysamples
	    lv_maxraysamples
	    lv_variance
            lv_globalquality
            lv_diffusequality
            lv_sssquality
	    lv_reflectionquality
	    lv_refractionquality
	    lv_volumequality
	    lv_transparent
	    lv_transparentsamples
	    lv_samplelock
	    lv_randomseed
	    )"
	}
    }
    parm {
	// Parameters for the "Limits" tab
	name	default_rendering_limits
	label	"Default Limits"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
	    lv_reflectlimit
	    lv_refractlimit
	    lv_diffuselimit
            lv_ssslimit
	    lv_volumelimit
	    lv_opacitylimit
	    lv_colorlimit
            lv_raylimiteval
            lv_raylimitcomponents
            lv_raylimitlightmask
	    )"
	}
    }
    parm {
	// Parameters for the "Limits" tab
	name	unwrap_rendering_limits
	label	"Unwrap Limits"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
	    lv_reflectlimit
	    lv_refractlimit
	    lv_diffuselimit
            lv_ssslimit
	    lv_opacitylimit
	    lv_colorlimit
            lv_raylimiteval
            lv_raylimitcomponents
            lv_raylimitlightmask
	    )"
	}
    }
    parm {
	// Parameters for the "Rendering/Shading" tab
	name	unwrap_rendering_shading
	label	"Unwrap Rendering/Shading"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
	    lv_raybias
	    lv_biasnormal
	    lv_nesteddielectric
	    lv_pbrpathtype
	    lv_constrainmaxrough
	    lv_refractcomponents
	    lv_diffusecomponents
	    lv_volumecomponents
	    lv_ssscomponents
	    )"
	}
    }
    parm {
	// Parameters for the "Rendering/Shading" tab
	name	default_rendering_shading
	label	"Default Rendering/Shading"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
	    lv_raybias
	    lv_biasnormal
	    lv_nesteddielectric
	    lv_pbrpathtype
	    lv_constrainmaxrough
	    lv_refractcomponents
	    lv_diffusecomponents
	    lv_volumecomponents
	    lv_ssscomponents
	    )"
	}
    }
    parm {
	// Parameters for the "Rendering/Dicing" tab
	name	unwrap_rendering_dicing
	label	"Unwrap Rendering/Dicing"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
	    lv_shadingfactor
	    )"
	}
    }
    parm {
	// Parameters for the "Rendering/Dicing" tab
	name	default_rendering_dicing
	label	"Default Rendering/Dicing"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
	    lv_shadingfactor
	    lv_motionfactor
	    lv_measuring
	    lv_measurezimportance
	    lv_measureoffscreenquality
	    )"
	}
    }
    parm {
	// Parameters for the "Rendering/Statistics" tab
	name	default_rendering_statistics
	label	"Default Rendering/Statistics"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
	    soho_spoolrenderoutput
	    lv_verbose
	    lv_vexprofile
	    lv_alfprogress
	    lv_tilecallback
	    lv_logcolors
	    lv_logtimestamps
	    )"
	}
    }

    // Default parameters for full output driver
    parm {
	name	default_output
	label	"Default Output"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
	    lv_picture_group
	    soho_skip_frame
	    lv_pfilter
	    lv_sfilter
	    lv_quantize
	    lv_gamma
	    lv_subpixel
	    res_fraction
	    override_resolution
	    lv_tiled_rendering
	    lv_exportcomponents
	    lv_cryptolayers

	    lv_quickplane_P
	    lv_quickplane_Pz
	    lv_quickplane_N
	    lv_quickplane_all_comp
	    lv_quickplane_direct_comp
	    lv_quickplane_indirect_comp
	    lv_quickplane_all_emission
	    lv_quickplane_direct_noshadow
	    lv_quickplane_direct_samples
	    lv_quickplane_indirect_samples
            lv_quickplane_sss
            lv_quickplane_basecolor
            lv_quickplane_diffcolor
            lv_quickplane_speccolor
            lv_quickplane_emitcolor
            lv_quickplane_ssscolor
            lv_quickplane_metallic
            lv_quickplane_specrough
	    lv_showextraplaneparms
	    lv_numaux

	    common_format_options
	    lv_image_mplay_direction
	    lv_image_mplay_framemode
	    lv_image_mplay_label
	    lv_image_mplay_gamma
	    lv_image_jpeg_quality
	    lv_image_tiff_compression
	    lv_image_exr_compression

	    lv_renderengine
	    lv_bucketsize
	    lv_opacitylimit
	    lv_threads
	    lv_cachelimit
	    lv_octreestyle
	    lv_kdmemfactor
	    lv_hidden
	    render_viewcamera
	    render_any_shadowmap
	    render_any_envmap
	    render_any_photonmap
	    render_any_pointcloud
	    lv_otlfullpath
	    lv_embedvex

	    lv_samples
	    lv_dof
	    allowmotionblur
	    xform_motionsamples
	    geo_motionsamples
	    lv_motionfactor
	    lv_traceblur
	    shutteroffset
	    lv_imageblur
	    lv_samplelock
	    lv_dorayvariance
	    lv_maxnumberofindirectsamples
	    lv_minraysamples
	    lv_maxraysamples
	    lv_variance
            lv_globalquality
            lv_diffusequality
            lv_sssquality
	    lv_reflectionquality
	    lv_refractionquality
	    lv_volumequality
	    lv_volumesteprate
	    lv_volumeshadowsteprate
	    lv_volumezerothreshold
	    lv_transparent
	    lv_transparentsamples
	    lv_randomseed

	    lv_reflectlimit
	    lv_refractlimit
	    lv_diffuselimit
            lv_ssslimit
	    lv_volumelimit
	    lv_refractcomponents
	    lv_diffusecomponents
	    lv_volumecomponents
	    lv_ssscomponents
	    lv_raybias
	    lv_biasnormal
	    lv_nesteddielectric
	    lv_colorspace
	    lv_raylimiteval
	    lv_raylimitcomponents
	    lv_raylimitlightmask
	    lv_pbrpathtype
	    lv_constrainmaxrough
	    lv_colorlimit

	    lv_pbrshader

	    soho_spoolrenderoutput
	    lv_verbose
	    lv_vexprofile
	    lv_alfprogress
	    lv_tilecallback
	    lv_logcolors
	    lv_logtimestamps

	    lv_shadingfactor
	    lv_measuring

	    lv_inlinestorage
	    lv_tmpsharedstorage
	    lv_tmplocalstorage
	    lv_binarygeometry
	    lv_savegroups
	    )"
	}
    }
#endif
}

#undef VEX_QUANTIZE_MENU
#undef VEX_PIXEL_FILTER_MENU
#undef VEX_AUX_PIXEL_FILTER_MENU
#undef VEX_FILTER_MENU
#undef VEX_TYPE_MENU
#undef VEX_DISABLE_AUXPLANE
