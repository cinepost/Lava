{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"e",
				"env_p"
			],
			[
				"de",
				"developmentDirectories"
			],
			[
				"LLO",
				"LLOG_ERR"
			],
			[
				"mF",
				"mFailed"
			],
			[
				"Bu",
				"Buffer"
			],
			[
				"U",
				"UINT32_MAX"
			],
			[
				"UIN",
				"UINT32_MAX"
			],
			[
				"mp",
				"mpComputeRasterizerPass"
			],
			[
				"Ras",
				"Rasterizer"
			],
			[
				"S",
				"SharedPtr"
			],
			[
				"pTe",
				"pTexture"
			],
			[
				"s",
				"size_t"
			],
			[
				"tex",
				"texture"
			],
			[
				"f",
				"false"
			],
			[
				"ba",
				"back"
			],
			[
				"t",
				"textureHandle"
			],
			[
				"mate",
				"materialResolveData"
			],
			[
				"mpV",
				"mpVirtualPagesDataBuffer"
			],
			[
				"ui",
				"uint8_t"
			],
			[
				"virt",
				"virtualTexturesData"
			],
			[
				"res",
				"resize"
			],
			[
				"virtu",
				"virtualPagesData"
			],
			[
				"se",
				"setBuffer"
			],
			[
				"mip",
				"mipBases"
			],
			[
				"i",
				"isSparse"
			],
			[
				"pT",
				"pTex"
			],
			[
				"con",
				"continue"
			],
			[
				"uin",
				"uint8_t"
			],
			[
				"k",
				"kLtxPageSize"
			],
			[
				"set",
				"setBuffer"
			],
			[
				"mIs",
				"mIsSparse"
			],
			[
				"a",
				"any_cast"
			],
			[
				"kEx",
				"kExtendedHandlesDataName"
			],
			[
				"is",
				"isSparse"
			],
			[
				"st",
				"std"
			],
			[
				"isS",
				"isSparse"
			],
			[
				"to",
				"totalPagesToUpdateCountAligned"
			],
			[
				"h",
				"header"
			],
			[
				"LLOG",
				"LLOG_WRN"
			],
			[
				"cu",
				"currentPageOffset"
			],
			[
				"L",
				"LTX_Bitmap"
			],
			[
				"siz",
				"size_t"
			],
			[
				"FI",
				"FILE"
			],
			[
				"p",
				"pLtxBitmap"
			],
			[
				"kP",
				"kOnePageTailData"
			],
			[
				"F",
				"Flags"
			],
			[
				"getM",
				"getMipTailStart"
			],
			[
				"Te",
				"Texture"
			],
			[
				"co",
				"continue"
			],
			[
				"z",
				"size"
			],
			[
				"tail",
				"tail_data"
			],
			[
				"pSc",
				"pScratchBufferData"
			],
			[
				"re",
				"reserve"
			],
			[
				"m",
				"mipTailStart"
			],
			[
				"u",
				"uint8_t"
			],
			[
				"Con",
				"Constant"
			],
			[
				"d",
				"data"
			],
			[
				"mem",
				"memset"
			],
			[
				"ta",
				"tangents"
			],
			[
				"non-",
				"non-indexed"
			],
			[
				"mM",
				"mMesh"
			],
			[
				"inde",
				"indexCount"
			],
			[
				"ver",
				"vertices"
			],
			[
				"mMes",
				"mMeshletGroups"
			],
			[
				"mesh",
				"meshletsMemoryInBytes"
			],
			[
				"meshl",
				"meshLightCount"
			],
			[
				"LL",
				"LLOG_INF"
			],
			[
				"meshle",
				"meshletSpec"
			],
			[
				"meshlet",
				"meshletSpecs"
			],
			[
				"c",
				"constexpr"
			],
			[
				"prim",
				"primitiveIndices"
			],
			[
				"Mesh",
				"MeshletDraw"
			],
			[
				"mMesh",
				"mMeshletGroups"
			],
			[
				"Meshl",
				"Meshlet"
			],
			[
				"mes",
				"meshlets_count"
			],
			[
				"kInval",
				"kInvalidMeshletID"
			],
			[
				"kI",
				"kInvalidExportedID"
			],
			[
				"me",
				"meshletVertices"
			],
			[
				"local_",
				"local_vert_count"
			],
			[
				"mesh_",
				"mesh_start_index"
			],
			[
				"bre",
				"break"
			],
			[
				"la",
				"last_index"
			],
			[
				"gr",
				"groupSpec"
			],
			[
				"mMeshlet",
				"mMeshletGroups"
			],
			[
				"Genet",
				"Generating"
			],
			[
				"gene",
				"generateMeshlets"
			],
			[
				"Scen",
				"SceneTypes"
			],
			[
				"inn",
				"inner_indices"
			],
			[
				"te",
				"tesselatePolySimple"
			],
			[
				"in",
				"indices"
			],
			[
				"triang",
				"triangles"
			],
			[
				"use16",
				"use16BitIndices"
			],
			[
				"tr",
				"triangles_count"
			],
			[
				"tria",
				"triangles_count"
			],
			[
				"mesl",
				"meshlets"
			],
			[
				"pus",
				"push_back"
			],
			[
				"meshlets",
				"meshlets_count"
			],
			[
				"meshletGe",
				"meshletGeoInst"
			],
			[
				"Mes",
				"MeshletGeometryInstance"
			],
			[
				"inst",
				"instanceData"
			],
			[
				"Ge",
				"GeometryInstanceData"
			],
			[
				"mehs",
				"meshletGeometryInstances"
			],
			[
				"R",
				"R32Uint"
			],
			[
				"Sh",
				"SharedPtr"
			],
			[
				"T",
				"Texture"
			],
			[
				"mpMe",
				"mpMeshletsVertexBuffer"
			],
			[
				"cons",
				"constexpr"
			],
			[
				"page",
				"pageIndex"
			],
			[
				"inc",
				"include"
			],
			[
				"sh",
				"shadingPassType"
			],
			[
				"mU",
				"mUseVariance"
			],
			[
				"mUs",
				"mUseSTBN"
			],
			[
				"mRa",
				"mRayContribThreshold"
			],
			[
				"mR",
				"mRussRouletteLevel"
			],
			[
				"mSA",
				"mSampleNumber"
			],
			[
				"pM",
				"pMaterial"
			],
			[
				"str",
				"stringstream"
			],
			[
				"pP",
				"pPass"
			],
			[
				"RenderP",
				"RenderPass"
			],
			[
				"pC",
				"pCryptomattePass"
			],
			[
				"mMet",
				"mMetaData"
			],
			[
				"typeN",
				"typeName"
			],
			[
				"mT",
				"mTypeName"
			],
			[
				"mTyp",
				"mTypeName"
			],
			[
				"typ",
				"typeName"
			],
			[
				"C",
				"CryptoMaterial"
			],
			[
				"mTy",
				"mTypeName"
			],
			[
				"type",
				"type_name"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "/***************************************************************************\n # Copyright (c) 2015-22, NVIDIA CORPORATION. All rights reserved.\n #\n # Redistribution and use in source and binary forms, with or without\n # modification, are permitted provided that the following conditions\n # are met:\n #  * Redistributions of source code must retain the above copyright\n #    notice, this list of conditions and the following disclaimer.\n #  * Redistributions in binary form must reproduce the above copyright\n #    notice, this list of conditions and the following disclaimer in the\n #    documentation and/or other materials provided with the distribution.\n #  * Neither the name of NVIDIA CORPORATION nor the names of its\n #    contributors may be used to endorse or promote products derived\n #    from this software without specific prior written permission.\n #\n # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS \"AS IS\" AND ANY\n # EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n # PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n # CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n # EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n # PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n # PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n # OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n **************************************************************************/\n#include <boost/range/adaptors.hpp>\n\n#include \"stdafx.h\"\n\n#include \"blosc.h\"\n\n#include \"Falcor/Core/API/Device.h\"\n#include \"Falcor/Core/API/RenderContext.h\"\n#include \"Falcor/Core/API/VirtualTexturePage.h\"\n#include \"Falcor/Utils/StringUtils.h\"\n#include \"Falcor/Utils/ConfigStore.h\"\n#include \"Falcor/Utils/Image/LTX_Bitmap.h\"\n\n#include \"Scene/Material/TextureHandle.slang\"\n\n#include \"TextureManager.h\"\n\n\nnamespace ba = boost::adaptors;\n\n// Temporarily disable asynchronous texture loader until Falcor supports parallel GPU work submission.\n// Until then `TextureManager` should only called from the main thread.\n#define DISABLE_ASYNC_TEXTURE_LOADER\n\n\nnamespace Falcor {\n\nstatic const size_t kMinPagesPerLoadingThred = 10;\n\nnamespace {\n\tconst size_t kMaxTextureHandleCount = std::numeric_limits<uint32_t>::max();\n\tstatic_assert(TextureManager::TextureHandle::kInvalidID >= kMaxTextureHandleCount);\n}\n\nTextureManager::SharedPtr TextureManager::create(Device::SharedPtr pDevice, size_t maxTextureCount, size_t threadCount) {\n\treturn SharedPtr(new TextureManager(pDevice, maxTextureCount, threadCount));\n}\n\nTextureManager::TextureManager(Device::SharedPtr pDevice, size_t maxTextureCount, size_t threadCount)\n\t: mpDevice(pDevice)\n\t, mMaxTextureCount(std::min(maxTextureCount, kMaxTextureHandleCount))\n\t, mAsyncTextureLoader(mpDevice, threadCount)\n{\n\tmUDIMTextureTilesCount = 0;\n\tmUDIMTexturesCount = 0;\n\n\tmSparseTexturesEnabled = true; // TODO: should be dependent on device features !! \n\n\tblosc_init();\n\n\t// Init LRU texture data cache\n\tmpTextureDataCache = TextureDataCacheLRU::create(mpDevice, 1024, 512);\n}\n\nTextureManager::~TextureManager() {\n\tblosc_destroy();\n}\n\nTextureManager::TextureHandle TextureManager::addTexture(const Texture::SharedPtr& pTexture) {\n\tassert(pTexture);\n\tif (pTexture->getType() != Resource::Type::Texture2D || pTexture->getSampleCount() != 1) {\n\t\tthrow std::runtime_error(\"Only single-sample 2D textures can be added\");\n\t}\n\n\tstd::unique_lock<std::mutex> lock(mMutex);\n\tTextureHandle handle;\n\n\tif (auto it = mTextureToHandle.find(pTexture.get()); it != mTextureToHandle.end()) {\n\t\t// Texture is already managed. Return its handle.\n\t\thandle = it->second;\n\t} else {\n\t\t// Texture is not already managed. Add new texture desc.\n\t\tTextureDesc desc = { TextureState::Loaded, pTexture };\n\t\thandle = addDesc(desc, pTexture->isSparse() ? TextureHandle::Mode::Virtual : TextureHandle::Mode::Texture);\n\n\t\t// Add to texture-to-handle map.\n\t\tmTextureToHandle[pTexture.get()] = handle;\n\n\t\t// If texture was originally loaded from disk, add to key-to-handle map to avoid loading it again later if requested in loadTexture().\n\t\t// It's possible the user-provided texture has already been loaded by us. In that case, log a warning as the redundant load should be fixed.\n\t\tif (!pTexture->getSourcePath().empty()) {\n\t\t\tbool hasMips = pTexture->getMipCount() > 1;\n\t\t\tbool isSrgb = isSrgbFormat(pTexture->getFormat());\n\t\t\tTextureKey textureKey(pTexture->getSourcePath().string(), hasMips, isSrgb, pTexture->getBindFlags());\n\n\t\t\tif (mKeyToHandle.find(textureKey) == mKeyToHandle.end()) {\n\t\t\t\tmKeyToHandle[textureKey] = handle;\n\t\t\t} else {\n\t\t\t\tLLOG_WRN << \"TextureManager::addTexture() - Texture loaded from '\" << pTexture->getSourcePath() << \"' appears to be identical to an already loaded texture. This could be optimized by getting it from TextureManager.\";\n\t\t\t}\n\t\t}\n\t}\n\n\treturn handle;\n}\n\nTexture::SharedPtr TextureManager::loadSparseTexture(const fs::path& path, bool generateMipLevels, bool loadAsSRGB, Resource::BindFlags bindFlags) {\n\tstd::string ext = path.extension().string();\n\n\tif (ext == \".dds\") {\n\t\tLLOG_ERR << \"Sparse texture handling for DDS format unimplemented !!!\";\n\t\treturn nullptr;\n\t}\n\n\tconst auto& configStore = ConfigStore::instance();\n\tbool vtoff = configStore.get<bool>(\"vtoff\", false);\n\tif (!mSparseTexturesEnabled || vtoff) {\n\t\tLLOG_ERR << \"Virtual texturing disabled. Unable to use LTX texture \" << path.string();\n\t\treturn nullptr;\n\t}\n\n\tfs::path ltxPath = appendExtension(path, \".ltx\");\n\n\tbool ltxMagicMatch = false;\n\tbool ltxFileExists = fs::exists(ltxPath);\n\n\tif(ltxFileExists && LTX_Bitmap::checkFileMagic(ltxPath, true)) ltxMagicMatch = true;\n\n\tLTX_Bitmap::TLCParms tlcParms;\n\ttlcParms.compressorName = configStore.get<std::string>(\"vtex_tlc\", \"zlib\");\n\ttlcParms.compressionLevel = (uint8_t)configStore.get<int>(\"vtex_tlc_level\", 5);\n\n\tif(!ltxFileExists || !ltxMagicMatch ) {\n\t\tif(!configStore.get<bool>(\"fconv\", true)) {\n\t\t\tLLOG_WRN << \"On-line sparse texture conversion disabled !!!\";\n\t\t\treturn nullptr;\n\t\t}\n\n\t\tLLOG_INF << \"Converting source texture \" << path << \" to LTX format using \" << tlcParms.compressorName << \" compressor.\";\n\t\tif (!LTX_Bitmap::convertToLtxFile(mpDevice, path.string(), ltxPath.string(), tlcParms, true)) {\n\t\t\tLLOG_ERR << \"Error converting source texture: \" << path;\n\t\t\t// rename currupted texture for future debugging\n\t\t\tif( fs::exists( ltxPath ) ) {\n\t\t\t\tfs::rename( ltxPath, fs::path(ltxPath.string() + \".currupted\"));\n\t\t\t}\n\t\t\treturn nullptr;\n\t\t} else {\n\t\t\tLLOG_INF << \"Conversion to LTX done for source texture: \" << path;\n\t\t}\n\t}\n\t\n\tauto pLtxBitmap = LTX_Bitmap::createFromFile(mpDevice, ltxPath, true);\n  if (!pLtxBitmap) {\n    LLOG_ERR << \"Error loading converted LTX texture from \" << ltxPath;\n    return nullptr;\n  }\n\n  if(pLtxBitmap->header().srcLastWriteTime != fs::last_write_time(path.string())) {\n  \tLLOG_WRN << \"LTX source texture modification time changed. Forcing on-line reconversion !\";\n  \tif (!LTX_Bitmap::convertToLtxFile(mpDevice, path.string(), ltxPath.string(), tlcParms, true)) {\n\t\t\tLLOG_ERR << \"Error re-converting texture source texture: \" << path;\n\t\t\treturn nullptr;\n\t\t} else {\n\t\t\tLLOG_INF << \"Re-conversion done for source texture: \" << path;\n\t\t}\n\t\tpLtxBitmap = LTX_Bitmap::createFromFile(mpDevice, ltxPath, true);\n  }\n\n\n  ResourceFormat texFormat = pLtxBitmap->getFormat();\n\n  if (loadAsSRGB) {\n    texFormat = linearToSrgbFormat(texFormat);\n  }\n\n  uint32_t arraySize = 1;\n  Texture::SharedPtr pTexture = Texture::SharedPtr(\n  \tnew Texture(mpDevice, pLtxBitmap->getWidth(), pLtxBitmap->getHeight(), 1, arraySize, pLtxBitmap->getMipLevelsCount(), 1, texFormat, Texture::Type::Texture2D, bindFlags)\n  );\n\n  if( !pTexture ) return nullptr;\n\n  pTexture->setSourceFilename(ltxPath.string());\n  pTexture->mIsSparse = true;\n  \n\ttry {\n    pTexture->apiInit(nullptr, generateMipLevels);\n  } catch (const std::runtime_error& e) {\n    LLOG_ERR << \"Error initializing sparse texture \" << ltxPath << \"'\\nError details:\";\n    LLOG_ERR << e.what();\n    return nullptr;\n  } catch (...) {\n    LLOG_ERR <<  \"Error initializing sparse texture \" << ltxPath;\n    return nullptr;\n  }\n\n\tfor(auto& pPage: pTexture->sparseDataPages()) {\n   \tpPage->mID = static_cast<uint32_t>(mSparseDataPages.size());\n   \tmSparseDataPages.push_back(pPage);\n   }\n\n  uint32_t deviceMemRequiredSize = pTexture->getTextureSizeInBytes();\n  LLOG_DBG << \"Texture requires \" << std::to_string(deviceMemRequiredSize) << \" bytes of device memory\";\n  //if(deviceMemRequiredSize <= deviceCacheMemSizeLeft) {\n  //  deviceCacheMemSizeLeft = deviceCacheMemSize - deviceMemRequiredSize;\n  //} else {\n  //  LLOG_ERR << \"No texture memory left for texture \" <<  ltxPath;\n  //  return handle;\n  //}\n  \n  // Sparse bitmaps tracking\n  auto it = mTextureLTXBitmapsMap.find(pTexture->id());\n  if (it == mTextureLTXBitmapsMap.end()) {\n    mTextureLTXBitmapsMap[pTexture->id()] = std::move(pLtxBitmap);\n  }\n  //mTextureLTXBitmapsMap[pTexture->id()] = std::move(pLtxBitmap);\n  \n  pTexture->setVirtualID(mSparseTexturesCount++);\n\n\treturn pTexture;\n}\n\nvoid TextureManager::loadPages(const Texture::SharedPtr& pTexture, const std::vector<uint32_t>& pageIds) {\n\tif(!mHasSparseTextures || !pTexture || !pTexture->isSparse()) return;\n\n  assert(pTexture.get());\n  if(!pTexture) return;\n\n  uint32_t textureID = pTexture->id();\n\n  auto it = mTextureLTXBitmapsMap.find(textureID);\n  if (it == mTextureLTXBitmapsMap.end()) {\n    LLOG_ERR << \"No LTX_Bitmap stored for texture \" <<  pTexture->getSourceFilename();\n    return;\n  }\n\n  auto pLtxBitmap = mTextureLTXBitmapsMap[textureID];\n\n  std::vector<uint32_t> _pageIds = pageIds;\n  std::sort(_pageIds.begin(), _pageIds.end());\n\n  // read data and fill pages\n  std::string ltxFilename = pLtxBitmap->getFileName();\n  auto pFile = fopen(ltxFilename.c_str(), \"rb\");\n  \n  std::array<uint8_t, kLtxPageSize> tmpPage;\n  auto pTmpPageData = tmpPage.data();\n\n  std::array<uint8_t, kLtxPageSize> scratchBuffer;\n  auto pScratchBufferData = scratchBuffer.data();\n\n  bool loadTailData = true; // always load texture tail data\n\n  const auto& texturePages = pTexture->sparseDataPages();\n\n  for( uint32_t pageIndex: _pageIds ) {\n  \tif(pageIndex >= texturePages.size()) {\n\t\t\tLLOG_ERR << \"Page index \" << std::to_string(pageIndex) << \" exceeds number of texturePages \" << std::to_string(texturePages.size());\n\t\t\tcontinue;\n\t\t}\n\n    const auto& pPage = texturePages[pageIndex];\n    if(pPage->mipLevel() >= pTexture->getMipTailStart()) continue;\n\n    uint32_t page_index = pageIndex; //pPage->index();\n\n    if(pLtxBitmap->readPageData(page_index, pTmpPageData, pFile, pScratchBufferData)) {\t\n    \t// Load non-tail texture data page\n    \tpPage->allocate();\n    \tmpDevice->getRenderContext()->updateTexturePage(pPage.get(), pTmpPageData);\n    \tLLOG_TRC << \"Loaded page mip level \" << std::to_string(pPage->mipLevel());\n  \t} else {\n  \t\tLLOG_ERR << \"Error updating texture page \" << std::to_string(pPage->index());\n  \t\tpPage->release();\n  \t}\n  }\n\n\tif(loadTailData || (pageIds.size() == 0)) {\n\t\tLLOG_DBG << \"Loading tail data for \" << ltxFilename;\n\t\tstd::vector<uint8_t> tailData(kLtxPageSize);\n\t\tpLtxBitmap->readTailData(pFile, tailData, pScratchBufferData);\n\t\tLLOG_TRC << \"Loaded \" << tailData.size() << \" bytes of tail data for \" << ltxFilename;\n\t\tif(!tailData.empty()) mpDevice->getRenderContext()->fillMipTail(pTexture.get(), tailData.data(), is_set(pLtxBitmap->getFlags(), LTX_Header::Flags::ONE_PAGE_MIP_TAIL));\n\t}\n\n  fclose(pFile);\n  pTexture->updateSparseBindInfo();\n}\n\nvoid TextureManager::loadPagesAsync(const Texture::SharedPtr& pTexture, const std::vector<uint32_t>& pageIds) {\n\tif(!mHasSparseTextures || !pTexture || !pTexture->isSparse()) return;\n\n  assert(pTexture.get());\n\n  uint32_t textureID = pTexture->id();\n\n  auto it = mTextureLTXBitmapsMap.find(textureID);\n  if (it == mTextureLTXBitmapsMap.end()) {\n    LLOG_ERR << \"No LTX_Bitmap stored for texture \" <<  pTexture->getSourceFilename();\n    return;\n  }\n\n  auto pLtxBitmap = mTextureLTXBitmapsMap[textureID];\n\n  ThreadPool& pool = ThreadPool::instance();\n\n\t// Push pages loading job into ThreadPool\n\tmTextureLoadingTasks.push_back(pool.submit([this, pLtxBitmap, pTexture = pTexture.get(), pageIds = std::move(pageIds)]\n  {\n  \tif(!pTexture) return (Texture*)nullptr;\n\n  \tstd::vector<uint32_t> _pageIds = pageIds;\n  \tstd::sort(_pageIds.begin(), _pageIds.end());\n  \t\n    std::thread::id thread_id = std::this_thread::get_id();\n    auto pContext = pTexture->device()->getRenderContext();\n\n    std::array<uint8_t, kLtxPageSize> tmpPageData;\n    auto pTmpPageData = tmpPageData.data();\n\n    std::array<uint8_t, kLtxPageSize> scratchBuffer;\n    auto pScratchBufferData = scratchBuffer.data();\n\n    bool loadTailData = true; // always load texture tail data\n    const auto& texturePages = pTexture->sparseDataPages();\n\n\t\tstd::string ltxFilename = pLtxBitmap->getFileName();\n\t\tauto pFile = fopen(ltxFilename.c_str(), \"rb\");\n\n\t\tfor( uint32_t pageIndex: _pageIds ) {\n\t\t\tif(pageIndex >= texturePages.size()) {\n\t\t\t\tLLOG_ERR << \"Page index \" << std::to_string(pageIndex) << \" exceeds number of texturePages \" << std::to_string(texturePages.size());\n\t\t\t\tcontinue;\n\t\t\t}\n\n  \t\tconst auto& pPage = texturePages[pageIndex];\n  \t\tif(pPage->mipLevel() >= pTexture->getMipTailStart()) continue;\n\n  \t\tuint32_t page_index = pageIndex; //pPage->index();\n\n  \t\tif(!pPage->isResident()) {\n    \t\tif(pLtxBitmap->readPageData(page_index, pTmpPageData, pFile, pScratchBufferData)) {\n  \t\t\t\t// Load non-tail texture data page\n  \t\t\t\tstd::unique_lock<std::mutex> lock(mPageMutex);\n  \t\t\t\tpPage->allocate();\n  \t\t\t\tpContext->updateTexturePage(pPage.get(), pTmpPageData);\n  \t\t\t\tLLOG_TRC << \"Thread \" << thread_id << \": loaded page \" << std::to_string(pPage->index()) << \" of mip level \" << std::to_string(pPage->mipLevel()) << \" texture \" << pTexture->getSourceFilename();\n\t\t\t\t} else {\n\t\t\t\t\tLLOG_ERR << \"Thread \" << thread_id << \": Error updating texture page \" << std::to_string(pPage->index());\n\t\t\t\t\tpPage->release();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(loadTailData || !pageIds.empty()) {\n\t\t\tLLOG_DBG << \"Loading tail data for \" << ltxFilename;\n\t\t\tstd::vector<uint8_t> tailData(kLtxPageSize);\n\t\t\tpLtxBitmap->readTailData(pFile, tailData, pScratchBufferData);\n\t\t\tLLOG_TRC << \"Loaded \" << tailData.size() << \" bytes of tail data for \" << ltxFilename;\n\t\t\tif(!tailData.empty()) {\n\t\t\t\tstd::unique_lock<std::mutex> lock(mPageMutex);\n\t\t\t\tpContext->fillMipTail(pTexture, tailData.data(), is_set(pLtxBitmap->getFlags(), LTX_Header::Flags::ONE_PAGE_MIP_TAIL));\n\t\t\t}\n\t\t}\n\n\t\tfclose(pFile);\n\t\t{\n\t\t\tstd::unique_lock<std::mutex> lock(mPageMutex);\n\t\t\tpTexture->updateSparseBindInfo();\n\t\t}\n\n    return pTexture;\n  }));\n}\n\nvoid TextureManager::updateSparseBindInfo() {\n\tif(mTextureLoadingTasks.empty()) return;\n\n\tstd::vector<Texture*> textures;\n\tfor(size_t i = 0; i < mTextureLoadingTasks.size(); i++) {\n\t\ttextures.push_back(mTextureLoadingTasks[i].get());\n\t}\n\n\tif(textures.empty()) return;\n\n\t//mpDevice->getRenderContext()->flush();\n\t\n\t//mpDevice->getApiHandle()->updateSparseBindInfo(textures);\n\t//mpDevice->flushAndSync();\n}\n\nbool TextureManager::getTextureHandle(const Texture* pTexture, TextureHandle& handle) const {\n\tassert(pTexture);\n\t\n\tauto const& it = mTextureToHandle.find(pTexture);\n\tif(it == mTextureToHandle.end()) return false;\n\n\thandle = it->second;\n\treturn true;\n}\n\nstatic bool isUdimTextureFilename(const fs::path& path, const std::string& udimMask) {\n\tif (udimMask == \"\") return false;\n\tif (path.filename().string().find(udimMask) == std::string::npos) return false;\n\treturn true;\n}\n\nstatic bool isUdimTextureFilename(const fs::path& path, const std::string& udimMask, size_t& udimMask_found) {\n\tif (udimMask == \"\") return false;\n\t\n\tudimMask_found = path.filename().string().find(udimMask);\n\tif (udimMask_found == std::string::npos) return false;\n\n\treturn true;\n}\n\n\nstatic bool findUdimTextureTiles(const fs::path& path, const std::string& udimMask, TextureManager::TileList& tileList) {\n\ttileList.clear();\n\tsize_t udimMask_found = std::string::npos;\n\n\tif(!isUdimTextureFilename(path, udimMask, udimMask_found)) return false;\n\n\t// Get the list of available tiles\n\tstd::string path_string = path.filename().string();\n\tconst boost::regex udim_tile_filter(path_string.replace(udimMask_found, udimMask.size(), \"\\\\d{4}\\\\\").c_str());\n\tboost::smatch what;\n\n\tbool result = false;\n\n\tfor (auto &entry: boost::make_iterator_range(fs::directory_iterator(path.parent_path()), {})\n\t\t| ba::filtered(static_cast<bool (*)(const fs::path &)>(&fs::is_regular_file))\n\t\t| ba::filtered([&](const fs::path &path){ return boost::regex_match(path.filename().string(), what, udim_tile_filter); })\n\t) {\n\t\tstd::string udim_tile_number_str = entry.path().filename().string().substr(udimMask_found, 4);\n\t\tsize_t udim_tile_number = static_cast<size_t>(std::stoul(udim_tile_number_str)) - 1001;\n\n\t\tif( udim_tile_number < 100) {\n\t\t\tstd::ldiv_t ldivresult;\n\t\t\tldivresult = ldiv(udim_tile_number,10);\n\n\t\t\tsize_t udim_tile_u_number = ldivresult.rem;\n\t\t\tsize_t udim_tile_v_number = ldivresult.quot;\n\n\t\t\ttileList.push_back(std::make_pair(entry.path(), Falcor::uint2({udim_tile_u_number, udim_tile_v_number})));\n\t\t\tresult = true;\n\n\t\t\tconst auto& info = tileList.back();\n\t\t\tLLOG_DBG << \"Found UDIM tile \" << to_string(info.second) << \" : \" << info.first.string();\n\t\t} else {\n\t\t\tLLOG_ERR << \"Wrong UDIM filename: \" << entry.path().string();\n\t\t}\n\t}\n\treturn result;\n}\n\nbool TextureManager::loadTexture(TextureManager::TextureHandle& handle, const fs::path& path, bool generateMipLevels, bool loadAsSRGB, Resource::BindFlags bindFlags, bool async, const std::string& udimMask, bool loadAsSparse) {\n\t// Find the full path to the texture if it's not a UDIM.\n\tfs::path fullPath;\n\n\tif (isUdimTextureFilename(path, udimMask)) {\n\t\t// If UDIM texture requested we have store handle with no actual texture loaded that is referenced by actual tiles textures.\n\t\t// So we use UDIM texture path as fullpath key for map storage and access.\n\t\tfullPath = path.filename().string();\n\t} else {\n\t\tif (!findFileInDataDirectories(path, fullPath)) {\n\t\t\tLLOG_WRN << \"Can't find texture file \" << path;\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tstd::unique_lock<std::mutex> lock(mMutex);\n\tconst TextureKey textureKey(fullPath, generateMipLevels, loadAsSRGB, bindFlags);\n\n\tif (auto it = mKeyToHandle.find(textureKey); it != mKeyToHandle.end()) {\n\t\t// Texture is already managed. Return its handle.\n\t\tLLOG_DBG << \"Texture \" << textureKey.fullPath.string() << \" is already managed.\";\n\t\thandle = it->second;\n\t} else {\n\n\t\tmDirty = true;\n\n\t\t// Check if UDIM texture requested...\n\t\tstd::vector<std::pair<fs::path, Falcor::uint2>> udim_tile_fileinfos;\n\t\tbool is_udim_texture = findUdimTextureTiles(path, udimMask, udim_tile_fileinfos);\n\n#ifndef DISABLE_ASYNC_TEXTURE_LOADER\n\t\tmLoadRequestsInProgress++;\n\n\t\t// Texture is not already managed. Add new texture desc.\n\t\tTextureDesc desc = { TextureState::Referenced, nullptr };\n\t\thandle = addDesc(desc);\n\n\t\t// Add to key-to-handle map.\n\t\tmKeyToHandle[textureKey] = handle;\n\n\t\t// Function called by the async texture loader when loading finishes.\n\t\t// It's called by a worker thread so needs to acquire the mutex before changing any state.\n\t\tauto callback = [=](Texture::SharedPtr pTexture)\n\t\t{\n\t\t\tstd::unique_lock<std::mutex> lock(mMutex);\n\n\t\t\t// Mark texture as loaded.\n\t\t\tauto& desc = getDesc(handle);\n\t\t\tdesc.state = TextureState::Loaded;\n\t\t\tdesc.pTexture = pTexture;\n\n\t\t\t// Add to texture-to-handle map.\n\t\t\tif (pTexture) {\n\t\t\t\thandle.mMode = pTexture->isSparse() ? TextureHandle::Mode::Vitrual : TextureHandle::Mode::Texture;\n\t\t\t\tmTextureToHandle[pTexture.get()] = handle;\n\t\t\t}\n\n\t\t\tmLoadRequestsInProgress--;\n\t\t\tmCondition.notify_all();\n\t\t};\n\n\t\t// Issue load request to texture loader.\n\t\tmAsyncTextureLoader.loadFromFile(fullPath, generateMipLevels, loadAsSRGB, bindFlags, callback);\n#else\n\t\t// Load texture from main thread.\n\t\t\n\t\tif(!is_udim_texture) {\n\t\t\t// Load single texture\n\t\t\tTexture::SharedPtr pTexture = nullptr;\n\n\t\t\tif(!loadAsSparse) {\n\t\t\t\tpTexture = Texture::createFromFile(mpDevice, fullPath, generateMipLevels, loadAsSRGB, bindFlags);\n\t\t\t} else {\n\t\t\t\tpTexture = loadSparseTexture(fullPath, generateMipLevels, loadAsSRGB, bindFlags);\n\t\t\t\tif(!pTexture) {\n\t\t\t\t\tLLOG_ERR << \"Error loading sparse texture !!!\";\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add new texture desc.\n\t\t\tTextureDesc desc = { TextureState::Loaded, pTexture };\n\t\t\thandle = addDesc(desc, pTexture->isSparse() ? TextureHandle::Mode::Virtual : TextureHandle::Mode::Texture);\n\n\t\t\t// Add to key-to-handle map.\n\t\t\tmKeyToHandle[textureKey] = handle;\n\n\t\t\t// Add to texture-to-handle map.\n\t\t\tif (pTexture) {\n\t\t\t\tmTextureToHandle[pTexture.get()] = handle;\n\t\t\t\tif (pTexture->isSparse()) {\n\t\t\t\t\tmHasSparseTextures = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Load UDIM texture tiles\n\t\t\tTexture::SharedPtr pUDIMTexture = Texture::createUDIMFromFile(mpDevice, fullPath);\n\n\t\t\t// Add epmty texture tileset desc.\n\t\t\tTextureDesc desc = { TextureState::Loaded, pUDIMTexture };\n\t\t\thandle = addDesc(desc, TextureHandle::Mode::UDIM_Texture);\n\t\t\n\t\t\t// Add UDIM tileset to key-to-handle map.\n\t\t\tmKeyToHandle[textureKey] = handle;\n\n\t\t\t// Add to texture-to-handle map.\n\t\t\tif (pUDIMTexture) {\n\t\t\t\tmTextureToHandle[pUDIMTexture.get()] = handle;\n\t\t\t\tpUDIMTexture->setUDIM_ID(mUDIMTexturesCount);\n\t\t\t\tmUDIMTexturesCount++;\n\t\t\t}\n\n\t\t\tfor( const auto& i: udim_tile_fileinfos) {\n\t\t\t\tconst auto& udim_tile_fullpath = i.first;\n\t\t\t\tconst Falcor::uint2& udim_tile_pos = i.second;\n\n\t\t\t\tconst TextureKey udimTileTextureKey(udim_tile_fullpath, generateMipLevels, loadAsSRGB, bindFlags);\n\n\t\t\t\tTextureHandle udim_tile_handle;\n\n\t\t\t\tif (auto it = mKeyToHandle.find(udimTileTextureKey); it != mKeyToHandle.end()) {\n\t\t\t\t\t// Texture tile is already managed. Return its handle.\n\t\t\t\t\tudim_tile_handle = it->second;\n\t\t\t\t} else {\n\n\t\t\t\t\tTexture::SharedPtr pUdimTileTex = nullptr;\n\n\t\t\t\t\tif(!loadAsSparse) {\n\t\t\t\t\t\tpUdimTileTex = Texture::createFromFile(mpDevice, udim_tile_fullpath, generateMipLevels, loadAsSRGB, bindFlags);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpUdimTileTex = loadSparseTexture(udim_tile_fullpath, generateMipLevels, loadAsSRGB, bindFlags);\n\t\t\t\t\t\tif(pUdimTileTex) {\n\t\t\t\t\t\t\tmHasSparseTextures = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tLLOG_DBG << \"Loaded \" << (loadAsSparse ? \"sparse\": \"\" ) << \" UDIM tile texture: \" << udim_tile_fullpath << \" pos: \" << std::to_string(udim_tile_pos[0]) << \"x\" << std::to_string(udim_tile_pos[1]);\n\t\t\t\t\t\n\t\t\t\t\tTextureDesc udim_tile_desc = { TextureState::Loaded, pUdimTileTex };\n\t\t\t\t\tudim_tile_handle = addDesc(udim_tile_desc, pUdimTileTex->isSparse() ? TextureHandle::Mode::Virtual : TextureHandle::Mode::Texture);\n\t\t\n\t\t\t\t\t// Add tile handle to key-to-handle map.\n\t\t\t\t\tmKeyToHandle[udimTileTextureKey] = udim_tile_handle;\n\n\t\t\t\t\t// Add tile to texture-to-handle map.\n\t\t\t\t\tif (pUdimTileTex) {\n\t\t\t\t\t\tmHasUDIMTextures = true;\n\t\t\t\t\t\tmTextureToHandle[pUdimTileTex.get()] = udim_tile_handle;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (pUDIMTexture) {\n\t\t\t\t\t\t\tpUDIMTexture->addUDIMTileTexture({pUdimTileTex, udim_tile_pos[0], udim_tile_pos[1]});\n\t\t\t\t\t\t\tmUDIMTextureTilesCount ++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tmCondition.notify_all();\n#endif\n\t}\n\n\tlock.unlock();\n\n\tif (!async) {\n\t\twaitForTextureLoading(handle);\n\t}\n\n\treturn true;\n}\n\nvoid TextureManager::waitForTextureLoading(const TextureHandle& handle) {\n\tif (!handle) return;\n\n\t// Acquire mutex and wait for texture state to change.\n\tstd::unique_lock<std::mutex> lock(mMutex);\n\tmCondition.wait(lock, [&]() { return getDesc(handle).state == TextureState::Loaded; });\n\n\tmpDevice->flushAndSync();\n}\n\nvoid TextureManager::waitForAllTexturesLoading() {\n\t// Acquire mutex and wait for all in-progress requests to finish.\n\tstd::unique_lock<std::mutex> lock(mMutex);\n\tmCondition.wait(lock, [&]() { return mLoadRequestsInProgress == 0; });\n\n\tmpDevice->flushAndSync();\n}\n\nvoid TextureManager::removeTexture(const TextureHandle& handle) {\n\tif (!handle) return;\n\n\twaitForTextureLoading(handle);\n\n\tstd::lock_guard<std::mutex> lock(mMutex);\n\n\t// Get texture desc. If it's already cleared, we're done.\n\tauto& desc = getDesc(handle);\n\tif (!desc.isValid()) return;\n\n\t// Remove handle from maps.\n\t// Note not all handles exist in key-to-handle map so search for it. This can be optimized if needed.\n\tauto it = std::find_if(mKeyToHandle.begin(), mKeyToHandle.end(), [handle](const auto& keyVal) { return keyVal.second == handle; });\n\tif (it != mKeyToHandle.end()) mKeyToHandle.erase(it);\n\n\tif (desc.pTexture) {\n\t\tassert(mTextureToHandle.find(desc.pTexture.get()) != mTextureToHandle.end());\n\t\tmTextureToHandle.erase(desc.pTexture.get());\n\t}\n\n\t// Clear texture desc.\n\tdesc = {};\n\n\t// Return handle to the free list.\n\tmFreeList.push_back(handle);\n}\n\nTextureManager::TextureDesc TextureManager::getTextureDesc(const TextureHandle& handle) const {\n\tif (!handle) return {};\n\n\tstd::lock_guard<std::mutex> lock(mMutex);\n\tassert(handle && handle.id < mTextureDescs.size());\n\treturn mTextureDescs[handle.id];\n}\n\nsize_t TextureManager::getTextureDescCount() const {\n\tstd::lock_guard<std::mutex> lock(mMutex);\n\treturn mTextureDescs.size();\n}\n\nvoid TextureManager::finalize() {\n\tif (!mDirty) return;\n\n\tuint32_t udimID = 0;\n\tfor (size_t i = 0; i < mTextureDescs.size(); i++) {\n\t\tconst auto& pTex = mTextureDescs[i].pTexture;\n\t\tif(pTex && pTex->isUDIMTexture()) {\n\t\t\t//pTex->setUDIM_ID(udimID++);\n\t\t}\n\t}\n\n\tmDirty = false;\n}\n\nvoid TextureManager::setShaderData(const ShaderVar& var, const size_t descCount) const {\n\tLLOG_DBG << \"Setting shader data for \" << to_string(mTextureDescs.size()) << \" texture descs\";\n\t\n\tstd::lock_guard<std::mutex> lock(mMutex);\n\n\tif (mTextureDescs.size() < descCount) {\n\t\t// TODO: We should change overall logic of setting shader data between MaterialSystem and TextureManager classes. Now it's a mess!\n\t\tthrow std::runtime_error(\"Textures descriptor array is too large. Requested \" + std::to_string(descCount) + \" while TextureManager has \" + std::to_string(mTextureDescs.size()));\n\t}\n\n\tTexture::SharedPtr nullTexture;\n\n\tsize_t ii = 0; // Current material system textures index\n\n\t// Fill in textures\n\tfor (size_t i = 0; i < mTextureDescs.size(); ++i) {\n\t\tconst auto& pTex = mTextureDescs[i].pTexture;\n\t\tif(pTex && !pTex->isUDIMTexture()) {\n\t\t\tvar[ii] = pTex;\n\t\t} else {\n\t\t\tvar[ii] = nullTexture;\n\t\t}\n\t\tii++;\n\t}\n\n\t// Fill the array tail\n\tfor (size_t i = ii; i < descCount; i++) {\t\n\t\tvar[i] = nullTexture;\n\t}\n}\n\nvoid TextureManager::setExtendedTexturesShaderData(const ShaderVar& var, const size_t descCount) {\n\tLLOG_DBG << \"Setting extended textures shader data for \" << to_string(mTextureDescs.size()) << \" texture descs\";\n\n\tif (mTextureDescs.size() < descCount) {\n\t\t// TODO: We should change overall logic of setting shader data between MaterialSystem and TextureManager classes. Now it's a mess!\n\t\tthrow std::runtime_error(\"Textures descriptor array is too large. Requested \" + std::to_string(descCount) + \" while TextureManager has \" + std::to_string(mTextureDescs.size()));\n\t}\n\n\tstd::lock_guard<std::mutex> lock(mMutex);\n\n\tif(!mpExtendedTexturesDataBuffer || mDirty) {\n\t\tstd::vector<ExtendedTextureData> extendedTexturesData;\n\n\t\t// Fill in extended data\n\t\tfor (size_t i = 0; i < mTextureDescs.size(); ++i) {\n\t\t\textendedTexturesData.push_back({});\n\t\t\tconst auto& pTex = mTextureDescs[i].pTexture;\n\t\t\tif(!pTex) continue;\n\n\t\t\tauto& handleExt = extendedTexturesData.back(); \n\n\t\t\tif(pTex->isUDIMTexture()) {\n\t\t\t\thandleExt.setMode(ExtendedTextureData::Mode::UDIM_Texture);\n\t\t\t\thandleExt.udimID = pTex->getUDIM_ID();\n\t\t\t} else if (pTex->isSparse()) {\n\t\t\t\thandleExt.setMode(ExtendedTextureData::Mode::Virtual);\n\t\t\t\thandleExt.virtualID = pTex->getVirtualID();\n\t\t\t} else {\n\t\t\t\thandleExt.setMode(ExtendedTextureData::Mode::Texture);\n\t\t\t\thandleExt.udimID = 0;\n\t\t\t\thandleExt.virtualID = 0;\n\t\t\t}\n\t\t}\n\n\t\tmpExtendedTexturesDataBuffer = Buffer::createStructured(mpDevice, var, (uint32_t)extendedTexturesData.size(), Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None, extendedTexturesData.data(), false);\n\t}\n\tvar.setBuffer(mpExtendedTexturesDataBuffer);\n}\n\nvoid TextureManager::buildSparseResidencyData() {\n\tif(!mDirtySparseResidency && !mDirty) return;\n\n\tstd::lock_guard<std::mutex> lock(mMutex);\n\n\tuint32_t virtualTexturesCount = 0;\n\tfor (size_t i = 0; i < mTextureDescs.size(); ++i) {\n\t\tconst auto& pTexture = mTextureDescs[i].pTexture; \n\t\tif(pTexture && pTexture->isSparse()) {\n\t\t\tvirtualTexturesCount += 1;\n\t\t}\n\t}\n\n\tmVirtualTexturesData.resize(virtualTexturesCount);\n\tmVirtualPagesData.clear();\n\n\t// Fill in virtual texture data\n\tfor (const auto& entry : mTextureToHandle) {\n\n\t\tconst auto& pTexture = entry.first;\n\t\tif(!pTexture || !pTexture->isSparse()) continue;\n\t\t\tauto& vtexData = mVirtualTexturesData[pTexture->getVirtualID()];\n\n\t\t\tvtexData.empty = false;\n\t\t\tvtexData.textureID = pTexture->id();\n\n\t\t\tvtexData.width = static_cast<uint16_t>(pTexture->getWidth(0));\n\t\t\tvtexData.height = static_cast<uint16_t>(pTexture->getHeight(0));\n\t\t\tvtexData.mipLevelsCount = static_cast<uint8_t>(pTexture->getMipCount());\n\t\t\tvtexData.mipTailStart = static_cast<uint8_t>(pTexture->getMipTailStart());\n\t\t\tvtexData.pagesStartOffset = mVirtualPagesData.size();\n\t\t\tmVirtualPagesStartMap[pTexture] = vtexData.pagesStartOffset;\n\n\t\t\tauto const& pageRes = pTexture->sparseDataPageRes();\n\t\t\tvtexData.pageSizeW = static_cast<uint16_t>(pageRes.x);\n\t\t\tvtexData.pageSizeH = static_cast<uint16_t>(pageRes.y);\n\t\t\tvtexData.pageSizeD = static_cast<uint16_t>(pageRes.z);\n\n\t\t\tauto const& mipBases = pTexture->getMipBases();\n\t\t\tmemcpy(&vtexData.mipBases, mipBases.data(), mipBases.size() * sizeof(uint32_t));\n\t\t\n\t\t\tmVirtualPagesData.resize(mVirtualPagesData.size() + pTexture->sparseDataBindsCount());\n\n\t\t// TODO: prefill pages residency info\n\t}\n\n\t// ensure pages buffer is aligned to 64 bytes\n\tauto dv = std::div(mVirtualPagesData.size(), 64);\n\tif(dv.rem != 0) mVirtualPagesData.resize((dv.quot + 1) * 64);\n\tmemset(mVirtualPagesData.data(), 0, mVirtualPagesData.size() * sizeof(uint8_t));\n\n\tLLOG_DBG << \"Virtual textures data size \" << mVirtualTexturesData.size();\n\tLLOG_DBG << \"Virtual pages data size \" << mVirtualPagesData.size();\n\n\tmpVirtualTexturesDataBuffer = \n\t\tBuffer::createStructured(mpDevice, sizeof(VirtualTextureData), (uint32_t)mVirtualTexturesData.size(), Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None, mVirtualTexturesData.data(), false);\n\tmpVirtualPagesResidencyDataBuffer = mVirtualPagesData.size() > 0 ?\n\t\tBuffer::create(mpDevice, mVirtualPagesData.size(), Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess, Buffer::CpuAccess::None, mVirtualPagesData.data()) : nullptr;\n\n\tmDirtySparseResidency = false;\n}\n\nsize_t TextureManager::getVirtualTexturePagesStartIndex(const Texture* pTexture) {\n\tassert(pTexture);\n\tif(!pTexture->isSparse()) {\n\t\tLLOG_ERR << \"Non virtual texture requested in getVirtualTexturePagesStartIndex() !!!\";\n\t\treturn std::numeric_limits<size_t>::max();\n\t}\n\n\tbuildSparseResidencyData();\n\n\tif (auto search = mVirtualPagesStartMap.find(pTexture); search != mVirtualPagesStartMap.end()) return search->second;\n\n\tLLOG_ERR << \"Virtual texture start page offset not found !\";\n\treturn std::numeric_limits<size_t>::max();\n}\n\nvoid TextureManager::setVirtualTexturesShaderData(const ShaderVar& var, const ShaderVar& pagesBufferVar, const size_t descCount) {\n\tif(!mHasSparseTextures || !mSparseTexturesEnabled) return;\n\n\tLLOG_DBG << \"Setting virtual textures shader data for \" << to_string(mTextureDescs.size()) << \" texture descs\";\n\n\tif (mTextureDescs.size() < descCount) {\n\t\t// TODO: We should change overall logic of setting shader data between MaterialSystem and TextureManager classes. Now it's a mess!\n\t\tthrow std::runtime_error(\"Textures descriptor array is too large. Requested \" + std::to_string(descCount) + \" while TextureManager has \" + std::to_string(mTextureDescs.size()));\n\t}\n\n\tbuildSparseResidencyData();\n\n\tvar.setBuffer(mpVirtualTexturesDataBuffer);\n\tpagesBufferVar.setBuffer(mpVirtualPagesResidencyDataBuffer);\n}\n\nvoid TextureManager::setShaderData(const ShaderVar& var, const std::vector<Texture::SharedPtr>& textures) const {\n\tLLOG_DBG << \"Setting direct shader data for \" << to_string(textures.size()) << \" textures\";\n\t\n\tstd::lock_guard<std::mutex> lock(mMutex);\n\n\tTexture::SharedPtr nullTexture;\n\n\t// Fill in textures\n\tsize_t ii = 0;\n\tfor (const auto pTex: textures) {\n\t\tif(pTex && !pTex->isUDIMTexture()) {\n\t\t\tvar[ii] = pTex;\n\t\t} else {\n\t\t\tvar[ii] = nullTexture;\n\t\t}\n\t\tii++;\n\t}\n}\n\nvoid TextureManager::setUDIMTableShaderData(const ShaderVar& var, const size_t descCount) const {\n\tLLOG_DBG << \"Setting UDIM table shader data \" << to_string(descCount) << \" descriptors\";\n\n\tif (descCount == 0) {\n\t\tLLOG_DBG << \"No descriptors to update for UDIM table\";\n\t\treturn;\n\t}\n\n\tstd::lock_guard<std::mutex> lock(mMutex);\n\n\tfor (size_t i = 0; i < mTextureDescs.size(); i++) {\n\t\tconst auto& pTex = mTextureDescs[i].pTexture;\n\t\tif(pTex && pTex->isUDIMTexture()) {\n\t\t\tfor( const auto& tileInfo: pTex->getUDIMTileInfos()) {\n\t\t\t\tsize_t udim_tile_idx = static_cast<uint32_t>(pTex->getUDIM_ID()) * 100u + tileInfo.u + tileInfo.v * 10u;\n\t\t\t\tif( tileInfo.pTileTexture ) {\n\t\t\t\t\tauto const& it = mTextureToHandle.find(tileInfo.pTileTexture.get());\n\t\t\t\t\tif(it != mTextureToHandle.end()) {\n\t\t\t\t\t\tLLOG_DBG << \"Tile idx: \" << std::to_string(udim_tile_idx) << \" handle: \" << std::to_string(it->second.id);\n\t\t\t\t\t\tvar[udim_tile_idx] = it->second.id;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nTextureManager::TextureHandle TextureManager::addDesc(const TextureDesc& desc, TextureHandle::Mode mode) {\n\tTextureHandle handle;\n\thandle.mMode = mode;\n\n\t// Allocate new texture handle and insert desc.\n\tif (!mFreeList.empty()) {\n\t\thandle = mFreeList.back();\n\t\tmFreeList.pop_back();\n\t\tgetDesc(handle) = desc;\n\t} else {\n\t\tif (mTextureDescs.size() >= mMaxTextureCount) {\n\t\t\tthrow std::runtime_error(\"Out of texture handles\");\n\t\t}\n\n\t\thandle.id = static_cast<uint32_t>(mTextureDescs.size());\n\t\thandle.mMode = mode;\n\t\tmTextureDescs.emplace_back(desc);\n\t\t\n\t}\n\n\treturn handle;\n}\n\nTextureManager::TextureDesc& TextureManager::getDesc(const TextureHandle& handle) {\n\tassert(handle && handle.id < mTextureDescs.size());\n\treturn mTextureDescs[handle.id];\n}\n\n}  // namespace Falcor\n",
			"file": "src/Falcor/Utils/Image/TextureManager.cpp",
			"file_size": 34240,
			"file_write_time": 133341877750621130,
			"settings":
			{
				"buffer_size": 34240,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIgZAAAAAAAAiRkAAAAAAAAAAAAAiRkAAAAAAACMGQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIgZAAAAAAAAiBkAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"paste",
					null,
					"AQAAAIwZAAAAAAAAzBkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIwZAAAAAAAAjBkAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"left_delete",
					null,
					"AQAAAIwZAAAAAAAAjBkAAAAAAABEAAAATExPR19FUlIgPDwgIlRleHR1cmUgIiA8PCBzcmNGaWxlbmFtZSA8PCAiIGNvbnZlcnNpb24gZmFpbGVkLlxuIgoJCQk",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIwZAAAAAAAA0BkAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"paste",
					null,
					"AQAAAO1EAAAAAAAACkUAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO1EAAAAAAAA7UQAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAApFAAAAAAAAC0UAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAApFAAAAAAAACkUAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " hande"
					},
					"BgAAAAtFAAAAAAAADEUAAAAAAAAAAAAADEUAAAAAAAANRQAAAAAAAAAAAAANRQAAAAAAAA5FAAAAAAAAAAAAAA5FAAAAAAAAD0UAAAAAAAAAAAAAD0UAAAAAAAAQRQAAAAAAAAAAAAAQRQAAAAAAABFFAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAtFAAAAAAAAC0UAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"left_delete",
					null,
					"AQAAABBFAAAAAAAAEEUAAAAAAAABAAAAZQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABFFAAAAAAAAEUUAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "le,"
					},
					"AwAAABBFAAAAAAAAEUUAAAAAAAAAAAAAEUUAAAAAAAASRQAAAAAAAAAAAAASRQAAAAAAABNFAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABBFAAAAAAAAEEUAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABNFAAAAAAAAFEUAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABNFAAAAAAAAE0UAAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "bool"
					},
					"BQAAALNEAAAAAAAAtEQAAAAAAAAAAAAAtEQAAAAAAAC0RAAAAAAAAB0AAABUZXh0dXJlTWFuYWdlcjo6VGV4dHVyZUhhbmRsZbREAAAAAAAAtUQAAAAAAAAAAAAAtUQAAAAAAAC2RAAAAAAAAAAAAAC2RAAAAAAAALdEAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANBEAAAAAAAAs0QAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"left_delete",
					null,
					"AQAAAJhFAAAAAAAAmEUAAAAAAAAYAAAAVGV4dHVyZUhhbmRsZSBoYW5kbGU7CgoJ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJhFAAAAAAAAsEUAAAAAAAAAAAAAAAAyQA"
				],
				[
					42,
					6,
					"left_delete",
					null,
					"BgAAAIdHAAAAAAAAh0cAAAAAAAABAAAAZYZHAAAAAAAAhkcAAAAAAAABAAAAbIVHAAAAAAAAhUcAAAAAAAABAAAAZIRHAAAAAAAAhEcAAAAAAAABAAAAboNHAAAAAAAAg0cAAAAAAAABAAAAYYJHAAAAAAAAgkcAAAAAAAABAAAAaA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIhHAAAAAAAAiEcAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "flase"
					},
					"BQAAAIJHAAAAAAAAg0cAAAAAAAAAAAAAg0cAAAAAAACERwAAAAAAAAAAAACERwAAAAAAAIVHAAAAAAAAAAAAAIVHAAAAAAAAhkcAAAAAAAAAAAAAhkcAAAAAAACHRwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIJHAAAAAAAAgkcAAAAAAAAAAAAAAADwvw"
				],
				[
					44,
					4,
					"left_delete",
					null,
					"BAAAAIZHAAAAAAAAhkcAAAAAAAABAAAAZYVHAAAAAAAAhUcAAAAAAAABAAAAc4RHAAAAAAAAhEcAAAAAAAABAAAAYYNHAAAAAAAAg0cAAAAAAAABAAAAbA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIdHAAAAAAAAh0cAAAAAAAAAAAAAAADwvw"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAINHAAAAAAAAhEcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAINHAAAAAAAAg0cAAAAAAAAAAAAAAADwvw"
				],
				[
					46,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "false"
					},
					"AgAAAIJHAAAAAAAAgkcAAAAAAAACAAAAZmGCRwAAAAAAAIdHAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIRHAAAAAAAAhEcAAAAAAAAAAAAAAADwvw"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "\nre"
					},
					"BAAAANRPAAAAAAAA1U8AAAAAAAAAAAAA1U8AAAAAAADaTwAAAAAAAAAAAADaTwAAAAAAANtPAAAAAAAAAAAAANtPAAAAAAAA3E8AAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANRPAAAAAAAA1E8AAAAAAAAAAAAAAADwvw"
				],
				[
					50,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAANpPAAAAAAAA2k8AAAAAAAACAAAAcmXaTwAAAAAAAOBPAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANxPAAAAAAAA3E8AAAAAAAAAAAAAAADwvw"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": " f"
					},
					"AgAAAOBPAAAAAAAA4U8AAAAAAAAAAAAA4U8AAAAAAADiTwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOBPAAAAAAAA4E8AAAAAAAAAAAAAAADwvw"
				],
				[
					52,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "false"
					},
					"AgAAAOFPAAAAAAAA4U8AAAAAAAABAAAAZuFPAAAAAAAA5k8AAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOJPAAAAAAAA4k8AAAAAAAAAAAAAAADwvw"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOZPAAAAAAAA508AAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOZPAAAAAAAA5k8AAAAAAAAAAAAAAADwvw"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "tr"
					},
					"AwAAAC5bAAAAAAAAL1sAAAAAAAAAAAAAL1sAAAAAAAAvWwAAAAAAAAYAAABoYW5kbGUvWwAAAAAAADBbAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC5bAAAAAAAANFsAAAAAAAAAAAAAAADwvw"
				],
				[
					58,
					1,
					"insert_completion",
					{
						"completion": "true",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "true"
					},
					"AgAAAC5bAAAAAAAALlsAAAAAAAACAAAAdHIuWwAAAAAAADJbAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADBbAAAAAAAAMFsAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"contents": "/***************************************************************************\n # Copyright (c) 2015-22, NVIDIA CORPORATION. All rights reserved.\n #\n # Redistribution and use in source and binary forms, with or without\n # modification, are permitted provided that the following conditions\n # are met:\n #  * Redistributions of source code must retain the above copyright\n #    notice, this list of conditions and the following disclaimer.\n #  * Redistributions in binary form must reproduce the above copyright\n #    notice, this list of conditions and the following disclaimer in the\n #    documentation and/or other materials provided with the distribution.\n #  * Neither the name of NVIDIA CORPORATION nor the names of its\n #    contributors may be used to endorse or promote products derived\n #    from this software without specific prior written permission.\n #\n # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS \"AS IS\" AND ANY\n # EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n # PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n # CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n # EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n # PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n # PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n # OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n **************************************************************************/\n#ifndef SRC_FALCOR_UTILS_IMAGE_TEXTUREMANAGER_H_\n#define SRC_FALCOR_UTILS_IMAGE_TEXTUREMANAGER_H_\n\n#include \"Falcor/Core/Program/ShaderVar.h\"\n#include \"Falcor/Utils/Image/LTX_Bitmap.h\"\n#include \"Falcor/Utils/ThreadPool.h\"\n\n#include \"TextureDataCacheLRU.h\"\n#include \"AsyncTextureLoader.h\"\n\n#include \"Scene/Material/VirtualTextureData.slang\"\n\n#include <mutex>\n\nnamespace Falcor {\n\nclass Device;\nclass VirtualTexturePage;\n\n/** Multi-threaded texture manager.\n\n\tThis class manages a collection of textures and implements\n\tasynchronous texture loading. All operations are thread-safe.\n\n\tEach managed texture is assigned a unique handle upon loading.\n\tThis handle is used in shader code to reference the given texture\n\tin the array of GPU texture descriptors.\n*/\nclass dlldecl TextureManager {\npublic:\n\tusing SharedPtr = std::shared_ptr<TextureManager>;\n\tusing TileList = std::vector<std::pair<fs::path, Falcor::uint2>>;\n\n\t~TextureManager();\n\n\t/** State of a managed texture.\n\t*/\n\tenum class TextureState {\n\t\tInvalid,        ///< Invalid/unknown texture.\n\t\tReferenced,     ///< Texture is referenced, but not yet loaded.\n\t\tConverting,     ///< Virtual texture (.ltx) being referenced, but not yet converted. Ongoing on-line conversion.\n\t\tLoaded,         ///< Texture has finished loading.\n\t};\n\n\t/** Sparse (virtual) texture info structure.\n\t*/\n\n//\tstruct VirtualTextureInfo {\n//\t};\n\n\t/** Handle to a managed texture.\n\t*/\n\tstruct TextureHandle {\n\n\t\tenum class Mode {\n\t\t\tUniform,\n\t\t\tTexture,       ///< Normal texture.\n\t\t\tVirtual,       ///< Virtual texture.\n\t\t\tUDIM_Texture,  ///< UDIM texture. No actual data/resource associated.\n\t\t};\n\n\t\tuint32_t id = kInvalidID;\n\t\tstatic const uint32_t kInvalidID = std::numeric_limits<uint32_t>::max();\n\n\t\tMode mMode = Mode::Texture;\n\t\t\n\t\tinline uint32_t getID() const { return id; }\n\t\tinline bool isValid() const { return id != kInvalidID; }\n\t\tinline bool isUDIMTexture() const { return mMode == Mode::UDIM_Texture; }\n\t\tinline Mode mode() const { return mMode; }\n\n\t\texplicit operator bool() const { return isValid(); }\n\t\tbool operator==(const TextureHandle& other) const { return id == other.id; }\n\t};\n\n\t/** Struct describing a managed texture.\n\t*/\n\tstruct TextureDesc {\n\t\tTextureState state = TextureState::Invalid;     ///< Current state of the texture.\n\t\tTexture::SharedPtr pTexture;                    ///< Valid texture object when state is 'Loaded', or nullptr if loading failed.\n\n\t\tbool isValid() const { return state != TextureState::Invalid; }\n\t};\n\n\t/** Create a texture manager.\n\t\t\\param[in] maxTextureCount Maximum number of textures that can be simultaneously managed.\n\t\t\\param[in] threadCount Number of worker threads.\n\t\t\\return A new object.\n\t*/\n\tstatic SharedPtr create(std::shared_ptr<Device> pDevice, size_t maxTextureCount, size_t threadCount = std::thread::hardware_concurrency());\n\n\t/** Add a texture to the manager.\n\t\tIf the texture is already managed, its existing handle is returned.\n\t\t\\param[in] pTexture The texture resource.\n\t\t\\return Unique handle to the texture.\n\t*/\n\tTextureHandle addTexture(const Texture::SharedPtr& pTexture);\n\n\t/** Requst loading a texture from file.\n\t\tThis will add the texture to the set of managed textures. The function returns a handle immediately.\n\t\tIf asynchronous loading is requested, the texture data will not be available until loading completes.\n\t\tThe returned handle is valid for the entire lifetime of the texture, until removeTexture() is called.\n\t\t\\param[in] path File path of the texture. This can be a full path or a relative path from a data directory.\n\t\t\\param[in] generateMipLevels Whether the full mip-chain should be generated.\n\t\t\\param[in] loadAsSRGB Load the texture as sRGB format if supported, otherwise linear color.\n\t\t\\param[in] bindFlags The bind flags for the texture resource.\n\t\t\\param[in] async Load asynchronously, otherwise the function blocks until the texture data is loaded.\n\t\t\\return Unique handle to the texture, or an invalid handle if the texture can't be found.\n\t*/\n\tbool loadTexture(TextureHandle& handle, const fs::path& path, bool generateMipLevels, bool loadAsSRGB, Resource::BindFlags bindFlags = Resource::BindFlags::ShaderResource, bool async = true, const std::string& udimMask = \"<UDIM>\", bool loadAsSparse = false);\n\n\tTexture::SharedPtr loadSparseTexture(const fs::path& path, bool generateMipLevels, bool loadAsSRGB, Resource::BindFlags bindFlags = Resource::BindFlags::ShaderResource);\n\n\t/** Wait for a requested texture to load.\n\t\tIf the handle is valid, the call blocks until the texture is loaded (or failed to load).\n\t\t\\param[in] handle Texture handle.\n\t*/\n\tvoid waitForTextureLoading(const TextureHandle& handle);\n\n\t/** Waits for all currently requested textures to be loaded.\n\t*/\n\tvoid waitForAllTexturesLoading();\n\n\t/** Remove a texture.\n\t\t\\param[in] handle Texture handle.\n\t*/\n\tvoid removeTexture(const TextureHandle& handle);\n\n\t/** Get a loaded texture. Call getTextureDesc() for more info.\n\t\t\\param[in] handle Texture handle.\n\t\t\\return Texture if loaded, or nullptr if handle doesn't exist or texture isn't yet loaded.\n\t*/\n\tTexture::SharedPtr getTexture(const TextureHandle& handle) const { return getTextureDesc(handle).pTexture; }\n\n\t/** Get a texture desc.\n\t\t\\param[in] handle Texture handle.\n\t\t\\return Texture desc, or invalid desc if handle is invalid.\n\t*/\n\tTextureDesc getTextureDesc(const TextureHandle& handle) const;\n\n\t/** Get texture desc count.\n\t\t\\return Number of texture descs.\n\t*/\n\tsize_t getTextureDescCount() const;\n\n\n\t/** Get UDIM texture desc count.\n\t  \\return Number of UDIM texture descs.\n\t*/\n\n\tsize_t getUDIMTextureTilesCount() const { return mUDIMTextureTilesCount; }\n\n\tsize_t getUDIMTexturesCount() const { return mUDIMTexturesCount; }\n\n\tbool hasUDIMTextures() const { return mHasUDIMTextures; };\n\n\tbool hasSparseTextures() const { return mHasSparseTextures; };\n\n\t/** Bind all textures into a shader var.\n\t\tThe shader var should refer to a Texture2D descriptor array of fixed size.\n\t\tThe array must be large enough, otherwise an exception is thrown.\n\t\tThis restriction will go away when unbounded descriptor arrays are supported (see #1321).\n\t\t\\param[in] var Shader var for descriptor array.\n\t\t\\param[in] descCount Size of descriptor array.\n\t*/\n\tvoid setShaderData(const ShaderVar& var, const size_t descCount) const;\n\tvoid setShaderData(const ShaderVar& var, const std::vector<Texture::SharedPtr>& textures) const;\n\n\tvoid setExtendedTexturesShaderData(const ShaderVar& var, const size_t descCount);\n\n\tvoid setVirtualTexturesShaderData(const ShaderVar& var, const ShaderVar& pagesBufferVar, const size_t descCount);\n\n\tvoid setUDIMTableShaderData(const ShaderVar& var, const size_t descCount) const;\n\n\tvoid finalize();\n\n\tvoid loadPages(const Texture::SharedPtr& pTexture, const std::vector<uint32_t>& pageIds);\n\tvoid loadPagesAsync(const Texture::SharedPtr& pTexture, const std::vector<uint32_t>& pageIds);\n\n\tvoid updateSparseBindInfo();\n\n\tbool getTextureHandle(const Texture* pTexture, TextureHandle& handle) const;\n\n\tBuffer::SharedPtr getPagesResidencyBuffer() { return mpVirtualPagesResidencyDataBuffer; }\n\tBuffer::SharedConstPtr getPagesResidencyBuffer() const { return mpVirtualPagesResidencyDataBuffer; }\n\n\tsize_t getVirtualTexturePagesStartIndex(const Texture* pTexture);\n\n\tconst std::map<const Texture*, size_t>& getVirtualPagesStartMap() const { return mVirtualPagesStartMap;}\n\nprivate:\n\tTextureManager(std::shared_ptr<Device> pDevice, size_t maxTextureCount, size_t threadCount);\n\n\t/** Builds data structures needed for sparse residency management.\n\t*/\n\tvoid buildSparseResidencyData();\n\n\t/** Key to uniquely identify a managed texture.\n\t*/\n\tstruct TextureKey {\n\t\tfs::path fullPath;\n\t\tbool generateMipLevels;\n\t\tbool loadAsSRGB;\n\t\tResource::BindFlags bindFlags;\n\n\t\tTextureKey(const fs::path& path, bool mips, bool srgb, Resource::BindFlags flags)\n\t\t\t: fullPath(path), generateMipLevels(mips), loadAsSRGB(srgb), bindFlags(flags)\n\t\t{}\n\n\t\tbool operator<(const TextureKey& rhs) const {\n\t\t\tif (fullPath != rhs.fullPath) return fullPath < rhs.fullPath;\n\t\t\telse if (generateMipLevels != rhs.generateMipLevels) return generateMipLevels < rhs.generateMipLevels;\n\t\t\telse if (loadAsSRGB != rhs.loadAsSRGB) return loadAsSRGB < rhs.loadAsSRGB;\n\t\t\telse return bindFlags < rhs.bindFlags;\n\t\t}\n\t};\n\n\tTextureHandle addDesc(const TextureDesc& desc, TextureHandle::Mode mode = TextureHandle::Mode::Texture);\n\tTextureDesc& getDesc(const TextureHandle& handle);\n\n\tDevice::SharedPtr mpDevice = nullptr;\n\n\tTextureDataCacheLRU::SharedPtr mpTextureDataCache = nullptr;\n\n\tmutable std::mutex mMutex;                                  ///< Mutex for synchronizing access to shared resources.\n\tmutable std::mutex mPageMutex;                              ///< Mutex for synchronizing texture page updates.\n\tstd::condition_variable mCondition;                         ///< Condition variable to wait on for loading to finish.\n\n\t// Internal state. Do not access outside of critical section.\n\tBS::multi_future<Texture*> mTextureLoadingTasks;\n\n\tstd::vector<TextureDesc> mTextureDescs;                     ///< Array of all texture descs, indexed by handle ID.\n\tstd::vector<TextureHandle> mFreeList;                       ///< List of unused handles.\n\tstd::map<TextureKey, TextureHandle> mKeyToHandle;           ///< Map from texture key to handle.\n\tstd::map<const Texture*, TextureHandle> mTextureToHandle;   ///< Map from texture ptr to handle.\n\n\tBuffer::SharedPtr mpExtendedTexturesDataBuffer;\n\n\tstd::vector<VirtualTextureData> mVirtualTexturesData;\n\tstd::vector<uint8_t> mVirtualPagesData;\n\tstd::map<const Texture*, size_t> mVirtualPagesStartMap;\n\n\tBuffer::SharedPtr mpVirtualTexturesDataBuffer;\n\tBuffer::SharedPtr mpVirtualPagesResidencyDataBuffer;\n\n\tbool mSparseTexturesEnabled = false;\n\tbool mHasSparseTextures = false;\n\tbool mHasUDIMTextures = false;\n\tbool mDirty = true;\n\tbool mDirtySparseResidency = true;\n\n\tAsyncTextureLoader mAsyncTextureLoader;                     ///< Utility for asynchronous texture loading.\n\tsize_t mLoadRequestsInProgress = 0;                         ///< Number of load requests currently in progress.\n\tsize_t mUDIMTextureTilesCount = 0;                          ///< Number of managed UDIM tile textures\n\tsize_t mUDIMTexturesCount = 0;\n\n\tstd::atomic<uint32_t> mSparseTexturesCount = 0;\n\n\tconst size_t mMaxTextureCount;                              ///< Maximum number of textures that can be simultaneously managed.\n\n\tTexture::SharedPtr mNullTexture;\n\n\tstd::map<uint32_t, LTX_Bitmap::SharedConstPtr> \t  mTextureLTXBitmapsMap;\n\tstd::vector<std::shared_ptr<VirtualTexturePage>>  mSparseDataPages;\n};\n\ninline std::string to_string(TextureManager::TextureHandle::Mode mode) {\n#define mode_2_string(a) case TextureManager::TextureHandle::Mode::a: return #a;\n  switch (mode) {\n  \t\tmode_2_string(Uniform);\n      mode_2_string(Texture);\n      mode_2_string(Virtual);\n      mode_2_string(UDIM_Texture);\n    default:\n      assert(false);\n      return \"Unknown TextureHandle::Mode\";\n  }\n#undef mode_2_string\n}\n\n}  // namespace Falcor\n\n#endif  // SRC_FALCOR_UTILS_IMAGE_TEXTUREMANAGER_H_\n",
			"file": "src/Falcor/Utils/Image/TextureManager.h",
			"file_size": 12764,
			"file_write_time": 133341876972029194,
			"settings":
			{
				"buffer_size": 12764,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"paste",
					null,
					"AQAAAGEWAAAAAAAAbhYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGEWAAAAAAAAYRYAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAG4WAAAAAAAAbxYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG4WAAAAAAAAbhYAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " handle"
					},
					"BwAAAG8WAAAAAAAAcBYAAAAAAAAAAAAAcBYAAAAAAABxFgAAAAAAAAAAAABxFgAAAAAAAHIWAAAAAAAAAAAAAHIWAAAAAAAAcxYAAAAAAAAAAAAAcxYAAAAAAAB0FgAAAAAAAAAAAAB0FgAAAAAAAHUWAAAAAAAAAAAAAHUWAAAAAAAAdhYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG8WAAAAAAAAbxYAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAHYWAAAAAAAAdxYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHYWAAAAAAAAdhYAAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHcWAAAAAAAAeBYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHcWAAAAAAAAdxYAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "bool"
					},
					"BQAAAEcWAAAAAAAASBYAAAAAAAAAAAAASBYAAAAAAABIFgAAAAAAAA0AAABUZXh0dXJlSGFuZGxlSBYAAAAAAABJFgAAAAAAAAAAAABJFgAAAAAAAEoWAAAAAAAAAAAAAEoWAAAAAAAASxYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEcWAAAAAAAAVBYAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"contents": "/***************************************************************************\n # Copyright (c) 2015-22, NVIDIA CORPORATION. All rights reserved.\n #\n # Redistribution and use in source and binary forms, with or without\n # modification, are permitted provided that the following conditions\n # are met:\n #  * Redistributions of source code must retain the above copyright\n #    notice, this list of conditions and the following disclaimer.\n #  * Redistributions in binary form must reproduce the above copyright\n #    notice, this list of conditions and the following disclaimer in the\n #    documentation and/or other materials provided with the distribution.\n #  * Neither the name of NVIDIA CORPORATION nor the names of its\n #    contributors may be used to endorse or promote products derived\n #    from this software without specific prior written permission.\n #\n # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS \"AS IS\" AND ANY\n # EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n # PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n # CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n # EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n # PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n # PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n # OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n **************************************************************************/\n#include \"stdafx.h\"\n#include \"MaterialTextureLoader.h\"\n\nnamespace Falcor {\n\nMaterialTextureLoader::MaterialTextureLoader(const Device::SharedPtr& pDevice, bool useSrgb)\n\t: mpDevice(pDevice)\n\t, mUseSrgb(useSrgb)\n{\n\tmpTextureManager = mpDevice->textureManager();\n}\n\nMaterialTextureLoader::~MaterialTextureLoader() {\n\tassignTextures();\n}\n\nbool MaterialTextureLoader::loadTexture(const Material::SharedPtr& pMaterial, Material::TextureSlot slot, const fs::path& path, bool loadAsSparse) {\n\tassert(pMaterial);\n\tif (!pMaterial->hasTextureSlot(slot)) {\n\t\tLLOG_WRN << \"MaterialTextureLoader::loadTexture() - Material '\" << pMaterial->getName() << \"' does not have texture slot '\" << to_string(slot) << \"'. Ignoring call.\";\n\t\treturn false;\n\t}\n\n\tbool generateMipLevels = true;\n\tbool loadAsSRGB = mUseSrgb && pMaterial->getTextureSlotInfo(slot).srgb;\n\tResource::BindFlags bindFlags = Resource::BindFlags::ShaderResource;\n\tstd::string udim_mask = \"<UDIM>\";\n\tbool async = true;\n\n\t// Request texture to be loaded.\n\tTextureManager::TextureHandle handle;\n\tif(!mpTextureManager->loadTexture(handle, path, generateMipLevels, loadAsSRGB, bindFlags, async, udim_mask, loadAsSparse)) {\n\t\treturn false;\n\t}\n\n\t// Store assignment to material for later.\n\tmTextureAssignments.emplace_back(TextureAssignment{ pMaterial, slot, handle });\n\n\tLLOG_DBG << (loadAsSparse ? \"Sparse\" : \"Simple\") << \" texture \" << path.string() << \" with handle mode \" << to_string(handle.mode()) << \" in assignment\";\n\treturn true;\n}\n\nvoid MaterialTextureLoader::assignTextures() {\n\tmpTextureManager->waitForAllTexturesLoading();\n\n\t// Assign textures to materials.\n\tfor (const auto& assignment : mTextureAssignments) {\n\t  // Assign generic handle\n\t\tauto pTexture = mpTextureManager->getTexture(assignment.handle);\n\t\tassignment.pMaterial->setTexture(assignment.textureSlot, pTexture);\n\t}\n}\n\n}  // namespace Falcor\n",
			"file": "src/Falcor/Scene/Material/MaterialTextureLoader.cpp",
			"file_size": 3574,
			"file_write_time": 133341883751992420,
			"settings":
			{
				"buffer_size": 3574,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					11,
					3,
					"left_delete",
					null,
					"AwAAALoKAAAAAAAAugoAAAAAAAABAAAAILkKAAAAAAAAuQoAAAAAAAABAAAAPbgKAAAAAAAAuAoAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALsKAAAAAAAAuwoAAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "\nif("
					},
					"BQAAALgKAAAAAAAAuQoAAAAAAAAAAAAAuQoAAAAAAAC6CgAAAAAAAAAAAAC6CgAAAAAAALsKAAAAAAAAAAAAALsKAAAAAAAAvAoAAAAAAAAAAAAAvAoAAAAAAAC9CgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALgKAAAAAAAAuAoAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "!"
					},
					"AQAAAL0KAAAAAAAAvgoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL0KAAAAAAAAvQoAAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALgKAAAAAAAAuQoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALgKAAAAAAAAuAoAAAAAAAAAAAAAAKB3QA"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "handle.l"
					},
					"CAAAAN0KAAAAAAAA3goAAAAAAAAAAAAA3goAAAAAAADfCgAAAAAAAAAAAADfCgAAAAAAAOAKAAAAAAAAAAAAAOAKAAAAAAAA4QoAAAAAAAAAAAAA4QoAAAAAAADiCgAAAAAAAAAAAADiCgAAAAAAAOMKAAAAAAAAAAAAAOMKAAAAAAAA5AoAAAAAAAAAAAAA5AoAAAAAAADlCgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN0KAAAAAAAA3QoAAAAAAAAAAAAAAADwvw"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOUKAAAAAAAA5goAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOUKAAAAAAAA5QoAAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					3,
					"left_delete",
					null,
					"AwAAAOUKAAAAAAAA5QoAAAAAAAABAAAAIOQKAAAAAAAA5AoAAAAAAAABAAAAbOMKAAAAAAAA4woAAAAAAAABAAAALg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOYKAAAAAAAA5goAAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOMKAAAAAAAA5AoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOMKAAAAAAAA4woAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOQKAAAAAAAA5QoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOQKAAAAAAAA5AoAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"left_delete",
					null,
					"AQAAADQLAAAAAAAANAsAAAAAAAABAAAAOw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADULAAAAAAAANQsAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAADQLAAAAAAAANQsAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADQLAAAAAAAANAsAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADULAAAAAAAANgsAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADULAAAAAAAANQsAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAADYLAAAAAAAAOAsAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADYLAAAAAAAANgsAAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAADcLAAAAAAAAOAsAAAAAAAAAAAAAOAsAAAAAAAA5CwAAAAAAAAAAAAA5CwAAAAAAADoLAAAAAAAAAAAAADoLAAAAAAAAOwsAAAAAAAAAAAAAOAsAAAAAAAA4CwAAAAAAAAEAAAAJOAsAAAAAAAA6CwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADcLAAAAAAAANwsAAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "re"
					},
					"AgAAADoLAAAAAAAAOwsAAAAAAAAAAAAAOwsAAAAAAAA8CwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADoLAAAAAAAAOgsAAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAADoLAAAAAAAAOgsAAAAAAAACAAAAcmU6CwAAAAAAAEALAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADwLAAAAAAAAPAsAAAAAAAAAAAAAAADwvw"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " f"
					},
					"AgAAAEALAAAAAAAAQQsAAAAAAAAAAAAAQQsAAAAAAABCCwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEALAAAAAAAAQAsAAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "false"
					},
					"AgAAAEELAAAAAAAAQQsAAAAAAAABAAAAZkELAAAAAAAARgsAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEILAAAAAAAAQgsAAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEYLAAAAAAAARwsAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEYLAAAAAAAARgsAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGUMAAAAAAAAZgwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGUMAAAAAAAAZQwAAAAAAAAAAAAAAADwvw"
				],
				[
					41,
					1,
					"reindent",
					null,
					"AQAAAGUMAAAAAAAAZgwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGUMAAAAAAAAZQwAAAAAAAAAAAAAAAAAAA"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "re"
					},
					"AgAAAGYMAAAAAAAAZwwAAAAAAAAAAAAAZwwAAAAAAABoDAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGYMAAAAAAAAZgwAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAAGYMAAAAAAAAZgwAAAAAAAACAAAAcmVmDAAAAAAAAGwMAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGgMAAAAAAAAaAwAAAAAAAAAAAAAAADwvw"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": " t"
					},
					"AgAAAGwMAAAAAAAAbQwAAAAAAAAAAAAAbQwAAAAAAABuDAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGwMAAAAAAAAbAwAAAAAAAAAAAAAAADwvw"
				],
				[
					45,
					1,
					"insert_completion",
					{
						"completion": "true",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "true"
					},
					"AgAAAG0MAAAAAAAAbQwAAAAAAAABAAAAdG0MAAAAAAAAcQwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG4MAAAAAAAAbgwAAAAAAAAAAAAAAADwvw"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAHEMAAAAAAAAcgwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHEMAAAAAAAAcQwAAAAAAAAAAAAAAADwvw"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "bool"
					},
					"BQAAAAEIAAAAAAAAAggAAAAAAAAAAAAAAggAAAAAAAACCAAAAAAAAAQAAAB2b2lkAggAAAAAAAADCAAAAAAAAAAAAAADCAAAAAAAAAQIAAAAAAAAAAAAAAQIAAAAAAAABQgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAEIAAAAAAAABQgAAAAAAAAAAAAAAADwvw"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": " f"
					},
					"AgAAAIQJAAAAAAAAhQkAAAAAAAAAAAAAhQkAAAAAAACGCQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIQJAAAAAAAAhAkAAAAAAAAAAAAAAADwvw"
				],
				[
					55,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "false"
					},
					"AgAAAIUJAAAAAAAAhQkAAAAAAAABAAAAZoUJAAAAAAAAigkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIYJAAAAAAAAhgkAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"contents": "/***************************************************************************\n # Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.\n #\n # Redistribution and use in source and binary forms, with or without\n # modification, are permitted provided that the following conditions\n # are met:\n #  * Redistributions of source code must retain the above copyright\n #    notice, this list of conditions and the following disclaimer.\n #  * Redistributions in binary form must reproduce the above copyright\n #    notice, this list of conditions and the following disclaimer in the\n #    documentation and/or other materials provided with the distribution.\n #  * Neither the name of NVIDIA CORPORATION nor the names of its\n #    contributors may be used to endorse or promote products derived\n #    from this software without specific prior written permission.\n #\n # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\n # EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n # PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n # CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n # EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n # PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n # PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n # OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n **************************************************************************/\n#include \"stdafx.h\"\n#include \"Material.h\"\n\n#include \"Falcor/Core/API/ResourceManager.h\"\n#include \"Core/Program/GraphicsProgram.h\"\n#include \"Core/Program/ProgramVars.h\"\n#include \"Utils/Color/ColorHelpers.slang\"\n\nnamespace Falcor {\n\nstatic_assert(sizeof(MaterialData) % 16 == 0, \"Material::MaterialData size should be a multiple of 16\");\n\nMaterial::UpdateFlags Material::sGlobalUpdates = Material::UpdateFlags::None;\n\nMaterial::Material(std::shared_ptr<Device> pDevice, const std::string& name) : mpDevice(pDevice), mName(name) {\n    markUpdates(UpdateFlags::DataChanged);\n}\n\nMaterial::SharedPtr Material::create(std::shared_ptr<Device> pDevice, const std::string& name)\n{\n    assert(pDevice);\n    Material* pMaterial = new Material(pDevice, name);\n    return SharedPtr(pMaterial);\n}\n\nMaterial::~Material() = default;\n\nbool Material::renderUI(Gui::Widgets& widget)\n{\n    // We're re-using the material's update flags here to track changes.\n    // Cache the previous flag so we can restore it before returning.\n    UpdateFlags prevUpdates = mUpdates;\n    mUpdates = UpdateFlags::None;\n\n    widget.text(\"Shading model:\");\n    if (getShadingModel() == ShadingModelMetalRough) widget.text(\"MetalRough\", true);\n    else if (getShadingModel() == ShadingModelSpecGloss) widget.text(\"SpecGloss\", true);\n    else should_not_get_here();\n\n    if (const auto& tex = getBaseColorTexture(); tex != nullptr)\n    {\n        widget.text(\"Base color: \" + tex->getSourceFilename());\n        widget.text(\"Texture info: \" + std::to_string(tex->getWidth()) + \"x\" + std::to_string(tex->getHeight()) + \" (\" + to_string(tex->getFormat()) + \")\");\n        widget.image(\"Base color\", tex, float2(100.f));\n        if (widget.button(\"Remove texture##BaseColor\")) setBaseColorTexture(nullptr);\n    }\n    else\n    {\n        float4 baseColor = getBaseColor();\n        if (widget.var(\"Base color\", baseColor, 0.f, 1.f, 0.01f)) setBaseColor(baseColor);\n    }\n\n    if (const auto& tex = getSpecularTexture(); tex != nullptr)\n    {\n        widget.text(\"Specular params: \" + tex->getSourceFilename());\n        widget.text(\"Texture info: \" + std::to_string(tex->getWidth()) + \"x\" + std::to_string(tex->getHeight()) + \" (\" + to_string(tex->getFormat()) + \")\");\n        widget.image(\"Specular params\", tex, float2(100.f));\n        if (widget.button(\"Remove texture##Specular\")) setSpecularTexture(nullptr);\n    }\n    else\n    {\n        float4 specularParams = getSpecularParams();\n        if (widget.var(\"Specular params\", specularParams, 0.f, 1.f, 0.01f)) setSpecularParams(specularParams);\n        widget.tooltip(\"The encoding depends on the shading model:\\n\\n\"\n            \"MetalRough:\\n\"\n            \"    occlusion (R), roughness (G), metallic (B)\\n\\n\"\n            \"SpecGloss:\\n\"\n            \"    specular color(RGB) and glossiness(A)\", true);\n\n        if (getShadingModel() == ShadingModelMetalRough)\n        {\n            float roughness = getRoughness();\n            if (widget.var(\"Roughness\", roughness, 0.f, 1.f, 0.01f)) setRoughness(roughness);\n\n            float metallic = getMetallic();\n            if (widget.var(\"Metallic\", metallic, 0.f, 1.f, 0.01f)) setMetallic(metallic);\n        }\n    }\n\n    if (const auto& tex = getNormalMap(); tex != nullptr)\n    {\n        widget.text(\"Normal map: \" + tex->getSourceFilename());\n        widget.text(\"Texture info: \" + std::to_string(tex->getWidth()) + \"x\" + std::to_string(tex->getHeight()) + \" (\" + to_string(tex->getFormat()) + \")\");\n        widget.image(\"Normal map\", tex, float2(100.f));\n        if (widget.button(\"Remove texture##NormalMap\")) setNormalMap(nullptr);\n    }\n\n    if (const auto& tex = getEmissiveTexture(); tex != nullptr)\n    {\n        widget.text(\"Emissive color: \" + tex->getSourceFilename());\n        widget.text(\"Texture info: \" + std::to_string(tex->getWidth()) + \"x\" + std::to_string(tex->getHeight()) + \" (\" + to_string(tex->getFormat()) + \")\");\n        widget.image(\"Emissive color\", tex, float2(100.f));\n        if (widget.button(\"Remove texture##Emissive\")) setEmissiveTexture(nullptr);\n    }\n    else\n    {\n        float3 emissiveColor = getEmissiveColor();\n        if (widget.var(\"Emissive color\", emissiveColor, 0.f, 1.f, 0.01f)) setEmissiveColor(emissiveColor);\n    }\n\n    float emissiveFactor = getEmissiveFactor();\n    if (widget.var(\"Emissive factor\", emissiveFactor, 0.f, std::numeric_limits<float>::max(), 0.01f)) setEmissiveFactor(emissiveFactor);\n\n    if (const auto& tex = getSpecularTransmissionTexture(); tex != nullptr)\n    {\n        widget.text(\"Specular transmission: \" + tex->getSourceFilename());\n        widget.text(\"Texture info: \" + std::to_string(tex->getWidth()) + \"x\" + std::to_string(tex->getHeight()) + \" (\" + to_string(tex->getFormat()) + \")\");\n        widget.image(\"Specular transmission\", tex, float2(100.f));\n        if (widget.button(\"Remove texture##Transmission\")) setSpecularTransmissionTexture(nullptr);\n    }\n    else\n    {\n        float specTransmission = getSpecularTransmission();\n        if (widget.var(\"Specular transmission\", specTransmission, 0.f, 1.f, 0.01f)) setSpecularTransmission(specTransmission);\n    }\n\n    float IoR = getIndexOfRefraction();\n    if (widget.var(\"Index of refraction\", IoR, 1.f, std::numeric_limits<float>::max(), 0.01f)) setIndexOfRefraction(IoR);\n\n    bool doubleSided = isDoubleSided();\n    if (widget.checkbox(\"Double-sided\", doubleSided)) setDoubleSided(doubleSided);\n\n    // Restore update flags.\n    bool changed = mUpdates != UpdateFlags::None;\n    markUpdates(prevUpdates | mUpdates);\n\n    return changed;\n}\n\nvoid Material::setShadingModel(uint32_t model)\n{\n    setFlags(PACK_SHADING_MODEL(mData.flags, model));\n}\n\nvoid Material::setAlphaMode(uint32_t alphaMode)\n{\n    setFlags(PACK_ALPHA_MODE(mData.flags, alphaMode));\n}\n\nvoid Material::setDoubleSided(bool doubleSided)\n{\n    setFlags(PACK_DOUBLE_SIDED(mData.flags, doubleSided ? 1 : 0));\n}\n\nvoid Material::setAlphaThreshold(float alpha)\n{\n    if (mData.alphaThreshold != alpha)\n    {\n        mData.alphaThreshold = alpha;\n        markUpdates(UpdateFlags::DataChanged);\n    }\n}\n\nvoid Material::setIndexOfRefraction(float IoR) {\n    if (mData.IoR != IoR) {\n        mData.IoR = IoR;\n        markUpdates(UpdateFlags::DataChanged);\n    }\n}\n\nvoid Material::setReflectivity(float reflectivity) {\n    if (mData.reflectivity != reflectivity) {\n        mData.reflectivity = reflectivity;\n        markUpdates(UpdateFlags::DataChanged);\n    }\n}\n\nvoid Material::setNestedPriority(uint32_t priority)\n{\n    const uint32_t maxPriority = (1U << NESTED_PRIORITY_BITS) - 1;\n    if (priority > maxPriority)\n    {\n        logWarning(\"Requested nested priority \" + std::to_string(priority) + \" for material '\" + mName + \"' is out of range. Clamping to \" + std::to_string(maxPriority) + \".\");\n        priority = maxPriority;\n    }\n    setFlags(PACK_NESTED_PRIORITY(mData.flags, priority));\n}\n\nvoid Material::setSampler(Sampler::SharedPtr pSampler)\n{\n    if (pSampler != mResources.samplerState)\n    {\n        mResources.samplerState = pSampler;\n        markUpdates(UpdateFlags::ResourcesChanged);\n    }\n}\n\nvoid Material::setTexture(TextureSlot slot, Texture::SharedPtr pTexture)\n{\n    switch (slot)\n    {\n    case TextureSlot::BaseColor:\n        setBaseColorTexture(pTexture);\n        break;\n    case TextureSlot::Specular:\n        setSpecularTexture(pTexture);\n        break;\n    case TextureSlot::Roughness:\n        setRoughnessTexture(pTexture);\n        break;\n    case TextureSlot::Emissive:\n        setEmissiveTexture(pTexture);\n        break;\n    case TextureSlot::Normal:\n        setNormalMap(pTexture);\n        break;\n    case TextureSlot::Occlusion:\n        setOcclusionMap(pTexture);\n        break;\n    case TextureSlot::SpecularTransmission:\n        setSpecularTransmissionTexture(pTexture);\n        break;\n    default:\n        should_not_get_here();\n    }\n}\n\nTexture::SharedPtr Material::getTexture(TextureSlot slot) const\n{\n    switch (slot)\n    {\n    case TextureSlot::BaseColor:\n        return getBaseColorTexture();\n    case TextureSlot::Specular:\n        return getSpecularTexture();\n    case TextureSlot::Roughness:\n        return getRoughnessTexture();\n    case TextureSlot::Emissive:\n        return getEmissiveTexture();\n    case TextureSlot::Normal:\n        return getNormalMap();\n    case TextureSlot::Occlusion:\n        return getOcclusionMap();\n    case TextureSlot::SpecularTransmission:\n        return getSpecularTransmissionTexture();\n    default:\n        should_not_get_here();\n    }\n    return nullptr;\n}\n\nuint2 Material::getMaxTextureDimensions() const\n{\n    uint2 dim = uint2(0);\n    for (uint32_t i = 0; i < (uint32_t)TextureSlot::Count; i++)\n    {\n        const auto& t = getTexture((TextureSlot)i);\n        if (t) dim = max(dim, uint2(t->getWidth(), t->getHeight()));\n    }\n    return dim;\n}\n\nvoid Material::loadTexture(TextureSlot slot, const std::string& filename, bool useSrgb) {\n    assert(mpDevice);\n    std::string fullpath;\n    if (findFileInDataDirectories(filename, fullpath)) {\n        auto pTexture = mpDevice->resourceManager()->createSparseTextureFromFile(fullpath, true, useSrgb && isSrgbTextureRequired(slot));\n        if (pTexture) {\n            setTexture(slot, pTexture);\n            // Flush and sync in order to prevent the upload heap from growing too large. Doing so after\n            // every texture creation is overly conservative, and will likely lead to performance issues\n            // due to the forced CPU/GPU sync.\n            mpDevice->flushAndSync();\n        }\n    }\n}\n\nvoid Material::clearTexture(TextureSlot slot) {\n    setTexture(slot, nullptr);\n}\n\nbool Material::isSrgbTextureRequired(TextureSlot slot) {\n    uint32_t shadingModel = getShadingModel();\n\n    switch (slot) {\n        case TextureSlot::Specular:\n            return false;\n            return (shadingModel == ShadingModelSpecGloss);\n        case TextureSlot::BaseColor:\n        case TextureSlot::Emissive:\n        case TextureSlot::Occlusion:\n            return true;\n        case TextureSlot::Normal:\n        case TextureSlot::Roughness:\n            return false;\n        default:\n            should_not_get_here();\n            return false;\n    }\n}\n\nvoid Material::setBaseColorTexture(Texture::SharedPtr pBaseColor) {\n    if (mResources.baseColor != pBaseColor) {\n        mResources.baseColor = pBaseColor;\n        markUpdates(UpdateFlags::ResourcesChanged);\n        updateBaseColorType();\n        bool hasAlpha = pBaseColor && doesFormatHasAlpha(pBaseColor->getFormat());\n        setAlphaMode(hasAlpha ? AlphaModeMask : AlphaModeOpaque);\n    }\n}\n\nvoid Material::setSpecularTexture(Texture::SharedPtr pSpecular) {\n    if (mResources.specular != pSpecular) {\n        mResources.specular = pSpecular;\n        markUpdates(UpdateFlags::ResourcesChanged);\n        updateSpecularType();\n    }\n}\n\nvoid Material::setRoughnessTexture(Texture::SharedPtr pRoughness) {\n    if (mResources.roughness != pRoughness) {\n        mResources.roughness = pRoughness;\n        markUpdates(UpdateFlags::ResourcesChanged);\n        updateRoughnessType();\n    }\n}\n\nvoid Material::setEmissiveTexture(const Texture::SharedPtr& pEmissive) {\n    if (mResources.emissive != pEmissive) {\n        mResources.emissive = pEmissive;\n        markUpdates(UpdateFlags::ResourcesChanged);\n        updateEmissiveType();\n    }\n}\n\nvoid Material::setSpecularTransmissionTexture(const Texture::SharedPtr& pSpecularTransmission) {\n    if (mResources.specularTransmission != pSpecularTransmission) {\n        mResources.specularTransmission = pSpecularTransmission;\n        markUpdates(UpdateFlags::ResourcesChanged);\n        updateSpecularTransmissionType();\n    }\n}\n\nvoid Material::setBaseColor(const float4& color) {\n    if (mData.baseColor != color) {\n        mData.baseColor = color;\n        markUpdates(UpdateFlags::DataChanged);\n        updateBaseColorType();\n    }\n}\n\nvoid Material::setSpecularParams(const float4& color) {\n    if (mData.specular != color) {\n        mData.specular = color;\n        markUpdates(UpdateFlags::DataChanged);\n        updateSpecularType();\n    }\n}\n\nvoid Material::setRoughness(float roughness) {\n    if (getShadingModel() != ShadingModelMetalRough) {\n        logWarning(\"Ignoring setRoughness(). Material '\" + mName + \"' does not use the metallic/roughness shading model.\");\n        return;\n    }\n\n    if (mData.roughness != roughness) {\n        mData.roughness = roughness;\n        markUpdates(UpdateFlags::DataChanged);\n        updateRoughnessType();\n    }\n}\n\nvoid Material::setMetallic(float metallic) {\n    if (getShadingModel() != ShadingModelMetalRough) {\n        logWarning(\"Ignoring setMetallic(). Material '\" + mName + \"' does not use the metallic/roughness shading model.\");\n        return;\n    }\n\n    if (mData.specular.b != metallic) {\n        mData.specular.b = metallic;\n        markUpdates(UpdateFlags::DataChanged);\n        updateSpecularType();\n    }\n}\n\nvoid Material::setSpecularTransmission(float specularTransmission) {\n    if (mData.specularTransmission != specularTransmission) {\n        mData.specularTransmission = specularTransmission;\n        markUpdates(UpdateFlags::DataChanged);\n        updateSpecularTransmissionType();\n    }\n}\n\nvoid Material::setVolumeAbsorption(const float3& volumeAbsorption) {\n    if (mData.volumeAbsorption != volumeAbsorption) {\n        mData.volumeAbsorption = volumeAbsorption;\n        markUpdates(UpdateFlags::DataChanged);\n    }\n}\n\nvoid Material::setEmissiveColor(const float3& color) {\n    if (mData.emissive != color) {\n        mData.emissive = color;\n        markUpdates(UpdateFlags::DataChanged);\n        updateEmissiveType();\n    }\n}\n\nvoid Material::setEmissiveFactor(float factor) {\n    if (mData.emissiveFactor != factor) {\n        mData.emissiveFactor = factor;\n        markUpdates(UpdateFlags::DataChanged);\n        updateEmissiveType();\n    }\n}\n\nvoid Material::setNormalMap(Texture::SharedPtr pNormalMap) {\n    if (mResources.normalMap != pNormalMap) {\n        mResources.normalMap = pNormalMap;\n        markUpdates(UpdateFlags::ResourcesChanged);\n        uint32_t normalMode = NormalMapUnused;\n        if (pNormalMap) {\n            switch(getFormatChannelCount(pNormalMap->getFormat())) {\n                case 2:\n                    normalMode = NormalMapRG;\n                    break;\n                case 3:\n                case 4: // Some texture formats don't support RGB, only RGBA. We have no use for the alpha channel in the normal map.\n                    normalMode = NormalMapRGB;\n                    break;\n                default:\n                    should_not_get_here();\n                    logWarning(\"Unsupported normal map format for material \" + mName);\n            }\n        }\n        setFlags(PACK_NORMAL_MAP_TYPE(mData.flags, normalMode));\n    }\n}\n\nvoid Material::setOcclusionMap(Texture::SharedPtr pOcclusionMap) {\n    if (mResources.occlusionMap != pOcclusionMap) {\n        mResources.occlusionMap = pOcclusionMap;\n        markUpdates(UpdateFlags::ResourcesChanged);\n        updateOcclusionFlag();\n    }\n}\n\nbool Material::operator==(const Material& other) const\n{\n#define compare_field(_a) if (mData._a != other.mData._a) return false\n    compare_field(baseColor);\n    compare_field(specular);\n    compare_field(roughness);\n    compare_field(emissive);\n    compare_field(emissiveFactor);\n    compare_field(alphaThreshold);\n    compare_field(IoR);\n    compare_field(specularTransmission);\n    compare_field(flags);\n    compare_field(volumeAbsorption);\n#undef compare_field\n\n#define compare_texture(_a) if (mResources._a != other.mResources._a) return false\n    compare_texture(baseColor);\n    compare_texture(specular);\n    compare_texture(roughness);\n    compare_texture(emissive);\n    compare_texture(normalMap);\n    compare_texture(occlusionMap);\n    compare_texture(specularTransmission);\n#undef compare_texture\n    if (mResources.samplerState != other.mResources.samplerState) return false;\n    return true;\n}\n\nvoid Material::markUpdates(UpdateFlags updates)\n{\n    mUpdates |= updates;\n    sGlobalUpdates |= updates;\n}\n\nvoid Material::setFlags(uint32_t flags)\n{\n    if (mData.flags != flags)\n    {\n        mData.flags = flags;\n        markUpdates(UpdateFlags::DataChanged);\n    }\n}\n\ntemplate<typename vec>\nstatic uint32_t getChannelMode(bool hasTexture, const vec& color)\n{\n    if (hasTexture) return ChannelTypeTexture;\n    if (luminance(color) == 0) return ChannelTypeUnused;\n    return ChannelTypeConst;\n}\n\nvoid Material::updateBaseColorType()\n{\n    setFlags(PACK_DIFFUSE_TYPE(mData.flags, getChannelMode(mResources.baseColor != nullptr, mData.baseColor)));\n}\n\nvoid Material::updateSpecularType()\n{\n    setFlags(PACK_SPECULAR_TYPE(mData.flags, getChannelMode(mResources.specular != nullptr, mData.specular)));\n}\n\nvoid Material::updateRoughnessType()\n{\n    setFlags(PACK_ROUGHNESS_TYPE(mData.flags, getChannelMode(mResources.roughness != nullptr, mData.roughness)));\n}\n\nvoid Material::updateEmissiveType()\n{\n    setFlags(PACK_EMISSIVE_TYPE(mData.flags, getChannelMode(mResources.emissive != nullptr, mData.emissive * mData.emissiveFactor)));\n}\n\nvoid Material::updateSpecularTransmissionType()\n{\n    setFlags(PACK_SPEC_TRANS_TYPE(mData.flags, getChannelMode(mResources.specularTransmission != nullptr, mData.specularTransmission)));\n}\n\nvoid Material::updateOcclusionFlag()\n{\n    bool hasMap = false;\n    switch (EXTRACT_SHADING_MODEL(mData.flags))\n    {\n    case ShadingModelMetalRough:\n        hasMap = (mResources.specular != nullptr);\n        break;\n    case ShadingModelSpecGloss:\n        hasMap = (mResources.occlusionMap != nullptr);\n        break;\n    default:\n        should_not_get_here();\n    }\n    bool shouldEnable = mOcclusionMapEnabled && hasMap;\n    setFlags(PACK_OCCLUSION_MAP(mData.flags, shouldEnable ? 1 : 0));\n}\n\n#ifdef SCRIPTING\nSCRIPT_BINDING(Material)\n{\n    pybind11::enum_<Material::TextureSlot> textureSlot(m, \"MaterialTextureSlot\");\n    textureSlot.value(\"BaseColor\", Material::TextureSlot::BaseColor);\n    textureSlot.value(\"Specular\", Material::TextureSlot::Specular);\n    textureSlot.value(\"Roughness\", Material::TextureSlot::Roughness);\n    textureSlot.value(\"Emissive\", Material::TextureSlot::Emissive);\n    textureSlot.value(\"Normal\", Material::TextureSlot::Normal);\n    textureSlot.value(\"Occlusion\", Material::TextureSlot::Occlusion);\n    textureSlot.value(\"SpecularTransmission\", Material::TextureSlot::SpecularTransmission);\n\n    pybind11::class_<Material, Material::SharedPtr> material(m, \"Material\");\n    material.def_property_readonly(\"name\", &Material::getName);\n    material.def_property(\"baseColor\", &Material::getBaseColor, &Material::setBaseColor);\n    material.def_property(\"specularParams\", &Material::getSpecularParams, &Material::setSpecularParams);\n    material.def_property(\"roughness\", &Material::getRoughness, &Material::setRoughness);\n    material.def_property(\"metallic\", &Material::getMetallic, &Material::setMetallic);\n    material.def_property(\"specularTransmission\", &Material::getSpecularTransmission, &Material::setSpecularTransmission);\n    material.def_property(\"volumeAbsorption\", &Material::getVolumeAbsorption, &Material::setVolumeAbsorption);\n    material.def_property(\"indexOfRefraction\", &Material::getIndexOfRefraction, &Material::setIndexOfRefraction);\n    material.def_property(\"emissiveColor\", &Material::getEmissiveColor, &Material::setEmissiveColor);\n    material.def_property(\"emissiveFactor\", &Material::getEmissiveFactor, &Material::setEmissiveFactor);\n    material.def_property(\"alphaMode\", &Material::getAlphaMode, &Material::setAlphaMode);\n    material.def_property(\"alphaThreshold\", &Material::getAlphaThreshold, &Material::setAlphaThreshold);\n    material.def_property(\"doubleSided\", &Material::isDoubleSided, &Material::setDoubleSided);\n    material.def_property(\"nestedPriority\", &Material::getNestedPriority, &Material::setNestedPriority);\n\n    material.def(\"loadTexture\", &Material::loadTexture, \"slot\"_a, \"filename\"_a, \"useSrgb\"_a = true);\n    material.def(\"clearTexture\", &Material::clearTexture, \"slot\"_a);\n}\n#endif\n\n}  // namespace Falcor\n",
			"file": "src/Falcor/Scene/Material/Material.cpp",
			"file_size": 21711,
			"file_write_time": 133352798597027383,
			"settings":
			{
				"buffer_size": 21711,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAAAxNQAALyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogIyBDb3B5cmlnaHQgKGMpIDIwMTUtMjIsIE5WSURJQSBDT1JQT1JBVElPTi4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KICMKICMgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0CiAjIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucwogIyBhcmUgbWV0OgogIyAgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodAogIyAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuCiAjICAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0CiAjICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUKICMgICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi4KICMgICogTmVpdGhlciB0aGUgbmFtZSBvZiBOVklESUEgQ09SUE9SQVRJT04gbm9yIHRoZSBuYW1lcyBvZiBpdHMKICMgICAgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkCiAjICAgIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi4KICMKICMgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgIkFTIElTIiBBTkQgQU5ZCiAjIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFCiAjIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUgogIyBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBPV05FUiBPUgogIyBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwKICMgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLAogIyBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IKICMgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWQogIyBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQKICMgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFCiAjIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuCiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KI2luY2x1ZGUgInN0ZGFmeC5oIgojaW5jbHVkZSAiQmFzaWNNYXRlcmlhbC5oIgojaW5jbHVkZSAiRmFsY29yL0V4cGVyaW1lbnRhbC9TY2VuZS9NYXRlcmlhbHMvTG9iZVR5cGUuc2xhbmciCgojaW5jbHVkZSAiTWF0ZXJpYWxTeXN0ZW0uaCIKI2luY2x1ZGUgIk1hdGVyaWFsLmgiCgpuYW1lc3BhY2UgRmFsY29yIHsKCm5hbWVzcGFjZSB7CgogICAgc3RhdGljX2Fzc2VydChzaXplb2YoVGV4dHVyZUhhbmRsZSkgPT0gNCk7CiAgICBzdGF0aWNfYXNzZXJ0KHNpemVvZihNYXRlcmlhbEhlYWRlcikgPT0gOCk7CiAgICBzdGF0aWNfYXNzZXJ0KHNpemVvZihNYXRlcmlhbFBheWxvYWQpID09IDEyMCk7CiAgICBzdGF0aWNfYXNzZXJ0KHNpemVvZihNYXRlcmlhbERhdGFCbG9iKSA9PSAxMjgpOwogICAgc3RhdGljX2Fzc2VydChzdGF0aWNfY2FzdDx1aW50MzJfdD4oTWF0ZXJpYWxUeXBlOjpCdWlsdGluQ291bnQpIDw9ICgxdSA8PCBNYXRlcmlhbEhlYWRlcjo6a01hdGVyaWFsVHlwZUJpdHMpLCAiTWF0ZXJpYWxUeXBlIGNvdW50IGV4Y2VlZHMgdGhlIG1heGltdW0iKTsKICAgIHN0YXRpY19hc3NlcnQoc3RhdGljX2Nhc3Q8dWludDMyX3Q+KEFscGhhTW9kZTo6Q291bnQpIDw9ICgxdSA8PCBNYXRlcmlhbEhlYWRlcjo6a0FscGhhTW9kZUJpdHMpLCAiQWxwaGFNb2RlIGJpdCBjb3VudCBleGNlZWRzIHRoZSBtYXhpbXVtIik7CiAgICBzdGF0aWNfYXNzZXJ0KHN0YXRpY19jYXN0PHVpbnQzMl90PihMb2JlVHlwZTo6QWxsKSA8ICgxdSA8PCBNYXRlcmlhbEhlYWRlcjo6a0xvYmVUeXBlQml0cyksICJMb2JlVHlwZSBiaXQgY291bnQgZXhjZWVkcyB0aGUgbWF4aW11bSIpOwogICAgc3RhdGljX2Fzc2VydChzdGF0aWNfY2FzdDx1aW50MzJfdD4oVGV4dHVyZUhhbmRsZTo6TW9kZTo6Q291bnQpIDw9ICgxdSA8PCBUZXh0dXJlSGFuZGxlOjprTW9kZUJpdHMpLCAiVGV4dHVyZUhhbmRsZTo6TW9kZSBiaXQgY291bnQgZXhjZWVkcyB0aGUgbWF4aW11bSIpOwogICAgc3RhdGljX2Fzc2VydChNYXRlcmlhbEhlYWRlcjo6a1RvdGFsSGVhZGVyQml0c1ggPD0gMzIsICJNYXRlcmlhbEhlYWRlciBiaXQgY291bnQgeCBleGNlZWRzIHRoZSBtYXhpbXVtIik7CiAgICBzdGF0aWNfYXNzZXJ0KE1hdGVyaWFsSGVhZGVyOjprVG90YWxIZWFkZXJCaXRzWSA8PSAzMiwgIk1hdGVyaWFsSGVhZGVyIGJpdCBjb3VudCB5IGV4Y2VlZHMgdGhlIG1heGltdW0iKTsKICAgIHN0YXRpY19hc3NlcnQoTWF0ZXJpYWxIZWFkZXI6OmtBbHBoYVRocmVzaG9sZEJpdHMgPT0gMTYsICJNYXRlcmlhbEhlYWRlciBhbHBoYSB0aHJlc2hvbGQgYml0IGNvdW50IG11c3QgYmUgMTYiKTsKCn0KCmJvb2wgb3BlcmF0b3I9PShjb25zdCBNYXRlcmlhbEhlYWRlciYgbGhzLCBjb25zdCBNYXRlcmlhbEhlYWRlciYgcmhzKSB7CiAgICByZXR1cm4gbGhzLnBhY2tlZERhdGEgPT0gcmhzLnBhY2tlZERhdGE7Cn0KCk1hdGVyaWFsOjpNYXRlcmlhbChEZXZpY2U6OlNoYXJlZFB0ciBwRGV2aWNlLCBjb25zdCBzdGQ6OnN0cmluZyYgbmFtZSwgTWF0ZXJpYWxUeXBlIHR5cGUpOiBtcERldmljZShwRGV2aWNlKSwgbU5hbWUobmFtZSkgewogICAgbUhlYWRlci5zZXRNYXRlcmlhbFR5cGUodHlwZSk7CiAgICBtSGVhZGVyLnNldEFscGhhTW9kZShBbHBoYU1vZGU6Ok9wYXF1ZSk7CiAgICBtSGVhZGVyLnNldEFscGhhVGhyZXNob2xkKGZsb2F0MTZfdCgwLjVmKSk7CiAgICBtSGVhZGVyLnNldEFjdGl2ZUxvYmVzKHN0YXRpY19jYXN0PHVpbnQzMl90PihMb2JlVHlwZTo6QWxsKSk7Cn0KCnN0ZDo6c2hhcmVkX3B0cjxCYXNpY01hdGVyaWFsPiBNYXRlcmlhbDo6dG9CYXNpY01hdGVyaWFsKCkgewogICAgaWYgKG1IZWFkZXIuaXNCYXNpY01hdGVyaWFsKCkpIHsKICAgICAgICBhc3NlcnQoc3RkOjpkeW5hbWljX3BvaW50ZXJfY2FzdDxCYXNpY01hdGVyaWFsPihzaGFyZWRfZnJvbV90aGlzKCkpKTsKICAgICAgICByZXR1cm4gc3RkOjpzdGF0aWNfcG9pbnRlcl9jYXN0PEJhc2ljTWF0ZXJpYWw+KHNoYXJlZF9mcm9tX3RoaXMoKSk7CiAgICB9CiAgICByZXR1cm4gbnVsbHB0cjsKfQoKdm9pZCBNYXRlcmlhbDo6c2V0RG91YmxlU2lkZWQoYm9vbCBkb3VibGVTaWRlZCkgewogICAgaWYgKG1IZWFkZXIuaXNEb3VibGVTaWRlZCgpICE9IGRvdWJsZVNpZGVkKSB7CiAgICAgICAgbUhlYWRlci5zZXREb3VibGVTaWRlZChkb3VibGVTaWRlZCk7CiAgICAgICAgbWFya1VwZGF0ZXMoVXBkYXRlRmxhZ3M6OkRhdGFDaGFuZ2VkKTsKICAgIH0KfQoKdm9pZCBNYXRlcmlhbDo6c2V0VGhpblN1cmZhY2UoYm9vbCB0aGluU3VyZmFjZSkgewogICAgaWYgKG1IZWFkZXIuaXNUaGluU3VyZmFjZSgpICE9IHRoaW5TdXJmYWNlKSB7CiAgICAgICAgbUhlYWRlci5zZXRUaGluU3VyZmFjZSh0aGluU3VyZmFjZSk7CiAgICAgICAgbWFya1VwZGF0ZXMoVXBkYXRlRmxhZ3M6OkRhdGFDaGFuZ2VkKTsKICAgIH0KfQoKdm9pZCBNYXRlcmlhbDo6c2V0QWxwaGFNb2RlKEFscGhhTW9kZSBhbHBoYU1vZGUpIHsKICAgIExMT0dfV1JOIDw8ICJNYXRlcmlhbCAnIiA8PCBnZXROYW1lKCkgPDwgIicgb2YgdHlwZSAnIiA8PCB0b19zdHJpbmcoZ2V0VHlwZSgpKSA8PCAiJyBkb2VzIG5vdCBzdXBwb3J0IGFscGhhLiBJZ25vcmluZyBjYWxsIHRvIHNldEFscGhhTW9kZSgpLiI7Cn0KCnZvaWQgTWF0ZXJpYWw6OnNldEFscGhhVGhyZXNob2xkKGZsb2F0IGFscGhhVGhyZXNob2xkKSB7CiAgICBMTE9HX1dSTiA8PCAiTWF0ZXJpYWwgJyIgPDwgZ2V0TmFtZSgpIDw8ICInIG9mIHR5cGUgJyIgPDwgdG9fc3RyaW5nKGdldFR5cGUoKSkgPDwgIicgZG9lcyBub3Qgc3VwcG9ydCBhbHBoYS4gSWdub3JpbmcgY2FsbCB0byBzZXRBbHBoYVRocmVzaG9sZCgpLiI7Cn0KCnZvaWQgTWF0ZXJpYWw6OnNldE5lc3RlZFByaW9yaXR5KHVpbnQzMl90IHByaW9yaXR5KSB7CiAgICBjb25zdCB1aW50MzJfdCBtYXhQcmlvcml0eSA9ICgxdSA8PCBNYXRlcmlhbEhlYWRlcjo6a05lc3RlZFByaW9yaXR5Qml0cykgLSAxOwogICAgaWYgKHByaW9yaXR5ID4gbWF4UHJpb3JpdHkpIHsKICAgICAgICBMTE9HX1dSTiA8PCAiUmVxdWVzdGVkIG5lc3RlZCBwcmlvcml0eSAiIDw8IHN0ZDo6dG9fc3RyaW5nKHByaW9yaXR5KSA8PCAiIGZvciBtYXRlcmlhbCAnIiA8PCBtTmFtZSA8PCAiJyBpcyBvdXQgb2YgcmFuZ2UuIENsYW1waW5nIHRvICI8PCBzdGQ6OnRvX3N0cmluZyhtYXhQcmlvcml0eSkgPDwgIi4iOwogICAgICAgIHByaW9yaXR5ID0gbWF4UHJpb3JpdHk7CiAgICB9CiAgICBpZiAobUhlYWRlci5nZXROZXN0ZWRQcmlvcml0eSgpICE9IHByaW9yaXR5KSB7CiAgICAgICAgbUhlYWRlci5zZXROZXN0ZWRQcmlvcml0eShwcmlvcml0eSk7CiAgICAgICAgbWFya1VwZGF0ZXMoVXBkYXRlRmxhZ3M6OkRhdGFDaGFuZ2VkKTsKICAgIH0KfQoKY29uc3QgTWF0ZXJpYWw6OlRleHR1cmVTbG90SW5mbyYgTWF0ZXJpYWw6OmdldFRleHR1cmVTbG90SW5mbyhjb25zdCBUZXh0dXJlU2xvdCBzbG90KSBjb25zdCB7CiAgICBhc3NlcnQoKHNpemVfdClzbG90IDwgbVRleHR1cmVTbG90SW5mby5zaXplKCkpOwogICAgcmV0dXJuIG1UZXh0dXJlU2xvdEluZm9bKHNpemVfdClzbG90XTsKfQoKYm9vbCBNYXRlcmlhbDo6aGFzVGV4dHVyZVNsb3REYXRhKGNvbnN0IFRleHR1cmVTbG90IHNsb3QpIGNvbnN0IHsKICAgIGFzc2VydCgoc2l6ZV90KXNsb3QgPCBtVGV4dHVyZVNsb3RJbmZvLnNpemUoKSk7CiAgICByZXR1cm4gbVRleHR1cmVTbG90RGF0YVsoc2l6ZV90KXNsb3RdLnBUZXh0dXJlICE9IG51bGxwdHI7Cn0KCnNpemVfdCBNYXRlcmlhbDo6Z2V0VGV4dHVyZUNvdW50KCkgY29uc3QgewogICAgc2l6ZV90IHJlc3VsdCA9IDA7CiAgICBmb3IoY29uc3QgYXV0byYgZGF0YTogbVRleHR1cmVTbG90RGF0YSkgewogICAgICAgIGlmKGRhdGEucFRleHR1cmUgIT0gbnVsbHB0cikgcmVzdWx0Kys7CiAgICB9CiAgICByZXR1cm4gcmVzdWx0Owp9CgpzdGQ6OnZlY3RvcjxUZXh0dXJlOjpTaGFyZWRQdHI+IE1hdGVyaWFsOjpnZXRUZXh0dXJlcygpIGNvbnN0IHsKICAgIHN0ZDo6dmVjdG9yPFRleHR1cmU6OlNoYXJlZFB0cj4gdGV4dHVyZXM7CiAgICBmb3IoY29uc3QgYXV0byYgZGF0YTogbVRleHR1cmVTbG90RGF0YSkgewogICAgICAgIGlmKGRhdGEucFRleHR1cmUgIT0gbnVsbHB0cikgdGV4dHVyZXMucHVzaF9iYWNrKGRhdGEucFRleHR1cmUpOwogICAgfQogICAgcmV0dXJuIHRleHR1cmVzOwp9Cgp2b2lkIE1hdGVyaWFsOjpnZXRUZXh0dXJlcyhzdGQ6OnZlY3RvcjxUZXh0dXJlOjpTaGFyZWRQdHI+JiB0ZXh0dXJlcywgYm9vbCBhcHBlbmQpIGNvbnN0IHsKICAgIGlmKCFhcHBlbmQpIHRleHR1cmVzLmNsZWFyKCk7CiAgICAKICAgIGZvcihjb25zdCBhdXRvJiBkYXRhOiBtVGV4dHVyZVNsb3REYXRhKSB7CiAgICAgICAgaWYoZGF0YS5wVGV4dHVyZSAhPSBudWxscHRyKSB7CiAgICAgICAgICAgIHRleHR1cmVzLnB1c2hfYmFjayhkYXRhLnBUZXh0dXJlKTsKICAgICAgICB9CiAgICB9Cn0KCmJvb2wgTWF0ZXJpYWw6OnNldFRleHR1cmUoY29uc3QgVGV4dHVyZVNsb3Qgc2xvdCwgY29uc3QgVGV4dHVyZTo6U2hhcmVkUHRyJiBwVGV4dHVyZSkgewogICAgaWYoIXBUZXh0dXJlKSB7CiAgICAgICAgTExPR19XUk4gPDwgIk51bGwgdGV4dHVyZSBwcm92aWRlZCBmb3IgbWF0ZXJpYWwgJyIgPDwgZ2V0TmFtZSgpIDw8ICInIGF0IHNsb3QgJyIgPDwgdG9fc3RyaW5nKHNsb3QpIDw8ICInLiBJZ25vcmluZyBjYWxsIHRvIHNldFRleHR1cmUoKS4iOwogICAgfQoKICAgIGlmICghaGFzVGV4dHVyZVNsb3Qoc2xvdCkpIHsKICAgICAgICBMTE9HX1dSTiA8PCAiTWF0ZXJpYWwgJyIgPDwgZ2V0TmFtZSgpIDw8ICInIGRvZXMgbm90IGhhdmUgdGV4dHVyZSBzbG90ICciIDw8IHRvX3N0cmluZyhzbG90KSA8PCAiJy4gSWdub3JpbmcgY2FsbCB0byBzZXRUZXh0dXJlKCkuIjsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgaWYgKHBUZXh0dXJlID09IGdldFRleHR1cmUoc2xvdCkpIHsKICAgICAgICBMTE9HX1dSTiA8PCAiTWF0ZXJpYWwgJyIgPDwgZ2V0TmFtZSgpIDw8ICInIGFscmVhZHkgaGF2ZSB0ZXh0dXJlIGF0IHNsb3QgJyIgPDwgdG9fc3RyaW5nKHNsb3QpIDw8ICInLiBJZ25vcmluZyBjYWxsIHRvIHNldFRleHR1cmUoKS4iOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICBhc3NlcnQoKHNpemVfdClzbG90IDwgbVRleHR1cmVTbG90SW5mby5zaXplKCkpOwogICAgbVRleHR1cmVTbG90RGF0YVsoc2l6ZV90KXNsb3RdLnBUZXh0dXJlID0gcFRleHR1cmU7CgogICAgbWFya1VwZGF0ZXMoVXBkYXRlRmxhZ3M6OlJlc291cmNlc0NoYW5nZWQpOwogICAgcmV0dXJuIHRydWU7Cn0KClRleHR1cmU6OlNoYXJlZFB0ciBNYXRlcmlhbDo6Z2V0VGV4dHVyZShjb25zdCBUZXh0dXJlU2xvdCBzbG90KSBjb25zdCB7CiAgICBpZiAoIWhhc1RleHR1cmVTbG90KHNsb3QpKSByZXR1cm4gbnVsbHB0cjsKCiAgICBhc3NlcnQoKHNpemVfdClzbG90IDwgbVRleHR1cmVTbG90SW5mby5zaXplKCkpOwogICAgcmV0dXJuIG1UZXh0dXJlU2xvdERhdGFbKHNpemVfdClzbG90XS5wVGV4dHVyZTsKfQoKdm9pZCBNYXRlcmlhbDo6bG9hZFRleHR1cmUoVGV4dHVyZVNsb3Qgc2xvdCwgY29uc3QgZnM6OnBhdGgmIHBhdGgsIGJvb2wgdXNlU3JnYikgewogICAgaWYgKCFoYXNUZXh0dXJlU2xvdChzbG90KSkgewogICAgICAgIExMT0dfV1JOIDw8ICJNYXRlcmlhbCAnIiA8PCBnZXROYW1lKCkgPDwgIicgZG9lcyBub3QgaGF2ZSB0ZXh0dXJlIHNsb3QgJyIgPDwgdG9fc3RyaW5nKHNsb3QpIDw8ICInLiBJZ25vcmluZyBjYWxsIHRvIGxvYWRUZXh0dXJlKCkuIjsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgZnM6OnBhdGggZnVsbFBhdGg7CiAgICBpZiAoZmluZEZpbGVJbkRhdGFEaXJlY3RvcmllcyhwYXRoLCBmdWxsUGF0aCkpIHsKICAgICAgICBhdXRvIHRleHR1cmUgPSBUZXh0dXJlOjpjcmVhdGVGcm9tRmlsZShtcERldmljZSwgZnVsbFBhdGgsIHRydWUsIHVzZVNyZ2IgJiYgZ2V0VGV4dHVyZVNsb3RJbmZvKHNsb3QpLnNyZ2IpOwogICAgICAgIGlmICh0ZXh0dXJlKSB7CiAgICAgICAgICAgIHNldFRleHR1cmUoc2xvdCwgdGV4dHVyZSk7CiAgICAgICAgICAgIC8vIEZsdXNoIGFuZCBzeW5jIGluIG9yZGVyIHRvIHByZXZlbnQgdGhlIHVwbG9hZCBoZWFwIGZyb20gZ3Jvd2luZyB0b28gbGFyZ2UuIERvaW5nIHNvIGFmdGVyCiAgICAgICAgICAgIC8vIGV2ZXJ5IHRleHR1cmUgY3JlYXRpb24gaXMgb3Zlcmx5IGNvbnNlcnZhdGl2ZSwgYW5kIHdpbGwgbGlrZWx5IGxlYWQgdG8gcGVyZm9ybWFuY2UgaXNzdWVzCiAgICAgICAgICAgIC8vIGR1ZSB0byB0aGUgZm9yY2VkIENQVS9HUFUgc3luYy4KICAgICAgICAgICAgbXBEZXZpY2UtPmZsdXNoQW5kU3luYygpOwogICAgICAgIH0KICAgIH0KfQoKdWludDIgTWF0ZXJpYWw6OmdldE1heFRleHR1cmVEaW1lbnNpb25zKCkgY29uc3QgewogICAgdWludDIgZGltID0gdWludDIoMCk7CiAgICBmb3IgKHVpbnQzMl90IGkgPSAwOyBpIDwgKHVpbnQzMl90KVRleHR1cmVTbG90OjpDb3VudDsgaSsrKSB7CiAgICAgICAgYXV0byBwVGV4dHVyZSA9IGdldFRleHR1cmUoKFRleHR1cmVTbG90KWkpOwogICAgICAgIGlmIChwVGV4dHVyZSkgZGltID0gbWF4KGRpbSwgdWludDIocFRleHR1cmUtPmdldFdpZHRoKCksIHBUZXh0dXJlLT5nZXRIZWlnaHQoKSkpOwogICAgfQogICAgcmV0dXJuIGRpbTsKfQoKdm9pZCBNYXRlcmlhbDo6c2V0VGV4dHVyZVRyYW5zZm9ybShjb25zdCBUcmFuc2Zvcm0mIHRleHR1cmVUcmFuc2Zvcm0pIHsKICAgIG1UZXh0dXJlVHJhbnNmb3JtID0gdGV4dHVyZVRyYW5zZm9ybTsKfQoKdm9pZCBNYXRlcmlhbDo6bWFya1VwZGF0ZXMoVXBkYXRlRmxhZ3MgdXBkYXRlcykgewogICAgLy8gTWFyayB1cGRhdGVzIGxvY2FsbHkgaW4gdGhpcyBtYXRlcmlhbC4KICAgIG1VcGRhdGVzIHw9IHVwZGF0ZXM7CgogICAgLy8gTWFyayB1cGRhdGVzIGdsb2JhbGx5IGFjcm9zcyBhbGwgbWF0ZXJpYWxzLgogICAgaWYgKG1VcGRhdGVDYWxsYmFjaykgbVVwZGF0ZUNhbGxiYWNrKHVwZGF0ZXMpOwp9Cgp2b2lkIE1hdGVyaWFsOjp1cGRhdGVUZXh0dXJlSGFuZGxlKE1hdGVyaWFsU3lzdGVtKiBwT3duZXIsIGNvbnN0IFRleHR1cmU6OlNoYXJlZFB0ciYgcFRleHR1cmUsIFRleHR1cmVIYW5kbGUmIGhhbmRsZSkgewogICAgVGV4dHVyZUhhbmRsZSBwcmV2SGFuZGxlID0gaGFuZGxlOwoKICAgIC8vIFVwZGF0ZSB0aGUgZ2l2ZW4gdGV4dHVyZSBoYW5kbGUuCiAgICBpZiAocFRleHR1cmUpIHsKICAgICAgICBhdXRvIGggPSBwT3duZXItPnRleHR1cmVNYW5hZ2VyKCktPmFkZFRleHR1cmUocFRleHR1cmUpOwogICAgICAgIGFzc2VydChoKTsKICAgICAgICBoYW5kbGUuc2V0VGV4dHVyZUlEKGguZ2V0SUQoKSk7CiAgICAgICAgaWYgKHBUZXh0dXJlLT5pc1VESU1UZXh0dXJlKCkpIHsKICAgICAgICAgICAgaGFuZGxlLnNldE1vZGUoVGV4dHVyZUhhbmRsZTo6TW9kZTo6VURJTV9UZXh0dXJlKTsKICAgICAgICB9IGVsc2UgaWYgKHBUZXh0dXJlLT5pc1NwYXJzZSgpKSB7CiAgICAgICAgICAgIGhhbmRsZS5zZXRNb2RlKFRleHR1cmVIYW5kbGU6Ok1vZGU6OlZpcnR1YWwpOwogICAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgICAgaGFuZGxlLnNldE1vZGUoVGV4dHVyZUhhbmRsZTo6TW9kZTo6VW5pZm9ybSk7CiAgICB9CgogICAgaWYgKGhhbmRsZSAhPSBwcmV2SGFuZGxlKSBtVXBkYXRlcyB8PSBNYXRlcmlhbDo6VXBkYXRlRmxhZ3M6OkRhdGFDaGFuZ2VkOwp9Cgp2b2lkIE1hdGVyaWFsOjp1cGRhdGVUZXh0dXJlSGFuZGxlKE1hdGVyaWFsU3lzdGVtKiBwT3duZXIsIGNvbnN0IFRleHR1cmVTbG90IHNsb3QsIFRleHR1cmVIYW5kbGUmIGhhbmRsZSkgewogICAgYXV0byBwVGV4dHVyZSA9IGdldFRleHR1cmUoc2xvdCk7CiAgICB1cGRhdGVUZXh0dXJlSGFuZGxlKHBPd25lciwgcFRleHR1cmUsIGhhbmRsZSk7Cn07Cgp2b2lkIE1hdGVyaWFsOjp1cGRhdGVEZWZhdWx0VGV4dHVyZVNhbXBsZXJJRChNYXRlcmlhbFN5c3RlbSogcE93bmVyLCBjb25zdCBTYW1wbGVyOjpTaGFyZWRQdHImIHBTYW1wbGVyKSB7CiAgICBjb25zdCB1aW50MzJfdCBzYW1wbGVySUQgPSBwT3duZXItPmFkZFRleHR1cmVTYW1wbGVyKHBTYW1wbGVyKTsKCiAgICBpZiAobUhlYWRlci5nZXREZWZhdWx0VGV4dHVyZVNhbXBsZXJJRCgpICE9IHNhbXBsZXJJRCkgewogICAgICAgIG1IZWFkZXIuc2V0RGVmYXVsdFRleHR1cmVTYW1wbGVySUQoc2FtcGxlcklEKTsKICAgICAgICBtVXBkYXRlcyB8PSBNYXRlcmlhbDo6VXBkYXRlRmxhZ3M6OkRhdGFDaGFuZ2VkOwogICAgfQp9Cgpib29sIE1hdGVyaWFsOjppc0Jhc2VFcXVhbChjb25zdCBNYXRlcmlhbCYgb3RoZXIpIGNvbnN0IHsKICAgIC8vIFRoaXMgZnVuY3Rpb24gY29tcGFyZXMgYWxsIGRhdGEgaW4gdGhlIGJhc2UgY2xhc3MgYmV0d2VlbiB0d28gbWF0ZXJpYWxzICpleGNlcHQqIHRoZSBuYW1lLgogICAgLy8gSXQncyBhIHNlcGFyYXRlIGhlbHBlciB0byBlbnN1cmUgaXNFcXVhbCgpIGlzIHB1cmUgdmlydHVhbCBhbmQgbXVzdCBiZSBpbXBsZW1lbnRlZCBpbiBhbGwgZGVyaXZlZCBjbGFzc2VzLgoKICAgIGlmIChtSGVhZGVyICE9IG90aGVyLm1IZWFkZXIpIHJldHVybiBmYWxzZTsKICAgIGlmIChtVGV4dHVyZVRyYW5zZm9ybSAhPSBvdGhlci5tVGV4dHVyZVRyYW5zZm9ybSkgcmV0dXJuIGZhbHNlOwoKICAgIGFzc2VydChtVGV4dHVyZVNsb3RJbmZvLnNpemUoKSA9PSBtVGV4dHVyZVNsb3REYXRhLnNpemUoKSk7CiAgICBmb3IgKHNpemVfdCBpID0gMDsgaSA8IG1UZXh0dXJlU2xvdEluZm8uc2l6ZSgpOyBpKyspIHsKICAgICAgICAvLyBDb21wYXJlIHRleHR1cmUgc2xvdHMuCiAgICAgICAgLy8gVGhlc2UgY2hlY2tzIGFyZSBhIGJpdCByZWR1bmRhbnQgc2luY2UgaWRlbnRpY2FsIG1hdGVyaWFsIHR5cGVzIGFyZSBjdXJyZW50bHkKICAgICAgICAvLyBndWFyYW50ZWVkIHRvIGhhdmUgdGhlIHNhbWUgc2V0IG9mIHNsb3RzLCBidXQgdGhpcyBpcyBmdXR1cmUtcHJvb2YgaWYgdGhhdCBjaGFuZ2VzLgogICAgICAgIGF1dG8gc2xvdCA9IChUZXh0dXJlU2xvdClpOwogICAgICAgIGlmIChoYXNUZXh0dXJlU2xvdChzbG90KSAhPSBvdGhlci5oYXNUZXh0dXJlU2xvdChzbG90KSkgcmV0dXJuIGZhbHNlOwogICAgICAgIGlmIChoYXNUZXh0dXJlU2xvdChzbG90KSkgewogICAgICAgICAgICBpZiAobVRleHR1cmVTbG90SW5mb1tpXSAhPSBvdGhlci5tVGV4dHVyZVNsb3RJbmZvW2ldKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIGlmIChtVGV4dHVyZVNsb3REYXRhW2ldICE9IG90aGVyLm1UZXh0dXJlU2xvdERhdGFbaV0pIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CgogICAgcmV0dXJuIHRydWU7Cn0KCiNpZmRlZiBTQ1JJUFRJTkcKU0NSSVBUX0JJTkRJTkcoTWF0ZXJpYWwpIHsKICAgIFNDUklQVF9CSU5ESU5HX0RFUEVOREVOQ1koVHJhbnNmb3JtKQoKICAgIHB5YmluZDExOjplbnVtXzxNYXRlcmlhbFR5cGU+IG1hdGVyaWFsVHlwZShtLCAiTWF0ZXJpYWxUeXBlIik7CiAgICBtYXRlcmlhbFR5cGUudmFsdWUoIlN0YW5kYXJkIiwgTWF0ZXJpYWxUeXBlOjpTdGFuZGFyZCk7CiAgICBtYXRlcmlhbFR5cGUudmFsdWUoIkNsb3RoIiwgTWF0ZXJpYWxUeXBlOjpDbG90aCk7CiAgICBtYXRlcmlhbFR5cGUudmFsdWUoIkhhaXIiLCBNYXRlcmlhbFR5cGU6OkhhaXIpOwogICAgbWF0ZXJpYWxUeXBlLnZhbHVlKCJNRVJMIiwgTWF0ZXJpYWxUeXBlOjpNRVJMKTsKCiAgICBweWJpbmQxMTo6ZW51bV88QWxwaGFNb2RlPiBhbHBoYU1vZGUobSwgIkFscGhhTW9kZSIpOwogICAgYWxwaGFNb2RlLnZhbHVlKCJPcGFxdWUiLCBBbHBoYU1vZGU6Ok9wYXF1ZSk7CiAgICBhbHBoYU1vZGUudmFsdWUoIk1hc2siLCBBbHBoYU1vZGU6Ok1hc2spOwoKICAgIHB5YmluZDExOjplbnVtXzxNYXRlcmlhbDo6VGV4dHVyZVNsb3Q+IHRleHR1cmVTbG90KG0sICJNYXRlcmlhbFRleHR1cmVTbG90Iik7CiAgICB0ZXh0dXJlU2xvdC52YWx1ZSgiQmFzZUNvbG9yIiwgTWF0ZXJpYWw6OlRleHR1cmVTbG90OjpCYXNlQ29sb3IpOwogICAgdGV4dHVyZVNsb3QudmFsdWUoIlNwZWN1bGFyIiwgTWF0ZXJpYWw6OlRleHR1cmVTbG90OjpTcGVjdWxhcik7CiAgICB0ZXh0dXJlU2xvdC52YWx1ZSgiRW1pc3NpdmUiLCBNYXRlcmlhbDo6VGV4dHVyZVNsb3Q6OkVtaXNzaXZlKTsKICAgIHRleHR1cmVTbG90LnZhbHVlKCJOb3JtYWwiLCBNYXRlcmlhbDo6VGV4dHVyZVNsb3Q6Ok5vcm1hbCk7CiAgICB0ZXh0dXJlU2xvdC52YWx1ZSgiUm91Z2huZXNzIiwgTWF0ZXJpYWw6OlRleHR1cmVTbG90OjpSb3VnaG5lc3MpOwogICAgdGV4dHVyZVNsb3QudmFsdWUoIlRyYW5zbWlzc2lvbiIsIE1hdGVyaWFsOjpUZXh0dXJlU2xvdDo6VHJhbnNtaXNzaW9uKTsKICAgIHRleHR1cmVTbG90LnZhbHVlKCJEaXNwbGFjZW1lbnQiLCBNYXRlcmlhbDo6VGV4dHVyZVNsb3Q6OkRpc3BsYWNlbWVudCk7CgogICAgLy8gUmVnaXN0ZXIgTWF0ZXJpYWwgYmFzZSBjbGFzcyBhcyBJTWF0ZXJpYWwgaW4gcHl0aG9uIHRvIGFsbG93IGRlcHJlY2F0ZWQgc2NyaXB0IHN5bnRheC4KICAgIC8vIFRPRE86IFJlbW92ZSB3b3JrYXJvdW5kIHdoZW4gYWxsIHNjcmlwdHMgaGF2ZSBiZWVuIHVwZGF0ZWQgdG8gY3JlYXRlIGRlcml2ZWQgTWF0ZXJpYWwgY2xhc3Nlcy4KICAgIHB5YmluZDExOjpjbGFzc188TWF0ZXJpYWwsIE1hdGVyaWFsOjpTaGFyZWRQdHI+IG1hdGVyaWFsKG0sICJJTWF0ZXJpYWwiKTsgLy8gUFlUSE9OREVQUkVDQVRFRAogICAgbWF0ZXJpYWwuZGVmX3Byb3BlcnR5X3JlYWRvbmx5KCJ0eXBlIiwgJk1hdGVyaWFsOjpnZXRUeXBlKTsKICAgIG1hdGVyaWFsLmRlZl9wcm9wZXJ0eSgibmFtZSIsICZNYXRlcmlhbDo6Z2V0TmFtZSwgJk1hdGVyaWFsOjpzZXROYW1lKTsKICAgIG1hdGVyaWFsLmRlZl9wcm9wZXJ0eSgiZG91YmxlU2lkZWQiLCAmTWF0ZXJpYWw6OmlzRG91YmxlU2lkZWQsICZNYXRlcmlhbDo6c2V0RG91YmxlU2lkZWQpOwogICAgbWF0ZXJpYWwuZGVmX3Byb3BlcnR5KCJ0aGluU3VyZmFjZSIsICZNYXRlcmlhbDo6aXNUaGluU3VyZmFjZSwgJk1hdGVyaWFsOjpzZXRUaGluU3VyZmFjZSk7CiAgICBtYXRlcmlhbC5kZWZfcHJvcGVydHlfcmVhZG9ubHkoImVtaXNzaXZlIiwgJk1hdGVyaWFsOjppc0VtaXNzaXZlKTsKICAgIG1hdGVyaWFsLmRlZl9wcm9wZXJ0eSgiYWxwaGFNb2RlIiwgJk1hdGVyaWFsOjpnZXRBbHBoYU1vZGUsICZNYXRlcmlhbDo6c2V0QWxwaGFNb2RlKTsKICAgIG1hdGVyaWFsLmRlZl9wcm9wZXJ0eSgiYWxwaGFUaHJlc2hvbGQiLCAmTWF0ZXJpYWw6OmdldEFscGhhVGhyZXNob2xkLCAmTWF0ZXJpYWw6OnNldEFscGhhVGhyZXNob2xkKTsKICAgIG1hdGVyaWFsLmRlZl9wcm9wZXJ0eSgibmVzdGVkUHJpb3JpdHkiLCAmTWF0ZXJpYWw6OmdldE5lc3RlZFByaW9yaXR5LCAmTWF0ZXJpYWw6OnNldE5lc3RlZFByaW9yaXR5KTsKICAgIG1hdGVyaWFsLmRlZl9wcm9wZXJ0eSgidGV4dHVyZVRyYW5zZm9ybSIsIHB5YmluZDExOjpvdmVybG9hZF9jYXN0PHZvaWQ+KCZNYXRlcmlhbDo6Z2V0VGV4dHVyZVRyYW5zZm9ybSwgcHliaW5kMTE6OmNvbnN0XyksICZNYXRlcmlhbDo6c2V0VGV4dHVyZVRyYW5zZm9ybSk7CgogICAgbWF0ZXJpYWwuZGVmKCJsb2FkVGV4dHVyZSIsICZNYXRlcmlhbDo6bG9hZFRleHR1cmUsICJzbG90Il9hLCAicGF0aCJfYSwgInVzZVNyZ2IiX2EgPSB0cnVlKTsKICAgIG1hdGVyaWFsLmRlZigiY2xlYXJUZXh0dXJlIiwgJk1hdGVyaWFsOjpjbGVhclRleHR1cmUsICJzbG90Il9hKTsKfQojZW5kaWYKCn0gIC8vIG5hbWVzcGFjZSBGYWxjb3IKAAAAAAAAAADPVAAAAAAAAAAAAAAAAAAAAAAAAM9UAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACeHAAAAAAAAJ4cAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "/***************************************************************************\n # Copyright (c) 2015-22, NVIDIA CORPORATION. All rights reserved.\n #\n # Redistribution and use in source and binary forms, with or without\n # modification, are permitted provided that the following conditions\n # are met:\n #  * Redistributions of source code must retain the above copyright\n #    notice, this list of conditions and the following disclaimer.\n #  * Redistributions in binary form must reproduce the above copyright\n #    notice, this list of conditions and the following disclaimer in the\n #    documentation and/or other materials provided with the distribution.\n #  * Neither the name of NVIDIA CORPORATION nor the names of its\n #    contributors may be used to endorse or promote products derived\n #    from this software without specific prior written permission.\n #\n # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS \"AS IS\" AND ANY\n # EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n # PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n # CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n # EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n # PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n # PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n # OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n **************************************************************************/\n#ifndef SRC_FALCOR_SCENE_MATERIAL_MATERIALTEXTURELOADER_H_\n#define SRC_FALCOR_SCENE_MATERIAL_MATERIALTEXTURELOADER_H_\n\n#include \"Falcor.h\"\n#include \"Scene/Material/Material.h\"\n#include \"Utils/Image/TextureManager.h\"\n\nnamespace Falcor {\n\n/** Helper class to load material textures using the texture manager.\n\n\tCalling `loadTexture` does not assign the texture to the material right away.\n\tInstead, an asynchronous texture load request is issued and a reference for the\n\tmaterial assignment is stored. When the client destroys the instance of the\n\t`MaterialTextureLoader`, it blocks until all textures are loaded and assigns\n\tthem to the materials.\n*/\nclass MaterialTextureLoader {\n\tpublic:\n\t\tMaterialTextureLoader(const Device::SharedPtr& pDevice, bool useSrgb);\n\t\t~MaterialTextureLoader();\n\n\t\t/** Request loading a material texture.\n\t\t\t\\param[in] pMaterial Material to load texture into.\n\t\t\t\\param[in] slot Slot to load texture into.\n\t\t\t\\param[in] path Texture file path.\n\t\t*/\n\t\tbool loadTexture(const Material::SharedPtr& pMaterial, Material::TextureSlot slot, const fs::path& path, bool loadAsSparse = false);\n\n\tprivate:\n\t\tvoid assignTextures();\n\n\t\tstruct TextureAssignment {\n\t\t\tMaterial::SharedPtr pMaterial;\n\t\t\tMaterial::TextureSlot textureSlot;\n\t\t\tTextureManager::TextureHandle handle;\n\t\t};\n\n\t\tDevice::SharedPtr mpDevice = nullptr;\n\t\t\n\t\tbool mUseSrgb;\n\t\tstd::vector<TextureAssignment> mTextureAssignments;\n\t\tTextureManager::SharedPtr mpTextureManager;\n};\n\n}  // namespace Falcor\n\n#endif  // SRC_FALCOR_SCENE_MATERIAL_MATERIALTEXTURELOADER_H_",
			"file": "src/Falcor/Scene/Material/MaterialTextureLoader.h",
			"file_size": 3259,
			"file_write_time": 133341878442373986,
			"settings":
			{
				"buffer_size": 3259,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "bool"
					},
					"BQAAAIQKAAAAAAAAhQoAAAAAAAAAAAAAhQoAAAAAAACFCgAAAAAAAAQAAAB2b2lkhQoAAAAAAACGCgAAAAAAAAAAAACGCgAAAAAAAIcKAAAAAAAAAAAAAIcKAAAAAAAAiAoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIQKAAAAAAAAiAoAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"contents": "/***************************************************************************\n # Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.\n #\n # Redistribution and use in source and binary forms, with or without\n # modification, are permitted provided that the following conditions\n # are met:\n #  * Redistributions of source code must retain the above copyright\n #    notice, this list of conditions and the following disclaimer.\n #  * Redistributions in binary form must reproduce the above copyright\n #    notice, this list of conditions and the following disclaimer in the\n #    documentation and/or other materials provided with the distribution.\n #  * Neither the name of NVIDIA CORPORATION nor the names of its\n #    contributors may be used to endorse or promote products derived\n #    from this software without specific prior written permission.\n #\n # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\n # EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n # PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n # CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n # EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n # PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n # PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n # OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n **************************************************************************/\n#include <mutex>\n\n#ifdef _WIN32\n#include <filesystem>\nnamespace fs = std::filesystem;\n#else\n#include \"boost/filesystem.hpp\"\nnamespace fs = boost::filesystem;\n#endif\n\n#include \"stdafx.h\"\n#include \"SceneBuilder.h\"\n#include \"../Externals/mikktspace/mikktspace.h\"\n\n\nstd::mutex g_meshes_mutex;\nstd::mutex g_materials_mutex;\nstd::mutex g_buffers_mutex;\nstd::mutex g_buffers_indices_mutex;\nstd::mutex g_buffers_static_data_mutex;\nstd::mutex g_buffers_dynamic_data_mutex;\n\nnamespace Falcor {\n    \nnamespace {\n// Texture coordinates for textured emissive materials are quantized for performance reasons.\n// We'll log a warning if the maximum quantization error exceeds this value.\nconst float kMaxTexelError = 0.5f;\n\nclass MikkTSpaceWrapper\n{\npublic:\n    static std::vector<float4> generateTangents(const SceneBuilder::Mesh& mesh)\n    {\n        if (!mesh.normals.pData || !mesh.positions.pData || !mesh.texCrds.pData || !mesh.pIndices)\n        {\n            logWarning(\"Can't generate tangent space. The mesh '\" + std::string(mesh.name) + \"' doesn't have positions/normals/texCrd/indices.\");\n            return {};\n        }\n\n        // Generate new tangent space.\n        SMikkTSpaceInterface mikktspace = {};\n        mikktspace.m_getNumFaces = [](const SMikkTSpaceContext* pContext) { return ((MikkTSpaceWrapper*)(pContext->m_pUserData))->getFaceCount(); };\n        mikktspace.m_getNumVerticesOfFace = [](const SMikkTSpaceContext* pContext, int32_t face) { return 3; };\n        mikktspace.m_getPosition = [](const SMikkTSpaceContext* pContext, float position[], int32_t face, int32_t vert) { ((MikkTSpaceWrapper*)(pContext->m_pUserData))->getPosition(position, face, vert); };\n        mikktspace.m_getNormal = [](const SMikkTSpaceContext* pContext, float normal[], int32_t face, int32_t vert) { ((MikkTSpaceWrapper*)(pContext->m_pUserData))->getNormal(normal, face, vert); };\n        mikktspace.m_getTexCoord = [](const SMikkTSpaceContext* pContext, float texCrd[], int32_t face, int32_t vert) { ((MikkTSpaceWrapper*)(pContext->m_pUserData))->getTexCrd(texCrd, face, vert); };\n        mikktspace.m_setTSpaceBasic = [](const SMikkTSpaceContext* pContext, const float tangent[], float sign, int32_t face, int32_t vert) { ((MikkTSpaceWrapper*)(pContext->m_pUserData))->setTangent(tangent, sign, face, vert); };\n\n        MikkTSpaceWrapper wrapper(mesh);\n        SMikkTSpaceContext context = {};\n        context.m_pInterface = &mikktspace;\n        context.m_pUserData = &wrapper;\n\n        if (genTangSpaceDefault(&context) == false)\n        {\n            logError(\"Failed to generate MikkTSpace tangents for the mesh '\" + std::string(mesh.name) + \"'.\");\n            return {};\n        }\n\n        return wrapper.mTangents;\n    }\n\nprivate:\n    MikkTSpaceWrapper(const SceneBuilder::Mesh& mesh)\n        : mMesh(mesh)\n    {\n        assert(mesh.indexCount > 0);\n        mTangents.resize(mesh.indexCount, float4(0));\n    }\n    const SceneBuilder::Mesh& mMesh;\n    std::vector<float4> mTangents;\n    int32_t getFaceCount() const { return (int32_t)mMesh.faceCount; }\n    void getPosition(float position[], int32_t face, int32_t vert) { *reinterpret_cast<float3*>(position) = mMesh.getPosition(face, vert); }\n    void getNormal(float normal[], int32_t face, int32_t vert) { *reinterpret_cast<float3*>(normal) = mMesh.getNormal(face, vert); }\n    void getTexCrd(float texCrd[], int32_t face, int32_t vert) { *reinterpret_cast<float2*>(texCrd) = mMesh.getTexCrd(face, vert); }\n\n    void setTangent(const float tangent[], float sign, int32_t face, int32_t vert)\n    {\n        float3 T = *reinterpret_cast<const float3*>(tangent);\n        mTangents[face * 3 + vert] = float4(glm::normalize(T), sign);\n    }\n};\n\nvoid validateVertex(const SceneBuilder::Mesh::Vertex& v, size_t& invalidCount, size_t& zeroCount)\n{\n    auto isInvalid = [](const auto& x)\n    {\n        return glm::any(glm::isinf(x) || glm::isnan(x));\n    };\n    auto isZero = [](const auto& x)\n    {\n        return glm::length(x) < 1e-6f;\n    };\n\n    if (isInvalid(v.position) || isInvalid(v.normal) || isInvalid(v.tangent) || isInvalid(v.texCrd) || isInvalid(v.boneWeights)) invalidCount++;\n    if (isZero(v.normal) || isZero(v.tangent.xyz())) zeroCount++;\n}\n\nbool compareVertices(const SceneBuilder::Mesh::Vertex& lhs, const SceneBuilder::Mesh::Vertex& rhs, float threshold = 1e-6f)\n{\n    using namespace glm;\n    if (lhs.position != rhs.position) return false; // Position need to be exact to avoid cracks\n    if (lhs.tangent.w != rhs.tangent.w) return false;\n    if (lhs.boneIDs != rhs.boneIDs) return false;\n    if (any(greaterThan(abs(lhs.normal - rhs.normal), float3(threshold)))) return false;\n    if (any(greaterThan(abs(lhs.tangent.xyz - rhs.tangent.xyz), float3(threshold)))) return false;\n    if (any(greaterThan(abs(lhs.texCrd - rhs.texCrd), float2(threshold)))) return false;\n    if (any(greaterThan(abs(lhs.boneWeights - rhs.boneWeights), float4(threshold)))) return false;\n    return true;\n}\n\n}  // namespace anon\n\nSceneBuilder::SceneBuilder(std::shared_ptr<Device> pDevice, Flags flags) : mpDevice(pDevice), mFlags(flags) {};\n\nSceneBuilder::SharedPtr SceneBuilder::create(std::shared_ptr<Device> pDevice, Flags flags)\n{\n    return SharedPtr(new SceneBuilder(pDevice, flags));\n}\n\nSceneBuilder::SharedPtr SceneBuilder::create(std::shared_ptr<Device> pDevice, const std::string& filename, Flags buildFlags, const InstanceMatrices& instances)\n{\n    auto pBuilder = create(pDevice, buildFlags);\n    return pBuilder->import(filename, instances) ? pBuilder : nullptr;\n}\n\nbool SceneBuilder::import(const std::string& filename, const InstanceMatrices& instances, const Dictionary& dict) {\n    bool success = Importer::import(filename, *this, instances, dict);\n    mFilename = filename;\n    return success;\n}\n\nuint32_t SceneBuilder::addNode(const Node& node) {\n    assert(node.parent == kInvalidNode || node.parent < mSceneGraph.size());\n\n    assert(mSceneGraph.size() <= std::numeric_limits<uint32_t>::max());\n    uint32_t newNodeID = (uint32_t)mSceneGraph.size();\n    mSceneGraph.push_back(InternalNode(node));\n    if(node.parent != kInvalidNode) mSceneGraph[node.parent].children.push_back(newNodeID);\n    mDirty = true;\n    return newNodeID;\n}\n\nbool SceneBuilder::isNodeAnimated(uint32_t nodeID) const {\n    assert(nodeID < mSceneGraph.size());\n\n    while (nodeID != kInvalidNode) {\n        for (const auto& animation : mAnimations) {\n            if (animation->getChannel(nodeID) != Animation::kInvalidChannel) return true;\n        }\n        nodeID = mSceneGraph[nodeID].parent;\n    }\n\n    return false;\n}\n\nvoid SceneBuilder::setNodeInterpolationMode(uint32_t nodeID, Animation::InterpolationMode interpolationMode, bool enableWarping) {\n    assert(nodeID < mSceneGraph.size());\n\n    while (nodeID != kInvalidNode) {\n        for (const auto& animation : mAnimations) {\n            if (uint32_t channelID = animation->getChannel(nodeID); channelID != Animation::kInvalidChannel) {\n                animation->setInterpolationMode(channelID, interpolationMode, enableWarping);\n            }\n        }\n        nodeID = mSceneGraph[nodeID].parent;\n    }\n}\n\nvoid SceneBuilder::addMeshInstance(uint32_t nodeID, uint32_t meshID) {\n    assert(meshID < mMeshes.size());\n    mSceneGraph.at(nodeID).meshes.push_back(meshID);\n\n    auto &mesh = mMeshes.at(meshID);\n    mesh.instances.push_back({});\n\n    MeshInstanceSpec &instance = mesh.instances.back();\n    instance.nodeId = nodeID;\n    instance.overrideMaterial = false;\n\n    //mMeshes.at(meshID).instances.push_back(instance);\n    mDirty = true;\n}\n\nvoid SceneBuilder::addMeshInstance(uint32_t nodeID, uint32_t meshID, const Material::SharedPtr& pMaterial) {\n    assert(meshID < mMeshes.size());\n    mSceneGraph.at(nodeID).meshes.push_back(meshID);\n\n    auto &mesh = mMeshes.at(meshID);\n    mesh.instances.push_back({});\n\n    MeshInstanceSpec &instance = mesh.instances.back();\n    instance.nodeId = nodeID;\n    instance.materialId = addMaterial(pMaterial, is_set(mFlags, Flags::RemoveDuplicateMaterials));;\n    instance.overrideMaterial = true;\n\n    //mMeshes.at(meshID).instances.push_back(instance);\n    mDirty = true;\n}\n\nuint32_t SceneBuilder::addMesh(const Mesh& meshDesc) {\n    logInfo(\"Adding mesh '\" + meshDesc.name + \"'\");\n    TimeReport timeReport;\n\n    // Copy the mesh desc so we can update it. The caller retains the ownership of the data.\n    Mesh mesh = meshDesc;\n\n    // Error checking.\n    auto throw_on_missing_element = [&](const std::string& element) {\n        throw std::runtime_error(\"Error when adding the mesh '\" + mesh.name + \"' to the scene.\\nThe mesh is missing \" + element + \".\");\n    };\n\n    auto missing_element_warning = [&](const std::string& element) {\n        logWarning(\"The mesh '\" + mesh.name + \"' is missing the element \" + element + \". This is not an error, the element will be filled with zeros which may result in incorrect rendering.\");\n    };\n\n    if (mesh.topology != Vao::Topology::TriangleList) throw std::runtime_error(\"Error when adding the mesh '\" + mesh.name + \"' to the scene.\\nOnly triangle list topology is supported.\");\n    if (mesh.pMaterial == nullptr) throw_on_missing_element(\"material\");\n\n    if (mesh.faceCount == 0) throw_on_missing_element(\"faces\");\n    if (mesh.vertexCount == 0) throw_on_missing_element(\"vertices\");\n    if (mesh.indexCount == 0 || !mesh.pIndices) throw_on_missing_element(\"indices\");\n    if (mesh.indexCount != mesh.faceCount * 3) throw std::runtime_error(\"Error when adding the mesh '\" + mesh.name + \"' to the scene.\\nUnexpected face/vertex count.\");\n\n    if (mesh.positions.pData == nullptr) throw_on_missing_element(\"positions\");\n    if (mesh.normals.pData == nullptr) missing_element_warning(\"normals\");\n    if (mesh.texCrds.pData == nullptr) missing_element_warning(\"texture coordinates\");\n\n    if (mesh.hasBones()) {\n        if (mesh.boneIDs.pData == nullptr) throw_on_missing_element(\"bone IDs\");\n        if (mesh.boneWeights.pData == nullptr) throw_on_missing_element(\"bone weights\");\n    }\n\n    timeReport.measure(\"SceneBuilder::addMesh early checks\");\n\n    // Generate tangent space if that's required.\n#if 0\n    std::vector<float4> tangents;\n    if (!is_set(mFlags, Flags::UseOriginalTangentSpace) || !mesh.tangents.pData) {\n        tangents = MikkTSpaceWrapper::generateTangents(mesh);\n        if (!tangents.empty()) {\n            assert(tangents.size() == mesh.indexCount);\n            mesh.tangents.pData = tangents.data();\n            mesh.tangents.frequency = Mesh::AttributeFrequency::FaceVarying;\n        } else {\n            mesh.tangents.pData = nullptr;\n            mesh.tangents.frequency = Mesh::AttributeFrequency::None;\n        }\n    }\n#endif\n\n    timeReport.measure(\"SceneBuilder::addMesh tangent space generation\");\n\n    // Build new vertex/index buffers by merging identical vertices.\n    // The search is based on the topology defined by the original index buffer.\n    //\n    // A linked-list of vertices is built for each original vertex index.\n    // We iterate over all vertices and first check if a vertex is identical to any of the other vertices\n    // using the same original vertex index. If not, a new vertex is inserted and added to the list.\n    // The 'heads' array point to the first vertex in each list, and each vertex has an associated next-pointer.\n    // This ensures that adding to the linked lists do not require any dynamic memory allocation.\n    //\n    const uint32_t invalidIndex = 0xffffffff;\n    std::vector<std::pair<Mesh::Vertex, uint32_t>> vertices;\n    vertices.reserve(mesh.vertexCount);\n    std::vector<uint32_t> indices(mesh.indexCount);\n    std::vector<uint32_t> heads(mesh.vertexCount, invalidIndex);\n\n    for (uint32_t face = 0; face < mesh.faceCount; face++) {\n        for (uint32_t vert = 0; vert < 3; vert++) {\n            const Mesh::Vertex v = mesh.getVertex(face, vert);\n            const uint32_t origIndex = mesh.pIndices[face * 3 + vert];\n\n            // Iterate over vertex list to check if it already exists.\n            assert(origIndex < heads.size());\n            uint32_t index = heads[origIndex];\n            bool found = false;\n\n            while (index != invalidIndex) {\n                if (compareVertices(v, vertices[index].first)) {\n                    found = true;\n                    break;\n                }\n                index = vertices[index].second;\n            }\n\n            // Insert new vertex if we couldn't find it.\n            if (!found) {\n                assert(vertices.size() < std::numeric_limits<uint32_t>::max());\n                index = (uint32_t)vertices.size();\n                vertices.push_back({ v, heads[origIndex] });\n                heads[origIndex] = index;\n            }\n\n            // Store new vertex index.\n            indices[face * 3 + vert] = index;\n        }\n    }\n\n    timeReport.measure(\"SceneBuilder::addMesh new vertex/index buffer generation\");\n\n    assert(vertices.size() > 0);\n    assert(indices.size() == mesh.indexCount);\n    if (vertices.size() != mesh.vertexCount) {\n        logInfo(\"Mesh with name '\" + mesh.name + \"' had original vertex count \" + std::to_string(mesh.vertexCount) + \", new vertex count \" + std::to_string(vertices.size()));\n    }\n\n    // Validate vertex data to check for invalid numbers and missing tangent frame.\n    size_t invalidCount = 0;\n    size_t zeroCount = 0;\n    for (const auto& v : vertices) {\n        validateVertex(v.first, invalidCount, zeroCount);\n    }\n    if (invalidCount > 0) logWarning(\"The mesh '\" + mesh.name + \"' has inf/nan vertex attributes at \" + std::to_string(invalidCount) + \" vertices. Please fix the asset.\");\n    if (zeroCount > 0) logWarning(\"The mesh '\" + mesh.name + \"' has zero-length normals/tangents at \" + std::to_string(zeroCount) + \" vertices. Please fix the asset.\");\n\n    timeReport.measure(\"SceneBuilder::addMesh vertex data validation\");\n\n    // Match texture coordinate quantization for textured emissives to match PackedEmissiveTriangle.\n    // This is to avoid mismatch when sampling and evaluating emissive triangles.\n    if (mesh.pMaterial->getEmissiveTexture() != nullptr) {\n        float2 minTexCrd = float2(std::numeric_limits<float>::infinity());\n        float2 maxTexCrd = float2(-std::numeric_limits<float>::infinity());\n        float2 maxError = float2(0);\n\n        for (auto& v : vertices) {\n            float2 texCrd = v.first.texCrd;\n            minTexCrd = min(minTexCrd, texCrd);\n            maxTexCrd = max(maxTexCrd, texCrd);\n            v.first.texCrd = f16tof32(f32tof16(texCrd));\n            maxError = max(maxError, abs(v.first.texCrd - texCrd));\n        }\n\n        // Issue warning if quantization errors are too large.\n        float2 maxAbsCrd = max(abs(minTexCrd), abs(maxTexCrd));\n        if (maxAbsCrd.x > HLF_MAX || maxAbsCrd.y > HLF_MAX) {\n            logWarning(\"Texture coordinates for emissive textured mesh '\" + mesh.name + \"' are outside the representable range, expect rendering errors.\");\n        } else {\n            // Compute maximum quantization error in texels.\n            // The texcoords are used for all texture channels so taking the maximum dimensions.\n            uint2 maxTexDim = mesh.pMaterial->getMaxTextureDimensions();\n            maxError *= maxTexDim;\n            float maxTexelError = std::max(maxError.x, maxError.y);\n\n            if (maxTexelError > kMaxTexelError) {\n                std::ostringstream oss;\n                oss << \"Texture coordinates for emissive textured mesh '\" << mesh.name << \"' have a large quantization error of \" << maxTexelError << \" texels. \"\n                    << \"The coordinate range is [\" << minTexCrd.x << \", \" << maxTexCrd.x << \"] x [\" << minTexCrd.y << \", \" << maxTexCrd.y << \"] for maximum texture dimensions (\"\n                    << maxTexDim.x << \", \" << maxTexDim.y << \").\";\n                logWarning(oss.str());\n            }\n        }\n    }\n\n    timeReport.measure(\"SceneBuilder::addMesh texture coordinates quantization\");\n\n    // Add the mesh to the scene.\n    // If the non-indexed vertices build flag is set, we will de-index the data below.\n    const bool isIndexed = !is_set(mFlags, Flags::NonIndexedVertices);\n    const uint32_t outputVertexCount = isIndexed ? (uint32_t)vertices.size() : mesh.indexCount;\n\n\n    uint32_t ret = 0;\n    MeshSpec* spec;\n    \n    const std::lock_guard<std::mutex> lock(g_meshes_mutex);\n\n    mMeshes.push_back({});\n    spec = &mMeshes.back();\n\n    assert(mMeshes.size() <= std::numeric_limits<uint32_t>::max());\n    ret = (uint32_t)mMeshes.size() - 1;\n    \n    assert(mBuffersData.staticData.size() <= std::numeric_limits<uint32_t>::max() && mBuffersData.dynamicData.size() <= std::numeric_limits<uint32_t>::max() && mBuffersData.indices.size() <= std::numeric_limits<uint32_t>::max());\n    spec->staticVertexOffset = (uint32_t)mBuffersData.staticData.size();\n    spec->dynamicVertexOffset = (uint32_t)mBuffersData.dynamicData.size();\n    \n    if (isIndexed) {\n        spec->indexOffset = (uint32_t)mBuffersData.indices.size();\n        spec->indexCount = mesh.indexCount;\n    }\n\n    spec->vertexCount = outputVertexCount;\n    spec->topology = mesh.topology;\n    spec->materialId = addMaterial(mesh.pMaterial, is_set(mFlags, Flags::RemoveDuplicateMaterials));\n\n    if (mesh.hasBones()) {\n        spec->hasDynamicData = true;\n    }\n\n    // Copy indices into global index array.\n    if (isIndexed) {\n        mBuffersData.indices.insert(mBuffersData.indices.end(), indices.begin(), indices.end());\n    }\n\n    // Copy vertices into global vertex arrays.\n    \n    for (uint32_t i = 0; i < outputVertexCount; i++) {\n        uint32_t index = isIndexed ? i : indices[i];\n        assert(index < vertices.size());\n        const Mesh::Vertex& v = vertices[index].first;\n\n        StaticVertexData s;\n        s.position = v.position;\n        s.normal = v.normal;\n        s.texCrd = v.texCrd;\n        //s.tangent = v.tangent;\n\n        mBuffersData.staticData.push_back(PackedStaticVertexData(s));    \n\n        if (mesh.hasBones()) {\n            DynamicVertexData d;\n            d.boneWeight = v.boneWeights;\n            d.boneID = v.boneIDs;\n            d.staticIndex = (uint32_t)mBuffersData.staticData.size() - 1;\n            d.globalMatrixID = 0; // This will be initialized in createMeshData()\n            mBuffersData.dynamicData.push_back(d);\n        }\n    }\n\n    \n    mDirty = true;\n\n    timeReport.measure(\"SceneBuilder::addMesh final steps\");\n    timeReport.addTotal(\"SceneBuilder::addMesh done in\");\n    timeReport.printToLog();\n\n    logInfo(\"Mesh '\" + meshDesc.name + \"' added.\");\n    return ret;\n}\n\nuint32_t SceneBuilder::addMaterial(const Material::SharedPtr& pMaterial, bool removeDuplicate)\n{\n    assert(pMaterial);\n\n    const std::lock_guard<std::mutex> lock(g_materials_mutex);\n\n    // Reuse previously added materials\n    if (auto it = std::find(mMaterials.begin(), mMaterials.end(), pMaterial); it != mMaterials.end())\n    {\n        return (uint32_t)std::distance(mMaterials.begin(), it);\n    }\n\n    // Try to find previously added material with equal properties (duplicate)\n    if (auto it = std::find_if(mMaterials.begin(), mMaterials.end(), [&pMaterial] (const auto& m) { return *m == *pMaterial; }); it != mMaterials.end())\n    {\n        const auto& equalMaterial = *it;\n\n        // ASSIMP sometimes creates internal copies of a material: Always de-duplicate if name and properties are equal.\n        if (removeDuplicate || pMaterial->getName() == equalMaterial->getName())\n        {\n            return (uint32_t)std::distance(mMaterials.begin(), it);\n        }\n        else\n        {\n            logInfo(\"Material '\" + pMaterial->getName() + \"' is a duplicate (has equal properties) of material '\" + equalMaterial->getName() + \"'.\");\n        }\n    }\n\n    mDirty = true;\n    mMaterials.push_back(pMaterial);\n    assert(mMaterials.size() <= std::numeric_limits<uint32_t>::max());\n    return (uint32_t)mMaterials.size() - 1;\n}\n\nuint32_t SceneBuilder::addCamera(const Camera::SharedPtr& pCamera)\n{\n    assert(pCamera);\n    mCameras.push_back(pCamera);\n    mDirty = true;\n    assert(mCameras.size() <= std::numeric_limits<uint32_t>::max());\n    return (uint32_t)mCameras.size() - 1;\n}\n\nuint32_t SceneBuilder::addLight(const Light::SharedPtr& pLight)\n{\n    assert(pLight);\n    mLights.push_back(pLight);\n    mDirty = true;\n    assert(mLights.size() <= std::numeric_limits<uint32_t>::max());\n    return (uint32_t)mLights.size() - 1;\n}\n\nvoid SceneBuilder::setCamera(const std::string name)\n{\n    for (uint i = 0; i < mCameras.size(); i++)\n    {\n        if (mCameras[i]->getName() == name)\n        {\n            mSelectedCamera = i;\n            return;\n        }\n    }\n}\n\nVao::SharedPtr SceneBuilder::createVao(uint16_t drawCount)\n{\n    for (auto& mesh : mMeshes) assert(mesh.topology == mMeshes[0].topology);\n    const size_t vertexCount = (uint32_t)mBuffersData.staticData.size();\n    size_t ibSize = sizeof(uint32_t) * mBuffersData.indices.size();\n    size_t staticVbSize = sizeof(PackedStaticVertexData) * vertexCount;\n    size_t prevVbSize = sizeof(PrevVertexData) * vertexCount;\n    assert(ibSize <= std::numeric_limits<uint32_t>::max() && staticVbSize <= std::numeric_limits<uint32_t>::max() && prevVbSize <= std::numeric_limits<uint32_t>::max());\n\n    // Create the index buffer\n    Buffer::SharedPtr pIB = nullptr;\n    if (ibSize > 0)\n    {\n        ResourceBindFlags ibBindFlags = Resource::BindFlags::Index | ResourceBindFlags::ShaderResource;\n        pIB = Buffer::create(mpDevice, (uint32_t)ibSize, ibBindFlags, Buffer::CpuAccess::None, mBuffersData.indices.data());\n    }\n\n    // Create the vertex data as structured buffers\n    ResourceBindFlags vbBindFlags = ResourceBindFlags::ShaderResource | ResourceBindFlags::UnorderedAccess | ResourceBindFlags::Vertex;\n    Buffer::SharedPtr pStaticBuffer = Buffer::createStructured(mpDevice, sizeof(PackedStaticVertexData), (uint32_t)vertexCount, vbBindFlags, Buffer::CpuAccess::None, nullptr, false);\n    Buffer::SharedPtr pPrevBuffer = Buffer::createStructured(mpDevice, sizeof(PrevVertexData), (uint32_t)vertexCount, vbBindFlags, Buffer::CpuAccess::None, nullptr, false);\n\n    Vao::BufferVec pVBs(Scene::kVertexBufferCount);\n    pVBs[Scene::kStaticDataBufferIndex] = pStaticBuffer;\n    pVBs[Scene::kPrevVertexBufferIndex] = pPrevBuffer;\n    std::vector<uint16_t> drawIDs(drawCount);\n    for (uint32_t i = 0; i < drawCount; i++) drawIDs[i] = i;\n    pVBs[Scene::kDrawIdBufferIndex] = Buffer::create(mpDevice, drawCount * sizeof(uint16_t), ResourceBindFlags::Vertex, Buffer::CpuAccess::None, drawIDs.data());\n\n    // The layout only initializes the vertex data and draw ID layout. The skinning data doesn't get passed into the vertex shader.\n    VertexLayout::SharedPtr pLayout = VertexLayout::create();\n\n    // Add the packed static vertex data layout\n    VertexBufferLayout::SharedPtr pStaticLayout = VertexBufferLayout::create();\n    pStaticLayout->addElement(VERTEX_POSITION_NAME, offsetof(PackedStaticVertexData, position), ResourceFormat::RGB32Float, 1, VERTEX_POSITION_LOC);\n    pStaticLayout->addElement(VERTEX_PACKED_NORMAL_TANGENT_NAME, offsetof(PackedStaticVertexData, packedNormalTangent), ResourceFormat::RGB32Float, 1, VERTEX_PACKED_NORMAL_TANGENT_LOC);\n    pStaticLayout->addElement(VERTEX_TEXCOORD_NAME, offsetof(PackedStaticVertexData, texCrd), ResourceFormat::RG32Float, 1, VERTEX_TEXCOORD_LOC);\n    pLayout->addBufferLayout(Scene::kStaticDataBufferIndex, pStaticLayout);\n\n    // Add the previous vertex data layout\n    VertexBufferLayout::SharedPtr pPrevLayout = VertexBufferLayout::create();\n    pPrevLayout->addElement(VERTEX_PREV_POSITION_NAME, offsetof(PrevVertexData, position), ResourceFormat::RGB32Float, 1, VERTEX_PREV_POSITION_LOC);\n    pLayout->addBufferLayout(Scene::kPrevVertexBufferIndex, pPrevLayout);\n\n    // Add the draw ID layout\n    VertexBufferLayout::SharedPtr pInstLayout = VertexBufferLayout::create();\n    pInstLayout->addElement(INSTANCE_DRAW_ID_NAME, 0, ResourceFormat::R16Uint, 1, INSTANCE_DRAW_ID_LOC);\n    pInstLayout->setInputClass(VertexBufferLayout::InputClass::PerInstanceData, 1);\n    pLayout->addBufferLayout(Scene::kDrawIdBufferIndex, pInstLayout);\n\n    Vao::SharedPtr pVao = Vao::create(mMeshes[0].topology, pLayout, pVBs, pIB, ResourceFormat::R32Uint);\n    return pVao;\n}\n\nvoid SceneBuilder::createGlobalMatricesBuffer(Scene* pScene)\n{\n    pScene->mSceneGraph.resize(mSceneGraph.size());\n\n    for (size_t i = 0; i < mSceneGraph.size(); i++)\n    {\n        assert(mSceneGraph[i].parent <= std::numeric_limits<uint32_t>::max());\n        pScene->mSceneGraph[i] = Scene::Node(mSceneGraph[i].name, (uint32_t)mSceneGraph[i].parent, mSceneGraph[i].transform, mSceneGraph[i].localToBindPose);\n    }\n}\n\nuint32_t SceneBuilder::createMeshData(Scene* pScene)\n{\n    auto& meshData = pScene->mMeshDesc;\n    auto& instanceData = pScene->mMeshInstanceData;\n    meshData.resize(mMeshes.size());\n    pScene->mMeshHasDynamicData.resize(mMeshes.size());\n\n    size_t drawCount = 0;\n    for (uint32_t meshID = 0; meshID < mMeshes.size(); meshID++)\n    {\n        // Mesh data\n        const auto& mesh = mMeshes[meshID];\n        meshData[meshID].materialID = mesh.materialId;\n        meshData[meshID].vbOffset = mesh.staticVertexOffset;\n        meshData[meshID].ibOffset = mesh.indexOffset;\n        meshData[meshID].vertexCount = mesh.vertexCount;\n        meshData[meshID].indexCount = mesh.indexCount;\n\n        drawCount += mesh.instances.size();\n\n        // Mesh instance data\n        for (const auto& instance : mesh.instances)\n        {\n            instanceData.push_back({});\n            auto& meshInstance = instanceData.back();\n            meshInstance.globalMatrixID = instance.nodeId;\n            meshInstance.materialID = instance.overrideMaterial ? instance.materialId : mesh.materialId;\n            meshInstance.meshID = meshID;\n            meshInstance.vbOffset = mesh.staticVertexOffset;\n            meshInstance.ibOffset = mesh.indexOffset;\n        }\n\n        if (mesh.hasDynamicData)\n        {\n            assert(mesh.instances.size() == 1);\n            pScene->mMeshHasDynamicData[meshID] = true;\n\n            for (uint32_t i = 0; i < mesh.vertexCount; i++)\n            {\n                mBuffersData.dynamicData[mesh.dynamicVertexOffset + i].globalMatrixID = (uint32_t)mesh.instances[0].nodeId;\n            }\n        }\n    }\n    assert(drawCount <= std::numeric_limits<uint32_t>::max());\n    return (uint32_t)drawCount;\n}\n\nScene::SharedPtr SceneBuilder::getScene()\n{\n    // We cache the scene because creating it is not cheap.\n    // With the PythonImporter, the scene is fetched twice, once for running\n    // the scene script and another time when the scene has finished loading.\n    if (mpScene && !mDirty)\n    {\n        // PythonImporter sets the filename after loading the nested scene,\n        // so we need to set it to the correct value here.\n        mpScene->mFilename = mFilename;\n        return mpScene;\n    }\n\n    if (mMeshes.size() == 0)\n    {\n        logError(\"Can't build scene. No meshes were loaded\");\n        return nullptr;\n    }\n\n    TimeReport timeReport;\n    LOG_DBG(\"getScene timeReport\");\n\n    mpScene = Scene::create(mpDevice);\n    timeReport.measure(\"getScene Scene::create\");\n    \n    mpScene->mCameras = mCameras;\n    mpScene->mSelectedCamera = mSelectedCamera;\n    mpScene->mCameraSpeed = mCameraSpeed;\n    mpScene->mLights = mLights;\n    mpScene->mMaterials = mMaterials;\n    mpScene->mpLightProbe = mpLightProbe;\n    mpScene->mpEnvMap = mpEnvMap;\n    mpScene->mFilename = mFilename;\n\n    createGlobalMatricesBuffer(mpScene.get());\n    timeReport.measure(\"getScene createGlobalMatricesBuffer\");\n\n    uint32_t drawCount = createMeshData(mpScene.get());\n    timeReport.measure(\"getScene createMeshData\");\n\n    assert(drawCount <= std::numeric_limits<uint16_t>::max());\n    mpScene->mpVao = createVao(drawCount);\n    timeReport.measure(\"getScene createVao\");\n\n    calculateMeshBoundingBoxes(mpScene.get());\n    timeReport.measure(\"getScene calculateMeshBoundingBoxes\");\n\n    createAnimationController(mpScene.get());\n    timeReport.measure(\"getScene createAnimationController\");\n\n    mpScene->finalize();\n    timeReport.measure(\"getScene finalize mpScene\");\n    mDirty = false;\n\n    timeReport.addTotal(\"getScene done in\");\n    timeReport.printToLog();\n\n    return mpScene;\n}\n\nvoid SceneBuilder::calculateMeshBoundingBoxes(Scene* pScene)\n{\n    // Calculate mesh bounding boxes\n    pScene->mMeshBBs.resize(mMeshes.size());\n    for (size_t i = 0; i < mMeshes.size(); i++)\n    {\n        const auto& mesh = mMeshes[i];\n        float3 boxMin(FLT_MAX);\n        float3 boxMax(-FLT_MAX);\n\n        const auto* staticData = &mBuffersData.staticData[mesh.staticVertexOffset];\n        for (uint32_t v = 0; v < mesh.vertexCount; v++)\n        {\n            boxMin = glm::min(boxMin, staticData[v].position);\n            boxMax = glm::max(boxMax, staticData[v].position);\n        }\n\n        pScene->mMeshBBs[i] = BoundingBox::fromMinMax(boxMin, boxMax);\n    }\n}\n\nvoid SceneBuilder::addAnimation(const Animation::SharedPtr& pAnimation)\n{\n    mAnimations.push_back(pAnimation);\n    mDirty = true;\n}\n\nvoid SceneBuilder::createAnimationController(Scene* pScene)\n{\n    pScene->mpAnimationController = AnimationController::create(pScene, mBuffersData.staticData, mBuffersData.dynamicData);\n    for (const auto& pAnim : mAnimations)\n    {\n        pScene->mpAnimationController->addAnimation(pAnim);\n    }\n}\n\nSCRIPT_BINDING(SceneBuilder)\n{\n    pybind11::enum_<SceneBuilder::Flags> flags(m, \"SceneBuilderFlags\");\n    flags.value(\"Default\", SceneBuilder::Flags::Default);\n    flags.value(\"RemoveDuplicateMaterials\", SceneBuilder::Flags::RemoveDuplicateMaterials);\n    flags.value(\"UseOriginalTangentSpace\", SceneBuilder::Flags::UseOriginalTangentSpace);\n    flags.value(\"AssumeLinearSpaceTextures\", SceneBuilder::Flags::AssumeLinearSpaceTextures);\n    flags.value(\"DontMergeMeshes\", SceneBuilder::Flags::DontMergeMeshes);\n    flags.value(\"BuffersAsShaderResource\", SceneBuilder::Flags::BuffersAsShaderResource);\n    flags.value(\"UseSpecGlossMaterials\", SceneBuilder::Flags::UseSpecGlossMaterials);\n    flags.value(\"UseMetalRoughMaterials\", SceneBuilder::Flags::UseMetalRoughMaterials);\n    flags.value(\"NonIndexedVertices\", SceneBuilder::Flags::NonIndexedVertices);\n    ScriptBindings::addEnumBinaryOperators(flags);\n}\n\n}  // namespace Falcor\n",
			"file": "src/Falcor/Scene/SceneBuilder.cpp",
			"file_size": 31975,
			"file_write_time": 133352798597027383,
			"settings":
			{
				"buffer_size": 31975,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/***************************************************************************\n # Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.\n #\n # Redistribution and use in source and binary forms, with or without\n # modification, are permitted provided that the following conditions\n # are met:\n #  * Redistributions of source code must retain the above copyright\n #    notice, this list of conditions and the following disclaimer.\n #  * Redistributions in binary form must reproduce the above copyright\n #    notice, this list of conditions and the following disclaimer in the\n #    documentation and/or other materials provided with the distribution.\n #  * Neither the name of NVIDIA CORPORATION nor the names of its\n #    contributors may be used to endorse or promote products derived\n #    from this software without specific prior written permission.\n #\n # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\n # EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n # PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n # CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n # EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n # PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n # PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n # OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n **************************************************************************/\n#ifndef SRC_FALCOR_SCENE_SCENEBUILDER_H_\n#define SRC_FALCOR_SCENE_SCENEBUILDER_H_\n\n#include <map>\n\n#include \"Scene.h\"\n#include \"VertexAttrib.slangh\"\n\n\nnamespace Falcor {\n\nclass Device;\n\nclass dlldecl SceneBuilder {\n public:\n    using SharedPtr = std::shared_ptr<SceneBuilder>;\n\n    /** Flags that control how the scene will be built. They can be combined together.\n    */\n    enum class Flags {\n        None                        = 0x0,    ///< None\n        RemoveDuplicateMaterials    = 0x1,    ///< Deduplicate materials that have the same properties. The material name is ignored during the search.\n        UseOriginalTangentSpace     = 0x2,    ///< Use the original tangent space that was loaded with the mesh. By default, we will ignore it and use MikkTSpace to generate the tangent space. We will always generate tangent space if it is missing.\n        AssumeLinearSpaceTextures   = 0x4,    ///< By default, textures representing colors (diffuse/specular) are interpreted as sRGB data. Use this flag to force linear space for color textures.\n        DontMergeMeshes             = 0x8,    ///< Preserve the original list of meshes in the scene, don't merge meshes with the same material.\n        BuffersAsShaderResource     = 0x10,   ///< Generate the VBs and IB with the shader-resource-view bind flag.\n        UseSpecGlossMaterials       = 0x20,   ///< Set materials to use Spec-Gloss shading model. Otherwise default is Spec-Gloss for OBJ, Metal-Rough for everything else.\n        UseMetalRoughMaterials      = 0x40,   ///< Set materials to use Metal-Rough shading model. Otherwise default is Spec-Gloss for OBJ, Metal-Rough for everything else.\n        NonIndexedVertices          = 0x80,   ///< Convert meshes to use non-indexed vertices. This requires more memory but may increase performance.\n\n        Default = None\n    };\n\n    /** Mesh description\n    */\n    struct Mesh {\n        //Mesh(const Mesh&) = delete;//{ std::cout << \"A copy was made.\\n\"; }\n        enum class AttributeFrequency {\n            None,\n            Constant,       ///< Constant value for mesh. The element count must be 1.\n            Uniform,        ///< One value per face. The element count must match `faceCount`.\n            Vertex,         ///< One value per vertex. The element count must match `vertexCount`.\n            FaceVarying,    ///< One value per vertex per face. The element count must match `indexCount`.\n        };\n\n        template<typename T>\n        struct Attribute {\n            const T* pData = nullptr;\n            AttributeFrequency frequency = AttributeFrequency::None;\n        };\n\n        std::string name;                           ///< The mesh's name.\n        uint32_t faceCount = 0;                     ///< The number of primitives the mesh has.\n        uint32_t vertexCount = 0;                   ///< The number of vertices the mesh has.\n        uint32_t indexCount = 0;                    ///< The number of indices the mesh has.\n        const uint32_t* pIndices = nullptr;         ///< Array of indices. The element count must match `indexCount`. This field is required.\n        Vao::Topology topology = Vao::Topology::Undefined; ///< The primitive topology of the mesh\n        Material::SharedPtr pMaterial;              ///< The mesh's material. Can't be nullptr.\n\n        Attribute<float3> positions;                ///< Array of vertex positions. This field is required.\n        Attribute<float3> normals;                  ///< Array of vertex normals. This field is required.\n        Attribute<float4> tangents;                 ///< Array of vertex tangents. This field is optional. If set to nullptr, or if BuildFlags::UseOriginalTangentSpace is not set, the tangent space will be generated using MikkTSpace.\n        Attribute<float2> texCrds;                  ///< Array of vertex texture coordinates. This field is optional. If set to nullptr, all texCrds will be set to (0,0).\n        Attribute<uint4> boneIDs;                   ///< Array of bone IDs. This field is optional. If it's set, that means that the mesh is animated, in which case boneWeights is required.\n        Attribute<float4> boneWeights;              ///< Array of bone weights. This field is optional. If it's set, that means that the mesh is animated, in which case boneIDs is required.\n\n        template<typename T>\n        T get(const Attribute<T>& attribute, uint32_t face, uint32_t vert) const\n        {\n            if (attribute.pData)\n            {\n                switch (attribute.frequency)\n                {\n                case AttributeFrequency::Constant:\n                    return attribute.pData[0];\n                case AttributeFrequency::Uniform:\n                    return attribute.pData[face];\n                case AttributeFrequency::Vertex:\n                    return attribute.pData[pIndices[face * 3 + vert]];\n                case AttributeFrequency::FaceVarying:\n                    return attribute.pData[face * 3 + vert];\n                default:\n                    should_not_get_here();\n                }\n            }\n            return T{};\n        }\n\n        float3 getPosition(uint32_t face, uint32_t vert) const { return get(positions, face, vert); }\n        float3 getNormal(uint32_t face, uint32_t vert) const { return get(normals, face, vert); }\n        float4 getTangent(uint32_t face, uint32_t vert) const { return get(tangents, face, vert); }\n        float2 getTexCrd(uint32_t face, uint32_t vert) const { return get(texCrds, face, vert); }\n\n        struct Vertex {\n            float3 position;\n            float3 normal;\n            float4 tangent;\n            float2 texCrd;\n            uint4 boneIDs;\n            float4 boneWeights;\n        };\n\n        Vertex getVertex(uint32_t face, uint32_t vert) const {\n            Vertex v = {};\n            v.position = get(positions, face, vert);\n            v.normal = get(normals, face, vert);\n            v.tangent = get(tangents, face, vert);\n            v.texCrd = get(texCrds, face, vert);\n            v.boneIDs = get(boneIDs, face, vert);\n            v.boneWeights = get(boneWeights, face, vert);\n            return v;\n        }\n\n        bool hasBones() const {\n            return boneWeights.pData || boneIDs.pData;\n        }\n    };\n\n    static const uint32_t kInvalidNode = Scene::kInvalidNode;\n\n    struct Node {\n        std::string name;\n        glm::mat4 transform;\n        glm::mat4 localToBindPose;   // For bones\n        uint32_t parent = kInvalidNode;\n    };\n\n    using InstanceMatrices = std::vector<glm::mat4>;\n\n    std::shared_ptr<Device> device() { return mpDevice; };\n    std::shared_ptr<Device> device() const { return mpDevice; };\n\n    /** Create a new object\n    */\n    static SharedPtr create(std::shared_ptr<Device> pDevice, Flags mFlags = Flags::Default);\n\n    /** Create a new builder and import a scene/model file\n        \\param filename The filename to load\n        \\param flags The build flags\n        \\param instances A list of instance matrices to load. This is optional, by default a single instance will be load\n        \\return A new object with the imported file already initialized. If an import error occurred, a nullptr will be returned\n    */\n    static SharedPtr create(std::shared_ptr<Device> pDevice, const std::string& filename, Flags buildFlags = Flags::Default, const InstanceMatrices& instances = InstanceMatrices());\n\n    /** Import a scene/model file\n        \\param filename The filename to load\n        \\param instances A list of instance matrices to load. This is optional, by default a single instance will be load\n        \\return true if the import succeeded, otherwise false\n    */\n    bool import(const std::string& filename, const InstanceMatrices& instances = InstanceMatrices(), const Dictionary& dict = Dictionary());\n\n    /** Get the scene. Make sure to add all the objects before calling this function\n        \\return nullptr if something went wrong, otherwise a new Scene object\n    */\n    Scene::SharedPtr getScene();\n\n    /** Adds a node to the graph.\n        Note that if the node contains data other then the transform matrix (such as meshes or lights), you'll need to add those objects before adding the node.\n        \\return The node ID.\n    */\n    uint32_t addNode(const Node& node);\n\n    /** Check if a scene node is animated. This check is done recursively through parent nodes.\n        \\return Returns true if node is animated.\n    */\n    bool isNodeAnimated(uint32_t nodeID) const;\n\n    /** Set the animation interpolation mode for a given scene node. This sets the mode recursively for all parent nodes.\n    */\n    void setNodeInterpolationMode(uint32_t nodeID, Animation::InterpolationMode interpolationMode, bool enableWarping);\n\n    /** Add a mesh instance to a node\n    */\n    void addMeshInstance(uint32_t nodeID, uint32_t meshID);\n\n    /** Add a mesh instance to a node\n    */\n    void addMeshInstance(uint32_t nodeID, uint32_t meshID, const Material::SharedPtr& pMaterial);\n\n    /** Add a mesh. This function will throw an exception if something went wrong.\n        \\param meshDesc The mesh's description.\n        \\return The ID of the mesh in the scene. Note that all of the instances share the same mesh ID.\n    */\n    uint32_t addMesh(const Mesh& meshDesc);\n\n    /** Add a light source\n        \\param pLight The light object.\n        \\return The light ID\n    */\n    uint32_t addLight(const Light::SharedPtr& pLight);\n\n    /** Get the number of attached lights\n    */\n    size_t getLightCount() const { return mLights.size(); }\n\n    /** Set a light-probe\n        \\param pProbe The environment map. You can set it to null to disable environment mapping\n    */\n    void setLightProbe(const LightProbe::SharedPtr& pProbe) { mpLightProbe = pProbe; }\n\n    /** Get a light-probe\n    */\n    LightProbe::SharedPtr getLightProbe() const { return mpLightProbe; }\n\n    /** Set an environment map.\n        \\param[in] pEnvMap Environment map. Can be nullptr.\n    */\n    void setEnvMap(EnvMap::SharedPtr pEnvMap) { mpEnvMap = pEnvMap; }\n\n    /** Add a camera.\n        \\param pCamera Camera to be added.\n        \\return The camera ID\n    */\n    uint32_t addCamera(const Camera::SharedPtr& pCamera);\n\n    /** Get the number of attached cameras\n    */\n    size_t getCameraCount() const { return mCameras.size(); }\n\n    /** Select a camera.\n        \\param name The name of the camera to select.\n    */\n    void setCamera(const std::string name);\n\n    /** Get the build flags\n    */\n    Flags getFlags() const { return mFlags; }\n\n    /** Add an animation\n        \\param animation The animation\n    */\n    void addAnimation(const Animation::SharedPtr& pAnimation);\n\n    /** Set the camera's speed\n    */\n    void setCameraSpeed(float speed) { mCameraSpeed = speed; }\n\nprotected:\n    SceneBuilder(std::shared_ptr<Device> pDevice, Flags buildFlags);\n\n    struct InternalNode : Node {\n        InternalNode() = default;\n        InternalNode(const Node& n) : Node(n) {}\n        std::vector<uint32_t> children;\n        std::vector<uint32_t> meshes;\n    };\n\n    struct MeshInstanceSpec {\n        uint32_t    nodeId;\n        uint32_t    materialId;\n        bool        overrideMaterial = false;\n    };\n\n    struct MeshSpec {\n        MeshSpec() = default;\n        Vao::Topology topology;\n        uint32_t materialId = 0;\n        uint32_t indexOffset = 0;\n        uint32_t staticVertexOffset = 0;\n        uint32_t dynamicVertexOffset = 0;\n        uint32_t indexCount = 0;\n        uint32_t vertexCount = 0;\n        bool hasDynamicData = false;\n        //std::vector<uint32_t> instances; // Node IDs\n        std::vector<MeshInstanceSpec> instances;\n    };\n\n    // Geometry data\n    struct BuffersData {\n        std::vector<uint32_t> indices;\n        std::vector<PackedStaticVertexData> staticData;\n        std::vector<DynamicVertexData> dynamicData;\n    } mBuffersData;\n\n    using SceneGraph = std::vector<InternalNode>;\n    using MeshList = std::vector<MeshSpec>;\n\n    bool mDirty = true;\n\n    std::shared_ptr<Device> mpDevice;\n    Scene::SharedPtr mpScene;\n\n    SceneGraph mSceneGraph;\n    const Flags mFlags;\n\n    MeshList mMeshes;\n    std::vector<Material::SharedPtr> mMaterials;\n    std::unordered_map<const Material*, uint32_t> mMaterialToId;\n\n    std::vector<Camera::SharedPtr> mCameras;\n    std::vector<Light::SharedPtr> mLights;\n    LightProbe::SharedPtr mpLightProbe = nullptr;\n    EnvMap::SharedPtr mpEnvMap;\n    std::vector<Animation::SharedPtr> mAnimations;\n    uint32_t mSelectedCamera = 0;\n    float mCameraSpeed = 1.0f;\n\n    uint32_t addMaterial(const Material::SharedPtr& pMaterial, bool removeDuplicate);\n    Vao::SharedPtr createVao(uint16_t drawCount);\n\n    uint32_t createMeshData(Scene* pScene);\n    void createGlobalMatricesBuffer(Scene* pScene);\n    void calculateMeshBoundingBoxes(Scene* pScene);\n    void createAnimationController(Scene* pScene);\n    std::string mFilename;\n};\n\nenum_class_operators(SceneBuilder::Flags);\n\n}  // namespace Falcor\n\n#endif  // SRC_FALCOR_SCENE_SCENEBUILDER_H_\n",
			"file": "src/Falcor/Scene/SceneBuilder.h",
			"file_size": 14672,
			"file_write_time": 133352798597027383,
			"settings":
			{
				"buffer_size": 14672,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": "bii"
					},
					"BAAAAL1eAAAAAAAAvl4AAAAAAAAAAAAAvl4AAAAAAAC+XgAAAAAAAAQAAAB2b2lkvl4AAAAAAAC/XgAAAAAAAAAAAAC/XgAAAAAAAMBeAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL1eAAAAAAAAwV4AAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					2,
					"left_delete",
					null,
					"AgAAAL9eAAAAAAAAv14AAAAAAAABAAAAab5eAAAAAAAAvl4AAAAAAAABAAAAaQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMBeAAAAAAAAwF4AAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "ool"
					},
					"AwAAAL5eAAAAAAAAv14AAAAAAAAAAAAAv14AAAAAAADAXgAAAAAAAAAAAADAXgAAAAAAAMFeAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL5eAAAAAAAAvl4AAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBXgAAAAAAAMFeAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "#include <utility>\n#include <mutex>\n\n#include \"Falcor/Core/API/Texture.h\"\n#include \"Falcor/Scene/Lights/LightProbe.h\"\n#include \"Falcor/Scene/Lights/Light.h\"\n\n#include \"session.h\"\n\n#include \"../display.h\"\n#include \"../scene_builder.h\" \n\n#include \"lava_utils_lib/ut_fsys.h\"\n#include \"lava_utils_lib/ut_string.h\"\n#include \"lava_utils_lib/logging.h\"\n\n\nnamespace lava {\n\nnamespace lsd {\n\nusing DisplayType = Display::DisplayType;\n\nDisplayType resolveDisplayTypeByFileName(const std::string& file_name) {\n\tstd::string ext = ut::fsys::getFileExtension(file_name);\n\n    if( ext == \".exr\" ) return DisplayType::OPENEXR;\n    if( ext == \".jpg\" ) return DisplayType::JPEG;\n    if( ext == \".jpeg\" ) return DisplayType::JPEG;\n    if( ext == \".png\" ) return DisplayType::PNG;\n    if( ext == \".tif\" ) return DisplayType::TIFF;\n    if( ext == \".tiff\" ) return DisplayType::TIFF;\n    return DisplayType::OPENEXR;\n}\n\nSession::UniquePtr Session::create(std::unique_ptr<RendererIface> pRendererIface) {\n\tauto pSession = Session::UniquePtr(new Session(std::move(pRendererIface)));\n\tauto pGlobal = scope::Global::create();\n\tif (!pGlobal) {\n\t\treturn nullptr;\n\t}\n\n\tpSession->mpGlobal = pGlobal;\n\tpSession->mpCurrentScope = pGlobal;\n\n\treturn std::move(pSession);\n}\n\nSession::Session(std::unique_ptr<RendererIface> pRendererIface):mFirstRun(true) { \n\tmpRendererIface = std::move(pRendererIface);\n}\n\nSession::~Session() {\n\tLLOG_DBG << \"Session::~Session\";\n\tmpRendererIface.reset(nullptr);\n\tLLOG_DBG << \"Session::~Session done\";\n}\n\nvoid Session::cmdSetEnv(const std::string& key, const std::string& value) {\n\tmpRendererIface->setEnvVariable(key, value);\n}\n\nvoid Session::cmdConfig(const std::string& file_name) {\n\t// actual render graph configs loading postponed unitl renderer is initialized\n\tmpRendererIface->loadDeferredScriptFile(file_name);\n}\n\nstd::string Session::getExpandedString(const std::string& str) {\n\treturn mpRendererIface->getExpandedString(str);\n}\n\nvoid Session::cmdImage(lsd::ast::DisplayType display_type, const std::string& filename) {\n\tLLOG_DBG << \"cmdImage\";\n\tmFrameData.imageFileName = filename;\n    mDisplayData.displayType = display_type;\n}\n\n// initialize frame independet render data\nbool Session::prepareDisplayData() {\n\tLLOG_DBG << \"prepareDisplayData\";\n\n\t// prepare display driver parameters\n\tauto& props_container = mpGlobal->filterProperties(ast::Style::PLANE, std::regex(\"^IPlay\\\\.[a-zA-Z]*\"));\n\tfor( auto const& item: props_container.properties()) {\n\t\tLLOG_DBG << \"Display property: \" << to_string(item.first);\n\n\t\tconst std::string& parm_name = item.first.second.substr(6); // remove leading \"IPlay.\"\n\t\tconst Property& prop = item.second;\n\t\tswitch(item.second.type()) {\n\t\t\tcase ast::Type::FLOAT:\n\t\t\t\t//LLOG_DBG << \"type: \" << to_string(prop.type()) << \" value: \" << to_string(prop.value());\n\t\t\t\tmDisplayData.displayFloatParameters.push_back(std::pair<std::string, std::vector<float>>( parm_name, {prop.get<float>()} ));\n\t\t\t\tbreak;\n\t\t\tcase ast::Type::INT:\n\t\t\t\tmDisplayData.displayIntParameters.push_back(std::pair<std::string, std::vector<int>>( parm_name, {prop.get<int>()} ));\n\t\t\t\tbreak;\n\t\t\tcase ast::Type::STRING:\n\t\t\t\tmDisplayData.displayStringParameters.push_back(std::pair<std::string, std::vector<std::string>>( parm_name, {prop.get<std::string>()} ));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n// initialize frame dependet render data\nbool Session::prepareFrameData() {\n\tLLOG_DBG << \"prepareFrameData\";\n\tif(!mpRendererIface->initRenderer()) return false;\n\n\t// set up frame resolution (as they don't have to be the same size)\n\tInt2 resolution = mpGlobal->getPropertyValue(ast::Style::IMAGE, \"resolution\", Int2{640, 480});\n\tmFrameData.imageWidth = resolution[0];\n\tmFrameData.imageHeight = resolution[1];\n\n\t// set up camera data\n\tVector2 camera_clip = mpGlobal->getPropertyValue(ast::Style::CAMERA, \"clip\", Vector2{0.01, 1000.0});\n\t\n\tmFrameData.cameraNearPlane = camera_clip[0];\n\tmFrameData.cameraFarPlane  = camera_clip[1];\n\tmFrameData.cameraProjectionName = mpGlobal->getPropertyValue(ast::Style::CAMERA, \"projection\", std::string(\"perspective\"));\n\tmFrameData.cameraTransform = mpGlobal->getTransformList()[0];\n\n\tconst auto& segments = mpGlobal->segments();\n\tif(segments.size()) {\n\t\tconst auto& pSegment = segments[0];\n\t\tmFrameData.cameraFocalLength = 50.0 * pSegment->getPropertyValue(ast::Style::CAMERA, \"zoom\", (double)1.0);\n\t\t\n\t\tdouble height_k = static_cast<double>(mFrameData.imageHeight) / static_cast<double>(mFrameData.imageWidth);\n\t\tmFrameData.cameraFrameHeight = height_k * 50.0;\n\t}\n\n\tmFrameData.imageSamples = mpGlobal->getPropertyValue(ast::Style::IMAGE, \"samples\", 1);\n\n\treturn true;\n}\n\n\nbool Session::cmdRaytrace() {\n\tLLOG_DBG << \"cmdRaytrace\";\n\tmpGlobal->printSummary(std::cout);\n\t\n\t// push frame independent data to the rendering interface\n\tif(mFirstRun) {\n\n\t\t// prepare display driver parameters\n\t\tif(!prepareDisplayData()) {\n\t\t\tLLOG_ERR << \"Unable to prepare display data !!!\";\n\t\t\treturn false;\n\t\t}\n\n\t\tif(!mpRendererIface->setDisplay(mDisplayData)) {\n\t\t\tLLOG_ERR << \"Error setting display data !!!\";\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif(!prepareFrameData()) {\n\t\tLLOG_ERR << \"Unable to prepare frame data !\";\n\t\treturn false;\n\t}\n\n\tmpRendererIface->renderFrame(mFrameData);\n\n\tmFirstRun = false;\n\treturn true;\n}\n\nvoid Session::pushBgeo(const std::string& name, ika::bgeo::Bgeo::SharedConstPtr pBgeo, bool async) {\n\tLLOG_DBG << \"pushBgeo\";\n    //bgeo.printSummary(std::cout);\n\n    auto pSceneBuilder = mpRendererIface->getSceneBuilder();\n    if(pSceneBuilder) {\n    \tif (async) {\n    \t\t// async mesh add \n    \t\tmMeshMap[name] = pSceneBuilder->addGeometryAsync(pBgeo, name);\n    \t} else {\n    \t\t// immediate mesh add\n    \t\tmMeshMap[name] = pSceneBuilder->addGeometry(pBgeo, name);\n    \t}\n    } else {\n    \tLLOG_ERR << \"Can't push geometry (bgeo). SceneBuilder not ready !!!\";\n    }\n}\n\nvoid Session::pushLight(const scope::Light::SharedPtr pLightScope) {\n\tLLOG_DBG << \"pushLight\";\n\tstatic std::string unnamed = \"unnamed\"; // safety. in case light scope has no name specified\n\n    auto pSceneBuilder = mpRendererIface->getSceneBuilder();\n\n    if (!pSceneBuilder) {\n\t\tLLOG_ERR << \"Unable to push light. SceneBuilder not ready !!!\";\n\t\treturn;\n\t}\n\n\tstd::string light_type = pLightScope->getPropertyValue(ast::Style::LIGHT, \"type\", std::string(\"point\"));\n\tstd::string light_name = pLightScope->getPropertyValue(ast::Style::OBJECT, \"name\", unnamed);\n\tconst auto& transform = pLightScope->getTransformList()[0];\n\n\tFalcor::float3 light_color = {1.0, 1.0, 1.0}; // defualt light color\n\tFalcor::float3 light_pos = {transform[3][0], transform[3][1], transform[3][2]}; // light position\n\n\tFalcor::float3 light_dir = {-transform[2][0], -transform[2][1], -transform[2][2]};\n\tLLOG_DBG << \"Light dir: \" << light_dir[0] << \" \" << light_dir[1] << \" \" << light_dir[2];\n\n\tProperty* pShaderProp = pLightScope->getProperty(ast::Style::LIGHT, \"shader\");\n\tif(pShaderProp) {\n\t\tauto pShaderProps = pShaderProp->subContainer();\n\t\tlight_color = to_float3(pShaderProps->getPropertyValue(ast::Style::LIGHT, \"lightcolor\", lsd::Vector3{1.0, 1.0, 1.0}));\n\t} else {\n\t\tLLOG_ERR << \"No shader property set for light \" << light_name;\n\t}\n\n\tFalcor::Light::SharedPtr pLight = nullptr;\n\n\tif( light_type == \"distant\") {\n\t\tauto pDistantLight = Falcor::DistantLight::create();\n\t\tpDistantLight->setWorldDirection(light_dir);\n\t\t\n\t\tpLight = std::dynamic_pointer_cast<Falcor::Light>(pDistantLight);\n\t} else if( light_type == \"point\") {\n\t\tauto pPointLight = Falcor::PointLight::create();\n\t\tpPointLight->setWorldPosition(light_pos);\n\t\tpPointLight->setWorldDirection(light_dir);\n\n\t\tpLight = std::dynamic_pointer_cast<Falcor::Light>(pPointLight);\n\t} else if( light_type == \"grid\" ) {\n\t\tauto pAreaLight = Falcor::AnalyticAreaLight::create(Falcor::LightType::Rect);\n\t\tif (!pAreaLight) {\n\t\t\tLLOG_ERR << \"Error creating AnalyticAreaLight !!! Skipping...\";\n\t\t\treturn;\n\t\t}\n\t\tpAreaLight->setTransformMatrix(transform);\n\n\t\tpLight = std::dynamic_pointer_cast<Falcor::Light>(pAreaLight);\n\t} else if( light_type == \"env\") {\n\t\t// Environment light probe is not a classid light source. It should be created later by scene builder or renderer\n\n\t\t//envintensity\n\t\tstd::string texture_file_name = pLightScope->getPropertyValue(ast::Style::LIGHT, \"areamap\", std::string(\"\"));\n\t\tif (texture_file_name.size() == 0) {\n\t\t\tLLOG_WRN << \"No areamap provided for environment light. Skipping...\";\n\t\t\treturn;\n\t\t}\n\n\t\tauto pDevice = pSceneBuilder->device();\n\t\tLightProbe::SharedPtr pLightProbe = LightProbe::create(pDevice->getRenderContext(), texture_file_name, true, ResourceFormat::RGBA16Float);\n    \tpLightProbe->setPosW(light_pos);\n\n    \t//light_color /= Falcor::float3{6.28318530718, 6.28318530718, 6.28318530718}; // inv 2*PI\n    \tpLightProbe->setIntensity(light_color);\n    \tpSceneBuilder->setLightProbe(pLightProbe);\n    \treturn;\n\t} else { \n\t\tLLOG_WRN << \"Unsupported light type \" << light_type << \". Skipping...\";\n\t\treturn;\n\t}\n\n\tif(pLight) {\n\t\tLLOG_DBG << \"Light \" << light_name << \"  type \" << pLight->getData().type;\n\n\t\tpLight->setName(light_name);\n\t\tpLight->setHasAnimation(false);\n\n\t\tlight_color *= Falcor::float3{6.28318530718, 6.28318530718, 6.28318530718}; // just to match houdini intensity (2*PI)\n\t\tpLight->setIntensity(light_color);\n\t\tuint32_t light_id = pSceneBuilder->addLight(pLight);\n\t\tmLightsMap[light_name] = light_id;\n\t}\n\n\tunnamed += \"_\";\n}\n\nvoid Session::cmdProperty(lsd::ast::Style style, const std::string& token, const Property::Value& value) {\n\tLLOG_DBG << \"cmdProperty \" << token << \" \" << to_string(value);\n\tif(!mpCurrentScope) {\n\t\tLLOG_ERR << \"No current scope is set !!!\";\n\t\treturn; \n\t}\n\tmpCurrentScope->setProperty(style, token, value);\n}\n\nvoid Session::cmdPropertyV(lsd::ast::Style style, const std::vector<std::pair<std::string, Property::Value>>& values) {\n\tLLOG_DBG << \"cmdPropertyV \";\n\tif(!mpCurrentScope) {\n\t\tLLOG_ERR << \"No current scope is set !!!\";\n\t\treturn; \n\t}\n\n\tif (values.size() < 2) {\n\t\tLLOG_ERR << \"Property array size should be at least 2 elements !!!\";\n\t\treturn;\n\t}\n\n\tmpCurrentScope->setProperty(style, values[0].first, values[0].second);\n\tProperty* pProp = mpCurrentScope->getProperty(style, values[0].first);\n\n\tif(!pProp) {\n\t\tLLOG_ERR << \"Error getting property \" << values[0].first;\n\t\treturn;\n\t}\n\n\tauto pSubContainer = pProp->subContainer();\n\tif(!pSubContainer) {\n\t\tLLOG_ERR << \"No sub-container for property \" << values[0].first;\n\t\treturn;\n\t}\n\n\tfor(auto it = values.begin() + 1; it != values.end(); it++) {\n\t\tpSubContainer->setProperty(style, it->first, it->second);\n\t}\n}\n\nvoid Session::cmdDeclare(lsd::ast::Style style, lsd::ast::Type type, const std::string& token, const lsd::PropValue& value) {\n\tLLOG_DBG << \"cmdDeclare\";\n\tif(mpCurrentScope) {\n\t\tmpCurrentScope->declareProperty(style, type, token, value.get(), Property::Owner::USER);\n\t}\n}\n\nvoid Session::cmdTransform(const Matrix4& transform) {\n\tLLOG_DBG << \"cmdTransform\";\n\tauto pScope = std::dynamic_pointer_cast<scope::Transformable>(mpCurrentScope);\n\tif(!pScope) {\n\t\tLLOG_DBG << \"Trying to set transform on non-transformable scope !!!\";\n\t\treturn;\n\t}\n\tpScope->setTransform(transform);\n}\n\nvoid Session::cmdMTransform(const Matrix4& transform) {\n\tLLOG_DBG << \"cmdMTransform\";\n\tauto pScope = std::dynamic_pointer_cast<scope::Transformable>(mpCurrentScope);\n\tif(!pScope) {\n\t\tLLOG_DBG << \"Trying to add transform to non-transformable scope !!!\";\n\t\treturn;\n\t}\n\tpScope->addTransform(transform);\n}\n\nscope::Geo::SharedPtr Session::getCurrentGeo() {\n\tauto pGeo = std::dynamic_pointer_cast<scope::Geo>(mpCurrentScope);\n\tif(!pGeo) {\n\t\tLLOG_ERR << \"Unable to get scope::Geo. Current scope type is \" << to_string(mpCurrentScope->type()) << \" !!!\";\n\t\treturn nullptr;\n\t}\n\treturn pGeo;\n}\n\nscope::ScopeBase::SharedPtr Session::getCurrentScope() {\n\treturn std::dynamic_pointer_cast<scope::ScopeBase>(mpCurrentScope);\n}\n\nvoid Session::cmdIPRmode(const std::string& mode) {\n\tLLOG_DBG << \"cmdIPRmode\";\n\tmIPRmode = true;\n\t//mpRendererIface->setIPRMode(mIPRmode);\n}\n\nbool Session::cmdStart(lsd::ast::Style object_type) {\n\tLLOG_DBG << \"cmdStart\";\n\tauto pGlobal = std::dynamic_pointer_cast<scope::Global>(mpCurrentScope);\n\tif(!pGlobal) {\n\t\tLLOG_FTL << \"Objects creation allowed only inside global scope !!!\";\n\t\treturn false;\n\t}\n\n\tswitch (object_type) {\n\t\tcase lsd::ast::Style::GEO: \n\t\t\tmpCurrentScope = pGlobal->addGeo();\n\t\t\tbreak;\n\t\tcase lsd::ast::Style::OBJECT: \n\t\t\tmpCurrentScope = pGlobal->addObject();\n\t\t\tbreak;\n\t\tcase lsd::ast::Style::LIGHT:\n\t\t\tmpCurrentScope = pGlobal->addLight();\n\t\t\tbreak;\n\t\tcase lsd::ast::Style::PLANE:\n\t\t\tmpCurrentScope = pGlobal->addPlane();\n\t\t\tbreak;\n\t\tcase lsd::ast::Style::SEGMENT:\n\t\t\tmpCurrentScope = pGlobal->addSegment();\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tLLOG_FTL << \"Objects creation allowed only inside global scope !!!\";\n\t\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nbool Session::cmdEnd() {\n\tLLOG_DBG << \"cmdEnd\";\n\tauto pGlobal = std::dynamic_pointer_cast<scope::Global>(mpCurrentScope);\n\tif(pGlobal) {\n\t\tLLOG_FTL << \"Can't end global scope !!!\";\n\t\treturn false;\n\t}\n\n\tauto pParent = mpCurrentScope->parent();\n\tif(!pParent) {\n\t\tLLOG_FTL << \"Unable to end scope with no parent !!!\";\n\t\treturn false;\n\t}\n\n\tbool pushGeoAsync = false;\n\tbool result = true;\n\n\tscope::Geo::SharedPtr pGeo;\n\tscope::Object::SharedPtr pObj;\n\tscope::Plane::SharedPtr pPlane;\n\tscope::Light::SharedPtr pLight;\n\n\tswitch(mpCurrentScope->type()) {\n\t\tcase ast::Style::GEO:\n\t\t\tpGeo = std::dynamic_pointer_cast<scope::Geo>(mpCurrentScope);\n\t\t\tif( pGeo->isInline()) {\n\t\t\t\tpGeo->bgeo()->printSummary(std::cout);\n\t\t\t\tpushBgeo(pGeo->detailName(), pGeo->bgeo(), pushGeoAsync);\n\t\t\t} else {\n\t\t\t\tpGeo->bgeo()->printSummary(std::cout);\n\t\t\t\tpushBgeo(pGeo->detailName(), pGeo->bgeo(), pushGeoAsync);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase ast::Style::OBJECT:\n\t\t\tLLOG_FTL << \"end object\";\n\t\t\tpObj = std::dynamic_pointer_cast<scope::Object>(mpCurrentScope);\n\t\t\tif(!pushGeometryInstance(pObj)) {\n\t\t\t\tLLOG_FTL << \"FAK\";\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase ast::Style::PLANE:\n\t\t\tpPlane = std::dynamic_pointer_cast<scope::Plane>(mpCurrentScope);\n\t\t\tbreak;\n\t\tcase ast::Style::LIGHT:\n\t\t\tpLight = std::dynamic_pointer_cast<scope::Light>(mpCurrentScope);\n\t\t\tpushLight(pLight);\n\t\t\tbreak;\n\t\tcase ast::Style::SEGMENT:\n\t\tcase ast::Style::GLOBAL:\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tLLOG_ERR << \"cmd_end makes no sence. Current scope type is \" << to_string(mpCurrentScope->type()) << \" !!!\";\n\t\t\tbreak;\n\t}\n\n\tmpCurrentScope = pParent;\n\treturn result;\n}\n\nbool Session::pushGeometryInstance(const scope::Object::SharedPtr pObj) {\n\tLLOG_DBG << \"pushGeometryInstance\";\n\tauto it = mMeshMap.find(pObj->geometryName());\n\tif(it == mMeshMap.end()) {\n\t\tLLOG_ERR << \"No geometry found for name \" << pObj->geometryName();\n\t\treturn false;\n\t}\n\n\tauto pSceneBuilder = mpRendererIface->getSceneBuilder();\n\tif (!pSceneBuilder) {\n\t\tLLOG_ERR << \"Unable to push geometry instance. SceneBuilder not ready !!!\";\n\t\treturn false;\n\t}\n\n\tassert(pSceneBuilder->device());\n\n\tFalcor::SceneBuilder::Node node = {\n\t\tit->first,\n\t\tpObj->getTransformList()[0],\n\t\tglm::mat4(1),\n\t\tFalcor::SceneBuilder::kInvalidNode // just a node with no parent\n\t};\n\n\tstd::string obj_name = pObj->getPropertyValue(ast::Style::OBJECT, \"name\", std::string(\"unnamed\"));\n\n\tuint32_t mesh_id;\n\ttry {\n\t\tLLOG_DBG << \"getting sync mesh_id for obj_name \" << obj_name;\n\t\tmesh_id = std::get<uint32_t>(it->second);\t\n\t} catch (const std::bad_variant_access&) {\n\t\tLLOG_DBG << \"getting async mesh_id for obj_name \" << obj_name;\n\n\t\tstd::shared_future<uint32_t>& f = std::get<std::shared_future<uint32_t>>(it->second);\n\t\ttry {\n\t\t\tmesh_id = f.get();\t\n\t\t} catch(const std::exception& e) {\n        \tstd::cout << \"Exception from the thread: \" << e.what() << '\\n';\n    \t}\n\t} catch (...) {\n\t\tLLOG_ERR << \"Unable to get mesh id for object \" << obj_name;\n\t\treturn false;\n\t}\n\tLLOG_DBG << \"mesh_id \" << mesh_id;\n\n\tuint32_t node_id = pSceneBuilder->addNode(node);\n\n\t// TODO: this is naive test. fetch basic material data\n\tProperty* pShaderProp = pObj->getProperty(ast::Style::OBJECT, \"surface\");\n    \n    Falcor::float3 \tsurface_base_color = {1.0, 1.0, 1.0};\n    std::string \tsurface_base_color_texture = \"\";\n    std::string \tsurface_base_normal_texture = \"\";\n    std::string \tsurface_metallic_texture = \"\";\n    std::string \tsurface_rough_texture = \"\";\n\n    bool \t\t\tsurface_use_basecolor_texture = false;\n    bool \t\t\tsurface_use_roughness_texture = false;\n    bool \t\t\tsurface_use_metallic_texture = false;\n    bool \t\t\tsurface_use_basenormal_texture = false;\n\n    float \t\t \tsurface_ior = 1.5;\n    float \t\t\tsurface_metallic = 0.0;\n    float \t\t\tsurface_roughness = 0.5;\n    float \t\t\tsurface_reflectivity = 1.0;\n\n    if(pShaderProp) {\n    \tauto pShaderProps = pShaderProp->subContainer();\n    \tsurface_base_color = to_float3(pShaderProps->getPropertyValue(ast::Style::OBJECT, \"basecolor\", lsd::Vector3{0.2, 0.2, 0.2}));\n    \tsurface_base_color_texture = pShaderProps->getPropertyValue(ast::Style::OBJECT, \"basecolor_texture\", std::string());\n    \tsurface_base_normal_texture = pShaderProps->getPropertyValue(ast::Style::OBJECT, \"baseNormal_texture\", std::string());\n    \tsurface_metallic_texture = pShaderProps->getPropertyValue(ast::Style::OBJECT, \"metallic_texture\", std::string());\n    \tsurface_rough_texture = pShaderProps->getPropertyValue(ast::Style::OBJECT, \"rough_texture\", std::string());\n\n    \tsurface_use_basecolor_texture = pShaderProps->getPropertyValue(ast::Style::OBJECT, \"basecolor_useTexture\", false);\n    \tsurface_use_metallic_texture = pShaderProps->getPropertyValue(ast::Style::OBJECT, \"metallic_useTexture\", false);\n    \tsurface_use_roughness_texture = pShaderProps->getPropertyValue(ast::Style::OBJECT, \"rough_useTexture\", false);\n    \tsurface_use_basenormal_texture = pShaderProps->getPropertyValue(ast::Style::OBJECT, \"baseBumpAndNormal_enable\", false);\n\n    \tsurface_ior = pShaderProps->getPropertyValue(ast::Style::OBJECT, \"ior\", 1.5);\n    \tsurface_metallic = pShaderProps->getPropertyValue(ast::Style::OBJECT, \"metallic\", 0.0);\n    \tsurface_roughness = pShaderProps->getPropertyValue(ast::Style::OBJECT, \"rough\", 0.3);\n    \tsurface_reflectivity = pShaderProps->getPropertyValue(ast::Style::OBJECT, \"reflect\", 1.0);\n    } else {\n    \tLLOG_ERR << \"No surface property set for object \" << obj_name;\n    }\n\n    auto pMaterial = Falcor::Material::create(pSceneBuilder->device(), obj_name);\n    pMaterial->setBaseColor({surface_base_color, 1.0});\n    pMaterial->setIndexOfRefraction(surface_ior);\n    pMaterial->setMetallic(surface_metallic);\n    pMaterial->setRoughness(surface_roughness);\n    pMaterial->setReflectivity(surface_reflectivity);\n\n    LLOG_DBG << \"setting material textures\";\n    if(surface_base_color_texture != \"\" && surface_use_basecolor_texture) \n    \tpMaterial->loadTexture(Falcor::Material::TextureSlot::BaseColor, surface_base_color_texture);\n\n    if(surface_metallic_texture != \"\" && surface_use_metallic_texture) \n    \tpMaterial->loadTexture(Falcor::Material::TextureSlot::Specular, surface_metallic_texture);\n\n    if(surface_rough_texture != \"\" && surface_use_roughness_texture) \n    \tpMaterial->loadTexture(Falcor::Material::TextureSlot::Roughness, surface_rough_texture);\n\n    if(surface_base_normal_texture != \"\" && surface_use_basenormal_texture) \n    \tpMaterial->loadTexture(Falcor::Material::TextureSlot::Normal, surface_base_normal_texture);\n\n    // add a mesh instance to a node\n    pSceneBuilder->addMeshInstance(node_id, mesh_id, pMaterial);\n\n\treturn true;\n}\n\n\nbool Session::cmdGeometry(const std::string& name) {\n \tLLOG_DBG << \"cmdGeometry\";\n \tif( mpCurrentScope->type() != ast::Style::OBJECT) {\n \t\tLLOG_ERR << \"cmd_geometry outside object scope !!!\";\n \t\treturn false;\n \t}\n\n \tauto pObj = std::dynamic_pointer_cast<scope::Object>(mpCurrentScope);\n \tpObj->setGeometryName(name);\n\n \treturn true;\n}\n\nvoid Session::cmdTime(double time) {\n\tmFrameData.time = time;\n}\n\n\n}  // namespace lsd\n\n}  // namespace lava",
			"file": "src/lava_lib/reader_lsd/session.cpp",
			"file_size": 19743,
			"file_write_time": 133352798597267383,
			"settings":
			{
				"buffer_size": 19743,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "if(!"
					},
					"BAAAAFzHAAAAAAAAXccAAAAAAAAAAAAAXccAAAAAAABexwAAAAAAAAAAAABexwAAAAAAAF/HAAAAAAAAAAAAAF/HAAAAAAAAYMcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFzHAAAAAAAAXMcAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"left_delete",
					null,
					"AQAAAO7HAAAAAAAA7scAAAAAAAABAAAAOw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO/HAAAAAAAA78cAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAO7HAAAAAAAA78cAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO7HAAAAAAAA7scAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAO/HAAAAAAAA8McAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO/HAAAAAAAA78cAAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAPDHAAAAAAAA8scAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPDHAAAAAAAA8McAAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAPHHAAAAAAAA8scAAAAAAAAAAAAA8scAAAAAAAD4xwAAAAAAAAAAAAD4xwAAAAAAAPnHAAAAAAAAAAAAAPnHAAAAAAAA/8cAAAAAAAAAAAAA8scAAAAAAADyxwAAAAAAAAYAAAAJICAgIAnyxwAAAAAAAPnHAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPHHAAAAAAAA8ccAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "re"
					},
					"AgAAAPnHAAAAAAAA+scAAAAAAAAAAAAA+scAAAAAAAD7xwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPnHAAAAAAAA+ccAAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAAPnHAAAAAAAA+ccAAAAAAAACAAAAcmX5xwAAAAAAAP/HAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPvHAAAAAAAA+8cAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " f"
					},
					"AgAAAP/HAAAAAAAAAMgAAAAAAAAAAAAAAMgAAAAAAAAByAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP/HAAAAAAAA/8cAAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "false"
					},
					"AgAAAADIAAAAAAAAAMgAAAAAAAABAAAAZgDIAAAAAAAABcgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAHIAAAAAAAAAcgAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAAXIAAAAAAAABsgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAXIAAAAAAAABcgAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAP7IAAAAAAAA/8gAAAAAAAAAAAAA/8gAAAAAAAAEyQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP7IAAAAAAAA/sgAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAP7IAAAAAAAA/8gAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP7IAAAAAAAA/sgAAAAAAAAAAAAAAABSQA"
				],
				[
					26,
					1,
					"paste",
					null,
					"AQAAAP/IAAAAAAAAFMkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP/IAAAAAAAA/8gAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAP/IAAAAAAAAAMkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP/IAAAAAAAA/8gAAAAAAAAAAAAAAABbQA"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAbKAAAAAAAAB8oAAAAAAAAAAAAAB8oAAAAAAAAMygAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAbKAAAAAAAABsoAAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAAbKAAAAAAAAB8oAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAbKAAAAAAAABsoAAAAAAAAAAAAAAABSQA"
				],
				[
					35,
					1,
					"paste",
					null,
					"AQAAAAfKAAAAAAAAHMoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAfKAAAAAAAAB8oAAAAAAAAAAAAAAADwvw"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAAfKAAAAAAAACMoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAfKAAAAAAAAB8oAAAAAAAAAAAAAAADwvw"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABHLAAAAAAAAEssAAAAAAAAAAAAAEssAAAAAAAAXywAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABHLAAAAAAAAEcsAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAABHLAAAAAAAAEssAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABHLAAAAAAAAEcsAAAAAAAAAAAAAAABSQA"
				],
				[
					44,
					1,
					"paste",
					null,
					"AQAAABLLAAAAAAAAJ8sAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABLLAAAAAAAAEssAAAAAAAAAAAAAAADwvw"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAABLLAAAAAAAAE8sAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABLLAAAAAAAAEssAAAAAAAAAAAAAAADwvw"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAB/MAAAAAAAAIMwAAAAAAAAAAAAAIMwAAAAAAAAlzAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB/MAAAAAAAAH8wAAAAAAAAAAAAAAADwvw"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAB/MAAAAAAAAIMwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB/MAAAAAAAAH8wAAAAAAAAAAAAAAABSQA"
				],
				[
					53,
					1,
					"paste",
					null,
					"AQAAACDMAAAAAAAANcwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACDMAAAAAAAAIMwAAAAAAAAAAAAAAADwvw"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAACDMAAAAAAAAIcwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACDMAAAAAAAAIMwAAAAAAAAAAAAAAABbQA"
				],
				[
					64,
					1,
					"paste",
					null,
					"AQAAAGzIAAAAAAAAcMgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGzIAAAAAAAAbMgAAAAAAAAAAAAAAADwvw"
				],
				[
					67,
					1,
					"paste",
					null,
					"AQAAAHjJAAAAAAAAfMkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHjJAAAAAAAAeMkAAAAAAAAAAAAAAADwvw"
				],
				[
					70,
					1,
					"paste",
					null,
					"AQAAAIXKAAAAAAAAicoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIXKAAAAAAAAhcoAAAAAAAAAAAAAAADwvw"
				],
				[
					73,
					1,
					"paste",
					null,
					"AQAAAJjLAAAAAAAAnMsAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJjLAAAAAAAAmMsAAAAAAAAAAAAAAADwvw"
				],
				[
					79,
					1,
					"paste",
					null,
					"AgAAAPvIAAAAAAAA/sgAAAAAAAAAAAAA/sgAAAAAAAD+yAAAAAAAAAEAAAA7",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPvIAAAAAAAA/MgAAAAAAAAAAAAAAADwvw"
				],
				[
					82,
					1,
					"paste",
					null,
					"AgAAAAnKAAAAAAAADMoAAAAAAAAAAAAADMoAAAAAAAAMygAAAAAAAAEAAAA7",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAnKAAAAAAAACsoAAAAAAAAAAAAAAADwvw"
				],
				[
					85,
					1,
					"paste",
					null,
					"AgAAABrLAAAAAAAAHcsAAAAAAAAAAAAAHcsAAAAAAAAdywAAAAAAAAEAAAA7",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABrLAAAAAAAAG8sAAAAAAAAAAAAAAADwvw"
				],
				[
					88,
					1,
					"paste",
					null,
					"AgAAAC7MAAAAAAAAMcwAAAAAAAAAAAAAMcwAAAAAAAAxzAAAAAAAAAEAAAA7",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC7MAAAAAAAAL8wAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "retur"
					},
					"BgAAALmTAAAAAAAAupMAAAAAAAAAAAAAupMAAAAAAAC6kwAAAAAAAAQAAABpZighupMAAAAAAAC7kwAAAAAAAAAAAAC7kwAAAAAAALyTAAAAAAAAAAAAALyTAAAAAAAAvZMAAAAAAAAAAAAAvZMAAAAAAAC+kwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5kwAAAAAAAL2TAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAL6TAAAAAAAAv5MAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+kwAAAAAAAL6TAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAL+TAAAAAAAAwJMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC/kwAAAAAAAL+TAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"left_delete",
					null,
					"AQAAAN+TAAAAAAAA35MAAAAAAAAOAAAAKSByZXR1cm4gZmFsc2U",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfkwAAAAAAAO2TAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAEseAAAAAAAATB4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABLHgAAAAAAAEseAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAALUeAAAAAAAAth4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1HgAAAAAAALUeAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "if!"
					},
					"BAAAALuTAAAAAAAAvJMAAAAAAAAAAAAAvJMAAAAAAAC8kwAAAAAAAAcAAAByZXR1cm4gvJMAAAAAAAC9kwAAAAAAAAAAAAC9kwAAAAAAAL6TAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCkwAAAAAAALuTAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"left_delete",
					null,
					"AQAAAL2TAAAAAAAAvZMAAAAAAAABAAAAIQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+kwAAAAAAAL6TAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "(!"
					},
					"AgAAAL2TAAAAAAAAvpMAAAAAAAAAAAAAvpMAAAAAAAC/kwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9kwAAAAAAAL2TAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"left_delete",
					null,
					"AQAAAN6TAAAAAAAA3pMAAAAAAAABAAAAOw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfkwAAAAAAAN+TAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAN6TAAAAAAAA35MAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADekwAAAAAAAN6TAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAN+TAAAAAAAA4JMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfkwAAAAAAAN+TAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAOCTAAAAAAAA4pMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADgkwAAAAAAAOCTAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAOGTAAAAAAAA4pMAAAAAAAAAAAAA4pMAAAAAAADmkwAAAAAAAAAAAADmkwAAAAAAAOeTAAAAAAAAAAAAAOeTAAAAAAAA65MAAAAAAAAAAAAA4pMAAAAAAADikwAAAAAAAAQAAAAJCQkJ4pMAAAAAAADnkwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhkwAAAAAAAOGTAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "mf"
					},
					"AgAAAOeTAAAAAAAA6JMAAAAAAAAAAAAA6JMAAAAAAADpkwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnkwAAAAAAAOeTAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"insert_completion",
					{
						"completion": "mFailed",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mFailed"
					},
					"AgAAAOeTAAAAAAAA55MAAAAAAAACAAAAbWbnkwAAAAAAAO6TAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADpkwAAAAAAAOmTAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAO6TAAAAAAAA75MAAAAAAAAAAAAA75MAAAAAAADwkwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADukwAAAAAAAO6TAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": " tr"
					},
					"AwAAAPCTAAAAAAAA8ZMAAAAAAAAAAAAA8ZMAAAAAAADykwAAAAAAAAAAAADykwAAAAAAAPOTAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwkwAAAAAAAPCTAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					1,
					"insert_completion",
					{
						"completion": "true",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "true"
					},
					"AgAAAPGTAAAAAAAA8ZMAAAAAAAACAAAAdHLxkwAAAAAAAPWTAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADzkwAAAAAAAPOTAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAPWTAAAAAAAA9pMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD1kwAAAAAAAPWTAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "\nre"
					},
					"BAAAAPaTAAAAAAAA95MAAAAAAAAAAAAA95MAAAAAAAD8kwAAAAAAAAAAAAD8kwAAAAAAAP2TAAAAAAAAAAAAAP2TAAAAAAAA/pMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2kwAAAAAAAPaTAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAAPyTAAAAAAAA/JMAAAAAAAACAAAAcmX8kwAAAAAAAAKUAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD+kwAAAAAAAP6TAAAAAAAAAAAAAAAA8L8"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": " f"
					},
					"AgAAAAKUAAAAAAAAA5QAAAAAAAAAAAAAA5QAAAAAAAAElAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAClAAAAAAAAAKUAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "false"
					},
					"AgAAAAOUAAAAAAAAA5QAAAAAAAABAAAAZgOUAAAAAAAACJQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAElAAAAAAAAASUAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAAiUAAAAAAAACZQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAIlAAAAAAAAAiUAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9hQAAAAAAAL2FAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "#include <chrono>\n#include <exception>\n\n#include \"visitor.h\"\n#include \"session.h\"\n#include \"uudecode.h\"\n\n#include \"properties_container.h\"\n\nnamespace x3 = boost::spirit::x3;\nnamespace fs = boost::filesystem;\n\nnamespace lava { \n\nnamespace lsd {\n\nbool readEmbeddedFileUU(std::istream* pParserStream, size_t size, std::vector<unsigned char>& decoded_data) {\n    LLOG_DBG << \"Reading \" << size << \" bytes of embedded data\";\n\n    bool result = true;\n    std::istream &in = *pParserStream;\n\n    std::vector<char> buff(size);\n \n    // read size amount of bytes from stream into buff\n    in.unsetf(std::ios::skipws);\n    in.read((char *)buff.data(), size);\n    in.setf(std::ios::skipws);\n\n    // decode data\n    FILE* inMemFile = fmemopen((void *)buff.data(), size, \"rw\");\n    \n    FILE* outTestFile = fopen(\"/home/max/Desktop/mistery_file_decoded\", \"w\");\n\n    if(!uu::decodeUU(inMemFile, outTestFile)) {\n        LLOG_DBG << \"Error decoding embedded data !!!\";\n    }\n\n    fclose(inMemFile);\n    \n    if(outTestFile)\n        fclose(outTestFile);\n    // test write\n    //std::ofstream fout(\"/home/max/Desktop/mistery_file\", std::ios::out | std::ios::binary);\n    //fout.write((char*)&buff[0], buff.size() * sizeof(unsigned char));\n    //fout.close();\n\n    return result;\n}\n\nbool readInlineBGEO(std::istream* pParserStream, ika::bgeo::Bgeo::SharedPtr pBgeo) {\n    auto t1 = std::chrono::high_resolution_clock::now();\n    \n    uint lines = 0;\n    std::string bgeo_str;\n    bgeo_str.reserve(104857600); // 100MB\n\n    std::string str;\n    str.reserve(10485760); // 10MB\n\n    uint oc = 0; // open brackets count\n    uint cc = 0; // closing brackets count\n    \n    bool bgeo_json_found = false;\n    char* char_ptr = nullptr;\n    std::istream &in = *pParserStream;\n    while( std::getline(in, str) ){\n        bgeo_str += str;\n        lines += 1;\n        char_ptr = str.data();\n        \n        for (uint i = 0; i < str.size(); i++)  {\n            if (*(char_ptr) == '[') { oc++; }    \n            else if (*(char_ptr) == ']') { cc++; }\n            if((oc > 0) && (oc == cc)){\n                bgeo_json_found = true;\n                break;\n            }\n        }\n\n        if(bgeo_json_found)\n            break;\n    }\n\n    if (!bgeo_json_found)\n        return false;\n\n    auto t2 = std::chrono::high_resolution_clock::now();\n    auto duration = std::chrono::duration_cast<std::chrono::milliseconds>( t2 - t1 ).count();\n    \n    LLOG_DBG << \"Inline BGEO \" << lines << \"lines read in: \" << duration << \" milsec.\";\n    LLOG_DBG << \"Inline BGEO string size: \" << bgeo_str.size() << \" bytes.\";\n\n    t1 = std::chrono::high_resolution_clock::now();\n    pBgeo->readInlineGeo(bgeo_str, false);\n    t2 = std::chrono::high_resolution_clock::now();\n    duration = std::chrono::duration_cast<std::chrono::milliseconds>( t2 - t1 ).count();\n    LLOG_DBG << \"BGEO object parsed in: \" << duration << \" milsecs.\";\n    \n    return true;\n}\n\nVisitor::Visitor(std::unique_ptr<Session>& pSession): mpSession(std::move(pSession)), mpParserStream(nullptr), mIgnoreCommands(false) { } \n\nvoid Visitor::setParserStream(std::istream& in) {\n    if (!mpParserStream) {\n        mpParserStream = &in;\n    }\n}\n\nvoid Visitor::operator()(ast::ifthen const& c) {\n    if (!c.expr) {\n        // false expression evaluation, ignore commands until 'endif'\n        mIgnoreCommands = true;\n    }\n}\n\nvoid Visitor::operator()(ast::endif const& c) {\n    if (mIgnoreCommands)\n        mIgnoreCommands = false;\n}\n\nvoid Visitor::operator()(ast::setenv const& c) const {\n    std::cout << \"Visitor setenv\\n\";\n    mpSession->cmdSetEnv(c.key, c.value);\n};\n\nvoid Visitor::operator()(ast::cmd_image const& c) const {\n    mpSession->cmdImage(c.display_type, c.filename);\n}\n\nvoid Visitor::operator()(ast::cmd_quit const& c) const { \n    std::cout << \"LSDVisitor cmd_quit\\n\";\n}\n\nvoid Visitor::operator()(ast::cmd_start const& c) const {\n    std::cout << \"LSDVisitor cmd_start\\n\";\n    if(!mpSession->cmdStart(c.object_type))\n        throw std::runtime_error(\"Error starting new scope !!!\");\n}\n\nvoid Visitor::operator()(ast::cmd_end const& c) const { \n    std::cout << \"LSDVisitor cmd_end\\n\";\n    if(!mpSession->cmdEnd())\n        throw std::runtime_error(\"Error ending current scope !!!\");\n}\n\nvoid Visitor::operator()(ast::cmd_time const& c) const {\n    mpSession->cmdTime(c.time);\n}\n\nvoid Visitor::operator()(ast::cmd_detail const& c) {\n    auto pGeo = mpSession->getCurrentGeo();\n    pGeo->setDetailFilename(c.filename);\n    pGeo->setDetailName(c.name);\n    \n    if(!pGeo) {\n        LLOG_ERR << \"Unable to process cmd_detail out of Geo scope !!!\";\n        throw std::runtime_error(\"Unable to process cmd_detail out of Geo scope !!!\");\n    }\n\n    ika::bgeo::Bgeo::SharedPtr pBgeo = pGeo->bgeo();\n    if(c.filename == \"stdin\") {\n        bool result = readInlineBGEO(mpParserStream, pBgeo);\n        if (!result) {\n            LLOG_ERR << \"Error reading inline bgeo !!!\";\n            return;\n        }\n        pBgeo->preCachePrimitives();\n    } else {\n        pBgeo->readGeoFromFile(mpSession->getExpandedString(c.filename).c_str(), false); // FIXME: don't check version for now\n        pBgeo->preCachePrimitives();\n    }\n}\n\nvoid Visitor::operator()(ast::cmd_version const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_config const& c) const {\n    mpSession->cmdConfig(c.filename);\n}\n\nvoid Visitor::operator()(ast::cmd_defaults const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_transform const& c) const {\n    mpSession->cmdTransform(c.m);\n}\n\nvoid Visitor::operator()(ast::cmd_iprmode const& c) const {\n    mpSession->cmdIPRmode(c.mode);\n}\n\nvoid Visitor::operator()(ast::cmd_mtransform const& c) const {\n    mpSession->cmdMTransform(c.m);\n}\n\nvoid Visitor::operator()(ast::cmd_geometry const& c) const {\n    mpSession->cmdGeometry(c.geometry_name);\n}\n\nvoid Visitor::operator()(ast::cmd_deviceoption const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_property const& c) const {\n    if (c.values.size() == 0)\n        return;\n\n    if (c.values.size() != 1) {\n        std::vector<std::pair<std::string, Property::Value>> v;\n        for(auto const& value: c.values) {\n            v.push_back({value.first, value.second.get()});\n        }\n        mpSession->cmdPropertyV(c.style, v);\n        return;\n    }\n   \n   auto const& value = c.values[0];\n   mpSession->cmdProperty(c.style, value.first, value.second.get());\n}\n\nvoid Visitor::operator()(ast::cmd_declare const& c) const {\n    if(!c.values.size())\n        return;\n\n    if (c.values.size() > 1) {\n        LLOG_WRN << \"Value arrays not supported !!! Ignored for token: \" << c.token;\n        return;\n    }\n\n    mpSession->cmdDeclare(c.style, c.type, c.token, c.values[0]);\n}\n\nvoid Visitor::operator()(ast::cmd_raytrace const& c) const {\n    if(!mpSession->cmdRaytrace())\n        throw std::runtime_error(\"Error rendering image !!!\");\n}\n\nvoid Visitor::operator()(ast::cmd_reset const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::ray_embeddedfile const& c) const {\n    auto pScope = mpSession->getCurrentScope();\n    if(!pScope)\n        return;\n\n    if(c.encoding == ast::EmbedDataEncoding::UUENCODED) {\n        if(readEmbeddedFileUU(mpParserStream, c.size, pScope->getEmbeddedData(c.name))) {\n            LLOG_DBG << \"Read embedded data size: \" << pScope->getEmbeddedData(c.name).size();\n        }\n    } else {\n        LLOG_WRN << \"Unknown embedded data encoding !!!\";\n        return;\n    }\n}\n\n}  // namespace lsd\n\n}  // namespace lava\n",
			"file": "src/lava_lib/reader_lsd/visitor.cpp",
			"file_size": 7415,
			"file_write_time": 133352798597267383,
			"settings":
			{
				"buffer_size": 7415,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAO4PAAAAAAAA7w8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuDwAAAAAAAO4PAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"wrap_block",
					{
						"begin": "{",
						"end": "}"
					},
					"AgAAAO8PAAAAAAAA8A8AAAAAAAAAAAAANRAAAAAAAAA7EAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvDwAAAAAAAO8PAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAPkPAAAAAAAA+g8AAAAAAAAAAAAA+g8AAAAAAAD7DwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5DwAAAAAAAPkPAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					2,
					"left_delete",
					null,
					"AgAAAN0UAAAAAAAA3RQAAAAAAAAtAQAAICAgIC8qCiAgICAgZWxzZSB7CiAgICAgICAgYXV0byBmdWxscGF0aCA9IG1wU2Vzc2lvbi0+Z2V0RXhwYW5kZWRTdHJpbmcoYy5maWxlbmFtZSk7CiAgICAgICAgcEJnZW8tPnJlYWRHZW9Gcm9tRmlsZShmdWxscGF0aC5jX3N0cigpLCBmYWxzZSk7IC8vIEZJWE1FOiBkb24ndCBjaGVjayB2ZXJzaW9uIGZvciBub3cKCiAgICAgICAgaWYoYy50ZW1wb3JhcnkpIHsKICAgICAgICAgICAgZnM6OnJlbW92ZShmdWxscGF0aCk7CiAgICAgICAgfQoKICAgICAgICBwQmdlby0+cHJlQ2FjaGVQcmltaXRpdmVzKCk7CiAgICB9CiAgICAqL9wUAAAAAAAA3BQAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAKFgAAAAAAAN0UAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "\nmFa"
					},
					"BgAAAPAPAAAAAAAA8Q8AAAAAAAAAAAAA8Q8AAAAAAAD1DwAAAAAAAAAAAAD1DwAAAAAAAPkPAAAAAAAAAAAAAPkPAAAAAAAA+g8AAAAAAAAAAAAA+g8AAAAAAAD7DwAAAAAAAAAAAAD7DwAAAAAAAPwPAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwDwAAAAAAAPAPAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "il"
					},
					"AgAAAPwPAAAAAAAA/Q8AAAAAAAAAAAAA/Q8AAAAAAAD+DwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD8DwAAAAAAAPwPAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "ed"
					},
					"AgAAAP4PAAAAAAAA/w8AAAAAAAAAAAAA/w8AAAAAAAAAEAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD+DwAAAAAAAP4PAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAAAQAAAAAAAAARAAAAAAAAAAAAAAARAAAAAAAAACEAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " tr"
					},
					"AwAAAAIQAAAAAAAAAxAAAAAAAAAAAAAAAxAAAAAAAAAEEAAAAAAAAAAAAAAEEAAAAAAAAAUQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACEAAAAAAAAAIQAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert_completion",
					{
						"completion": "true",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "true"
					},
					"AgAAAAMQAAAAAAAAAxAAAAAAAAACAAAAdHIDEAAAAAAAAAcQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAFEAAAAAAAAAUQAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAAcQAAAAAAAACBAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAHEAAAAAAAAAcQAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "LLO"
					},
					"BAAAAPkPAAAAAAAA+g8AAAAAAAAAAAAA+g8AAAAAAAD6DwAAAAAAADMAAABtRmFpbGVkID0gdHJ1ZTsKICAgICAgICAvL3Rocm93IHN0ZDo6cnVudGltZV9lcnJvcij6DwAAAAAAAPsPAAAAAAAAAAAAAPsPAAAAAAAA/A8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAsEAAAAAAAAPkPAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"insert_completion",
					{
						"completion": "LLOG_ERR",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "LLOG_ERR"
					},
					"AgAAAPkPAAAAAAAA+Q8AAAAAAAADAAAATExP+Q8AAAAAAAABEAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD8DwAAAAAAAPwPAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": " <<"
					},
					"AwAAAAEQAAAAAAAAAhAAAAAAAAAAAAAAAhAAAAAAAAADEAAAAAAAAAAAAAADEAAAAAAAAAQQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABEAAAAAAAAAEQAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAQQAAAAAAAABRAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAEEAAAAAAAAAQQAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"right_delete",
					null,
					"AQAAACUQAAAAAAAAJRAAAAAAAAABAAAAKQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAlEAAAAAAAACUQAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "\n\nbool"
					},
					"BgAAAGMMAAAAAAAAZAwAAAAAAAAAAAAAZAwAAAAAAABlDAAAAAAAAAAAAABlDAAAAAAAAGYMAAAAAAAAAAAAAGYMAAAAAAAAZwwAAAAAAAAAAAAAZwwAAAAAAABoDAAAAAAAAAAAAABoDAAAAAAAAGkMAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjDAAAAAAAAGMMAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGkMAAAAAAAAagwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABpDAAAAAAAAGkMAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"paste",
					null,
					"AQAAAGoMAAAAAAAAswwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqDAAAAAAAAGoMAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"paste",
					null,
					"AgAAAGsMAAAAAAAAdAwAAAAAAAAAAAAAdAwAAAAAAAB0DAAAAAAAAAUAAABib29sIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrDAAAAAAAAHAMAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"right_delete",
					null,
					"AQAAAGoMAAAAAAAAagwAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqDAAAAAAAAGoMAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqDAAAAAAAAGoMAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "if(STATIC_LIB)\n\texecute_process( COMMAND ${CMAKE_COMMAND} -E copy_if_different ${SRC_DIR}/libfreeimage.a ${DEST_DIR}/lib/libfreeimage.a )\nelse()\n\texecute_process( COMMAND ${CMAKE_COMMAND} -E copy_if_different ${SRC_DIR}/libfreeimage-3.18.0.so ${DEST_DIR}/lib/libfreeimage-3.18.0.so )\n\tSET(TARGET_LIB ${DEST_DIR}/lib/libfreeimage-3.18.0.so)\n\tSET(LINK_LIB ${DEST_DIR}/lib/libfreeimage.so.3)\n\texecute_process( COMMAND ${CMAKE_COMMAND} -E create_symlink ${TARGET_LIB} ${LINK_LIB} )\nendif()\nexecute_process( COMMAND ${CMAKE_COMMAND} -E copy_if_different ${SRC_DIR}/FreeImage.h ${DEST_DIR}/include/FreeImage.h )\n",
			"file": "third_party/freeimage_install_files.cmake",
			"file_size": 606,
			"file_write_time": 133342450074994044,
			"settings":
			{
				"buffer_size": 606,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n\n\n"
					},
					"CwAAABsBAAAAAAAAHAEAAAAAAAAAAAAAHAEAAAAAAAAdAQAAAAAAAAAAAAAdAQAAAAAAAB4BAAAAAAAAAAAAAB4BAAAAAAAAHwEAAAAAAAAAAAAAHAEAAAAAAAAcAQAAAAAAAAEAAAAJHgEAAAAAAAAfAQAAAAAAAAAAAAAfAQAAAAAAACABAAAAAAAAAAAAAB0BAAAAAAAAHQEAAAAAAAABAAAACR8BAAAAAAAAIAEAAAAAAAAAAAAAIAEAAAAAAAAhAQAAAAAAAAAAAAAeAQAAAAAAAB4BAAAAAAAAAQAAAAk",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbAQAAAAAAABsBAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"reindent",
					null,
					"AQAAAB4BAAAAAAAAHwEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAeAQAAAAAAAB4BAAAAAAAAAAAAAAAAQkA"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAAB8BAAAAAAAAmQEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfAQAAAAAAAB8BAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"right_delete",
					null,
					"AgAAAB8BAAAAAAAAHwEAAAAAAAAOAAAASU5TVEFMTChDT0RFICKMAQAAAAAAAIwBAAAAAAAAAQAAAAk",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAtAQAAAAAAAB8BAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					6,
					"left_delete",
					null,
					"BgAAADUBAAAAAAAANQEAAAAAAAABAAAAIDQBAAAAAAAANAEAAAAAAAABAAAAIDMBAAAAAAAAMwEAAAAAAAABAAAAIDIBAAAAAAAAMgEAAAAAAAABAAAAIDEBAAAAAAAAMQEAAAAAAAABAAAACjABAAAAAAAAMAEAAAAAAAABAAAAXA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2AQAAAAAAADYBAAAAAAAAAAAAAAAAQkA"
				],
				[
					14,
					6,
					"left_delete",
					null,
					"BgAAAGABAAAAAAAAYAEAAAAAAAABAAAAIF8BAAAAAAAAXwEAAAAAAAABAAAAIF4BAAAAAAAAXgEAAAAAAAABAAAAIF0BAAAAAAAAXQEAAAAAAAABAAAAIFwBAAAAAAAAXAEAAAAAAAABAAAAClsBAAAAAAAAWwEAAAAAAAABAAAAXA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABhAQAAAAAAAGEBAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					4,
					"left_delete",
					null,
					"BAAAAHUBAAAAAAAAdQEAAAAAAAABAAAAXHQBAAAAAAAAdAEAAAAAAAABAAAAIHMBAAAAAAAAcwEAAAAAAAABAAAAIHIBAAAAAAAAcgEAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB2AQAAAAAAAHYBAAAAAAAAAAAAAAAAgkA"
				],
				[
					18,
					6,
					"left_delete",
					null,
					"BgAAAGoBAAAAAAAAagEAAAAAAAABAAAAIGkBAAAAAAAAaQEAAAAAAAABAAAAIGgBAAAAAAAAaAEAAAAAAAABAAAAIGcBAAAAAAAAZwEAAAAAAAABAAAAIGYBAAAAAAAAZgEAAAAAAAABAAAACmUBAAAAAAAAZQEAAAAAAAABAAAAXA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrAQAAAAAAAGsBAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"left_delete",
					null,
					"AQAAAHIBAAAAAAAAcgEAAAAAAAABAAAAIg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABzAQAAAAAAAHMBAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					5,
					"left_delete",
					null,
					"BQAAAHABAAAAAAAAcAEAAAAAAAABAAAAIG8BAAAAAAAAbwEAAAAAAAABAAAAIG4BAAAAAAAAbgEAAAAAAAABAAAAIG0BAAAAAAAAbQEAAAAAAAABAAAAIGwBAAAAAAAAbAEAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABxAQAAAAAAAHEBAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGwBAAAAAAAAbQEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABsAQAAAAAAAGwBAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJAAAAAAAAAAkQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACQAAAAAAAAAJAAAAAAAAAAAAAAAAAQh0A"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJEAAAAAAAAAkgAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACRAAAAAAAAAJEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJEAAAAAAAAAkgAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACRAAAAAAAAAJEAAAAAAAAAAAAAAAAAAAA"
				],
				[
					31,
					1,
					"reindent",
					null,
					"AQAAAJIAAAAAAAAAkwAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACSAAAAAAAAAJIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "SET"
					},
					"AwAAAJMAAAAAAAAAlAAAAAAAAAAAAAAAlAAAAAAAAACVAAAAAAAAAAAAAACVAAAAAAAAAJYAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACTAAAAAAAAAJMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJYAAAAAAAAAmAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWAAAAAAAAAJYAAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "TARGET"
					},
					"BgAAAJcAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAACZAAAAAAAAAAAAAACZAAAAAAAAAJoAAAAAAAAAAAAAAJoAAAAAAAAAmwAAAAAAAAAAAAAAmwAAAAAAAACcAAAAAAAAAAAAAACcAAAAAAAAAJ0AAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACXAAAAAAAAAJcAAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "+:"
					},
					"AgAAAJ0AAAAAAAAAngAAAAAAAAAAAAAAngAAAAAAAACfAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdAAAAAAAAAJ0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					2,
					"left_delete",
					null,
					"AgAAAJ4AAAAAAAAAngAAAAAAAAABAAAAOp0AAAAAAAAAnQAAAAAAAAABAAAAKw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACfAAAAAAAAAJ8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "_LIB"
					},
					"BAAAAJ0AAAAAAAAAngAAAAAAAAAAAAAAngAAAAAAAACfAAAAAAAAAAAAAACfAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAAoQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdAAAAAAAAAJ0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKEAAAAAAAAAogAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChAAAAAAAAAKEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					1,
					"paste",
					null,
					"AQAAAKIAAAAAAAAAwwAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACiAAAAAAAAAKIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					1,
					"paste",
					null,
					"AgAAAAgBAAAAAAAAEgEAAAAAAAAAAAAAEgEAAAAAAAASAQAAAAAAAAcAAABTUkNfRElS",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAIAQAAAAAAAA8BAAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					1,
					"right_delete",
					null,
					"AQAAABMBAAAAAAAAEwEAAAAAAAAXAAAAL2xpYmZyZWVpbWFnZS0zLjE4LjAuc28",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATAQAAAAAAACoBAAAAAAAAAAAAAAAA8L8"
				],
				[
					63,
					1,
					"paste",
					null,
					"AgAAAH4BAAAAAAAAiAEAAAAAAAAAAAAAiAEAAAAAAACIAQAAAAAAAAYAAAB0YXJnZXQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB+AQAAAAAAAIQBAAAAAAAAAAAAAAAA8L8"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "\nSET"
					},
					"BQAAAMQAAAAAAAAAxQAAAAAAAAAAAAAAxQAAAAAAAADGAAAAAAAAAAAAAADGAAAAAAAAAMcAAAAAAAAAAAAAAMcAAAAAAAAAyAAAAAAAAAAAAAAAyAAAAAAAAADJAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADEAAAAAAAAAMQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					67,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMkAAAAAAAAAywAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADJAAAAAAAAAMkAAAAAAAAAAAAAAAAA8L8"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "LINK_"
					},
					"BQAAAMoAAAAAAAAAywAAAAAAAAAAAAAAywAAAAAAAADMAAAAAAAAAAAAAADMAAAAAAAAAM0AAAAAAAAAAAAAAM0AAAAAAAAAzgAAAAAAAAAAAAAAzgAAAAAAAADPAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKAAAAAAAAAMoAAAAAAAAAAAAAAAAA8L8"
				],
				[
					70,
					1,
					"left_delete",
					null,
					"AQAAAM8AAAAAAAAAzwAAAAAAAAABAAAAKQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADQAAAAAAAAANAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "LIB"
					},
					"AwAAAM8AAAAAAAAA0AAAAAAAAAAAAAAA0AAAAAAAAADRAAAAAAAAAAAAAADRAAAAAAAAANIAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADPAAAAAAAAAM8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANIAAAAAAAAA0wAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSAAAAAAAAANIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					73,
					1,
					"paste",
					null,
					"AQAAANMAAAAAAAAA5AAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADTAAAAAAAAANMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					79,
					1,
					"paste",
					null,
					"AQAAANMAAAAAAAAA3gAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADTAAAAAAAAANMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAO8AAAAAAAAA8AAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvAAAAAAAAAO8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					90,
					1,
					"paste",
					null,
					"AgAAALgBAAAAAAAAwAEAAAAAAAAAAAAAwAEAAAAAAADAAQAAAAAAAAQAAABsaW5r",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4AQAAAAAAALwBAAAAAAAAAAAAAAAA8L8"
				],
				[
					93,
					2,
					"left_delete",
					null,
					"AgAAAGkBAAAAAAAAaQEAAAAAAAABAAAACmgBAAAAAAAAaAEAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqAQAAAAAAAGoBAAAAAAAAAAAAAAAA8L8"
				],
				[
					96,
					1,
					"left_delete",
					null,
					"AQAAAMIBAAAAAAAAwgEAAAAAAAABAAAAKQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDAQAAAAAAAMMBAAAAAAAAAAAAAAAEkUA"
				],
				[
					98,
					2,
					"left_delete",
					null,
					"AgAAAMIBAAAAAAAAwgEAAAAAAAABAAAACsEBAAAAAAAAwQEAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDAQAAAAAAAMMBAAAAAAAAAAAAAAAAAAA"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMEBAAAAAAAAwgEAAAAAAAAAAAAAwgEAAAAAAADDAQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBAQAAAAAAAMEBAAAAAAAAAAAAAAAA8L8"
				],
				[
					105,
					1,
					"paste",
					null,
					"AgAAADIBAAAAAAAAUwEAAAAAAAAAAAAAUwEAAAAAAABTAQAAAAAAAA0AAAAke1RBUkdFVF9MSUJ9",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAyAQAAAAAAAD8BAAAAAAAAAAAAAAAA8L8"
				],
				[
					109,
					1,
					"left_delete",
					null,
					"AgAAAJIAAAAAAAAAkgAAAAAAAABeAAAACVNFVChUQVJHRVRfTElCICR7U1JDX0RJUn0vbGliZnJlZWltYWdlLTMuMTguMC5zbykKCVNFVChMSU5LX0xJQiAke1NSQ19ESVJ9L2xpYmZyZWVpbWFnZS5zby4zKXgBAAAAAAAAeAEAAAAAAAABAAAACQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwAAAAAAAAAJIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					111,
					3,
					"left_delete",
					null,
					"AwAAAJIAAAAAAAAAkgAAAAAAAAABAAAACpEAAAAAAAAAkQAAAAAAAAABAAAACpAAAAAAAAAAkAAAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACTAAAAAAAAAJMAAAAAAAAAAAAAAAAAAAA"
				],
				[
					113,
					1,
					"left_delete",
					null,
					"AQAAAHQBAAAAAAAAdAEAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB1AQAAAAAAAHUBAAAAAAAAAAAAAAAAS0A"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAB0BAAAAAAAAHgEAAAAAAAAAAAAAHgEAAAAAAAAfAQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAdAQAAAAAAAB0BAAAAAAAAAAAAAAAA8L8"
				],
				[
					120,
					1,
					"paste",
					null,
					"AQAAAB0BAAAAAAAAewEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAdAQAAAAAAAB0BAAAAAAAAAAAAAAAAQkA"
				],
				[
					125,
					1,
					"left_delete",
					null,
					"AQAAAB0BAAAAAAAAHQEAAAAAAAABAAAACQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAeAQAAAAAAAB4BAAAAAAAAAAAAAAAA8L8"
				],
				[
					131,
					1,
					"paste",
					null,
					"AgAAACwBAAAAAAAAUgEAAAAAAAAAAAAAUgEAAAAAAABSAQAAAAAAACEAAAAke1NSQ19ESVJ9L2xpYmZyZWVpbWFnZS0zLjE4LjAuc28",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAsAQAAAAAAAE0BAAAAAAAAAAAAAAAA8L8"
				],
				[
					134,
					1,
					"paste",
					null,
					"AgAAAGIBAAAAAAAAiAEAAAAAAAAAAAAAiAEAAAAAAACIAQAAAAAAAAsAAAAke1NSQ19ESVJ9Lw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABiAQAAAAAAAG0BAAAAAAAAAAAAAAAA8L8"
				],
				[
					135,
					22,
					"left_delete",
					null,
					"FgAAAIcBAAAAAAAAhwEAAAAAAAABAAAAb4YBAAAAAAAAhgEAAAAAAAABAAAAc4UBAAAAAAAAhQEAAAAAAAABAAAALoQBAAAAAAAAhAEAAAAAAAABAAAAMIMBAAAAAAAAgwEAAAAAAAABAAAALoIBAAAAAAAAggEAAAAAAAABAAAAOIEBAAAAAAAAgQEAAAAAAAABAAAAMYABAAAAAAAAgAEAAAAAAAABAAAALn8BAAAAAAAAfwEAAAAAAAABAAAAM34BAAAAAAAAfgEAAAAAAAABAAAALX0BAAAAAAAAfQEAAAAAAAABAAAAZXwBAAAAAAAAfAEAAAAAAAABAAAAZ3sBAAAAAAAAewEAAAAAAAABAAAAYXoBAAAAAAAAegEAAAAAAAABAAAAbXkBAAAAAAAAeQEAAAAAAAABAAAAaXgBAAAAAAAAeAEAAAAAAAABAAAAZXcBAAAAAAAAdwEAAAAAAAABAAAAZXYBAAAAAAAAdgEAAAAAAAABAAAAcnUBAAAAAAAAdQEAAAAAAAABAAAAZnQBAAAAAAAAdAEAAAAAAAABAAAAYnMBAAAAAAAAcwEAAAAAAAABAAAAaXIBAAAAAAAAcgEAAAAAAAABAAAAbA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACIAQAAAAAAAIgBAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "/***************************************************************************\n # Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.\n #\n # Redistribution and use in source and binary forms, with or without\n # modification, are permitted provided that the following conditions\n # are met:\n #  * Redistributions of source code must retain the above copyright\n #    notice, this list of conditions and the following disclaimer.\n #  * Redistributions in binary form must reproduce the above copyright\n #    notice, this list of conditions and the following disclaimer in the\n #    documentation and/or other materials provided with the distribution.\n #  * Neither the name of NVIDIA CORPORATION nor the names of its\n #    contributors may be used to endorse or promote products derived\n #    from this software without specific prior written permission.\n #\n # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\n # EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n # PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n # CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n # EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n # PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n # PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n # OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n **************************************************************************/\n#ifdef _WIN32\n#include <filesystem>\nnamespace fs = std::filesystem;\n#else\n#include \"boost/filesystem.hpp\"\nnamespace fs = boost::filesystem;\n#endif\n\n#include <fstream>\n\n#include \"stdafx.h\"\n#include \"Falcor/Utils/StringUtils.h\"\n#include \"Falcor/Utils/Debug/debug.h\"\n#include \"OS.h\"\n\n#ifndef PROJECT_DIR\n#define PROJECT_DIR \"/home/max/dev/Falcor/\"\n#endif\n\n#ifndef LAVA_INSTALL_DIR\n#define LAVA_INSTALL_DIR \"/opt/lava/\"\n#endif\n\nnamespace Falcor {\n\nstd::string gMsgBoxTitle = \"Falcor\";\n\nvoid msgBoxTitle(const std::string& title) {\n    gMsgBoxTitle = title;\n}\n\nuint32_t getLowerPowerOf2(uint32_t a) {\n    assert(a != 0);\n    return 1 << bitScanReverse(a);\n}\n\ninline std::vector<std::string> getInitialShaderDirectories() {\n    std::vector<std::string> developmentDirectories = {\n        // First we search in source folders.\n        //std::string(PROJECT_DIR),\n        //std::string(PROJECT_DIR) + \"../\",\n        //std::string(PROJECT_DIR) + \"../Tools/FalcorTest/\",\n        \n        // Then we search in deployment folders (necessary to pickup NVAPI and other third-party shaders).\n        std::string(LAVA_INSTALL_DIR) + \"shaders\",\n        //getExecutableDirectory() + \"../shaders\",\n    };\n\n    std::vector<std::string> deploymentDirectories = {\n        std::string(LAVA_INSTALL_DIR) + \"shaders\",\n        //getExecutableDirectory() + \"../shaders\"\n    };\n\n    std::cout << \"mode: \" << (isDevelopmentMode() ? \"development\" : \"production\") << \"\\n\";\n    //std::cout << \"exec dir: \" << getExecutableDirectory() << \"\\n\";\n\n    return isDevelopmentMode() ? developmentDirectories : deploymentDirectories;\n}\n\ninline std::vector<std::string> getInitialRenderPassDirectories() {\n    std::vector<std::string> developmentDirectories = {\n        // Then we search in deployment folders (necessary to pickup NVAPI and other third-party shaders).\n        std::string(LAVA_INSTALL_DIR) + \"render_passes\",\n        getExecutableDirectory() + \"../render_passes\",\n    };\n\n    std::vector<std::string> deploymentDirectories = {\n        std::string(LAVA_INSTALL_DIR) + \"render_passes\",\n        getExecutableDirectory() + \"../render_passes\"\n    };\n\n    return isDevelopmentMode() ? developmentDirectories : deploymentDirectories;\n}\n\nstatic std::vector<std::string> gShaderDirectories = getInitialShaderDirectories();\nstatic std::vector<std::string> gRenderPassDirectories = getInitialRenderPassDirectories();\n\ninline std::vector<std::string> getInitialDataDirectories() {\n    std::vector<std::string> developmentDirectories = {\n        //std::string(PROJECT_DIR) + \"/Data\",\n        std::string(LAVA_INSTALL_DIR) + \"data\",\n        getExecutableDirectory() + \"../data\",\n    };\n\n    std::vector<std::string> deploymentDirectories = {\n        std::string(LAVA_INSTALL_DIR) + \"data\",\n        getExecutableDirectory() + \"../data\"\n    };\n\n    std::vector<std::string> directories = isDevelopmentMode() ? developmentDirectories : deploymentDirectories;\n\n    // Add development media folder.\n#ifdef _MSC_VER\n    directories.push_back(getExecutableDirectory() + \"/../../../Media\"); // Relative to Visual Studio output folder\n#else\n    directories.push_back(getExecutableDirectory() + \"/../Media\"); // Relative to Makefile output folder\n#endif\n\n    // Add additional media folders.\n    std::string mediaFolders;\n    if (getEnvironmentVariable(\"FALCOR_MEDIA_FOLDERS\", mediaFolders)) {\n        auto folders = splitString(mediaFolders, \";\");\n        directories.insert(directories.end(), folders.begin(), folders.end());\n    }\n\n    return directories;\n}\n\nstatic std::vector<std::string> gDataDirectories = getInitialDataDirectories();\n\nconst std::vector<std::string>& getDataDirectoriesList() {\n    return gDataDirectories;\n}\n\nvoid addDataDirectory(const std::string& dir) {\n    if (std::find(gDataDirectories.begin(), gDataDirectories.end(), dir) == gDataDirectories.end()) {\n        gDataDirectories.push_back(dir);\n    }\n}\n\nvoid removeDataDirectory(const std::string& dir) {\n    auto it = std::find(gDataDirectories.begin(), gDataDirectories.end(), dir);\n    if (it != gDataDirectories.end()) {\n        gDataDirectories.erase(it);\n    }\n}\n\nbool isDevelopmentMode() {\n    static bool initialized = false;\n    static bool devMode = false;\n\n    if (!initialized) {\n        std::string value;\n        #ifdef DEBUG\n        devMode = true;\n        #else\n        devMode = getEnvironmentVariable(\"FALCOR_DEVMODE\", value) && value == \"1\";\n        #endif\n        initialized = true;\n    }\n\n    return devMode;\n}\n\nstd::string canonicalizeFilename(const std::string& filename) {\n    fs::path path(replaceSubstring(filename, \"\\\\\", \"/\"));\n    return fs::exists(path) ? fs::canonical(path).string() : \"\";\n}\n\nbool findFileInDataDirectories(const std::string& filename, std::string& fullPath) {\n    // Check if this is an absolute path\n    if (fs::path(filename).is_absolute()) {\n        fullPath = canonicalizeFilename(filename);\n        return !fullPath.empty(); // Empty fullPath means path doesn't exist\n    }\n\n    for (const auto& dir : gDataDirectories) {\n        fullPath = canonicalizeFilename(dir + '/' + filename);\n        if (doesFileExist(fullPath)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nconst std::vector<std::string>& getShaderDirectoriesList() {\n    return gShaderDirectories;\n}\n\nbool findFileInShaderDirectories(const std::string& filename, std::string& fullPath) {\n    for (const auto& dir : gShaderDirectories) {\n        fullPath = canonicalizeFilename(dir + '/' + filename);\n        if (doesFileExist(fullPath)) {\n            LOG_DBG(\"Shader: %s found as: %s\", filename.c_str(), fullPath.c_str());\n            return true;\n        }\n    }\n    return false;\n}\n\nbool findFileInRenderPassDirectories(const std::string& filename, std::string& fullPath) {\n    for (const auto& dir : gRenderPassDirectories) {\n        fullPath = canonicalizeFilename(dir + '/' + filename);\n        if (doesFileExist(fullPath)) {\n            LOG_DBG(\"RenderPass library: %s found as: %s\", filename.c_str(), fullPath.c_str());\n            return true;\n        }\n    }\n    return false;\n}\n\nbool findAvailableFilename(const std::string& prefix, const std::string& directory, const std::string& extension, std::string& filename) {\n    for (uint32_t i = 0; i < (uint32_t)-1; i++) {\n        std::string newPrefix = prefix + '.' + std::to_string(i);\n        filename = directory + '/' + newPrefix + \".\" + extension;\n\n        if (doesFileExist(filename) == false) {\n            return true;\n        }\n    }\n    should_not_get_here();\n    filename = \"\";\n    return false;\n}\n\nstd::string stripDataDirectories(const std::string& filename) {\n    std::string stripped = filename;\n    std::string canonFile = canonicalizeFilename(filename);\n\n    for (const auto& dir : gDataDirectories) {\n        std::string canonDir = canonicalizeFilename(dir);\n\n        if (canonDir.size() && hasPrefix(canonFile, canonDir, false)) {\n            // canonicalizeFilename adds trailing \\\\ to drive letters and removes them from paths containing folders\n            // The entire prefix directory including the slash should be removed\n            bool trailingSlash = canonDir.back() == '\\\\' || canonDir.back() == '/';\n            size_t len = trailingSlash ? canonDir.length() : canonDir.length() + 1;\n            std::string tmp = canonFile.erase(0, len);\n            \n            if (tmp.length() < stripped.length()) {\n                stripped = tmp;\n            }\n        }\n    }\n\n    return stripped;\n}\n\nstd::string swapFileExtension(const std::string& str, const std::string& currentExtension, const std::string& newExtension) {\n    if (hasSuffix(str, currentExtension)) {\n        std::string ret = str;\n        return (ret.erase(ret.rfind(currentExtension)) + newExtension);\n    } else {\n        return str;\n    }\n}\n\nstd::string getDirectoryFromFile(const std::string& filename) {\n    fs::path path = filename;\n    return path.has_filename() ? path.parent_path().string() : filename;\n}\n\nstd::string getExtensionFromFile(const std::string& filename) {\n    fs::path path = filename;\n    std::string ext;\n    if (path.has_extension()) {\n        // remove the leading '.' that filesystem gives us\n        ext = path.extension().string();\n        if (hasPrefix(ext, \".\"))   ext = ext.substr(1, ext.size());\n    }\n    return ext;\n}\n\nstd::string getFilenameFromPath(const std::string& filename) {\n    return fs::path(filename).filename().string();\n}\n\nstd::string readFile(const std::string& filename) {\n    std::ifstream filestream(filename);\n    std::string str;\n    filestream.seekg(0, std::ios::end);\n    str.reserve(filestream.tellg());\n    filestream.seekg(0, std::ios::beg);\n    str.assign(std::istreambuf_iterator<char>(filestream), std::istreambuf_iterator<char>());\n    return str;\n}\n\n}  // namespace Falcor\n",
			"file": "src/Falcor/Core/Platform/OS.cpp",
			"file_size": 10466,
			"file_write_time": 133352798596867382,
			"settings":
			{
				"buffer_size": 10466,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"left_delete",
					null,
					"AQAAADQJAAAAAAAANAkAAAAAAAAwAQAAIC8vIEZpcnN0IHdlIHNlYXJjaCBpbiBzb3VyY2UgZm9sZGVycy4KICAgICAgICAvL3N0ZDo6c3RyaW5nKFBST0pFQ1RfRElSKSwKICAgICAgICAvL3N0ZDo6c3RyaW5nKFBST0pFQ1RfRElSKSArICIuLi8iLAogICAgICAgIC8vc3RkOjpzdHJpbmcoUFJPSkVDVF9ESVIpICsgIi4uL1Rvb2xzL0ZhbGNvclRlc3QvIiwKICAgICAgICAKICAgICAgICAvLyBUaGVuIHdlIHNlYXJjaCBpbiBkZXBsb3ltZW50IGZvbGRlcnMgKG5lY2Vzc2FyeSB0byBwaWNrdXAgTlZBUEkgYW5kIG90aGVyIHRoaXJkLXBhcnR5IHNoYWRlcnMpLgogICAgICAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA0CQAAAAAAAGQKAAAAAAAAAAAAAAAA8L8"
				],
				[
					4,
					2,
					"left_delete",
					null,
					"AgAAADEJAAAAAAAAMQkAAAAAAAADAAAAICAgLQkAAAAAAAAtCQAAAAAAAAQAAAAgICAg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA0CQAAAAAAADQJAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAC0JAAAAAAAAMQkAAAAAAAAAAAAAMQkAAAAAAAA1CQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAtCQAAAAAAAC0JAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGAJAAAAAAAAYQkAAAAAAAAAAAAAYQkAAAAAAABpCQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABgCQAAAAAAAGAJAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"paste",
					null,
					"AQAAAGkJAAAAAAAAlwkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABpCQAAAAAAAGkJAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"paste",
					null,
					"AgAAAIUJAAAAAAAAjQkAAAAAAAAAAAAAjQkAAAAAAACNCQAAAAAAABAAAAAuLi9yZW5kZXJfcGFzc2Vz",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACFCQAAAAAAAJUJAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAP8JAAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAICgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/CQAAAAAAAP8JAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"paste",
					null,
					"AQAAAAgKAAAAAAAALgoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAICgAAAAAAAAgKAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": ".."
					},
					"AgAAACQKAAAAAAAAJQoAAAAAAAAAAAAAJQoAAAAAAAAmCgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkCgAAAAAAACQKAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": ".."
					},
					"AgAAAIUJAAAAAAAAhgkAAAAAAAAAAAAAhgkAAAAAAACHCQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACFCQAAAAAAAIUJAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJEJAAAAAAAAkgkAAAAAAAAAAAAAkgkAAAAAAACaCQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACRCQAAAAAAAJEJAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"paste",
					null,
					"AQAAAJoJAAAAAAAAxQkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaCQAAAAAAAJoJAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					4,
					"left_delete",
					null,
					"BAAAAMEJAAAAAAAAwQkAAAAAAAABAAAASMAJAAAAAAAAwAkAAAAAAAABAAAAVL8JAAAAAAAAvwkAAAAAAAABAAAAQb4JAAAAAAAAvgkAAAAAAAABAAAAUA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCCQAAAAAAAMIJAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "LA"
					},
					"AgAAAL4JAAAAAAAAvwkAAAAAAAAAAAAAvwkAAAAAAADACQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+CQAAAAAAAL4JAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"insert_completion",
					{
						"completion": "LAVA_HOME",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "LAVA_HOME"
					},
					"AgAAAL4JAAAAAAAAvgkAAAAAAAACAAAATEG+CQAAAAAAAMcJAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADACQAAAAAAAMAJAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMoJAAAAAAAAywkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKCQAAAAAAAMoJAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					4,
					"left_delete",
					null,
					"BAAAAJoJAAAAAAAAmgkAAAAAAAAxAAAAaWYoY29uc3QgY2hhciogZW52X3AgPSBzdGQ6OmdldGVudigiTEFWQV9IT01FIikpIJYJAAAAAAAAlgkAAAAAAAAEAAAAICAgIJIJAAAAAAAAkgkAAAAAAAAEAAAAICAgIJEJAAAAAAAAkQkAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaCQAAAAAAAMsJAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAADkKAAAAAAAAOgoAAAAAAAAAAAAAOgoAAAAAAAA+CgAAAAAAAAAAAAA+CgAAAAAAAD8KAAAAAAAAAAAAAD8KAAAAAAAAQwoAAAAAAAAAAAAAOgoAAAAAAAA6CgAAAAAAAAQAAAAgICAg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5CgAAAAAAADkKAAAAAAAAAAAAAAAAe0A"
				],
				[
					48,
					1,
					"paste",
					null,
					"AQAAAD8KAAAAAAAAcAoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA/CgAAAAAAAD8KAAAAAAAAAAAAAAAA8L8"
				],
				[
					49,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAHAKAAAAAAAAcgoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABwCgAAAAAAAHAKAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAHEKAAAAAAAAcgoAAAAAAAAAAAAAcgoAAAAAAAB2CgAAAAAAAAAAAAB2CgAAAAAAAHcKAAAAAAAAAAAAAHcKAAAAAAAAewoAAAAAAAAAAAAAcgoAAAAAAAByCgAAAAAAAAQAAAAgICAgcgoAAAAAAAB6CgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABxCgAAAAAAAHEKAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "de"
					},
					"AgAAAHoKAAAAAAAAewoAAAAAAAAAAAAAewoAAAAAAAB8CgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB6CgAAAAAAAHoKAAAAAAAAAAAAAAAA8L8"
				],
				[
					54,
					1,
					"insert_completion",
					{
						"completion": "developmentDirectories",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "developmentDirectories"
					},
					"AgAAAHoKAAAAAAAAegoAAAAAAAACAAAAZGV6CgAAAAAAAJAKAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB8CgAAAAAAAHwKAAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": ".p"
					},
					"AgAAAJAKAAAAAAAAkQoAAAAAAAAAAAAAkQoAAAAAAACSCgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACQCgAAAAAAAJAKAAAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					1,
					"insert_completion",
					{
						"completion": "push_back",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "push_back"
					},
					"AgAAAJEKAAAAAAAAkQoAAAAAAAABAAAAcJEKAAAAAAAAmgoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACSCgAAAAAAAJIKAAAAAAAAAAAAAAAA8L8"
				],
				[
					57,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJoKAAAAAAAAnAoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaCgAAAAAAAJoKAAAAAAAAAAAAAAAA8L8"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAJsKAAAAAAAAnAoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACbCgAAAAAAAJsKAAAAAAAAAAAAAAAA8L8"
				],
				[
					59,
					1,
					"left_delete",
					null,
					"AQAAAJsKAAAAAAAAmwoAAAAAAAABAAAAcw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACcCgAAAAAAAJwKAAAAAAAAAAAAAAAA8L8"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "std"
					},
					"AwAAAJsKAAAAAAAAnAoAAAAAAAAAAAAAnAoAAAAAAACdCgAAAAAAAAAAAACdCgAAAAAAAJ4KAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACbCgAAAAAAAJsKAAAAAAAAAAAAAAAA8L8"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "::s"
					},
					"AwAAAJ4KAAAAAAAAnwoAAAAAAAAAAAAAnwoAAAAAAACgCgAAAAAAAAAAAACgCgAAAAAAAKEKAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACeCgAAAAAAAJ4KAAAAAAAAAAAAAAAA8L8"
				],
				[
					62,
					1,
					"insert_completion",
					{
						"completion": "string",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "string"
					},
					"AgAAAKAKAAAAAAAAoAoAAAAAAAABAAAAc6AKAAAAAAAApgoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChCgAAAAAAAKEKAAAAAAAAAAAAAAAA8L8"
				],
				[
					63,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKYKAAAAAAAAqAoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACmCgAAAAAAAKYKAAAAAAAAAAAAAAAA8L8"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAKcKAAAAAAAAqAoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACnCgAAAAAAAKcKAAAAAAAAAAAAAAAA8L8"
				],
				[
					67,
					1,
					"insert_completion",
					{
						"completion": "env_p",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "env_p"
					},
					"AgAAAKcKAAAAAAAApwoAAAAAAAABAAAAZacKAAAAAAAArAoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACoCgAAAAAAAKgKAAAAAAAAAAAAAAAA8L8"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": " +"
					},
					"AgAAAK0KAAAAAAAArgoAAAAAAAAAAAAArgoAAAAAAACvCgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtCgAAAAAAAK0KAAAAAAAAAAAAAAAA8L8"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAK8KAAAAAAAAsAoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvCgAAAAAAAK8KAAAAAAAAAAAAAAAA8L8"
				],
				[
					71,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAALAKAAAAAAAAsgoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwCgAAAAAAALAKAAAAAAAAAAAAAAAA8L8"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "/shaders"
					},
					"CAAAALEKAAAAAAAAsgoAAAAAAAAAAAAAsgoAAAAAAACzCgAAAAAAAAAAAACzCgAAAAAAALQKAAAAAAAAAAAAALQKAAAAAAAAtQoAAAAAAAAAAAAAtQoAAAAAAAC2CgAAAAAAAAAAAAC2CgAAAAAAALcKAAAAAAAAAAAAALcKAAAAAAAAuAoAAAAAAAAAAAAAuAoAAAAAAAC5CgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxCgAAAAAAALEKAAAAAAAAAAAAAAAA8L8"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALsKAAAAAAAAvAoAAAAAAAAAAAAAvAoAAAAAAADECgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7CgAAAAAAALsKAAAAAAAAAAAAAAAA8L8"
				],
				[
					79,
					1,
					"paste",
					null,
					"AQAAAMQKAAAAAAAABQsAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADECgAAAAAAAMQKAAAAAAAAAAAAAAAA8L8"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAAULAAAAAAAABgsAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAFCwAAAAAAAAULAAAAAAAAAAAAAAAA8L8"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALsKAAAAAAAAvAoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7CgAAAAAAALsKAAAAAAAAAAAAAADQhEA"
				],
				[
					90,
					1,
					"paste",
					null,
					"AgAAAMUKAAAAAAAA2goAAAAAAAAAAAAA2goAAAAAAADaCgAAAAAAABYAAABkZXZlbG9wbWVudERpcmVjdG9yaWVz",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADFCgAAAAAAANsKAAAAAAAAAAAAAAAA8L8"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAMsNAAAAAAAAzA0AAAAAAAAAAAAAzA0AAAAAAADQDQAAAAAAAAAAAADQDQAAAAAAANENAAAAAAAAAAAAANENAAAAAAAA1Q0AAAAAAAAAAAAAzA0AAAAAAADMDQAAAAAAAAQAAAAgICAg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLDQAAAAAAAMsNAAAAAAAAAAAAAAAA8L8"
				],
				[
					97,
					1,
					"paste",
					null,
					"AQAAANENAAAAAAAAng4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADRDQAAAAAAANENAAAAAAAAAAAAAAAA8L8"
				],
				[
					111,
					1,
					"paste",
					null,
					"AgAAAEQOAAAAAAAAUQ4AAAAAAAAAAAAAUQ4AAAAAAABRDgAAAAAAAAcAAABzaGFkZXJz",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABEDgAAAAAAAEsOAAAAAAAAAAAAAAAA8L8"
				],
				[
					115,
					1,
					"paste",
					null,
					"AgAAAJQOAAAAAAAAoQ4AAAAAAAAAAAAAoQ4AAAAAAAChDgAAAAAAAAcAAABzaGFkZXJz",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACUDgAAAAAAAJsOAAAAAAAAAAAAAAAA8L8"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAFURAAAAAAAAVhEAAAAAAAAAAAAAVhEAAAAAAABXEQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABVEQAAAAAAAFURAAAAAAAAAAAAAAAA8L8"
				],
				[
					124,
					1,
					"reindent",
					null,
					"AQAAAFYRAAAAAAAAWhEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABWEQAAAAAAAFYRAAAAAAAAAAAAAAAAAAA"
				],
				[
					125,
					1,
					"paste",
					null,
					"AQAAAFoRAAAAAAAANxIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABaEQAAAAAAAFoRAAAAAAAAAAAAAAAA8L8"
				],
				[
					128,
					1,
					"left_delete",
					null,
					"AQAAAFoRAAAAAAAAWhEAAAAAAAAEAAAAICAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeEQAAAAAAAF4RAAAAAAAAAAAAAAAA8L8"
				],
				[
					136,
					1,
					"paste",
					null,
					"AgAAAM0RAAAAAAAA0REAAAAAAAAAAAAA0REAAAAAAADREQAAAAAAAA0AAAByZW5kZXJfcGFzc2Vz",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNEQAAAAAAANoRAAAAAAAAAAAAAAAA8L8"
				],
				[
					140,
					1,
					"paste",
					null,
					"AgAAABQSAAAAAAAAGBIAAAAAAAAAAAAAGBIAAAAAAAAYEgAAAAAAAA0AAAByZW5kZXJfcGFzc2Vz",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAUEgAAAAAAACESAAAAAAAAAAAAAAAA8L8"
				],
				[
					150,
					1,
					"right_delete",
					null,
					"AQAAACwQAAAAAAAALBAAAAAAAAAuAAAALy9zdGQ6OnN0cmluZyhQUk9KRUNUX0RJUikgKyAiL0RhdGEiLAogICAgICAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAsEAAAAAAAAFoQAAAAAAAAAAAAAAAAUkA"
				],
				[
					156,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOsPAAAAAAAA7A8AAAAAAAAAAAAA7A8AAAAAAADwDwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADrDwAAAAAAAOsPAAAAAAAAAAAAAAAA8L8"
				],
				[
					157,
					1,
					"paste",
					null,
					"AQAAAPAPAAAAAAAAHxAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwDwAAAAAAAPAPAAAAAAAAAAAAAAAA8L8"
				],
				[
					158,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAB8QAAAAAAAAIBAAAAAAAAAAAAAAIBAAAAAAAAAkEAAAAAAAAAAAAAAkEAAAAAAAACUQAAAAAAAAAAAAACUQAAAAAAAAKRAAAAAAAAAAAAAAIBAAAAAAAAAgEAAAAAAAAAQAAAAgICAg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfEAAAAAAAAB8QAAAAAAAAAAAAAAAA8L8"
				],
				[
					164,
					1,
					"reindent",
					null,
					"AQAAACAQAAAAAAAAJBAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgEAAAAAAAACAQAAAAAAAAAAAAAAAA8L8"
				],
				[
					165,
					1,
					"paste",
					null,
					"AQAAACQQAAAAAAAAUhAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkEAAAAAAAACQQAAAAAAAAAAAAAAAA8L8"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": "ж"
					},
					"AgAAAFIQAAAAAAAAUxAAAAAAAAAAAAAAVBAAAAAAAABUEAAAAAAAAAQAAAAgICAg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSEAAAAAAAAFIQAAAAAAAAAAAAAAAA8L8"
				],
				[
					169,
					1,
					"insert",
					{
						"characters": "ж"
					},
					"AQAAAB8QAAAAAAAAIBAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfEAAAAAAAAB8QAAAAAAAAAAAAAAAA8L8"
				],
				[
					170,
					1,
					"left_delete",
					null,
					"AQAAAB8QAAAAAAAAHxAAAAAAAAACAAAA0LY",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgEAAAAAAAACAQAAAAAAAAAAAAAAAA8L8"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAB8QAAAAAAAAIBAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfEAAAAAAAAB8QAAAAAAAAAAAAAAAA8L8"
				],
				[
					174,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AgAAAFMQAAAAAAAAVBAAAAAAAAAAAAAAVBAAAAAAAABUEAAAAAAAAAIAAADQtg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABTEAAAAAAAAFQQAAAAAAAAAAAAAAAA8L8"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": "static"
					},
					"BgAAAPAPAAAAAAAA8Q8AAAAAAAAAAAAA8Q8AAAAAAADyDwAAAAAAAAAAAADyDwAAAAAAAPMPAAAAAAAAAAAAAPMPAAAAAAAA9A8AAAAAAAAAAAAA9A8AAAAAAAD1DwAAAAAAAAAAAAD1DwAAAAAAAPYPAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwDwAAAAAAAPAPAAAAAAAAAAAAAAAA8L8"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPYPAAAAAAAA9w8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2DwAAAAAAAPYPAAAAAAAAAAAAAAAA8L8"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": "static"
					},
					"BgAAACwQAAAAAAAALRAAAAAAAAAAAAAALRAAAAAAAAAuEAAAAAAAAAAAAAAuEAAAAAAAAC8QAAAAAAAAAAAAAC8QAAAAAAAAMBAAAAAAAAAAAAAAMBAAAAAAAAAxEAAAAAAAAAAAAAAxEAAAAAAAADIQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAsEAAAAAAAACwQAAAAAAAAAAAAAAAA8L8"
				],
				[
					182,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADIQAAAAAAAAMxAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAyEAAAAAAAADIQAAAAAAAAAAAAAAAA8L8"
				],
				[
					184,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAGMQAAAAAAAAZBAAAAAAAAAAAAAAZBAAAAAAAABlEAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjEAAAAAAAAGMQAAAAAAAAAAAAAADAWEA"
				],
				[
					186,
					1,
					"reindent",
					null,
					"AQAAAGQQAAAAAAAAaBAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABkEAAAAAAAAGQQAAAAAAAAAAAAAAAAAAA"
				],
				[
					187,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAGgQAAAAAAAAaRAAAAAAAAAAAAAAaRAAAAAAAABqEAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoEAAAAAAAAGgQAAAAAAAAAAAAAAAA8L8"
				],
				[
					188,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGoQAAAAAAAAbBAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqEAAAAAAAAGoQAAAAAAAAAAAAAAAA8L8"
				],
				[
					189,
					1,
					"insert",
					{
						"characters": " d"
					},
					"AgAAAGsQAAAAAAAAbBAAAAAAAAAAAAAAbBAAAAAAAABtEAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrEAAAAAAAAGsQAAAAAAAAAAAAAAAA8L8"
				],
				[
					190,
					1,
					"insert_completion",
					{
						"completion": "developmentDirectories",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "developmentDirectories"
					},
					"AgAAAGwQAAAAAAAAbBAAAAAAAAABAAAAZGwQAAAAAAAAghAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABtEAAAAAAAAG0QAAAAAAAAAAAAAAAA8L8"
				],
				[
					191,
					1,
					"insert",
					{
						"characters": ".em"
					},
					"AwAAAIIQAAAAAAAAgxAAAAAAAAAAAAAAgxAAAAAAAACEEAAAAAAAAAAAAACEEAAAAAAAAIUQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCEAAAAAAAAIIQAAAAAAAAAAAAAAAA8L8"
				],
				[
					192,
					1,
					"insert_completion",
					{
						"completion": "empty",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "empty"
					},
					"AgAAAIMQAAAAAAAAgxAAAAAAAAACAAAAZW2DEAAAAAAAAIgQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACFEAAAAAAAAIUQAAAAAAAAAAAAAAAA8L8"
				],
				[
					193,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIgQAAAAAAAAihAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACIEAAAAAAAAIgQAAAAAAAAAAAAAAAA8L8"
				],
				[
					195,
					1,
					"insert",
					{
						"characters": " ||"
					},
					"AwAAAIoQAAAAAAAAixAAAAAAAAAAAAAAixAAAAAAAACMEAAAAAAAAAAAAACMEAAAAAAAAI0QAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACKEAAAAAAAAIoQAAAAAAAAAAAAAAAA8L8"
				],
				[
					196,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAI0QAAAAAAAAjhAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNEAAAAAAAAI0QAAAAAAAAAAAAAAAA8L8"
				],
				[
					197,
					1,
					"insert",
					{
						"characters": "depl"
					},
					"BAAAAI4QAAAAAAAAjxAAAAAAAAAAAAAAjxAAAAAAAACQEAAAAAAAAAAAAACQEAAAAAAAAJEQAAAAAAAAAAAAAJEQAAAAAAAAkhAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACOEAAAAAAAAI4QAAAAAAAAAAAAAAAA8L8"
				],
				[
					198,
					1,
					"insert_completion",
					{
						"completion": "deploymentDirectories",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "deploymentDirectories"
					},
					"AgAAAI4QAAAAAAAAjhAAAAAAAAAEAAAAZGVwbI4QAAAAAAAAoxAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACSEAAAAAAAAJIQAAAAAAAAAAAAAAAA8L8"
				],
				[
					199,
					1,
					"insert",
					{
						"characters": ".em"
					},
					"AwAAAKMQAAAAAAAApBAAAAAAAAAAAAAApBAAAAAAAAClEAAAAAAAAAAAAAClEAAAAAAAAKYQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjEAAAAAAAAKMQAAAAAAAAAAAAAAAA8L8"
				],
				[
					200,
					1,
					"insert_completion",
					{
						"completion": "empty",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "empty"
					},
					"AgAAAKQQAAAAAAAApBAAAAAAAAACAAAAZW2kEAAAAAAAAKkQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACmEAAAAAAAAKYQAAAAAAAAAAAAAAAA8L8"
				],
				[
					201,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKkQAAAAAAAAqxAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpEAAAAAAAAKkQAAAAAAAAAAAAAAAA8L8"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKwQAAAAAAAArRAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsEAAAAAAAAKwQAAAAAAAAAAAAAAAA8L8"
				],
				[
					204,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAK0QAAAAAAAArxAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtEAAAAAAAAK0QAAAAAAAAAAAAAAAA8L8"
				],
				[
					205,
					1,
					"right_delete",
					null,
					"AQAAAK4QAAAAAAAArhAAAAAAAAABAAAAfQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACuEAAAAAAAAK4QAAAAAAAAAAAAAAAA8L8"
				],
				[
					210,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BQAAALcSAAAAAAAAuBIAAAAAAAAAAAAAuBIAAAAAAAC8EgAAAAAAAAAAAAC8EgAAAAAAAL0SAAAAAAAAAAAAALgSAAAAAAAAuBIAAAAAAAAEAAAAICAgILgSAAAAAAAAuBIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3EgAAAAAAALcSAAAAAAAAAAAAAADQhEA"
				],
				[
					213,
					1,
					"indent",
					null,
					"DQAAALAQAAAAAAAAtBAAAAAAAAAAAAAA7BAAAAAAAADwEAAAAAAAAAAAAAAhEQAAAAAAACURAAAAAAAAAAAAAFMRAAAAAAAAVxEAAAAAAAAAAAAAXxEAAAAAAABjEQAAAAAAAAAAAACaEQAAAAAAAJ4RAAAAAAAAAAAAAM8RAAAAAAAA0xEAAAAAAAAAAAAAABIAAAAAAAAEEgAAAAAAAAAAAAAMEgAAAAAAABASAAAAAAAAAAAAAEcSAAAAAAAASxIAAAAAAAAAAAAAkxIAAAAAAACXEgAAAAAAAAAAAADeEgAAAAAAAOISAAAAAAAAAAAAAOgSAAAAAAAA7BIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5EgAAAAAAALAQAAAAAAAAAAAAAAAA8L8"
				],
				[
					215,
					1,
					"left_delete",
					null,
					"AQAAAK4QAAAAAAAArhAAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvEAAAAAAAAK8QAAAAAAAAAAAAAAAA8L8"
				],
				[
					221,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAEMAAAAAAAAAgwAAAAAAAAAAAAAAgwAAAAAAAAGDAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABDAAAAAAAAAEMAAAAAAAAAAAAAAAA8L8"
				],
				[
					222,
					1,
					"paste",
					null,
					"AQAAAAYMAAAAAAAAeAwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAGDAAAAAAAAAYMAAAAAAAAAAAAAAAA8L8"
				],
				[
					223,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHgMAAAAAAAAeQwAAAAAAAAAAAAAeQwAAAAAAAB9DAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4DAAAAAAAAHgMAAAAAAAAAAAAAAAA8L8"
				],
				[
					229,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAH0MAAAAAAAAfgwAAAAAAAAAAAAAfgwAAAAAAACCDAAAAAAAAAAAAAB5DAAAAAAAAHkMAAAAAAAABAAAACAgICA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB9DAAAAAAAAH0MAAAAAAAAAAAAAAAA8L8"
				],
				[
					230,
					1,
					"paste",
					null,
					"AQAAAH4MAAAAAAAAxAwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB+DAAAAAAAAH4MAAAAAAAAAAAAAAAA8L8"
				],
				[
					232,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BQAAAG0PAAAAAAAAbg8AAAAAAAAAAAAAbg8AAAAAAAByDwAAAAAAAAAAAAByDwAAAAAAAHMPAAAAAAAAAAAAAG4PAAAAAAAAbg8AAAAAAAAEAAAAICAgIG4PAAAAAAAAbg8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABtDwAAAAAAAG0PAAAAAAAAAAAAAADQhEA"
				],
				[
					235,
					1,
					"indent",
					null,
					"DgAAAMUMAAAAAAAAyQwAAAAAAAAAAAAAAQ0AAAAAAAAFDQAAAAAAAAAAAABwDQAAAAAAAHQNAAAAAAAAAAAAAK4NAAAAAAAAsg0AAAAAAAAAAAAA6Q0AAAAAAADtDQAAAAAAAAAAAAD1DQAAAAAAAPkNAAAAAAAAAAAAADAOAAAAAAAANA4AAAAAAAAAAAAAbg4AAAAAAAByDgAAAAAAAAAAAACoDgAAAAAAAKwOAAAAAAAAAAAAALQOAAAAAAAAuA4AAAAAAAAAAAAA7w4AAAAAAADzDgAAAAAAAAAAAABEDwAAAAAAAEgPAAAAAAAAAAAAAJgPAAAAAAAAnA8AAAAAAAAAAAAAog8AAAAAAACmDwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABvDwAAAAAAAMUMAAAAAAAAAAAAAAAA8L8"
				],
				[
					240,
					1,
					"right_delete",
					null,
					"AQAAAM0MAAAAAAAAzQwAAAAAAAAZAAAAc3RkOjp2ZWN0b3I8c3RkOjpzdHJpbmc+IA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmDAAAAAAAAM0MAAAAAAAAAAAAAAAA8L8"
				],
				[
					243,
					23,
					"right_delete",
					null,
					"FwAAAOQNAAAAAAAA5A0AAAAAAAABAAAAc+QNAAAAAAAA5A0AAAAAAAABAAAAdOQNAAAAAAAA5A0AAAAAAAABAAAAZOQNAAAAAAAA5A0AAAAAAAABAAAAOuQNAAAAAAAA5A0AAAAAAAABAAAAOuQNAAAAAAAA5A0AAAAAAAABAAAAduQNAAAAAAAA5A0AAAAAAAABAAAAZeQNAAAAAAAA5A0AAAAAAAABAAAAY+QNAAAAAAAA5A0AAAAAAAABAAAAdOQNAAAAAAAA5A0AAAAAAAABAAAAb+QNAAAAAAAA5A0AAAAAAAABAAAAcuQNAAAAAAAA5A0AAAAAAAABAAAAPOQNAAAAAAAA5A0AAAAAAAABAAAAc+QNAAAAAAAA5A0AAAAAAAABAAAAdOQNAAAAAAAA5A0AAAAAAAABAAAAZOQNAAAAAAAA5A0AAAAAAAABAAAAOuQNAAAAAAAA5A0AAAAAAAABAAAAOuQNAAAAAAAA5A0AAAAAAAABAAAAc+QNAAAAAAAA5A0AAAAAAAABAAAAdOQNAAAAAAAA5A0AAAAAAAABAAAAcuQNAAAAAAAA5A0AAAAAAAABAAAAaeQNAAAAAAAA5A0AAAAAAAABAAAAbuQNAAAAAAAA5A0AAAAAAAABAAAAZw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADkDQAAAAAAAOQNAAAAAAAAAAAAAAAAUkA"
				],
				[
					244,
					2,
					"right_delete",
					null,
					"AgAAAOQNAAAAAAAA5A0AAAAAAAABAAAAPuQNAAAAAAAA5A0AAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADkDQAAAAAAAOQNAAAAAAAAAAAAAAAA8L8"
				],
				[
					247,
					1,
					"right_delete",
					null,
					"AQAAAIIRAAAAAAAAghEAAAAAAAAZAAAAc3RkOjp2ZWN0b3I8c3RkOjpzdHJpbmc+IA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCEQAAAAAAAJsRAAAAAAAAAAAAAAAA8L8"
				],
				[
					249,
					24,
					"right_delete",
					null,
					"GAAAABgSAAAAAAAAGBIAAAAAAAABAAAAcxgSAAAAAAAAGBIAAAAAAAABAAAAdBgSAAAAAAAAGBIAAAAAAAABAAAAZBgSAAAAAAAAGBIAAAAAAAABAAAAOhgSAAAAAAAAGBIAAAAAAAABAAAAOhgSAAAAAAAAGBIAAAAAAAABAAAAdhgSAAAAAAAAGBIAAAAAAAABAAAAZRgSAAAAAAAAGBIAAAAAAAABAAAAYxgSAAAAAAAAGBIAAAAAAAABAAAAdBgSAAAAAAAAGBIAAAAAAAABAAAAbxgSAAAAAAAAGBIAAAAAAAABAAAAchgSAAAAAAAAGBIAAAAAAAABAAAAPBgSAAAAAAAAGBIAAAAAAAABAAAAcxgSAAAAAAAAGBIAAAAAAAABAAAAdBgSAAAAAAAAGBIAAAAAAAABAAAAZBgSAAAAAAAAGBIAAAAAAAABAAAAOhgSAAAAAAAAGBIAAAAAAAABAAAAOhgSAAAAAAAAGBIAAAAAAAABAAAAcxgSAAAAAAAAGBIAAAAAAAABAAAAdBgSAAAAAAAAGBIAAAAAAAABAAAAchgSAAAAAAAAGBIAAAAAAAABAAAAaRgSAAAAAAAAGBIAAAAAAAABAAAAbhgSAAAAAAAAGBIAAAAAAAABAAAAZxgSAAAAAAAAGBIAAAAAAAABAAAAPg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAYEgAAAAAAABgSAAAAAAAAAAAAAAAAUkA"
				],
				[
					250,
					1,
					"right_delete",
					null,
					"AQAAABgSAAAAAAAAGBIAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAYEgAAAAAAABgSAAAAAAAAAAAAAAAA8L8"
				],
				[
					256,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAPcIAAAAAAAA+AgAAAAAAAAAAAAA+AgAAAAAAAD8CAAAAAAAAAAAAAD8CAAAAAAAAP0IAAAAAAAAAAAAAP0IAAAAAAAAAQkAAAAAAAAAAAAA+AgAAAAAAAD4CAAAAAAAAAQAAAAgICAg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3CAAAAAAAAPcIAAAAAAAAAAAAAAAA8L8"
				],
				[
					257,
					1,
					"paste",
					null,
					"AQAAAP0IAAAAAAAAuwkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD9CAAAAAAAAP0IAAAAAAAAAAAAAAAA8L8"
				],
				[
					260,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BQAAANALAAAAAAAA0QsAAAAAAAAAAAAA0QsAAAAAAADVCwAAAAAAAAAAAADVCwAAAAAAANYLAAAAAAAAAAAAANELAAAAAAAA0QsAAAAAAAAEAAAAICAgINELAAAAAAAA0QsAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADQCwAAAAAAANALAAAAAAAAAAAAAADQhEA"
				],
				[
					263,
					1,
					"indent",
					null,
					"DQAAALwJAAAAAAAAwAkAAAAAAAAAAAAA9QkAAAAAAAD5CQAAAAAAAAAAAAAtCgAAAAAAADEKAAAAAAAAAAAAAGIKAAAAAAAAZgoAAAAAAAAAAAAAbgoAAAAAAAByCgAAAAAAAAAAAACmCgAAAAAAAKoKAAAAAAAAAAAAAN4KAAAAAAAA4goAAAAAAAAAAAAAEwsAAAAAAAAXCwAAAAAAAAAAAAAfCwAAAAAAACMLAAAAAAAAAAAAAFoLAAAAAAAAXgsAAAAAAAAAAAAAqQsAAAAAAACtCwAAAAAAAAAAAAD3CwAAAAAAAPsLAAAAAAAAAAAAAAEMAAAAAAAABQwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSCwAAAAAAALwJAAAAAAAAAAAAAAAA8L8"
				],
				[
					268,
					22,
					"right_delete",
					null,
					"FgAAAMQJAAAAAAAAxAkAAAAAAAABAAAAc8QJAAAAAAAAxAkAAAAAAAABAAAAdMQJAAAAAAAAxAkAAAAAAAABAAAAZMQJAAAAAAAAxAkAAAAAAAABAAAAOsQJAAAAAAAAxAkAAAAAAAABAAAAOsQJAAAAAAAAxAkAAAAAAAABAAAAdsQJAAAAAAAAxAkAAAAAAAABAAAAZcQJAAAAAAAAxAkAAAAAAAABAAAAY8QJAAAAAAAAxAkAAAAAAAABAAAAdMQJAAAAAAAAxAkAAAAAAAABAAAAb8QJAAAAAAAAxAkAAAAAAAABAAAAcsQJAAAAAAAAxAkAAAAAAAABAAAAPMQJAAAAAAAAxAkAAAAAAAABAAAAZsQJAAAAAAAAxAkAAAAAAAABAAAAc8QJAAAAAAAAxAkAAAAAAAABAAAAOsQJAAAAAAAAxAkAAAAAAAABAAAAOsQJAAAAAAAAxAkAAAAAAAABAAAAcMQJAAAAAAAAxAkAAAAAAAABAAAAYcQJAAAAAAAAxAkAAAAAAAABAAAAdMQJAAAAAAAAxAkAAAAAAAABAAAAaMQJAAAAAAAAxAkAAAAAAAABAAAAPsQJAAAAAAAAxAkAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADECQAAAAAAAMQJAAAAAAAAAAAAAAAA8L8"
				],
				[
					270,
					21,
					"right_delete",
					null,
					"FQAAAGAKAAAAAAAAYAoAAAAAAAABAAAAc2AKAAAAAAAAYAoAAAAAAAABAAAAdGAKAAAAAAAAYAoAAAAAAAABAAAAZGAKAAAAAAAAYAoAAAAAAAABAAAAOmAKAAAAAAAAYAoAAAAAAAABAAAAOmAKAAAAAAAAYAoAAAAAAAABAAAAdmAKAAAAAAAAYAoAAAAAAAABAAAAZWAKAAAAAAAAYAoAAAAAAAABAAAAY2AKAAAAAAAAYAoAAAAAAAABAAAAdGAKAAAAAAAAYAoAAAAAAAABAAAAb2AKAAAAAAAAYAoAAAAAAAABAAAAcmAKAAAAAAAAYAoAAAAAAAABAAAAPGAKAAAAAAAAYAoAAAAAAAABAAAAZmAKAAAAAAAAYAoAAAAAAAABAAAAc2AKAAAAAAAAYAoAAAAAAAABAAAAOmAKAAAAAAAAYAoAAAAAAAABAAAAOmAKAAAAAAAAYAoAAAAAAAABAAAAcGAKAAAAAAAAYAoAAAAAAAABAAAAYWAKAAAAAAAAYAoAAAAAAAABAAAAdGAKAAAAAAAAYAoAAAAAAAABAAAAaGAKAAAAAAAAYAoAAAAAAAABAAAAPg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABgCgAAAAAAAGAKAAAAAAAAAAAAAAAAUkA"
				],
				[
					271,
					1,
					"right_delete",
					null,
					"AQAAAGAKAAAAAAAAYAoAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABgCgAAAAAAAGAKAAAAAAAAAAAAAAAA8L8"
				],
				[
					277,
					1,
					"paste",
					null,
					"AgAAABAJAAAAAAAAGAkAAAAAAAAAAAAAGAkAAAAAAAAYCQAAAAAAAAsAAABzdGQ6OnN0cmluZw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQCQAAAAAAABsJAAAAAAAAAAAAAAAA8L8"
				],
				[
					280,
					1,
					"paste",
					null,
					"AgAAAEkJAAAAAAAAUQkAAAAAAAAAAAAAUQkAAAAAAABRCQAAAAAAAAsAAABzdGQ6OnN0cmluZw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABUCQAAAAAAAEkJAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABRCQAAAAAAAFEJAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "Searching 59 files for \"USE_OPENCV\" (case sensitive)\n\n0 matches\n\nSearching 1308 files for \"OpenCV_INCLUDE_DIR\" (case sensitive)\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/cmake/modules/FindOpenCV.cmake:\n   10  # variable or an environment variable).\n   11  \n   12: find_path (OpenCV_INCLUDE_DIR\n   13             NAMES opencv4/opencv2/opencv.hpp opencv2/opencv.hpp\n   14             PATHS\n   ..\n   19             )\n   20  \n   21: set (_ocv_include_root \"${OpenCV_INCLUDE_DIR}\")\n   22: if (OpenCV_INCLUDE_DIR AND EXISTS \"${OpenCV_INCLUDE_DIR}/opencv4/opencv2/core/version.hpp\")\n   23:     set (OpenCV_INCLUDE_DIR \"${OpenCV_INCLUDE_DIR}/opencv4\")\n   24  endif ()\n   25: set (_ocv_version_file \"${OpenCV_INCLUDE_DIR}/opencv2/core/version.hpp\")\n   26  if (EXISTS \"${_ocv_version_file}\")\n   27      file (STRINGS \"${_ocv_version_file}\" TMP REGEX \"^#define CV_VERSION_EPOCH .*$\")\n   ..\n   68  include (FindPackageHandleStandardArgs)\n   69  FIND_PACKAGE_HANDLE_STANDARD_ARGS (OpenCV\n   70:                 REQUIRED_VARS OpenCV_LIBS OpenCV_INCLUDE_DIR OpenCV_VERSION\n   71                  VERSION_VAR   OpenCV_VERSION )\n   72  \n   73  if (OPENCV_FOUND)\n   74:     set (OpenCV_INCLUDES ${OpenCV_INCLUDE_DIR})\n   75      set (OpenCV_LIBRARIES ${OpenCV_LIBS})\n   76  endif ()\n   77  \n   78: MARK_AS_ADVANCED (OpenCV_INCLUDE_DIR OpenCV_LIBS)\n   79  unset (_ocv_version_file)\n   80  unset (_ocv_include_root)\n\n10 matches in 1 file\n\n\nSearching 1308 files for \"OpenCV_LIBS\" (case sensitive)\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/cmake/modules/FindOpenCV.cmake:\n   62                    HINTS ${libdirs})\n   63      if (${component}_lib)\n   64:         set (OpenCV_LIBS ${OpenCV_LIBS} ${${component}_lib})\n   65      endif ()\n   66  endforeach ()\n   ..\n   68  include (FindPackageHandleStandardArgs)\n   69  FIND_PACKAGE_HANDLE_STANDARD_ARGS (OpenCV\n   70:                 REQUIRED_VARS OpenCV_LIBS OpenCV_INCLUDE_DIR OpenCV_VERSION\n   71                  VERSION_VAR   OpenCV_VERSION )\n   72  \n   73  if (OPENCV_FOUND)\n   74      set (OpenCV_INCLUDES ${OpenCV_INCLUDE_DIR})\n   75:     set (OpenCV_LIBRARIES ${OpenCV_LIBS})\n   76  endif ()\n   77  \n   78: MARK_AS_ADVANCED (OpenCV_INCLUDE_DIR OpenCV_LIBS)\n   79  unset (_ocv_version_file)\n   80  unset (_ocv_include_root)\n\n5 matches in 1 file\n\n\nSearching 1308 files for \"OpenCV\" (case sensitive)\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/CHANGES.md:\n  645    (2.2.2)\n  646  * Avoid possible link errors by fully hiding IBA functions taking IplImage\n  647:   parameters, when no OpenCV headers are encountered. #2568 (2.2.2)\n  648  * In (obsolete) FindOpenImageIO.cmake, avoid CMake warnings by changing\n  649    the name `OPENIMAGEIO_FOUND` -> `OpenImageIO_FOUND`. #2578 (2.2.3)\n  ...\n 1793        as having unasociated alpha already, they will not bracket the color\n 1794        conversion with the requested unpremult/premult. #1864 (1.9.2)\n 1795:     * Updated the OpenCV interoperability with new functions to_OpenCV (make\n 1796:       an ImageBuf out of a cv::Mat) and from_OpenCV (fill in a cv::Mat with\n 1797        the contents of an ImageBuf). Deprecated the old from_IplImage and\n 1798:       to_IplImage, which are very OpenCV-1.x-centric. (2.0.2)\n 1799  * **ImageCache/TextureSystem:**\n 1800      * ImageCache and TextureSystem now have `close(filename)` and\n ....\n 2156  * Fixes for Windows when making Unicode builds, and fix Plugin::dlopen\n 2157    on Windows to properly support UTF-8 filenames. #1454 (2.0.1)\n 2158: * Support added for OpenCV 4.0. (2.0.1)\n 2159  \n 2160  Developer goodies / internals:\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/INSTALL.md:\n   45         through 2021)\n   46       * Note that OpenVDB 8.0+ requires C++14 or higher.\n   47:  * If you want support for converting to and from OpenCV data structures,\n   48     or for capturing images from a camera:\n   49:      * OpenCV 2.x, 3.x, or 4.x (tested through 4.5)\n   50   * If you want support for GIF images:\n   51       * giflib >= 4.1 (tested through 5.2; 5.0+ is strongly recommended for\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/Makefile:\n  394  \t@echo \"      Note that it is case sensitive! The list of package names is:\"\n  395  \t@echo \"          DCMTK  FFmpeg  Field3D  Freetype  GIF  JPEGTurbo\"\n  396: \t@echo \"          LibRaw  OpenColorIO  OpenCV  OpenGL  OpenJpeg  OpenVDB\"\n  397  \t@echo \"          PTex  R3DSDK  TBB  TIFF  Webp\"\n  398  \t@echo \"  Finding and Using Dependencies:\"\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/.github/workflows/ci.yml:\n  498    linux-oldest:\n  499      # Oldest versions of the dependencies that we can muster, and various\n  500:     # things disabled (no SSE, OCIO, or OpenCV, don't embed plugins).\n  501      name: \"Linux oldest/hobbled: gcc4.8/C++11 py2.7 boost-1.66 exr-2.2 no-sse no-ocio\"\n  502      runs-on: ubuntu-latest\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/cmake/externalpackages.cmake:\n  166  checked_find_package (OpenColorIO\n  167                     DEFINITIONS  -DUSE_OCIO=1 -DUSE_OPENCOLORIO=1)\n  168: checked_find_package (OpenCV\n  169                     DEFINITIONS  -DUSE_OPENCV=1)\n  170  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/cmake/modules/FindOpenCV.cmake:\n    1: # - Find OpenCV\n    2: # Find the OpenCV library\n    3  # This module defines\n    4: #  OpenCV_VERSION, the version string of OpenCV\n    5: #  OpenCV_INCLUDES, where to find header files\n    6: #  OpenCV_LIBRARIES, the libraries needed to use OpenCV\n    7: #  OpenCV_DEFINITIONS, the definitions needed to use OpenCV\n    8  #\n    9: # You can provide a location hint with OpenCV_ROOT (either a defined CMake\n   10  # variable or an environment variable).\n   11  \n   12: find_path (OpenCV_INCLUDE_DIR\n   13             NAMES opencv4/opencv2/opencv.hpp opencv2/opencv.hpp\n   14             PATHS\n   ..\n   19             )\n   20  \n   21: set (_ocv_include_root \"${OpenCV_INCLUDE_DIR}\")\n   22: if (OpenCV_INCLUDE_DIR AND EXISTS \"${OpenCV_INCLUDE_DIR}/opencv4/opencv2/core/version.hpp\")\n   23:     set (OpenCV_INCLUDE_DIR \"${OpenCV_INCLUDE_DIR}/opencv4\")\n   24  endif ()\n   25: set (_ocv_version_file \"${OpenCV_INCLUDE_DIR}/opencv2/core/version.hpp\")\n   26  if (EXISTS \"${_ocv_version_file}\")\n   27      file (STRINGS \"${_ocv_version_file}\" TMP REGEX \"^#define CV_VERSION_EPOCH .*$\")\n   ..\n   36      string (REGEX MATCHALL \"[0-9]+\" CV_VERSION_REVISION ${TMP})\n   37      if (CV_VERSION_EPOCH)\n   38:         set (OpenCV_VERSION \"${CV_VERSION_EPOCH}.${CV_VERSION_MAJOR}.${CV_VERSION_MINOR}\")\n   39      else ()\n   40:         set (OpenCV_VERSION \"${CV_VERSION_MAJOR}.${CV_VERSION_MINOR}.${CV_VERSION_REVISION}\")\n   41      endif ()\n   42  endif ()\n   ..\n   50               )\n   51  \n   52: if (NOT ${OpenCV_VERSION} VERSION_LESS 4.0.0)\n   53      set (opencv_components opencv_core opencv_imgproc opencv_videoio)\n   54: elseif (NOT ${OpenCV_VERSION} VERSION_LESS 3.0.0)\n   55      set (opencv_components opencv_videoio opencv_imgproc opencv_core)\n   56: else (NOT ${OpenCV_VERSION} VERSION_LESS 2.0.0)\n   57      set (opencv_components opencv_highgui opencv_imgproc opencv_core)\n   58  endif ()\n   ..\n   62                    HINTS ${libdirs})\n   63      if (${component}_lib)\n   64:         set (OpenCV_LIBS ${OpenCV_LIBS} ${${component}_lib})\n   65      endif ()\n   66  endforeach ()\n   67  \n   68  include (FindPackageHandleStandardArgs)\n   69: FIND_PACKAGE_HANDLE_STANDARD_ARGS (OpenCV\n   70:                 REQUIRED_VARS OpenCV_LIBS OpenCV_INCLUDE_DIR OpenCV_VERSION\n   71:                 VERSION_VAR   OpenCV_VERSION )\n   72  \n   73  if (OPENCV_FOUND)\n   74:     set (OpenCV_INCLUDES ${OpenCV_INCLUDE_DIR})\n   75:     set (OpenCV_LIBRARIES ${OpenCV_LIBS})\n   76  endif ()\n   77  \n   78: MARK_AS_ADVANCED (OpenCV_INCLUDE_DIR OpenCV_LIBS)\n   79  unset (_ocv_version_file)\n   80  unset (_ocv_include_root)\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/doc/CHANGES-1.x.md:\n 1222     the flag to compile with libc++ is now always called USE_LIBCPLUSPLUS,\n 1223     not sometimes OIIO_BUILD_LIBCPLUSPLUS. #1404 (1.7.3)\n 1224:  * Overhaul OpenCV dependency finding and make it work with OpenCV 3.x.\n 1225     #1409 (1.7.3/1.6.13)\n 1226   * Allow custom JPEG_PATH to hint location of JPEG library. #1411\n ....\n 1355  * Remove old embedded Ptex, now must find Ptex externally. Also modified\n 1356    the build scripts to correctly handle newer versions of Ptex. #1400\n 1357: * Overhaul OpenCV dependency finding and make it work with OpenCV 3.x. #1409\n 1358  * Allow custom JPEG_PATH to hint location of JPEG library. #1411\n 1359  \n ....\n 1875   * Fix signed/unsigned comparison error. #1186 (1.6.4)\n 1876   * Top-level Makefile option USE_OPENCV=0 to turn off even searching for\n 1877:    OpenCV components. #1194 (1.6.4/1.5.18)\n 1878   * If a system-installed (external) PTex implementation is found, use\n 1879     it.  Only use the \"bundled\" version if no other is found. Also add a\n ....\n 2022    read with very old versions of libtiff. #1185\n 2023  * Top-level Makefile option USE_OPENCV=0 to turn off even searching for\n 2024:   OpenCV components. #1194\n 2025  \n 2026  Release 1.5.17 (13 Jul 2015) -- compared to 1.5.16)\n ....\n 3608      tile cache rather than unique locks).\n 3609  * New ImageBufAlgo functions:\n 3610:     * `fromIplImage()` : converts/copies an OpenCV image to an ImageBuf.\n 3611:     * `capture_image()` : captures from a camera device (only if OpenCV is found)\n 3612      * `over()` : Porter/Duff \"over\" compositing operation\n 3613      * `render_text()` : render text into an image\n ....\n 3617      * `channels()` : select, shuffle, truncate, or extend channels of an image.\n 3618  * New oiiotool commands:\n 3619:     * `--capture` : captures from a camera device (only if OpenCV is found)\n 3620      * `--pattern` constant : creates a constant-color image\n 3621      * `--over` : Porter/Duff \"over\" compositing operation\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/doc/imagebufalgo.rst:\n 1752  |\n 1753  \n 1754: OpenCV interoperability is performed by the `from_OpenCV()` and\n 1755: `to_OpenCV()` functions:\n 1756  \n 1757: .. doxygenfunction:: from_OpenCV\n 1758: .. doxygenfunction:: to_OpenCV\n 1759  \n 1760  .. doxygenfunction:: capture_image(int, TypeDesc)\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/doc/imagebufalgo.tex:\n 2642  \n 2643  \n 2644: \\apiitem{ImageBuf {\\ce from_OpenCV} (const cv::Mat\\& mat, TypeDesc convert=TypeUnknown, \\\\\n 2645          \\bigspc  ROI roi=\\{\\}, int nthreads=0)}\n 2646: \\index{ImageBufAlgo!from_OpenCV} \\indexapi{from_OpenCV}\n 2647: \\index{OpenCV}\n 2648: Convert an OpenCV {\\cf cv::Mat} into an \\ImageBuf, copying the pixels\n 2649  (optionally converting to the pixel data type specified by {\\cf convert}, if\n 2650  not {\\cf UNKNOWN}, which means to preserve the original data type if\n 2651  possible).  Return true if ok, false if it couldn't figure out how to\n 2652  make the conversion from Mat to ImageBuf. If OpenImageIO was compiled\n 2653: without OpenCV support, this function will return an empty image with\n 2654  error message set.\n 2655  \n ....\n 2663  \n 2664  \n 2665: \\apiitem{bool {\\ce to_OpenCV} (cv::Mat\\& dst, const ImageBuf\\& src,\\\\\n 2666          \\bigspc  ROI roi=\\{\\}, int nthreads=0)}\n 2667: \\index{ImageBufAlgo!to_OpenCV} \\indexapi{to_OpenCV}\n 2668: \\index{OpenCV}\n 2669: Construct an OpenCV {\\cf cv::Mat} containing the contents of \\ImageBuf src,\n 2670  and return true. If it is not possible, or if OpenImageIO was compiled\n 2671: without OpenCV support, then return false. Note that OpenCV only supports up\n 2672  to 4 channels, so images with more than 4 channels will be truncated in the\n 2673  conversion.\n ....\n 2686  Capture a still image from a designated camera.  If able to do so,\n 2687  store the image in {\\cf dst} and return {\\cf true}.  If there is no such device,\n 2688: or support for camera capture is not available (such as if OpenCV\n 2689  support was not enabled at compile time), return {\\cf false} and do not\n 2690  alter {\\cf dst}.\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/include/OpenImageIO/imagebufalgo.h:\n   24  \n   25  #if !defined(__OPENCV_CORE_TYPES_H__) && !defined(OPENCV_CORE_TYPES_H)\n   26: struct IplImage;  // Forward declaration; used by Intel Image lib & OpenCV\n   27  namespace cv {\n   28      class Mat;\n   ..\n 2053  \n 2054  \n 2055: /// Convert an OpenCV cv::Mat into an ImageBuf, copying the pixels\n 2056  /// (optionally converting to the pixel data type specified by `convert`, if\n 2057  /// not UNKNOWN, which means to preserve the original data type if\n 2058  /// possible).  Return true if ok, false if it couldn't figure out how to\n 2059  /// make the conversion from Mat to ImageBuf. If OpenImageIO was compiled\n 2060: /// without OpenCV support, this function will return an empty image with\n 2061  /// error message set.\n 2062  OIIO_API ImageBuf\n 2063: from_OpenCV (const cv::Mat& mat, TypeDesc convert = TypeUnknown,\n 2064               ROI roi={}, int nthreads=0);\n 2065  \n 2066: /// Construct an OpenCV cv::Mat containing the contents of ImageBuf src, and\n 2067  /// return true. If it is not possible, or if OpenImageIO was compiled\n 2068: /// without OpenCV support, then return false. Note that OpenCV only\n 2069  /// supports up to 4 channels, so >4 channel images will be truncated in the\n 2070  /// conversion.\n 2071: OIIO_API bool to_OpenCV (cv::Mat& dst, const ImageBuf& src,\n 2072                           ROI roi={}, int nthreads=0);\n 2073  \n ....\n 2075  /// Capture a still image from a designated camera.  If able to do so,\n 2076  /// store the image in dst and return true.  If there is no such device,\n 2077: /// or support for camera capture is not available (such as if OpenCV\n 2078  /// support was not enabled at compile time), return false and do not\n 2079  /// alter dst.\n ....\n 2093  \n 2094  #if defined(__OPENCV_CORE_TYPES_H__) || defined(OPENCV_CORE_TYPES_H)\n 2095: // These declarations are only visible if the OpenCV headers have already\n 2096  // been encountered.\n 2097  \n 2098  #ifndef DOXYGEN_SHOULD_SKIP_THIS\n 2099: // DEPRECATED(2.0). The OpenCV 1.x era IplImage-based functions should be\n 2100: // avoided, giving preference to from_OpenCV.\n 2101  ImageBuf OIIO_API from_IplImage (const IplImage *ipl,\n 2102                                   TypeDesc convert=TypeUnknown);\n ....\n 2108  }\n 2109  \n 2110: // DEPRECATED(2.0). The OpenCV 1.x era IplImage-based functions should be\n 2111: // avoided, giving preference to from_OpenCV.\n 2112  OIIO_API IplImage* to_IplImage (const ImageBuf &src);\n 2113  #endif  // DOXYGEN_SHOULD_SKIP_THIS\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/libOpenImageIO/CMakeLists.txt:\n  124                                  ${CMAKE_INSTALL_FULL_INCLUDEDIR}\n  125                                  ${IMATH_INCLUDES} ${OPENEXR_INCLUDES}\n  126:                                 ${OpenCV_INCLUDES}\n  127                              PRIVATE\n  128                                  ${ROBINMAP_INCLUDES}\n  ...\n  154              # For OpenEXR <= 2.3:\n  155              ${OPENEXR_LIBRARIES}\n  156:             ${OpenCV_LIBRARIES}\n  157              ${SANITIZE_LIBRARIES}\n  158              ${format_plugin_libs} # Add all the target link libraries from the plugins\n  ...\n  243  \n  244      add_executable (imagebufalgo_test imagebufalgo_test.cpp)\n  245:     target_link_libraries (imagebufalgo_test PRIVATE OpenImageIO ${OpenCV_LIBRARIES})\n  246      set_target_properties (imagebufalgo_test PROPERTIES FOLDER \"Unit Tests\")\n  247      add_test (unit_imagebufalgo ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/imagebufalgo_test)\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/libOpenImageIO/imagebufalgo_opencv.cpp:\n    5  \n    6  /// \\file\n    7: /// Implementation of ImageBufAlgo algorithms related to OpenCV.\n    8: /// These are nonfunctional if OpenCV is not found at build time.\n    9  \n   10  #include <OpenImageIO/platform.h>\n   ..\n   79      TypeDesc dstformat = (convert != TypeDesc::UNKNOWN) ? convert : srcformat;\n   80      ImageSpec spec(ipl->width, ipl->height, ipl->nChannels, dstformat);\n   81:     // N.B. The OpenCV headers say that ipl->alphaChannel,\n   82:     // ipl->colorModel, and ipl->channelSeq are ignored by OpenCV.\n   83  \n   84      if (ipl->dataOrder != IPL_DATA_ORDER_PIXEL) {\n   85:         // We don't handle separate color channels, and OpenCV doesn't either\n   86          dst.errorf(\"Unsupported IplImage data order %d\", (int)ipl->dataOrder);\n   87          return dst;\n   ..\n   98                    dstformat, spec.pixel_bytes(), spec.scanline_bytes(), 0);\n   99      // FIXME - honor dataOrder.  I'm not sure if it is ever used by\n  100:     // OpenCV.  Fix when it becomes a problem.\n  101  \n  102:     // OpenCV uses BGR ordering\n  103      // FIXME: what do they do with alpha?\n  104      if (spec.nchannels >= 3) {\n  ...\n  119  #else\n  120      dst.errorf(\n  121:         \"fromIplImage not supported -- no OpenCV support at compile time\");\n  122  #endif\n  123  \n  ...\n  158      } else if (spec.format == TypeDesc(TypeDesc::HALF)) {\n  159          dstFormat = IPL_DEPTH_32F;\n  160:         // OpenCV does not support half types. Switch to float instead.\n  161          dstSpecFormat = TypeDesc(TypeDesc::FLOAT);\n  162      } else if (spec.format == TypeDesc(TypeDesc::FLOAT)) {\n  ...\n  194      }\n  195  \n  196:     // OpenCV uses BGR ordering\n  197      if (spec.nchannels == 3) {\n  198          cvCvtColor(ipl, ipl, CV_RGB2BGR);\n  ...\n  229  \n  230  ImageBuf\n  231: ImageBufAlgo::from_OpenCV(const cv::Mat& mat, TypeDesc convert, ROI roi,\n  232                            int nthreads)\n  233  {\n  234:     pvt::LoggedTimer logtime(\"IBA::from_OpenCV\");\n  235      ImageBuf dst;\n  236  #ifdef USE_OPENCV\n  ...\n  244      case CV_64F: srcformat = TypeDesc::DOUBLE; break;\n  245      default:\n  246:         dst.errorf(\"Unsupported OpenCV data type, depth=%d\", mat.depth());\n  247          return dst;\n  248      }\n  ...\n  262                             nthreads);\n  263  \n  264:     // OpenCV uses BGR ordering\n  265      if (spec.nchannels >= 3) {\n  266          OIIO_MAYBE_UNUSED bool ok = true;\n  267:         OIIO_DISPATCH_TYPES(ok, \"from_OpenCV R/B swap\", RBswap, dstformat, dst,\n  268                              roi, nthreads);\n  269      }\n  ...\n  271  #else\n  272      dst.errorf(\n  273:         \"from_OpenCV() not supported -- no OpenCV support at compile time\");\n  274  #endif\n  275  \n  ...\n  280  \n  281  bool\n  282: ImageBufAlgo::to_OpenCV(cv::Mat& dst, const ImageBuf& src, ROI roi,\n  283                          int nthreads)\n  284  {\n  285:     pvt::LoggedTimer logtime(\"IBA::to_OpenCV\");\n  286  #ifdef USE_OPENCV\n  287      if (!roi.defined())\n  ...\n  336      }\n  337  \n  338:     // OpenCV uses BGR ordering\n  339      if (chans == 3) {\n  340          cv::cvtColor(mat, mat, cv::COLOR_RGB2BGR);\n  ...\n  396          auto cvcam = cameras[cameranum];\n  397          if (!cvcam) {\n  398:             dst.errorf(\"Could not create a capture camera (OpenCV error)\");\n  399              return dst;  // failed somehow\n  400          }\n  401          (*cvcam) >> frame;\n  402          if (frame.empty()) {\n  403:             dst.errorf(\"Could not cvQueryFrame (OpenCV error)\");\n  404              return dst;  // failed somehow\n  405          }\n  ...\n  407  \n  408      logtime.stop();\n  409:     dst = from_OpenCV(frame, convert);\n  410      logtime.start();\n  411      if (!dst.has_error()) {\n  ...\n  423  #else\n  424      dst.errorf(\n  425:         \"capture_image not supported -- no OpenCV support at compile time\");\n  426  #endif\n  427      return dst;\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/libOpenImageIO/imagebufalgo_test.cpp:\n  943  {\n  944  #if USE_OPENCV\n  945:     std::cout << \"Testing OpenCV round trip\\n\";\n  946:     // Make a gradient RGB image, convert to OpenCV cv::Mat, then convert\n  947      // that back to ImageBuf, make sure the round trip has the same pixels\n  948      // as the original image.\n  ...\n  952                               ROI(0, 64, 0, 64, 0, 1, 0, 3));\n  953      cv::Mat mat;\n  954:     ImageBufAlgo::to_OpenCV(mat, src);\n  955      OIIO_CHECK_ASSERT(!mat.empty());\n  956:     ImageBuf dst = ImageBufAlgo::from_OpenCV(mat);\n  957      OIIO_CHECK_ASSERT(!dst.has_error());\n  958      auto comp = ImageBufAlgo::compare(src, dst, 0.0f, 0.0f);\n\n119 matches across 13 files\n\n\nSearching 1308 files for \"squish\" (case sensitive)\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/CHANGES.md:\n  855    to auto-download if pybind11 is found on the system already but is not an\n  856    adequately new version. #2453\n  857: * If libsquish is found on the system at build time, use it, rather than\n  858    the \"embedded\" copy. This can improve build times of OIIO, and also helps\n  859    us comply with Debian packaging rules that forbid using embedded versions\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/conanfile.txt:\n   25  # ptex\n   26  # qt5\n   27: # libsquish\n   28  \n   29  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/INSTALL.md:\n   56       * Avoid libheif 1.10 on Mac, it is very broken. Libheif 1.11 is fine.\n   57   * If you want support for DDS files:\n   58:      * libsquish >= 1.13 (tested through 1.15)\n   59       * But... if not found on the system, an embedded version will be used.\n   60   * If you want support for DICOM medical image files:\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/THIRD-PARTY.md:\n  105  * Squish\n  106    Copyright 2006 Simon Brown si@sjbrown.co.uk\n  107:   http://sjbrown.co.uk/?code=squish\n  108  \n  109  * PugiXML http://pugixml.org/ https://github.com/zeux/pugixml\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/ext/fmt/ChangeLog.rst:\n  202         log(__FILE__, __LINE__, FMT_STRING(format), __VA_ARGS__)\n  203  \n  204:      MY_LOG(\"invalid squishiness: {}\", 42);\n  205  \n  206  * Replaced ``snprintf`` fallback with a faster internal IEEE 754 ``float`` and\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/ext/fmt/doc/api.rst:\n   93        log(__FILE__, __LINE__, FMT_STRING(format), __VA_ARGS__)\n   94  \n   95:     MY_LOG(\"invalid squishiness: {}\", 42);\n   96  \n   97  Note that ``vlog`` is not parameterized on argument types which improves compile\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/build-scripts/gh-installdeps.bash:\n   34          libtiff-dev libgif-dev libpng-dev libraw-dev libwebp-dev \\\n   35          libavcodec-dev libavformat-dev libswscale-dev libavutil-dev \\\n   36:         dcmtk libsquish-dev libopenvdb-dev \\\n   37          libfreetype6-dev \\\n   38          locales wget \\\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/build-scripts/gh-win-installdeps.bash:\n   67  # vcpkg install libraw:x64-windows\n   68  # vcpkg install openjpeg:x64-windows\n   69: # vcpkg install libsquish:x64-windows\n   70  # # vcpkg install ffmpeg:x64-windows   # takes FOREVER!\n   71  # # vcpkg install webp:x64-windows  # No such vcpkg package?a\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/build-scripts/install_homebrew_deps.bash:\n   33  brew install --display-times -q libpng giflib webp jpeg-turbo openjpeg\n   34  brew install --display-times -q freetype libraw dcmtk pybind11 numpy || true\n   35: brew install --display-times -q ffmpeg libheif libsquish ptex || true\n   36  brew install --display-times -q tbb || true\n   37  # No OpenVDB until it's upgraded to use Imath 3\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/cmake/compiler.cmake:\n  446                                 \"src/dpx.imageio/libdpx/*\"\n  447                                 \"src/cineon.imageio/libcineon/*\"\n  448:                                \"src/dds.imageio/squish/*\"\n  449                                 \"src/gif.imageio/gif.h\"\n  450                                 \"src/hdr.imageio/rgbe.cpp\"\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/cmake/externalpackages.cmake:\n  300  \n  301  ###########################################################################\n  302: # libsquish\n  303  \n  304  option (USE_EMBEDDED_LIBSQUISH\n  305:         \"Force use of embedded Libsquish, even if external is found\" OFF)\n  306  if (NOT USE_EMBEDDED_LIBSQUISH)\n  307:     checked_find_package (Libsquish)\n  308  endif ()\n  309  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/cmake/modules/FindLibsquish.cmake:\n    1: # Module to find Libsquish\n    2  #\n    3  # This module will first look into the directories defined by the variables:\n    4: #   - Libsquish_ROOT, LIBSQUISH_INCLUDE_PATH, LIBSQUISH_LIBRARY_PATH\n    5  #\n    6  # This module defines the following variables:\n    7  #\n    8: # Libsquish_FOUND            True if Libsquish was found.\n    9: # LIBSQUISH_INCLUDES         Where to find Libsquish headers\n   10: # LIBSQUISH_LIBRARIES        List of libraries to link against when using Libsquish\n   11: # LIBSQUISH_VERSION          Version of Libsquish (e.g., 3.6.2)\n   12  \n   13  include (FindPackageHandleStandardArgs)\n   14  \n   15: find_path (LIBSQUISH_INCLUDE_DIR squish.h\n   16             HINTS\n   17                 ${LIBSQUISH_INCLUDE_PATH}\n   18                 ENV LIBSQUISH_INCLUDE_PATH\n   19:            DOC \"The directory where Libsquish headers reside\")\n   20  \n   21: find_library (LIBSQUISH_LIBRARY squish\n   22                HINTS\n   23                    ${LIBSQUISH_LIBRARY_PATH}\n   24                    ENV LIBSQUISH_LIBRARY_PATH\n   25:               DOC \"The Libsquish libraries\")\n   26  \n   27: find_package_handle_standard_args (Libsquish\n   28      REQUIRED_VARS\n   29          LIBSQUISH_INCLUDE_DIR\n   ..\n   31      )\n   32  \n   33: if (Libsquish_FOUND)\n   34      set (LIBSQUISH_INCLUDES ${LIBSQUISH_INCLUDE_DIR})\n   35      set (LIBSQUISH_LIBRARIES ${LIBSQUISH_LIBRARY})\n   36  \n   37:     if (NOT TARGET Libsquish::Libsquish)\n   38:         add_library(Libsquish::Libsquish UNKNOWN IMPORTED)\n   39:         set_target_properties(Libsquish::Libsquish PROPERTIES\n   40              INTERFACE_INCLUDE_DIRECTORIES \"${LIBSQUISH_INCLUDES}\")\n   41  \n   42:         set_property(TARGET Libsquish::Libsquish APPEND PROPERTY\n   43              IMPORTED_LOCATION \"${LIBSQUISH_LIBRARIES}\")\n   44      endif ()\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/CMakeLists.txt:\n    3  # https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md\n    4  \n    5: if (Libsquish_FOUND)\n    6:     # External libsquish was found -- use it\n    7      add_oiio_plugin (ddsinput.cpp\n    8:                      LINK_LIBRARIES Libsquish::Libsquish\n    9                       )\n   10  else ()\n   11:     # No external libsquish was found -- use the embedded version.\n   12:     add_oiio_plugin (ddsinput.cpp squish/alpha.cpp squish/clusterfit.cpp\n   13:                  squish/colourblock.cpp squish/colourfit.cpp squish/colourset.cpp\n   14:                  squish/maths.cpp squish/rangefit.cpp squish/singlecolourfit.cpp\n   15:                  squish/squish.cpp\n   16:         INCLUDE_DIRS \"${CMAKE_CURRENT_SOURCE_DIR}/squish\")\n   17  endif ()\n   18  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/ddsinput.cpp:\n   14  \n   15  #include \"dds_pvt.h\"\n   16: #include \"squish.h\"\n   17  \n   18  OIIO_PLUGIN_NAMESPACE_BEGIN\n   ..\n  253      // determine the number of channels we have\n  254      if (m_dds.fmt.flags & DDS_PF_FOURCC) {\n  255:         // squish decompresses everything to RGBA anyway\n  256          /*if (m_dds.fmt.fourCC == DDS_4CC_DXT1)\n  257              m_nchans = 3; // no alpha in DXT1\n  ...\n  351                      // only check for DXT1 - all other formats have same block\n  352                      // size\n  353:                     len = squish::GetStorageRequirements(w, h,\n  354                                                           m_dds.fmt.fourCC\n  355                                                                   == DDS_4CC_DXT1\n  356:                                                              ? squish::kDxt1\n  357:                                                              : squish::kDxt5);\n  358                  else\n  359                      len = w * h * d * m_Bpp;\n  ...\n  365              if (m_dds.fmt.flags & DDS_PF_FOURCC)\n  366                  // only check for DXT1 - all other formats have same block size\n  367:                 len = squish::GetStorageRequirements(w, h,\n  368                                                       m_dds.fmt.fourCC\n  369                                                               == DDS_4CC_DXT1\n  370:                                                          ? squish::kDxt1\n  371:                                                          : squish::kDxt5);\n  372              else\n  373                  len = w * h * d * m_Bpp;\n  ...\n  514          int flags = 0;\n  515          switch (m_dds.fmt.fourCC) {\n  516:         case DDS_4CC_DXT1: flags = squish::kDxt1; break;\n  517          // DXT2 and 3 are the same, only 2 has pre-multiplied alpha\n  518          case DDS_4CC_DXT2:\n  519:         case DDS_4CC_DXT3: flags = squish::kDxt3; break;\n  520          // DXT4 and 5 are the same, only 4 has pre-multiplied alpha\n  521          case DDS_4CC_DXT4:\n  522:         case DDS_4CC_DXT5: flags = squish::kDxt5; break;\n  523          }\n  524          // create source buffer\n  525:         std::vector<squish::u8> tmp(\n  526:             squish::GetStorageRequirements(w, h, flags));\n  527          // load image into buffer\n  528          if (!fread(&tmp[0], tmp.size(), 1))\n  529              return false;\n  530          // decompress image\n  531:         squish::DecompressImage(dst, w, h, &tmp[0], flags);\n  532          tmp.clear();\n  533          // correct pre-multiplied alpha, if necessary\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/alpha.cpp:\n   28  #include <algorithm>\n   29  \n   30: namespace squish {\n   31  \n   32  static int FloatToInt( float a, int limit )\n   ..\n  347  }\n  348  \n  349: } // namespace squish\n  350  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/alpha.h:\n   27  #define SQUISH_ALPHA_H\n   28  \n   29: #include \"squish.h\"\n   30  \n   31: namespace squish {\n   32  \n   33  void CompressAlphaDxt3( u8 const* rgba, int mask, void* block );\n   ..\n   37  void DecompressAlphaDxt5( u8* rgba, void const* block );\n   38  \n   39: } // namespace squish\n   40  \n   41  #endif // ndef SQUISH_ALPHA_H\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/ChangeLog:\n   12  1.8\n   13  * Switched from using floor to trunc for much better SSE performance (again)\n   14: * Xcode build now expects libpng in /usr/local for extra/squishpng\n   15  \n   16  1.7\n   ..\n   37  1.2\n   38  * Added provably optimal single colour compressor\n   39: * Added extra/squishgen.cpp that generates single colour lookup tables\n   40  \n   41  1.1\n   ..\n   45  * Added CompressImage function\n   46  * Added DecompressImage function\n   47: * Moved squishtool.cpp to extra/squishpng.cpp\n   48: * Added extra/squishtest.cpp\n   49  \n   50  1.0\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/clusterfit.cpp:\n   30  #include <cfloat>\n   31  \n   32: namespace squish {\n   33  \n   34  ClusterFit::ClusterFit( ColourSet const* colours, int flags, float* metric ) \n   ..\n  390  }\n  391  \n  392: } // namespace squish\n  393  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/clusterfit.h:\n   28  #define SQUISH_CLUSTERFIT_H\n   29  \n   30: #include \"squish.h\"\n   31  #include \"maths.h\"\n   32  #include \"simd.h\"\n   33  #include \"colourfit.h\"\n   34  \n   35: namespace squish {\n   36  \n   37  class ClusterFit : public ColourFit\n   ..\n   57  };\n   58  \n   59: } // namespace squish\n   60  \n   61  #endif // ndef SQUISH_CLUSTERFIT_H\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/colourblock.cpp:\n   26  #include \"colourblock.h\"\n   27  \n   28: namespace squish {\n   29  \n   30  static int FloatToInt( float a, int limit )\n   ..\n  212  }\n  213  \n  214: } // namespace squish\n  215  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/colourblock.h:\n   27  #define SQUISH_COLOURBLOCK_H\n   28  \n   29: #include \"squish.h\"\n   30  #include \"maths.h\"\n   31  \n   32: namespace squish {\n   33  \n   34  void WriteColourBlock3( Vec3::Arg start, Vec3::Arg end, u8 const* indices, void* block );\n   ..\n   37  void DecompressColour( u8* rgba, void const* block, bool isDxt1 );\n   38  \n   39: } // namespace squish\n   40  \n   41  #endif // ndef SQUISH_COLOURBLOCK_H\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/colourfit.cpp:\n   27  #include \"colourset.h\"\n   28  \n   29: namespace squish {\n   30  \n   31  ColourFit::ColourFit( ColourSet const* colours, int flags ) \n   ..\n   52  }\n   53  \n   54: } // namespace squish\n   55  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/colourfit.h:\n   27  #define SQUISH_COLOURFIT_H\n   28  \n   29: #include \"squish.h\"\n   30  #include <climits>\n   31  #include \"maths.h\"\n   32  \n   33: namespace squish {\n   34  \n   35  class ColourSet;\n   ..\n   51  };\n   52  \n   53: } // namespace squish\n   54  \n   55  #endif // ndef SQUISH_COLOURFIT_H\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/colourset.cpp:\n   26  #include \"colourset.h\"\n   27  \n   28: namespace squish {\n   29  \n   30  ColourSet::ColourSet( u8 const* rgba, int mask, int flags )\n   ..\n  119  }\n  120  \n  121: } // namespace squish\n  122  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/colourset.h:\n   27  #define SQUISH_COLOURSET_H\n   28  \n   29: #include \"squish.h\"\n   30  #include \"maths.h\"\n   31  \n   32: namespace squish {\n   33  \n   34  /*! @brief Represents a set of block colours\n   ..\n   54  };\n   55  \n   56: } // namespace squish\n   57  \n   58  #endif // ndef SQUISH_COLOURSET_H\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/config.h:\n   27  #define SQUISH_CONFIG_H\n   28  \n   29: // Set to 1 when building squish to use Altivec instructions.\n   30  #ifndef SQUISH_USE_ALTIVEC\n   31  #define SQUISH_USE_ALTIVEC 0\n   32  #endif\n   33  \n   34: // Set to 1 or 2 when building squish to use SSE or SSE2 instructions.\n   35  #ifndef SQUISH_USE_SSE\n   36  #define SQUISH_USE_SSE 0\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/maths.cpp:\n   34  #include <cfloat>\n   35  \n   36: namespace squish {\n   37  \n   38  Sym3x3 ComputeWeightedCovariance( int n, Vec3 const* points, float const* weights )\n   ..\n  257  #endif\n  258  \n  259: } // namespace squish\n  260  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/maths.h:\n   31  #include \"config.h\"\n   32  \n   33: namespace squish {\n   34  \n   35  class Vec3\n   ..\n  229  Vec3 ComputePrincipleComponent( Sym3x3 const& matrix );\n  230  \n  231: } // namespace squish\n  232  \n  233  #endif // ndef SQUISH_MATHS_H\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/rangefit.cpp:\n   29  #include <cfloat>\n   30  \n   31: namespace squish {\n   32  \n   33  RangeFit::RangeFit( ColourSet const* colours, int flags, float* metric ) \n   ..\n  199  }\n  200  \n  201: } // namespace squish\n  202  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/rangefit.h:\n   27  #define SQUISH_RANGEFIT_H\n   28  \n   29: #include \"squish.h\"\n   30  #include \"colourfit.h\"\n   31  #include \"maths.h\"\n   32  \n   33: namespace squish {\n   34  \n   35  class ColourSet;\n   ..\n   50  };\n   51  \n   52: } // squish\n   53  \n   54  #endif // ndef SQUISH_RANGEFIT_H\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/README:\n    2  -------\n    3  \n    4: The squish library is distributed under the terms and conditions of the MIT\n    5  license. This license is specified at the top of each source file and must be\n    6  preserved in its entirety.\n    .\n   31  Feedback can be sent to Simon Brown (the developer) at si@sjbrown.co.uk\n   32  \n   33: New releases are announced on the squish library homepage at\n   34: http://sjbrown.co.uk/?code=squish\n   35  \n   36  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/simd_float.h:\n   29  #include <algorithm>\n   30  \n   31: namespace squish {\n   32  \n   33  #define VEC4_CONST( X ) Vec4( X )\n   ..\n  178  };\n  179  \n  180: } // namespace squish\n  181  \n  182  #endif // ndef SQUISH_SIMD_FLOAT_H\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/simd_sse.h:\n   38  \t( ( x ) | ( ( y ) << 2 ) | ( ( z ) << 4 ) | ( ( w ) << 6 ) )\n   39  \n   40: namespace squish {\n   41  \n   42  #define VEC4_CONST( X ) Vec4( X )\n   ..\n  176  };\n  177  \n  178: } // namespace squish\n  179  \n  180  #endif // ndef SQUISH_SIMD_SSE_H\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/simd_ve.h:\n   30  #undef bool\n   31  \n   32: namespace squish {\n   33  \n   34  #define VEC4_CONST( X ) Vec4( ( vector float ){ X } )\n   ..\n  162  };\n  163  \n  164: } // namespace squish\n  165  \n  166  #endif // ndef SQUISH_SIMD_VE_H\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/singlecolourfit.cpp:\n   28  #include \"colourblock.h\"\n   29  \n   30: namespace squish {\n   31  \n   32  struct SourceBlock\n   ..\n  170  }\n  171  \n  172: } // namespace squish\n  173  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/singlecolourfit.h:\n   27  #define SQUISH_SINGLECOLOURFIT_H\n   28  \n   29: #include \"squish.h\"\n   30  #include \"colourfit.h\"\n   31  \n   32: namespace squish {\n   33  \n   34  class ColourSet;\n   ..\n   54  };\n   55  \n   56: } // namespace squish\n   57  \n   58  #endif // ndef SQUISH_SINGLECOLOURFIT_H\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/squish.cpp:\n   24     -------------------------------------------------------------------------- */\n   25     \n   26: #include \"squish.h\"\n   27  #include \"colourset.h\"\n   28  #include \"maths.h\"\n   ..\n   33  #include \"singlecolourfit.h\"\n   34  \n   35: namespace squish {\n   36  \n   37  static int FixFlags( int flags )\n   ..\n  228  }\n  229  \n  230: } // namespace squish\n  231  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/squish.h:\n   27  #define SQUISH_H\n   28  \n   29: //! All squish API functions live in this namespace.\n   30: namespace squish {\n   31  \n   32  // -----------------------------------------------------------------------------\n   ..\n  144  \t\n  145  \tThis method is an inline that calls CompressMasked with a mask of 0xffff, \n  146: \tprovided for compatibility with older versions of squish.\n  147  */\n  148  inline void Compress( u8 const* rgba, void* block, int flags, float* metric = 0 )\n  ...\n  226  \tcontiguous array of 3 floats.\n  227  \t\n  228: \tInternally this function calls squish::CompressMasked for each block, which \n  229  \tallows for pixels outside the image to take arbitrary values. The function \n  230: \tsquish::GetStorageRequirements can be called to compute the amount of memory\n  231  \tto allocate for the compressed output.\n  232  */\n  ...\n  252  \tare ignored.\n  253  \n  254: \tInternally this function calls squish::Decompress for each block.\n  255  */\n  256  void DecompressImage( u8* rgba, int width, int height, void const* blocks, int flags );\n  ...\n  258  // -----------------------------------------------------------------------------\n  259  \n  260: } // namespace squish\n  261  \n  262  #endif // ndef SQUISH_H\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/doc/oiiointro.rst:\n  225  \n  226  * The SHA-1 implemenation we use is public domain by Dominik Reichl  http://www.dominik-reichl.de/\n  227: * Squish © 2006 Simon Brown, MIT license. http://sjbrown.co.uk/?code=squish\n  228  * PugiXML © 2006-2009 by Arseny Kapoulkine (based on work © 2003 Kristen Wegner), MIT license. http://pugixml.org/\n  229  * DPX reader/writer © 2009 Patrick A. Palmer, BSD 3-clause license. https://github.com/patrickpalmer/dpx}\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/doc/oiiointro.tex:\n  228  Dominik Reichl \\\\ \\url{http://www.dominik-reichl.de/}\n  229  \\item Squish \\copyright\\ 2006 Simon Brown, MIT license.\n  230: \\url{http://sjbrown.co.uk/?code=squish}\n  231  \\item PugiXML \\copyright\\ 2006-2009 by Arseny Kapoulkine (based on work\n  232  \\copyright\\ 2003 Kristen Wegner), MIT license. \\url{http://pugixml.org/}\n\n131 matches across 40 files\n\n\nSearching 1308 files for \"USE_DDS\" (case sensitive)\n\n0 matches\n\nSearching 1308 files for \"dds.imageio\" (case sensitive)\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/cmake/compiler.cmake:\n  446                                 \"src/dpx.imageio/libdpx/*\"\n  447                                 \"src/cineon.imageio/libcineon/*\"\n  448:                                \"src/dds.imageio/squish/*\"\n  449                                 \"src/gif.imageio/gif.h\"\n  450                                 \"src/hdr.imageio/rgbe.cpp\"\n\n1 match in 1 file\n",
			"settings":
			{
				"buffer_size": 42080,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"contents": "# Copyright 2008-present Contributors to the OpenImageIO project.\n# SPDX-License-Identifier: BSD-3-Clause\n# https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md\n\n###########################################################################\n#\n# This file contains compiler-related detection, options, and actions.\n#\n# Each option declaration is kept close to the related logic for that\n# option.\n#\n###########################################################################\n\n\n###########################################################################\n# Print some basic status about the system and compiler\n#\nif (VERBOSE)\n    message (STATUS \"CMAKE_SYSTEM_NAME      = ${CMAKE_SYSTEM_NAME}\")\n    message (STATUS \"CMAKE_SYSTEM_VERSION   = ${CMAKE_SYSTEM_VERSION}\")\n    message (STATUS \"CMAKE_SYSTEM_PROCESSOR = ${CMAKE_SYSTEM_PROCESSOR}\")\nendif ()\nmessage (STATUS \"CMAKE_CXX_COMPILER     = ${CMAKE_CXX_COMPILER}\")\nmessage (STATUS \"CMAKE_CXX_COMPILER_ID  = ${CMAKE_CXX_COMPILER_ID}\")\n\n\n###########################################################################\n# C++ language standard\n#\nset (CMAKE_CXX_STANDARD 11 CACHE STRING\n     \"C++ standard to prefer (11, 14, 17, 20, etc.)\")\nset (CMAKE_CXX_STANDARD_REQUIRED ON)\nset (CMAKE_CXX_EXTENSIONS OFF)\nmessage (STATUS \"Building for C++${CMAKE_CXX_STANDARD}\")\n\n\n###########################################################################\n# Figure out which compiler we're using\n#\n\nif (CMAKE_COMPILER_IS_GNUCC)\n    execute_process (COMMAND ${CMAKE_CXX_COMPILER} -dumpversion\n                     OUTPUT_VARIABLE GCC_VERSION\n                     OUTPUT_STRIP_TRAILING_WHITESPACE)\n    if (VERBOSE)\n        message (STATUS \"Using gcc ${GCC_VERSION} as the compiler\")\n    endif ()\nelse ()\n    set (GCC_VERSION 0)\nendif ()\n\nif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" OR CMAKE_CXX_COMPILER MATCHES \"[Cc]lang\")\n    # If using any flavor of clang, set CMAKE_COMPILER_IS_CLANG. If it's\n    # Apple's variety, set CMAKE_COMPILER_IS_APPLECLANG and\n    # APPLECLANG_VERSION_STRING, otherwise for generic clang set\n    # CLANG_VERSION_STRING.\n    set (CMAKE_COMPILER_IS_CLANG 1)\n    EXECUTE_PROCESS( COMMAND ${CMAKE_CXX_COMPILER} --version OUTPUT_VARIABLE clang_full_version_string )\n    if (clang_full_version_string MATCHES \"Apple\")\n        set (CMAKE_CXX_COMPILER_ID \"AppleClang\")\n        set (CMAKE_COMPILER_IS_APPLECLANG 1)\n        string (REGEX REPLACE \".* version ([0-9]+\\\\.[0-9]+).*\" \"\\\\1\" APPLECLANG_VERSION_STRING ${clang_full_version_string})\n        if (VERBOSE)\n            message (STATUS \"The compiler is Clang: ${CMAKE_CXX_COMPILER_ID} version ${APPLECLANG_VERSION_STRING}\")\n        endif ()\n    else ()\n        string (REGEX REPLACE \".* version ([0-9]+\\\\.[0-9]+).*\" \"\\\\1\" CLANG_VERSION_STRING ${clang_full_version_string})\n        if (VERBOSE)\n            message (STATUS \"The compiler is Clang: ${CMAKE_CXX_COMPILER_ID} version ${CLANG_VERSION_STRING}\")\n        endif ()\n    endif ()\nelseif (CMAKE_CXX_COMPILER_ID MATCHES \"Intel\")\n    set (CMAKE_COMPILER_IS_INTEL 1)\n    if (VERBOSE)\n        message (STATUS \"Using Intel as the compiler\")\n    endif ()\nendif ()\n\n\n###########################################################################\n# Turn on more detailed warnings and optionally consider warnings as errors\n#\nif (${PROJECT_NAME}_SUPPORTED_RELEASE)\n    option (STOP_ON_WARNING \"Stop building if there are any compiler warnings\" OFF)\nelse ()\n    option (STOP_ON_WARNING \"Stop building if there are any compiler warnings\" ON)\nendif()\noption (EXTRA_WARNINGS \"Enable lots of extra pedantic warnings\" OFF)\nif (NOT MSVC)\n    add_compile_options (\"-Wall\")\n    if (EXTRA_WARNINGS)\n        add_compile_options (\"-Wextra\")\n    endif ()\n    if (STOP_ON_WARNING OR DEFINED ENV{CI})\n        add_compile_options (\"-Werror\")\n        # N.B. Force CI builds to use -Werror, even if STOP_ON_WARNING has\n        # been switched off by default, which we may do in release\n        # branches.\n    endif ()\nendif ()\n\n\n###########################################################################\n# Control symbol visibility\n#\n# We try hard to make default symbol visibility be \"hidden\", except for\n# symbols that are part of the public API, which should be marked in the\n# source code with a special decorator, OIIO_API.\n#\n# Additionally, there is a hidesymbols.map file that on some platforms may\n# give more fine-grained control for hiding symbols, because sometimes\n# dependent libraries may not be well behaved and need extra hiding.\n#\nset (CXX_VISIBILITY_PRESET \"hidden\" CACHE STRING \"Symbol visibility (hidden or default\")\noption (VISIBILITY_INLINES_HIDDEN \"Hide symbol visibility of inline functions\" ON)\nset (VISIBILITY_MAP_FILE \"${PROJECT_SOURCE_DIR}/src/build-scripts/hidesymbols.map\" CACHE FILEPATH \"Visibility map file\")\nset (C_VISIBILITY_PRESET ${CXX_VISIBILITY_PRESET})\nif (${CXX_VISIBILITY_PRESET} STREQUAL \"hidden\" AND\n    (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_CLANG) AND\n    (CMAKE_SYSTEM_NAME MATCHES \"Linux|kFreeBSD\" OR CMAKE_SYSTEM_NAME STREQUAL \"GNU\"))\n    # Linux/FreeBSD/Hurd: also hide all the symbols of dependent libraries\n    # to prevent clashes if an app using this project is linked against\n    # other versions of our dependencies.\n    set (VISIBILITY_MAP_COMMAND \"-Wl,--version-script=${VISIBILITY_MAP_FILE}\")\nendif ()\n\n\n###########################################################################\n# Compiler-specific and platform-specific options.\n#\n# Here is where we add a whole bunch of options for specific compilers or\n# platforms. Usually this is to suppress false-positive compiler warnings.\n#\nif (CMAKE_COMPILER_IS_CLANG OR CMAKE_COMPILER_IS_APPLECLANG)\n    # Clang-specific options\n    add_compile_options (\"-Wno-unused-function\")\n    add_compile_options (\"-Wno-overloaded-virtual\")\n    add_compile_options (\"-Wno-unneeded-internal-declaration\")\n    add_compile_options (\"-Wno-unused-private-field\")\n    add_compile_options (\"-Wno-tautological-compare\")\n    # disable warning about unused command line arguments\n    add_compile_options (\"-Qunused-arguments\")\n    # Don't warn if we ask it not to warn about warnings it doesn't know\n    add_compile_options (\"-Wunknown-warning-option\")\n    if (CLANG_VERSION_STRING VERSION_GREATER_EQUAL 3.6 OR\n        APPLECLANG_VERSION_STRING VERSION_GREATER 6.1)\n        add_compile_options (\"-Wno-unused-local-typedefs\")\n    endif ()\n    if (CLANG_VERSION_STRING VERSION_GREATER_EQUAL 3.9)\n        # Don't warn about using unknown preprocessor symbols in `#if`\n        add_compile_options (\"-Wno-expansion-to-defined\")\n    endif ()\nendif ()\n\nif (CMAKE_COMPILER_IS_GNUCC AND NOT (CMAKE_COMPILER_IS_CLANG OR CMAKE_COMPILER_IS_APPLECLANG))\n    # gcc specific options\n    add_compile_options (\"-Wno-unused-local-typedefs\")\n    add_compile_options (\"-Wno-unused-result\")\n    if (NOT ${GCC_VERSION} VERSION_LESS 7.0)\n        add_compile_options (\"-Wno-aligned-new\")\n        add_compile_options (\"-Wno-noexcept-type\")\n    endif ()\nendif ()\n\nif (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_CLANG)\n    # Options common to gcc and clang\n\n    # Ensure this macro is set for stdint.h\n    add_definitions (\"-D__STDC_LIMIT_MACROS\")\n    add_definitions (\"-D__STDC_CONSTANT_MACROS\")\n    # this allows native instructions to be used for sqrtf instead of a function call\n    add_compile_options (\"-fno-math-errno\")\nendif ()\n\nif (MSVC)\n    # Microsoft specific options\n    add_compile_options (/W1)\n    add_definitions (-D_CRT_SECURE_NO_DEPRECATE)\n    add_definitions (-D_CRT_SECURE_NO_WARNINGS)\n    add_definitions (-D_CRT_NONSTDC_NO_WARNINGS)\n    add_definitions (-D_SCL_SECURE_NO_WARNINGS)\n    add_definitions (-DJAS_WIN_MSVC_BUILD)\nendif (MSVC)\n\nif (${CMAKE_SYSTEM_NAME} STREQUAL \"FreeBSD\"\n    AND ${CMAKE_SYSTEM_PROCESSOR} STREQUAL \"i386\")\n    # For FreeBSD, minimum arch of i586 is needed for atomic cpu instructions\n    add_compile_options (-march=i586)\nendif ()\n\n\n###########################################################################\n# Use ccache if found\n#\n# This can really speed up compilation by caching object files that have\n# been compiled previously with identical arguments and inputs. Putting this\n# logic here makes it work even if the user is unaware of ccache. If it's\n# not found on the system, it will simply be silently not used.\noption (USE_CCACHE \"Use ccache if found\" ON)\nfind_program (CCACHE_FOUND ccache)\nif (CCACHE_FOUND AND USE_CCACHE)\n    if (CMAKE_COMPILER_IS_CLANG AND USE_QT AND (NOT DEFINED ENV{CCACHE_CPP2}))\n        message (STATUS \"Ignoring ccache because clang + Qt + env CCACHE_CPP2 is not set\")\n    else ()\n        set_property (GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)\n        set_property (GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)\n    endif ()\nendif ()\n\n\n###########################################################################\n# Option to force use of libc++ (the LLVM project's alternate C++ standard\n# library). Currently this only has an effect if using clang as the\n# compiler. Maybe it would also work for g++? Investigate.\noption (USE_LIBCPLUSPLUS \"Compile with clang libc++\" OFF)\nif (USE_LIBCPLUSPLUS AND CMAKE_COMPILER_IS_CLANG)\n    message (STATUS \"Using libc++\")\n    set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -stdlib=libc++\")\nendif ()\n\n\n###########################################################################\n# For gcc >= 5, allow an option to force which version of the C++ ABI to\n# use (mostly this affects the implementation of std::string).\n#\n# FIXME: In theory, this should also be needed for clang, if compiling with\n# the gcc libstdc++ toolchain. In practice, I could not get things to build\n# with clang properly when using this option, and I haven't yet seen a case\n# where it's needed. We can return to this and fix for clang if it becomes a\n# legit problem later.\n#\nset (GLIBCXX_USE_CXX11_ABI \"\" CACHE STRING \"For gcc, use the new C++11 library ABI (0|1)\")\nif (CMAKE_COMPILER_IS_GNUCC AND ${GCC_VERSION} VERSION_GREATER_EQUAL 5.0)\n    if (NOT ${GLIBCXX_USE_CXX11_ABI} STREQUAL \"\")\n        add_definitions (\"-D_GLIBCXX_USE_CXX11_ABI=${GLIBCXX_USE_CXX11_ABI}\")\n    endif ()\nendif ()\n\n\n###########################################################################\n# SIMD and machine architecture options.\n#\n# The USE_SIMD option may be set to a comma-separated list of machine /\n# instruction set options, such as \"avx3,f16c\". The list will be parsed and\n# the proper compiler directives added to generate code for those ISA\n# capabilities.\n#\nset (USE_SIMD \"\" CACHE STRING \"Use SIMD directives (0, sse2, sse3, ssse3, sse4.1, sse4.2, avx, avx2, avx512f, f16c, aes)\")\nset (SIMD_COMPILE_FLAGS \"\")\nif (NOT USE_SIMD STREQUAL \"\")\n    message (STATUS \"Compiling with SIMD level ${USE_SIMD}\")\n    if (USE_SIMD STREQUAL \"0\")\n        set (SIMD_COMPILE_FLAGS ${SIMD_COMPILE_FLAGS} \"-DOIIO_NO_SSE=1\")\n    else ()\n        string (REPLACE \",\" \";\" SIMD_FEATURE_LIST ${USE_SIMD})\n        foreach (feature ${SIMD_FEATURE_LIST})\n            if (VERBOSE)\n                message (STATUS \"SIMD feature: ${feature}\")\n            endif ()\n            if (MSVC OR CMAKE_COMPILER_IS_INTEL)\n                set (SIMD_COMPILE_FLAGS ${SIMD_COMPILE_FLAGS} \"/arch:${feature}\")\n            else ()\n                set (SIMD_COMPILE_FLAGS ${SIMD_COMPILE_FLAGS} \"-m${feature}\")\n            endif ()\n            if (feature STREQUAL \"fma\" AND (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_CLANG))\n                # If fma is requested, for numerical accuracy sake, turn it\n                # off by default except when we explicitly use madd. At some\n                # future time, we should look at this again carefully and\n                # see if we want to use it more widely by ffp-contract=fast.\n                add_compile_options (\"-ffp-contract=off\")\n            endif ()\n        endforeach()\n    endif ()\n    add_compile_options (${SIMD_COMPILE_FLAGS})\nendif ()\n\n\n###########################################################################\n# Preparation to test for compiler/language features\nif (NOT VERBOSE)\n    set (CMAKE_REQUIRED_QUIET 1)\nendif ()\ninclude (CMakePushCheckState)\ninclude (CheckCXXSourceRuns)\ninclude (CheckLibraryExists)\n\n###########################################################################\n# Find out if it's safe for us to use std::regex or if we need boost.regex.\n# This is primarily about gcc 4.8 having a broken regex implementation.\n# This will be obsolete once our minimum supported gcc is >= 4.9.\n#\ncmake_push_check_state ()\ncheck_cxx_source_runs(\"\n      #include <regex>\n      int main() {\n          std::string r = std::regex_replace(std::string(\\\"abc\\\"), std::regex(\\\"b\\\"), \\\" \\\");\n          return r == \\\"a c\\\" ? 0 : -1;\n      }\"\n      USE_STD_REGEX)\ncmake_pop_check_state ()\nif (USE_STD_REGEX)\n    add_definitions (-DUSE_STD_REGEX)\nelse ()\n    add_definitions (-DUSE_BOOST_REGEX)\nendif ()\n\n###########################################################################\n# Check if we need libatomic on this platform.  We shouldn't on mainstream\n# x86/x86_64, but might on some other platforms.\n#\nif (NOT MSVC AND NOT APPLE)\n    cmake_push_check_state ()\n    check_cxx_source_runs(\n       \"#include <atomic>\n        #include <cstdint>\n        std::atomic<uint64_t> x {0};\n        int main() {\n            uint64_t i = x.load(std::memory_order_relaxed);\n            return 0;\n        }\"\n        COMPILER_SUPPORTS_ATOMIC_WITHOUT_LIBATOMIC)\n    cmake_pop_check_state ()\n    if (NOT COMPILER_SUPPORTS_ATOMIC_WITHOUT_LIBATOMIC)\n        check_library_exists (atomic __atomic_load_8 \"\" LIBATOMIC_WORKS)\n        if (LIBATOMIC_WORKS)\n            list (APPEND GCC_ATOMIC_LIBRARIES \"-latomic\")\n            message (STATUS \"Compiler needs libatomic, added\")\n        else ()\n            message (FATAL_ERROR \"Compiler needs libatomic, but not found\")\n        endif ()\n    else ()\n        if (VERBOSE)\n            message (STATUS \"Compiler supports std::atomic, no libatomic necessary\")\n        endif ()\n    endif ()\nendif ()\n\n\n###########################################################################\n# Code coverage options\n#\noption (CODECOV \"Build code coverage tests\" OFF)\nif (CODECOV AND (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_CLANG))\n    message (STATUS \"Compiling for code coverage analysis\")\n    add_compile_options (\"-ftest-coverage -fprofile-arcs -O0\")\n    add_definitions (\"-D${PROJ_NAME}_CODE_COVERAGE=1\")\n    set (CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -ftest-coverage -fprofile-arcs\")\n    set (CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS} -ftest-coverage -fprofile-arcs\")\n    set (CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -ftest-coverage -fprofile-arcs\")\nendif ()\n\n\n###########################################################################\n# Sanitizer options\n#\nset (SANITIZE \"\" CACHE STRING \"Build code using sanitizer (address, thread)\")\nif (SANITIZE AND (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_CLANG))\n    message (STATUS \"Compiling for sanitizer=${SANITIZE}\")\n    string (REPLACE \",\" \";\" SANITIZE_FEATURE_LIST ${SANITIZE})\n    foreach (feature ${SANITIZE_FEATURE_LIST})\n        message (STATUS \"  sanitize feature: ${feature}\")\n        add_compile_options (-fsanitize=${feature})\n        set (CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fsanitize=${feature}\")\n        set (CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS} -fsanitize=${feature}\")\n        set (CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -fsanitize=${feature}\")\n    endforeach()\n    add_compile_options (-g -fno-omit-frame-pointer)\n    if (${CMAKE_SYSTEM_NAME} STREQUAL \"Linux\")\n        set (SANITIZE_ON_LINUX 1)\n    endif ()\n    if (CMAKE_COMPILER_IS_GNUCC AND ${CMAKE_SYSTEM_NAME} STREQUAL \"Linux\")\n        add_compile_options (\"-fuse-ld=gold\")\n        set (CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=gold\")\n        set (CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS} -fuse-ld=gold\")\n        set (CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -fuse-ld=gold\")\n        set (SANITIZE_LIBRARIES \"asan;pthread\")\n        # set (SANITIZE_LIBRARIES \"asan\" \"ubsan\")\n    endif()\n    if (CMAKE_COMPILER_IS_GNUCC)\n        # turn on glibcxx extra annotations to find vector writes past end\n        add_definitions (\"-D_GLIBCXX_SANITIZE_VECTOR=1\")\n    endif ()\n    add_definitions (\"-D${PROJECT_NAME}_SANITIZE=1\")\nendif ()\n\n\n###########################################################################\n# clang-tidy options\n#\n# clang-tidy is a static analyzer that is part of the LLVM tools. It has a\n# variety of the usual bug and security tests, linting, and also tests for\n# things like finding (and correcting!) use of older language constructs.\n#\n# If clang-tidy is found and enabled, a \"clang-tidy\" build target will be\n# enabled. The set of tests can be customized both here and through\n# the .clang-tidy file that is part of this project.\n#\noption (CLANG_TIDY \"Enable clang-tidy\" OFF)\nset (CLANG_TIDY_CHECKS \"-*\" CACHE STRING \"clang-tidy checks to perform (none='-*')\")\nset (CLANG_TIDY_ARGS \"\" CACHE STRING \"clang-tidy args\")\noption (CLANG_TIDY_FIX \"Have clang-tidy fix source\" OFF)\nif (CLANG_TIDY)\n    find_program(CLANG_TIDY_EXE NAMES \"clang-tidy\"\n                 DOC \"Path to clang-tidy executable\")\n    message (STATUS \"CLANG_TIDY_EXE ${CLANG_TIDY_EXE}\")\n    if (CLANG_TIDY_EXE AND NOT ${CMAKE_VERSION} VERSION_LESS 3.6)\n        set (CMAKE_CXX_CLANG_TIDY\n             \"${CLANG_TIDY_EXE}\"\n             )\n        if (CLANG_TIDY_ARGS)\n            list (APPEND CMAKE_CXX_CLANG_TIDY ${CLANG_TIDY_ARGS})\n        endif ()\n        if (CLANG_TIDY_CHECKS)\n            list (APPEND CMAKE_CXX_CLANG_TIDY -checks=\"${CLANG_TIDY_CHECKS}\")\n        endif ()\n        execute_process (COMMAND ${CMAKE_CXX_CLANG_TIDY} -list-checks\n                         OUTPUT_VARIABLE tidy_checks\n                         OUTPUT_STRIP_TRAILING_WHITESPACE)\n        if (CLANG_TIDY_FIX)\n            list (APPEND CMAKE_CXX_CLANG_TIDY \"-fix\")\n        endif ()\n        message (STATUS \"clang-tidy command line is: ${CMAKE_CXX_CLANG_TIDY}\")\n        message (STATUS \"${tidy_checks}\")\n    else ()\n        message (STATUS \"Cannot run clang-tidy as requested\")\n    endif ()\n    # Hint: run with CLANG_TIDY_ARGS=-list-checks to list all the checks\nendif ()\n\n\n###########################################################################\n# clang-format options\n#\n# clang-format is a source code reformatter that is part of the LLVM tools.\n# It can be used to check adherence to project code formatting rules and\n# correct any deviations. If clang-format is found on the system, a\n# \"clang-format\" build target will trigger a reformatting.\n#\n# Note: skip all of this checking, setup, and cmake-format target if this\n# is being built as a subproject.\nif (NOT ${PROJECT_NAME}_IS_SUBPROJECT)\n    set (CLANG_FORMAT_EXE_HINT \"\" CACHE PATH \"clang-format executable's directory (will search if not specified\")\n    set (CLANG_FORMAT_INCLUDES \"src/*.h\" \"src/*.cpp\"\n        CACHE STRING \"Glob patterns to include for clang-format\")\n    set (CLANG_FORMAT_EXCLUDES \"*pugixml*\" \"*SHA1*\" \"*/farmhash.cpp\"\n                               \"src/dpx.imageio/libdpx/*\"\n                               \"src/cineon.imageio/libcineon/*\"\n                               \"src/dds.imageio/squish/*\"\n                               \"src/gif.imageio/gif.h\"\n                               \"src/hdr.imageio/rgbe.cpp\"\n                               \"src/libutil/stb_sprintf.h\"\n         CACHE STRING \"Glob patterns to exclude for clang-format\")\n    find_program (CLANG_FORMAT_EXE\n                  NAMES clang-format bin/clang-format\n                  HINTS ${CLANG_FORMAT_EXE_HINT} ENV CLANG_FORMAT_EXE_HINT\n                        ENV LLVM_DIRECTORY\n                  NO_DEFAULT_PATH\n                  DOC \"Path to clang-format executable\")\n    find_program (CLANG_FORMAT_EXE NAMES clang-format bin/clang-format)\n    if (CLANG_FORMAT_EXE)\n        message (STATUS \"clang-format found: ${CLANG_FORMAT_EXE}\")\n        # Start with the list of files to include when formatting...\n        file (GLOB_RECURSE FILES_TO_FORMAT ${CLANG_FORMAT_INCLUDES})\n        # ... then process any list of excludes we are given\n        foreach (_pat ${CLANG_FORMAT_EXCLUDES})\n            file (GLOB_RECURSE _excl ${_pat})\n            list (REMOVE_ITEM FILES_TO_FORMAT ${_excl})\n        endforeach ()\n        #message (STATUS \"clang-format file list: ${FILES_TO_FORMAT}\")\n        file (COPY ${CMAKE_CURRENT_SOURCE_DIR}/.clang-format\n              DESTINATION ${CMAKE_CURRENT_BINARY_DIR})\n        add_custom_target (clang-format\n            COMMAND \"${CLANG_FORMAT_EXE}\" -i -style=file ${FILES_TO_FORMAT} )\n    else ()\n        message (STATUS \"clang-format not found.\")\n    endif ()\nendif ()\n\n###########################################################################\n# Another way to sneak in custom compiler and DSO linking flags.\n#\nset (EXTRA_CPP_ARGS \"\" CACHE STRING \"Extra C++ command line definitions\")\nif (EXTRA_CPP_ARGS)\n    message (STATUS \"Extra C++ args: ${EXTRA_CPP_ARGS}\")\n    add_compile_options (\"${EXTRA_CPP_ARGS}\")\nendif()\nset (EXTRA_DSO_LINK_ARGS \"\" CACHE STRING \"Extra command line definitions when building DSOs\")\n\n\n###########################################################################\n# Set the versioning for shared libraries.\n#\nif (${PROJECT_NAME}_SUPPORTED_RELEASE)\n    # Supported releases guarantee ABI back-compatibility within the release\n    # family, so SO versioning is major.minor.\n    set (SOVERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}\n         CACHE STRING \"Set the SO version for dynamic libraries\")\nelse ()\n    # Development master makes no ABI stability guarantee, so we make the\n    # SO naming capture down to the major.minor.patch level.\n    set (SOVERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}\n         CACHE STRING \"Set the SO version for dynamic libraries\")\nendif ()\nif (VERBOSE)\n    message(STATUS \"Setting SOVERSION to: ${SOVERSION}\")\nendif ()\n\n\n###########################################################################\n# BUILD_SHARED_LIBS, if turned off, will disable building of .so/.dll\n# dynamic libraries and instead only build static libraries.\n#\noption (BUILD_SHARED_LIBS \"Build shared libraries (set to OFF to build static libs)\" ON)\nif (NOT BUILD_SHARED_LIBS)\n    add_definitions (-D${PROJ_NAME}_STATIC_DEFINE=1)\nendif ()\n\n\n###########################################################################\n# LINKSTATIC, if enabled, will cause us to favor linking static versions\n# of library dependencies, if they are available.\n#\noption (LINKSTATIC  \"Link with static external libraries when possible\" OFF)\nif (LINKSTATIC)\n    #set (_orig_link_suffixes ${CMAKE_FIND_LIBRARY_SUFFIXES})\n    message (STATUS \"Statically linking external libraries when possible\")\n    if (WIN32)\n        set (CMAKE_FIND_LIBRARY_SUFFIXES .lib .a ${CMAKE_FIND_LIBRARY_SUFFIXES})\n    else ()\n        set (CMAKE_FIND_LIBRARY_SUFFIXES .a ${CMAKE_FIND_LIBRARY_SUFFIXES})\n    endif ()\nendif ()\n\n\n###########################################################################\n# Any extra logic to be run only for CI builds goes here.\n#\nif (DEFINED ENV{CI} OR DEFINED ENV{GITHUB_ACTIONS})\n    add_definitions (\"-D${PROJ_NAME}_CI=1\" \"-DBUILD_CI=1\")\n    if (APPLE)\n        # Keep Mono framework from being incorrectly searched for include\n        # files on GitHub Actions CI.\n        set(CMAKE_FIND_FRAMEWORK LAST)\n    endif ()\nendif ()\n\n\n###########################################################################\n# Rpath handling at the install step\n#\nset (MACOSX_RPATH ON)\nif (CMAKE_SKIP_RPATH)\n    # We need to disallow the user from truly setting CMAKE_SKIP_RPATH, since\n    # we want to run the generated executables from the build tree in order to\n    # generate the manual page documentation.  However, we make sure the\n    # install rpath is unset so that the install tree is still free of rpaths\n    # for linux packaging purposes.\n    set (CMAKE_SKIP_RPATH FALSE)\n    unset (CMAKE_INSTALL_RPATH)\nelse ()\n    if (NOT CMAKE_INSTALL_RPATH)\n        set (CMAKE_INSTALL_RPATH \"${CMAKE_INSTALL_FULL_LIBDIR}\")\n    endif ()\n    # add the automatically determined parts of the RPATH that\n    # point to directories outside the build tree to the install RPATH\n    set (CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\n    if (VERBOSE)\n        message (STATUS \"CMAKE_INSTALL_RPATH = ${CMAKE_INSTALL_RPATH}\")\n    endif ()\nendif ()\n\n\n\n###########################################################################\n# Macro to install targets to the appropriate locations.  Use this instead\n# of the install(TARGETS ...) signature. Note that it adds it to the\n# export targets list for when we generate config files.\n#\n# Usage:\n#\n#    install_targets (target1 [target2 ...])\n#\nmacro (install_targets)\n    install (TARGETS ${ARGN}\n             EXPORT ${PROJ_NAME}_EXPORTED_TARGETS\n             RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\" COMPONENT user\n             LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}\" COMPONENT user\n             ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\" COMPONENT developer)\nendmacro()\n",
			"file": "third_party/external/openimageio/src/OpenImageIO/src/cmake/compiler.cmake",
			"file_size": 25040,
			"file_write_time": 133343208433094533,
			"settings":
			{
				"buffer_size": 25040,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "# Module to find Libsquish\n#\n# This module will first look into the directories defined by the variables:\n#   - Libsquish_ROOT, LIBSQUISH_INCLUDE_PATH, LIBSQUISH_LIBRARY_PATH\n#\n# This module defines the following variables:\n#\n# Libsquish_FOUND            True if Libsquish was found.\n# LIBSQUISH_INCLUDES         Where to find Libsquish headers\n# LIBSQUISH_LIBRARIES        List of libraries to link against when using Libsquish\n# LIBSQUISH_VERSION          Version of Libsquish (e.g., 3.6.2)\n\ninclude (FindPackageHandleStandardArgs)\n\nfind_path (LIBSQUISH_INCLUDE_DIR squish.h\n           HINTS\n               ${LIBSQUISH_INCLUDE_PATH}\n               ENV LIBSQUISH_INCLUDE_PATH\n           DOC \"The directory where Libsquish headers reside\")\n\nfind_library (LIBSQUISH_LIBRARY squish\n              HINTS\n                  ${LIBSQUISH_LIBRARY_PATH}\n                  ENV LIBSQUISH_LIBRARY_PATH\n              DOC \"The Libsquish libraries\")\n\nfind_package_handle_standard_args (Libsquish\n    REQUIRED_VARS\n        LIBSQUISH_INCLUDE_DIR\n        LIBSQUISH_LIBRARY\n    )\n\nif (Libsquish_FOUND)\n    set (LIBSQUISH_INCLUDES ${LIBSQUISH_INCLUDE_DIR})\n    set (LIBSQUISH_LIBRARIES ${LIBSQUISH_LIBRARY})\n\n    if (NOT TARGET Libsquish::Libsquish)\n        add_library(Libsquish::Libsquish UNKNOWN IMPORTED)\n        set_target_properties(Libsquish::Libsquish PROPERTIES\n            INTERFACE_INCLUDE_DIRECTORIES \"${LIBSQUISH_INCLUDES}\")\n\n        set_property(TARGET Libsquish::Libsquish APPEND PROPERTY\n            IMPORTED_LOCATION \"${LIBSQUISH_LIBRARIES}\")\n    endif ()\nendif ()\n\nmark_as_advanced (\n    LIBSQUISH_INCLUDE_DIR\n    LIBSQUISH_LIBRARY\n    )\n",
			"file": "third_party/external/openimageio/src/OpenImageIO/src/cmake/modules/FindLibsquish.cmake",
			"file_size": 1635,
			"file_write_time": 133343208433134533,
			"settings":
			{
				"buffer_size": 1635,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"BAAAAAAAAAAAAAAAAAAAAAAAAABjBgAAIyBNb2R1bGUgdG8gZmluZCBMaWJzcXVpc2gKIwojIFRoaXMgbW9kdWxlIHdpbGwgZmlyc3QgbG9vayBpbnRvIHRoZSBkaXJlY3RvcmllcyBkZWZpbmVkIGJ5IHRoZSB2YXJpYWJsZXM6CiMgICAtIExpYnNxdWlzaF9ST09ULCBMSUJTUVVJU0hfSU5DTFVERV9QQVRILCBMSUJTUVVJU0hfTElCUkFSWV9QQVRICiMKIyBUaGlzIG1vZHVsZSBkZWZpbmVzIHRoZSBmb2xsb3dpbmcgdmFyaWFibGVzOgojCiMgTGlic3F1aXNoX0ZPVU5EICAgICAgICAgICAgVHJ1ZSBpZiBMaWJzcXVpc2ggd2FzIGZvdW5kLgojIExJQlNRVUlTSF9JTkNMVURFUyAgICAgICAgIFdoZXJlIHRvIGZpbmQgTGlic3F1aXNoIGhlYWRlcnMKIyBMSUJTUVVJU0hfTElCUkFSSUVTICAgICAgICBMaXN0IG9mIGxpYnJhcmllcyB0byBsaW5rIGFnYWluc3Qgd2hlbiB1c2luZyBMaWJzcXVpc2gKIyBMSUJTUVVJU0hfVkVSU0lPTiAgICAgICAgICBWZXJzaW9uIG9mIExpYnNxdWlzaCAoZS5nLiwgMy42LjIpCgppbmNsdWRlIChGaW5kUGFja2FnZUhhbmRsZVN0YW5kYXJkQXJncykKCmZpbmRfcGF0aCAoTElCU1FVSVNIX0lOQ0xVREVfRElSIHNxdWlzaC5oCiAgICAgICAgICAgSElOVFMKICAgICAgICAgICAgICAgJHtMSUJTUVVJU0hfSU5DTFVERV9QQVRIfQogICAgICAgICAgICAgICBFTlYgTElCU1FVSVNIX0lOQ0xVREVfUEFUSAogICAgICAgICAgIERPQyAiVGhlIGRpcmVjdG9yeSB3aGVyZSBMaWJzcXVpc2ggaGVhZGVycyByZXNpZGUiKQoKZmluZF9saWJyYXJ5IChMSUJTUVVJU0hfTElCUkFSWSBzcXVpc2gKICAgICAgICAgICAgICBISU5UUwogICAgICAgICAgICAgICAgICAke0xJQlNRVUlTSF9MSUJSQVJZX1BBVEh9CiAgICAgICAgICAgICAgICAgIEVOViBMSUJTUVVJU0hfTElCUkFSWV9QQVRICiAgICAgICAgICAgICAgRE9DICJUaGUgTGlic3F1aXNoIGxpYnJhcmllcyIpCgpmaW5kX3BhY2thZ2VfaGFuZGxlX3N0YW5kYXJkX2FyZ3MgKExpYnNxdWlzaAogICAgUkVRVUlSRURfVkFSUwogICAgICAgIExJQlNRVUlTSF9JTkNMVURFX0RJUgogICAgICAgIExJQlNRVUlTSF9MSUJSQVJZCiAgICApCgppZiAoTGlic3F1aXNoX0ZPVU5EKQogICAgc2V0IChMSUJTUVVJU0hfSU5DTFVERVMgJHtMSUJTUVVJU0hfSU5DTFVERV9ESVJ9KQogICAgc2V0IChMSUJTUVVJU0hfTElCUkFSSUVTICR7TElCU1FVSVNIX0xJQlJBUll9KQoKICAgIGlmIChOT1QgVEFSR0VUIExpYnNxdWlzaDo6TGlic3F1aXNoKQogICAgICAgIGFkZF9saWJyYXJ5KExpYnNxdWlzaDo6TGlic3F1aXNoIFVOS05PV04gSU1QT1JURUQpCiAgICAgICAgc2V0X3RhcmdldF9wcm9wZXJ0aWVzKExpYnNxdWlzaDo6TGlic3F1aXNoIFBST1BFUlRJRVMKICAgICAgICAgICAgSU5URVJGQUNFX0lOQ0xVREVfRElSRUNUT1JJRVMgIiR7TElCU1FVSVNIX0lOQ0xVREVTfSIpCgogICAgICAgIHNldF9wcm9wZXJ0eShUQVJHRVQgTGlic3F1aXNoOjpMaWJzcXVpc2ggQVBQRU5EIFBST1BFUlRZCiAgICAgICAgICAgIElNUE9SVEVEX0xPQ0FUSU9OICIke0xJQlNRVUlTSF9MSUJSQVJJRVN9IikKICAgIGVuZGlmICgpCmVuZGlmICgpCgptYXJrX2FzX2FkdmFuY2VkICgKICAgIExJQlNRVUlTSF9JTkNMVURFX0RJUgogICAgTElCU1FVSVNIX0xJQlJBUlkKICAgICkKAAAAAAAAAABjBgAAAAAAAAAAAAAAAAAAAAAAAGMGAAAAAAAAAAAAAAAAAAAAAAAAYwYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK4AAAAAAAAAcAAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"contents": "include(ExternalProject)\n\nExternalProject_Add( ThirdParty_zlib\n  PREFIX zlib\n  SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/zlib\"\n  CMAKE_CACHE_ARGS\n    -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/zlib\n)\n\n#######################\n# PyBind11\n#######################\n\nExternalProject_Add ( ThirdParty_pybind11\n  PREFIX pybind11\n  DOWNLOAD_COMMAND \"\" # Disable download step\n  SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/pybind11\" # Source dir for configuration\n  #INSTALL_DIR ${IMATH_BUILD_PATH}\n  CMAKE_CACHE_ARGS\n    -DPYBIND11_INSTALL:BOOL=ON\n    -DPYBIND11_MASTER_PROJECT:BOOL=ON\n    -DBUILD_TESTING:BOOL=OFF \n    -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/pybind11\n)\n\n#######################\n# Imath\n#######################\n\nExternalProject_Add ( ThirdParty_Imath\n    PREFIX Imath\n    DOWNLOAD_COMMAND \"\" # Disable download step\n    SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/Imath\" # Source dir for configuration\n    #INSTALL_DIR ${IMATH_BUILD_PATH}\n    CMAKE_CACHE_ARGS \n      -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/imath\n)\n\n#######################\n# OpenEXR\n#######################\n\nExternalProject_Add ( ThirdParty_OpenEXR\n    PREFIX OpenEXR\n    DOWNLOAD_COMMAND \"\" # Disable download step\n    SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/OpenEXR\" # Source dir for configuration\n    #INSTALL_DIR ${IMATH_BUILD_PATH}\n    CMAKE_CACHE_ARGS \n      -DOPENEXR_IS_SUBPROJECT:BOOL=ON\n      -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/openexr\n)\n\n#######################\n# OpenImageIO\n#######################\n\nExternalProject_Add ( ThirdParty_OpenImageIO\n    PREFIX OpenImageIO\n    DOWNLOAD_COMMAND \"\" # Disable download step\n    SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/OpenImageIO\" # Source dir for configuration\n    #INSTALL_DIR ${IMATH_BUILD_PATH}\n    CMAKE_CACHE_ARGS \n      -Dpybind11_ROOT:PATH=${CMAKE_CURRENT_BINARY_DIR}/pybind11\n      -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_CURRENT_BINARY_DIR}/openimageio\n)\n\n#######################\n# FreeImage\n#######################\n\nadd_custom_target(\n  ThirdParty_FreeImage\n  COMMAND make\n  WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/FreeImage\"\n)\n\nset( FREEIMAGE_INCLUDE_DIRS \"${CMAKE_CURRENT_BINARY_DIR}/FreeImage/Dist\" PARENT_SCOPE )\nset( FREEIMAGE_LIBRARIES \"${CMAKE_CURRENT_BINARY_DIR}/FreeImage/Dist/libfreeimage-3.18.0.so\" PARENT_SCOPE )\n\n# Deps\n\nadd_dependencies( ThirdParty_OpenEXR ThirdParty_Imath )\nadd_dependencies( ThirdParty_OpenImageIO ThirdParty_pybind11 )\nadd_dependencies( ThirdParty_OpenImageIO ThirdParty_OpenEXR )",
			"file": "third_party/CMakeLists.txt",
			"file_size": 2513,
			"file_write_time": 133352798597307383,
			"settings":
			{
				"buffer_size": 2513,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\nCMAEK"
					},
					"BwAAAIFSAAAAAAAAglIAAAAAAAAAAAAAglIAAAAAAACGUgAAAAAAAAAAAACGUgAAAAAAAIdSAAAAAAAAAAAAAIdSAAAAAAAAiFIAAAAAAAAAAAAAiFIAAAAAAACJUgAAAAAAAAAAAACJUgAAAAAAAIpSAAAAAAAAAAAAAIpSAAAAAAAAi1IAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBUgAAAAAAAIFSAAAAAAAAAAAAAAAA8L8"
				],
				[
					4,
					2,
					"left_delete",
					null,
					"AgAAAIpSAAAAAAAAilIAAAAAAAABAAAAS4lSAAAAAAAAiVIAAAAAAAABAAAARQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACLUgAAAAAAAItSAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "KE_ATR"
					},
					"BgAAAIlSAAAAAAAAilIAAAAAAAAAAAAAilIAAAAAAACLUgAAAAAAAAAAAACLUgAAAAAAAIxSAAAAAAAAAAAAAIxSAAAAAAAAjVIAAAAAAAAAAAAAjVIAAAAAAACOUgAAAAAAAAAAAACOUgAAAAAAAI9SAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJUgAAAAAAAIlSAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					2,
					"left_delete",
					null,
					"AgAAAI5SAAAAAAAAjlIAAAAAAAABAAAAUo1SAAAAAAAAjVIAAAAAAAABAAAAVA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPUgAAAAAAAI9SAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "RGS"
					},
					"AwAAAI1SAAAAAAAAjlIAAAAAAAAAAAAAjlIAAAAAAACPUgAAAAAAAAAAAACPUgAAAAAAAJBSAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNUgAAAAAAAI1SAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": " -D"
					},
					"AwAAAJBSAAAAAAAAkVIAAAAAAAAAAAAAkVIAAAAAAACSUgAAAAAAAAAAAACSUgAAAAAAAJNSAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACQUgAAAAAAAJBSAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJNSAAAAAAAAlFIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACTUgAAAAAAAJNSAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"paste",
					null,
					"AQAAAJRSAAAAAAAAoFIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACUUgAAAAAAAJRSAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					2,
					"right_delete",
					null,
					"AgAAAJRSAAAAAAAAlFIAAAAAAAABAAAALZRSAAAAAAAAlFIAAAAAAAABAAAARA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACUUgAAAAAAAJRSAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": ":BOOL-="
					},
					"BwAAAJ5SAAAAAAAAn1IAAAAAAAAAAAAAn1IAAAAAAACgUgAAAAAAAAAAAACgUgAAAAAAAKFSAAAAAAAAAAAAAKFSAAAAAAAAolIAAAAAAAAAAAAAolIAAAAAAACjUgAAAAAAAAAAAACjUgAAAAAAAKRSAAAAAAAAAAAAAKRSAAAAAAAApVIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACeUgAAAAAAAJ5SAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					2,
					"left_delete",
					null,
					"AgAAAKRSAAAAAAAApFIAAAAAAAABAAAAPaNSAAAAAAAAo1IAAAAAAAABAAAALQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClUgAAAAAAAKVSAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "=OFF"
					},
					"BAAAAKNSAAAAAAAApFIAAAAAAAAAAAAApFIAAAAAAAClUgAAAAAAAAAAAAClUgAAAAAAAKZSAAAAAAAAAAAAAKZSAAAAAAAAp1IAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjUgAAAAAAAKNSAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAHBRAAAAAAAAcVEAAAAAAAAAAAAAcVEAAAAAAAB1UQAAAAAAAAAAAAB1UQAAAAAAAHZRAAAAAAAAAAAAAHZRAAAAAAAAelEAAAAAAAAAAAAAcVEAAAAAAABxUQAAAAAAAAQAAAAgICAg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcFEAAAAAAABwUQAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"paste",
					null,
					"AQAAAHJRAAAAAAAAd1EAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdlEAAAAAAAB2UQAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAAHtRAAAAAAAAuVEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAe1EAAAAAAAB7UQAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"paste",
					null,
					"AQAAAHtRAAAAAAAAiVEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAe1EAAAAAAAB7UQAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"left_delete",
					null,
					"AQAAAJdRAAAAAAAAl1EAAAAAAAACAAAALCA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAl1EAAAAAAACZUQAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJdRAAAAAAAAmFEAAAAAAAAAAAAAmFEAAAAAAACcUQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAl1EAAAAAAACXUQAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"paste",
					null,
					"AQAAAJxRAAAAAAAAqlEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnFEAAAAAAACcUQAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					2,
					"left_delete",
					null,
					"AgAAAMFRAAAAAAAAwVEAAAAAAAABAAAAIMBRAAAAAAAAwFEAAAAAAAABAAAALA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwlEAAAAAAADCUQAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMBRAAAAAAAAwVEAAAAAAAAAAAAAwVEAAAAAAADFUQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwFEAAAAAAADAUQAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"paste",
					null,
					"AQAAAMVRAAAAAAAA01EAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxVEAAAAAAADFUQAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "ЖЗ"
					},
					"AgAAAJdRAAAAAAAAmFEAAAAAAAAAAAAAmFEAAAAAAACZUQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAl1EAAAAAAACXUQAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					2,
					"left_delete",
					null,
					"AgAAAJhRAAAAAAAAmFEAAAAAAAACAAAA0JeXUQAAAAAAAJdRAAAAAAAAAgAAANCW",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmVEAAAAAAACZUQAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": ":PATH="
					},
					"BgAAAJdRAAAAAAAAmFEAAAAAAAAAAAAAmFEAAAAAAACZUQAAAAAAAAAAAACZUQAAAAAAAJpRAAAAAAAAAAAAAJpRAAAAAAAAm1EAAAAAAAAAAAAAm1EAAAAAAACcUQAAAAAAAAAAAACcUQAAAAAAAJ1RAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAl1EAAAAAAACXUQAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAJ1RAAAAAAAAn1EAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnVEAAAAAAACdUQAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "disable"
					},
					"BwAAAJ5RAAAAAAAAn1EAAAAAAAAAAAAAn1EAAAAAAACgUQAAAAAAAAAAAACgUQAAAAAAAKFRAAAAAAAAAAAAAKFRAAAAAAAAolEAAAAAAAAAAAAAolEAAAAAAACjUQAAAAAAAAAAAACjUQAAAAAAAKRRAAAAAAAAAAAAAKRRAAAAAAAApVEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnlEAAAAAAACeUQAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					7,
					"left_delete",
					null,
					"BwAAAKRRAAAAAAAApFEAAAAAAAABAAAAZaNRAAAAAAAAo1EAAAAAAAABAAAAbKJRAAAAAAAAolEAAAAAAAABAAAAYqFRAAAAAAAAoVEAAAAAAAABAAAAYaBRAAAAAAAAoFEAAAAAAAABAAAAc59RAAAAAAAAn1EAAAAAAAABAAAAaZ5RAAAAAAAAnlEAAAAAAAABAAAAZA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApVEAAAAAAAClUQAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "/goto/e"
					},
					"BwAAAJ5RAAAAAAAAn1EAAAAAAAAAAAAAn1EAAAAAAACgUQAAAAAAAAAAAACgUQAAAAAAAKFRAAAAAAAAAAAAAKFRAAAAAAAAolEAAAAAAAAAAAAAolEAAAAAAACjUQAAAAAAAAAAAACjUQAAAAAAAKRRAAAAAAAAAAAAAKRRAAAAAAAApVEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnlEAAAAAAACeUQAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAAKVRAAAAAAAAplEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApVEAAAAAAAClUQAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					2,
					"left_delete",
					null,
					"AgAAAKVRAAAAAAAApVEAAAAAAAABAAAAaKRRAAAAAAAApFEAAAAAAAABAAAAZQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAplEAAAAAAACmUQAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "hell"
					},
					"BAAAAKRRAAAAAAAApVEAAAAAAAAAAAAApVEAAAAAAACmUQAAAAAAAAAAAACmUQAAAAAAAKdRAAAAAAAAAAAAAKdRAAAAAAAAqFEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApFEAAAAAAACkUQAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"paste",
					null,
					"AQAAANJRAAAAAAAA5FEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0lEAAAAAAADSUQAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"paste",
					null,
					"AQAAAA1SAAAAAAAAH1IAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADVIAAAAAAAANUgAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAG9NAAAAAAAAcE0AAAAAAAAAAAAAcE0AAAAAAABxTQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAb00AAAAAAABvTQAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"reindent",
					null,
					"AQAAAHBNAAAAAAAAck0AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcE0AAAAAAABwTQAAAAAAAAAAAAAAAAAA"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "unset"
					},
					"BQAAAHJNAAAAAAAAc00AAAAAAAAAAAAAc00AAAAAAAB0TQAAAAAAAAAAAAB0TQAAAAAAAHVNAAAAAAAAAAAAAHVNAAAAAAAAdk0AAAAAAAAAAAAAdk0AAAAAAAB3TQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAck0AAAAAAAByTQAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHdNAAAAAAAAeU0AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAd00AAAAAAAB3TQAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"paste",
					null,
					"AQAAAHhNAAAAAAAAjk0AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeE0AAAAAAAB4TQAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAI9NAAAAAAAAkE0AAAAAAAAAAAAAkE0AAAAAAACSTQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAj00AAAAAAACPTQAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"paste",
					null,
					"AQAAAJJNAAAAAAAAr00AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkk0AAAAAAACSTQAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"paste",
					null,
					"AgAAAJhNAAAAAAAArk0AAAAAAAAAAAAArk0AAAAAAACuTQAAAAAAABYAAABMSUJTUVVJU0hfSU5DTFVERV9QQVRI",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmE0AAAAAAACuTQAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAALdRAAAAAAAAuFEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAt1EAAAAAAAC3UQAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": " D"
					},
					"AgAAALhRAAAAAAAAuVEAAAAAAAAAAAAAuVEAAAAAAAC6UQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuFEAAAAAAAC4UQAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "onb"
					},
					"AwAAALpRAAAAAAAAu1EAAAAAAAAAAAAAu1EAAAAAAAC8UQAAAAAAAAAAAAC8UQAAAAAAAL1RAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAulEAAAAAAAC6UQAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"left_delete",
					null,
					"AQAAALxRAAAAAAAAvFEAAAAAAAABAAAAYg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvVEAAAAAAAC9UQAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "'t"
					},
					"AgAAALxRAAAAAAAAvVEAAAAAAAAAAAAAvVEAAAAAAAC+UQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvFEAAAAAAAC8UQAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": " user"
					},
					"BQAAAL5RAAAAAAAAv1EAAAAAAAAAAAAAv1EAAAAAAADAUQAAAAAAAAAAAADAUQAAAAAAAMFRAAAAAAAAAAAAAMFRAAAAAAAAwlEAAAAAAAAAAAAAwlEAAAAAAADDUQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvlEAAAAAAAC+UQAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": " system"
					},
					"BwAAAMNRAAAAAAAAxFEAAAAAAAAAAAAAxFEAAAAAAADFUQAAAAAAAAAAAADFUQAAAAAAAMZRAAAAAAAAAAAAAMZRAAAAAAAAx1EAAAAAAAAAAAAAx1EAAAAAAADIUQAAAAAAAAAAAADIUQAAAAAAAMlRAAAAAAAAAAAAAMlRAAAAAAAAylEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAw1EAAAAAAADDUQAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": " libs"
					},
					"BQAAAMpRAAAAAAAAy1EAAAAAAAAAAAAAy1EAAAAAAADMUQAAAAAAAAAAAADMUQAAAAAAAM1RAAAAAAAAAAAAAM1RAAAAAAAAzlEAAAAAAAAAAAAAzlEAAAAAAADPUQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAylEAAAAAAADKUQAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "quish"
					},
					"BQAAAM9RAAAAAAAA0FEAAAAAAAAAAAAA0FEAAAAAAADRUQAAAAAAAAAAAADRUQAAAAAAANJRAAAAAAAAAAAAANJRAAAAAAAA01EAAAAAAAAAAAAA01EAAAAAAADUUQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAz1EAAAAAAADPUQAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAANRRAAAAAAAA1VEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1FEAAAAAAADUUQAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANVRAAAAAAAA1lEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1VEAAAAAAADVUQAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"left_delete",
					null,
					"AQAAANVRAAAAAAAA1VEAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1lEAAAAAAADWUQAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "use"
					},
					"AwAAANVRAAAAAAAA1lEAAAAAAAAAAAAA1lEAAAAAAADXUQAAAAAAAAAAAADXUQAAAAAAANhRAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1VEAAAAAAADVUQAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": " embedded"
					},
					"CQAAANhRAAAAAAAA2VEAAAAAAAAAAAAA2VEAAAAAAADaUQAAAAAAAAAAAADaUQAAAAAAANtRAAAAAAAAAAAAANtRAAAAAAAA3FEAAAAAAAAAAAAA3FEAAAAAAADdUQAAAAAAAAAAAADdUQAAAAAAAN5RAAAAAAAAAAAAAN5RAAAAAAAA31EAAAAAAAAAAAAA31EAAAAAAADgUQAAAAAAAAAAAADgUQAAAAAAAOFRAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2FEAAAAAAADYUQAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAG9NAAAAAAAAcE0AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAb00AAAAAAABvTQAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"reindent",
					null,
					"AQAAAHBNAAAAAAAAck0AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcE0AAAAAAABwTQAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"paste",
					null,
					"AQAAAHJNAAAAAAAAnE0AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAck0AAAAAAAByTQAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					3,
					"left_delete",
					null,
					"AwAAAOBRAAAAAAAA4FEAAAAAAADXAAAAICAgICMgRG9uJ3QgdXNlciBzeXN0ZW0gbGlic3F1aXNoL3VzZSBlbWJlZGRlZAogICAgQ01BS0VfQVJHUyAtRCBMaWJzcXVpc2hfUk9PVDpQQVRIPScvZ290by9oZWxsJwogICAgQ01BS0VfQVJHUyAtRCBMSUJTUVVJU0hfSU5DTFVERV9QQVRIOlBBVEg9Jy9nb3RvL2hlbGwnCiAgICBDTUFLRV9BUkdTIC1EIExJQlNRVUlTSF9MSUJSQVJZX1BBVEg6UEFUSD0nL2dvdG8vaGVsbCffUQAAAAAAAN9RAAAAAAAAAQAAAAreUQAAAAAAAN5RAAAAAAAAAQAAAAo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAt1IAAAAAAADgUQAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					3,
					"left_delete",
					null,
					"AwAAAHBNAAAAAAAAcE0AAAAAAABsAAAAICAjIERvbid0IHVzZXIgc3lzdGVtIGxpYnNxdWlzaC91c2UgZW1iZWRkZWQKICB1bnNldChMSUJTUVVJU0hfSU5DTFVERV9QQVRIKQogIHVuc2V0KExJQlNRVUlTSF9MSUJSQVJZX1BBVEgpb00AAAAAAABvTQAAAAAAAAEAAAAKbk0AAAAAAABuTQAAAAAAAAEAAAAK",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3E0AAAAAAABwTQAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"paste",
					null,
					"AQAAAOwbAAAAAAAA+RsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOwbAAAAAAAA7BsAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPkbAAAAAAAA+hsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPkbAAAAAAAA+RsAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6GwAAAAAAAPobAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "file( GLOB SOURCES\n    ./*.cpp\n    ./Core/*.cpp\n    ./Core/API/*.cpp\n    ./Core/API/Vulkan/*.cpp\n    ./Core/Platform/*.cpp\n    ./Core/Platform/Linux/*.cpp\n    ./Core/Program/*.cpp\n    ./Core/State/*.cpp\n    ./Core/BufferTypes/*.cpp\n    ./RenderGraph/*.cpp\n    ./RenderGraph/BasePasses/*.cpp\n    ./RenderPasses/*.cpp\n    ./Scene/*.cpp\n    ./Scene/Animation/*.cpp\n    ./Scene/Camera/*.cpp\n    ./Scene/Importers/*.cpp\n    ./Scene/Lights/*.cpp\n    ./Scene/Material/*.cpp\n    #./Scene/ParticleSystem/*.cpp\n    ./Utils/*.cpp\n    ./Utils/Algorithm/*.cpp\n    ./Utils/Debug/*.cpp\n    ./Utils/Image/*.cpp\n    ./Utils/Perception/*.cpp\n    ./Utils/SampleGenerators/*.cpp\n    ./Utils/Sampling/*.cpp\n    ./Utils/Sampling/Pseudorandom/*.cpp\n    ./Utils/Scripting/*.cpp\n    ./Utils/Timing/*.cpp\n    ./Utils/UI/*.cpp\n    ./Utils/Video/*.cpp\n    ./Experimental/Scene/Lights/*.cpp\n    #./Testing/*.cpp\n\n    ${PROJECT_SOURCE_DIR}/third_party/imgui/imgui.cpp\n    ${PROJECT_SOURCE_DIR}/third_party/imgui/imgui_draw.cpp\n    ${PROJECT_SOURCE_DIR}/third_party/imgui/imgui_widgets.cpp\n    ${PROJECT_SOURCE_DIR}/third_party/imgui/imgui_tables.cpp\n    ${PROJECT_SOURCE_DIR}/third_party/imgui/backends/imgui_impl_glfw.cpp\n    ${PROJECT_SOURCE_DIR}/third_party/imgui/backends/imgui_impl_vulkan.cpp\n    ${PROJECT_SOURCE_DIR}/src/Externals/dear_imgui_addons/imguinodegrapheditor/imguinodegrapheditor.cpp\n    ${PROJECT_SOURCE_DIR}/src/Externals/mikktspace/mikktspace.c\n)\n\nadd_library( falcor_lib SHARED ${SOURCES} ${HEADERS} )\n\n# PyBind11\nfind_package(pybind11 REQUIRED CONFIG)\n\n# Python\nfind_package( Python3 COMPONENTS Development )\ninclude_directories( ${Python3_INCLUDE_DIRS} )\n\n# Assimp\nfind_package(ASSIMP REQUIRED)\nif(ASSIMP_FOUND)\n    set(ASSIMP_LIBRARY \"assimp\")\n    add_library(${ASSIMP_LIBRARY} SHARED IMPORTED)\n    set_target_properties(${ASSIMP_LIBRARY} PROPERTIES IMPORTED_LOCATION \"${ASSIMP_LIBRARY_DIRS}/libassimp.so\")\nendif(assimp_FOUND)\n\n# ZLIB\nfind_package( ZLIB REQUIRED )\nif(ZLIB_FOUND)\n    set(ZLIB_INCLUDE_DIRS ${ZLIB_INCLUDE_DIR})\nendif()\n\nif(ZLIB_FOUND AND NOT TARGET ZLIB::ZLIB)\n  if (CMAKE_BUILD_TYPE STREQUAL \"DEBUG\")\n    set( ZLIB_LIBRARY ${ZLIB_LIBRARY_DBG} )\n  else()\n    set( ZLIB_LIBRARY ${ZLIB_LIBRARY_RELEASE} )\n  endif()\n\n  add_library(ZLIB::ZLIB INTERFACE IMPORTED)\n  set_target_properties(ZLIB::ZLIB PROPERTIES\n    INTERFACE_INCLUDE_DIRECTORIES \"${ZLIB_INCLUDE_DIR}\"\n    INTERFACE_LINK_LIBRARIES \"${ZLIB_LIBRARY}\"\n  )\nendif()\n\n# Imath\nfind_package( Imath REQUIRED CONFIG )\n\n# OpenEXR\nfind_package( OpenEXR REQUIRED CONFIG )\n\n# OpenImageIO\nfind_package( OpenImageIO REQUIRED CONFIG )\nif (OpenImageIO_FOUND)\n    message( \"OpenImageIO found: ${OpenImageIO_FOUND}\" ) \n    message( \"OpenImageIO root: ${OpenImageIO_ROOT}\")   \n    message( \"OpenImageIO version: ${OpenImageIO_VERSION}\" )\n    message( \"OpenImageIO libs: ${OPENIMAGEIO_LIBRARIES}\")\nendif()\ninclude_directories( ${OPENIMAGEIO_INCLUDES} )\n\n# ImGui\ninclude_directories( ${PROJECT_SOURCE_DIR}/third_party/imgui )\n\n# GLFW \nfind_package(glfw3 CONFIG REQUIRED)\ninclude_directories(${GLFW_INCLUDE_DIRS})\nlink_libraries(${GLFW_LIBRARIES})\n\n# Use FindVulkan module added with CMAKE 3.7\nif (NOT CMAKE_VERSION VERSION_LESS 3.7.0)\n    message(STATUS \"Using module to find Vulkan\")\n    find_package(Vulkan)\nendif()\n\nif (NOT Vulkan_FOUND)\n    find_library(Vulkan_LIBRARY NAMES vulkan HINTS \"$ENV{VULKAN_SDK}/lib\" \"${CMAKE_SOURCE_DIR/libs/vulkan}\" REQUIRED)\n    if (Vulkan_LIBRARY)\n        set(Vulkan_FOUND OK)\n        message(\"Using bundled vulkan library version\")\n    endif()\nendif()\n\n# Use the package PkgConfig to detect GTK+ headers/library files\nFIND_PACKAGE(PkgConfig REQUIRED)\nPKG_CHECK_MODULES(GTK3 REQUIRED gtk+-3.0)\n\n# Setup CMake to use GTK+, tell the compiler where to look for headers\n# and to the linker where to look for libraries\ninclude_directories( ${GTK3_INCLUDE_DIRS} )\nlink_directories( ${GTK3_LIBRARY_DIRS} )\n\n# Add other flags to the compiler\nadd_definitions(${GTK3_CFLAGS_OTHER})\n\n# FreeImage\nfind_package( FreeImage REQUIRED )\ninclude_directories( ${FREEIMAGE_INCLUDE_DIRS} )\n\n# TIFF (required by FreeImage )\nfind_package( TIFF REQUIRED )\ninclude_directories( ${TIFF_INCLUDE_DIRS} )\n\n# Find Boost libs\nfind_package( Boost COMPONENTS system filesystem REQUIRED )\nmessage( \"Boost include dirs: \" ${Boost_INCLUDE_DIRS} )\ninclude_directories( ${Boost_INCLUDE_DIRS} )\n\n# We use Boost static libs\nadd_definitions( -DBOOST_LOG_DYN_LINK )\n\n# SLANG\nfind_library( SLANG_LIBRARY_DEBUG slang PATHS ${PROJECT_SOURCE_DIR}/third_party/slang/bin/linux-x64/debug )\n\nfind_library( SLANG_LIBRARY_RELEASE slang PATHS ${PROJECT_SOURCE_DIR}/third_party/slang/bin/linux-x64/release )\n\nset( SLANG_LIBRARY\n  debug ${SLANG_LIBRARY_DEBUG}\n  optimized ${SLANG_LIBRARY_RELEASE}\n)\n\nmessage (\"Using SLANG library: ${SLANG_LIBRARY}\")\n\nadd_definitions(-DPROJECT_DIR=\"${CMAKE_SOURCE_DIR}\")\nadd_definitions(-DFALCOR_DLL)\n\ntarget_link_libraries(\n    falcor_lib\n\n    glfw\n    avutil\n    avformat\n    swscale\n    stdc++fs\n    ${ASSIMP_LIBRARY}\n    ${SLANG_LIBRARY}\n    ${Boost_SYSTEM_LIBRARY}\n    ${Boost_FILESYSTEM_LIBRARY}\n    ${Python3_LIBRARIES}\n    ${Vulkan_LIBRARY}\n    ${GTK3_LIBRARIES}\n    ${FREEIMAGE_LIBRARIES}\n    ${TIFF_LIBRARIES}\n    ${ZLIB_LIBRARY}\n    OpenImageIO::OpenImageIO\n)\n\n# Copy/install all needed shaders\nset( SHADERS_OUTPUT_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Shaders)\nfile(MAKE_DIRECTORY ${SHADERS_OUTPUT_DIRECTORY})\nfile(\n    COPY Utils Scene Experimental RenderGraph Testing\n    DESTINATION ${SHADERS_OUTPUT_DIRECTORY} \n    FILES_MATCHING PATTERN \"*.slan*\"\n)\n\n# Copy/install falcor data\nfile(\n    COPY Data\n    DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY} \n)\n\nif(UNIX)\n    install( \n        TARGETS falcor_lib\n        DESTINATION lib \n    )\n\n    # Install all needed shaders\n    install(\n        DIRECTORY Core Experimental Raytracing RenderGraph RenderPasses Scene Testing Utils\n        DESTINATION shaders\n        FILES_MATCHING PATTERN \"*.slan*\"\n    )\n\n    # Install falcor data\n    install(\n        DIRECTORY Data/Framework Data/LightProbes Data/NVIDIA\n        DESTINATION data\n    )\nendif()\n",
			"file": "src/Falcor/CMakeLists.txt",
			"file_size": 6070,
			"file_write_time": 133352805803079306,
			"settings":
			{
				"buffer_size": 6070,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "ASSIMO"
					},
					"BwAAAIgGAAAAAAAAiQYAAAAAAAAAAAAAiQYAAAAAAACJBgAAAAAAAAYAAABhc3NpbXCJBgAAAAAAAIoGAAAAAAAAAAAAAIoGAAAAAAAAiwYAAAAAAAAAAAAAiwYAAAAAAACMBgAAAAAAAAAAAACMBgAAAAAAAI0GAAAAAAAAAAAAAI0GAAAAAAAAjgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAYAAAAAAACOBgAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"left_delete",
					null,
					"AQAAAI0GAAAAAAAAjQYAAAAAAAABAAAATw",
					"AQAAAAAAAAABAAAAjgYAAAAAAACOBgAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "P"
					},
					"AQAAAI0GAAAAAAAAjgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQYAAAAAAACNBgAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"paste",
					null,
					"AgAAAJwGAAAAAAAAogYAAAAAAAAAAAAAogYAAAAAAACiBgAAAAAAAAYAAABhc3NpbXA",
					"AQAAAAAAAAABAAAAnAYAAAAAAACiBgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "CMakeLists.txt",
			"settings":
			{
				"buffer_size": 14857,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD7EQAAY21ha2VfbWluaW11bV9yZXF1aXJlZCggVkVSU0lPTiAzLjUgKQoKc2V0KENNQUtFX0NfQ09NUElMRVIgZ2NjLTcpCnNldChDTUFLRV9DWFhfQ09NUElMRVIgZysrLTcpCgpzZXQoIENNQUtFX0NYWF9TVEFOREFSRCAxNyApCnNldCggQ01BS0VfQ1hYX1NUQU5EQVJEX1JFUVVJUkVEIE9OICkKc2V0KCBDTUFLRV9DWFhfRVhURU5TSU9OUyBPTiApCgpzZXQoIFBST0pFQ1RfVkVSU0lPTl9NQUpPUiAwICkKc2V0KCBQUk9KRUNUX1ZFUlNJT05fTUlOT1IgMCApCnNldCggUFJPSkVDVF9WRVJTSU9OX1BBVENIIDAwMSApCgojIEJhc2ljIGluZm9ybWF0aW9uIGFib3V0IHByb2plY3QKc2V0KCBQUk9KRUNUX1ZFUlNJT04gJHtQUk9KRUNUX1ZFUlNJT05fTUFKT1J9LiR7UFJPSkVDVF9WRVJTSU9OX01JTk9SfS4ke1BST0pFQ1RfVkVSU0lPTl9QQVRDSH0gKQpwcm9qZWN0KCBGYWxjb3IgVkVSU0lPTiAke1BST0pFQ1RfVkVSU0lPTn0gKQoKIyBTZXQgdXAgaG91ZGluaSBoZGsgYW5kIGluc3RhbGxhdGlvbiBwYXRocwpzZXQoSE9VRElOSV9IT01FICIvb3B0L2hvdWRpbmkxOC41IikKc2V0KEhPVURJTklfVVNFUiAiJEVOVntIT01FfS9ob3VkaW5pMTguNSIpCgpsaXN0KCBBUFBFTkQgQ01BS0VfUFJFRklYX1BBVEggIiR7SE9VRElOSV9IT01FfS90b29sa2l0L2NtYWtlIiApCgoKIyBBZGQgZm9sZGVyIHdoZXJlIGFyZSBzdXBwb3J0aXZlIGZ1bmN0aW9ucwpzZXQoIENNQUtFX01PRFVMRV9QQVRIIAogICR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9jbWFrZSAKICAke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vY21ha2UvbW9kdWxlcwogICR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9jbWFrZS9kZWZhdWx0cwogICR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS9jbWFrZS9tYWNyb3MKICAke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vdGhpcmRfcGFydHkvZ2xtL2NtYWtlCiAgJHtDTUFLRV9JTlNUQUxMX1BSRUZJWH0vM3JkcGFydHkvbGliL2NtYWtlL2Fzc2ltcC01LjAKICAke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vdGhpcmRfcGFydHkvT3BlbkVYUi9jbWFrZQogICR7Q01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSfS90aGlyZF9wYXJ0eS9PcGVuSW1hZ2VJTy9zcmMvY21ha2UKKQpzZXQoIENNQUtFX0lOQ0xVREVfQ1VSUkVOVF9ESVIgT04gKQoKIyBTZXQgUFJPSkVDVF9WRVJTSU9OX1BBVENIIGFuZCBQUk9KRUNUX1ZFUlNJT05fVFdFQUsgdG8gMCBpZiBub3QgcHJlc2VudCwgbmVlZGVkIGJ5IGFkZF9wcm9qZWN0X21ldGEKI2ZpeF9wcm9qZWN0X3ZlcnNpb24oKQoKIyBTZXQgYWRkaXRpb25hbCBwcm9qZWN0IGluZm9ybWF0aW9uCnNldCggQ09NUEFOWSAiUGFyb3ZveiIgKQpzZXQoIENPUFlSSUdIVCAiQ29weXJpZ2h0IChjKSAyMDIwIFBhcm92b3oiICkKc2V0KCBJREVOVElGSUVSICJjb20ucGFyb3ZveiIgKQoKIyBTZXQgcHl0aG9uIHZpcnR1YWxlbnYgZm9yIFVTRApzZXQoIFBZVEhPTl9FWEVDVVRBQkxFICJweXRob24zLjciKQoKaWYoIEFQUExFICkKICBpZihQT0xJQ1kgQ01QMDA2OCkKICAgIGNtYWtlX3BvbGljeShTRVQgQ01QMDA2OCBORVcpICAjIENNYWtlIDMuOSs6IGBSUEFUSGAgc2V0dGluZ3Mgb24gbWFjT1MgZG8gbm90IGFmZmVjdCBgaW5zdGFsbF9uYW1lYC4KICBlbmRpZigpCmVuZGlmKCkKCmlmKEFQUExFKQogIHNldChDTUFLRV9NQUNPU1hfUlBBVEggMSkKICBzZXQoIENNQUtFX0lOU1RBTExfUFJFRklYICIvQXBwbGljYXRpb25zL0ZhbGNvci9GYWxjb3IiICkKZWxzZWlmKFVOSVgpCiAgc2V0KCBDTUFLRV9JTlNUQUxMX1BSRUZJWCAiL29wdC9sYXZhLyIgKQplbmRpZigpCgojIEhhbmRsZSBidWlsZCBtb2RlCmlmKCBOT1QgQ01BS0VfQlVJTERfVFlQRSApCiAgU0VUKCBDTUFLRV9CVUlMRF9UWVBFICJERUJVRyIgKQogICNTRVQoQ01BS0VfQlVJTERfVFlQRSAiUkVMRUFTRSIpCiAgI1NFVChDTUFLRV9CVUlMRF9UWVBFICJSRUxXSVRIREVCSU5GTyIpCiAgI1NFVChDTUFLRV9CVUlMRF9UWVBFICJNSU5TSVpFUkVMIikKICBtZXNzYWdlKCJDTUFLRV9CVUlMRF9UWVBFIG5vdCBzZXQhIFVzaW5nIGRlZmF1bHQgJHtDTUFLRV9CVUlMRF9UWVBFfSBtb2RlLiIpCmVuZGlmKCkKCiMgU3BlY2lmeSBidWlsZCBwYXRocwpzZXQoIEJVSUxEX1NVQkRJUiAiIikKc3RyaW5nKFRPTE9XRVIgJHtDTUFLRV9CVUlMRF9UWVBFfSBCVUlMRF9TVUJESVIpCgpzZXQoIENNQUtFX0FSQ0hJVkVfT1VUUFVUX0RJUkVDVE9SWSAke0NNQUtFX0JJTkFSWV9ESVJ9LyR7QlVJTERfU1VCRElSfS9saWIgKQpzZXQoIENNQUtFX0xJQlJBUllfT1VUUFVUX0RJUkVDVE9SWSAke0NNQUtFX0JJTkFSWV9ESVJ9LyR7QlVJTERfU1VCRElSfS9saWIgKQpzZXQoIENNQUtFX1JVTlRJTUVfT1VUUFVUX0RJUkVDVE9SWSAke0NNQUtFX0JJTkFSWV9ESVJ9LyR7QlVJTERfU1VCRElSfS9iaW4gKQoKYWRkX2RlZmluaXRpb25zKC1ETEFWQV9JTlNUQUxMX0RJUj0iJHtDTUFLRV9JTlNUQUxMX1BSRUZJWH0iKQoKaWYgKFdJTjMyIE9SIEFQUExFKQogIGlmIChDTUFLRV9JTlNUQUxMX1BSRUZJWF9JTklUSUFMSVpFRF9UT19ERUZBVUxUKQogICAgIyBXZSBkb24ndCB3YW50IHRvIGluc3RhbGwgaW4gZGVmYXVsdCBzeXN0ZW0gbG9jYXRpb24sIGluc3RhbGwgaXMgcmVhbGx5IGZvciB0aGUgU0RLLCBzbyBjYWxsIGl0IHRoYXQKICAgIHNldChDTUFLRV9JTlNUQUxMX1BSRUZJWCAiJHtQUk9KRUNUX0JJTkFSWV9ESVJ9L3NkayIgQ0FDSEUgUEFUSCAiRmFsY29yIGluc3RhbGwgcHJlZml4IiBGT1JDRSApCiAgZW5kaWYgKENNQUtFX0lOU1RBTExfUFJFRklYX0lOSVRJQUxJWkVEX1RPX0RFRkFVTFQpCmVuZGlmKFdJTjMyIE9SIEFQUExFKQoKCmlmIChDTUFLRV9CVUlMRF9UWVBFIFNUUkVRVUFMICJERUJVRyIpCiAgYWRkX2RlZmluaXRpb25zKC1EX0RFQlVHKQogIHNldChDTUFLRV9DWFhfRkxBR1NfREVCVUcgIiR7Q01BS0VfQ1hYX0ZMQUdTX0RFQlVHfSAtRERFQlVHIikKZW5kaWYgKCkKCgppZiAoIE1TVkMgKQogIEFERF9ERUZJTklUSU9OUygvVzMpCmVsc2VpZiAoIFVOSVggKSAjKENNQUtFX0NPTVBJTEVSX0lTX0dOVUNYWCkKICBBRERfREVGSU5JVElPTlMoLVdhbGwgLWZQSUMgLVdmYXRhbC1lcnJvcnMgLWczKSAjIC1Xbm8tcmVvcmRlciAtcGVkYW50aWMKZWxzZSAoKQogIE1FU1NBR0UoRkFUQUxfRVJST1IgIkNNYWtlTGlzdHMudHh0IGhhcyBub3QgYmVlbiB0ZXN0ZWQvd3JpdHRlbiBmb3IgeW91ciBjb21waWxlci4iKQplbmRpZiAoKQoKc2V0ICggRkFMQ09SX0lOQ0xVREVfUk9PVCAke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vc3JjICkKaW5jbHVkZV9kaXJlY3RvcmllcygKICAke0ZBTENPUl9JTkNMVURFX1JPT1R9CiAgJHtGQUxDT1JfSU5DTFVERV9ST09UfS9GYWxjb3IKICAke0ZBTENPUl9JTkNMVURFX1JPT1R9L0ZhbGNvci9Db3JlCiAgJHtGQUxDT1JfSU5DTFVERV9ST09UfS9FeHRlcm5hbHMKCiAgJHtDTUFLRV9JTlNUQUxMX1BSRUZJWH0vM3JkcGFydHkvaW5jbHVkZQoKICAke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vdGhpcmRfcGFydHkKICAke0NNQUtFX0NVUlJFTlRfU09VUkNFX0RJUn0vdGhpcmRfcGFydHkvcmFwaWRqc29uCiAgJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L3NyYy9FeHRlcm5hbHMvR0xNCikKCiMgdXNlLCBpLmUuIGRvbid0IHNraXAgdGhlIGZ1bGwgUlBBVEggZm9yIHRoZSBidWlsZCB0cmVlCnNldChDTUFLRV9TS0lQX0JVSUxEX1JQQVRIIEZBTFNFKQoKIyB3aGVuIGJ1aWxkaW5nLCBkb24ndCB1c2UgdGhlIGluc3RhbGwgUlBBVEggYWxyZWFkeQojIChidXQgbGF0ZXIgb24gd2hlbiBpbnN0YWxsaW5nKQpzZXQoQ01BS0VfQlVJTERfV0lUSF9JTlNUQUxMX1JQQVRIIEZBTFNFKQoKc2V0KENNQUtFX0lOU1RBTExfUlBBVEggIiR7Q01BS0VfSU5TVEFMTF9QUkVGSVh9L2xpYiIpCgojIGFkZCB0aGUgYXV0b21hdGljYWxseSBkZXRlcm1pbmVkIHBhcnRzIG9mIHRoZSBSUEFUSAojIHdoaWNoIHBvaW50IHRvIGRpcmVjdG9yaWVzIG91dHNpZGUgdGhlIGJ1aWxkIHRyZWUgdG8gdGhlIGluc3RhbGwgUlBBVEgKc2V0KENNQUtFX0lOU1RBTExfUlBBVEhfVVNFX0xJTktfUEFUSCBUUlVFKQoKIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQojIERvY3VtZW50YXRpb24KIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKc2V0KCBGQUxDT1JfQlVJTERfTElCU19BU19GUkFNRVdPUktTIHRydWUgKQoKIyBOb3cgc2V0dXAgdGFyZ2V0cwoKIyB0aGlydCBwYXJ0eSBsaWJzCiNhZGRfc3ViZGlyZWN0b3J5KCB0aGlyZF9wYXJ0eSApCgojIE91ciBzdHVmZgphZGRfc3ViZGlyZWN0b3J5KCBzcmMgKQojYWRkX3N1YmRpcmVjdG9yeSggY29udHJpYiApCgoKI2luc3RhbGwoCiMgICAgRElSRUNUT1JZCiMgICAgJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L3Rlc3RzCiMgICAgJHtDTUFLRV9DVVJSRU5UX1NPVVJDRV9ESVJ9L2NvbnRyaWIKIyAgICBERVNUSU5BVElPTiAke0NNQUtFX0lOU1RBTExfUFJFRklYfQojICAgIFVTRV9TT1VSQ0VfUEVSTUlTU0lPTlMKIyAgICBGSUxFU19NQVRDSElORyBQQVRURVJOICIqIgojKQAAAAAAAAAACToAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "#include <vector>\n#include <fstream>\n#include <iterator>\n#include <regex>\n#include <chrono>\n\n#include <stdio.h>\n\n#include <boost/spirit/include/support_istream_iterator.hpp>\n\n#include \"rapidjson/document.h\"\n\n#include \"reader_lsd.h\"\n#include \"grammar_lsd.h\"\n#include \"../reader_bgeo/bgeo/Bgeo.h\"\n\n#include \"lava_utils_lib/logging.h\"\n\nnamespace x3 = boost::spirit::x3;\n\nnamespace lava {\n\n\nReaderLSD::ReaderLSD(): ReaderBase(), mInitialized(false) { }\n\nReaderLSD::~ReaderLSD() {}\n\nvoid ReaderLSD::init(std::unique_ptr<RendererIface> pRendererInterface, bool echo) {\n    auto pSession = lsd::Session::create(std::move(pRendererInterface));\n    if (!pSession) {\n        LLOG_ERR << \"Error initializing session !!!\";\n        return;\n    }\n\n    if (!echo) {\n        // standard LSD visitor\n        mpVisitor = std::make_unique<lsd::Visitor>(pSession);\n    } else {\n        // LSD visitor with parsed console echo (for debug purposes)\n        mpVisitor = std::make_unique<lsd::EchoVisitor>(pSession);\n    }\n\n    mInitialized = true;\n\n    LLOG_DBG << \"ReaderLSD::init done\";\n}\n\nbool ReaderLSD::isInitialized() {\n    return mInitialized;\n}\n\nconst char *ReaderLSD::formatName() const{\n    return \"Lava LSD\";\n}\n\nbool ReaderLSD::checkExtension(const char *name) {\n    if (strcmp(name, \".lsd\")) return true;\n    return false;\n}\n\nvoid ReaderLSD::getFileExtensions(std::vector<std::string> &extensions) const{\n    extensions.insert(extensions.end(), _lsd_extensions.begin(), _lsd_extensions.end());\n}\n\nbool ReaderLSD::checkMagicNumber(unsigned magic) {\n  return true;\n}\n\nbool ReaderLSD::parseStream(std::istream& in) {\n    if (!isInitialized()) {\n        LLOG_ERR << \"Readed not initialized !!!\";\n        return false;\n    }\n\n    mpVisitor->setParserStream(in);\n\n    in.unsetf(std::ios_base::skipws);\n    \n    std::string str;\n    std::string::iterator begin, end;\n\n    bool eof = false;\n    while(!eof) {\n        if(!std::getline(in, str)) {\n            eof = true;\n            break;\n        }\n\n        begin = str.begin(); end = str.end();\n        \n        std::vector<lsd::ast::Command> commands; // ast tree\n        bool result = x3::phrase_parse(begin, end, lsd::parser::input, lsd::parser::skipper, commands); \n\n        if (!result) {\n            LLOG_ERR << \"Parsing LSD scene failed !!!\" << std::endl;\n            return false;\n        }\n\n        if (begin != end) {\n            LLOG_DBG << \"Remaining unparsed: \" << std::string(begin, end);\n        }\n\n        for (auto& cmd : commands) {\n            if (!mpVisitor->ignoreCommands()) {\n                //try {\n                    boost::apply_visitor(*mpVisitor, cmd);\n                //} catch (const std::runtime_error& re) {\n                //    LLOG_FTL << \"Runtime error: \" << re.what();\n                //    return false;\n                //} catch (const std::exception &exc) {\n                //    // catch anything thrown within try block that derives from std::exception\n                //    LLOG_FTL << exc.what();\n                //} catch (...) {\n                //    LLOG_FTL << \"Unknown error occured !!! __________________________\";\n                //    LLOG_FTL << str;\n                //    LLOG_FTL << \"____________________________________________________\";\n                //    return false;\n                //}\n            }\n        }\n    }\n\n    return true;\n}\n\n// factory methods\nstd::vector<std::string> *ReaderLSD::myExtensions() {\n    return &_lsd_extensions;\n}\n\nReaderBase::SharedPtr ReaderLSD::myConstructor() {\n    return ReaderBase::SharedPtr(new ReaderLSD());\n}\n\n}  // namespace lava",
			"file": "src/lava_lib/reader_lsd/reader_lsd.cpp",
			"file_size": 3564,
			"file_write_time": 133352798597227383,
			"settings":
			{
				"buffer_size": 3564,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAHgJAAAAAAAAeQkAAAAAAAAAAAAAeQkAAAAAAAB6CQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4CQAAAAAAAHgJAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"reindent",
					null,
					"AQAAAHkJAAAAAAAAhQkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB5CQAAAAAAAHkJAAAAAAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAIUJAAAAAAAAhgkAAAAAAAAAAAAAhgkAAAAAAACHCQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACFCQAAAAAAAIUJAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIcJAAAAAAAAiQkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACHCQAAAAAAAIcJAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAIgJAAAAAAAAiQkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACICQAAAAAAAIgJAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert_completion",
					{
						"completion": "mpVisitor",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mpVisitor"
					},
					"AgAAAIgJAAAAAAAAiAkAAAAAAAABAAAAbYgJAAAAAAAAkQkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJCQAAAAAAAIkJAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "->failed"
					},
					"CAAAAJEJAAAAAAAAkgkAAAAAAAAAAAAAkgkAAAAAAACTCQAAAAAAAAAAAACTCQAAAAAAAJQJAAAAAAAAAAAAAJQJAAAAAAAAlQkAAAAAAAAAAAAAlQkAAAAAAACWCQAAAAAAAAAAAACWCQAAAAAAAJcJAAAAAAAAAAAAAJcJAAAAAAAAmAkAAAAAAAAAAAAAmAkAAAAAAACZCQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACRCQAAAAAAAJEJAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJkJAAAAAAAAmwkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZCQAAAAAAAJkJAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJwJAAAAAAAAnQkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACcCQAAAAAAAJwJAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJ0JAAAAAAAAnwkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdCQAAAAAAAJ0JAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAJ4JAAAAAAAAnwkAAAAAAAAAAAAAnwkAAAAAAACrCQAAAAAAAAAAAACrCQAAAAAAAKwJAAAAAAAAAAAAAKwJAAAAAAAAuAkAAAAAAAAAAAAAnwkAAAAAAACfCQAAAAAAAAwAAAAgICAgICAgICAgICCfCQAAAAAAAK8JAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACeCQAAAAAAAJ4JAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "ret"
					},
					"AwAAAK8JAAAAAAAAsAkAAAAAAAAAAAAAsAkAAAAAAACxCQAAAAAAAAAAAACxCQAAAAAAALIJAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvCQAAAAAAAK8JAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAAK8JAAAAAAAArwkAAAAAAAADAAAAcmV0rwkAAAAAAAC1CQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyCQAAAAAAALIJAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " f"
					},
					"AgAAALUJAAAAAAAAtgkAAAAAAAAAAAAAtgkAAAAAAAC3CQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1CQAAAAAAALUJAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "false"
					},
					"AgAAALYJAAAAAAAAtgkAAAAAAAABAAAAZrYJAAAAAAAAuwkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3CQAAAAAAALcJAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALsJAAAAAAAAvAkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7CQAAAAAAALsJAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAABDCwAAI2luY2x1ZGUgPHZlY3Rvcj4KI2luY2x1ZGUgPGZzdHJlYW0+CiNpbmNsdWRlIDxpdGVyYXRvcj4KI2luY2x1ZGUgPHJlZ2V4PgojaW5jbHVkZSA8Y2hyb25vPgoKI2luY2x1ZGUgPHN0ZGlvLmg+CgojaW5jbHVkZSA8Ym9vc3Qvc3Bpcml0L2luY2x1ZGUvc3VwcG9ydF9pc3RyZWFtX2l0ZXJhdG9yLmhwcD4KCiNpbmNsdWRlICJyYXBpZGpzb24vZG9jdW1lbnQuaCIKCiNpbmNsdWRlICJyZWFkZXJfbHNkLmgiCiNpbmNsdWRlICJncmFtbWFyX2xzZC5oIgojaW5jbHVkZSAiLi4vcmVhZGVyX2JnZW8vYmdlby9CZ2VvLmgiCgojaW5jbHVkZSAibGF2YV91dGlsc19saWIvbG9nZ2luZy5oIgoKbmFtZXNwYWNlIHgzID0gYm9vc3Q6OnNwaXJpdDo6eDM7CgpuYW1lc3BhY2UgbGF2YSB7CgoKUmVhZGVyTFNEOjpSZWFkZXJMU0QoKTogUmVhZGVyQmFzZSgpLCBtSW5pdGlhbGl6ZWQoZmFsc2UpIHsgfQoKUmVhZGVyTFNEOjp+UmVhZGVyTFNEKCkge30KCnZvaWQgUmVhZGVyTFNEOjppbml0KHN0ZDo6c2hhcmVkX3B0cjxSZW5kZXJlcj4gcFJlbmRlcmVyLCBib29sIGVjaG8pIHsKICAgIGF1dG8gcFNlc3Npb24gPSBsc2Q6OlNlc3Npb246OmNyZWF0ZShwUmVuZGVyZXIpOwogICAgaWYgKCFwU2Vzc2lvbikgewogICAgICAgIExMT0dfRVJSIDw8ICJFcnJvciBpbml0aWFsaXppbmcgc2Vzc2lvbiAhISEiOwogICAgICAgIHJldHVybjsKICAgIH0KCiAgICBtRWNob0lucHV0ID0gZWNobzsKCiAgICBtcFZpc2l0b3IgPSBzdGQ6Om1ha2VfdW5pcXVlPGxzZDo6VmlzaXRvcj4ocFNlc3Npb24pOwogICAgbUluaXRpYWxpemVkID0gdHJ1ZTsKCiAgICBMTE9HX0RCRyA8PCAiUmVhZGVyTFNEOjppbml0IGRvbmUiOwp9Cgpib29sIFJlYWRlckxTRDo6aXNJbml0aWFsaXplZCgpIHsKICAgIHJldHVybiBtSW5pdGlhbGl6ZWQ7Cn0KCmNvbnN0IGNoYXIgKlJlYWRlckxTRDo6Zm9ybWF0TmFtZSgpIGNvbnN0ewogICAgcmV0dXJuICJMYXZhIExTRCI7Cn0KCmJvb2wgUmVhZGVyTFNEOjpjaGVja0V4dGVuc2lvbihjb25zdCBjaGFyICpuYW1lKSB7CiAgICBpZiAoc3RyY21wKG5hbWUsICIubHNkIikpIHJldHVybiB0cnVlOwogICAgcmV0dXJuIGZhbHNlOwp9Cgp2b2lkIFJlYWRlckxTRDo6Z2V0RmlsZUV4dGVuc2lvbnMoc3RkOjp2ZWN0b3I8c3RkOjpzdHJpbmc+ICZleHRlbnNpb25zKSBjb25zdHsKICAgIGV4dGVuc2lvbnMuaW5zZXJ0KGV4dGVuc2lvbnMuZW5kKCksIF9sc2RfZXh0ZW5zaW9ucy5iZWdpbigpLCBfbHNkX2V4dGVuc2lvbnMuZW5kKCkpOwp9Cgpib29sIFJlYWRlckxTRDo6Y2hlY2tNYWdpY051bWJlcih1bnNpZ25lZCBtYWdpYykgewogIHJldHVybiB0cnVlOwp9Cgpib29sIFJlYWRlckxTRDo6cGFyc2VTdHJlYW0oc3RkOjppc3RyZWFtJiBpbikgewogICAgaWYgKCFpc0luaXRpYWxpemVkKCkpIHsKICAgICAgICBMTE9HX0VSUiA8PCAiUmVhZGVkIG5vdCBpbml0aWFsaXplZCAhISEiOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICBtcFZpc2l0b3ItPnNldFBhcnNlclN0cmVhbShpbik7CgogICAgaW4udW5zZXRmKHN0ZDo6aW9zX2Jhc2U6OnNraXB3cyk7CiAgICAKICAgIHN0ZDo6c3RyaW5nIHN0cjsKICAgIHN0ZDo6c3RyaW5nOjppdGVyYXRvciBiZWdpbiwgZW5kOwoKICAgIGJvb2wgZW9mID0gZmFsc2U7CiAgICB3aGlsZSghZW9mKSB7CiAgICAgICAgaWYoIXN0ZDo6Z2V0bGluZShpbiwgc3RyKSkgewogICAgICAgICAgICBlb2YgPSB0cnVlOwogICAgICAgICAgICBicmVhazsKICAgICAgICB9CgogICAgICAgIGlmKG1FY2hvSW5wdXQpIHN0ZDo6Y291dCA8PCBzdHI7CgogICAgICAgIGJlZ2luID0gc3RyLmJlZ2luKCk7IGVuZCA9IHN0ci5lbmQoKTsKICAgICAgICAKICAgICAgICBzdGQ6OnZlY3Rvcjxsc2Q6OmFzdDo6Q29tbWFuZD4gY29tbWFuZHM7IC8vIGFzdCB0cmVlCiAgICAgICAgYm9vbCByZXN1bHQgPSB4Mzo6cGhyYXNlX3BhcnNlKGJlZ2luLCBlbmQsIGxzZDo6cGFyc2VyOjppbnB1dCwgbHNkOjpwYXJzZXI6OnNraXBwZXIsIGNvbW1hbmRzKTsgCgogICAgICAgIGlmICghcmVzdWx0KSB7CiAgICAgICAgICAgIExMT0dfRVJSIDw8ICJQYXJzaW5nIExTRCBzY2VuZSBmYWlsZWQgISEhIiA8PCBzdGQ6OmVuZGw7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CgogICAgICAgIGlmIChiZWdpbiAhPSBlbmQpIHsKICAgICAgICAgICAgTExPR19EQkcgPDwgIlJlbWFpbmluZyB1bnBhcnNlZDogIiA8PCBzdGQ6OnN0cmluZyhiZWdpbiwgZW5kKTsKICAgICAgICB9CgogICAgICAgIGZvciAoYXV0byYgY21kIDogY29tbWFuZHMpIHsKICAgICAgICAgICAgaWYgKCFtcFZpc2l0b3ItPmlnbm9yZUNvbW1hbmRzKCkpIHsKICAgICAgICAgICAgICAgIGJvb3N0OjphcHBseV92aXNpdG9yKCptcFZpc2l0b3IsIGNtZCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKG1wVmlzaXRvci0+ZmFpbGVkKCkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYobXBWaXNpdG9yLT5yZWFkeVRvUXVpdCgpKSB7CiAgICAgICAgICAgICAgICBlb2YgPSB0cnVlOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0gCiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIHRydWU7Cn0KCi8vIGZhY3RvcnkgbWV0aG9kcwpzdGQ6OnZlY3RvcjxzdGQ6OnN0cmluZz4gKlJlYWRlckxTRDo6bXlFeHRlbnNpb25zKCkgewogICAgcmV0dXJuICZfbHNkX2V4dGVuc2lvbnM7Cn0KClJlYWRlckJhc2U6OlNoYXJlZFB0ciBSZWFkZXJMU0Q6Om15Q29uc3RydWN0b3IoKSB7CiAgICByZXR1cm4gUmVhZGVyQmFzZTo6U2hhcmVkUHRyKG5ldyBSZWFkZXJMU0QoKSk7Cn0KCn0gIC8vIG5hbWVzcGFjZSBsYXZhAAAAAAAAAADsDQAAAAAAAAAAAAAAAAAAAAAAAOwNAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8CQAAAAAAALwJAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "#ifndef SRC_LAVA_LIB_READER_LSD_LSD_VISITOR_H_\n#define SRC_LAVA_LIB_READER_LSD_LSD_VISITOR_H_\n\n#include <array>\n#include <memory>\n#include <string>\n#include <algorithm>\n#include <iostream>\n#include <variant>\n\n#include \"grammar_lsd.h\"\n#include \"../reader_bgeo/bgeo/Bgeo.h\"\n\nnamespace lava { \n\nnamespace lsd { \n\nclass Session;\n\nstruct Visitor: public boost::static_visitor<> {\n public:\n    Visitor(std::unique_ptr<Session>& pSession);\n\n    virtual void operator()(ast::NoValue const& c) const {};\n    virtual void operator()(ast::ifthen const& c);\n    virtual void operator()(ast::endif const& c);\n    virtual void operator()(ast::setenv const& c) const;\n    virtual void operator()(ast::cmd_image const& c) const;\n    virtual void operator()(ast::cmd_iprmode const& c) const;\n    virtual void operator()(ast::cmd_end const& c) const;\n    virtual void operator()(ast::cmd_quit const& c) const;\n    virtual void operator()(ast::cmd_start const& c) const;\n    virtual void operator()(ast::cmd_time const& c) const;\n    virtual void operator()(ast::cmd_detail const& c);\n    virtual void operator()(ast::cmd_version const& c) const;\n    virtual void operator()(ast::cmd_config const& c) const;\n    virtual void operator()(ast::cmd_defaults const& c) const;\n    virtual void operator()(ast::cmd_transform const& c) const;\n    virtual void operator()(ast::cmd_mtransform const& c) const;\n    virtual void operator()(ast::cmd_geometry const& c) const;\n    virtual void operator()(ast::cmd_property const& c) const;\n    virtual void operator()(ast::cmd_deviceoption const& c) const;\n    virtual void operator()(ast::cmd_declare const& c) const;\n    virtual void operator()(ast::cmd_raytrace const& c) const;\n    virtual void operator()(ast::cmd_reset const& c) const;\n    virtual void operator()(ast::ray_embeddedfile const& c) const;\n\n    void setParserStream(std::istream& in);\n\n    bool ignoreCommands() { return mIgnoreCommands; };\n\n protected:\n    std::unique_ptr<Session> mpSession;\n\n private:\n    std::istream*   mpParserStream; // used for inline bgeo reading\n    bool mIgnoreCommands;\n};\n\n\nstruct EchoVisitor: public Visitor {\n public:\n    EchoVisitor(std::unique_ptr<Session>& pSession);\n    EchoVisitor(std::unique_ptr<Session>& pSession, std::ostream& os);\n\n    void operator()(ast::NoValue const& c) const override {};\n    void operator()(ast::ifthen const& c) override;\n    void operator()(ast::endif const& c) override;\n    void operator()(ast::setenv const& c) const override;\n    void operator()(ast::cmd_image const& c) const override;\n    void operator()(ast::cmd_iprmode const& c) const override;\n    void operator()(ast::cmd_end const& c) const override;\n    void operator()(ast::cmd_quit const& c) const override;\n    void operator()(ast::cmd_start const& c) const override;\n    void operator()(ast::cmd_time const& c) const override;\n    void operator()(ast::cmd_detail const& c) override;\n    void operator()(ast::cmd_version const& c) const override;\n    void operator()(ast::cmd_config const& c) const override;\n    void operator()(ast::cmd_defaults const& c) const override;\n    void operator()(ast::cmd_transform const& c) const override;\n    void operator()(ast::cmd_mtransform const& c) const override;\n    void operator()(ast::cmd_geometry const& c) const override;\n    void operator()(ast::cmd_property const& c) const override;\n    void operator()(ast::cmd_deviceoption const& c) const override;\n    void operator()(ast::cmd_declare const& c) const override;\n    void operator()(ast::cmd_raytrace const& c) const override;\n    void operator()(ast::cmd_reset const& c) const override;\n    void operator()(ast::ray_embeddedfile const& c) const override;\n\n //private:\n    void operator()(std::vector<PropValue> const& v) const;\n    void operator()(int v) const;\n    void operator()(double v) const;\n    void operator()(std::string const& v) const;\n    void operator()(Int2 const& v) const;\n    void operator()(Int3 const& v) const;\n    void operator()(Int4 const& v) const;\n    void operator()(Vector2 const& v) const;\n    void operator()(Vector3 const& v) const;\n    void operator()(Vector4 const& v) const;\n    void operator()(PropValue const& v) const;\n\n private:\n    std::ostream& _os;\n};\n\n}  // namespace lsd\n\n}  // namespace lava\n\n#endif  // SRC_LAVA_LIB_READER_LSD_LSD_VISITOR_H_",
			"file": "src/lava_lib/reader_lsd/visitor.h",
			"file_size": 4307,
			"file_write_time": 133352798597267383,
			"settings":
			{
				"buffer_size": 4307,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					6,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEMIAAAAAAAARAgAAAAAAAAAAAAARAgAAAAAAABICAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABDCAAAAAAAAEMIAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"paste",
					null,
					"AQAAAEgIAAAAAAAAeggAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABICAAAAAAAAEgIAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "faile"
					},
					"BgAAAFQIAAAAAAAAVQgAAAAAAAAAAAAAVQgAAAAAAABVCAAAAAAAAAsAAAByZWFkeVRvUXVpdFUIAAAAAAAAVggAAAAAAAAAAAAAVggAAAAAAABXCAAAAAAAAAAAAABXCAAAAAAAAFgIAAAAAAAAAAAAAFgIAAAAAAAAWQgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABUCAAAAAAAAF8IAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert_completion",
					{
						"completion": "failed",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "failed"
					},
					"AgAAAFQIAAAAAAAAVAgAAAAAAAAFAAAAZmFpbGVUCAAAAAAAAFoIAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABZCAAAAAAAAFkIAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "Failed"
					},
					"BgAAAG0IAAAAAAAAbggAAAAAAAAAAAAAbggAAAAAAABvCAAAAAAAAAAAAABvCAAAAAAAAHAIAAAAAAAAAAAAAHAIAAAAAAAAcQgAAAAAAAAAAAAAcQgAAAAAAAByCAAAAAAAAAAAAAByCAAAAAAAAHMIAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABtCAAAAAAAAG0IAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					4,
					"right_delete",
					null,
					"BAAAAHMIAAAAAAAAcwgAAAAAAAABAAAAUXMIAAAAAAAAcwgAAAAAAAABAAAAdXMIAAAAAAAAcwgAAAAAAAABAAAAaXMIAAAAAAAAcwgAAAAAAAABAAAAdA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABzCAAAAAAAAHMIAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "\nbo"
					},
					"BAAAACcJAAAAAAAAKAkAAAAAAAAAAAAAKAkAAAAAAAAsCQAAAAAAAAAAAAAsCQAAAAAAAC0JAAAAAAAAAAAAAC0JAAAAAAAALgkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAnCQAAAAAAACcJAAAAAAAAAAAAAABwekA"
				],
				[
					17,
					1,
					"insert_completion",
					{
						"completion": "bool",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "bool"
					},
					"AgAAACwJAAAAAAAALAkAAAAAAAACAAAAYm8sCQAAAAAAADAJAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAuCQAAAAAAAC4JAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " mF"
					},
					"AwAAADAJAAAAAAAAMQkAAAAAAAAAAAAAMQkAAAAAAAAyCQAAAAAAAAAAAAAyCQAAAAAAADMJAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwCQAAAAAAADAJAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"insert_completion",
					{
						"completion": "mFailed",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mFailed"
					},
					"AgAAADEJAAAAAAAAMQkAAAAAAAACAAAAbUYxCQAAAAAAADgJAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAzCQAAAAAAADMJAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAADgJAAAAAAAAOQkAAAAAAAAAAAAAOQkAAAAAAAA6CQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA4CQAAAAAAADgJAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADoJAAAAAAAAOwkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6CQAAAAAAADoJAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "false"
					},
					"AQAAADsJAAAAAAAAQAkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7CQAAAAAAADsJAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEAJAAAAAAAAQQkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABACQAAAAAAAEAJAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "mpSes"
					},
					"BgAAAGwIAAAAAAAAbQgAAAAAAAAAAAAAbQgAAAAAAABtCAAAAAAAAAcAAABtRmFpbGVkbQgAAAAAAABuCAAAAAAAAAAAAABuCAAAAAAAAG8IAAAAAAAAAAAAAG8IAAAAAAAAcAgAAAAAAAAAAAAAcAgAAAAAAABxCAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABsCAAAAAAAAHMIAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert_completion",
					{
						"completion": "mpSession",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mpSession"
					},
					"AgAAAGwIAAAAAAAAbAgAAAAAAAAFAAAAbXBTZXNsCAAAAAAAAHUIAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABxCAAAAAAAAHEIAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAHUIAAAAAAAAdggAAAAAAAAAAAAAdggAAAAAAAB3CAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB1CAAAAAAAAHUIAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHcIAAAAAAAAeAgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB3CAAAAAAAAHcIAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "no"
					},
					"AgAAAHgIAAAAAAAAeQgAAAAAAAAAAAAAeQgAAAAAAAB6CAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4CAAAAAAAAHgIAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					2,
					"left_delete",
					null,
					"AgAAAHkIAAAAAAAAeQgAAAAAAAABAAAAb3gIAAAAAAAAeAgAAAAAAAABAAAAbg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB6CAAAAAAAAHoIAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "mpSe"
					},
					"BAAAAHgIAAAAAAAAeQgAAAAAAAAAAAAAeQgAAAAAAAB6CAAAAAAAAAAAAAB6CAAAAAAAAHsIAAAAAAAAAAAAAHsIAAAAAAAAfAgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4CAAAAAAAAHgIAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"insert_completion",
					{
						"completion": "mpSession",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mpSession"
					},
					"AgAAAHgIAAAAAAAAeAgAAAAAAAAEAAAAbXBTZXgIAAAAAAAAgQgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB8CAAAAAAAAHwIAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "-<>"
					},
					"AwAAAIEIAAAAAAAAgggAAAAAAAAAAAAAgggAAAAAAACDCAAAAAAAAAAAAACDCAAAAAAAAIQIAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBCAAAAAAAAIEIAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					2,
					"left_delete",
					null,
					"AgAAAIMIAAAAAAAAgwgAAAAAAAABAAAAPoIIAAAAAAAAgggAAAAAAAABAAAAPA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACECAAAAAAAAIQIAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": ">faile"
					},
					"BgAAAIIIAAAAAAAAgwgAAAAAAAAAAAAAgwgAAAAAAACECAAAAAAAAAAAAACECAAAAAAAAIUIAAAAAAAAAAAAAIUIAAAAAAAAhggAAAAAAAAAAAAAhggAAAAAAACHCAAAAAAAAAAAAACHCAAAAAAAAIgIAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCCAAAAAAAAIIIAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"insert_completion",
					{
						"completion": "failed",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "failed"
					},
					"AgAAAIMIAAAAAAAAgwgAAAAAAAAFAAAAZmFpbGWDCAAAAAAAAIkIAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACICAAAAAAAAIgIAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIkIAAAAAAAAiwgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJCAAAAAAAAIkIAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAIsIAAAAAAAAjAgAAAAAAAAAAAAAjAgAAAAAAACNCAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACLCAAAAAAAAIsIAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": " fa"
					},
					"AwAAAI0IAAAAAAAAjggAAAAAAAAAAAAAjggAAAAAAACPCAAAAAAAAAAAAACPCAAAAAAAAJAIAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNCAAAAAAAAI0IAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "false"
					},
					"AgAAAI4IAAAAAAAAjggAAAAAAAACAAAAZmGOCAAAAAAAAJMIAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACQCAAAAAAAAJAIAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					2,
					"left_delete",
					null,
					"AgAAAEgJAAAAAAAASAkAAAAAAAAZAAAAICAgIGJvb2wgbUZhaWxlZCA9IGZhbHNlO0cJAAAAAAAARwkAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABhCQAAAAAAAEgJAAAAAAAAAAAAAAAA8L8"
				],
				[
					63,
					1,
					"right_delete",
					null,
					"AQAAAGIIAAAAAAAAYggAAAAAAAA0AAAAIHsgcmV0dXJuIG1wU2Vzc2lvbiA/IG1wU2Vzc2lvbi0+ZmFpbGVkKCkgOiBmYWxzZTsgfQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABiCAAAAAAAAJYIAAAAAAAAAAAAAAAA8L8"
				],
				[
					66,
					7,
					"right_delete",
					null,
					"BwAAAEgIAAAAAAAASAgAAAAAAAABAAAAaUgIAAAAAAAASAgAAAAAAAABAAAAbkgIAAAAAAAASAgAAAAAAAABAAAAbEgIAAAAAAAASAgAAAAAAAABAAAAaUgIAAAAAAAASAgAAAAAAAABAAAAbkgIAAAAAAAASAgAAAAAAAABAAAAZUgIAAAAAAAASAgAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABICAAAAAAAAEgIAAAAAAAAAAAAAAAA8L8"
				],
				[
					68,
					7,
					"right_delete",
					null,
					"BwAAABEIAAAAAAAAEQgAAAAAAAABAAAAaREIAAAAAAAAEQgAAAAAAAABAAAAbhEIAAAAAAAAEQgAAAAAAAABAAAAbBEIAAAAAAAAEQgAAAAAAAABAAAAaREIAAAAAAAAEQgAAAAAAAABAAAAbhEIAAAAAAAAEQgAAAAAAAABAAAAZREIAAAAAAAAEQgAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAARCAAAAAAAABEIAAAAAAAAAAAAAAAAQkA"
				],
				[
					70,
					7,
					"right_delete",
					null,
					"BwAAAM0HAAAAAAAAzQcAAAAAAAABAAAAac0HAAAAAAAAzQcAAAAAAAABAAAAbs0HAAAAAAAAzQcAAAAAAAABAAAAbM0HAAAAAAAAzQcAAAAAAAABAAAAac0HAAAAAAAAzQcAAAAAAAABAAAAbs0HAAAAAAAAzQcAAAAAAAABAAAAZc0HAAAAAAAAzQcAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNBwAAAAAAAM0HAAAAAAAAAAAAAAAAQkA"
				],
				[
					1,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAAApEgAAI2lmbmRlZiBTUkNfTEFWQV9MSUJfUkVBREVSX0xTRF9MU0RfVklTSVRPUl9IXwojZGVmaW5lIFNSQ19MQVZBX0xJQl9SRUFERVJfTFNEX0xTRF9WSVNJVE9SX0hfCgojaW5jbHVkZSA8YXJyYXk+CiNpbmNsdWRlIDxtZW1vcnk+CiNpbmNsdWRlIDxzdHJpbmc+CiNpbmNsdWRlIDxhbGdvcml0aG0+CiNpbmNsdWRlIDxpb3N0cmVhbT4KI2luY2x1ZGUgPHZhcmlhbnQ+CgojaW5jbHVkZSAiZ3JhbW1hcl9sc2QuaCIKI2luY2x1ZGUgIi4uL3JlYWRlcl9iZ2VvL2JnZW8vQmdlby5oIgoKbmFtZXNwYWNlIGxhdmEgeyAKCm5hbWVzcGFjZSBsc2QgeyAKCmNsYXNzIFNlc3Npb247CgpzdHJ1Y3QgVmlzaXRvcjogcHVibGljIGJvb3N0OjpzdGF0aWNfdmlzaXRvcjw+IHsKICBwdWJsaWM6CiAgICBWaXNpdG9yKHN0ZDo6dW5pcXVlX3B0cjxTZXNzaW9uPiYgcFNlc3Npb24pOwoKICAgIHZpcnR1YWwgdm9pZCBvcGVyYXRvcigpKGFzdDo6Tm9WYWx1ZSBjb25zdCYgYykgY29uc3Qge307CiAgICB2aXJ0dWFsIHZvaWQgb3BlcmF0b3IoKShhc3Q6OmlmdGhlbiBjb25zdCYgYyk7CiAgICB2aXJ0dWFsIHZvaWQgb3BlcmF0b3IoKShhc3Q6OmVuZGlmIGNvbnN0JiBjKTsKICAgIHZpcnR1YWwgdm9pZCBvcGVyYXRvcigpKGFzdDo6c2V0ZW52IGNvbnN0JiBjKSBjb25zdDsKICAgIHZpcnR1YWwgdm9pZCBvcGVyYXRvcigpKGFzdDo6Y21kX2ltYWdlIGNvbnN0JiBjKSBjb25zdDsKICAgIHZpcnR1YWwgdm9pZCBvcGVyYXRvcigpKGFzdDo6Y21kX2lwcm1vZGUgY29uc3QmIGMpIGNvbnN0OwogICAgdmlydHVhbCB2b2lkIG9wZXJhdG9yKCkoYXN0OjpjbWRfZW5kIGNvbnN0JiBjKSBjb25zdDsKICAgIHZpcnR1YWwgdm9pZCBvcGVyYXRvcigpKGFzdDo6Y21kX2VkZ2UgY29uc3QmIGMpIGNvbnN0OwogICAgdmlydHVhbCB2b2lkIG9wZXJhdG9yKCkoYXN0OjpjbWRfcXVpdCBjb25zdCYgYykgY29uc3Q7CiAgICB2aXJ0dWFsIHZvaWQgb3BlcmF0b3IoKShhc3Q6OmNtZF9zdGFydCBjb25zdCYgYykgY29uc3Q7CiAgICB2aXJ0dWFsIHZvaWQgb3BlcmF0b3IoKShhc3Q6OmNtZF90aW1lIGNvbnN0JiBjKSBjb25zdDsKICAgIHZpcnR1YWwgdm9pZCBvcGVyYXRvcigpKGFzdDo6Y21kX2RldGFpbCBjb25zdCYgYyk7CiAgICB2aXJ0dWFsIHZvaWQgb3BlcmF0b3IoKShhc3Q6OmNtZF92ZXJzaW9uIGNvbnN0JiBjKSBjb25zdDsKICAgIHZpcnR1YWwgdm9pZCBvcGVyYXRvcigpKGFzdDo6Y21kX2NvbmZpZyBjb25zdCYgYykgY29uc3Q7CiAgICB2aXJ0dWFsIHZvaWQgb3BlcmF0b3IoKShhc3Q6OmNtZF9kZWZhdWx0cyBjb25zdCYgYykgY29uc3Q7CiAgICB2aXJ0dWFsIHZvaWQgb3BlcmF0b3IoKShhc3Q6OmNtZF90cmFuc2Zvcm0gY29uc3QmIGMpIGNvbnN0OwogICAgdmlydHVhbCB2b2lkIG9wZXJhdG9yKCkoYXN0OjpjbWRfbXRyYW5zZm9ybSBjb25zdCYgYykgY29uc3Q7CiAgICB2aXJ0dWFsIHZvaWQgb3BlcmF0b3IoKShhc3Q6OmNtZF9nZW9tZXRyeSBjb25zdCYgYykgY29uc3Q7CiAgICB2aXJ0dWFsIHZvaWQgb3BlcmF0b3IoKShhc3Q6OmNtZF9wcm9wZXJ0eSBjb25zdCYgYykgY29uc3Q7CiAgICB2aXJ0dWFsIHZvaWQgb3BlcmF0b3IoKShhc3Q6OmNtZF9kZXZpY2VvcHRpb24gY29uc3QmIGMpIGNvbnN0OwogICAgdmlydHVhbCB2b2lkIG9wZXJhdG9yKCkoYXN0OjpjbWRfZGVjbGFyZSBjb25zdCYgYykgY29uc3Q7CiAgICB2aXJ0dWFsIHZvaWQgb3BlcmF0b3IoKShhc3Q6OmNtZF9yYXl0cmFjZSBjb25zdCYgYykgY29uc3Q7CiAgICB2aXJ0dWFsIHZvaWQgb3BlcmF0b3IoKShhc3Q6OmNtZF9yZXNldCBjb25zdCYgYykgY29uc3Q7CiAgICB2aXJ0dWFsIHZvaWQgb3BlcmF0b3IoKShhc3Q6OmNtZF9zb2NrZXQgY29uc3QmIGMpIGNvbnN0OwogICAgdmlydHVhbCB2b2lkIG9wZXJhdG9yKCkoYXN0OjpyYXlfZW1iZWRkZWRmaWxlIGNvbnN0JiBjKSBjb25zdDsKCiAgICB2b2lkIHNldFBhcnNlclN0cmVhbShzdGQ6OmlzdHJlYW0mIGluKTsKCiAgICBib29sIGlnbm9yZUNvbW1hbmRzKCkgY29uc3QgeyByZXR1cm4gbUlnbm9yZUNvbW1hbmRzOyB9OwogICAgYm9vbCByZWFkeVRvUXVpdCgpIGNvbnN0IHsgcmV0dXJuIG1RdWl0OyB9OwogICAgYm9vbCBmYWlsZWQoKSBjb25zdDsKCiAgcHJvdGVjdGVkOgogICAgc3RkOjp1bmlxdWVfcHRyPFNlc3Npb24+IG1wU2Vzc2lvbjsKCiAgcHJpdmF0ZToKICAgIHN0ZDo6aXN0cmVhbSogICBtcFBhcnNlclN0cmVhbTsgLy8gdXNlZCBmb3IgaW5saW5lIGJnZW8gcmVhZGluZwogICAgYm9vbCBtSWdub3JlQ29tbWFuZHM7CiAgICBib29sIG1RdWl0Owp9OwoKCnN0cnVjdCBFY2hvVmlzaXRvcjogcHVibGljIFZpc2l0b3IgewogIHB1YmxpYzoKICAgIEVjaG9WaXNpdG9yKHN0ZDo6dW5pcXVlX3B0cjxTZXNzaW9uPiYgcFNlc3Npb24pOwogICAgRWNob1Zpc2l0b3Ioc3RkOjp1bmlxdWVfcHRyPFNlc3Npb24+JiBwU2Vzc2lvbiwgc3RkOjpvc3RyZWFtJiBvcyk7CgogICAgdm9pZCBvcGVyYXRvcigpKGFzdDo6Tm9WYWx1ZSBjb25zdCYgYykgY29uc3Qgb3ZlcnJpZGUge307CiAgICB2b2lkIG9wZXJhdG9yKCkoYXN0OjppZnRoZW4gY29uc3QmIGMpIG92ZXJyaWRlOwogICAgdm9pZCBvcGVyYXRvcigpKGFzdDo6ZW5kaWYgY29uc3QmIGMpIG92ZXJyaWRlOwogICAgdm9pZCBvcGVyYXRvcigpKGFzdDo6c2V0ZW52IGNvbnN0JiBjKSBjb25zdCBvdmVycmlkZTsKICAgIHZvaWQgb3BlcmF0b3IoKShhc3Q6OmNtZF9pbWFnZSBjb25zdCYgYykgY29uc3Qgb3ZlcnJpZGU7CiAgICB2b2lkIG9wZXJhdG9yKCkoYXN0OjpjbWRfaXBybW9kZSBjb25zdCYgYykgY29uc3Qgb3ZlcnJpZGU7CiAgICB2b2lkIG9wZXJhdG9yKCkoYXN0OjpjbWRfZW5kIGNvbnN0JiBjKSBjb25zdCBvdmVycmlkZTsKICAgIHZvaWQgb3BlcmF0b3IoKShhc3Q6OmNtZF9lZGdlIGNvbnN0JiBjKSBjb25zdCBvdmVycmlkZTsKICAgIHZvaWQgb3BlcmF0b3IoKShhc3Q6OmNtZF9xdWl0IGNvbnN0JiBjKSBjb25zdCBvdmVycmlkZTsKICAgIHZvaWQgb3BlcmF0b3IoKShhc3Q6OmNtZF9zdGFydCBjb25zdCYgYykgY29uc3Qgb3ZlcnJpZGU7CiAgICB2b2lkIG9wZXJhdG9yKCkoYXN0OjpjbWRfdGltZSBjb25zdCYgYykgY29uc3Qgb3ZlcnJpZGU7CiAgICB2b2lkIG9wZXJhdG9yKCkoYXN0OjpjbWRfZGV0YWlsIGNvbnN0JiBjKSBvdmVycmlkZTsKICAgIHZvaWQgb3BlcmF0b3IoKShhc3Q6OmNtZF92ZXJzaW9uIGNvbnN0JiBjKSBjb25zdCBvdmVycmlkZTsKICAgIHZvaWQgb3BlcmF0b3IoKShhc3Q6OmNtZF9jb25maWcgY29uc3QmIGMpIGNvbnN0IG92ZXJyaWRlOwogICAgdm9pZCBvcGVyYXRvcigpKGFzdDo6Y21kX2RlZmF1bHRzIGNvbnN0JiBjKSBjb25zdCBvdmVycmlkZTsKICAgIHZvaWQgb3BlcmF0b3IoKShhc3Q6OmNtZF90cmFuc2Zvcm0gY29uc3QmIGMpIGNvbnN0IG92ZXJyaWRlOwogICAgdm9pZCBvcGVyYXRvcigpKGFzdDo6Y21kX210cmFuc2Zvcm0gY29uc3QmIGMpIGNvbnN0IG92ZXJyaWRlOwogICAgdm9pZCBvcGVyYXRvcigpKGFzdDo6Y21kX2dlb21ldHJ5IGNvbnN0JiBjKSBjb25zdCBvdmVycmlkZTsKICAgIHZvaWQgb3BlcmF0b3IoKShhc3Q6OmNtZF9wcm9wZXJ0eSBjb25zdCYgYykgY29uc3Qgb3ZlcnJpZGU7CiAgICB2b2lkIG9wZXJhdG9yKCkoYXN0OjpjbWRfZGV2aWNlb3B0aW9uIGNvbnN0JiBjKSBjb25zdCBvdmVycmlkZTsKICAgIHZvaWQgb3BlcmF0b3IoKShhc3Q6OmNtZF9kZWNsYXJlIGNvbnN0JiBjKSBjb25zdCBvdmVycmlkZTsKICAgIHZvaWQgb3BlcmF0b3IoKShhc3Q6OmNtZF9yYXl0cmFjZSBjb25zdCYgYykgY29uc3Qgb3ZlcnJpZGU7CiAgICB2b2lkIG9wZXJhdG9yKCkoYXN0OjpjbWRfcmVzZXQgY29uc3QmIGMpIGNvbnN0IG92ZXJyaWRlOwogICAgdm9pZCBvcGVyYXRvcigpKGFzdDo6Y21kX3NvY2tldCBjb25zdCYgYykgY29uc3Qgb3ZlcnJpZGU7CiAgICB2b2lkIG9wZXJhdG9yKCkoYXN0OjpyYXlfZW1iZWRkZWRmaWxlIGNvbnN0JiBjKSBjb25zdCBvdmVycmlkZTsKCiAgLy9wcml2YXRlOgogICAgdm9pZCBvcGVyYXRvcigpKHN0ZDo6dmVjdG9yPFByb3BWYWx1ZT4gY29uc3QmIHYpIGNvbnN0OwogICAgdm9pZCBvcGVyYXRvcigpKGludCB2KSBjb25zdDsKICAgIHZvaWQgb3BlcmF0b3IoKShkb3VibGUgdikgY29uc3Q7CiAgICB2b2lkIG9wZXJhdG9yKCkoc3RkOjpzdHJpbmcgY29uc3QmIHYpIGNvbnN0OwogICAgdm9pZCBvcGVyYXRvcigpKEludDIgY29uc3QmIHYpIGNvbnN0OwogICAgdm9pZCBvcGVyYXRvcigpKEludDMgY29uc3QmIHYpIGNvbnN0OwogICAgdm9pZCBvcGVyYXRvcigpKEludDQgY29uc3QmIHYpIGNvbnN0OwogICAgdm9pZCBvcGVyYXRvcigpKFZlY3RvcjIgY29uc3QmIHYpIGNvbnN0OwogICAgdm9pZCBvcGVyYXRvcigpKFZlY3RvcjMgY29uc3QmIHYpIGNvbnN0OwogICAgdm9pZCBvcGVyYXRvcigpKFZlY3RvcjQgY29uc3QmIHYpIGNvbnN0OwogICAgdm9pZCBvcGVyYXRvcigpKFByb3BWYWx1ZSBjb25zdCYgdikgY29uc3Q7CgogcHJpdmF0ZToKICAgIHN0ZDo6b3N0cmVhbSYgX29zOwp9OwoKfSAgLy8gbmFtZXNwYWNlIGxzZAoKfSAgLy8gbmFtZXNwYWNlIGxhdmEKCiNlbmRpZiAgLy8gU1JDX0xBVkFfTElCX1JFQURFUl9MU0RfTFNEX1ZJU0lUT1JfSF8AAAAAAAAAANMQAAAAAAAAAAAAAAAAAAAAAAAA0xAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNBwAAAAAAAM0HAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "#ifndef SRC_LAVA_LIB_READER_LSD_SESSION_H_\n#define SRC_LAVA_LIB_READER_LSD_SESSION_H_\n\n#include <memory>\n#include <variant>\n#include <future>\n#include <unordered_map>\n\n#include \"grammar_lsd.h\"\n#include \"../reader_bgeo/bgeo/Bgeo.h\"\n#include \"../renderer_iface.h\"\n#include \"scope.h\"\n\n//#include \"../scene_builder.h\" \n\nnamespace lava {\n\nnamespace lsd {\n\nclass Session {\n public:\n \tusing UniquePtr = std::unique_ptr<Session>;\n    static UniquePtr create(std::unique_ptr<RendererIface> pRendererIface);\n\n    \n    ~Session();\n\n public:\n \tscope::Geo::SharedPtr getCurrentGeo();\n    scope::ScopeBase::SharedPtr getCurrentScope();\n\n \tbool cmdStart(lsd::ast::Style object_type);\n \tbool cmdEnd();\n \tvoid cmdSetEnv(const std::string& key, const std::string& value);\n \tbool cmdRaytrace();\n    void cmdIPRmode(const std::string& mode);\n    void cmdConfig(const std::string& file_name);\n    void cmdProperty(lsd::ast::Style style, const std::string& token, const Property::Value& value);\n    void cmdPropertyV(lsd::ast::Style style, const std::vector<std::pair<std::string, Property::Value>>& values);\n    void cmdDeclare(lsd::ast::Style style, lsd::ast::Type type, const std::string& token, const lsd::PropValue& value);\n    void cmdImage(lsd::ast::DisplayType display_type, const std::string& filename);\n    void cmdTransform(const Matrix4& transform);\n    void cmdMTransform(const Matrix4& transform);\n    bool cmdGeometry(const std::string& name);\n    void cmdTime(double time);\n\n    void pushLight(const scope::Light::SharedPtr pLight);\n    void pushBgeo(const std::string& name, ika::bgeo::Bgeo::SharedConstPtr pBgeo, bool async = false);\n    std::string getExpandedString(const std::string& str);\n\n private:\n \tSession(std::unique_ptr<RendererIface> pRendererIface);\n \t\n \tbool prepareDisplayData();\n \tbool prepareFrameData();\n\n \tbool pushGeometryInstance(const scope::Object::SharedPtr pObj);\n\n private:\n    bool                            mIPRmode = false;\n \tbool \t\t\t\t\t\t\tmFirstRun = true; // This variable used to detect subsequent cmd_raytrace calls for multy-frame and IPR modes \n \tstd::unique_ptr<RendererIface> \tmpRendererIface;\n \t\n \tRendererIface::DisplayData\t\tmDisplayData;\n \tRendererIface::FrameData\t\tmFrameData;\n\n \tscope::ScopeBase::SharedPtr\t\tmpCurrentScope;\n \tscope::Global::SharedPtr\t\tmpGlobal;\n\n \tstd::map<std::string, std::variant<uint32_t, std::shared_future<uint32_t>>>\tmMeshMap;     // maps detail(mesh) name to SceneBuilder mesh id\tor it's async future\n    std::map<std::string, uint32_t> mLightsMap;     // maps detail(mesh) name to SceneBuilder mesh id \n};\n\n}  // namespace lsd\n\n}  // namespace lava\n\n#endif  // SRC_LAVA_LIB_READER_LSD_SESSION_H_",
			"file": "src/lava_lib/reader_lsd/session.h",
			"file_size": 2657,
			"file_write_time": 133352798597267383,
			"settings":
			{
				"buffer_size": 2657,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\nbool"
					},
					"BwAAAOUPAAAAAAAA5g8AAAAAAAAAAAAA5g8AAAAAAADoDwAAAAAAAAAAAADoDwAAAAAAAOoPAAAAAAAAAAAAAOoPAAAAAAAA6w8AAAAAAAAAAAAA6w8AAAAAAADsDwAAAAAAAAAAAADsDwAAAAAAAO0PAAAAAAAAAAAAAO0PAAAAAAAA7g8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADlDwAAAAAAAOUPAAAAAAAAAAAAAAAA8L8"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": " fail"
					},
					"BQAAAO4PAAAAAAAA7w8AAAAAAAAAAAAA7w8AAAAAAADwDwAAAAAAAAAAAADwDwAAAAAAAPEPAAAAAAAAAAAAAPEPAAAAAAAA8g8AAAAAAAAAAAAA8g8AAAAAAADzDwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuDwAAAAAAAO4PAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"insert_completion",
					{
						"completion": "failed",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "failed"
					},
					"AgAAAO8PAAAAAAAA7w8AAAAAAAAEAAAAZmFpbO8PAAAAAAAA9Q8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADzDwAAAAAAAPMPAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAPUPAAAAAAAA9g8AAAAAAAAAAAAA9g8AAAAAAAD3DwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD1DwAAAAAAAPUPAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPcPAAAAAAAA+A8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3DwAAAAAAAPcPAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					9,
					"left_delete",
					null,
					"CQAAAPcPAAAAAAAA9w8AAAAAAAABAAAAIPYPAAAAAAAA9g8AAAAAAAABAAAAPfUPAAAAAAAA9Q8AAAAAAAABAAAAIPQPAAAAAAAA9A8AAAAAAAABAAAAZPMPAAAAAAAA8w8AAAAAAAABAAAAZfIPAAAAAAAA8g8AAAAAAAABAAAAbPEPAAAAAAAA8Q8AAAAAAAABAAAAafAPAAAAAAAA8A8AAAAAAAABAAAAYe8PAAAAAAAA7w8AAAAAAAABAAAAZg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD4DwAAAAAAAPgPAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "mFail"
					},
					"BQAAAO8PAAAAAAAA8A8AAAAAAAAAAAAA8A8AAAAAAADxDwAAAAAAAAAAAADxDwAAAAAAAPIPAAAAAAAAAAAAAPIPAAAAAAAA8w8AAAAAAAAAAAAA8w8AAAAAAAD0DwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvDwAAAAAAAO8PAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "ed"
					},
					"AgAAAPQPAAAAAAAA9Q8AAAAAAAAAAAAA9Q8AAAAAAAD2DwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD0DwAAAAAAAPQPAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAPYPAAAAAAAA9w8AAAAAAAAAAAAA9w8AAAAAAAD4DwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2DwAAAAAAAPYPAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPgPAAAAAAAA+Q8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD4DwAAAAAAAPgPAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "false"
					},
					"AQAAAPkPAAAAAAAA/g8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5DwAAAAAAAPkPAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAP4PAAAAAAAA/w8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD+DwAAAAAAAP4PAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAANoPAAAAAAAA2w8AAAAAAAAAAAAA2w8AAAAAAADcDwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADaDwAAAAAAANoPAAAAAAAAAAAAAAAgbEA"
				],
				[
					18,
					1,
					"reindent",
					null,
					"AQAAANsPAAAAAAAA3w8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADbDwAAAAAAANsPAAAAAAAAAAAAAAAAAAA"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "bool"
					},
					"BAAAAN8PAAAAAAAA4A8AAAAAAAAAAAAA4A8AAAAAAADhDwAAAAAAAAAAAADhDwAAAAAAAOIPAAAAAAAAAAAAAOIPAAAAAAAA4w8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfDwAAAAAAAN8PAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " fail"
					},
					"BQAAAOMPAAAAAAAA5A8AAAAAAAAAAAAA5A8AAAAAAADlDwAAAAAAAAAAAADlDwAAAAAAAOYPAAAAAAAAAAAAAOYPAAAAAAAA5w8AAAAAAAAAAAAA5w8AAAAAAADoDwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADjDwAAAAAAAOMPAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert_completion",
					{
						"completion": "failed",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "failed"
					},
					"AgAAAOQPAAAAAAAA5A8AAAAAAAAEAAAAZmFpbOQPAAAAAAAA6g8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADoDwAAAAAAAOgPAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOoPAAAAAAAA7A8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADqDwAAAAAAAOoPAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": " c"
					},
					"AgAAAOwPAAAAAAAA7Q8AAAAAAAAAAAAA7Q8AAAAAAADuDwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsDwAAAAAAAOwPAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert_completion",
					{
						"completion": "const",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "const"
					},
					"AgAAAO0PAAAAAAAA7Q8AAAAAAAABAAAAY+0PAAAAAAAA8g8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuDwAAAAAAAO4PAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " P"
					},
					"AgAAAPIPAAAAAAAA8w8AAAAAAAAAAAAA8w8AAAAAAAD0DwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADyDwAAAAAAAPIPAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"left_delete",
					null,
					"AQAAAPMPAAAAAAAA8w8AAAAAAAABAAAAUA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD0DwAAAAAAAPQPAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAPMPAAAAAAAA9Q8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADzDwAAAAAAAPMPAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " re"
					},
					"AwAAAPQPAAAAAAAA9Q8AAAAAAAAAAAAA9Q8AAAAAAAD2DwAAAAAAAAAAAAD2DwAAAAAAAPcPAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD0DwAAAAAAAPQPAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAAPUPAAAAAAAA9Q8AAAAAAAACAAAAcmX1DwAAAAAAAPsPAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3DwAAAAAAAPcPAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " mF"
					},
					"AwAAAPsPAAAAAAAA/A8AAAAAAAAAAAAA/A8AAAAAAAD9DwAAAAAAAAAAAAD9DwAAAAAAAP4PAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD7DwAAAAAAAPsPAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert_completion",
					{
						"completion": "mFailed",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mFailed"
					},
					"AgAAAPwPAAAAAAAA/A8AAAAAAAACAAAAbUb8DwAAAAAAAAMQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD+DwAAAAAAAP4PAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAAMQAAAAAAAABBAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAADEAAAAAAAAAMQAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAQQAAAAAAAABRAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAEEAAAAAAAAAQQAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					3,
					"left_delete",
					null,
					"AwAAANsPAAAAAAAA2w8AAAAAAAArAAAAICAgIGJvb2wgZmFpbGVkKCkgY29uc3QgeyByZXR1cm4gbUZhaWxlZDsgfdoPAAAAAAAA2g8AAAAAAAABAAAACtkPAAAAAAAA2Q8AAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAGEAAAAAAAANsPAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAG0NAAAAAAAAbg0AAAAAAAAAAAAAbg0AAAAAAABvDQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABtDQAAAAAAAG0NAAAAAAAAAAAAAADgiUA"
				],
				[
					43,
					1,
					"reindent",
					null,
					"AQAAAG4NAAAAAAAAcg0AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABuDQAAAAAAAG4NAAAAAAAAAAAAAAAAAAA"
				],
				[
					44,
					1,
					"paste",
					null,
					"AQAAAHINAAAAAAAAnQ0AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAByDQAAAAAAAHINAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					2,
					"left_delete",
					null,
					"AgAAAHQNAAAAAAAAdA0AAAAAAAACAAAAICByDQAAAAAAAHINAAAAAAAAAgAAACAg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB2DQAAAAAAAHYNAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAByDQAAAAAAAHINAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/GFX/GFXTexture.cpp",
			"settings":
			{
				"buffer_size": 7847,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAZh4AAAAAAABxHgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/GFX/GFXDevice.cpp",
			"settings":
			{
				"buffer_size": 20734,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAMCIAAAAAAAAwIgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/RenderPasses/DeferredLightingPass/DeferredLightingPass.cs.slang",
			"settings":
			{
				"buffer_size": 25072,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					2,
					"right_delete",
					null,
					"AgAAAINPAAAAAAAAg08AAAAAAAABAAAAL4NPAAAAAAAAg08AAAAAAAABAAAALw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAINPAAAAAAAAg08AAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAMBPAAAAAAAAwU8AAAAAAAAAAAAAwU8AAAAAAADCTwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMBPAAAAAAAAwE8AAAAAAAAAAAAAAABCQA"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAwk8AAAAAAADCTwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "/***************************************************************************\n # Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.\n #\n # Redistribution and use in source and binary forms, with or without\n # modification, are permitted provided that the following conditions\n # are met:\n #  * Redistributions of source code must retain the above copyright\n #    notice, this list of conditions and the following disclaimer.\n #  * Redistributions in binary form must reproduce the above copyright\n #    notice, this list of conditions and the following disclaimer in the\n #    documentation and/or other materials provided with the distribution.\n #  * Neither the name of NVIDIA CORPORATION nor the names of its\n #    contributors may be used to endorse or promote products derived\n #    from this software without specific prior written permission.\n #\n # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\n # EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n # PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n # CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n # EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n # PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n # PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n # OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n **************************************************************************/\n#include <stdlib.h>\n#include <algorithm>\n\n#include <OpenImageIO/imageio.h>\n#include <OpenImageIO/imagebuf.h>\n#include <OpenImageIO/imagebufalgo.h>\n\n#include <boost/filesystem.hpp>\nnamespace fs = boost::filesystem;\n\n#include \"stdafx.h\"\n#include \"Bitmap.h\"\n#include \"LTX_Bitmap.h\"\n#include \"BitmapUtils.h\"\n#include \"LTX_BitmapAlgo.h\"\n#include \"LTX_BitmapUtils.h\"\n\n#include \"Falcor/Core/API/Texture.h\"\n#include \"Falcor/Core/API/ResourceManager.h\"\n#include \"Falcor/Utils/Debug/debug.h\"\n\nnamespace Falcor {\n\nnamespace oiio = OpenImageIO_v2_3;\n\nstatic const size_t kLtxHeaderOffset = sizeof(LTX_Header);\n\nstatic struct {\n    bool operator()(size_t a, size_t b) const {   \n        return a < b;\n    }   \n} pageSort;\n\nbool LTX_Bitmap::checkMagic(const unsigned char* magic) {\n    int match = 0;\n    match += memcmp(&gLtxFileMagic[0], &magic[0], 4);\n    match += memcmp(&gLtxFileMagic[7], &magic[7], 5);\n    if(match == 0 && 48 <= magic[5] && magic[5] <= 57 && 48 <= magic[6] && magic[6] <= 57)\n        return true;\n\n    return false;\n}\n\nvoid LTX_Bitmap::makeMagic(uint8_t minor, uint8_t major, unsigned char *magic) {\n    if (minor > 9 || major > 9) {\n        LOG_ERR(\"Major and minor versions should be less than 10 !!!\");\n        return;\n    }\n\n    memcpy(magic, gLtxFileMagic, 12);\n    magic[5] = 48 + static_cast<unsigned char>(major);\n    magic[6] = 48 + static_cast<unsigned char>(minor);\n}\n\nLTX_Bitmap::SharedConstPtr LTX_Bitmap::createFromFile(std::shared_ptr<Device> pDevice, const std::string& filename, bool isTopDown) {\n    std::ifstream file (filename, std::ios::in | std::ios::binary);\n    if (file.is_open()) {\n        unsigned char magic[12];\n        file.read((char *)&magic, 12);\n        \n        if (!checkMagic(magic)) {\n            LOG_ERR(\"Non LTX file provided (magic test failed) !!!\");\n            return nullptr;\n        }\n\n        file.seekg(0, file.beg);\n    } else {\n        LOG_ERR(\"Error opening file: %s !!!\", filename.c_str());\n        return nullptr;\n    }\n\n    auto pLtxBitmap = new LTX_Bitmap();\n    pLtxBitmap->mFilename = filename;\n    \n    auto pFile = fopen(filename.c_str(), \"rb\");\n    fread(&pLtxBitmap->mHeader, sizeof(LTX_Header), 1, pFile );\n\n    fseek(pFile, 0L, SEEK_END);\n    size_t mDataSize = ftell(pFile) - sizeof(LTX_Header);\n    fclose(pFile);\n\n    return SharedConstPtr(pLtxBitmap);\n}\n\nLTX_Bitmap::LTX_Bitmap() {\n\n}\n\nLTX_Bitmap::~LTX_Bitmap() {\n\n}\n\nstatic ResourceFormat getFormatOIIO(unsigned char baseType, int nchannels) {\n    using BASETYPE = oiio::TypeDesc::BASETYPE;\n    switch (nchannels) {\n        case 1:\n            switch (BASETYPE(baseType)) {\n                case BASETYPE::UINT8:\n                    return ResourceFormat::R8Unorm;\n                case BASETYPE::UINT32:\n                    return ResourceFormat::R32Uint;\n                case BASETYPE::FLOAT:\n                    return ResourceFormat::R32Float;\n                default:\n                    should_not_get_here();\n                    break;\n            }\n            break;\n        case 2:\n            switch (BASETYPE(baseType)) {\n                case BASETYPE::UINT8:\n                    return ResourceFormat::RG8Unorm;\n                case BASETYPE::UINT32:\n                    return ResourceFormat::RG32Uint;\n                case BASETYPE::FLOAT:\n                    return ResourceFormat::RG32Float;\n                default:\n                    should_not_get_here();\n                    break;\n            }\n            break;\n        case 3:\n            switch (BASETYPE(baseType)) {\n                case BASETYPE::UINT8:\n                    return ResourceFormat::RGB8Unorm;\n                case BASETYPE::UINT32:\n                    return ResourceFormat::RGB32Uint;\n                case BASETYPE::FLOAT:\n                    return ResourceFormat::RGB32Float;\n                default:\n                    should_not_get_here();\n                    break;\n            }\n            break;\n\n        case 4:\n            switch (BASETYPE(baseType)) {\n                case BASETYPE::UINT8:\n                    return ResourceFormat::RGBA8Unorm;\n                case BASETYPE::UINT32:\n                    return ResourceFormat::RGBA32Uint;\n                case BASETYPE::FLOAT:\n                    return ResourceFormat::RGBA32Float;\n                default:\n                    should_not_get_here();\n                    break;\n            }\n            break;\n        default:\n            should_not_get_here();\n            break;\n    }\n    return ResourceFormat::RGBA8Unorm;\n}\n\nstatic ResourceFormat getDestFormat(const ResourceFormat &format) {\n    switch (format) {\n        case ResourceFormat::RGB8Unorm:\n            return ResourceFormat::RGBA8Unorm;  // this should force 24bit to 32bit conversion\n        case ResourceFormat::RGB32Uint:\n            return ResourceFormat::RGBA32Uint;  // this should force 96bit to 128bit conversion\n        case ResourceFormat::RGB32Float:\n            return ResourceFormat::RGBA32Float; // this should force 96bit to 128bit conversion\n        default:\n            break;\n    }\n\n    return format;\n}\n\nstatic uint3 getPageDims(const ResourceFormat &format) {\n    uint32_t channelCount = getFormatChannelCount(format);\n    uint32_t totalBits = 0;\n\n    for(uint i = 0; i < channelCount; i++) totalBits += getNumChannelBits(format, i);\n\n    switch(totalBits) {\n        case 8:\n            return {256, 256, 1};\n        case 16:\n            return {256, 128, 1};\n        case 32:\n            return {128, 128, 1};\n        case 64:\n            return {128, 64, 1};\n        case 128:\n            return {64, 64, 1};\n        default:\n            should_not_get_here();\n            break;\n    } \n\n    return {0, 0, 0};\n}\n\nstatic LTX_MipInfo calcMipInfo(const uint3& imgDims, const ResourceFormat &format) {\n    LTX_MipInfo info;\n\n    info.mipLevelsCount = Texture::getMaxMipCount(imgDims);\n    info.mipTailStart = info.mipLevelsCount;\n    info.pageDims = getPageDims(format);\n    info.mipLevelsDims = std::vector<uint3>(info.mipLevelsCount);\n\n    // pre calculate image dimensions for each mip level (mipLevelDims)\n    for( uint mipLevel = 0; mipLevel < info.mipLevelsCount; mipLevel++) {\n        info.mipLevelsDims[mipLevel].x = imgDims.x / pow(2, mipLevel);\n        info.mipLevelsDims[mipLevel].y = imgDims.y / pow(2, mipLevel);\n        info.mipLevelsDims[mipLevel].z = 1;//imgDims.z / pow(2, mipLevel);\n    }\n\n    // find mip tail starting mip level\n    uint8_t cMipLevel = 0;\n    for( auto const& mipDims: info.mipLevelsDims) {\n        if( (info.pageDims.x > mipDims.x) && (info.pageDims.y > mipDims.y)) {\n            info.mipTailStart = cMipLevel;\n            break;\n        }\n        cMipLevel += 1;\n    }\n\n    return info;\n}\n\nvoid LTX_Bitmap::convertToKtxFile(std::shared_ptr<Device> pDevice, const std::string& srcFilename, const std::string& dstFilename, bool isTopDown) {\n    auto in = oiio::ImageInput::open(srcFilename);\n    if (!in) {\n        LOG_ERR(\"Error reading image file %s\", srcFilename.c_str());\n    }\n    const oiio::ImageSpec &spec = in->spec();\n\n    LOG_DBG(\"OIIO channel formats size: %zu\", spec.channelformats.size());\n    LOG_DBG(\"OIIO is signed: %s\", spec.format.is_signed() ? \"YES\" : \"NO\");\n    LOG_DBG(\"OIIO is float: %s\", spec.format.is_floating_point() ? \"YES\" : \"NO\");\n    LOG_DBG(\"OIIO basetype %u\", oiio::TypeDesc::BASETYPE(spec.format.basetype));\n    LOG_DBG(\"OIIO bytes per pixel %zu\", spec.pixel_bytes());\n    LOG_DBG(\"OIIO nchannels %i\", spec.nchannels);\n    \n    auto srcFormat = getFormatOIIO(spec.format.basetype, spec.nchannels);\n    LOG_WARN(\"Source ResourceFormat from OIIO: %s\", to_string(srcFormat).c_str());\n    auto dstFormat = getDestFormat(srcFormat);\n\n    oiio::ImageBuf srcBuff;\n\n    if(spec.nchannels == 3 ) {\n        // This is an RGB image. Convert it to RGBA image with full-on alpha channel \n        \n        int channelorder[] = { 0, 1, 2, -1 /*use a float value*/ };\n        float channelvalues[] = { 0 /*ignore*/, 0 /*ignore*/, 0 /*ignore*/, 1.0 };\n        std::string channelnames[] = { \"\", \"\", \"\", \"A\" };\n        oiio::ImageBuf tmpBuffRGB(srcFilename);\n        srcBuff = oiio::ImageBufAlgo::channels(tmpBuffRGB, 4, channelorder, channelvalues, channelnames);\n    } else {\n        srcBuff = oiio::ImageBuf(srcFilename);\n    }\n\n    // TODO: make image analysis (pre scale down source with blurry data) and reflect that in dstDims\n    uint3 srcDims = {spec.width, spec.height, spec.depth};\n    uint3 dstDims = srcDims;\n\n    // calc mip related info\n    auto mipInfo = calcMipInfo(dstDims, dstFormat);\n    \n    // make header\n    LTX_Header header;\n    unsigned char magic[12];\n    makeMagic(9, 8, &header.magic[0]);\n\n    header.srcLastWriteTime = fs::last_write_time(srcFilename);\n    header.width = dstDims.x;\n    header.height = dstDims.y;\n    header.depth = dstDims.z;\n    header.pageDims = {mipInfo.pageDims.x, mipInfo.pageDims.y, mipInfo.pageDims.z};\n    header.pageDataSize = 65536;\n    header.pagesCount = 0;\n    header.arrayLayersCount = 1;\n    header.mipLevelsCount = mipInfo.mipLevelsCount;\n    header.mipTailStart   = mipInfo.mipTailStart;\n    header.format = dstFormat;//pBitmap->getFormat();\n\n    // open file and write header\n    FILE *pFile = fopen(dstFilename.c_str(), \"wb\");\n    fwrite(&header, sizeof(unsigned char), sizeof(LTX_Header), pFile);\n\n    LOG_WARN(\"LTX Mip page dims %u %u %u ...\", mipInfo.pageDims.x, mipInfo.pageDims.y, mipInfo.pageDims.z);\n\n    if(ltxCpuGenerateAndWriteMIPTilesHQSlow(header, mipInfo, srcBuff, pFile)) {\n    //if(ltxCpuGenerateDebugMIPTiles(header, mipInfo, srcBuff, pFile)) {\n        // re-write header as it might get modified ... \n        // TODO: increment pagesCount ONLY upon successfull fwrite !\n        fseek(pFile, 0, SEEK_SET);\n        fwrite(&header, sizeof(unsigned char), sizeof(LTX_Header), pFile);\n    }\n    fclose(pFile);\n}\n\nvoid LTX_Bitmap::readPageData(size_t pageNum, void *pData) const {\n    if (pageNum >= mHeader.pagesCount ) {\n        logError(\"LTX_Bitmap::readPageData pageNum exceeds pages count !!!\");\n        return;\n    }\n\n    auto pFile = fopen(mFilename.c_str(), \"rb\");\n    fseek(pFile, kLtxHeaderOffset + pageNum * mHeader.pageDataSize, SEEK_SET);\n    fread(pData, 1, mHeader.pageDataSize, pFile);\n    fclose(pFile);\n}\n\n// This version uses previously opened file. On large scenes this saves us at least 50% time\nvoid LTX_Bitmap::readPageData(size_t pageNum, void *pData, FILE *pFile) const {\n    assert(pFile);\n\n    if (pageNum >= mHeader.pagesCount ) {\n        logError(\"LTX_Bitmap::readPageData pageNum exceeds pages count !!!\");\n        return;\n    }\n\n    fseek(pFile, kLtxHeaderOffset + pageNum * mHeader.pageDataSize, SEEK_SET);\n    fread(pData, 1, mHeader.pageDataSize, pFile);\n}\n\nvoid LTX_Bitmap::readPagesData(std::vector<std::pair<size_t, void*>>& pages, bool unsorted) const {\n    auto pFile = fopen(mFilename.c_str(), \"rb\");\n\n    if (unsorted) {\n        std::sort (pages.begin(), pages.end(), [](std::pair<size_t, void*> a, std::pair<size_t, void*> b) {\n            return a.first < b.first;   \n        });\n    }\n\n    for(auto& page: pages) {\n        fseek(pFile, kLtxHeaderOffset + page.first * mHeader.pageDataSize, SEEK_SET);\n    }\n    \n    fclose(pFile);\n}\n\n}  // namespace Falcor\n",
			"file": "src/Falcor/Utils/Image/LTX_Bitmap.cpp",
			"file_size": 12916,
			"file_write_time": 133352798597067383,
			"settings":
			{
				"buffer_size": 12916,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					6,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BAAAAItIAAAAAAAAjEgAAAAAAAAAAAAAjEgAAAAAAACNSAAAAAAAAAAAAACNSAAAAAAAAI5IAAAAAAAAAAAAAI5IAAAAAAAAj0gAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAItIAAAAAAAAi0gAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAI9IAAAAAAAAkUgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI9IAAAAAAAAj0gAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "!p"
					},
					"AgAAAJBIAAAAAAAAkUgAAAAAAAAAAAAAkUgAAAAAAACSSAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJBIAAAAAAAAkEgAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "F"
					},
					"AQAAAJJIAAAAAAAAk0gAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJJIAAAAAAAAkkgAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"insert_completion",
					{
						"completion": "pFile",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "pFile"
					},
					"AgAAAJFIAAAAAAAAkUgAAAAAAAACAAAAcEaRSAAAAAAAAJZIAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJNIAAAAAAAAk0gAAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJdIAAAAAAAAmEgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJdIAAAAAAAAl0gAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJhIAAAAAAAAmkgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJhIAAAAAAAAmEgAAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAJlIAAAAAAAAmkgAAAAAAAAAAAAAmkgAAAAAAACbSAAAAAAAAAAAAACbSAAAAAAAAJxIAAAAAAAAAAAAAJxIAAAAAAAAnUgAAAAAAAAAAAAAmkgAAAAAAACaSAAAAAAAAAEAAAAJmkgAAAAAAACcSAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJlIAAAAAAAAmUgAAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAJ9IAAAAAAAAoEgAAAAAAAAAAAAAoEgAAAAAAAChSAAAAAAAAAAAAACaSAAAAAAAAJpIAAAAAAAAAgAAAAkJ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ9IAAAAAAAAn0gAAAAAAAAAAAAAAABSQA"
				],
				[
					18,
					1,
					"reindent",
					null,
					"AQAAAJpIAAAAAAAAnEgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJpIAAAAAAAAmkgAAAAAAAAAAAAAAABCQA"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "LLO"
					},
					"BAAAAJxIAAAAAAAAnUgAAAAAAAAAAAAAoUgAAAAAAAChSAAAAAAAAAEAAAAJnUgAAAAAAACeSAAAAAAAAAAAAACeSAAAAAAAAJ9IAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJxIAAAAAAAAnEgAAAAAAAAAAAAAAADwvw"
				],
				[
					20,
					1,
					"insert_completion",
					{
						"completion": "LLOG_ERR",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "LLOG_ERR"
					},
					"AgAAAJxIAAAAAAAAnEgAAAAAAAADAAAATExPnEgAAAAAAACkSAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ9IAAAAAAAAn0gAAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKRIAAAAAAAApUgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKRIAAAAAAAApEgAAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					4,
					"left_delete",
					null,
					"BAAAAKRIAAAAAAAApEgAAAAAAAABAAAAIKNIAAAAAAAAo0gAAAAAAAABAAAAUqJIAAAAAAAAokgAAAAAAAABAAAAUqFIAAAAAAAAoUgAAAAAAAABAAAARQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKVIAAAAAAAApUgAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "ERR"
					},
					"AwAAAKFIAAAAAAAAokgAAAAAAAAAAAAAokgAAAAAAACjSAAAAAAAAAAAAACjSAAAAAAAAKRIAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKFIAAAAAAAAoUgAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": " <<"
					},
					"AwAAAKRIAAAAAAAApUgAAAAAAAAAAAAApUgAAAAAAACmSAAAAAAAAAAAAACmSAAAAAAAAKdIAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKRIAAAAAAAApEgAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKdIAAAAAAAAqEgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKdIAAAAAAAAp0gAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAKhIAAAAAAAAqkgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKhIAAAAAAAAqEgAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "Er"
					},
					"AgAAAKlIAAAAAAAAqkgAAAAAAAAAAAAAqkgAAAAAAACrSAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKlIAAAAAAAAqUgAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"insert_completion",
					{
						"completion": "Error",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Error"
					},
					"AgAAAKlIAAAAAAAAqUgAAAAAAAACAAAARXKpSAAAAAAAAK5IAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKtIAAAAAAAAq0gAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " ope"
					},
					"BAAAAK5IAAAAAAAAr0gAAAAAAAAAAAAAr0gAAAAAAACwSAAAAAAAAAAAAACwSAAAAAAAALFIAAAAAAAAAAAAALFIAAAAAAAAskgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK5IAAAAAAAArkgAAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					1,
					"insert_completion",
					{
						"completion": "opening",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "opening"
					},
					"AgAAAK9IAAAAAAAAr0gAAAAAAAADAAAAb3Blr0gAAAAAAAC2SAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALJIAAAAAAAAskgAAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " file"
					},
					"BQAAALZIAAAAAAAAt0gAAAAAAAAAAAAAt0gAAAAAAAC4SAAAAAAAAAAAAAC4SAAAAAAAALlIAAAAAAAAAAAAALlIAAAAAAAAukgAAAAAAAAAAAAAukgAAAAAAAC7SAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALZIAAAAAAAAtkgAAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALtIAAAAAAAAvEgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALtIAAAAAAAAu0gAAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAALdIAAAAAAAAuEgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALdIAAAAAAAAt0gAAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					1,
					"left_delete",
					null,
					"AQAAALdIAAAAAAAAt0gAAAAAAAABAAAAbA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALhIAAAAAAAAuEgAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": " <<"
					},
					"AwAAAL1IAAAAAAAAvkgAAAAAAAAAAAAAvkgAAAAAAAC/SAAAAAAAAAAAAAC/SAAAAAAAAMBIAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL1IAAAAAAAAvUgAAAAAAAAAAAAAAADwvw"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": " d"
					},
					"AgAAAMBIAAAAAAAAwUgAAAAAAAAAAAAAwUgAAAAAAADCSAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMBIAAAAAAAAwEgAAAAAAAAAAAAAAADwvw"
				],
				[
					41,
					1,
					"insert_completion",
					{
						"completion": "dstFilename",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "dstFilename"
					},
					"AgAAAMFIAAAAAAAAwUgAAAAAAAABAAAAZMFIAAAAAAAAzEgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMJIAAAAAAAAwkgAAAAAAAAAAAAAAADwvw"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": " <<"
					},
					"AwAAAMxIAAAAAAAAzUgAAAAAAAAAAAAAzUgAAAAAAADOSAAAAAAAAAAAAADOSAAAAAAAAM9IAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMxIAAAAAAAAzEgAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAM9IAAAAAAAA0EgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM9IAAAAAAAAz0gAAAAAAAAAAAAAAADwvw"
				],
				[
					44,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAANBIAAAAAAAA0kgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANBIAAAAAAAA0EgAAAAAAAAAAAAAAADwvw"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAANFIAAAAAAAA0kgAAAAAAAAAAAAA0kgAAAAAAADTSAAAAAAAAAAAAADTSAAAAAAAANRIAAAAAAAAAAAAANRIAAAAAAAA1UgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANFIAAAAAAAA0UgAAAAAAAAAAAAAAADwvw"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " writing"
					},
					"CAAAANVIAAAAAAAA1kgAAAAAAAAAAAAA1kgAAAAAAADXSAAAAAAAAAAAAADXSAAAAAAAANhIAAAAAAAAAAAAANhIAAAAAAAA2UgAAAAAAAAAAAAA2UgAAAAAAADaSAAAAAAAAAAAAADaSAAAAAAAANtIAAAAAAAAAAAAANtIAAAAAAAA3EgAAAAAAAAAAAAA3EgAAAAAAADdSAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANVIAAAAAAAA1UgAAAAAAAAAAAAAAADwvw"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": " !!!"
					},
					"BAAAAN1IAAAAAAAA3kgAAAAAAAAAAAAA3kgAAAAAAADfSAAAAAAAAAAAAADfSAAAAAAAAOBIAAAAAAAAAAAAAOBIAAAAAAAA4UgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN1IAAAAAAAA3UgAAAAAAAAAAAAAAADwvw"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAOJIAAAAAAAA40gAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOJIAAAAAAAA4kgAAAAAAAAAAAAAAADwvw"
				],
				[
					50,
					1,
					"left_delete",
					null,
					"AQAAAOJIAAAAAAAA4kgAAAAAAAABAAAAbA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAONIAAAAAAAA40gAAAAAAAAAAAAAAADwvw"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOJIAAAAAAAA40gAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOJIAAAAAAAA4kgAAAAAAAAAAAAAAADwvw"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "\\n"
					},
					"AgAAAOFIAAAAAAAA4kgAAAAAAAAAAAAA4kgAAAAAAADjSAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOFIAAAAAAAA4UgAAAAAAAAAAAAAAADwvw"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": " Text"
					},
					"BQAAAONIAAAAAAAA5EgAAAAAAAAAAAAA5EgAAAAAAADlSAAAAAAAAAAAAADlSAAAAAAAAOZIAAAAAAAAAAAAAOZIAAAAAAAA50gAAAAAAAAAAAAA50gAAAAAAADoSAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAONIAAAAAAAA40gAAAAAAAAAAAAAAADwvw"
				],
				[
					58,
					1,
					"insert_completion",
					{
						"completion": "Texture",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Texture"
					},
					"AgAAAORIAAAAAAAA5EgAAAAAAAAEAAAAVGV4dORIAAAAAAAA60gAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOhIAAAAAAAA6EgAAAAAAAAAAAAAAADwvw"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": " conver"
					},
					"BwAAAOtIAAAAAAAA7EgAAAAAAAAAAAAA7EgAAAAAAADtSAAAAAAAAAAAAADtSAAAAAAAAO5IAAAAAAAAAAAAAO5IAAAAAAAA70gAAAAAAAAAAAAA70gAAAAAAADwSAAAAAAAAAAAAADwSAAAAAAAAPFIAAAAAAAAAAAAAPFIAAAAAAAA8kgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOtIAAAAAAAA60gAAAAAAAAAAAAAAADwvw"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "sion"
					},
					"BAAAAPJIAAAAAAAA80gAAAAAAAAAAAAA80gAAAAAAAD0SAAAAAAAAAAAAAD0SAAAAAAAAPVIAAAAAAAAAAAAAPVIAAAAAAAA9kgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPJIAAAAAAAA8kgAAAAAAAAAAAAAAADwvw"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": " failer"
					},
					"BwAAAPZIAAAAAAAA90gAAAAAAAAAAAAA90gAAAAAAAD4SAAAAAAAAAAAAAD4SAAAAAAAAPlIAAAAAAAAAAAAAPlIAAAAAAAA+kgAAAAAAAAAAAAA+kgAAAAAAAD7SAAAAAAAAAAAAAD7SAAAAAAAAPxIAAAAAAAAAAAAAPxIAAAAAAAA/UgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPZIAAAAAAAA9kgAAAAAAAAAAAAAAADwvw"
				],
				[
					62,
					1,
					"left_delete",
					null,
					"AQAAAPxIAAAAAAAA/EgAAAAAAAABAAAAcg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP1IAAAAAAAA/UgAAAAAAAAAAAAAAADwvw"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": "d."
					},
					"AgAAAPxIAAAAAAAA/UgAAAAAAAAAAAAA/UgAAAAAAAD+SAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPxIAAAAAAAA/EgAAAAAAAAAAAAAAADwvw"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "\""
					},
					"AQAAAOxIAAAAAAAA7UgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOxIAAAAAAAA7EgAAAAAAAAAAAAAAADwvw"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": " \""
					},
					"AgAAAO1IAAAAAAAA7kgAAAAAAAAAAAAA7kgAAAAAAADvSAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO1IAAAAAAAA7UgAAAAAAAAAAAAAAADwvw"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAO9IAAAAAAAA8EgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO9IAAAAAAAA70gAAAAAAAAAAAAAAADwvw"
				],
				[
					73,
					1,
					"left_delete",
					null,
					"AQAAAOJIAAAAAAAA4kgAAAAAAAAgAAAAbiBUZXh0dXJlICIgIiBjb252ZXJzaW9uIGZhaWxlZC4",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOJIAAAAAAAAAkkAAAAAAAAAAAAAAADwvw"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOJIAAAAAAAA40gAAAAAAAAAAAAA40gAAAAAAADlSAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOJIAAAAAAAA4kgAAAAAAAAAAAAAAADwvw"
				],
				[
					75,
					4,
					"left_delete",
					null,
					"BAAAAORIAAAAAAAA5EgAAAAAAAABAAAACeNIAAAAAAAA40gAAAAAAAABAAAACeJIAAAAAAAA4kgAAAAAAAABAAAACuFIAAAAAAAA4UgAAAAAAAABAAAAXA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOVIAAAAAAAA5UgAAAAAAAAAAAAAAADwvw"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKVIAAAAAAAApkgAAAAAAAAAAAAApkgAAAAAAACoSAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKVIAAAAAAAApUgAAAAAAAAAAAAAAADwvw"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAKhIAAAAAAAAqUgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKhIAAAAAAAAqEgAAAAAAAAAAAAAAADwvw"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": " <<"
					},
					"AwAAAKRIAAAAAAAApUgAAAAAAAAAAAAApUgAAAAAAACmSAAAAAAAAAAAAACmSAAAAAAAAKdIAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKRIAAAAAAAApEgAAAAAAAAAAAAAAADwvw"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKdIAAAAAAAAqEgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKdIAAAAAAAAp0gAAAAAAAAAAAAAAADwvw"
				],
				[
					89,
					1,
					"paste",
					null,
					"AQAAAKhIAAAAAAAAyEgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKhIAAAAAAAAqEgAAAAAAAAAAAAAAADwvw"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "\""
					},
					"AQAAAKhIAAAAAAAAqUgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKhIAAAAAAAAqEgAAAAAAAAAAAAAAADwvw"
				],
				[
					92,
					2,
					"right_delete",
					null,
					"AgAAAKlIAAAAAAAAqUgAAAAAAAABAAAAbqlIAAAAAAAAqUgAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKlIAAAAAAAAqUgAAAAAAAAAAAAAAADwvw"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": "\""
					},
					"AQAAAMdIAAAAAAAAyEgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMdIAAAAAAAAx0gAAAAAAAAAAAAAAADwvw"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": " <<"
					},
					"AwAAALJIAAAAAAAAs0gAAAAAAAAAAAAAs0gAAAAAAAC0SAAAAAAAAAAAAAC0SAAAAAAAALVIAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALJIAAAAAAAAskgAAAAAAAAAAAAAAADwvw"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": " <<"
					},
					"AwAAALVIAAAAAAAAtkgAAAAAAAAAAAAAtkgAAAAAAAC3SAAAAAAAAAAAAAC3SAAAAAAAALhIAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALVIAAAAAAAAtUgAAAAAAAAAAAAAAADwvw"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALhIAAAAAAAAuUgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALhIAAAAAAAAuEgAAAAAAAAAAAAAAADwvw"
				],
				[
					102,
					1,
					"left_delete",
					null,
					"AQAAALhIAAAAAAAAuEgAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALlIAAAAAAAAuUgAAAAAAAAAAAAAAADwvw"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": "\\n"
					},
					"AgAAAM1IAAAAAAAAzkgAAAAAAAAAAAAAzkgAAAAAAADPSAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM1IAAAAAAAAzUgAAAAAAAAAAAAAAADwvw"
				],
				[
					116,
					1,
					"paste",
					null,
					"AQAAALZIAAAAAAAAwUgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALZIAAAAAAAAtkgAAAAAAAAAAAAAAADwvw"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMFIAAAAAAAAwkgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMFIAAAAAAAAwUgAAAAAAAAAAAAAAADwvw"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAP48AAAAAAAA/zwAAAAAAAAAAAAA/zwAAAAAAAAAPQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP48AAAAAAAA/jwAAAAAAAAAAAAAAADwvw"
				],
				[
					125,
					1,
					"reindent",
					null,
					"AQAAAP88AAAAAAAAAD0AAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP88AAAAAAAA/zwAAAAAAAAAAAAAAAAAAA"
				],
				[
					126,
					1,
					"paste",
					null,
					"AQAAAAA9AAAAAAAA5j0AAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAA9AAAAAAAAAD0AAAAAAAAAAAAAAADwvw"
				],
				[
					128,
					2,
					"right_delete",
					null,
					"AgAAAAA9AAAAAAAAAD0AAAAAAAABAAAACQA9AAAAAAAAAD0AAAAAAAABAAAALw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAA9AAAAAAAAAD0AAAAAAAAAAAAAAIBGQA"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAAA9AAAAAAAAAT0AAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAA9AAAAAAAAAD0AAAAAAAAAAAAAAADwvw"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": "ltx"
					},
					"AwAAAAg9AAAAAAAACT0AAAAAAAAAAAAACT0AAAAAAAAKPQAAAAAAAAAAAAAKPQAAAAAAAAs9AAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAg9AAAAAAAACD0AAAAAAAAAAAAAAADwvw"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": " texture"
					},
					"CAAAAAs9AAAAAAAADD0AAAAAAAAAAAAADD0AAAAAAAANPQAAAAAAAAAAAAANPQAAAAAAAA49AAAAAAAAAAAAAA49AAAAAAAADz0AAAAAAAAAAAAADz0AAAAAAAAQPQAAAAAAAAAAAAAQPQAAAAAAABE9AAAAAAAAAAAAABE9AAAAAAAAEj0AAAAAAAAAAAAAEj0AAAAAAAATPQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAs9AAAAAAAACz0AAAAAAAAAAAAAAADwvw"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABM9AAAAAAAAFD0AAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABM9AAAAAAAAEz0AAAAAAAAAAAAAAADwvw"
				],
				[
					136,
					17,
					"right_delete",
					null,
					"EQAAABg9AAAAAAAAGD0AAAAAAAABAAAAIBg9AAAAAAAAGD0AAAAAAAABAAAAYRg9AAAAAAAAGD0AAAAAAAABAAAAbhg9AAAAAAAAGD0AAAAAAAABAAAAZBg9AAAAAAAAGD0AAAAAAAABAAAAIBg9AAAAAAAAGD0AAAAAAAABAAAAdxg9AAAAAAAAGD0AAAAAAAABAAAAchg9AAAAAAAAGD0AAAAAAAABAAAAaRg9AAAAAAAAGD0AAAAAAAABAAAAdBg9AAAAAAAAGD0AAAAAAAABAAAAZRg9AAAAAAAAGD0AAAAAAAABAAAAIBg9AAAAAAAAGD0AAAAAAAABAAAAaBg9AAAAAAAAGD0AAAAAAAABAAAAZRg9AAAAAAAAGD0AAAAAAAABAAAAYRg9AAAAAAAAGD0AAAAAAAABAAAAZBg9AAAAAAAAGD0AAAAAAAABAAAAZRg9AAAAAAAAGD0AAAAAAAABAAAAcg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABg9AAAAAAAAGD0AAAAAAAAAAAAAAADwvw"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAN09AAAAAAAA3j0AAAAAAAAAAAAA3j0AAAAAAADhPQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN09AAAAAAAA3T0AAAAAAAAAAAAAAADwvw"
				],
				[
					140,
					1,
					"left_delete",
					null,
					"AQAAAOA9AAAAAAAA4D0AAAAAAAABAAAACQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOE9AAAAAAAA4T0AAAAAAAAAAAAAAADwvw"
				],
				[
					141,
					1,
					"insert",
					{
						"characters": "re"
					},
					"AgAAAOA9AAAAAAAA4T0AAAAAAAAAAAAA4T0AAAAAAADiPQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOA9AAAAAAAA4D0AAAAAAAAAAAAAAADwvw"
				],
				[
					142,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAAOA9AAAAAAAA4D0AAAAAAAACAAAAcmXgPQAAAAAAAOY9AAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOI9AAAAAAAA4j0AAAAAAAAAAAAAAADwvw"
				],
				[
					143,
					1,
					"insert",
					{
						"characters": " f"
					},
					"AgAAAOY9AAAAAAAA5z0AAAAAAAAAAAAA5z0AAAAAAADoPQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOY9AAAAAAAA5j0AAAAAAAAAAAAAAADwvw"
				],
				[
					144,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "false"
					},
					"AgAAAOc9AAAAAAAA5z0AAAAAAAABAAAAZuc9AAAAAAAA7D0AAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOg9AAAAAAAA6D0AAAAAAAAAAAAAAADwvw"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOw9AAAAAAAA7T0AAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOw9AAAAAAAA7D0AAAAAAAAAAAAAAADwvw"
				],
				[
					152,
					1,
					"left_delete",
					null,
					"AQAAAGM9AAAAAAAAYz0AAAAAAAA+AAAAPDwgIlRleHR1cmUgIiA8PCBzcmNGaWxlbmFtZSA8PCAiIGNvbnZlcnNpb24gZmFpbGVkLlxuIiAKCQkJPDw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKE9AAAAAAAAYz0AAAAAAAAAAAAAAADwvw"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": "<<"
					},
					"AgAAAGM9AAAAAAAAZD0AAAAAAAAAAAAAZD0AAAAAAABlPQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGM9AAAAAAAAYz0AAAAAAAAAAAAAAADwvw"
				],
				[
					156,
					1,
					"right_delete",
					null,
					"AQAAAPdIAAAAAAAA90gAAAAAAAAOAAAAb3BlbiBmaWxlIGFuZCA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPdIAAAAAAAABUkAAAAAAAAAAAAAAADwvw"
				],
				[
					160,
					1,
					"left_delete",
					null,
					"AQAAAAVJAAAAAAAABUkAAAAAAADJAAAARklMRSAqcEZpbGUgPSBmb3Blbihkc3RGaWxlbmFtZS5jX3N0cigpLCAid2IiKTsKCWlmKCFwRmlsZSkgewoJCUxMT0dfRVJSIDw8ICJUZXh0dXJlICIgPDwgc3JjRmlsZW5hbWUgPDwgIiBjb252ZXJzaW9uIGZhaWxlZC5cbiIgCgkJCTw8ICJFcnJvciBvcGVuaW5nIGZpbGUgIiA8PCBkc3RGaWxlbmFtZSA8PCAiIGZvciB3cml0aW5nICEhISI7Cgl9CgoJ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAVJAAAAAAAAzkkAAAAAAAAAAAAAAABCQA"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": "if(!"
					},
					"BAAAAAVJAAAAAAAABkkAAAAAAAAAAAAABkkAAAAAAAAHSQAAAAAAAAAAAAAHSQAAAAAAAAhJAAAAAAAAAAAAAAhJAAAAAAAACUkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAVJAAAAAAAABUkAAAAAAAAAAAAAAADwvw"
				],
				[
					162,
					1,
					"left_delete",
					null,
					"AQAAAAhJAAAAAAAACEkAAAAAAAABAAAAIQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAlJAAAAAAAACUkAAAAAAAAAAAAAAADwvw"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": " !="
					},
					"AwAAAElJAAAAAAAASkkAAAAAAAAAAAAASkkAAAAAAABLSQAAAAAAAAAAAABLSQAAAAAAAExJAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAElJAAAAAAAASUkAAAAAAAAAAAAAAADwvw"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": " s"
					},
					"AgAAAExJAAAAAAAATUkAAAAAAAAAAAAATUkAAAAAAABOSQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAExJAAAAAAAATEkAAAAAAAAAAAAAAADwvw"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAE5JAAAAAAAAT0kAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE5JAAAAAAAATkkAAAAAAAAAAAAAAADwvw"
				],
				[
					168,
					1,
					"insert_completion",
					{
						"completion": "sizeof",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "sizeof"
					},
					"AgAAAE1JAAAAAAAATUkAAAAAAAACAAAAc2lNSQAAAAAAAFNJAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE9JAAAAAAAAT0kAAAAAAAAAAAAAAADwvw"
				],
				[
					169,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFNJAAAAAAAAVUkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFNJAAAAAAAAU0kAAAAAAAAAAAAAAADwvw"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": "L"
					},
					"AQAAAFRJAAAAAAAAVUkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFRJAAAAAAAAVEkAAAAAAAAAAAAAAADwvw"
				],
				[
					171,
					1,
					"insert_completion",
					{
						"completion": "LTX_Header",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "LTX_Header"
					},
					"AgAAAFRJAAAAAAAAVEkAAAAAAAABAAAATFRJAAAAAAAAXkkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFVJAAAAAAAAVUkAAAAAAAAAAAAAAADwvw"
				],
				[
					173,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAF9JAAAAAAAAYEkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF9JAAAAAAAAX0kAAAAAAAAAAAAAAADwvw"
				],
				[
					174,
					1,
					"right_delete",
					null,
					"AQAAAGBJAAAAAAAAYEkAAAAAAAABAAAAOw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGBJAAAAAAAAYEkAAAAAAAAAAAAAAADwvw"
				],
				[
					175,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGBJAAAAAAAAYUkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGBJAAAAAAAAYEkAAAAAAAAAAAAAAADwvw"
				],
				[
					176,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAGFJAAAAAAAAY0kAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGFJAAAAAAAAYUkAAAAAAAAAAAAAAADwvw"
				],
				[
					177,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAGJJAAAAAAAAY0kAAAAAAAAAAAAAY0kAAAAAAABkSQAAAAAAAAAAAABkSQAAAAAAAGVJAAAAAAAAAAAAAGVJAAAAAAAAZkkAAAAAAAAAAAAAY0kAAAAAAABjSQAAAAAAAAEAAAAJY0kAAAAAAABlSQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGJJAAAAAAAAYkkAAAAAAAAAAAAAAADwvw"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": "LLO"
					},
					"AwAAAGVJAAAAAAAAZkkAAAAAAAAAAAAAZkkAAAAAAABnSQAAAAAAAAAAAABnSQAAAAAAAGhJAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGVJAAAAAAAAZUkAAAAAAAAAAAAAAADwvw"
				],
				[
					179,
					1,
					"insert_completion",
					{
						"completion": "LLOG_ERR",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "LLOG_ERR"
					},
					"AgAAAGVJAAAAAAAAZUkAAAAAAAADAAAATExPZUkAAAAAAABtSQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGhJAAAAAAAAaEkAAAAAAAAAAAAAAADwvw"
				],
				[
					180,
					1,
					"insert",
					{
						"characters": " <<"
					},
					"AwAAAG1JAAAAAAAAbkkAAAAAAAAAAAAAbkkAAAAAAABvSQAAAAAAAAAAAABvSQAAAAAAAHBJAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG1JAAAAAAAAbUkAAAAAAAAAAAAAAADwvw"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": " E"
					},
					"AgAAAHBJAAAAAAAAcUkAAAAAAAAAAAAAcUkAAAAAAABySQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHBJAAAAAAAAcEkAAAAAAAAAAAAAAADwvw"
				],
				[
					182,
					1,
					"left_delete",
					null,
					"AQAAAHFJAAAAAAAAcUkAAAAAAAABAAAARQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHJJAAAAAAAAckkAAAAAAAAAAAAAAADwvw"
				],
				[
					183,
					1,
					"insert",
					{
						"characters": "|"
					},
					"AQAAAHFJAAAAAAAAckkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHFJAAAAAAAAcUkAAAAAAAAAAAAAAADwvw"
				],
				[
					184,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAHJJAAAAAAAAdEkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHJJAAAAAAAAckkAAAAAAAAAAAAAAADwvw"
				],
				[
					185,
					1,
					"insert",
					{
						"characters": "E"
					},
					"AQAAAHNJAAAAAAAAdEkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHNJAAAAAAAAc0kAAAAAAAAAAAAAAADwvw"
				],
				[
					186,
					1,
					"left_delete",
					null,
					"AQAAAHNJAAAAAAAAc0kAAAAAAAABAAAARQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHRJAAAAAAAAdEkAAAAAAAAAAAAAAADwvw"
				],
				[
					187,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAHJJAAAAAAAAckkAAAAAAAABAAAAInJJAAAAAAAAckkAAAAAAAABAAAAIg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHNJAAAAAAAAc0kAAAAAAAAAAAAAAADwvw"
				],
				[
					188,
					1,
					"left_delete",
					null,
					"AQAAAHFJAAAAAAAAcUkAAAAAAAABAAAAfA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHJJAAAAAAAAckkAAAAAAAAAAAAAAADwvw"
				],
				[
					189,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAHFJAAAAAAAAc0kAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHFJAAAAAAAAcUkAAAAAAAAAAAAAAADwvw"
				],
				[
					190,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAHJJAAAAAAAAc0kAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHJJAAAAAAAAckkAAAAAAAAAAAAAAADwvw"
				],
				[
					191,
					1,
					"left_delete",
					null,
					"AQAAAHJJAAAAAAAAckkAAAAAAAABAAAAOg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHNJAAAAAAAAc0kAAAAAAAAAAAAAAADwvw"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": "Er"
					},
					"AgAAAHJJAAAAAAAAc0kAAAAAAAAAAAAAc0kAAAAAAAB0SQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHJJAAAAAAAAckkAAAAAAAAAAAAAAADwvw"
				],
				[
					193,
					1,
					"insert_completion",
					{
						"completion": "Error",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Error"
					},
					"AgAAAHJJAAAAAAAAckkAAAAAAAACAAAARXJySQAAAAAAAHdJAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHRJAAAAAAAAdEkAAAAAAAAAAAAAAADwvw"
				],
				[
					194,
					1,
					"insert",
					{
						"characters": " writing"
					},
					"CAAAAHdJAAAAAAAAeEkAAAAAAAAAAAAAeEkAAAAAAAB5SQAAAAAAAAAAAAB5SQAAAAAAAHpJAAAAAAAAAAAAAHpJAAAAAAAAe0kAAAAAAAAAAAAAe0kAAAAAAAB8SQAAAAAAAAAAAAB8SQAAAAAAAH1JAAAAAAAAAAAAAH1JAAAAAAAAfkkAAAAAAAAAAAAAfkkAAAAAAAB/SQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHdJAAAAAAAAd0kAAAAAAAAAAAAAAADwvw"
				],
				[
					195,
					1,
					"insert",
					{
						"characters": " herad"
					},
					"BgAAAH9JAAAAAAAAgEkAAAAAAAAAAAAAgEkAAAAAAACBSQAAAAAAAAAAAACBSQAAAAAAAIJJAAAAAAAAAAAAAIJJAAAAAAAAg0kAAAAAAAAAAAAAg0kAAAAAAACESQAAAAAAAAAAAACESQAAAAAAAIVJAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH9JAAAAAAAAf0kAAAAAAAAAAAAAAADwvw"
				],
				[
					196,
					3,
					"left_delete",
					null,
					"AwAAAIRJAAAAAAAAhEkAAAAAAAABAAAAZINJAAAAAAAAg0kAAAAAAAABAAAAYYJJAAAAAAAAgkkAAAAAAAABAAAAcg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIVJAAAAAAAAhUkAAAAAAAAAAAAAAADwvw"
				],
				[
					197,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAIJJAAAAAAAAg0kAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIJJAAAAAAAAgkkAAAAAAAAAAAAAAADwvw"
				],
				[
					198,
					1,
					"insert_completion",
					{
						"completion": "header",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "header"
					},
					"AgAAAIBJAAAAAAAAgEkAAAAAAAADAAAAaGVhgEkAAAAAAACGSQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAINJAAAAAAAAg0kAAAAAAAAAAAAAAADwvw"
				],
				[
					199,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAAIZJAAAAAAAAh0kAAAAAAAAAAAAAh0kAAAAAAACISQAAAAAAAAAAAACISQAAAAAAAIlJAAAAAAAAAAAAAIlJAAAAAAAAikkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIZJAAAAAAAAhkkAAAAAAAAAAAAAAADwvw"
				],
				[
					200,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIpJAAAAAAAAi0kAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIpJAAAAAAAAikkAAAAAAAAAAAAAAADwvw"
				],
				[
					201,
					1,
					"insert",
					{
						"characters": "texture"
					},
					"BwAAAItJAAAAAAAAjEkAAAAAAAAAAAAAjEkAAAAAAACNSQAAAAAAAAAAAACNSQAAAAAAAI5JAAAAAAAAAAAAAI5JAAAAAAAAj0kAAAAAAAAAAAAAj0kAAAAAAACQSQAAAAAAAAAAAACQSQAAAAAAAJFJAAAAAAAAAAAAAJFJAAAAAAAAkkkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAItJAAAAAAAAi0kAAAAAAAAAAAAAAADwvw"
				],
				[
					202,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJJJAAAAAAAAk0kAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJJJAAAAAAAAkkkAAAAAAAAAAAAAAADwvw"
				],
				[
					204,
					1,
					"insert",
					{
						"characters": " <<"
					},
					"AwAAAJRJAAAAAAAAlUkAAAAAAAAAAAAAlUkAAAAAAACWSQAAAAAAAAAAAACWSQAAAAAAAJdJAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJRJAAAAAAAAlEkAAAAAAAAAAAAAAADwvw"
				],
				[
					205,
					1,
					"insert",
					{
						"characters": " f"
					},
					"AgAAAJdJAAAAAAAAmEkAAAAAAAAAAAAAmEkAAAAAAACZSQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJdJAAAAAAAAl0kAAAAAAAAAAAAAAADwvw"
				],
				[
					206,
					1,
					"left_delete",
					null,
					"AQAAAJhJAAAAAAAAmEkAAAAAAAABAAAAZg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJlJAAAAAAAAmUkAAAAAAAAAAAAAAADwvw"
				],
				[
					207,
					1,
					"insert",
					{
						"characters": "ds"
					},
					"AgAAAJhJAAAAAAAAmUkAAAAAAAAAAAAAmUkAAAAAAACaSQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJhJAAAAAAAAmEkAAAAAAAAAAAAAAADwvw"
				],
				[
					208,
					1,
					"insert_completion",
					{
						"completion": "dstFilename",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "dstFilename"
					},
					"AgAAAJhJAAAAAAAAmEkAAAAAAAACAAAAZHOYSQAAAAAAAKNJAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJpJAAAAAAAAmkkAAAAAAAAAAAAAAADwvw"
				],
				[
					209,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKNJAAAAAAAApEkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKNJAAAAAAAAo0kAAAAAAAAAAAAAAADwvw"
				],
				[
					211,
					1,
					"insert",
					{
						"characters": " <<"
					},
					"AwAAAKNJAAAAAAAApEkAAAAAAAAAAAAApEkAAAAAAAClSQAAAAAAAAAAAAClSQAAAAAAAKZJAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKNJAAAAAAAAo0kAAAAAAAAAAAAAAADwvw"
				],
				[
					212,
					1,
					"insert",
					{
						"characters": " |\""
					},
					"AwAAAKZJAAAAAAAAp0kAAAAAAAAAAAAAp0kAAAAAAACoSQAAAAAAAAAAAACoSQAAAAAAAKlJAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKZJAAAAAAAApkkAAAAAAAAAAAAAAADwvw"
				],
				[
					213,
					2,
					"left_delete",
					null,
					"AgAAAKhJAAAAAAAAqEkAAAAAAAABAAAAIqdJAAAAAAAAp0kAAAAAAAABAAAAfA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKlJAAAAAAAAqUkAAAAAAAAAAAAAAADwvw"
				],
				[
					214,
					1,
					"insert",
					{
						"characters": "\""
					},
					"AQAAAKdJAAAAAAAAqEkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKdJAAAAAAAAp0kAAAAAAAAAAAAAAADwvw"
				],
				[
					215,
					1,
					"insert",
					{
						"characters": " !\""
					},
					"AwAAAKhJAAAAAAAAqUkAAAAAAAAAAAAAqUkAAAAAAACqSQAAAAAAAAAAAACqSQAAAAAAAKtJAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKhJAAAAAAAAqEkAAAAAAAAAAAAAAADwvw"
				],
				[
					217,
					1,
					"insert",
					{
						"characters": "\nre"
					},
					"BAAAAKxJAAAAAAAArUkAAAAAAAAAAAAArUkAAAAAAACvSQAAAAAAAAAAAACvSQAAAAAAALBJAAAAAAAAAAAAALBJAAAAAAAAsUkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKxJAAAAAAAArEkAAAAAAAAAAAAAAADwvw"
				],
				[
					218,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAAK9JAAAAAAAAr0kAAAAAAAACAAAAcmWvSQAAAAAAALVJAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALFJAAAAAAAAsUkAAAAAAAAAAAAAAADwvw"
				],
				[
					219,
					1,
					"insert",
					{
						"characters": " f"
					},
					"AgAAALVJAAAAAAAAtkkAAAAAAAAAAAAAtkkAAAAAAAC3SQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALVJAAAAAAAAtUkAAAAAAAAAAAAAAADwvw"
				],
				[
					220,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "false"
					},
					"AgAAALZJAAAAAAAAtkkAAAAAAAABAAAAZrZJAAAAAAAAu0kAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALdJAAAAAAAAt0kAAAAAAAAAAAAAAADwvw"
				],
				[
					221,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALtJAAAAAAAAvEkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALtJAAAAAAAAu0kAAAAAAAAAAAAAAADwvw"
				],
				[
					223,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAL9JAAAAAAAAwEkAAAAAAAAAAAAAwEkAAAAAAADBSQAAAAAAAAAAAADBSQAAAAAAAMJJAAAAAAAAAAAAAMJJAAAAAAAAw0kAAAAAAAAAAAAAwEkAAAAAAADASQAAAAAAAAEAAAAJ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL9JAAAAAAAAv0kAAAAAAAAAAAAAAKBnQA"
				],
				[
					224,
					1,
					"paste",
					null,
					"AQAAAMJJAAAAAAAAAkoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMJJAAAAAAAAwkkAAAAAAAAAAAAAAADwvw"
				],
				[
					228,
					4,
					"left_delete",
					null,
					"BAAAAMJJAAAAAAAAwkkAAAAAAABAAAAATExPR19FUlIgPDwgIlRleHR1cmUgIiA8PCBzcmNGaWxlbmFtZSA8PCAiIGNvbnZlcnNpb24gZmFpbGVkLlxuIsFJAAAAAAAAwUkAAAAAAAABAAAACcBJAAAAAAAAwEkAAAAAAAABAAAACr9JAAAAAAAAv0kAAAAAAAABAAAACg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMJJAAAAAAAAAkoAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC/SQAAAAAAAL9JAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/gfx_lib/vulkan/vk-device-queue.h",
			"settings":
			{
				"buffer_size": 3098,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAaDAAALy8gdmstZGV2aWNlLXF1ZXVlLmgKI3ByYWdtYSBvbmNlCgojaW5jbHVkZSAidmstYXBpLmgiCiNpbmNsdWRlICJ2ay1kZXNjcmlwdG9yLWFsbG9jYXRvci5oIgoKbmFtZXNwYWNlIGdmeCB7CgpzdHJ1Y3QgVnVsa2FuRGV2aWNlUXVldWUKewogICAgZW51bQogICAgewogICAgICAgIGtNYXhDb21tYW5kQnVmZmVycyA9IDgsCiAgICB9OwoKICAgIGVudW0gY2xhc3MgRXZlbnRUeXBlCiAgICB7CiAgICAgICAgQmVnaW5GcmFtZSwKICAgICAgICBFbmRGcmFtZSwKICAgICAgICBDb3VudE9mLAogICAgfTsKCiAgICAgICAgLy8vIEluaXRpYWxpemUgLSBtdXN0IGJlIGNhbGxlZCBiZWZvcmUgYW55dGhpbmcgZWxzZSBjYW4gYmUgZG9uZQogICAgU2xhbmdSZXN1bHQgaW5pdChjb25zdCBWdWxrYW5BcGkmIGFwaSwgVmtRdWV1ZSBxdWV1ZSwgaW50IHF1ZXVlSW5kZXgpOwoKICAgICAgICAvLy8gRmx1c2hlcyB0aGUgY3VycmVudCBjb21tYW5kIGxpc3QsIGFuZCBzdGVwcyB0byBuZXh0IChpbnRlcm5hbGx5IHRoaXMgaXMgZXF1aXZhbGVudCB0byBhIHN0ZXBBIGZvbGxvd2VkIGJ5IHN0ZXBCKQogICAgdm9pZCBmbHVzaCgpOwogICAgICAgIC8vLyBQZXJmb3JtcyBhIGZ1bGwgZmx1c2gsIGFuZCB0aGVuIHdhaXRzIGZvciBpZGxlLgogICAgdm9pZCBmbHVzaEFuZFdhaXQoKTsKCiAgICAgICAgLy8vIEJsb2NrcyB1bnRpbCBhbGwgd29yayBzdWJtaXR0ZWQgdG8gR1BVIGhhcyBjb21wbGV0ZWQKICAgIHZvaWQgd2FpdEZvcklkbGUoKSB7IG1fYXBpLT52a1F1ZXVlV2FpdElkbGUobV9xdWV1ZSk7IH0KCiAgICAgICAgLy8vIEdldCB0aGUgZ3JhcGhpY3MgcXVldWUgaW5kZXggKGFzIHNldCBvbiBpbml0KQogICAgaW50IGdldFF1ZXVlSW5kZXgoKSBjb25zdCB7IHJldHVybiBtX3F1ZXVlSW5kZXg7IH0KCiAgICAgICAgLy8vIE1ha2UgdGhlIHNwZWNpZmllZCBldmVudCAnY3VycmVudCcgLSBtZWFuaW5nIGl0J3Mgc2VtYXBob3JlIG11c3QgYmUgd2FpdGVkIG9uCiAgICBWa1NlbWFwaG9yZSBtYWtlQ3VycmVudChFdmVudFR5cGUgZXZlbnRUeXBlKTsKICAgIFZrU2VtYXBob3JlIGdldFNlbWFwaG9yZShFdmVudFR5cGUgZXZlbnRUeXBlKTsKICAgICAgICAvLy8gTWFrZXMgdGhlIGV2ZW50IG5vIGxvbmdlciByZXF1aXJlZCB0byBiZSB3YWl0ZWQgb24KICAgIHZvaWQgbWFrZUNvbXBsZXRlZChFdmVudFR5cGUgZXZlbnRUeXBlKTsKICAgICAgICAvLy8gUmV0dXJucyB0cnVlIGlmIHRoZSBldmVudCBpcyBhbHJlYWR5IGN1cnJlbnQKICAgIFNMQU5HX0ZPUkNFX0lOTElORSBib29sIGlzQ3VycmVudChFdmVudFR5cGUgZXZlbnRUeXBlKSBjb25zdCB7IHJldHVybiBtX2N1cnJlbnRTZW1hcGhvcmVzW2ludChldmVudFR5cGUpXSAhPSBWS19OVUxMX0hBTkRMRTsgfQoKICAgICAgICAvLy8gR2V0IHRoZSBjb21tYW5kIGJ1ZmZlcgogICAgVmtDb21tYW5kQnVmZmVyIGdldENvbW1hbmRCdWZmZXIoKSBjb25zdCB7IHJldHVybiBtX2NvbW1hbmRCdWZmZXI7IH0KCiAgICAgICAgLy8vIEdldCB0aGUgcXVldWUKICAgIFZrUXVldWUgZ2V0UXVldWUoKSBjb25zdCB7IHJldHVybiBtX3F1ZXVlOyB9CgogICAgVmtDb21tYW5kUG9vbCBnZXRDb21tbmFkUG9vbCgpIGNvbnN0IHsgcmV0dXJuIG1fY29tbWFuZFBvb2w7IH0KCiAgICAgICAgLy8vIEdldCB0aGUgQVBJCiAgICBjb25zdCBWdWxrYW5BcGkqIGdldEFwaSgpIGNvbnN0IHsgcmV0dXJuIG1fYXBpOyB9CgogICAgICAgIC8vLyBGbHVzaGVzIHRoZSBjdXJyZW50IGNvbW1hbmQgbGlzdAogICAgdm9pZCBmbHVzaFN0ZXBBKCk7CiAgICAgICAgLy8vIFN0ZXBzIHRvIG5leHQgY29tbWFuZCBidWZmZXIgYW5kIG9wZW5zLiBNYXkgYmxvY2sgaWYgY29tbWFuZCBidWZmZXIgaXMgc3RpbGwgaW4gdXNlCiAgICB2b2lkIGZsdXNoU3RlcEIoKTsKCiAgICAgICAgLy8vIERlc3Ryb3kgdGhlIGRldmljZSBxdWV1ZQogICAgdm9pZCBkZXN0cm95KCk7CgogICAgICAgIC8vLyBUcnVlIGlmIHRoZSBxdWV1ZSBhcHBlYXJzIHRvIGJlIHZhbGlkIGFuZCBoYXMgYmVlbiBpbml0aWFsaXplZAogICAgYm9vbCBpc1ZhbGlkKCkgY29uc3QgeyByZXR1cm4gbV9hcGkgIT0gbnVsbHB0cjsgfQoKICAgICAgICAvLy8gRHRvcgogICAgflZ1bGthbkRldmljZVF1ZXVlKCk7CgogICAgcHJvdGVjdGVkOgoKICAgIHN0cnVjdCBGZW5jZQogICAgewogICAgICAgIFZrRmVuY2UgZmVuY2U7CiAgICAgICAgYm9vbCBhY3RpdmU7CiAgICAgICAgdWludDY0X3QgdmFsdWU7CiAgICB9OwoKICAgIHZvaWQgX3VwZGF0ZUZlbmNlQXRJbmRleChpbnQgZmVuY2VJbmRleCwgYm9vbCBibG9ja2luZyk7CgogICAgVmtRdWV1ZSBtX3F1ZXVlID0gVktfTlVMTF9IQU5ETEU7CgogICAgaW50IG1fbnVtQ29tbWFuZEJ1ZmZlcnMgPSAwOwogICAgaW50IG1fY29tbWFuZEJ1ZmZlckluZGV4ID0gMDsKICAgIC8vIFRoZXJlIGFyZSB0aGUgc2FtZSBhbW91bnQgb2YgY29tbWFuZCBidWZmZXJzIGFzIGZlbmNlcwogICAgVmtDb21tYW5kUG9vbCBtX2NvbW1hbmRQb29sc1trTWF4Q29tbWFuZEJ1ZmZlcnNdID0ge1ZLX05VTExfSEFORExFfTsKICAgIFZrQ29tbWFuZEJ1ZmZlciBtX2NvbW1hbmRCdWZmZXJzW2tNYXhDb21tYW5kQnVmZmVyc10gPSB7IFZLX05VTExfSEFORExFIH07CgogICAgRmVuY2UgbV9mZW5jZXNba01heENvbW1hbmRCdWZmZXJzXSA9IHsge1ZLX05VTExfSEFORExFLCAwLCAwdX0gfTsKCiAgICBWa0NvbW1hbmRCdWZmZXIgbV9jb21tYW5kQnVmZmVyID0gVktfTlVMTF9IQU5ETEU7CiAgICBWa0NvbW1hbmRQb29sIG1fY29tbWFuZFBvb2wgPSBWS19OVUxMX0hBTkRMRTsKICAgIFZrU2VtYXBob3JlIG1fc2VtYXBob3Jlc1tpbnQoRXZlbnRUeXBlOjpDb3VudE9mKV07CiAgICBWa1NlbWFwaG9yZSBtX2N1cnJlbnRTZW1hcGhvcmVzW2ludChFdmVudFR5cGU6OkNvdW50T2YpXTsKCiAgICB1aW50NjRfdCBtX2xhc3RGZW5jZUNvbXBsZXRlZCA9IDE7CiAgICB1aW50NjRfdCBtX25leHRGZW5jZVZhbHVlID0gMjsKCiAgICBpbnQgbV9xdWV1ZUluZGV4ID0gMDsKCiAgICBjb25zdCBWdWxrYW5BcGkqIG1fYXBpID0gbnVsbHB0cjsKfTsKCn0gLy8gcmVuZGVyZXJfdGVzdAoAAAAAAAAAABoMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwYAAAAAAAADBgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/gfx_lib/vulkan/vk-device-queue.cpp",
			"settings":
			{
				"buffer_size": 6019,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAZhUAAAAAAABmFQAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: List Packages"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 320.0,
		"history":
		[
			"cd /home/max/dev"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/mnt/misc_hdd/dev/Lava"
	],
	"file_history":
	[
		"/mnt/misc_hdd/dev/Lava/src/gfx_lib/vulkan/vk-device.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/TexLODTypes.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/ShadingUtils.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/StandardMaterialInstance.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/StandardMaterial.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/BxDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/IBSDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Rendering/RTXDI/RTXDIApplicationBridge.slangh",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/AmbientOcclusionPass/AmbientOcclusionPass.raytrace.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/DeferredLightingCachedPass/DeferredLightingCachedPass.direct.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/DeferredLightingCachedPass/DeferredLightingCachedPass.indirect.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/DeferredLightingPass/DeferredLightingPass.cached.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/StandardMaterial.cpp",
		"/mnt/misc_hdd/dev/Lava/src/houdini/otls/lava/Driver_1lava/DialogScript",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/VBuffer/VBufferRT.slang",
		"/mnt/misc_hdd/dev/Lava/slang.sublime-syntax",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/VBuffer/VBufferSW.builder.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/VBuffer/VBufferSW.rasterizer.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/VBuffer/VBufferSW.rasterizer.cs.slang.old2",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/VBuffer/VBufferSW.rasterizer.cs.slang.old",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/VBuffer/VBufferSW.Meshlet.slangh",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/VBuffer/VBufferSW.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/DebugShadingPass/DebugShadingPass.cpp",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/DebugShadingPass/DebugShadingPass.h",
		"/mnt/misc_hdd/dev/Lava/src/gfx_lib/slang-gfx.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/GFX/GFXComputeContext.cpp",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/VBuffer/VBufferSW.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/SceneDefines.slangh",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/VBuffer/VBufferSW.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/MaterialSystem.slang",
		"/mnt/misc_hdd/dev/Lava/src/gfx_lib/vulkan/vk-command-encoder.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/GFX/GFXCopyContext.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Image/TextureManager.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/TextureHandle.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Image/TextureManager.h",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/DebugShadingPass/DebugShadingPass.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/DeferredLightingPass/DeferredLightingPass.cs.slang.old",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/DeferredLightingPass/DeferredLightingPass.nocache.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/EdgeDetectPass/EdgeDetect.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/EdgeDetectPass/EdgeDetect.lowpass.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/ForwardLightingPass/ForwardLightingPass.3d.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/GBuffer/GBufferRT.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/BSDFIntegrator.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/LayeredBSDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/BasicMaterial.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/MaterialTypeRegistry.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/MaterialTypes.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/MaterialTypeRegistry.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/NDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/BSDFs/BeerBTDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/BSDFs/DielectricPlateBSDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/BSDFs/DiffuseSpecularBRDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/BSDFs/DisneyDiffuseBRDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/BSDFs/FrostbiteDiffuseBRDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/ClothBRDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/HairMaterial.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/BSDFs/StandardBSDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/BSDFs/SpecularMicrofacet.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/BSDFs/SimpleBTDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/BasicMaterial.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/RaytracingInline.slang",
		"/mnt/misc_hdd/dev/Lava/src/houdini/soho/python/LSDlava.py",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/slang-extension/atomic-min-max-u64-byte-address-buffer.slang",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/source/slang/hlsl.meta.slang",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/bugs/vk-image-atomics.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/HitInfo.cpp",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/AccumulatePass/Accumulate.SeparableFilter.cs.slang",
		"/mnt/misc_hdd/dev/Lava/third_party/mikktspace/mikktspace.h",
		"/mnt/misc_hdd/dev/Lava/third_party/mikktspace/mikktspace.c",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/TextureSampler.slang",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/compute/byte-address-buffer.slang",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/pipeline/ray-tracing/ray-query-subroutine.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/RTXDIPass/FinalShading.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/TextureUtils.slang",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/docs/stdlib-doc.md",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/LobeType.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/TexLODTypes.slang",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/external/glslang/SPIRV/SpvBuilder.cpp",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/external/glslang/SPIRV/GlslangToSpv.cpp",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/external/glext.h",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/external/glslang/glslang/MachineIndependent/intermOut.cpp",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/external/glslang/Test/spv.1.4.sparseTexture.frag",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/compute/dynamic-dispatch-16.slang",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/external/glslang/glslang/MachineIndependent/Initialize.cpp",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/hlsl-intrinsic/texture/gather-texture2darray.slang",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/hlsl-intrinsic/texture/gather-texture2darray.slang.hlsl",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/SDFs/SparseBrickSet/SDFSBS.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/IMaterial.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/PathTracer/StaticParams.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/DeferredLightingPass/DeferredLightingPass.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/PathTracer/ResolvePass.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/PathTracer/GeneratePaths.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/PathTracer/LoadShadingData.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/PathTracer/NRDHelpers.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/PathTracer/PathState.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/PathTracer/GuideData.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/MaterialSystem.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/MaterialSystem.h",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/PathTracer/PathTracer.cpp",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/PathTracer/PathTracerNRD.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/PathTracer/PathTracer.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/RenderPasses/Shared/Denoising/NRDHelpers.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/Microfacet.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/MaterialFactory.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/TexLODHelpers.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/ClothMaterial.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/ClothMaterialInstance.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/HairChiang16.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/HairMaterialInstance.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/IMaterialInstance.slang",
		"/mnt/misc_hdd/dev/Lava/third_party/mikktspace/README.md",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/DeferredLightingPass/DeferredLightingPass.cs.slang.old3",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/DeferredLightingPass/DeferredLightingPass.cs.slang.old2",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/BSDFs/SheenBSDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/BSDFs/OrenNayarBRDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/BSDFs/LambertDiffuseBTDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/BSDFs/LambertDiffuseBRDF.slang",
		"/mnt/misc_hdd/dev/Lava/third_party/CMakeLists.txt",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Image/LTX_Bitmap.cpp",
		"/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/cmake/compiler.cmake",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/MaterialX/MxSocket.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/Framework.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Algorithm/BitonicSort.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Algorithm/BitonicSort.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/GFX/GFXDevice.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Buffer.h",
		"/mnt/misc_hdd/dev/Lava/src/lava_lib/scene_builder.cpp",
		"/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/bgeo/Primitive.h"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 125.0,
		"where_history":
		[
			"/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/openimageio,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/openimageio,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO,<project filters>",
			"/mnt/misc_hdd/dev/Lava/cmake,<project filters>"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"dds.imageio",
			"USE_DDS",
			"squish",
			"OpenCV",
			"OpenCV_LIBS",
			"OpenCV_INCLUDE_DIR",
			"USE_OPENCV"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/Falcor/Utils/Image/TextureManager.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 34240,
						"regions":
						{
						},
						"selection":
						[
							[
								23346,
								23346
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 10237.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/Falcor/Utils/Image/TextureManager.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12764,
						"regions":
						{
						},
						"selection":
						[
							[
								5442,
								5442
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2039.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/Falcor/Scene/Material/MaterialTextureLoader.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3574,
						"regions":
						{
						},
						"selection":
						[
							[
								2442,
								2442
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 643.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/Falcor/Scene/Material/Material.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21711,
						"regions":
						{
						},
						"selection":
						[
							[
								7326,
								7326
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2677.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/Falcor/Scene/Material/MaterialTextureLoader.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3259,
						"regions":
						{
						},
						"selection":
						[
							[
								2696,
								2696
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 540.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/Falcor/Scene/SceneBuilder.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31975,
						"regions":
						{
						},
						"selection":
						[
							[
								31975,
								31975
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 13447.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/Falcor/Scene/SceneBuilder.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14672,
						"regions":
						{
						},
						"selection":
						[
							[
								14672,
								14672
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6103.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/lava_lib/reader_lsd/session.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19743,
						"regions":
						{
						},
						"selection":
						[
							[
								19743,
								19743
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 10585.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/lava_lib/reader_lsd/visitor.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7415,
						"regions":
						{
						},
						"selection":
						[
							[
								3178,
								3178
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1620.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "third_party/freeimage_install_files.cmake",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 606,
						"regions":
						{
						},
						"selection":
						[
							[
								370,
								370
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/Falcor/Core/Platform/OS.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10466,
						"regions":
						{
						},
						"selection":
						[
							[
								2385,
								2385
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 955.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 42080,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions": "",
								"scope": ""
							}
						},
						"selection":
						[
							[
								41920,
								41920
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 7,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 18954.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "third_party/external/openimageio/src/OpenImageIO/src/cmake/compiler.cmake",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25040,
						"regions":
						{
						},
						"selection":
						[
							[
								19134,
								19134
							]
						],
						"settings":
						{
							"reload_file_on_change": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "third_party/external/openimageio/src/OpenImageIO/src/cmake/modules/FindLibsquish.cmake",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1635,
						"regions":
						{
						},
						"selection":
						[
							[
								174,
								112
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "third_party/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2513,
						"regions":
						{
						},
						"selection":
						[
							[
								2513,
								2513
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1495.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "src/Falcor/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6070,
						"regions":
						{
						},
						"selection":
						[
							[
								1672,
								1678
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 486.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "CMakeLists.txt",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14857,
						"regions":
						{
						},
						"selection":
						[
							[
								578,
								578
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "src/lava_lib/reader_lsd/reader_lsd.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3564,
						"regions":
						{
						},
						"selection":
						[
							[
								2492,
								2492
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1512.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "src/lava_lib/reader_lsd/visitor.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4307,
						"regions":
						{
						},
						"selection":
						[
							[
								1997,
								1997
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 457.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "src/lava_lib/reader_lsd/session.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2657,
						"regions":
						{
						},
						"selection":
						[
							[
								2657,
								2657
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1264.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "src/Falcor/Core/API/GFX/GFXTexture.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7847,
						"regions":
						{
						},
						"selection":
						[
							[
								7782,
								7793
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3252.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "src/Falcor/Core/API/GFX/GFXDevice.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20734,
						"regions":
						{
						},
						"selection":
						[
							[
								8752,
								8752
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3198.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "src/RenderPasses/DeferredLightingPass/DeferredLightingPass.cs.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25072,
						"regions":
						{
						},
						"selection":
						[
							[
								20418,
								20418
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9092.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "src/Falcor/Utils/Image/LTX_Bitmap.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12916,
						"regions":
						{
						},
						"selection":
						[
							[
								12916,
								12916
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6553.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "src/gfx_lib/vulkan/vk-device-queue.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3098,
						"regions":
						{
						},
						"selection":
						[
							[
								1539,
								1539
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 238.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "src/gfx_lib/vulkan/vk-device-queue.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6019,
						"regions":
						{
						},
						"selection":
						[
							[
								5478,
								5478
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2884.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 43.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 33.0
	},
	"pinned_build_system": "Packages/Makefile/Make.sublime-build",
	"project": "falcor.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"src/lava_lib/reader_lsd/grammar_lsd.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 322.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
