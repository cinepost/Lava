{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"pTe",
				"pTexture"
			],
			[
				"is",
				"isUDIMTexture"
			],
			[
				"ife",
				"ifdef"
			],
			[
				"_",
				"_DEBUG"
			],
			[
				"al",
				"allocInfo"
			],
			[
				"all",
				"alloc"
			],
			[
				"ba",
				"back"
			],
			[
				"Fil",
				"Filter"
			],
			[
				"LLOG",
				"LLOG_DBG"
			],
			[
				"de",
				"depth"
			],
			[
				"o",
				"offset"
			],
			[
				"off",
				"offset"
			],
			[
				"p",
				"pPage"
			],
			[
				"page",
				"pageIds"
			],
			[
				"LLOG_",
				"LLOG_DBG"
			],
			[
				"GF",
				"GFX"
			],
			[
				"F",
				"FALCOR_GFX"
			],
			[
				"def",
				"defined"
			],
			[
				"m_me",
				"m_memoryProperties"
			],
			[
				"m_m",
				"m_memoryProperties"
			],
			[
				"pri",
				"private"
			],
			[
				"vk",
				"vkHandle"
			],
			[
				"LLO",
				"LLOG_WRN"
			],
			[
				"Rt",
				"RtQueryPool"
			],
			[
				"int",
				"int32_t"
			],
			[
				"inc",
				"include"
			],
			[
				"Sha",
				"SharedPtr"
			],
			[
				"VkQ",
				"VkQueryPool"
			],
			[
				"s",
				"shared_ptr"
			],
			[
				"el",
				"elif"
			],
			[
				"n",
				"nullptr"
			],
			[
				"S",
				"SharedPtr"
			],
			[
				"LL",
				"LLOG_WRN"
			],
			[
				"Te",
				"TextureSlot"
			],
			[
				"Tex",
				"TextureSlot"
			],
			[
				"Sp",
				"Specular"
			],
			[
				"mH",
				"mHasSparseTextures"
			],
			[
				"tex",
				"textureManager"
			],
			[
				"sh",
				"shared_ptr"
			],
			[
				"mpTex",
				"mpTextureManager"
			],
			[
				"ge",
				"generateMipLevels"
			],
			[
				"loa",
				"loadAsSparse"
			],
			[
				"pT",
				"pTexture"
			],
			[
				"lo",
				"loadAsSparse"
			],
			[
				"load",
				"loadAsSparse"
			],
			[
				"L",
				"LTX_Bitmap"
			],
			[
				"c",
				"convertToLTX"
			],
			[
				"Re",
				"Request"
			],
			[
				"T",
				"TextureHandle"
			],
			[
				"To",
				"ToneMapper"
			],
			[
				"O",
				"Operator"
			],
			[
				"str",
				"string"
			],
			[
				"cre",
				"createFromFile"
			],
			[
				"fil",
				"filename"
			],
			[
				"fa",
				"false"
			],
			[
				"pop",
				"pop_options"
			],
			[
				"mI",
				"mIsNull"
			],
			[
				"isNu",
				"isNull"
			],
			[
				"rend",
				"renderData"
			],
			[
				"sa",
				"sampleCount"
			],
			[
				"d",
				"dims"
			],
			[
				"do",
				"doesn't"
			],
			[
				"fi",
				"filename"
			],
			[
				"Res",
				"ResourceViews"
			],
			[
				"uint",
				"uint8_t"
			],
			[
				"Ren",
				"RenderPassStandardFlags"
			],
			[
				"R",
				"RenderPassLibrary"
			],
			[
				"Pr",
				"Program"
			],
			[
				"tr",
				"triangle"
			],
			[
				"se",
				"setupMeshLights"
			],
			[
				"RT",
				"RTXDIPass"
			],
			[
				"e",
				"else"
			],
			[
				"ra",
				"rasterize"
			],
			[
				"LO",
				"LOG_WARN"
			],
			[
				"mL",
				"mLibDevices"
			],
			[
				"pRen",
				"pRenderContext"
			],
			[
				"Sh",
				"SharedPtr"
			],
			[
				"mp",
				"mpDevice"
			],
			[
				"I",
				"Info"
			],
			[
				"In",
				"Info"
			],
			[
				"pRe",
				"pReflector"
			],
			[
				"pro",
				"protected"
			],
			[
				"Vk",
				"VkInstance"
			],
			[
				"mpD",
				"mpDevice"
			],
			[
				"Sla",
				"SlangResult"
			],
			[
				"VK_N",
				"VK_NULL_HANDLE"
			],
			[
				"pD",
				"pDevice"
			],
			[
				"pDe",
				"pDevice"
			],
			[
				"De",
				"Device"
			],
			[
				"ID",
				"IDevice"
			],
			[
				"wi",
				"width"
			],
			[
				"Co",
				"CopyContext"
			],
			[
				"Str",
				"StringUtils"
			],
			[
				"W",
				"WIN32"
			],
			[
				"Pro",
				"ProgramVersion"
			],
			[
				"ProgramV",
				"ProgramVars"
			],
			[
				"C",
				"CopyContext"
			],
			[
				"vi",
				"virtual"
			],
			[
				"Shared",
				"SharedPtr"
			],
			[
				"mpDe",
				"mpDefaultSampler"
			],
			[
				"li",
				"limits"
			],
			[
				"G",
				"GpuTimer"
			],
			[
				"Dev",
				"DeviceManager"
			],
			[
				"FALCOR_E",
				"FALCOR_ENUM_CLASS_OPERATORS"
			],
			[
				"RtAcceleratio",
				"RtAccelerationStructurePostBuildInfoPool"
			],
			[
				"FA",
				"FALCOR_CORE_FALCORCONFIG_H_"
			],
			[
				"B",
				"BlitContext"
			],
			[
				"in",
				"include"
			],
			[
				"enum",
				"enum_class_operators"
			],
			[
				"IS",
				"ISlangBlob"
			],
			[
				"en",
				"entryPointName"
			],
			[
				"mN",
				"mNonEmptyCount"
			],
			[
				"M",
				"MathHelpers"
			],
			[
				"SDF",
				"mSDFGrids"
			],
			[
				"ex",
				"execution"
			],
			[
				"enu",
				"enum_class_operators"
			],
			[
				"hasS",
				"hasSkinningData"
			],
			[
				"WIN",
				"WIN32"
			],
			[
				"MaterialT",
				"MaterialTextureLoader"
			],
			[
				"St",
				"StandardMaterial"
			],
			[
				"Ma",
				"MaterialSystem"
			],
			[
				"Ve",
				"Vector"
			],
			[
				"Bi",
				"Bitmap"
			],
			[
				"pat",
				"path"
			],
			[
				"Sce",
				"Scene"
			],
			[
				"Sta",
				"StandardMaterial"
			],
			[
				"ui",
				"uint8_t"
			],
			[
				"un",
				"unordered_map"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/Falcor/Core/API/Vulkan/VKDevice.cpp",
			"settings":
			{
				"buffer_size": 58454,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Material/MaterialSystem.slang",
			"settings":
			{
				"buffer_size": 14068,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					10,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAI8pAAAAAAAAkCkAAAAAAAAAAAAAkCkAAAAAAACYKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPKQAAAAAAAI8pAAAAAAAAAAAAAAAAUkA"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAD8pAAAAAAAAQCkAAAAAAAAAAAAAQCkAAAAAAABIKQAAAAAAAAAAAABIKQAAAAAAAEkpAAAAAAAAAAAAAEkpAAAAAAAAUSkAAAAAAAAAAAAAQCkAAAAAAABAKQAAAAAAAAgAAAAgICAgICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA/KQAAAAAAAD8pAAAAAAAAAAAAAAAAUkA"
				],
				[
					14,
					1,
					"reindent",
					null,
					"AQAAAEApAAAAAAAARCkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABAKQAAAAAAAEApAAAAAAAAAAAAAAAAUkA"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAEQpAAAAAAAASCkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABEKQAAAAAAAEQpAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AwAAAJMpAAAAAAAAlCkAAAAAAAAAAAAAlCkAAAAAAACUKQAAAAAAAAEAAAAxQCkAAAAAAABAKQAAAAAAAAgAAAAgICAgICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACTKQAAAAAAAJQpAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"left_delete",
					null,
					"AQAAAIspAAAAAAAAiykAAAAAAAABAAAAMA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMKQAAAAAAAIwpAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAIspAAAAAAAAjCkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACLKQAAAAAAAIspAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"left_delete",
					null,
					"AQAAAIspAAAAAAAAiykAAAAAAAABAAAAMg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMKQAAAAAAAIwpAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAAIspAAAAAAAAjCkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACLKQAAAAAAAIspAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"left_delete",
					null,
					"AQAAAIspAAAAAAAAiykAAAAAAAABAAAAMw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMKQAAAAAAAIwpAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "4"
					},
					"AQAAAIspAAAAAAAAjCkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACLKQAAAAAAAIspAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"reindent",
					null,
					"AQAAAEApAAAAAAAARCkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABAKQAAAAAAAEApAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAEQpAAAAAAAASCkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABEKQAAAAAAAEQpAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"paste",
					null,
					"AQAAAEgpAAAAAAAAoykAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABIKQAAAAAAAEgpAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAAEgpAAAAAAAASSkAAAAAAAAAAAAASSkAAAAAAABKKQAAAAAAAAAAAABKKQAAAAAAAEspAAAAAAAAAAAAAEspAAAAAAAATCkAAAAAAAAAAAAATCkAAAAAAABNKQAAAAAAAAAAAABNKQAAAAAAAE4pAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABIKQAAAAAAAEgpAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAE4pAAAAAAAATykAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABOKQAAAAAAAE4pAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"paste",
					null,
					"AgAAAF0pAAAAAAAAcikAAAAAAAAAAAAAcikAAAAAAAByKQAAAAAAABoAAABjb25zdCBUZXh0dXJlSGFuZGxlIGhhbmRsZQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB3KQAAAAAAAF0pAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					13,
					"right_delete",
					null,
					"DQAAAHQpAAAAAAAAdCkAAAAAAAABAAAAU3QpAAAAAAAAdCkAAAAAAAABAAAAYXQpAAAAAAAAdCkAAAAAAAABAAAAbXQpAAAAAAAAdCkAAAAAAAABAAAAcHQpAAAAAAAAdCkAAAAAAAABAAAAbHQpAAAAAAAAdCkAAAAAAAABAAAAZXQpAAAAAAAAdCkAAAAAAAABAAAAcnQpAAAAAAAAdCkAAAAAAAABAAAAU3QpAAAAAAAAdCkAAAAAAAABAAAAdHQpAAAAAAAAdCkAAAAAAAABAAAAYXQpAAAAAAAAdCkAAAAAAAABAAAAdHQpAAAAAAAAdCkAAAAAAAABAAAAZXQpAAAAAAAAdCkAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB0KQAAAAAAAHQpAAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					13,
					"right_delete",
					null,
					"DQAAAHcpAAAAAAAAdykAAAAAAAABAAAAY3cpAAAAAAAAdykAAAAAAAABAAAAb3cpAAAAAAAAdykAAAAAAAABAAAAbncpAAAAAAAAdykAAAAAAAABAAAAc3cpAAAAAAAAdykAAAAAAAABAAAAdHcpAAAAAAAAdykAAAAAAAABAAAAIHcpAAAAAAAAdykAAAAAAAABAAAAZncpAAAAAAAAdykAAAAAAAABAAAAbHcpAAAAAAAAdykAAAAAAAABAAAAb3cpAAAAAAAAdykAAAAAAAABAAAAYXcpAAAAAAAAdykAAAAAAAABAAAAdHcpAAAAAAAAdykAAAAAAAABAAAAMncpAAAAAAAAdykAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB3KQAAAAAAAHcpAAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					15,
					"right_delete",
					null,
					"DwAAAHspAAAAAAAAeykAAAAAAAABAAAAY3spAAAAAAAAeykAAAAAAAABAAAAb3spAAAAAAAAeykAAAAAAAABAAAAbnspAAAAAAAAeykAAAAAAAABAAAAc3spAAAAAAAAeykAAAAAAAABAAAAdHspAAAAAAAAeykAAAAAAAABAAAAIHspAAAAAAAAeykAAAAAAAABAAAAZnspAAAAAAAAeykAAAAAAAABAAAAbHspAAAAAAAAeykAAAAAAAABAAAAb3spAAAAAAAAeykAAAAAAAABAAAAYXspAAAAAAAAeykAAAAAAAABAAAAdHspAAAAAAAAeykAAAAAAAABAAAAIHspAAAAAAAAeykAAAAAAAABAAAAbHspAAAAAAAAeykAAAAAAAABAAAAb3spAAAAAAAAeykAAAAAAAABAAAAZA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB7KQAAAAAAAHspAAAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "4.9"
					},
					"AwAAAHspAAAAAAAAfCkAAAAAAAAAAAAAfCkAAAAAAAB9KQAAAAAAAAAAAAB9KQAAAAAAAH4pAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB7KQAAAAAAAHspAAAAAAAAAAAAAAAA8L8"
				],
				[
					57,
					1,
					"left_delete",
					null,
					"AQAAAH0pAAAAAAAAfSkAAAAAAAABAAAAOQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB+KQAAAAAAAH4pAAAAAAAAAAAAAAAA8L8"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAH0pAAAAAAAAfikAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB9KQAAAAAAAH0pAAAAAAAAAAAAAAAA8L8"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAH8pAAAAAAAAgCkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB/KQAAAAAAAH8pAAAAAAAAAAAAAAAA8L8"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAIkpAAAAAAAAiikAAAAAAAAAAAAAiikAAAAAAACLKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJKQAAAAAAAIkpAAAAAAAAAAAAAAAA8L8"
				],
				[
					70,
					1,
					"right_delete",
					null,
					"AQAAAGMpAAAAAAAAYykAAAAAAAAPAAAALmdldFRleHR1cmVJRCgp",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjKQAAAAAAAHIpAAAAAAAAAAAAAAAA8L8"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAEgpAAAAAAAASSkAAAAAAAAAAAAASSkAAAAAAABKKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABIKQAAAAAAAEgpAAAAAAAAAAAAAAAA8L8"
				],
				[
					76,
					2,
					"left_delete",
					null,
					"AgAAAH0pAAAAAAAAfSkAAAAAAAABAAAAL3wpAAAAAAAAfCkAAAAAAAABAAAALw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB+KQAAAAAAAH4pAAAAAAAAAAAAAACAVkA"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BAAAAHMpAAAAAAAAdCkAAAAAAAAAAAAAdCkAAAAAAAB8KQAAAAAAAAAAAAB8KQAAAAAAAH0pAAAAAAAAAAAAAH0pAAAAAAAAfikAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABzKQAAAAAAAHMpAAAAAAAAAAAAAAAA8L8"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAH4pAAAAAAAAfykAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB+KQAAAAAAAH4pAAAAAAAAAAAAAAAA8L8"
				],
				[
					84,
					3,
					"left_delete",
					null,
					"AwAAAH4pAAAAAAAAfikAAAAAAAABAAAAIH0pAAAAAAAAfSkAAAAAAAABAAAAZnwpAAAAAAAAfCkAAAAAAAABAAAAaQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB/KQAAAAAAAH8pAAAAAAAAAAAAAAAA8L8"
				],
				[
					86,
					2,
					"right_delete",
					null,
					"AwAAAEgpAAAAAAAASCkAAAAAAAABAAAAL3MpAAAAAAAAcykAAAAAAAAIAAAAICAgICAgICBIKQAAAAAAAEgpAAAAAAAAAQAAAC8",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABIKQAAAAAAAEgpAAAAAAAAAAAAAAAAUkA"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BAAAAD8pAAAAAAAAQCkAAAAAAAAAAAAAQCkAAAAAAABIKQAAAAAAAAAAAABIKQAAAAAAAEkpAAAAAAAAAAAAAEkpAAAAAAAASikAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA/KQAAAAAAAD8pAAAAAAAAAAAAAAAAUkA"
				],
				[
					89,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEopAAAAAAAATCkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABKKQAAAAAAAEopAAAAAAAAAAAAAAAA8L8"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": "Ha"
					},
					"AgAAAEspAAAAAAAATCkAAAAAAAAAAAAATCkAAAAAAABNKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABLKQAAAAAAAEspAAAAAAAAAAAAAAAA8L8"
				],
				[
					91,
					2,
					"left_delete",
					null,
					"AgAAAEwpAAAAAAAATCkAAAAAAAABAAAAYUspAAAAAAAASykAAAAAAAABAAAASA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNKQAAAAAAAE0pAAAAAAAAAAAAAAAA8L8"
				],
				[
					92,
					1,
					"paste",
					null,
					"AQAAAEspAAAAAAAAZykAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABLKQAAAAAAAEspAAAAAAAAAAAAAAAA8L8"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "handle.get"
					},
					"CgAAAEspAAAAAAAATCkAAAAAAAAAAAAATCkAAAAAAABNKQAAAAAAAAAAAABNKQAAAAAAAE4pAAAAAAAAAAAAAE4pAAAAAAAATykAAAAAAAAAAAAATykAAAAAAABQKQAAAAAAAAAAAABQKQAAAAAAAFEpAAAAAAAAAAAAAFEpAAAAAAAAUikAAAAAAAAAAAAAUikAAAAAAABTKQAAAAAAAAAAAABTKQAAAAAAAFQpAAAAAAAAAAAAAFQpAAAAAAAAVSkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABLKQAAAAAAAEspAAAAAAAAAAAAAAAA8L8"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": "Mode()"
					},
					"BgAAAFUpAAAAAAAAVikAAAAAAAAAAAAAVikAAAAAAABXKQAAAAAAAAAAAABXKQAAAAAAAFgpAAAAAAAAAAAAAFgpAAAAAAAAWSkAAAAAAAAAAAAAWSkAAAAAAABaKQAAAAAAAAAAAABaKQAAAAAAAFspAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABVKQAAAAAAAFUpAAAAAAAAAAAAAAAA8L8"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAAFspAAAAAAAAXCkAAAAAAAAAAAAAXCkAAAAAAABdKQAAAAAAAAAAAABdKQAAAAAAAF4pAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABbKQAAAAAAAFspAAAAAAAAAAAAAAAA8L8"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAF4pAAAAAAAAXykAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeKQAAAAAAAF4pAAAAAAAAAAAAAAAA8L8"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAIUpAAAAAAAAiSkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACFKQAAAAAAAIUpAAAAAAAAAAAAAAAA8L8"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAALMpAAAAAAAAtCkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzKQAAAAAAALMpAAAAAAAAAAAAAAAAW0A"
				],
				[
					108,
					1,
					"reindent",
					null,
					"AQAAALMpAAAAAAAAvykAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzKQAAAAAAALMpAAAAAAAAAAAAAAAAAAA"
				],
				[
					109,
					1,
					"left_delete",
					null,
					"AQAAALspAAAAAAAAuykAAAAAAAAEAAAAICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC/KQAAAAAAAL8pAAAAAAAAAAAAAAAA8L8"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"CQAAALspAAAAAAAAvCkAAAAAAAAAAAAAvCkAAAAAAADEKQAAAAAAAAAAAACzKQAAAAAAALMpAAAAAAAACAAAACAgICAgICAgvCkAAAAAAAC9KQAAAAAAAAAAAAC9KQAAAAAAAL4pAAAAAAAAAAAAAL4pAAAAAAAAvykAAAAAAAAAAAAAvykAAAAAAADAKQAAAAAAAAAAAADAKQAAAAAAAMEpAAAAAAAAAAAAAMEpAAAAAAAAwikAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7KQAAAAAAALspAAAAAAAAAAAAAAAA8L8"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMIpAAAAAAAAwykAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCKQAAAAAAAMIpAAAAAAAAAAAAAAAA8L8"
				],
				[
					112,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMMpAAAAAAAAxSkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDKQAAAAAAAMMpAAAAAAAAAAAAAAAA8L8"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": "1,"
					},
					"AgAAAMQpAAAAAAAAxSkAAAAAAAAAAAAAxSkAAAAAAADGKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADEKQAAAAAAAMQpAAAAAAAAAAAAAAAA8L8"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": " 0,"
					},
					"AwAAAMYpAAAAAAAAxykAAAAAAAAAAAAAxykAAAAAAADIKQAAAAAAAAAAAADIKQAAAAAAAMkpAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADGKQAAAAAAAMYpAAAAAAAAAAAAAAAA8L8"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": " 0,"
					},
					"AwAAAMkpAAAAAAAAyikAAAAAAAAAAAAAyikAAAAAAADLKQAAAAAAAAAAAADLKQAAAAAAAMwpAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADJKQAAAAAAAMkpAAAAAAAAAAAAAAAA8L8"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": " 1"
					},
					"AgAAAMwpAAAAAAAAzSkAAAAAAAAAAAAAzSkAAAAAAADOKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADMKQAAAAAAAMwpAAAAAAAAAAAAAAAA8L8"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAM8pAAAAAAAA0CkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADPKQAAAAAAAM8pAAAAAAAAAAAAAAAA8L8"
				],
				[
					128,
					1,
					"paste",
					null,
					"AgAAAJApAAAAAAAA0ikAAAAAAAAAAAAA0ikAAAAAAADSKQAAAAAAACIAAABzYW1wbGVUZXh0dXJlKGhhbmRsZSwgcywgdXYsIDQuMCk7",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACQKQAAAAAAALIpAAAAAAAAAAAAAAAA8L8"
				],
				[
					134,
					1,
					"insert",
					{
						"characters": "\n\t"
					},
					"AwAAAHwpAAAAAAAAfSkAAAAAAAAAAAAAfSkAAAAAAACFKQAAAAAAAAAAAACFKQAAAAAAAIkpAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB8KQAAAAAAAHwpAAAAAAAAAAAAAAAA8L8"
				],
				[
					135,
					1,
					"paste",
					null,
					"AQAAAIkpAAAAAAAAuSkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJKQAAAAAAAIkpAAAAAAAAAAAAAAAA8L8"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHwpAAAAAAAAfSkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB8KQAAAAAAAHwpAAAAAAAAAAAAAADggEA"
				],
				[
					138,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAH0pAAAAAAAAfykAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB9KQAAAAAAAH0pAAAAAAAAAAAAAAAA8L8"
				],
				[
					139,
					1,
					"right_delete",
					null,
					"AQAAAH4pAAAAAAAAfikAAAAAAAABAAAAfQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB+KQAAAAAAAH4pAAAAAAAAAAAAAAAA8L8"
				],
				[
					141,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABIqAAAAAAAAEyoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASKgAAAAAAABIqAAAAAAAAAAAAAABwgUA"
				],
				[
					143,
					1,
					"reindent",
					null,
					"AQAAABIqAAAAAAAAHioAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASKgAAAAAAABIqAAAAAAAAAAAAAAAAAAA"
				],
				[
					144,
					1,
					"insert",
					{
						"characters": "`"
					},
					"AQAAAB4qAAAAAAAAHyoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAeKgAAAAAAAB4qAAAAAAAAAAAAAAAA8L8"
				],
				[
					145,
					2,
					"left_delete",
					null,
					"AgAAAB4qAAAAAAAAHioAAAAAAAABAAAAYBoqAAAAAAAAGioAAAAAAAAEAAAAICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfKgAAAAAAAB8qAAAAAAAAAAAAAAAA8L8"
				],
				[
					146,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAABoqAAAAAAAAGyoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAaKgAAAAAAABoqAAAAAAAAAAAAAAAA8L8"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": "4,0"
					},
					"BAAAALUpAAAAAAAAtikAAAAAAAAAAAAAtikAAAAAAAC2KQAAAAAAAAMAAABsb2S2KQAAAAAAALcpAAAAAAAAAAAAALcpAAAAAAAAuCkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1KQAAAAAAALgpAAAAAAAAAAAAAAAA8L8"
				],
				[
					154,
					2,
					"left_delete",
					null,
					"AgAAALcpAAAAAAAAtykAAAAAAAABAAAAMLYpAAAAAAAAtikAAAAAAAABAAAALA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4KQAAAAAAALgpAAAAAAAAAAAAAAAA8L8"
				],
				[
					155,
					1,
					"insert",
					{
						"characters": ".0"
					},
					"AgAAALYpAAAAAAAAtykAAAAAAAAAAAAAtykAAAAAAAC4KQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC2KQAAAAAAALYpAAAAAAAAAAAAAAAA8L8"
				],
				[
					158,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AgAAALUpAAAAAAAAtikAAAAAAAAAAAAAtikAAAAAAAC2KQAAAAAAAAEAAAA0",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1KQAAAAAAALYpAAAAAAAAAAAAAAAA8L8"
				],
				[
					159,
					1,
					"left_delete",
					null,
					"AQAAALUpAAAAAAAAtSkAAAAAAAABAAAAMA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC2KQAAAAAAALYpAAAAAAAAAAAAAAAA8L8"
				],
				[
					160,
					1,
					"insert",
					{
						"characters": "100"
					},
					"AwAAALUpAAAAAAAAtikAAAAAAAAAAAAAtikAAAAAAAC3KQAAAAAAAAAAAAC3KQAAAAAAALgpAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1KQAAAAAAALUpAAAAAAAAAAAAAAAA8L8"
				],
				[
					163,
					6,
					"left_delete",
					null,
					"BgAAAEgpAAAAAAAASCkAAAAAAAD2AQAAaWYoaGFuZGxlLmdldE1vZGUoKSA9PSBUZXh0dXJlSGFuZGxlOjpNb2RlOjpUZXh0dXJlKSB7CiAgICAgICAgICAgIEV4cGxpY2l0TG9kVGV4dHVyZVNhbXBsZXIgZXhwbGljaXRMT0QgPSB7IDEwMC4wIH07CiAgICAgICAgICAgIHJldHVybiBsb2Quc2FtcGxlVGV4dHVyZShtYXRlcmlhbFRleHR1cmVzW2hhbmRsZS5nZXRUZXh0dXJlSUQoKV0sIHMsIHV2KTsKICAgICAgICB9CgogICAgICAgIHJldHVybiAoMSwgMCwgMCwgMSk7CgogICAgICAgIHJldHVybiBtYXRlcmlhbFRleHR1cmVzW2hhbmRsZS5nZXRUZXh0dXJlSUQoKV0uU2FtcGxlTGV2ZWwocywgdXYsIDQuMCk7CiAgICAgICAgCiAgICAgICAgLy9mbG9hdDIgZ3JhZFggPSBkZHhfZmluZSh1dik7CiAgICAgICAgLy9mbG9hdDIgZ3JhZFkgPSBkZHlfZmluZSh1dik7CiAgICAgICAgLy9yZXR1cm4gbWF0ZXJpYWxUZXh0dXJlc1toYW5kbGUuZ2V0VGV4dHVyZUlEKCldLlNhbXBsZUdyYWQocywgdXYsIGdyYWRYLCBncmFkWSk7CkQpAAAAAAAARCkAAAAAAAAEAAAAICAgIEApAAAAAAAAQCkAAAAAAAAEAAAAICAgID8pAAAAAAAAPykAAAAAAAABAAAACjspAAAAAAAAOykAAAAAAAAEAAAAICAgIDcpAAAAAAAANykAAAAAAAAEAAAAICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABIKQAAAAAAAD4rAAAAAAAAAAAAAAAA8L8"
				],
				[
					164,
					1,
					"left_delete",
					null,
					"AQAAADYpAAAAAAAANikAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3KQAAAAAAADcpAAAAAAAAAAAAAAAA8L8"
				],
				[
					169,
					1,
					"right_delete",
					null,
					"AQAAALsqAAAAAAAAuyoAAAAAAAArAAAAcmV0dXJuIGZsb2F0NCgxLCAxLCAwLCAxKTsKICAgICAgICAgICAgICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7KgAAAAAAAOYqAAAAAAAAAAAAAAAAYkA"
				],
				[
					5,
					1,
					"right_delete",
					null,
					"AQAAAJopAAAAAAAAmikAAAAAAAA/AAAAcmV0dXJuIGZsb2F0NCgwICxoYW5kbGUuZ2V0VGV4dHVyZUlEKCksIDAsIDEpOwogICAgICAgICAgICAgICAg",
					"AQAAAAAAAAABAAAAmikAAAAAAADZKQAAAAAAAAAAAAAAAGJA"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "\n\tretur"
					},
					"CAAAAGsqAAAAAAAAbCoAAAAAAAAAAAAAbCoAAAAAAAB4KgAAAAAAAAAAAAB4KgAAAAAAAHwqAAAAAAAAAAAAAHwqAAAAAAAAfSoAAAAAAAAAAAAAfSoAAAAAAAB+KgAAAAAAAAAAAAB+KgAAAAAAAH8qAAAAAAAAAAAAAH8qAAAAAAAAgCoAAAAAAAAAAAAAgCoAAAAAAACBKgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAayoAAAAAAABrKgAAAAAAAAAAAAAAQH1A"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAIEqAAAAAAAAgioAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgSoAAAAAAACBKgAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " floa"
					},
					"BQAAAIIqAAAAAAAAgyoAAAAAAAAAAAAAgyoAAAAAAACEKgAAAAAAAAAAAACEKgAAAAAAAIUqAAAAAAAAAAAAAIUqAAAAAAAAhioAAAAAAAAAAAAAhioAAAAAAACHKgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgioAAAAAAACCKgAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "t3"
					},
					"AgAAAIcqAAAAAAAAiCoAAAAAAAAAAAAAiCoAAAAAAACJKgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhyoAAAAAAACHKgAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"left_delete",
					null,
					"AQAAAIgqAAAAAAAAiCoAAAAAAAABAAAAMw",
					"AQAAAAAAAAABAAAAiSoAAAAAAACJKgAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "4"
					},
					"AQAAAIgqAAAAAAAAiSoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiCoAAAAAAACIKgAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIkqAAAAAAAAiyoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiSoAAAAAAACJKgAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "0,"
					},
					"AgAAAIoqAAAAAAAAiyoAAAAAAAAAAAAAiyoAAAAAAACMKgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiioAAAAAAACKKgAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " 1,"
					},
					"AwAAAIwqAAAAAAAAjSoAAAAAAAAAAAAAjSoAAAAAAACOKgAAAAAAAAAAAACOKgAAAAAAAI8qAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjCoAAAAAAACMKgAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " 0,"
					},
					"AwAAAI8qAAAAAAAAkCoAAAAAAAAAAAAAkCoAAAAAAACRKgAAAAAAAAAAAACRKgAAAAAAAJIqAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjyoAAAAAAACPKgAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " 1"
					},
					"AgAAAJIqAAAAAAAAkyoAAAAAAAAAAAAAkyoAAAAAAACUKgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkioAAAAAAACSKgAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJUqAAAAAAAAlioAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlSoAAAAAAACVKgAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAN0pAAAAAAAA3ikAAAAAAAAAAAAA3ikAAAAAAADqKQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3SkAAAAAAADdKQAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"paste",
					null,
					"AQAAAOopAAAAAAAABCoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6ikAAAAAAADqKQAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"right_delete",
					null,
					"AQAAAP4pAAAAAAAA/ikAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAA/ikAAAAAAAD+KQAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAP4pAAAAAAAA/ykAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/ikAAAAAAAD+KQAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"right_delete",
					null,
					"AQAAAPspAAAAAAAA+ykAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAA+ykAAAAAAAD7KQAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAPspAAAAAAAA/CkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+ykAAAAAAAD7KQAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAD8pAAAAAAAAQCkAAAAAAAAAAAAAQCkAAAAAAABIKQAAAAAAAAAAAABIKQAAAAAAAEkpAAAAAAAAAAAAAEkpAAAAAAAAUSkAAAAAAAAAAAAAQCkAAAAAAABAKQAAAAAAAAgAAAAgICAgICAgIA",
					"AQAAAAAAAAABAAAAPykAAAAAAAA/KQAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"paste",
					null,
					"AQAAAD8pAAAAAAAAYikAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPykAAAAAAAA/KQAAAAAAAAAAAAAAAFJA"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAAD8pAAAAAAAAQCkAAAAAAAAAAAAAQCkAAAAAAABBKQAAAAAAAAAAAABBKQAAAAAAAEIpAAAAAAAAAAAAAEIpAAAAAAAAQykAAAAAAAAAAAAAQykAAAAAAABEKQAAAAAAAAAAAABEKQAAAAAAAEUpAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPykAAAAAAAA/KQAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEUpAAAAAAAARikAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARSkAAAAAAABFKQAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"paste",
					null,
					"AQAAAEYpAAAAAAAAbSkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARikAAAAAAABGKQAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					4,
					"right_delete",
					null,
					"BAAAAG0pAAAAAAAAbSkAAAAAAAABAAAAZ20pAAAAAAAAbSkAAAAAAAABAAAAU20pAAAAAAAAbSkAAAAAAAABAAAAcm0pAAAAAAAAbSkAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAAbSkAAAAAAABtKQAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AgAAAHopAAAAAAAAeykAAAAAAAAAAAAAeykAAAAAAAB7KQAAAAAAAAgAAABnU2FtcGxlcg",
					"AQAAAAAAAAABAAAAeikAAAAAAACCKQAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": "uv"
					},
					"AwAAAH0pAAAAAAAAfikAAAAAAAAAAAAAfikAAAAAAAB+KQAAAAAAAAQAAABwb3NOfikAAAAAAAB/KQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgSkAAAAAAAB9KQAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIMpAAAAAAAAhCkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgykAAAAAAACDKQAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"left_delete",
					null,
					"AQAAAD8pAAAAAAAAPykAAAAAAABPAAAAcmV0dXJuIG1hdGVyaWFsVGV4dHVyZXNbaGFuZGxlLmdldFRleHR1cmVJRCgpXS5TYW1wbGVMZXZlbChzLCB1diwgMCk7CgogICAgICAgIA",
					"AQAAAAAAAAABAAAAPykAAAAAAACOKQAAAAAAAAAAAAAAAFJA"
				],
				[
					77,
					1,
					"right_delete",
					null,
					"AQAAAOopAAAAAAAA6ikAAAAAAAAnAAAAcmV0dXJuIGZsb2F0NCgwLCAwLCAxLCAxKTsKICAgICAgICAgICAg",
					"AQAAAAAAAAABAAAA6ikAAAAAAAARKgAAAAAAAAAAAAAAAFtA"
				],
				[
					81,
					1,
					"right_delete",
					null,
					"AQAAAHwqAAAAAAAAfCoAAAAAAAArAAAAcmV0dXJuIGZsb2F0NCgwLCAxLCAwLCAxKTsKICAgICAgICAgICAgICAgIA",
					"AQAAAAAAAAABAAAAfCoAAAAAAACnKgAAAAAAAAAAAAAAAGJA"
				],
				[
					85,
					5,
					"left_delete",
					null,
					"BQAAALspAAAAAAAAuykAAAAAAAB8AAAAY2FzZSBUZXh0dXJlSGFuZGxlOjpNb2RlOjpUZXh0dXJlOgogICAgICAgICAgICAgICAgcmV0dXJuIGxvZC5zYW1wbGVUZXh0dXJlKG1hdGVyaWFsVGV4dHVyZXNbaGFuZGxlLmdldFRleHR1cmVJRCgpXSwgcywgdXYpO7cpAAAAAAAAtykAAAAAAAAEAAAAICAgILMpAAAAAAAAsykAAAAAAAAEAAAAICAgIK8pAAAAAAAArykAAAAAAAAEAAAAICAgIK4pAAAAAAAArikAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAuykAAAAAAAA3KgAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": "\n\t"
					},
					"AwAAAFopAAAAAAAAWykAAAAAAAAAAAAAWykAAAAAAABjKQAAAAAAAAAAAABjKQAAAAAAAGcpAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWikAAAAAAABaKQAAAAAAAAAAAAAAQHRA"
				],
				[
					88,
					1,
					"paste",
					null,
					"AQAAAGcpAAAAAAAA4ykAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZykAAAAAAABnKQAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAJArAAAAAAAAkSsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkCsAAAAAAACQKwAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"right_delete",
					null,
					"AQAAAJArAAAAAAAAkCsAAAAAAAABAAAAIw",
					"AQAAAAAAAAABAAAAkCsAAAAAAACQKwAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAJArAAAAAAAAkSsAAAAAAAAAAAAAkSsAAAAAAACSKwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkCsAAAAAAACQKwAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAMMrAAAAAAAAxCsAAAAAAAAAAAAAxCsAAAAAAADFKwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwysAAAAAAADDKwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/RenderPasses/TexturesResolvePass/TexturesResolveCommon.slang",
			"settings":
			{
				"buffer_size": 5351,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAJQJAAAAAAAAlQkAAAAAAAAAAAAAlQkAAAAAAACWCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAkAAAAAAACUCQAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAK8JAAAAAAAAsAkAAAAAAAAAAAAAsAkAAAAAAACxCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArwkAAAAAAACvCQAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAMUJAAAAAAAAxgkAAAAAAAAAAAAAxgkAAAAAAADHCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxQkAAAAAAADFCQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/Utils/Image/TextureManager.cpp",
			"settings":
			{
				"buffer_size": 21122,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					9,
					1,
					"right_delete",
					null,
					"AQAAAGIlAAAAAAAAYiUAAAAAAAA4AAAAZm9yKGNvbnN0IGF1dG8mIHBQYWdlOiBwVGV4dHVyZS0+c3BhcnNlRGF0YVBhZ2VzKCkpIHsKICA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABiJQAAAAAAAJolAAAAAAAAAAAAAAAAMkA"
				],
				[
					11,
					1,
					"right_delete",
					null,
					"AQAAAGIlAAAAAAAAYiUAAAAAAAAWAAAACXBQYWdlLT5hbGxvY2F0ZSgpOwogIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABiJQAAAAAAAHglAAAAAAAAAAAAAAAAMkA"
				],
				[
					13,
					2,
					"right_delete",
					null,
					"AgAAAAYlAAAAAAAABiUAAAAAAAABAAAALwYlAAAAAAAABiUAAAAAAAABAAAALw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAGJQAAAAAAAAYlAAAAAAAAAAAAAAAAMkA"
				],
				[
					15,
					2,
					"right_delete",
					null,
					"AgAAACslAAAAAAAAKyUAAAAAAAABAAAALyslAAAAAAAAKyUAAAAAAAABAAAALw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAArJQAAAAAAACslAAAAAAAAAAAAAAAAMkA"
				],
				[
					5,
					1,
					"right_delete",
					null,
					"AQAAAG44AAAAAAAAbjgAAAAAAABPAAAACUxMT0dfV1JOIDw8ICJTcGFyc2UgdGV4dHVyZSBoYW5kbGUgbW9kZSBpczogIiA8PCB0b19zdHJpbmcoaGFuZGxlLm1Nb2RlKTsKCQkJCQ",
					"AQAAAAAAAAABAAAAbjgAAAAAAAC9OAAAAAAAAAAAAAAAAFJA"
				]
			]
		},
		{
			"file": "src/Falcor/Utils/Image/TextureManager.h",
			"settings":
			{
				"buffer_size": 10877,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "fa"
					},
					"AgAAAOEpAAAAAAAA4ikAAAAAAAAAAAAA4ikAAAAAAADjKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhKQAAAAAAAOEpAAAAAAAAAAAAAAAA8L8"
				],
				[
					4,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "false"
					},
					"AgAAAOEpAAAAAAAA4SkAAAAAAAACAAAAZmHhKQAAAAAAAOYpAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADjKQAAAAAAAOMpAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/lava_lib/reader_lsd/session.cpp",
			"settings":
			{
				"buffer_size": 40128,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "false"
					},
					"BgAAADCWAAAAAAAAMZYAAAAAAAAAAAAAMZYAAAAAAAAxlgAAAAAAAAQAAAB0cnVlMZYAAAAAAAAylgAAAAAAAAAAAAAylgAAAAAAADOWAAAAAAAAAAAAADOWAAAAAAAANJYAAAAAAAAAAAAANJYAAAAAAAA1lgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwlgAAAAAAADSWAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					5,
					"left_delete",
					null,
					"BQAAADSWAAAAAAAANJYAAAAAAAABAAAAZTOWAAAAAAAAM5YAAAAAAAABAAAAczKWAAAAAAAAMpYAAAAAAAABAAAAbDGWAAAAAAAAMZYAAAAAAAABAAAAYTCWAAAAAAAAMJYAAAAAAAABAAAAZg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA1lgAAAAAAADWWAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "true"
					},
					"BAAAADCWAAAAAAAAMZYAAAAAAAAAAAAAMZYAAAAAAAAylgAAAAAAAAAAAAAylgAAAAAAADOWAAAAAAAAAAAAADOWAAAAAAAANJYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwlgAAAAAAADCWAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "false"
					},
					"BQAAADCWAAAAAAAAMZYAAAAAAAAAAAAAMZYAAAAAAAAylgAAAAAAAAAAAAAylgAAAAAAADOWAAAAAAAAAAAAADOWAAAAAAAANJYAAAAAAAAAAAAANJYAAAAAAAA1lgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMJYAAAAAAAAwlgAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADWWAAAAAAAANpYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANZYAAAAAAAA1lgAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": " //"
					},
					"AwAAADaWAAAAAAAAN5YAAAAAAAAAAAAAN5YAAAAAAAA4lgAAAAAAAAAAAAA4lgAAAAAAADmWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANpYAAAAAAAA2lgAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					9,
					"left_delete",
					null,
					"CQAAADiWAAAAAAAAOJYAAAAAAAABAAAALzeWAAAAAAAAN5YAAAAAAAABAAAALzaWAAAAAAAANpYAAAAAAAABAAAAIDWWAAAAAAAANZYAAAAAAAABAAAAOzSWAAAAAAAANJYAAAAAAAABAAAAZTOWAAAAAAAAM5YAAAAAAAABAAAAczKWAAAAAAAAMpYAAAAAAAABAAAAbDGWAAAAAAAAMZYAAAAAAAABAAAAYTCWAAAAAAAAMJYAAAAAAAABAAAAZg",
					"AQAAAAAAAAABAAAAOZYAAAAAAAA5lgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/RenderPasses/TexturesResolvePass/TexturesResolvePass.ps.slang",
			"settings":
			{
				"buffer_size": 3630,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					2,
					"left_delete",
					null,
					"AgAAAIcNAAAAAAAAhw0AAAAAAAChBAAACiAgICAgICAgICAgIAogICAgICAgICAgICB3cml0ZVRpbGVJRCgwKTsKICAgICAgICAgICAgd3JpdGVUaWxlSUQoMSk7CiAgICAgICAgICAgIHdyaXRlVGlsZUlEKDIpOwogICAgICAgICAgICB3cml0ZVRpbGVJRCgzKTsKICAgICAgICAgICAgLyoKICAgICAgICAgICAgd3JpdGVUaWxlSUQoNCk7CiAgICAgICAgICAgIHdyaXRlVGlsZUlEKDUpOwogICAgICAgICAgICB3cml0ZVRpbGVJRCg2KTsKICAgICAgICAgICAgd3JpdGVUaWxlSUQoNyk7CgogICAgICAgICAgICB3cml0ZVRpbGVJRCg4KTsKICAgICAgICAgICAgd3JpdGVUaWxlSUQoOSk7CiAgICAgICAgICAgIHdyaXRlVGlsZUlEKDEwKTsKICAgICAgICAgICAgd3JpdGVUaWxlSUQoMTEpOwoKICAgICAgICAgICAgd3JpdGVUaWxlSUQoMTIpOwogICAgICAgICAgICB3cml0ZVRpbGVJRCgxMyk7CiAgICAgICAgICAgIHdyaXRlVGlsZUlEKDE0KTsKICAgICAgICAgICAgd3JpdGVUaWxlSUQoMTUpOwoKICAgICAgICAgICAgLy8KCiAgICAgICAgICAgIHdyaXRlVGlsZUlEKDE2KTsKICAgICAgICAgICAgd3JpdGVUaWxlSUQoMTcpOwogICAgICAgICAgICB3cml0ZVRpbGVJRCgxOCk7CiAgICAgICAgICAgIHdyaXRlVGlsZUlEKDE5KTsKCiAgICAgICAgICAgIC8vCgogICAgICAgICAgICB3cml0ZVRpbGVJRCgyMCk7CgogICAgICAgICAgICAvLwogICAgICAgICAgICAqLwogICAgICAgICAgICB3cml0ZVRpbGVJRCgyMSk7CiAgICAgICAgICAgIHdyaXRlVGlsZUlEKDIyKTsKICAgICAgICAgICAgd3JpdGVUaWxlSUQoMjMpOwogICAgICAgICAgICB3cml0ZVRpbGVJRCgyNCk7CiAgICAgICAgICAgIAogICAgICAgICAgICB3cml0ZVRpbGVJRCgyNSk7CiAgICAgICAgICAgIHdyaXRlVGlsZUlEKDI2KTsKICAgICAgICAgICAgd3JpdGVUaWxlSUQoMjcpOwogICAgICAgICAgICB3cml0ZVRpbGVJRCgyOCk7CgogICAgICAgICAgICB3cml0ZVRpbGVJRCgyOSk7CiAgICAgICAgICAgIHdyaXRlVGlsZUlEKDMwKTsKICAgICAgICAgICAgd3JpdGVUaWxlSUQoMzEpOwogICAgICAgICAgICB3cml0ZVRpbGVJRCgzMik7CiAgICAgICAgICAgIAogICAgICAgICAgICB3cml0ZVRpbGVJRCgzMyk7CiAgICAgICAgICAgIHdyaXRlVGlsZUlEKDM0KTsKICAgICAgICAgICAgd3JpdGVUaWxlSUQoMzUpOwogICAgICAgICAgICB3cml0ZVRpbGVJRCgzNik7hg0AAAAAAACGDQAAAAAAAAEAAAAK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAoEgAAAAAAAIcNAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					2,
					"right_delete",
					null,
					"AgAAAGYNAAAAAAAAZg0AAAAAAAABAAAAL2YNAAAAAAAAZg0AAAAAAAABAAAALw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABmDQAAAAAAAGYNAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					2,
					"right_delete",
					null,
					"AgAAADkNAAAAAAAAOQ0AAAAAAAABAAAALzkNAAAAAAAAOQ0AAAAAAAABAAAALw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5DQAAAAAAADkNAAAAAAAAAAAAAAAAW0A"
				]
			]
		},
		{
			"file": "src/Falcor/Scene/Material/Material.cpp",
			"settings":
			{
				"buffer_size": 12894,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					8,
					1,
					"left_delete",
					null,
					"AQAAACkiAAAAAAAAKSIAAAAAAAAsAAAAICAgICAgICBMTE9HX0VSUiA8PCAiTm8gdGV4dHVyZSBmb3Igc2xvdCEiOwo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAApIgAAAAAAAFUiAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"left_delete",
					null,
					"AQAAAJMhAAAAAAAAkyEAAAAAAABTAAAAICAgICAgICAgICAgTExPR19XUk4gPDwgIlNldHRpbmcgZnJvbSBoYW5kbGUgdGV4dHVyZSBpZCAiIDw8IHRvX3N0cmluZyhoLmdldElEKCkpOwo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACTIQAAAAAAAOYhAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"left_delete",
					null,
					"AQAAANAiAAAAAAAA0CIAAAAAAABBAAAAICAgIExMT0dfV1JOIDw8ICJDaGVja2luZyB0ZXh0dXJlIGZvciBzbG90ICIgPDwgdG9fc3RyaW5nKHNsb3QpOwo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADQIgAAAAAAABEjAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/gfx_lib/vulkan/vk-device.cpp",
			"settings":
			{
				"buffer_size": 86650,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					6,
					1,
					"insert",
					{
						"characters": "\ndev"
					},
					"BQAAAN8vAAAAAAAA4C8AAAAAAAAAAAAA4C8AAAAAAADiLwAAAAAAAAAAAADiLwAAAAAAAOMvAAAAAAAAAAAAAOMvAAAAAAAA5C8AAAAAAAAAAAAA5C8AAAAAAADlLwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfLwAAAAAAAN8vAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"insert_completion",
					{
						"completion": "deviceFeatures2",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "deviceFeatures2"
					},
					"AgAAAOIvAAAAAAAA4i8AAAAAAAADAAAAZGV24i8AAAAAAADxLwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADlLwAAAAAAAOUvAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": ".fe"
					},
					"AwAAAPEvAAAAAAAA8i8AAAAAAAAAAAAA8i8AAAAAAADzLwAAAAAAAAAAAADzLwAAAAAAAPQvAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADxLwAAAAAAAPEvAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert_completion",
					{
						"completion": "features",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "features"
					},
					"AgAAAPIvAAAAAAAA8i8AAAAAAAACAAAAZmXyLwAAAAAAAPovAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD0LwAAAAAAAPQvAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAPovAAAAAAAA+y8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6LwAAAAAAAPovAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"paste",
					null,
					"AQAAAPsvAAAAAAAACDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD7LwAAAAAAAPsvAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"paste",
					null,
					"AgAAAPsvAAAAAAAAFzAAAAAAAAAAAAAAFzAAAAAAAAAXMAAAAAAAAA0AAABzcGFyc2VCaW5kaW5n",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD7LwAAAAAAAAgwAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJcvAAAAAAAAmC8AAAAAAAAAAAAAmC8AAAAAAACaLwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACXLwAAAAAAAJcvAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"paste",
					null,
					"AQAAAJovAAAAAAAAJzAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaLwAAAAAAAJovAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"paste",
					null,
					"AgAAAOEvAAAAAAAA+i8AAAAAAAAAAAAA+i8AAAAAAAD6LwAAAAAAACEAAABwRGV2aWNlLT5tUGh5c2ljYWxEZXZpY2VGZWF0dXJlcy4",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhLwAAAAAAAAIwAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"paste",
					null,
					"AgAAAJovAAAAAAAAsy8AAAAAAAAAAAAAsy8AAAAAAACzLwAAAAAAACkAAABwRGV2aWNlLT5tUGh5c2ljYWxEZXZpY2VGZWF0dXJlcy5mZWF0dXJlcw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDLwAAAAAAAJovAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					2,
					"right_delete",
					null,
					"AgAAAOEvAAAAAAAA4S8AAAAAAAAIAAAAZmVhdHVyZXPhLwAAAAAAAOEvAAAAAAAAAQAAAC4",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhLwAAAAAAAOkvAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					9,
					"right_delete",
					null,
					"CQAAAKovAAAAAAAAqi8AAAAAAAABAAAAZqovAAAAAAAAqi8AAAAAAAABAAAAZaovAAAAAAAAqi8AAAAAAAABAAAAYaovAAAAAAAAqi8AAAAAAAABAAAAdKovAAAAAAAAqi8AAAAAAAABAAAAdaovAAAAAAAAqi8AAAAAAAABAAAAcqovAAAAAAAAqi8AAAAAAAABAAAAZaovAAAAAAAAqi8AAAAAAAABAAAAc6ovAAAAAAAAqi8AAAAAAAABAAAALg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACqLwAAAAAAAKovAAAAAAAAAAAAAACAZkA"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "features"
					},
					"CAAAAKovAAAAAAAAqy8AAAAAAAAAAAAAqy8AAAAAAACsLwAAAAAAAAAAAACsLwAAAAAAAK0vAAAAAAAAAAAAAK0vAAAAAAAAri8AAAAAAAAAAAAAri8AAAAAAACvLwAAAAAAAAAAAACvLwAAAAAAALAvAAAAAAAAAAAAALAvAAAAAAAAsS8AAAAAAAAAAAAAsS8AAAAAAACyLwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACqLwAAAAAAAKovAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					2,
					"left_delete",
					null,
					"AgAAAJgvAAAAAAAAmC8AAAAAAABtAAAACQlkZXZpY2VGZWF0dXJlczIuZmVhdHVyZXMubXVsdGlWaWV3cG9ydCA9IFZLX1RSVUU7CiAgICBkZXZpY2VGZWF0dXJlczIuZmVhdHVyZXMubXVsdGlEcmF3SW5kaXJlY3QgPSBWS19UUlVFO5cvAAAAAAAAly8AAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAFMAAAAAAAAJgvAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAN8vAAAAAAAA4C8AAAAAAAAAAAAA4C8AAAAAAADiLwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfLwAAAAAAAN8vAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					2,
					"left_delete",
					null,
					"AgAAAOEvAAAAAAAA4S8AAAAAAAABAAAACeAvAAAAAAAA4C8AAAAAAAABAAAACQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADiLwAAAAAAAOIvAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"paste",
					null,
					"AQAAAOAvAAAAAAAATTAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADgLwAAAAAAAOAvAAAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJUvAAAAAAAAli8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACVLwAAAAAAAJUvAAAAAAAAAAAAAAAA8L8"
				],
				[
					54,
					1,
					"paste",
					null,
					"AQAAAJYvAAAAAAAAwi8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWLwAAAAAAAJYvAAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMIvAAAAAAAAwy8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCLwAAAAAAAMIvAAAAAAAAAAAAAAAA8L8"
				],
				[
					61,
					1,
					"left_delete",
					null,
					"AQAAAMYvAAAAAAAAxi8AAAAAAABIAAAACQlkZXZpY2VGZWF0dXJlczIuc1R5cGUgPSBWS19TVFJVQ1RVUkVfVFlQRV9QSFlTSUNBTF9ERVZJQ0VfRkVBVFVSRVNfMjsK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADGLwAAAAAAAA4wAAAAAAAAAAAAAAAA8L8"
				],
				[
					64,
					2,
					"left_delete",
					null,
					"AgAAABXQAAAAAAAAFdAAAAAAAAAlAAAACQkvL3BUZXh0dXJlLT51cGRhdGVTcGFyc2VCaW5kSW5mbygpOxTQAAAAAAAAFNAAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA60AAAAAAAABXQAAAAAAAAAAAAAAAA8L8"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "/*"
					},
					"AgAAAH7QAAAAAAAAf9AAAAAAAAAAAAAAf9AAAAAAAACA0AAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB+0AAAAAAAAH7QAAAAAAAAAAAAAAAogUA"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANjXAAAAAAAA2dcAAAAAAAAAAAAA2dcAAAAAAADa1wAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADY1wAAAAAAANjXAAAAAAAAAAAAAAAA8L8"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "\t*/"
					},
					"AwAAANjXAAAAAAAA2dcAAAAAAAAAAAAA2dcAAAAAAADa1wAAAAAAAAAAAADa1wAAAAAAANvXAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADY1wAAAAAAANjXAAAAAAAAAAAAAAAAMkA"
				],
				[
					77,
					2,
					"right_delete",
					null,
					"AgAAANzWAAAAAAAA3NYAAAAAAAABAAAACdzWAAAAAAAA3NYAAAAAAAABAAAAbQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADc1gAAAAAAANzWAAAAAAAAAAAAAAAA8L8"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAANzWAAAAAAAA3dYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADc1gAAAAAAANzWAAAAAAAAAAAAAAAA8L8"
				],
				[
					88,
					1,
					"left_delete",
					null,
					"AQAAAHakAAAAAAAAdqQAAAAAAAAbAAAACQlhc3NlcnQocFRleHR1cmVNYW5hZ2VyKTsK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB2pAAAAAAAAJGkAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"right_delete",
					null,
					"AQAAALKcAAAAAAAAspwAAAAAAAAZAAAAYXNzZXJ0KHBUZXh0dXJlLmdldCgpKTsKCQ",
					"AQAAAAAAAAABAAAAspwAAAAAAADLnAAAAAAAAAAAAAAAADJA"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "pText"
					},
					"BQAAAFOkAAAAAAAAVKQAAAAAAAAAAAAAVKQAAAAAAABVpAAAAAAAAAAAAABVpAAAAAAAAFakAAAAAAAAAAAAAFakAAAAAAAAV6QAAAAAAAAAAAAAV6QAAAAAAABYpAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAU6QAAAAAAABTpAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "ure.get()"
					},
					"CQAAAFikAAAAAAAAWaQAAAAAAAAAAAAAWaQAAAAAAABapAAAAAAAAAAAAABapAAAAAAAAFukAAAAAAAAAAAAAFukAAAAAAAAXKQAAAAAAAAAAAAAXKQAAAAAAABdpAAAAAAAAAAAAABdpAAAAAAAAF6kAAAAAAAAAAAAAF6kAAAAAAAAX6QAAAAAAAAAAAAAX6QAAAAAAABgpAAAAAAAAAAAAABgpAAAAAAAAGGkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWKQAAAAAAABYpAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " &&"
					},
					"AwAAAGGkAAAAAAAAYqQAAAAAAAAAAAAAYqQAAAAAAABjpAAAAAAAAAAAAABjpAAAAAAAAGSkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYaQAAAAAAABhpAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGSkAAAAAAAAZaQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZKQAAAAAAABkpAAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " spars"
					},
					"BgAAANupAAAAAAAA3KkAAAAAAAAAAAAA3KkAAAAAAADdqQAAAAAAAAAAAADdqQAAAAAAAN6pAAAAAAAAAAAAAN6pAAAAAAAA36kAAAAAAAAAAAAA36kAAAAAAADgqQAAAAAAAAAAAADgqQAAAAAAAOGpAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA26kAAAAAAADbqQAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAOGpAAAAAAAA4qkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4akAAAAAAADhqQAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": " texu"
					},
					"BQAAAOKpAAAAAAAA46kAAAAAAAAAAAAA46kAAAAAAADkqQAAAAAAAAAAAADkqQAAAAAAAOWpAAAAAAAAAAAAAOWpAAAAAAAA5qkAAAAAAAAAAAAA5qkAAAAAAADnqQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4qkAAAAAAADiqQAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"left_delete",
					null,
					"AQAAAOapAAAAAAAA5qkAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAA56kAAAAAAADnqQAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "ture"
					},
					"BAAAAOapAAAAAAAA56kAAAAAAAAAAAAA56kAAAAAAADoqQAAAAAAAAAAAADoqQAAAAAAAOmpAAAAAAAAAAAAAOmpAAAAAAAA6qkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5qkAAAAAAADmqQAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": " e"
					},
					"AgAAAOqpAAAAAAAA66kAAAAAAAAAAAAA66kAAAAAAADsqQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6qkAAAAAAADqqQAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"left_delete",
					null,
					"AQAAAOupAAAAAAAA66kAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAA7KkAAAAAAADsqQAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "sectio"
					},
					"BgAAAOupAAAAAAAA7KkAAAAAAAAAAAAA7KkAAAAAAADtqQAAAAAAAAAAAADtqQAAAAAAAO6pAAAAAAAAAAAAAO6pAAAAAAAA76kAAAAAAAAAAAAA76kAAAAAAADwqQAAAAAAAAAAAADwqQAAAAAAAPGpAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA66kAAAAAAADrqQAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPGpAAAAAAAA8qkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8akAAAAAAADxqQAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"left_delete",
					null,
					"AQAAAPGpAAAAAAAA8akAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA8qkAAAAAAADyqQAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAPGpAAAAAAAA8qkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8akAAAAAAADxqQAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPKpAAAAAAAA86kAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8qkAAAAAAADyqQAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"paste",
					null,
					"AQAAAPanAAAAAAAABKgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9qcAAAAAAAD2pwAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": " &&"
					},
					"AwAAAASoAAAAAAAABagAAAAAAAAAAAAABagAAAAAAAAGqAAAAAAAAAAAAAAGqAAAAAAAAAeoAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABKgAAAAAAAAEqAAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAeoAAAAAAAACKgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAB6gAAAAAAAAHqAAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"right_delete",
					null,
					"AQAAAP6nAAAAAAAA/qcAAAAAAAAGAAAALmdldCgp",
					"AQAAAAAAAAABAAAA/qcAAAAAAAAEqAAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"paste",
					null,
					"AQAAABeqAAAAAAAAI6oAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAF6oAAAAAAAAXqgAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"right_delete",
					null,
					"AQAAAFukAAAAAAAAW6QAAAAAAAAGAAAALmdldCgp",
					"AQAAAAAAAAABAAAAW6QAAAAAAABhpAAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"right_delete",
					null,
					"AQAAANX4AAAAAAAA1fgAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAA1fgAAAAAAADV+AAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					2,
					"right_delete",
					null,
					"AgAAAPLzAAAAAAAA8vMAAAAAAAABAAAAL/LzAAAAAAAA8vMAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAA8vMAAAAAAADy8wAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "\n#id"
					},
					"BAAAAE+9AAAAAAAAUL0AAAAAAAAAAAAAUL0AAAAAAABRvQAAAAAAAAAAAABRvQAAAAAAAFK9AAAAAAAAAAAAAFK9AAAAAAAAU70AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAT70AAAAAAABPvQAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"left_delete",
					null,
					"AQAAAFK9AAAAAAAAUr0AAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAAU70AAAAAAABTvQAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": "fe"
					},
					"AgAAAFK9AAAAAAAAU70AAAAAAAAAAAAAU70AAAAAAABUvQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUr0AAAAAAABSvQAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"insert_completion",
					{
						"completion": "ifdef",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "ifdef"
					},
					"AgAAAFG9AAAAAAAAUb0AAAAAAAADAAAAaWZlUb0AAAAAAABWvQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVL0AAAAAAABUvQAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": " _"
					},
					"AgAAAFa9AAAAAAAAV70AAAAAAAAAAAAAV70AAAAAAABYvQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVr0AAAAAAABWvQAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": "D"
					},
					"AQAAAFi9AAAAAAAAWb0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWL0AAAAAAABYvQAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"insert_completion",
					{
						"completion": "_DEBUG",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "_DEBUG"
					},
					"AgAAAFe9AAAAAAAAV70AAAAAAAACAAAAX0RXvQAAAAAAAF29AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWb0AAAAAAABZvQAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAOe9AAAAAAAA6L0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA570AAAAAAADnvQAAAAAAAAAAAAAAQF1A"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "#e"
					},
					"AgAAAOe9AAAAAAAA6L0AAAAAAAAAAAAA6L0AAAAAAADpvQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA570AAAAAAADnvQAAAAAAAAAAAAAAAAAA"
				],
				[
					104,
					1,
					"insert_completion",
					{
						"completion": "endif",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "endif"
					},
					"AgAAAOi9AAAAAAAA6L0AAAAAAAABAAAAZei9AAAAAAAA7b0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6b0AAAAAAADpvQAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAIe6AAAAAAAAiLoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAh7oAAAAAAACHugAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"paste",
					null,
					"AQAAAIi6AAAAAAAAlboAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiLoAAAAAAACIugAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAOW6AAAAAAAA5roAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5boAAAAAAADlugAAAAAAAAAAAAAAQF1A"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": "#e"
					},
					"AgAAAOW6AAAAAAAA5roAAAAAAAAAAAAA5roAAAAAAADnugAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5boAAAAAAADlugAAAAAAAAAAAAAAAAAA"
				],
				[
					116,
					1,
					"insert_completion",
					{
						"completion": "endif",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "endif"
					},
					"AgAAAOa6AAAAAAAA5roAAAAAAAABAAAAZea6AAAAAAAA67oAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA57oAAAAAAADnugAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACeqAAAAAAAAKKoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJ6oAAAAAAAAnqgAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AgAAACeqAAAAAAAAKKoAAAAAAAAAAAAAKKoAAAAAAAAoqgAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAAKKoAAAAAAAAnqgAAAAAAAAAAAAAAAAAA"
				],
				[
					121,
					1,
					"left_delete",
					null,
					"AQAAACeqAAAAAAAAJ6oAAAAAAAABAAAAIw",
					"AQAAAAAAAAABAAAAKKoAAAAAAAAoqgAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACeqAAAAAAAAKKoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJ6oAAAAAAAAnqgAAAAAAAAAAAAAAAPC/"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "#ifde"
					},
					"BQAAACeqAAAAAAAAKKoAAAAAAAAAAAAAKKoAAAAAAAApqgAAAAAAAAAAAAApqgAAAAAAACqqAAAAAAAAAAAAACqqAAAAAAAAK6oAAAAAAAAAAAAAK6oAAAAAAAAsqgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJ6oAAAAAAAAnqgAAAAAAAAAAAAAAAAAA"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAACyqAAAAAAAALaoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALKoAAAAAAAAsqgAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": " _D"
					},
					"AwAAAC2qAAAAAAAALqoAAAAAAAAAAAAALqoAAAAAAAAvqgAAAAAAAAAAAAAvqgAAAAAAADCqAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALaoAAAAAAAAtqgAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"insert_completion",
					{
						"completion": "_DEBUG",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "_DEBUG"
					},
					"AgAAAC6qAAAAAAAALqoAAAAAAAACAAAAX0QuqgAAAAAAADSqAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMKoAAAAAAAAwqgAAAAAAAAAAAAAAAPC/"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKCqAAAAAAAAoaoAAAAAAAAAAAAAoaoAAAAAAACjqgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoKoAAAAAAACgqgAAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKCqAAAAAAAAoaoAAAAAAAAAAAAAoaoAAAAAAACjqgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoKoAAAAAAACgqgAAAAAAAAAAAAAAAEJA"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": "#ew"
					},
					"BAAAAJ6qAAAAAAAAn6oAAAAAAAAAAAAAoqoAAAAAAACiqgAAAAAAAAIAAAAJCZ+qAAAAAAAAoKoAAAAAAAAAAAAAoKoAAAAAAAChqgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnqoAAAAAAACeqgAAAAAAAAAAAAAAAPC/"
				],
				[
					138,
					1,
					"left_delete",
					null,
					"AQAAAKCqAAAAAAAAoKoAAAAAAAABAAAAdw",
					"AQAAAAAAAAABAAAAoaoAAAAAAAChqgAAAAAAAAAAAAAAAPC/"
				],
				[
					139,
					1,
					"insert_completion",
					{
						"completion": "endif",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "endif"
					},
					"AgAAAJ+qAAAAAAAAn6oAAAAAAAABAAAAZZ+qAAAAAAAApKoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoKoAAAAAAACgqgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/RenderPasses/TexturesResolvePass/TexturesResolvePass.cpp",
			"settings":
			{
				"buffer_size": 13172,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					8,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEQaAAAAAAAARRoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARBoAAAAAAABEGgAAAAAAAAAAAAAAAAAA"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "#if"
					},
					"AwAAAEQaAAAAAAAARRoAAAAAAAAAAAAARRoAAAAAAABGGgAAAAAAAAAAAABGGgAAAAAAAEcaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARBoAAAAAAABEGgAAAAAAAAAAAAAAAAAA"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "def"
					},
					"AwAAAEcaAAAAAAAASBoAAAAAAAAAAAAASBoAAAAAAABJGgAAAAAAAAAAAABJGgAAAAAAAEoaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARxoAAAAAAABHGgAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " _"
					},
					"AgAAAEoaAAAAAAAASxoAAAAAAAAAAAAASxoAAAAAAABMGgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAShoAAAAAAABKGgAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert_completion",
					{
						"completion": "_DEBUG",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "_DEBUG"
					},
					"AgAAAEsaAAAAAAAASxoAAAAAAAABAAAAX0saAAAAAAAAURoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATBoAAAAAAABMGgAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIMbAAAAAAAAhBsAAAAAAAAAAAAAhBsAAAAAAACIGwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgxsAAAAAAACDGwAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					4,
					"left_delete",
					null,
					"BAAAAIIbAAAAAAAAghsAAAAAAAABAAAACYEbAAAAAAAAgRsAAAAAAAABAAAACYAbAAAAAAAAgBsAAAAAAAABAAAACX8bAAAAAAAAfxsAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAAgxsAAAAAAACDGwAAAAAAAAAAAAAAAFJA"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "#en"
					},
					"AwAAAH8bAAAAAAAAgBsAAAAAAAAAAAAAgBsAAAAAAACBGwAAAAAAAAAAAACBGwAAAAAAAIIbAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfxsAAAAAAAB/GwAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert_completion",
					{
						"completion": "endif",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "endif"
					},
					"AgAAAIAbAAAAAAAAgBsAAAAAAAACAAAAZW6AGwAAAAAAAIUbAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAghsAAAAAAACCGwAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGoeAAAAAAAAax4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAah4AAAAAAABqHgAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"paste",
					null,
					"AQAAAGseAAAAAAAAeB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAax4AAAAAAABrHgAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAOMeAAAAAAAA5B4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4x4AAAAAAADjHgAAAAAAAAAAAAAAQF1A"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "#e"
					},
					"AgAAAOMeAAAAAAAA5B4AAAAAAAAAAAAA5B4AAAAAAADlHgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4x4AAAAAAADjHgAAAAAAAAAAAAAAAAAA"
				],
				[
					39,
					1,
					"insert_completion",
					{
						"completion": "endif",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "endif"
					},
					"AgAAAOQeAAAAAAAA5B4AAAAAAAABAAAAZeQeAAAAAAAA6R4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5R4AAAAAAADlHgAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAALchAAAAAAAAuCEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtyEAAAAAAAC3IQAAAAAAAAAAAAAAAEtA"
				],
				[
					42,
					1,
					"paste",
					null,
					"AQAAALghAAAAAAAAxSEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuCEAAAAAAAC4IQAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAwiAAAAAAAADSIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADCIAAAAAAAAMIgAAAAAAAAAAAAAAQF1A"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "#e"
					},
					"AgAAAAwiAAAAAAAADSIAAAAAAAAAAAAADSIAAAAAAAAOIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADCIAAAAAAAAMIgAAAAAAAAAAAAAAAAAA"
				],
				[
					47,
					1,
					"insert_completion",
					{
						"completion": "endif",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "endif"
					},
					"AgAAAA0iAAAAAAAADSIAAAAAAAABAAAAZQ0iAAAAAAAAEiIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADiIAAAAAAAAOIgAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					3,
					"left_delete",
					null,
					"AwAAAFIjAAAAAAAAUiMAAAAAAADPAAAACS8vIGRldiBwcmludCBwYWdlcwoJLy9zdGQ6OmNvdXQgPDwgIlBhZ2UgaWRzOiBcbiI7CgkvL2ZvciggdWludDMyX3QgaSA9IDA7IGkgPCB0b3RhbFBhZ2VzVG9VcGRhdGVDb3VudDsgaSsrKSB7CgkvLyAgICBzdGQ6OmNvdXQgPDwgc3RhdGljX2Nhc3Q8aW50MTZfdD4ocE91dFBhZ2VzRGF0YVtpXSkgPDwgIiAiOwoJLy99CgkvL3N0ZDo6Y291dCA8PCAiXG5cbiI7USMAAAAAAABRIwAAAAAAAAEAAAAKUCMAAAAAAABQIwAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAAISQAAAAAAABSIwAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					3,
					"left_delete",
					null,
					"AwAAAOUtAAAAAAAA5S0AAAAAAABEAQAACWZvcih1aW50MzJfdCBtaXBMZXZlbCA9IDA7IG1pcExldmVsIDwgbXBNaXBDYWxpYnJhdGlvblRleHR1cmUtPmdldE1pcENvdW50KCk7IG1pcExldmVsKyspIHsKCQltcE1pcENhbGlicmF0aW9uVGV4dHVyZS0+Y2FwdHVyZVRvRmlsZUJsb2NraW5nKAoJCQltaXBMZXZlbCwgCgkJCTAsIC8vIGFycmF5U2xpY2UsIAoJCQkiL2hvbWUvbWF4L0Rlc2t0b3AvbWlwX2NhbGlicmF0aW9uXyIgKyBzdGQ6OnRvX3N0cmluZyhtaXBMZXZlbCkgKyAiXy5wbmciLCAKCQkJQml0bWFwOjpGaWxlRm9ybWF0OjpQbmdGaWxlLCAKCQkJQml0bWFwOjpFeHBvcnRGbGFnczo6Tm9uZSk7Cgl95C0AAAAAAADkLQAAAAAAAAEAAAAK4y0AAAAAAADjLQAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAAKS8AAAAAAADlLQAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					3,
					"left_delete",
					null,
					"AwAAAIowAAAAAAAAijAAAAAAAAABAAAACYkwAAAAAAAAiTAAAAAAAAABAAAACYgwAAAAAAAAiDAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAizAAAAAAAACLMAAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"left_delete",
					null,
					"AQAAAH8bAAAAAAAAfxsAAAAAAAAGAAAAI2VuZGlm",
					"AQAAAAAAAAABAAAAhRsAAAAAAAB/GwAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"paste",
					null,
					"AQAAAAkcAAAAAAAADxwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACRwAAAAAAAAJHAAAAAAAAAAAAAAAAAAA"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAALolAAAAAAAAuyUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuiUAAAAAAAC6JQAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"paste",
					null,
					"AQAAALslAAAAAAAAyCUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuyUAAAAAAAC7JQAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEUmAAAAAAAARiYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARSYAAAAAAABFJgAAAAAAAAAAAAAAQF1A"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": "#e"
					},
					"AgAAAEUmAAAAAAAARiYAAAAAAAAAAAAARiYAAAAAAABHJgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARSYAAAAAAABFJgAAAAAAAAAAAAAAAAAA"
				],
				[
					82,
					1,
					"insert_completion",
					{
						"completion": "endif",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "endif"
					},
					"AgAAAEYmAAAAAAAARiYAAAAAAAABAAAAZUYmAAAAAAAASyYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARyYAAAAAAABHJgAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": " &&"
					},
					"AwAAAB8TAAAAAAAAIBMAAAAAAAAAAAAAIBMAAAAAAAAhEwAAAAAAAAAAAAAhEwAAAAAAACITAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHxMAAAAAAAAfEwAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": " pT"
					},
					"AwAAACITAAAAAAAAIxMAAAAAAAAAAAAAIxMAAAAAAAAkEwAAAAAAAAAAAAAkEwAAAAAAACUTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIhMAAAAAAAAiEwAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert_completion",
					{
						"completion": "pTexture",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "pTexture"
					},
					"AgAAACMTAAAAAAAAIxMAAAAAAAACAAAAcFQjEwAAAAAAACsTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJRMAAAAAAAAlEwAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": "->"
					},
					"AgAAACsTAAAAAAAALBMAAAAAAAAAAAAALBMAAAAAAAAtEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKxMAAAAAAAArEwAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "isU"
					},
					"AwAAAC0TAAAAAAAALhMAAAAAAAAAAAAALhMAAAAAAAAvEwAAAAAAAAAAAAAvEwAAAAAAADATAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALRMAAAAAAAAtEwAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"insert_completion",
					{
						"completion": "isUDIMTexture",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "isUDIMTexture"
					},
					"AgAAAC0TAAAAAAAALRMAAAAAAAADAAAAaXNVLRMAAAAAAAA6EwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMBMAAAAAAAAwEwAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": "!"
					},
					"AQAAACMTAAAAAAAAJBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIxMAAAAAAAAjEwAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADsTAAAAAAAAPRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOxMAAAAAAAA7EwAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BQAAAEATAAAAAAAAQRMAAAAAAAAAAAAAQRMAAAAAAABEEwAAAAAAAAAAAABEEwAAAAAAAEUTAAAAAAAAAAAAAEUTAAAAAAAARhMAAAAAAAAAAAAARhMAAAAAAABHEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQBMAAAAAAABAEwAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEcTAAAAAAAASRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARxMAAAAAAABHEwAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAAEgTAAAAAAAASRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASBMAAAAAAABIEwAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert_completion",
					{
						"completion": "pTexture",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "pTexture"
					},
					"AgAAAEgTAAAAAAAASBMAAAAAAAABAAAAcEgTAAAAAAAAUBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASRMAAAAAAABJEwAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": "->is"
					},
					"BAAAAFATAAAAAAAAURMAAAAAAAAAAAAAURMAAAAAAABSEwAAAAAAAAAAAABSEwAAAAAAAFMTAAAAAAAAAAAAAFMTAAAAAAAAVBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUBMAAAAAAABQEwAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert_completion",
					{
						"completion": "isUDIMTexture",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "isUDIMTexture"
					},
					"AgAAAFITAAAAAAAAUhMAAAAAAAACAAAAaXNSEwAAAAAAAF8TAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVBMAAAAAAABUEwAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAF8TAAAAAAAAYRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXxMAAAAAAABfEwAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGITAAAAAAAAYxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYhMAAAAAAABiEwAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAGMTAAAAAAAAZRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYxMAAAAAAABjEwAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAGQTAAAAAAAAZRMAAAAAAAAAAAAAZRMAAAAAAABpEwAAAAAAAAAAAABpEwAAAAAAAGoTAAAAAAAAAAAAAGoTAAAAAAAAbhMAAAAAAAAAAAAAZRMAAAAAAABlEwAAAAAAAAQAAAAJCQkJZRMAAAAAAABqEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZBMAAAAAAABkEwAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": " else"
					},
					"BgAAAHATAAAAAAAAcRMAAAAAAAAAAAAAZRMAAAAAAABlEwAAAAAAAAUAAAAJCQkJCWwTAAAAAAAAbRMAAAAAAAAAAAAAbRMAAAAAAABuEwAAAAAAAAAAAABuEwAAAAAAAG8TAAAAAAAAAAAAAG8TAAAAAAAAcBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcBMAAAAAAABwEwAAAAAAAAAAAAAAgFZA"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHATAAAAAAAAcRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcBMAAAAAAABwEwAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAHETAAAAAAAAcxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcRMAAAAAAABxEwAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"right_delete",
					null,
					"AQAAAHITAAAAAAAAchMAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAchMAAAAAAAByEwAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKYTAAAAAAAApxMAAAAAAAAAAAAApxMAAAAAAACqEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAphMAAAAAAACmEwAAAAAAAAAAAAAAAPC/"
				],
				[
					119,
					1,
					"insert",
					{
						"characters": "\t}"
					},
					"AgAAAKYTAAAAAAAApxMAAAAAAAAAAAAApxMAAAAAAACoEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAphMAAAAAAACmEwAAAAAAAAAAAAAAAEtA"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAHcTAAAAAAAAeBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdxMAAAAAAAB3EwAAAAAAAAAAAAAAAFJA"
				],
				[
					128,
					1,
					"reindent",
					null,
					"AQAAAGUTAAAAAAAAahMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZRMAAAAAAABlEwAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"paste",
					null,
					"AQAAAGoTAAAAAAAAlRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAahMAAAAAAABqEwAAAAAAAAAAAAAAAPC/"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": "\nfor"
					},
					"BgAAAGQTAAAAAAAAZRMAAAAAAAAAAAAAZRMAAAAAAABpEwAAAAAAAAAAAABpEwAAAAAAAGoTAAAAAAAAAAAAAGoTAAAAAAAAaxMAAAAAAAAAAAAAaxMAAAAAAABsEwAAAAAAAAAAAABsEwAAAAAAAG0TAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZBMAAAAAAABkEwAAAAAAAAAAAAAA0H1A"
				],
				[
					133,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAG0TAAAAAAAAbxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbRMAAAAAAABtEwAAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"insert",
					{
						"characters": "cons"
					},
					"BAAAAG4TAAAAAAAAbxMAAAAAAAAAAAAAbxMAAAAAAABwEwAAAAAAAAAAAABwEwAAAAAAAHETAAAAAAAAAAAAAHETAAAAAAAAchMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbhMAAAAAAABuEwAAAAAAAAAAAAAAAPC/"
				],
				[
					135,
					1,
					"insert_completion",
					{
						"completion": "const",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "const"
					},
					"AgAAAG4TAAAAAAAAbhMAAAAAAAAEAAAAY29uc24TAAAAAAAAcxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAchMAAAAAAAByEwAAAAAAAAAAAAAAAPC/"
				],
				[
					136,
					1,
					"insert",
					{
						"characters": " auto&"
					},
					"BgAAAHMTAAAAAAAAdBMAAAAAAAAAAAAAdBMAAAAAAAB1EwAAAAAAAAAAAAB1EwAAAAAAAHYTAAAAAAAAAAAAAHYTAAAAAAAAdxMAAAAAAAAAAAAAdxMAAAAAAAB4EwAAAAAAAAAAAAB4EwAAAAAAAHkTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcxMAAAAAAABzEwAAAAAAAAAAAAAAAPC/"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": " tile"
					},
					"BQAAAHkTAAAAAAAAehMAAAAAAAAAAAAAehMAAAAAAAB7EwAAAAAAAAAAAAB7EwAAAAAAAHwTAAAAAAAAAAAAAHwTAAAAAAAAfRMAAAAAAAAAAAAAfRMAAAAAAAB+EwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeRMAAAAAAAB5EwAAAAAAAAAAAAAAAPC/"
				],
				[
					138,
					1,
					"insert_completion",
					{
						"completion": "tileInfo",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "tileInfo"
					},
					"AgAAAHoTAAAAAAAAehMAAAAAAAAEAAAAdGlsZXoTAAAAAAAAghMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfhMAAAAAAAB+EwAAAAAAAAAAAAAAAPC/"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAIITAAAAAAAAgxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAghMAAAAAAACCEwAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIMTAAAAAAAAhBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgxMAAAAAAACDEwAAAAAAAAAAAAAAAPC/"
				],
				[
					141,
					1,
					"paste",
					null,
					"AQAAAIQTAAAAAAAA3BMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhBMAAAAAAACEEwAAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					36,
					"left_delete",
					null,
					"JAAAAKgTAAAAAAAAqBMAAAAAAAABAAAAIKcTAAAAAAAApxMAAAAAAAABAAAAJqYTAAAAAAAAphMAAAAAAAABAAAAPqUTAAAAAAAApRMAAAAAAAABAAAAMKQTAAAAAAAApBMAAAAAAAABAAAAMKMTAAAAAAAAoxMAAAAAAAABAAAAMaITAAAAAAAAohMAAAAAAAABAAAAIKETAAAAAAAAoRMAAAAAAAABAAAALKATAAAAAAAAoBMAAAAAAAABAAAAb58TAAAAAAAAnxMAAAAAAAABAAAAZp4TAAAAAAAAnhMAAAAAAAABAAAAbp0TAAAAAAAAnRMAAAAAAAABAAAASZwTAAAAAAAAnBMAAAAAAAABAAAAZZsTAAAAAAAAmxMAAAAAAAABAAAAbJoTAAAAAAAAmhMAAAAAAAABAAAAaZkTAAAAAAAAmRMAAAAAAAABAAAAVJgTAAAAAAAAmBMAAAAAAAABAAAATZcTAAAAAAAAlxMAAAAAAAABAAAASZYTAAAAAAAAlhMAAAAAAAABAAAARJUTAAAAAAAAlRMAAAAAAAABAAAAVZQTAAAAAAAAlBMAAAAAAAABAAAAPJMTAAAAAAAAkxMAAAAAAAABAAAAeZITAAAAAAAAkhMAAAAAAAABAAAAYZETAAAAAAAAkRMAAAAAAAABAAAAcpATAAAAAAAAkBMAAAAAAAABAAAAco8TAAAAAAAAjxMAAAAAAAABAAAAYY4TAAAAAAAAjhMAAAAAAAABAAAAOo0TAAAAAAAAjRMAAAAAAAABAAAAOowTAAAAAAAAjBMAAAAAAAABAAAAZIsTAAAAAAAAixMAAAAAAAABAAAAdIoTAAAAAAAAihMAAAAAAAABAAAAc4kTAAAAAAAAiRMAAAAAAAABAAAAIIgTAAAAAAAAiBMAAAAAAAABAAAAdIcTAAAAAAAAhxMAAAAAAAABAAAAc4YTAAAAAAAAhhMAAAAAAAABAAAAboUTAAAAAAAAhRMAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAqRMAAAAAAACpEwAAAAAAAAAAAAAAAPC/"
				],
				[
					146,
					1,
					"left_delete",
					null,
					"AQAAAIQTAAAAAAAAhBMAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAAhRMAAAAAAACFEwAAAAAAAAAAAAAAAPC/"
				],
				[
					147,
					1,
					"insert",
					{
						"characters": "pT"
					},
					"AgAAAIQTAAAAAAAAhRMAAAAAAAAAAAAAhRMAAAAAAACGEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhBMAAAAAAACEEwAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIYTAAAAAAAAhxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhhMAAAAAAACGEwAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAIYTAAAAAAAAhxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhhMAAAAAAACGEwAAAAAAAAAAAAAAAPC/"
				],
				[
					152,
					1,
					"insert_completion",
					{
						"completion": "pTexture",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "pTexture"
					},
					"AgAAAIQTAAAAAAAAhBMAAAAAAAADAAAAcFRlhBMAAAAAAACMEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhxMAAAAAAACHEwAAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": "->"
					},
					"AgAAAIwTAAAAAAAAjRMAAAAAAAAAAAAAjRMAAAAAAACOEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjBMAAAAAAACMEwAAAAAAAAAAAAAAAPC/"
				],
				[
					154,
					1,
					"right_delete",
					null,
					"AQAAAI4TAAAAAAAAjhMAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAjhMAAAAAAACOEwAAAAAAAAAAAAAAAPC/"
				],
				[
					156,
					30,
					"right_delete",
					null,
					"HgAAAKATAAAAAAAAoBMAAAAAAAABAAAAIKATAAAAAAAAoBMAAAAAAAABAAAAY6ATAAAAAAAAoBMAAAAAAAABAAAAb6ATAAAAAAAAoBMAAAAAAAABAAAAbqATAAAAAAAAoBMAAAAAAAABAAAAc6ATAAAAAAAAoBMAAAAAAAABAAAAdKATAAAAAAAAoBMAAAAAAAABAAAAIKATAAAAAAAAoBMAAAAAAAABAAAAe6ATAAAAAAAAoBMAAAAAAAABAAAAIKATAAAAAAAAoBMAAAAAAAABAAAAcqATAAAAAAAAoBMAAAAAAAABAAAAZaATAAAAAAAAoBMAAAAAAAABAAAAdKATAAAAAAAAoBMAAAAAAAABAAAAdaATAAAAAAAAoBMAAAAAAAABAAAAcqATAAAAAAAAoBMAAAAAAAABAAAAbqATAAAAAAAAoBMAAAAAAAABAAAAIKATAAAAAAAAoBMAAAAAAAABAAAAbaATAAAAAAAAoBMAAAAAAAABAAAAVaATAAAAAAAAoBMAAAAAAAABAAAARKATAAAAAAAAoBMAAAAAAAABAAAASaATAAAAAAAAoBMAAAAAAAABAAAATaATAAAAAAAAoBMAAAAAAAABAAAAVKATAAAAAAAAoBMAAAAAAAABAAAAaaATAAAAAAAAoBMAAAAAAAABAAAAbKATAAAAAAAAoBMAAAAAAAABAAAAZaATAAAAAAAAoBMAAAAAAAABAAAASaATAAAAAAAAoBMAAAAAAAABAAAAbqATAAAAAAAAoBMAAAAAAAABAAAAZqATAAAAAAAAoBMAAAAAAAABAAAAb6ATAAAAAAAAoBMAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAoBMAAAAAAACgEwAAAAAAAAAAAAAAAPC/"
				],
				[
					157,
					3,
					"right_delete",
					null,
					"AwAAAKATAAAAAAAAoBMAAAAAAAABAAAAO6ATAAAAAAAAoBMAAAAAAAABAAAAIKATAAAAAAAAoBMAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAoBMAAAAAAACgEwAAAAAAAAAAAAAAAPC/"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKETAAAAAAAAohMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoRMAAAAAAAChEwAAAAAAAAAAAAAAAPC/"
				],
				[
					160,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAKITAAAAAAAApBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAohMAAAAAAACiEwAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					1,
					"right_delete",
					null,
					"AQAAAKMTAAAAAAAAoxMAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAoxMAAAAAAACjEwAAAAAAAAAAAAAAAPC/"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BQAAANQTAAAAAAAA1RMAAAAAAAAAAAAA1RMAAAAAAADaEwAAAAAAAAAAAADaEwAAAAAAANsTAAAAAAAAAAAAANUTAAAAAAAA1RMAAAAAAAAFAAAACQkJCQnVEwAAAAAAANkTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1BMAAAAAAADUEwAAAAAAAAAAAAAA2IJA"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAANkTAAAAAAAA2hMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2RMAAAAAAADZEwAAAAAAAAAAAAAAAPC/"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAKkTAAAAAAAAqhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqRMAAAAAAACpEwAAAAAAAAAAAAAAgFZA"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BQAAAKMTAAAAAAAApBMAAAAAAAAAAAAApBMAAAAAAACpEwAAAAAAAAAAAACpEwAAAAAAAKoTAAAAAAAAAAAAAKoTAAAAAAAAqxMAAAAAAAAAAAAAqxMAAAAAAACsEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoxMAAAAAAACjEwAAAAAAAAAAAAAAAPC/"
				],
				[
					172,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKwTAAAAAAAArRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArBMAAAAAAACsEwAAAAAAAAAAAAAAAPC/"
				],
				[
					173,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAK0TAAAAAAAArxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArRMAAAAAAACtEwAAAAAAAAAAAAAAAPC/"
				],
				[
					174,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAK0TAAAAAAAArRMAAAAAAAABAAAAKK0TAAAAAAAArRMAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAArhMAAAAAAACuEwAAAAAAAAAAAAAAAPC/"
				],
				[
					175,
					1,
					"left_delete",
					null,
					"AQAAAKwTAAAAAAAArBMAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAArRMAAAAAAACtEwAAAAAAAAAAAAAAAPC/"
				],
				[
					176,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKwTAAAAAAAArhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArBMAAAAAAACsEwAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": "ti"
					},
					"AgAAAK0TAAAAAAAArhMAAAAAAAAAAAAArhMAAAAAAACvEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArRMAAAAAAACtEwAAAAAAAAAAAAAAAPC/"
				],
				[
					178,
					1,
					"insert_completion",
					{
						"completion": "tInfo",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "tInfo"
					},
					"AgAAAK0TAAAAAAAArRMAAAAAAAACAAAAdGmtEwAAAAAAALITAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArxMAAAAAAACvEwAAAAAAAAAAAAAAAPC/"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAALITAAAAAAAAsxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAshMAAAAAAACyEwAAAAAAAAAAAAAAAPC/"
				],
				[
					180,
					5,
					"left_delete",
					null,
					"BQAAALITAAAAAAAAshMAAAAAAAABAAAALrETAAAAAAAAsRMAAAAAAAABAAAAb7ATAAAAAAAAsBMAAAAAAAABAAAAZq8TAAAAAAAArxMAAAAAAAABAAAAbq4TAAAAAAAArhMAAAAAAAABAAAASQ",
					"AQAAAAAAAAABAAAAsxMAAAAAAACzEwAAAAAAAAAAAAAAAPC/"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": "il"
					},
					"AgAAAK4TAAAAAAAArxMAAAAAAAAAAAAArxMAAAAAAACwEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArhMAAAAAAACuEwAAAAAAAAAAAAAAAPC/"
				],
				[
					182,
					1,
					"insert_completion",
					{
						"completion": "tileInfo",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "tileInfo"
					},
					"AgAAAK0TAAAAAAAArRMAAAAAAAADAAAAdGlsrRMAAAAAAAC1EwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsBMAAAAAAACwEwAAAAAAAAAAAAAAAPC/"
				],
				[
					183,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAALUTAAAAAAAAthMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtRMAAAAAAAC1EwAAAAAAAAAAAAAAAPC/"
				],
				[
					184,
					1,
					"paste",
					null,
					"AQAAALYTAAAAAAAAwhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAthMAAAAAAAC2EwAAAAAAAAAAAAAAAPC/"
				],
				[
					186,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMMTAAAAAAAAxBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwxMAAAAAAADDEwAAAAAAAAAAAAAAAPC/"
				],
				[
					187,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAMQTAAAAAAAAxhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxBMAAAAAAADEEwAAAAAAAAAAAAAAAPC/"
				],
				[
					188,
					1,
					"right_delete",
					null,
					"AQAAAMUTAAAAAAAAxRMAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAxRMAAAAAAADFEwAAAAAAAAAAAAAAAPC/"
				],
				[
					191,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAP0TAAAAAAAA/hMAAAAAAAAAAAAA/hMAAAAAAAADFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/RMAAAAAAAD9EwAAAAAAAAAAAAAAAPC/"
				],
				[
					193,
					1,
					"insert",
					{
						"characters": "\t}"
					},
					"AgAAAP0TAAAAAAAA/hMAAAAAAAAAAAAA/hMAAAAAAAD/EwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/RMAAAAAAAD9EwAAAAAAAAAAAAAAgFZA"
				],
				[
					196,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAMwTAAAAAAAAzRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzBMAAAAAAADMEwAAAAAAAAAAAAAAAFtA"
				],
				[
					204,
					1,
					"paste",
					null,
					"AgAAAO4TAAAAAAAAAxQAAAAAAAAAAAAAAxQAAAAAAAADFAAAAAAAAAgAAABwVGV4dHVyZQ",
					"AQAAAAAAAAABAAAA7hMAAAAAAAD2EwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/Texture.h",
			"settings":
			{
				"buffer_size": 20702,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "src/RenderPasses/SkyBox/SkyBox.3d.slang",
			"settings":
			{
				"buffer_size": 2913,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAKkJAAAAAAAAqgkAAAAAAAAAAAAAqgkAAAAAAACrCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQkAAAAAAACpCQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/RenderPasses/SkyBox/SkyBox.h",
			"settings":
			{
				"buffer_size": 4038,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AgAAAKgNAAAAAAAAqQ0AAAAAAAAAAAAAqQ0AAAAAAACpDQAAAAAAAAEAAAAx",
					"AQAAAAAAAAABAAAAqA0AAAAAAACpDQAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAKsNAAAAAAAArA0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqw0AAAAAAACrDQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/lava_lib/renderer.cpp",
			"settings":
			{
				"buffer_size": 18320,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AgAAAIchAAAAAAAAiCEAAAAAAAAAAAAAiCEAAAAAAACIIQAAAAAAAAEAAAAx",
					"AQAAAAAAAAABAAAAhyEAAAAAAACIIQAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "\nsce"
					},
					"BQAAAHkIAAAAAAAAeggAAAAAAAAAAAAAeggAAAAAAAB+CAAAAAAAAAAAAAB+CAAAAAAAAH8IAAAAAAAAAAAAAH8IAAAAAAAAgAgAAAAAAAAAAAAAgAgAAAAAAACBCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQgAAAAAAAB5CAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert_completion",
					{
						"completion": "sceneBuilderFlags",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "sceneBuilderFlags"
					},
					"AgAAAH4IAAAAAAAAfggAAAAAAAADAAAAc2NlfggAAAAAAACPCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgQgAAAAAAACBCAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " |="
					},
					"AwAAAI8IAAAAAAAAkAgAAAAAAAAAAAAAkAgAAAAAAACRCAAAAAAAAAAAAACRCAAAAAAAAJIIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwgAAAAAAACPCAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " S"
					},
					"AgAAAJIIAAAAAAAAkwgAAAAAAAAAAAAAkwgAAAAAAACUCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkggAAAAAAACSCAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert_completion",
					{
						"completion": "SceneBuilder",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "SceneBuilder"
					},
					"AgAAAJMIAAAAAAAAkwgAAAAAAAABAAAAU5MIAAAAAAAAnwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAgAAAAAAACUCAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "::"
					},
					"AgAAAJ8IAAAAAAAAoAgAAAAAAAAAAAAAoAgAAAAAAAChCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnwgAAAAAAACfCAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"paste",
					null,
					"AQAAAKEIAAAAAAAAuggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoQgAAAAAAAChCAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALoIAAAAAAAAuwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuggAAAAAAAC6CAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/Scene/SceneBuilder.cpp",
			"settings":
			{
				"buffer_size": 112904,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "src/Falcor/Scene/Material/MaterialSystem.cpp",
			"settings":
			{
				"buffer_size": 19984,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"contents": "Searching 714 files for \"printf(\" (case sensitive)\n\n/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/Buffer.cpp:\n  269  \t\treturn mDynamicData.pData;\n  270  \t} else {\n  271: \t\tprintf(\"_1\\n\");\n  272  \t\tassert(type == MapType::Read);\n  273  \n  274  \t\tif (mCpuAccess == CpuAccess::Write) {\n  275: \t\t\tprintf(\"_1_1\\n\");\n  276  \t\t\t// Buffers on the upload heap are already mapped, just return the ptr.\n  277  \t\t\tassert(mDynamicData.pResourceHandle);\n  ...\n  279  \t\t\treturn mDynamicData.pData;\n  280  \t\t} else if (mCpuAccess == CpuAccess::Read) {\n  281: \t\t\tprintf(\"_1_2\\n\");\n  282  \t\t\tassert(mBindFlags == BindFlags::None);\n  283  \t\t\treturn mapBufferApi(mApiHandle, mSize);\n  284  \t\t} else {\n  285: \t\t\tprintf(\"_1_3\\n\");\n  286  \t\t\t// For buffers without CPU access we must copy the contents to a staging buffer.\n  287  \t\t\tLLOG_WRN << \"Buffer::map() performance warning - using staging resource which require us to flush the pipeline and wait for the GPU to finish its work\";\n\n/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/Vulkan/VKDevice.cpp:\n  187  \n  188  static void PrintPhysicalDeviceProperties(const VkPhysicalDeviceProperties& properties) {\n  189:     wprintf(L\"physicalDeviceProperties:\\n\");\n  190:     wprintf(L\"    driverVersion: 0x%X\\n\", properties.driverVersion);\n  191:     wprintf(L\"    vendorID: 0x%X (%s)\\n\", properties.vendorID, VendorIDToStr(properties.vendorID));\n  192:     wprintf(L\"    deviceID: 0x%X\\n\", properties.deviceID);\n  193:     wprintf(L\"    deviceType: %u (%s)\\n\", properties.deviceType, PhysicalDeviceTypeToStr(properties.deviceType));\n  194:     wprintf(L\"    deviceName: %hs\\n\", properties.deviceName);\n  195:     wprintf(L\"    limits:\\n\");\n  196:     wprintf(L\"        maxMemoryAllocationCount: %u\\n\", properties.limits.maxMemoryAllocationCount);\n  197:     wprintf(L\"        bufferImageGranularity: %llu B\\n\", properties.limits.bufferImageGranularity);\n  198:     wprintf(L\"        nonCoherentAtomSize: %llu B\\n\", properties.limits.nonCoherentAtomSize);\n  199  }\n  200  \n  201  #if VMA_VULKAN_VERSION >= 1002000\n  202  static void PrintPhysicalDeviceVulkan11Properties(const VkPhysicalDeviceVulkan11Properties& properties) {\n  203:     printf(\"physicalDeviceVulkan11Properties:\\n\");\n  204      //std::wstring sizeStr = SizeToStr(properties.maxMemoryAllocationSize);\n  205:     //printf(L\"    maxMemoryAllocationSize: %llu B (%s)\\n\", properties.maxMemoryAllocationSize, sizeStr.c_str());\n  206  }\n  207  \n  208  static void PrintPhysicalDeviceVulkan12Properties(const VkPhysicalDeviceVulkan12Properties& properties) {\n  209:     printf(\"physicalDeviceVulkan12Properties:\\n\");\n  210      //std::wstring str = DriverIDToStr(properties.driverID);\n  211:     //printf(\"    driverID: %u (%s)\\n\", properties.driverID, str.c_str());\n  212:     printf(\"    driverName: %hs\\n\", properties.driverName);\n  213:     printf(\"    driverInfo: %hs\\n\", properties.driverInfo);\n  214  }\n  215  #endif // #if VMA_VULKAN_VERSION > 1002000\n\n/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/Platform/MonitorInfo.cpp:\n  196                  abs(info.rcMonitor.top  - info.rcMonitor.bottom));\n  197  \n  198:             //printf(\"%fx%f mm\\n\", WidthMm, HeightMm );\n  199              desc.mPhysicalSize = float2(wInch, hInch);\n  200              auto vPpi = desc.mResolution / desc.mPhysicalSize;\n  ...\n  222          for(auto& desc : monitorDescs)\n  223          {\n  224:             printf(\"%s%s: %0.0f x %0.0f pix, %0.1f x %0.1f in, %0.2f ppi\\n\",\n  225                  desc.mIdentifier.c_str(),\n  226                  desc.mIsPrimary ? \" (Primary) \" : \" \",\n\n/media/max/1TB_Ext/dev/Lava/src/Falcor/Utils/Debug/debug.h:\n   27  \n   28  #define LOG_FTL(fmt, ...) \\\n   29:         do { if (LOG_DEBUG) fprintf(stderr, ANSI_COLOR_RED \"%s:%d:%s(): \" fmt \"\\n\" ANSI_COLOR_RESET, __FILE__, \\\n   30                                  __LINE__, __func__, ##__VA_ARGS__); } while (0)\n   31  \n   32  #define LOG_ERR(fmt, ...) \\\n   33:         do { if (LOG_DEBUG) fprintf(stderr, ANSI_COLOR_RED \"%s:%d:%s(): \" fmt \"\\n\" ANSI_COLOR_RESET, __FILE__, \\\n   34                                  __LINE__, __func__, ##__VA_ARGS__); } while (0)\n   35  \n   36  #define LOG_INFO(fmt, ...) \\\n   37:         do { if (LOG_DEBUG) fprintf(stdout, ANSI_COLOR_BLUE \"%s:%d:%s(): \" fmt \"\\n\" ANSI_COLOR_RESET, __FILE__, \\\n   38                                  __LINE__, __func__, ##__VA_ARGS__); } while (0)\n   39  \n   40  #define LOG_WARN(fmt, ...) \\\n   41:         do { if (LOG_DEBUG) fprintf(stdout, ANSI_COLOR_YELLOW \"%s:%d:%s(): \" fmt \"\\n\" ANSI_COLOR_RESET, __FILE__, \\\n   42                                  __LINE__, __func__, ##__VA_ARGS__); } while (0)\n   43  \n   44  #define LOG_DBG(fmt, ...) \\\n   45:         do { if (LOG_DEBUG) fprintf(stdout, ANSI_COLOR_WHITE \"%s:%d:%s(): \" fmt \"\\n\" ANSI_COLOR_RESET, __FILE__, \\\n   46                                  __LINE__, __func__, ##__VA_ARGS__); } while (0)\n   47  \n\n/media/max/1TB_Ext/dev/Lava/src/Falcor/Utils/Debug/DebugConsole.h:\n   67              std::cin.rdbuf(mCin.rdbuf());\n   68  \n   69:             // Redirect stdout for printf() to our console\n   70              //freopen_s(&mFp, \"CONOUT$\", \"w\", stdout);\n   71              //std::cout.clear();\n\n/media/max/1TB_Ext/dev/Lava/src/Falcor/Utils/Timing/Profiler.cpp:\n  229  \n  230  void Profiler::Capture::captureEvents(const std::vector<Event*>& events) {\n  231:     printf(\"captureEvents\\n\");\n  232      if (events.empty()) {\n  233:         printf(\"no events\\n\");\n  234          return;\n  235      }\n  ...\n  245              mLanes[i * 2 + 1].records.reserve(mReservedFrames);\n  246          }\n  247:         printf(\"%zu events captured first time!!!!\\n\", events.size());\n  248          return; // Exit as no data is available on first capture.\n  249      }\n  ...\n  256      }\n  257  \n  258:     printf(\"%zu events captured !!!!\\n\", events.size());\n  259  \n  260      ++mFrameCount;\n\n32 matches across 6 files\n\n\nSearching 1751 files for \"Sparse address space size:\" (case sensitive)\n\n/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/Vulkan/VKTexture.cpp:\n  282  \n  283          if (mIsSparse) {\n  284:             std::cout << \"Sparse address space size: \" << mpDevice->apiData()->properties.limits.sparseAddressSpaceSize << std::endl;\n  285              // Check requested image size against hardware sparse limit            \n  286              if (mMemRequirements.size > mpDevice->apiData()->properties.limits.sparseAddressSpaceSize) {\n\n/media/max/1TB_Ext/dev/Lava/src/gfx_lib/vulkan/vk-device.cpp:\n 1248  \n 1249  \tif (pTexture && sparse) {\n 1250: \t\tstd::cout << \"Sparse address space size: \" << m_basicProps.limits.sparseAddressSpaceSize << std::endl;\n 1251  \t\t// Check requested image size against hardware sparse limit            \n 1252  \t\tif (memRequirements.size > m_basicProps.limits.sparseAddressSpaceSize) {\n\n2 matches across 2 files\n\n\nSearching 1751 files for \"std::cout\" (case sensitive)\n\n/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/GFX/GFXCopyContext.cpp:\n  155  \n  156  \tauto stop = std::chrono::high_resolution_clock::now();\n  157:   std::cout << \"CopyContext::ReadTextureTask::create time: \" << std::chrono::duration_cast<std::chrono::milliseconds>(stop - start).count() << \" ms.\" << std::endl;\n  158  \n  159  \treturn pThis;\n  ...\n  188  \tmpFence->syncCpu();\n  189  \tauto stop = std::chrono::high_resolution_clock::now();\n  190: \tstd::cout << \"CopyContext::ReadTextureTask::getData syncCpu time: \" << std::chrono::duration_cast<std::chrono::milliseconds>(stop - start).count() << \" ms.\" << std::endl;\n  191  \n  192  \tauto start1 = std::chrono::high_resolution_clock::now();\n  ...\n  195  \n  196  \tstop = std::chrono::high_resolution_clock::now();\n  197: \tstd::cout << \"CopyContext::ReadTextureTask::getData mpBuffer->map time: \" << std::chrono::duration_cast<std::chrono::milliseconds>(stop - start1).count() << \" ms.\" << std::endl;\n  198  \n  199  \tauto start3 = std::chrono::high_resolution_clock::now();\n  ...\n  201  \t//memmove(textureData, pData, (size_t)mRowCount * mActualRowSize);\n  202  \tstop = std::chrono::high_resolution_clock::now();\n  203: \tstd::cout << \"CopyContext::ReadTextureTask::getData memcpy time: \" << std::chrono::duration_cast<std::chrono::milliseconds>(stop - start3).count() << \" ms.\" << std::endl;\n  204  \n  205  \tauto start2 = std::chrono::high_resolution_clock::now();\n  206  \tmpBuffer->unmap();\n  207  \tstop = std::chrono::high_resolution_clock::now();\n  208: \tstd::cout << \"CopyContext::ReadTextureTask::getData mpBuffer->unmap time: \" << std::chrono::duration_cast<std::chrono::milliseconds>(stop - start2).count() << \" ms.\" << std::endl;\n  209  \n  210  \tstop = std::chrono::high_resolution_clock::now();\n  211:   std::cout << \"CopyContext::ReadTextureTask::getData time: \" << std::chrono::duration_cast<std::chrono::milliseconds>(stop - start).count() << \" ms.\" << std::endl;\n  212  \n  213  }\n\n/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/Vulkan/VKTexture.cpp:\n  277  \n  278          vkGetImageMemoryRequirements(mpDevice->getApiHandle(), mImage, &mMemRequirements);\n  279:         std::cout << \"Image memory requirements:\" << std::endl;\n  280:         std::cout << \"\\t Size: \" << mMemRequirements.size << std::endl;\n  281:         std::cout << \"\\t Alignment: \" << mMemRequirements.alignment << std::endl;\n  282  \n  283          if (mIsSparse) {\n  284  #ifdef _DEBUG\n  285:             std::cout << \"Sparse address space size: \" << mpDevice->apiData()->properties.limits.sparseAddressSpaceSize << std::endl;\n  286  #endif\n  287              // Check requested image size against hardware sparse limit            \n  ...\n  305              vkGetImageSparseMemoryRequirements(mpDevice->getApiHandle(), mImage, &sparseMemoryReqsCount, sparseMemoryReqs.data());\n  306  \n  307:             std::cout << \"Sparse image memory requirements: \" << sparseMemoryReqsCount << std::endl;\n  308              \n  309              for (auto reqs : sparseMemoryReqs) {\n  310:                 std::cout << \"\\t Image granularity: w = \" << reqs.formatProperties.imageGranularity.width << \" h = \" << reqs.formatProperties.imageGranularity.height << \" d = \" << reqs.formatProperties.imageGranularity.depth << std::endl;\n  311:                 std::cout << \"\\t Mip tail first LOD: \" << reqs.imageMipTailFirstLod << std::endl;\n  312:                 std::cout << \"\\t Mip tail size: \" << reqs.imageMipTailSize << std::endl;\n  313:                 std::cout << \"\\t Mip tail offset: \" << reqs.imageMipTailOffset << std::endl;\n  314:                 std::cout << \"\\t Mip tail stride: \" << reqs.imageMipTailStride << std::endl;\n  315                  //todo:multiple reqs\n  316                  mMipTailStart = reqs.imageMipTailFirstLod;\n  ...\n  420                  \n  421                  if ((!mMipTailInfo.singleMipTail) && (sparseMemoryReq.imageMipTailFirstLod < mMipLevels)) {\n  422:                     std::cout << \"Layer \" << layer << \"single mip tail\" << std::endl;\n  423                      // Allocate memory for the layer mip tail\n  424                      VkMemoryAllocateInfo memAllocInfo = {};\n  ...\n  450              // Check if format has one mip tail for all layers\n  451              if ((sparseMemoryReq.formatProperties.flags & VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT) && (sparseMemoryReq.imageMipTailFirstLod < mMipLevels)) {\n  452:                 std::cout << \"One mip tail for all mip layers \" << std::endl;\n  453                  // Allocate memory for the mip tail\n  454                  VkMemoryAllocateInfo memAllocInfo = {};\n  ...\n  473              }\n  474  \n  475:             std::cout << \"Texture info:\" << std::endl;\n  476:             std::cout << \"\\tDim: \" << mWidth << \" x \" << mHeight << std::endl;\n  477:             std::cout << \"\\tVirtual pages: \" << mPages.size() << std::endl;\n  478:             std::cout << \"\\tSingle mip tail: \" << (mMipTailInfo.singleMipTail ? \"Yes\" : \"No\") << std::endl;\n  479:             std::cout << \"\\tMip tail start: \" << sparseMemoryReq.imageMipTailFirstLod << std::endl;\n  480:             std::cout << \"\\tMip tail size: \" << sparseMemoryReq.imageMipTailSize << std::endl;\n  481  \n  482              // Create signal semaphore for sparse binding\n\n/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/Platform/OS.cpp:\n   72      };\n   73  \n   74:     std::cout << \"mode: \" << (isDevelopmentMode() ? \"development\" : \"production\") << \"\\n\";\n   75:     //std::cout << \"exec dir: \" << getExecutableDirectory() << \"\\n\";\n   76  \n   77      return isDevelopmentMode() ? developmentDirectories : deploymentDirectories;\n\n/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/Program/Program.cpp:\n 1039  \n 1040  \t\tchar choice;\n 1041: \t\tstd::cout << \"Would you like to try again ? (Y/N)\" << std::endl;\n 1042  \t\tstd::cin >> choice;\n 1043  \t\tif ( choice =='N' || choice =='n' ){\n\n/media/max/1TB_Ext/dev/Lava/src/Falcor/Scene/SceneBuilder.h:\n   83      */\n   84      struct Mesh {\n   85:         //Mesh(const Mesh&) = delete;//{ std::cout << \"A copy was made.\\n\"; }\n   86          enum class AttributeFrequency {\n   87              None,\n\n/media/max/1TB_Ext/dev/Lava/src/Falcor/Utils/TermColor.cpp:\n   79  \n   80  inline bool isTTY(const std::ostream& stream) {\n   81:     if (&stream == &std::cout && ISATTY(FILENO(stdout))) return true;\n   82      if (&stream == &std::cerr && ISATTY(FILENO(stderr))) return true;\n   83      return false;\n\n/media/max/1TB_Ext/dev/Lava/src/Falcor/Utils/TermColor.h:\n   51          \\return Returns string wrapped in color codes if stream is not a terminal, original string otherwise.\n   52      */\n   53:     std::string colored(const std::string& str, TermColor color, const std::ostream& stream = std::cout);\n   54  \n   55  }  // namespace Falcor\n\n/media/max/1TB_Ext/dev/Lava/src/Falcor/Utils/Debug/debug.h:\n   57          using dura = std::chrono::duration<double>;\n   58          auto d = std::chrono::high_resolution_clock::now() - p;\n   59:         std::cout << name << \": \" << std::chrono::duration_cast<dura>(d).count() << std::endl;\n   60      }\n   61  };\n\n/media/max/1TB_Ext/dev/Lava/src/Falcor/Utils/Debug/DebugConsole.h:\n   39  namespace Falcor {\n   40  \n   41:     /** Opens a console window and redirects std::cout, std::cerr, and std::cin there.\n   42          Upon destruction of the object, the console is closed and the streams are restored to the previous state.\n   43      */\n   ..\n   55  #endif\n   56              // Redirect cout/cerr/cin streams to our console window\n   57:             mPrevCout = std::cout.rdbuf();\n   58              mCout.open(\"CONOUT$\");\n   59:             std::cout.rdbuf(mCout.rdbuf());\n   60  \n   61              mPrevCerr = std::cerr.rdbuf();\n   ..\n   69              // Redirect stdout for printf() to our console\n   70              //freopen_s(&mFp, \"CONOUT$\", \"w\", stdout);\n   71:             //std::cout.clear();\n   72          }\n   73  \n   ..\n   81              std::cin.rdbuf(mPrevCin);\n   82              std::cerr.rdbuf(mPrevCerr);\n   83:             std::cout.rdbuf(mPrevCout);\n   84  \n   85              // Restore stdout to default\n   ..\n   97  \n   98          void pause() const {\n   99:             std::cout << \"Press any key to continue...\" << std::endl;\n  100              flush();\n  101              std::cin.get();\n  ...\n  103  \n  104          void flush() const {\n  105:             std::cout.flush();\n  106              std::cerr.flush();\n  107          }\n\n/media/max/1TB_Ext/dev/Lava/src/Falcor/Utils/Perception/Experiment.cpp:\n   81              // Now choose any one from validIndex\n   82              mCurrentConditionIndex = validIndex[rand() % (int32_t)validIndex.size()];\n   83:             std::cout << \"Next chosen staircase is: \" << mCurrentConditionIndex << '\\n';\n   84          }\n   85  \n\n/media/max/1TB_Ext/dev/Lava/src/Falcor/Utils/Perception/SingleThresholdMeasurement.cpp:\n  210                          mUpCount = 0; // reset up count\n  211                      }\n  212:                     std::cout << \"Processed a response that was incorrect. Reversal count is: \" << mReversalCount << \"\\n\";\n  213                  }\n  214                  else // correct response\n  ...\n  245                          mDownCount = 0; // reset down count\n  246                      }\n  247:                     std::cout << \"Processed a response that was correct. Reversal count is: \" << mReversalCount << \"\\n\";\n  248  \n  249                  }\n  ...\n  285                      }\n  286                      mCurrentLevel = mExpParam.mStimLevels[mCurrentIndex];\n  287:                     std::cout << \"Processed a response that was incorrect. Reversal count is: \" << mReversalCount << \"\\n\";\n  288                  }\n  289                  else // correct response\n  ...\n  321                      }\n  322                      mCurrentLevel = mExpParam.mStimLevels[mCurrentIndex];\n  323:                     std::cout << \"Processed a response that was correct. Reversal count is: \" << mReversalCount << \"\\n\";\n  324                  }\n  325              }\n  ...\n  355                  int32_t chosenIndex = validIndex[rand() % (int32_t)validIndex.size()];\n  356                  mCurrentLevel = mExpParam.mStimLevels[chosenIndex];\n  357:                 std::cout << \"Next chosen MCS stim level is: \" << mCurrentLevel << '\\n';\n  358              }\n  359          }\n\n/media/max/1TB_Ext/dev/Lava/src/gfx_lib/vulkan/vk-device.cpp:\n 1249  \tif (pTexture && sparse) {\n 1250  #ifdef _DEBUG\n 1251: \t\tstd::cout << \"Sparse address space size: \" << m_basicProps.limits.sparseAddressSpaceSize << std::endl;\n 1252  #endif\t\t\n 1253  \n\n/media/max/1TB_Ext/dev/Lava/src/lava_cmd/lava_cmd.cpp:\n   65  void listGPUs() {\n   66    auto pDeviceManager = DeviceManager::create();\n   67:   std::cout << \"Available rendering devices:\\n\";\n   68    const auto& deviceMap = pDeviceManager->listDevices();\n   69    for( auto const& [gpu_id, name]: deviceMap ) {\n   70:     std::cout << \"\\t[\" << std::to_string(static_cast<uint32_t>(gpu_id)) << \"] : \" << name << \"\\n\";\n   71    }\n   72:   std::cout << std::endl;\n   73  }\n   74  \n   ..\n  193       */ \n  194      if ( vm.count(\"help\")  ) { \n  195:       std::cout << generic << \"\\n\";\n  196:       std::cout << config << \"\\n\";\n  197:       std::cout << input << \"\\n\";\n  198:       std::cout << logging << \"\\n\";\n  199  #ifdef FALCOR_ENABLE_PROFILER\n  200:       std::cout << profiling << \"\\n\";\n  201  #endif\n  202        exit(EXIT_SUCCESS);\n  ...\n  209  \n  210      if (vm.count(\"version\")) {\n  211:       std::cout << \"Lava, version 0.0\\n\";\n  212        exit(EXIT_SUCCESS);\n  213      }\n  ...\n  298  \n  299      lava::ut::log::shutdown_log();\n  300:     std::cout << \"Exiting lava. Bye :)\\n\";\n  301      exit(EXIT_SUCCESS);\n  302  }\n\n/media/max/1TB_Ext/dev/Lava/src/lava_lib/aov.cpp:\n   41  \n   42      auto stop = std::chrono::high_resolution_clock::now();\n   43:     std::cout << \"AOV plane \" << name() << \" date read time: \" << std::chrono::duration_cast<std::chrono::milliseconds>(stop - start).count() << \" ms.\" << std::endl;\n   44  \n   45      return true;\n\n/media/max/1TB_Ext/dev/Lava/src/lava_lib/renderer.cpp:\n  488  \n  489      auto stop = std::chrono::high_resolution_clock::now();\n  490:     std::cout << \"Sample \" << mCurrentSampleNumber << \" time: \" << std::chrono::duration_cast<std::chrono::milliseconds>(stop - start).count() << \" ms.\" << std::endl;\n  491  }\n  492  \n\n/media/max/1TB_Ext/dev/Lava/src/lava_lib/scene_builder.cpp:\n   52  \n   53  SceneBuilder::~SceneBuilder() {\n   54:     std::cout << \"SceneBuilder stats:\" << std::endl;\n   55:     std::cout << \"\\t Triangles count: \" << std::to_string(mUniqueTrianglesCount);\n   56:     std::cout << std::endl << std::endl;\n   57  }\n   58  \n\n/media/max/1TB_Ext/dev/Lava/src/lava_lib/null_display/d_null.cpp:\n  123    std::time_t end_time = std::chrono::system_clock::to_time_t(g_end);\n  124  \n  125:   std::cout << \"finished rendering at \" << std::ctime(&end_time) << \"elapsed time: \" << elapsed_seconds.count() << \"s\\n\";\n  126  \n  127    delete image_h;\n\n/media/max/1TB_Ext/dev/Lava/src/lava_lib/pymodule/pymodule.cpp:\n   21  class Li {\n   22   public:\n   23: \tLi() { std::cout << \"Li (Lava interfac ) class contructor\" << std::endl; }\t\n   24  };\n   25  \n\n/media/max/1TB_Ext/dev/Lava/src/lava_lib/reader_bgeo/bgeo/PolySplitter.cpp:\n   62  //    for (size_t i = 0; i < m_faceMatches.size(); ++i)\n   63  //    {\n   64: //        std::cout << strings[i] << \": \";\n   65  //        for (const auto& face : m_faceMatches[i])\n   66  //        {\n   67: //            std::cout << face << \" \";\n   68  //        }\n   69: //        std::cout << std::endl;\n   70  //    }\n   71  \n   ..\n  147          m_currentStartIndices.push_back(previousStartIndex);\n  148  \n  149: //        std::cout << \"start index(\" << face << \") = \" << m_startIndices[face] << std::endl;\n  150: //        std::cout << \"vertex count(\" << face << \") = \" << vertexCount << std::endl;\n  151  \n  152      }\n  ...\n  174  //    for (const auto& vertex : m_mapToNewVertices)\n  175  //    {\n  176: //        std::cout << vertex << \" \" << std::endl;\n  177      //    }\n  178  }\n\n/media/max/1TB_Ext/dev/Lava/src/lava_lib/reader_bgeo/bgeo/Run.cpp:\n   22  \n   23  Run::Run(const Bgeo& bgeo, const parser::Run& run): m_bgeo(bgeo), m_run(run) { \n   24: \tstd::cout << \"Run::Run\\n\";\n   25  }\n   26  \n\n/media/max/1TB_Ext/dev/Lava/src/lava_lib/reader_bgeo/bgeo/parser/Mesh.cpp:\n   81  \n   82  /*virtual*/ void Mesh::loadData(UT_JSONParser &parser) {\n   83:     std::cout << \"Mesh::loadData\\n\";\n   84      parseBeginArray(parser);\n   85      {\n   ..\n   96      }\n   97      parseEndArray(parser);\n   98:     std::cout << \"Mesh::loadData done\\n\";\n   99  }\n  100  \n  101  /*virtual*/ void Mesh::loadVaryingData(UT_JSONParser& parser, const StringList& fields) {\n  102:     std::cout << \"Mesh::loadVaryingData\\n\";\n  103      // NOTE: for now just support only the vertex field\n  104      if (fields.size() != 1 || fields[0] != \"vertex\") {\n  105:         std::cout << \"ReadError!!! Mesh primitive supports only varying vertex\\n\";\n  106          throw ReadError(\"Mesh primitive supports only varying vertex\");\n  107      }\n  ...\n  111          BGEO_CHECK(parser.parseObject(builder));\n  112      }\n  113:     std::cout << \"Mesh::loadVaryingData done\\n\";\n  114  }\n  115  \n  116  /*virtual*/ void Mesh::loadUniformData(UT_JSONParser& parser) {\n  117:     std::cout << \"Mesh::loadUniformData\\n\";\n  118      UniformDataHandle uniformHandle(*this);\n  119      BGEO_CHECK(parser.parseObject(uniformHandle));\n  120:     std::cout << \"Mesh::loadUniformData done\\n\";\n  121  }\n  122  \n\n/media/max/1TB_Ext/dev/Lava/src/lava_lib/reader_bgeo/bgeo/parser/Primitives.cpp:\n   48          Primitive* primitive = nullptr;\n   49  \n   50:         //std::cout << \"p0 \" << parser.getStreamPosition() << std::endl;\n   51          parseBeginArray(parser);\n   52          {\n   53:             //std::cout << \"p1 \" << parser.getStreamPosition() << std::endl;\n   54              parseBeginArray(parser);\n   55              {\n   56:                 //std::cout << \"p2 \" << parser.getStreamPosition() << std::endl;\n   57                  parseArrayValueForKey(parser, \"type\", type);\n   58:                 //std::cout <<\"type = \" << type <<std::endl;\n   59  \n   60                  primitive = Primitive::create(type, detail);\n   ..\n   62                  primitive->loadType(parser);\n   63  \n   64:                 //std::cout << \"p3 \" << parser.getStreamPosition() << std::endl;\n   65              }\n   66              if (primitive->getType() == Primitive::UnknownType)\n   ..\n   77                  parseEndArray(parser);\n   78              }\n   79:             //std::cout << \"p4 \" << parser.getStreamPosition() << std::endl;\n   80              primitive->loadData(parser);\n   81          }\n\n/media/max/1TB_Ext/dev/Lava/src/lava_lib/reader_bgeo/bgeo/parser/Run.cpp:\n   22  \n   23  Run::Run(const Detail& detail): Primitive(detail), runPrimitive(0) { \n   24:     std::cout << \"parser::Run::Run\\n\";\n   25  }\n   26  \n   ..\n   63      UT_String runTypeString;\n   64      parseArrayValueForKey(parser, \"runtype\", runTypeString);\n   65:     std::cout << \"parser::Run::loadType create prim\\n\";\n   66      runPrimitive = create(runTypeString, detail);\n   67      assert(runPrimitive);\n\n/media/max/1TB_Ext/dev/Lava/src/lava_lib/reader_bgeo/ginfo/ginfo.cpp:\n   68      }\n   69  \n   70:     std::cout << detail << std::endl;\n   71  \n   72      std::cerr << \"file loaded in \" << elapsed << \"s\" << std::endl;\n\n/media/max/1TB_Ext/dev/Lava/src/lava_lib/reader_bgeo/ops/BgeoInOp.cpp:\n  461          assert(fragment);\n  462  \n  463:         //std::cout << \"embedded ptr: \" << fragment->getEmbeddedGeo().get() << std::endl;\n  464  \n  465          cookPackedGeometry(interface, bgeo, *fragment);\n\n/media/max/1TB_Ext/dev/Lava/src/lava_lib/reader_bgeo/ops/cookPolyMesh.cpp:\n  209                              const bgeo::PolySplitter& splitter)\n  210  {\n  211:     std::cout << \"current split = \" << splitter.getCurrentSplit() << std::endl;\n  212  \n  213      FnAttribute::IntAttribute createSubdAttr = interface.getOpArg(\"createSubd\");\n\n/media/max/1TB_Ext/dev/Lava/src/lava_lib/reader_lsd/backtracking.h:\n   18      template<typename It, typename Ctx, typename Other>\n   19      bool parse(It& f, It l, Ctx const& ctx, Other const& other, x3::unused_type) const {\n   20:         std::cout << \"---\\n\" << std::string(f, l) << \"\\n---\\n\";\n   21  \n   22          auto end_it = l;\n\n/media/max/1TB_Ext/dev/Lava/src/lava_lib/reader_lsd/grammar_bgeo.h:\n  103      std::ostream& _os;\n  104  \n  105:     EchoVisitor(): _os(std::cout){}\n  106  \n  107      void operator()(ast::NoValue const& n) const { _os << \"null\"; }\n\n/media/max/1TB_Ext/dev/Lava/src/lava_lib/reader_lsd/grammar_lsd_expr.h:\n   94      std::ostream& _os;\n   95  \n   96:     EchoVisitor(): Visitor(), _os(std::cout){}\n   97      EchoVisitor(std::ostream& ss): Visitor(), _os(ss){}\n   98  \n\n/media/max/1TB_Ext/dev/Lava/src/lava_lib/reader_lsd/session.cpp:\n  327  \n  328  #ifdef _DEBUG\n  329: \tmpGlobal->printSummary(std::cout);\n  330  #endif\n  331  \n  ...\n  470  void Session::pushBgeo(const std::string& name, ika::bgeo::Bgeo::SharedConstPtr pBgeo, bool async) {\n  471  \tLLOG_DBG << \"pushBgeo\";\n  472:     //bgeo.printSummary(std::cout);\n  473  \n  474      auto pSceneBuilder = mpRenderer->sceneBuilder();\n  ...\n  837  \t\t\tif( pGeo->isInline()) {\n  838  #ifdef _DEBUG\n  839: \t\t\t\tpGeo->bgeo()->printSummary(std::cout);\n  840  #endif\n  841  \t\t\t\tpushBgeo(pGeo->detailName(), pGeo->bgeo(), pushGeoAsync);\n  842  \t\t\t} else {\n  843  #ifdef _DEBUG\n  844: \t\t\t\tpGeo->bgeo()->printSummary(std::cout);\n  845  #endif\n  846  \t\t\t\tpushBgeo(pGeo->detailName(), pGeo->bgeo(), pushGeoAsync);\n\n/media/max/1TB_Ext/dev/Lava/src/lava_lib/reader_lsd/visitor_echo.cpp:\n   10  namespace lsd {\n   11  \n   12: EchoVisitor::EchoVisitor(std::unique_ptr<Session>& pSession): Visitor(pSession), _os(std::cout){ \n   13  \n   14  }\n\n/media/max/1TB_Ext/dev/Lava/src/lava_lib/sdl_display/d_sdl.cpp:\n  319    std::time_t end_time = std::chrono::system_clock::to_time_t(g_end);\n  320  \n  321:   std::cout << \"finished rendering at \" << std::ctime(&end_time) << \"elapsed time: \" << elapsed_seconds.count() << \"s\\n\";\n  322    // go into window process loop until quit\n  323    PtDspyError quit=PkDspyErrorNone;\n\n/media/max/1TB_Ext/dev/Lava/src/lava_tools/ltxmake/ltxmake.cpp:\n  119       */ \n  120      if ( vm.count(\"help\")  ) { \n  121:       std::cout << generic << \"\\n\";\n  122:       std::cout << input << \"\\n\";\n  123:       std::cout << tlc_compression << \"\\n\";\n  124:       std::cout << logg << \"\\n\";\n  125        exit(EXIT_SUCCESS);\n  126      }\n  127  \n  128      if (vm.count(\"version\")) {\n  129:       std::cout << \"Ltxmake, version 0.0\\n\";\n  130        exit(EXIT_SUCCESS);\n  131      }\n  ...\n  209  \n  210      lava::ut::log::shutdown_log();\n  211:     std::cout << \"Exiting ltxmake. Bye :)\\n\";\n  212      exit(EXIT_SUCCESS);\n  213  }\n\n/media/max/1TB_Ext/dev/Lava/src/lava_tools/ltxview/ltxview.cpp:\n  241       */ \n  242      if ( vm.count(\"help\")  ) { \n  243:       std::cout << generic << \"\\n\";\n  244:       std::cout << input << \"\\n\";\n  245:       std::cout << logging << \"\\n\";\n  246        exit(EXIT_SUCCESS);\n  247      }\n  248  \n  249      if (vm.count(\"version\")) {\n  250:       std::cout << \"Ltxview, version 0.0\\n\";\n  251        exit(EXIT_SUCCESS);\n  252      }\n  ...\n  450  \n  451      lava::ut::log::shutdown_log();\n  452:     std::cout << \"Exiting ltxview. Bye :)\\n\";\n  453      exit(EXIT_SUCCESS);\n  454  }\n\n/media/max/1TB_Ext/dev/Lava/src/lava_utils_lib/logging.cpp:\n   78  \n   79      sink->locked_backend()->add_stream(\n   80:         boost::shared_ptr<std::ostream>(&std::cout, boost::null_deleter()));\n   81  \n   82      // flush\n\n/media/max/1TB_Ext/dev/Lava/src/Mogwai/Mogwai.cpp:\n  607    // print out all the frames to stderr\n  608  \n  609:   std::cout << std::chrono::system_clock::to_time_t(std::chrono::system_clock::now()) << std::endl;\n  610    fprintf(stderr, \"Error: signal %d:\\n\", sig);\n  611    backtrace_symbols_fd(array, size, STDERR_FILENO);\n\n/media/max/1TB_Ext/dev/Lava/src/RenderPasses/HBAO/HBAO.cpp:\n  195    //auto t2 = std::chrono::high_resolution_clock::now();\n  196    //auto ms_int = std::chrono::duration_cast<std::chrono::milliseconds>(t2 - t1);\n  197:   //std::cout << \"1 run in \" << ms_int.count() << \" ms\\n\";\n  198  \n  199  }\n\n/media/max/1TB_Ext/dev/Lava/src/RenderPasses/TexturesResolvePass/TexturesResolvePass.cpp:\n  192  \t\t\t\tprintf(\"Texture id: %u mip levels: %u tail start: %u\\n\", textureData.textureID, textureData.mipLevelsCount, textureData.mipTailStart);\n  193  \n  194: \t\t\t\tstd::cout << \"Mip bases : \\n\";\n  195: \t\t\t\tfor( uint i = 0; i < 16; i++) std::cout << textureData.mipBases[i] << \" \";\n  196: \t\t\t\tstd::cout << \"\\n\";\n  197  #endif\n  198  \t\t\t} else {\n  ...\n  261  #ifdef _DEBUG\n  262  \t\tfor(uint32_t i = 0; i < texturePagesCount; i++) {\n  263: \t\t\tstd::cout << \" \" << std::to_string(i);\n  264  \t\t}\n  265: \t\tstd::cout << std::endl;\n  266  #endif\n  267  \n\n/media/max/1TB_Ext/dev/Lava/src/Tools/FalcorTest/FalcorTest.cpp:\n   60      if (argList.argExists(kTestFilterSwitch)) {\n   61          testFilterRegex = argList[kTestFilterSwitch].asString();\n   62:         std::cout << \"No test_filter regex provided.\" << std::endl;\n   63          sReturnCode = 1;\n   64      }\n   65  \n   66      if (argList.argExists(\"h\") || argList.argExists(\"help\")) {\n   67:         std::cout << R\"(usage: FalcorTest [-test_filter filter]\n   68              Where, if |filter| is provided, only tests whose source filename or test name\n   69              have |filter| as a substring are executed.\n   70              )\";\n   71      } else {\n   72:         sReturnCode = runTests(std::cout, pRenderContext, testFilterRegex);\n   73      }\n   74      gpFramework->shutdown();\n\n/media/max/1TB_Ext/dev/Lava/src/Tools/FalcorTest/Tests/Utils/AABBTests.cpp:\n   63          const float* resultf = ctx.mapBuffer<const float>(\"result\");\n   64          for(uint ii = 0; ii < 12; ii+=3) {\n   65:             std::cout << \" \" << resultf[ii] << \" \" << resultf[ii+1] << \" \" << resultf[ii+2] << std::endl;\n   66          }\n   67:         std::cout << std::endl;\n   68          ctx.unmapBuffer(\"result\");\n   69  \n   ..\n   73  \n   74          for(uint ii = 0; ii < 4; ii++) {\n   75:             std::cout << result[ii] << std::endl;\n   76          }\n   77  \n\n/media/max/1TB_Ext/dev/Lava/src/Tools/ImageCompare/ImageCompare.cpp:\n  321      }\n  322  \n  323:     std::cout << error << std::endl;\n  324  \n  325      // Treat nans and infs as errors.\n  ...\n  329  }\n  330  \n  331: static void printMetrics(std::ostream &stream = std::cout)\n  332  {\n  333      stream << \"Available error metrics:\" << std::endl;\n  ...\n  358      catch (const args::Completion& e)\n  359      {\n  360:         std::cout << e.what();\n  361          return 0;\n  362      }\n  363      catch (const args::Help&)\n  364      {\n  365:         std::cout << parser;\n  366          return 0;\n  367      }\n\n125 matches across 41 files\n\n\nSearching 1751 files for \"Sparse texture handle mode is:\" (case sensitive)\n\n/media/max/1TB_Ext/dev/Lava/src/Falcor/Utils/Image/TextureManager.cpp:\n  387  \t\t\t\tif (pTexture->isSparse()) {\n  388  \t\t\t\t\tmHasSparseTextures = true;\n  389: \t\t\t\t\tLLOG_WRN << \"Sparse texture handle mode is: \" << to_string(handle.mMode);\n  390  \t\t\t\t}\n  391  \t\t\t}\n\n1 match in 1 file\n\n\nSearching 1751 files for \"TileInfo:\" (case sensitive)\n\n/media/max/1TB_Ext/dev/Lava/src/lava_lib/reader_lsd/session.h:\n  134  \n  135  static inline std::string to_string(const Session::TileInfo& tileInfo) {\n  136:   return \"TileInfo: region[\" + std::to_string(tileInfo.renderRegion[0]) \n  137                      + \", \" +  std::to_string(tileInfo.renderRegion[1]) \n  138                      + \", \" +  std::to_string(tileInfo.renderRegion[2])\n\n1 match in 1 file\n\n\nSearching 224 files for \"SampleLevel\" (case sensitive)\n\n/media/max/1TB_Ext/dev/Lava/src/RenderPasses/Antialiasing/FXAA/FXAA.slang:\n  254  {\n  255      float2 posM = texC;\n  256:     float4 color = gSrc.SampleLevel(gSampler, texC, 0);\n  257      float lumaM = luminance(color.rgb);\n  258:     float lumaS = luminance(gSrc.SampleLevel(gSampler, posM, 0, int2(0, 1)).rgb);\n  259:     float lumaE = luminance(gSrc.SampleLevel(gSampler, posM, 0, int2(1, 0)).rgb);\n  260:     float lumaN = luminance(gSrc.SampleLevel(gSampler, posM, 0, int2(0, -1)).rgb);\n  261:     float lumaW = luminance(gSrc.SampleLevel(gSampler, posM, 0, int2(-1, 0)).rgb);\n  262  \n  263      float maxSM = max(lumaS, lumaM);\n  ...\n  277          return color;\n  278  \n  279:     float lumaNW = luminance(gSrc.SampleLevel(gSampler, posM, 0, int2(-1, -1)).rgb);\n  280:     float lumaSE = luminance(gSrc.SampleLevel(gSampler, posM, 0, int2(1, 1)).rgb);\n  281:     float lumaNE = luminance(gSrc.SampleLevel(gSampler, posM, 0, int2(1, -1)).rgb);\n  282:     float lumaSW = luminance(gSrc.SampleLevel(gSampler, posM, 0, int2(-1, 1)).rgb);\n  283  \n  284      float lumaNS = lumaN + lumaS;\n  ...\n  344      posP.y = posB.y + offNP.y * FXAA_QUALITY__P0;\n  345      float subpixD = ((-2.0) * subpixC) + 3.0;\n  346:     float lumaEndN = luminance(gSrc.SampleLevel(gSampler, posN, 0).rgb);\n  347      float subpixE = subpixC * subpixC;\n  348:     float lumaEndP = luminance(gSrc.SampleLevel(gSampler, posP, 0).rgb);\n  349  \n  350      if (!pairN)\n  ...\n  372      {\n  373          if (!doneN)\n  374:             lumaEndN = luminance(gSrc.SampleLevel(gSampler, posN.xy, 0).rgb);\n  375          if (!doneP)\n  376:             lumaEndP = luminance(gSrc.SampleLevel(gSampler, posP.xy, 0).rgb);\n  377          if (!doneN)\n  378              lumaEndN = lumaEndN - lumaNN * 0.5;\n  ...\n  395          {\n  396              if (!doneN)\n  397:                 lumaEndN = luminance(gSrc.SampleLevel(gSampler, posN.xy, 0).rgb);\n  398              if (!doneP)\n  399:                 lumaEndP = luminance(gSrc.SampleLevel(gSampler, posP.xy, 0).rgb);\n  400              if (!doneN)\n  401                  lumaEndN = lumaEndN - lumaNN * 0.5;\n  ...\n  418              {\n  419                  if (!doneN)\n  420:                     lumaEndN = luminance(gSrc.SampleLevel(gSampler, posN.xy, 0).rgb);\n  421                  if (!doneP)\n  422:                     lumaEndP = luminance(gSrc.SampleLevel(gSampler, posP.xy, 0).rgb);\n  423                  if (!doneN)\n  424                      lumaEndN = lumaEndN - lumaNN * 0.5;\n  ...\n  441                  {\n  442                      if (!doneN)\n  443:                         lumaEndN = luminance(gSrc.SampleLevel(gSampler, posN.xy, 0).rgb);\n  444                      if (!doneP)\n  445:                         lumaEndP = luminance(gSrc.SampleLevel(gSampler, posP.xy, 0).rgb);\n  446                      if (!doneN)\n  447                          lumaEndN = lumaEndN - lumaNN * 0.5;\n  ...\n  464                      {\n  465                          if (!doneN)\n  466:                             lumaEndN = luminance(gSrc.SampleLevel(gSampler, posN.xy, 0).rgb);\n  467                          if (!doneP)\n  468:                             lumaEndP = luminance(gSrc.SampleLevel(gSampler, posP.xy, 0).rgb);\n  469                          if (!doneN)\n  470                              lumaEndN = lumaEndN - lumaNN * 0.5;\n  ...\n  487                          {\n  488                              if (!doneN)\n  489:                                 lumaEndN = luminance(gSrc.SampleLevel(gSampler, posN.xy, 0).rgb);\n  490                              if (!doneP)\n  491:                                 lumaEndP = luminance(gSrc.SampleLevel(gSampler, posP.xy, 0).rgb);\n  492                              if (!doneN)\n  493                                  lumaEndN = lumaEndN - lumaNN * 0.5;\n  ...\n  510                              {\n  511                                  if (!doneN)\n  512:                                     lumaEndN = luminance(gSrc.SampleLevel(gSampler, posN.xy, 0).rgb);\n  513                                  if (!doneP)\n  514:                                     lumaEndP = luminance(gSrc.SampleLevel(gSampler, posP.xy, 0).rgb);\n  515                                  if (!doneN)\n  516                                      lumaEndN = lumaEndN - lumaNN * 0.5;\n  ...\n  533                                  {\n  534                                      if (!doneN)\n  535:                                         lumaEndN = luminance(gSrc.SampleLevel(gSampler, posN.xy, 0).rgb);\n  536                                      if (!doneP)\n  537:                                         lumaEndP = luminance(gSrc.SampleLevel(gSampler, posP.xy, 0).rgb);\n  538                                      if (!doneN)\n  539                                          lumaEndN = lumaEndN - lumaNN * 0.5;\n  ...\n  556                                      {\n  557                                          if (!doneN)\n  558:                                             lumaEndN = luminance(gSrc.SampleLevel(gSampler, posN.xy, 0).rgb);\n  559                                          if (!doneP)\n  560:                                             lumaEndP = luminance(gSrc.SampleLevel(gSampler, posP.xy, 0).rgb);\n  561                                          if (!doneN)\n  562                                              lumaEndN = lumaEndN - lumaNN * 0.5;\n  ...\n  579                                          {\n  580                                              if (!doneN)\n  581:                                                 lumaEndN = luminance(gSrc.SampleLevel(gSampler, posN.xy, 0).rgb);\n  582                                              if (!doneP)\n  583:                                                 lumaEndP = luminance(gSrc.SampleLevel(gSampler, posP.xy, 0).rgb);\n  584                                              if (!doneN)\n  585                                                  lumaEndN = lumaEndN - lumaNN * 0.5;\n  ...\n  600  #if (FXAA_QUALITY__PS > 12)\n  601                      if(doneNP) {\n  602:                         if(!doneN) lumaEndN = luminance(gSrc.SampleLevel(gSampler, posN.xy, 0).rgb);\n  603:                         if(!doneP) lumaEndP = luminance(gSrc.SampleLevel(gSampler, posP.xy, 0).rgb);\n  604                          if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n  605                          if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n  ...\n  669      if (horzSpan)\n  670          posM.y += pixelOffsetSubpix * lengthSign;\n  671:     return float4(gSrc.SampleLevel(gSampler, posM, 0).xyz, lumaM);\n  672  }\n  673  /*==========================================================================*/\n\n/media/max/1TB_Ext/dev/Lava/src/RenderPasses/Antialiasing/TAA/TAA.ps.slang:\n   62  \n   63      float3 result =\n   64:         tex.SampleLevel(samp, float2(tc0.x,  tc0.y), 0).rgb  * (w0.x  * w0.y) +\n   65:         tex.SampleLevel(samp, float2(tc0.x,  tc12.y), 0).rgb * (w0.x  * w12.y) +\n   66:         tex.SampleLevel(samp, float2(tc0.x,  tc3.y), 0).rgb  * (w0.x  * w3.y) +\n   67:         tex.SampleLevel(samp, float2(tc12.x, tc0.y), 0).rgb  * (w12.x * w0.y) +\n   68:         tex.SampleLevel(samp, float2(tc12.x, tc12.y), 0).rgb * (w12.x * w12.y) +\n   69:         tex.SampleLevel(samp, float2(tc12.x, tc3.y), 0).rgb  * (w12.x * w3.y) +\n   70:         tex.SampleLevel(samp, float2(tc3.x,  tc0.y), 0).rgb  * (w3.x  * w0.y) +\n   71:         tex.SampleLevel(samp, float2(tc3.x,  tc12.y), 0).rgb * (w3.x  * w12.y) +\n   72:         tex.SampleLevel(samp, float2(tc3.x,  tc3.y), 0).rgb  * (w3.x  * w3.y);\n   73  \n   74      return result;\n\n/media/max/1TB_Ext/dev/Lava/src/RenderPasses/CACAO/CACAO.Apply.cs.slang:\n   38      // calculate final sampling offsets and sample using bilinear filter\n   39      float2  uvH = (inPos.xy + float2(fmx + fmxe - 0.5, 0.5 - fmy)) * 0.5 * g_CACAOConsts.SSAOBufferInverseDimensions;\n   40:     float   aoH = g_ApplyFinalSSAO.SampleLevel(g_LinearClampSampler, float3(uvH, ih), 0).x;\n   41      float2  uvV = (inPos.xy + float2(0.5 - fmx, fmy - 0.5 + fmye)) * 0.5 * g_CACAOConsts.SSAOBufferInverseDimensions;\n   42:     float   aoV = g_ApplyFinalSSAO.SampleLevel(g_LinearClampSampler, float3(uvV, iv), 0).x;\n   43      float2  uvD = (inPos.xy + float2(fmx - 0.5 + fmxe, fmy - 0.5 + fmye)) * 0.5 * g_CACAOConsts.SSAOBufferInverseDimensions;\n   44:     float   aoD = g_ApplyFinalSSAO.SampleLevel(g_LinearClampSampler, float3(uvD, id), 0).x;\n   45  \n   46      // reduce weight for samples near edge - if the edge is on both sides, weight goes to 0\n   ..\n   65  {\n   66      float2 inUV = float2(tid) * g_CACAOConsts.OutputBufferInverseDimensions;\n   67:     float a = g_ApplyFinalSSAO.SampleLevel(g_LinearClampSampler, float3(inUV.xy, 0), 0.0).x;\n   68:     float b = g_ApplyFinalSSAO.SampleLevel(g_LinearClampSampler, float3(inUV.xy, 1), 0.0).x;\n   69:     float c = g_ApplyFinalSSAO.SampleLevel(g_LinearClampSampler, float3(inUV.xy, 2), 0.0).x;\n   70:     float d = g_ApplyFinalSSAO.SampleLevel(g_LinearClampSampler, float3(inUV.xy, 3), 0.0).x;\n   71      float avg = (a + b + c + d) * 0.25;\n   72      g_ApplyOutput[tid] = avg;\n   ..\n   78  {\n   79      float2 inUV = float2(tid) * g_CACAOConsts.OutputBufferInverseDimensions;\n   80:     float a = g_ApplyFinalSSAO.SampleLevel(g_LinearClampSampler, float3(inUV.xy, 0), 0.0).x;\n   81:     float d = g_ApplyFinalSSAO.SampleLevel(g_LinearClampSampler, float3(inUV.xy, 3), 0.0).x;\n   82      float avg = (a + d) * 0.5;\n   83      g_ApplyOutput[tid] = avg;\n\n/media/max/1TB_Ext/dev/Lava/src/RenderPasses/CACAO/CACAO.Blur.cs.slang:\n   13  {\n   14      float3 fullCoord = float3(coord, 0.0f);\n   15:     float2 vC = g_BlurInput.SampleLevel(g_PointMirrorSampler, fullCoord, 0.0, int2(0, 0)).xy;\n   16:     float2 vL = g_BlurInput.SampleLevel(g_PointMirrorSampler, fullCoord, 0.0, int2(-2, 0)).xy;\n   17:     float2 vT = g_BlurInput.SampleLevel(g_PointMirrorSampler, fullCoord, 0.0, int2(0, -2)).xy;\n   18:     float2 vR = g_BlurInput.SampleLevel(g_PointMirrorSampler, fullCoord, 0.0, int2(2, 0)).xy;\n   19:     float2 vB = g_BlurInput.SampleLevel(g_PointMirrorSampler, fullCoord, 0.0, int2(0, 2)).xy;\n   20  \n   21      float packedEdges = vC.y;\n   ..\n  127              for (int x = 0; x < TILE_WIDTH; ++x)\n  128              {\n  129:                 input[x][y] = g_BlurInput.SampleLevel(g_PointMirrorSampler, float3((imageCoord + int2(x, y) + 0.5f) * g_CACAOConsts.SSAOBufferInverseDimensions, 0.0f), 0).xy;\n  130              }\n  131          }\n\n/media/max/1TB_Ext/dev/Lava/src/RenderPasses/CACAO/CACAO.Prepare.cs.slang:\n  136      float4 samples;\n  137  #if 1\n  138:     samples.x = g_DepthIn.SampleLevel(g_PointClampSampler, uv, 0, int2(0, 2));\n  139:     samples.y = g_DepthIn.SampleLevel(g_PointClampSampler, uv, 0, int2(2, 2));\n  140:     samples.z = g_DepthIn.SampleLevel(g_PointClampSampler, uv, 0, int2(2, 0));\n  141:     samples.w = g_DepthIn.SampleLevel(g_PointClampSampler, uv, 0, int2(0, 0));\n  142  #else\n  143      samples.x = g_DepthIn[depthBufferCoord + uint2(0, 2)];\n  ...\n  180      float2 uv = (float2(depthBufferCoord)+0.5f) * g_CACAOConsts.DepthBufferInverseDimensions;\n  181      float4 samples;\n  182:     samples.x = g_DepthIn.SampleLevel(g_PointClampSampler, uv, 0, int2(0, 2));\n  183:     samples.y = g_DepthIn.SampleLevel(g_PointClampSampler, uv, 0, int2(2, 2));\n  184:     samples.z = g_DepthIn.SampleLevel(g_PointClampSampler, uv, 0, int2(2, 0));\n  185:     samples.w = g_DepthIn.SampleLevel(g_PointClampSampler, uv, 0, int2(0, 0));\n  186      \n  187      PrepareDepths(samples, tid);\n  ...\n  350  float3 PrepareNormalsFromInputNormalsLoadNormal(int2 pos)\n  351  {\n  352:     float3 encodedNormal = g_PrepareNormalsFromNormalsInput.SampleLevel(g_PointClampSampler, (float2(pos)+0.5f) * g_CACAOConsts.OutputBufferInverseDimensions, 0).xyz;\n  353      return DecodeNormal(encodedNormal);\n  354  }\n\n/media/max/1TB_Ext/dev/Lava/src/RenderPasses/CACAO/CACAO.ps.slang:\n   53      pos.y = -pos.y;\n   54  #endif\n   55:     pos.z = gDepthTex.SampleLevel(gTextureSampler, uv, 0).r;\n   56      pos.w = 1.0f;\n   57  \n   ..\n   63  \n   64  float4 main(float2 texC : TEXCOORD) : SV_TARGET0 {\n   65:     if (gDepthTex.SampleLevel(gTextureSampler, texC, 0).r >= 1)\n   66      {\n   67          return 1.0f;\n\n/media/max/1TB_Ext/dev/Lava/src/RenderPasses/CACAO/CACAO.SSAO.cs.slang:\n   61  {\n   62      // get depth at sample\n   63:     float viewspaceSampleZ = g_ViewspaceDepthSource.SampleLevel(g_ViewspaceDepthTapSampler, float3(samplingUV.xy, 0.0f), mipLevel).x; // * g_CACAOConsts.MaxViewspaceDepth;\n   64  \n   65      // convert to viewspace\n   ..\n  152  \n  153      float2 sampleUV = depthBufferUV + sampleOffset;\n  154:     result.hits[0] = float3(sampleUV, g_ViewspaceDepthSource.SampleLevel(g_ViewspaceDepthTapSampler, float3(sampleUV, 0.0f), mipLevel).x);\n  155  \n  156      sampleUV = depthBufferUV - sampleOffset;\n  157:     result.hits[1] = float3(sampleUV, g_ViewspaceDepthSource.SampleLevel(g_ViewspaceDepthTapSampler, float3(sampleUV, 0.0f), mipLevel).x);\n  158  \n  159      return result;\n  ...\n  189      result.weightMod = data.weightMod;\n  190      float2 sampleUV = depthBufferUV + data.uvOffset;\n  191:     result.hits[0] = float3(sampleUV, g_ViewspaceDepthSource.SampleLevel(g_ViewspaceDepthTapSampler, float3(sampleUV, 0.0f), data.mipLevel).x);\n  192      sampleUV = depthBufferUV - data.uvOffset;\n  193:     result.hits[1] = float3(sampleUV, g_ViewspaceDepthSource.SampleLevel(g_ViewspaceDepthTapSampler, float3(sampleUV, 0.0f), data.mipLevel).x);\n  194      return result;\n  195  }\n  ...\n  241  \n  242      // get this pixel's viewspace depth\n  243:     pixZ = valuesUL.y; //float pixZ = g_ViewspaceDepthSource.SampleLevel( g_PointMirrorSampler, float3(normalizedScreenPos, 0.0f), 0.0 ).x; // * g_CACAOConsts.MaxViewspaceDepth;\n  244  \n  245      // get left right top bottom neighbouring pixels for edge detection (gets compiled out on qualityLevel == 0)\n  ...\n  383  #if 0\n  384          float4 newSample = g_samplePatternMain[0];\n  385:         // float zero = g_ZeroTexture.SampleLevel(g_PointClampSampler, float2(0.5f, 0.5f), 0);\n  386          SSAOSampleData data = SSAOGetSampleData(qualityLevel, rotScale, newSample, mipOffset);\n  387          SSAOHits hits = SSAOGetHits2(data, depthBufferUV);\n  ...\n  393          for (int i = 0; i < numberOfTaps - 1; ++i)\n  394          {\n  395:             // zero = g_ZeroTexture.SampleLevel(g_PointClampSampler, float2(0.5f + zero, 0.5f), 0);\n  396              SSAOHits nextHits = SSAOGetHits2(data, depthBufferUV);\n  397              // hits.hits[0].x += zero;\n  ...\n  424          // add new ones if needed\n  425          float2 fullResUV = normalizedScreenPos + g_CACAOConsts.PerPassFullResUVOffset.xy;\n  426:         float importance = g_ImportanceMap.SampleLevel(g_LinearClampSampler, fullResUV, 0.0).x;\n  427  \n  428          // this is to normalize SSAO_DETAIL_AO_AMOUNT across all pixel regardless of importance\n  ...\n  461                  SSAOHits nextHits = SSAOGetHits2(data, depthBufferUV);\n  462  \n  463:                 // float zero = g_ZeroTexture.SampleLevel(g_ZeroTextureSampler, (float)i, 0.0f);\n  464                  // hits.weightMod += zero;\n  465  \n\n/media/max/1TB_Ext/dev/Lava/src/RenderPasses/CACAO/CACAO.Upscale.cs.slang:\n   48  \n   49              float depth = g_BilateralUpscaleDownscaledDepth[depthArrayBufferCoord];\n   50:             float ssaoVal = g_BilateralUpscaleInput.SampleLevel(g_PointClampSampler, float3((float2(ssaoArrayBufferCoord.xy) + 0.5f) * g_CACAOConsts.SSAOBufferInverseDimensions, ssaoArrayBufferCoord.z), 0).x;\n   51  \n   52              bufferVal.packedDepths = DoublePackFloat16(depth);\n   ..\n  176  \n  177              float depth = g_BilateralUpscaleDownscaledDepth[depthArrayBufferCoord];\n  178:             // float ssaoVal = g_BilateralUpscaleInput.SampleLevel(g_PointClampSampler, float3((float2(ssaoArrayBufferCoord.xy) + 0.5f) * g_CACAOConsts.HalfViewportPixelSize, ssaoArrayBufferCoord.z), 0);\n  179:             float ssaoVal = g_BilateralUpscaleInput.SampleLevel(g_PointClampSampler, float3((float2(ssaoArrayBufferCoord.xy) + 0.5f) * g_CACAOConsts.SSAOBufferInverseDimensions, ssaoArrayBufferCoord.z), 0).x;\n  180  \n  181              bufferVal.packedDepths = DoublePackFloat16(depth);\n\n/media/max/1TB_Ext/dev/Lava/src/RenderPasses/HBAO/HBAO.Common.slangh:\n  148  \n  149  float sampleDepthTexture(float2 uv) {\n  150:   return gDepthTex.SampleLevel(gDepthSampler, uv + (float2(0.5) / float2(gFrameDim)) , 0).r;\n  151  }\n  152  \n  153  float sampleHiMaxZTexture(float2 uv, int mipLevel) {\n  154:   return gHiMaxZTex.SampleLevel(gDepthSampler, uv + (float2(0.5) / float2(gFrameDim)) , mipLevel).r;\n  155  }\n  156  \n\n/media/max/1TB_Ext/dev/Lava/src/RenderPasses/HBAO/HBAO.ComputeHorizons.cs.slang:\n   45  \n   46    float3 viewPosition = getViewPositionFromDepth(uvs, depth).xyz;\n   47:   float4 noise = gNoiseTex.SampleLevel(gNoiseSampler, ((ipos + gNoiseOffset) / float2(64)), 0);\n   48    float2 max_dir = getMaxDir(viewPosition.z);\n   49    \n\n/media/max/1TB_Ext/dev/Lava/src/RenderPasses/SkyBox/SkyBox.3d.slang:\n   74          return gTexture.Sample(gSampler, uv) * float4(intensity, gOpacity);\n   75      #else\n   76:         return gTexture.SampleLevel(gSampler, normalize(dir), 0) * float4(intensity, gOpacity);\n   77      #endif\n   78  #endif\n\n/media/max/1TB_Ext/dev/Lava/src/RenderPasses/SSAO/ApplyAO.ps.slang:\n   35  float4 main(float2 texC : TEXCOORD) : SV_TARGET0\n   36  {\n   37:     return applyAmbientOcclusion(gColor.SampleLevel(gSampler, texC, 0), gAOMap, gSampler, texC);\n   38  }\n   39  \n\n/media/max/1TB_Ext/dev/Lava/src/RenderPasses/SSAO/SSAO.ps.slang:\n   55      pos.y = -pos.y;\n   56  #endif\n   57:     pos.z = gDepthTex.SampleLevel(gTextureSampler, uv, 0).r;\n   58      pos.w = 1.0f;\n   59  \n   ..\n   66  float4 main(float2 texC : TEXCOORD) : SV_TARGET0\n   67  {\n   68:     if (gDepthTex.SampleLevel(gTextureSampler, texC, 0).r >= 1)\n   69      {\n   70          return 1.0f;\n\n/media/max/1TB_Ext/dev/Lava/src/RenderPasses/ToneMapper/ToneMapping.ps.slang:\n  154  #ifdef _TONE_MAPPER_AUTO_EXPOSURE\n  155      // apply auto exposure\n  156:     float avgLuminance = exp2(gLuminanceTex.SampleLevel(gLuminanceTexSampler, texC, kLuminanceLod).r);\n  157      float pixelLuminance = calcLuminance(finalColor);\n  158      finalColor *= (kExposureKey / avgLuminance);\n\n/media/max/1TB_Ext/dev/Lava/src/RenderPasses/Utils/GaussianBlur/GaussianBlur.ps.slang:\n   65      {\n   66  #ifdef _USE_TEX2D_ARRAY\n   67:         c += gSrcTex.SampleLevel(gSampler, float3(texC, arrayIndex), 0, offset + i*dir)*weights[i];\n   68  #else\n   69:         c += gSrcTex.SampleLevel(gSampler, texC, 0, offset + i*dir)*weights[i];\n   70  #endif\n   71      }\n\n92 matches across 15 files\n",
			"settings":
			{
				"buffer_size": 51495,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "src/lava_lib/reader_lsd/session.h",
			"settings":
			{
				"buffer_size": 6042,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "src/Falcor/Core/API/GFX/GFXCopyContext.cpp",
			"settings":
			{
				"buffer_size": 20089,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAH4cAAAAAAAAfxwAAAAAAAAAAAAAfxwAAAAAAACAHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfhwAAAAAAAB+HAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAL4gAAAAAAAAvyAAAAAAAAAAAAAAvyAAAAAAAADAIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAviAAAAAAAAC+IAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAEMiAAAAAAAARCIAAAAAAAAAAAAARCIAAAAAAABFIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQyIAAAAAAABDIgAAAAAAAAAAAAAAAAAA"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAOsjAAAAAAAA7CMAAAAAAAAAAAAA7CMAAAAAAADtIwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6yMAAAAAAADrIwAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAABslAAAAAAAAHCUAAAAAAAAAAAAAHCUAAAAAAAAdJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGyUAAAAAAAAbJQAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAAYmAAAAAAAAByYAAAAAAAAAAAAAByYAAAAAAAAIJgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABiYAAAAAAAAGJgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKTexture.cpp",
			"settings":
			{
				"buffer_size": 25356,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABowAAAAAAAAGzAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGjAAAAAAAAAaMAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"paste",
					null,
					"AQAAABowAAAAAAAANDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGjAAAAAAAAAaMAAAAAAAAAAAAAAAAAAA"
				],
				[
					5,
					25,
					"left_delete",
					null,
					"GQAAADMwAAAAAAAAMzAAAAAAAAABAAAAOjIwAAAAAAAAMjAAAAAAAAABAAAAZTEwAAAAAAAAMTAAAAAAAAABAAAAejAwAAAAAAAAMDAAAAAAAAABAAAAaS8wAAAAAAAALzAAAAAAAAABAAAAcy4wAAAAAAAALjAAAAAAAAABAAAAIC0wAAAAAAAALTAAAAAAAAABAAAAZSwwAAAAAAAALDAAAAAAAAABAAAAYyswAAAAAAAAKzAAAAAAAAABAAAAYSowAAAAAAAAKjAAAAAAAAABAAAAcCkwAAAAAAAAKTAAAAAAAAABAAAAcygwAAAAAAAAKDAAAAAAAAABAAAAICcwAAAAAAAAJzAAAAAAAAABAAAAcyYwAAAAAAAAJjAAAAAAAAABAAAAcyUwAAAAAAAAJTAAAAAAAAABAAAAZSQwAAAAAAAAJDAAAAAAAAABAAAAciMwAAAAAAAAIzAAAAAAAAABAAAAZCIwAAAAAAAAIjAAAAAAAAABAAAAZCEwAAAAAAAAITAAAAAAAAABAAAAYSAwAAAAAAAAIDAAAAAAAAABAAAAIB8wAAAAAAAAHzAAAAAAAAABAAAAZR4wAAAAAAAAHjAAAAAAAAABAAAAcx0wAAAAAAAAHTAAAAAAAAABAAAAchwwAAAAAAAAHDAAAAAAAAABAAAAYRswAAAAAAAAGzAAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAANDAAAAAAAAA0MAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"left_delete",
					null,
					"AQAAABowAAAAAAAAGjAAAAAAAAABAAAAUw",
					"AQAAAAAAAAABAAAAGzAAAAAAAAAbMAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "#ifdef"
					},
					"BgAAABowAAAAAAAAGzAAAAAAAAAAAAAAGzAAAAAAAAAcMAAAAAAAAAAAAAAcMAAAAAAAAB0wAAAAAAAAAAAAAB0wAAAAAAAAHjAAAAAAAAAAAAAAHjAAAAAAAAAfMAAAAAAAAAAAAAAfMAAAAAAAACAwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGjAAAAAAAAAaMAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": " _D"
					},
					"AwAAACAwAAAAAAAAITAAAAAAAAAAAAAAITAAAAAAAAAiMAAAAAAAAAAAAAAiMAAAAAAAACMwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIDAAAAAAAAAgMAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert_completion",
					{
						"completion": "_DEBUG",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "_DEBUG"
					},
					"AgAAACEwAAAAAAAAITAAAAAAAAACAAAAX0QhMAAAAAAAACcwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIzAAAAAAAAAjMAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALowAAAAAAAAuzAAAAAAAAAAAAAAuzAAAAAAAADHMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAujAAAAAAAAC6MAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					3,
					"left_delete",
					null,
					"AwAAALYwAAAAAAAAtjAAAAAAAAAEAAAAICAgILIwAAAAAAAAsjAAAAAAAAAEAAAAICAgIK4wAAAAAAAArjAAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAujAAAAAAAAC6MAAAAAAAAAAAAAAAAFtA"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "#ew"
					},
					"AwAAAK4wAAAAAAAArzAAAAAAAAAAAAAArzAAAAAAAACwMAAAAAAAAAAAAACwMAAAAAAAALEwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArjAAAAAAAACuMAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"left_delete",
					null,
					"AQAAALAwAAAAAAAAsDAAAAAAAAABAAAAdw",
					"AQAAAAAAAAABAAAAsTAAAAAAAACxMAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert_completion",
					{
						"completion": "endif",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "endif"
					},
					"AgAAAK8wAAAAAAAArzAAAAAAAAABAAAAZa8wAAAAAAAAtDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsDAAAAAAAACwMAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/Utils/Timing/Profiler.cpp",
			"settings":
			{
				"buffer_size": 15284,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"right_delete",
					null,
					"AQAAANAfAAAAAAAA0B8AAAAAAAAfAAAAcHJpbnRmKCJjYXB0dXJlRXZlbnRzXG4iKTsKICAgIA",
					"AQAAAAAAAAABAAAA0B8AAAAAAADvHwAAAAAAAAAAAAAAAEJA"
				],
				[
					7,
					1,
					"right_delete",
					null,
					"AQAAAOofAAAAAAAA6h8AAAAAAAAfAAAAICAgIHByaW50Zigibm8gZXZlbnRzXG4iKTsKICAgIA",
					"AQAAAAAAAAABAAAA6h8AAAAAAAAJIAAAAAAAAAAAAAAAAEJA"
				],
				[
					12,
					1,
					"right_delete",
					null,
					"AQAAAPEhAAAAAAAA8SEAAAAAAABHAAAAcHJpbnRmKCIlenUgZXZlbnRzIGNhcHR1cmVkIGZpcnN0IHRpbWUhISEhXG4iLCBldmVudHMuc2l6ZSgpKTsKICAgICAgICA",
					"AQAAAAAAAAABAAAA8SEAAAAAAAA4IgAAAAAAAAAAAAAAAFJA"
				],
				[
					17,
					1,
					"left_delete",
					null,
					"AQAAAEkjAAAAAAAASSMAAAAAAAA6AAAAcHJpbnRmKCIlenUgZXZlbnRzIGNhcHR1cmVkICEhISFcbiIsIGV2ZW50cy5zaXplKCkpOwoKICAgIA",
					"AQAAAAAAAAABAAAASSMAAAAAAACDIwAAAAAAAAAAAAAAAEJA"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/Buffer.cpp",
			"settings":
			{
				"buffer_size": 12058,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"right_delete",
					null,
					"AQAAALMpAAAAAAAAsykAAAAAAAASAAAAcHJpbnRmKCJfMVxuIik7CgkJ",
					"AQAAAAAAAAABAAAAsykAAAAAAADFKQAAAAAAAAAAAAAAAEJA"
				],
				[
					12,
					1,
					"right_delete",
					null,
					"AQAAAP4pAAAAAAAA/ikAAAAAAAAVAAAAcHJpbnRmKCJfMV8xXG4iKTsKCQkJ",
					"AQAAAAAAAAABAAAA/ikAAAAAAAATKgAAAAAAAAAAAAAAAEtA"
				],
				[
					15,
					1,
					"right_delete",
					null,
					"AQAAANwqAAAAAAAA3CoAAAAAAAAVAAAAcHJpbnRmKCJfMV8yXG4iKTsKCQkJ",
					"AQAAAAAAAAABAAAA3CoAAAAAAADxKgAAAAAAAAAAAAAAAEtA"
				],
				[
					18,
					1,
					"right_delete",
					null,
					"AQAAADwrAAAAAAAAPCsAAAAAAAAVAAAAcHJpbnRmKCJfMV8zXG4iKTsKCQkJ",
					"AQAAAAAAAAABAAAAPCsAAAAAAABRKwAAAAAAAAAAAAAAAEtA"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/Texture.cpp",
			"settings":
			{
				"buffer_size": 22555,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					13,
					1,
					"left_delete",
					null,
					"AQAAAINNAAAAAAAAg00AAAAAAAAaAAAACWFzc2VydCghbUlzVURJTVRleHR1cmUpOwo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACDTQAAAAAAAJ1NAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/Falcor/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 6682,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\nmessage"
					},
					"CAAAAJAHAAAAAAAAkQcAAAAAAAAAAAAAkQcAAAAAAACSBwAAAAAAAAAAAACSBwAAAAAAAJMHAAAAAAAAAAAAAJMHAAAAAAAAlAcAAAAAAAAAAAAAlAcAAAAAAACVBwAAAAAAAAAAAACVBwAAAAAAAJYHAAAAAAAAAAAAAJYHAAAAAAAAlwcAAAAAAAAAAAAAlwcAAAAAAACYBwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACQBwAAAAAAAJAHAAAAAAAAAAAAAAAA8L8"
				],
				[
					4,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJgHAAAAAAAAmgcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACYBwAAAAAAAJgHAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJkHAAAAAAAAmgcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZBwAAAAAAAJkHAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAJoHAAAAAAAAnAcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaBwAAAAAAAJoHAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "Deps"
					},
					"BAAAAJsHAAAAAAAAnAcAAAAAAAAAAAAAnAcAAAAAAACdBwAAAAAAAAAAAACdBwAAAAAAAJ4HAAAAAAAAAAAAAJ4HAAAAAAAAnwcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACbBwAAAAAAAJsHAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": " root"
					},
					"BQAAAJ8HAAAAAAAAoAcAAAAAAAAAAAAAoAcAAAAAAAChBwAAAAAAAAAAAAChBwAAAAAAAKIHAAAAAAAAAAAAAKIHAAAAAAAAowcAAAAAAAAAAAAAowcAAAAAAACkBwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACfBwAAAAAAAJ8HAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKQHAAAAAAAApQcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACkBwAAAAAAAKQHAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKYHAAAAAAAApwcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACmBwAAAAAAAKYHAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "$"
					},
					"AQAAAKcHAAAAAAAAqAcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACnBwAAAAAAAKcHAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAKgHAAAAAAAAqgcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACoBwAAAAAAAKgHAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"paste",
					null,
					"AQAAAKkHAAAAAAAAsQcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpBwAAAAAAAKkHAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"paste",
					null,
					"AgAAAFEUAAAAAAAAVhQAAAAAAAAAAAAAVhQAAAAAAABWFAAAAAAAAAQAAABnbGZ3",
					"AQAAAAAAAAABAAAAURQAAAAAAABVFAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"left_delete",
					null,
					"AQAAAKAVAAAAAAAAoBUAAAAAAAAbAAAAICAgIC8vJHtTTEFOR19HRlhfTElCUkFSWX0K",
					"AQAAAAAAAAABAAAAoBUAAAAAAAC7FQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/GFX/GFXDevice.cpp",
			"settings":
			{
				"buffer_size": 21084,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACFHAAAAAAAAIkcAAAAAAAAAAAAAIkcAAAAAAAAkRwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIUcAAAAAAAAhRwAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					2,
					"left_delete",
					null,
					"AgAAACNHAAAAAAAAI0cAAAAAAAABAAAACSJHAAAAAAAAIkcAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAAJEcAAAAAAAAkRwAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAMZHAAAAAAAAx0cAAAAAAAAAAAAAx0cAAAAAAADIRwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxkcAAAAAAADGRwAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFUsAAAAAAAAViwAAAAAAAAAAAAAViwAAAAAAABXLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVSwAAAAAAABVLAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"paste",
					null,
					"AQAAAFcsAAAAAAAAdywAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVywAAAAAAABXLAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": " з"
					},
					"AgAAAHcsAAAAAAAAeCwAAAAAAAAAAAAAeCwAAAAAAAB5LAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdywAAAAAAAB3LAAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " Е"
					},
					"AgAAAHksAAAAAAAAeiwAAAAAAAAAAAAAeiwAAAAAAAB7LAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeSwAAAAAAAB5LAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					3,
					"left_delete",
					null,
					"AwAAAHosAAAAAAAAeiwAAAAAAAACAAAA0JV5LAAAAAAAAHksAAAAAAAAAQAAACB4LAAAAAAAAHgsAAAAAAAAAgAAANC3",
					"AQAAAAAAAAABAAAAeywAAAAAAAB7LAAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "P"
					},
					"AQAAAHgsAAAAAAAAeSwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeCwAAAAAAAB4LAAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"left_delete",
					null,
					"AQAAAHgsAAAAAAAAeCwAAAAAAAABAAAAUA",
					"AQAAAAAAAAABAAAAeSwAAAAAAAB5LAAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "pTe"
					},
					"AwAAAHgsAAAAAAAAeSwAAAAAAAAAAAAAeSwAAAAAAAB6LAAAAAAAAAAAAAB6LAAAAAAAAHssAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeCwAAAAAAAB4LAAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert_completion",
					{
						"completion": "pTexture",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "pTexture"
					},
					"AgAAAHgsAAAAAAAAeCwAAAAAAAADAAAAcFRleCwAAAAAAACALAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeywAAAAAAAB7LAAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIAsAAAAAAAAgSwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgCwAAAAAAACALAAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "pTextu"
					},
					"BgAAAL8sAAAAAAAAwCwAAAAAAAAAAAAAwCwAAAAAAADBLAAAAAAAAAAAAADBLAAAAAAAAMIsAAAAAAAAAAAAAMIsAAAAAAAAwywAAAAAAAAAAAAAwywAAAAAAADELAAAAAAAAAAAAADELAAAAAAAAMUsAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvywAAAAAAAC/LAAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "re,"
					},
					"AwAAAMUsAAAAAAAAxiwAAAAAAAAAAAAAxiwAAAAAAADHLAAAAAAAAAAAAADHLAAAAAAAAMgsAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxSwAAAAAAADFLAAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMgsAAAAAAAAySwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyCwAAAAAAADILAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/GFX/GFXTexture.cpp",
			"settings":
			{
				"buffer_size": 7742,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "src/gfx_lib/debug-layer.cpp",
			"settings":
			{
				"buffer_size": 61434,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "cmake/SuperBuild.cmake",
			"settings":
			{
				"buffer_size": 1814,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAFgCAAAAAAAAWQIAAAAAAAAAAAAAWQIAAAAAAABaAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABYAgAAAAAAAFgCAAAAAAAAAAAAAAAAAAA"
				],
				[
					5,
					1,
					"paste",
					null,
					"AQAAAFoCAAAAAAAAFQMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABaAgAAAAAAAFoCAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAOIAAAAAAAAA4wAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADiAAAAAAAAAOIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"reindent",
					null,
					"AQAAAOMAAAAAAAAA5QAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADjAAAAAAAAAOMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "set"
					},
					"AwAAAOUAAAAAAAAA5gAAAAAAAAAAAAAA5gAAAAAAAADnAAAAAAAAAAAAAADnAAAAAAAAAOgAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADlAAAAAAAAAOUAAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOgAAAAAAAAA6gAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADoAAAAAAAAAOgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"paste",
					null,
					"AQAAAOkAAAAAAAAA+AAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADpAAAAAAAAAOkAAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPgAAAAAAAAA+QAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD4AAAAAAAAAPgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"paste",
					null,
					"AQAAAPkAAAAAAAAADAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5AAAAAAAAAPkAAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAALwBAAAAAAAAvQEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8AQAAAAAAALwBAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"paste",
					null,
					"AQAAAL0BAAAAAAAA5QEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9AQAAAAAAAL0BAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAL0BAAAAAAAAvwEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9AQAAAAAAAL0BAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"paste",
					null,
					"AgAAAMMBAAAAAAAA0wEAAAAAAAAAAAAA0wEAAAAAAADTAQAAAAAAAA8AAABERVBTX0JVSUxEX1RZUEU",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDAQAAAAAAANIBAAAAAAAAAAAAAAAA8L8"
				],
				[
					49,
					1,
					"paste",
					null,
					"AgAAALUCAAAAAAAAxAIAAAAAAAAAAAAAxAIAAAAAAADEAgAAAAAAABAAAABDTUFLRV9CVUlMRF9UWVBF",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1AgAAAAAAAMUCAAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					1,
					"paste",
					null,
					"AQAAALACAAAAAAAA5AIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwAgAAAAAAALACAAAAAAAAAAAAAAAA8L8"
				],
				[
					60,
					1,
					"paste",
					null,
					"AgAAAMICAAAAAAAA0QIAAAAAAAAAAAAA0QIAAAAAAADRAgAAAAAAABIAAABGQUxDT1JfQVBJX0JBQ0tFTkQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCAgAAAAAAANQCAAAAAAAAAAAAAAAA8L8"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": "deps_"
					},
					"BgAAANMCAAAAAAAA1AIAAAAAAAAAAAAA1AIAAAAAAADUAgAAAAAAAAcAAABiYWNrZW5k1AIAAAAAAADVAgAAAAAAAAAAAADVAgAAAAAAANYCAAAAAAAAAAAAANYCAAAAAAAA1wIAAAAAAAAAAAAA1wIAAAAAAADYAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADTAgAAAAAAANoCAAAAAAAAAAAAAAAA8L8"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "builf"
					},
					"BQAAANgCAAAAAAAA2QIAAAAAAAAAAAAA2QIAAAAAAADaAgAAAAAAAAAAAADaAgAAAAAAANsCAAAAAAAAAAAAANsCAAAAAAAA3AIAAAAAAAAAAAAA3AIAAAAAAADdAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADYAgAAAAAAANgCAAAAAAAAAAAAAAAA8L8"
				],
				[
					65,
					1,
					"left_delete",
					null,
					"AQAAANwCAAAAAAAA3AIAAAAAAAABAAAAZg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADdAgAAAAAAAN0CAAAAAAAAAAAAAAAA8L8"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAANwCAAAAAAAA3QIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADcAgAAAAAAANwCAAAAAAAAAAAAAAAA8L8"
				],
				[
					73,
					1,
					"paste",
					null,
					"AgAAAOUCAAAAAAAABQMAAAAAAAAAAAAABQMAAAAAAAAFAwAAAAAAACcAAABpZiAoREVQU19CVUlMRF9UWVBFIFNUUkVRVUFMICJSZWxlYXNlIik",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAMAwAAAAAAAOUCAAAAAAAAAAAAAAAA8L8"
				],
				[
					81,
					1,
					"paste",
					null,
					"AgAAAOgCAAAAAAAA9wIAAAAAAAAAAAAA9wIAAAAAAAD3AgAAAAAAAAwAAABiYWNrZW5kX3R5cGU",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADoAgAAAAAAAPQCAAAAAAAAAAAAAAAA8L8"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": "release"
					},
					"CAAAAAIDAAAAAAAAAwMAAAAAAAAAAAAAAwMAAAAAAAADAwAAAAAAAAMAAABnZngDAwAAAAAAAAQDAAAAAAAAAAAAAAQDAAAAAAAABQMAAAAAAAAAAAAABQMAAAAAAAAGAwAAAAAAAAAAAAAGAwAAAAAAAAcDAAAAAAAAAAAAAAcDAAAAAAAACAMAAAAAAAAAAAAACAMAAAAAAAAJAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACAwAAAAAAAAUDAAAAAAAAAAAAAAAA8L8"
				],
				[
					87,
					1,
					"left_delete",
					null,
					"AQAAAAsDAAAAAAAACwMAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAMAwAAAAAAAAwDAAAAAAAAAAAAAABAdEA"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAJ8DAAAAAAAAoAMAAAAAAAAAAAAAoAMAAAAAAAChAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACfAwAAAAAAAJ8DAAAAAAAAAAAAAAAAAAA"
				],
				[
					94,
					1,
					"paste",
					null,
					"AQAAAKADAAAAAAAA1wMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACgAwAAAAAAAKADAAAAAAAAAAAAAAAAAAA"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": "External"
					},
					"CQAAAKkDAAAAAAAAqgMAAAAAAAAAAAAAqgMAAAAAAACqAwAAAAAAABQAAABVc2luZyBGYWxjb3IgYmFja2VuZKoDAAAAAAAAqwMAAAAAAAAAAAAAqwMAAAAAAACsAwAAAAAAAAAAAACsAwAAAAAAAK0DAAAAAAAAAAAAAK0DAAAAAAAArgMAAAAAAAAAAAAArgMAAAAAAACvAwAAAAAAAAAAAACvAwAAAAAAALADAAAAAAAAAAAAALADAAAAAAAAsQMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpAwAAAAAAAL0DAAAAAAAAAAAAAAAA8L8"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAALEDAAAAAAAAsgMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxAwAAAAAAALEDAAAAAAAAAAAAAAAA8L8"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": " build"
					},
					"BgAAALIDAAAAAAAAswMAAAAAAAAAAAAAswMAAAAAAAC0AwAAAAAAAAAAAAC0AwAAAAAAALUDAAAAAAAAAAAAALUDAAAAAAAAtgMAAAAAAAAAAAAAtgMAAAAAAAC3AwAAAAAAAAAAAAC3AwAAAAAAALgDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyAwAAAAAAALIDAAAAAAAAAAAAAAAA8L8"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": " type"
					},
					"BQAAALgDAAAAAAAAuQMAAAAAAAAAAAAAuQMAAAAAAAC6AwAAAAAAAAAAAAC6AwAAAAAAALsDAAAAAAAAAAAAALsDAAAAAAAAvAMAAAAAAAAAAAAAvAMAAAAAAAC9AwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4AwAAAAAAALgDAAAAAAAAAAAAAAAA8L8"
				],
				[
					108,
					1,
					"paste",
					null,
					"AgAAAMMDAAAAAAAA0gMAAAAAAAAAAAAA0gMAAAAAAADSAwAAAAAAABIAAABGQUxDT1JfQVBJX0JBQ0tFTkQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDAwAAAAAAANUDAAAAAAAAAAAAAAAA8L8"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": " -D"
					},
					"AwAAAOYEAAAAAAAA5wQAAAAAAAAAAAAA5wQAAAAAAADoBAAAAAAAAAAAAADoBAAAAAAAAOkEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmBAAAAAAAAOYEAAAAAAAAAAAAAAAA8L8"
				],
				[
					116,
					1,
					"paste",
					null,
					"AQAAAOkEAAAAAAAA/gQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADpBAAAAAAAAOkEAAAAAAAAAAAAAAAA8L8"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": "=$"
					},
					"AgAAAP4EAAAAAAAA/wQAAAAAAAAAAAAA/wQAAAAAAAAABQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD+BAAAAAAAAP4EAAAAAAAAAAAAAAAA8L8"
				],
				[
					118,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAAAFAAAAAAAAAgUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAABQAAAAAAAAAFAAAAAAAAAAAAAAAA8L8"
				],
				[
					119,
					1,
					"paste",
					null,
					"AQAAAAEFAAAAAAAAFgUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABBQAAAAAAAAEFAAAAAAAAAAAAAAAA8L8"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKwFAAAAAAAArQUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsBQAAAAAAAKwFAAAAAAAAAAAAAAAA8L8"
				],
				[
					126,
					1,
					"paste",
					null,
					"AQAAAK0FAAAAAAAA3QUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtBQAAAAAAAK0FAAAAAAAAAAAAAAAA8L8"
				],
				[
					135,
					3,
					"right_delete",
					null,
					"AwAAAD4DAAAAAAAAPgMAAAAAAAABAAAALj4DAAAAAAAAPgMAAAAAAAABAAAALj4DAAAAAAAAPgMAAAAAAAABAAAALw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA+AwAAAAAAAD4DAAAAAAAAAAAAAAAA8L8"
				],
				[
					137,
					3,
					"right_delete",
					null,
					"AwAAAIUDAAAAAAAAhQMAAAAAAAABAAAALoUDAAAAAAAAhQMAAAAAAAABAAAALoUDAAAAAAAAhQMAAAAAAAABAAAALw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACFAwAAAAAAAIUDAAAAAAAAAAAAAAAgfEA"
				],
				[
					144,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAsDAAAAAAAADAMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALAwAAAAAAAAsDAAAAAAAAAAAAAAAA8L8"
				],
				[
					145,
					1,
					"reindent",
					null,
					"AQAAAAwDAAAAAAAADgMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAMAwAAAAAAAAwDAAAAAAAAAAAAAAAA8L8"
				],
				[
					146,
					1,
					"insert",
					{
						"characters": "set"
					},
					"AwAAAA4DAAAAAAAADwMAAAAAAAAAAAAADwMAAAAAAAAQAwAAAAAAAAAAAAAQAwAAAAAAABEDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOAwAAAAAAAA4DAAAAAAAAAAAAAAAA8L8"
				],
				[
					147,
					5,
					"left_delete",
					null,
					"BQAAABADAAAAAAAAEAMAAAAAAAABAAAAdA8DAAAAAAAADwMAAAAAAAABAAAAZQ4DAAAAAAAADgMAAAAAAAABAAAAcwwDAAAAAAAADAMAAAAAAAACAAAAICALAwAAAAAAAAsDAAAAAAAAAQAAAAo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAARAwAAAAAAABEDAAAAAAAAAAAAAAAA8L8"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": "\nset"
					},
					"BAAAAOQCAAAAAAAA5QIAAAAAAAAAAAAA5QIAAAAAAADmAgAAAAAAAAAAAADmAgAAAAAAAOcCAAAAAAAAAAAAAOcCAAAAAAAA6AIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADkAgAAAAAAAOQCAAAAAAAAAAAAAAAA8L8"
				],
				[
					151,
					4,
					"left_delete",
					null,
					"BAAAAOcCAAAAAAAA5wIAAAAAAAABAAAAdOYCAAAAAAAA5gIAAAAAAAABAAAAZeUCAAAAAAAA5QIAAAAAAAABAAAAc+QCAAAAAAAA5AIAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADoAgAAAAAAAOgCAAAAAAAAAAAAAAAA8L8"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAsDAAAAAAAADAMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALAwAAAAAAAAsDAAAAAAAAAAAAAABAfUA"
				],
				[
					154,
					1,
					"reindent",
					null,
					"AQAAAAwDAAAAAAAADgMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAMAwAAAAAAAAwDAAAAAAAAAAAAAAAA8L8"
				],
				[
					155,
					1,
					"insert",
					{
						"characters": "set"
					},
					"AwAAAA4DAAAAAAAADwMAAAAAAAAAAAAADwMAAAAAAAAQAwAAAAAAAAAAAAAQAwAAAAAAABEDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOAwAAAAAAAA4DAAAAAAAAAAAAAAAA8L8"
				],
				[
					156,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABEDAAAAAAAAEwMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAARAwAAAAAAABEDAAAAAAAAAAAAAAAA8L8"
				],
				[
					157,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAABIDAAAAAAAAEwMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASAwAAAAAAABIDAAAAAAAAAAAAAAAA8L8"
				],
				[
					158,
					1,
					"left_delete",
					null,
					"AQAAABIDAAAAAAAAEgMAAAAAAAABAAAAOg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATAwAAAAAAABMDAAAAAAAAAAAAAAAA8L8"
				],
				[
					159,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAABIDAAAAAAAAFAMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASAwAAAAAAABIDAAAAAAAAAAAAAAAA8L8"
				],
				[
					160,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAABIDAAAAAAAAEgMAAAAAAAABAAAAIhIDAAAAAAAAEgMAAAAAAAABAAAAIg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATAwAAAAAAABMDAAAAAAAAAAAAAAAA8L8"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": "DEPS_B"
					},
					"BgAAABIDAAAAAAAAEwMAAAAAAAAAAAAAEwMAAAAAAAAUAwAAAAAAAAAAAAAUAwAAAAAAABUDAAAAAAAAAAAAABUDAAAAAAAAFgMAAAAAAAAAAAAAFgMAAAAAAAAXAwAAAAAAAAAAAAAXAwAAAAAAABgDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASAwAAAAAAABIDAAAAAAAAAAAAAAAA8L8"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": "UILD_"
					},
					"BQAAABgDAAAAAAAAGQMAAAAAAAAAAAAAGQMAAAAAAAAaAwAAAAAAAAAAAAAaAwAAAAAAABsDAAAAAAAAAAAAABsDAAAAAAAAHAMAAAAAAAAAAAAAHAMAAAAAAAAdAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAYAwAAAAAAABgDAAAAAAAAAAAAAAAA8L8"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": "TYPE"
					},
					"BAAAAB0DAAAAAAAAHgMAAAAAAAAAAAAAHgMAAAAAAAAfAwAAAAAAAAAAAAAfAwAAAAAAACADAAAAAAAAAAAAACADAAAAAAAAIQMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAdAwAAAAAAAB0DAAAAAAAAAAAAAAAA8L8"
				],
				[
					164,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACEDAAAAAAAAIgMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhAwAAAAAAACEDAAAAAAAAAAAAAAAA8L8"
				],
				[
					165,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAACIDAAAAAAAAJAMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiAwAAAAAAACIDAAAAAAAAAAAAAAAA8L8"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": "release"
					},
					"BwAAACMDAAAAAAAAJAMAAAAAAAAAAAAAJAMAAAAAAAAlAwAAAAAAAAAAAAAlAwAAAAAAACYDAAAAAAAAAAAAACYDAAAAAAAAJwMAAAAAAAAAAAAAJwMAAAAAAAAoAwAAAAAAAAAAAAAoAwAAAAAAACkDAAAAAAAAAAAAACkDAAAAAAAAKgMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjAwAAAAAAACMDAAAAAAAAAAAAAAAA8L8"
				],
				[
					172,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHMDAAAAAAAAdAMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABzAwAAAAAAAHMDAAAAAAAAAAAAAAAAckA"
				],
				[
					173,
					1,
					"paste",
					null,
					"AQAAAHQDAAAAAAAAkgMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB0AwAAAAAAAHQDAAAAAAAAAAAAAAAA8L8"
				],
				[
					176,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAHQDAAAAAAAAdgMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB0AwAAAAAAAHQDAAAAAAAAAAAAAAAA8L8"
				],
				[
					178,
					6,
					"right_delete",
					null,
					"BgAAAIsDAAAAAAAAiwMAAAAAAAABAAAAcosDAAAAAAAAiwMAAAAAAAABAAAAZYsDAAAAAAAAiwMAAAAAAAABAAAAbIsDAAAAAAAAiwMAAAAAAAABAAAAZYsDAAAAAAAAiwMAAAAAAAABAAAAYYsDAAAAAAAAiwMAAAAAAAABAAAAcw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACLAwAAAAAAAIsDAAAAAAAAAAAAAAAA8L8"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAAIsDAAAAAAAAjAMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACLAwAAAAAAAIsDAAAAAAAAAAAAAAAA8L8"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": "bug"
					},
					"AwAAAI0DAAAAAAAAjgMAAAAAAAAAAAAAjgMAAAAAAACPAwAAAAAAAAAAAACPAwAAAAAAAJADAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNAwAAAAAAAI0DAAAAAAAAAAAAAAAA8L8"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": " -D"
					},
					"AwAAAFEFAAAAAAAAUgUAAAAAAAAAAAAAUgUAAAAAAABTBQAAAAAAAAAAAABTBQAAAAAAAFQFAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABRBQAAAAAAAFEFAAAAAAAAAAAAAAAA8L8"
				],
				[
					193,
					1,
					"paste",
					null,
					"AQAAAFQFAAAAAAAAYwUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABUBQAAAAAAAFQFAAAAAAAAAAAAAAAA8L8"
				],
				[
					194,
					1,
					"insert",
					{
						"characters": "=$"
					},
					"AgAAAGMFAAAAAAAAZAUAAAAAAAAAAAAAZAUAAAAAAABlBQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjBQAAAAAAAGMFAAAAAAAAAAAAAAAA8L8"
				],
				[
					195,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAGUFAAAAAAAAZwUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABlBQAAAAAAAGUFAAAAAAAAAAAAAAAA8L8"
				],
				[
					196,
					1,
					"paste",
					null,
					"AQAAAGYFAAAAAAAAdQUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABmBQAAAAAAAGYFAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "CMakeLists.txt",
			"settings":
			{
				"buffer_size": 6241,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAOkWAAAAAAAA6hYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADpFgAAAAAAAOkWAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAABMXAAAAAAAAFBcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATFwAAAAAAABMXAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAFoXAAAAAAAAWxcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABaFwAAAAAAAFoXAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAJgXAAAAAAAAmRcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACYFwAAAAAAAJgXAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAKAXAAAAAAAAoRcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACgFwAAAAAAAKAXAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAOUXAAAAAAAA5hcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADlFwAAAAAAAOUXAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAACMYAAAAAAAAJBgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjGAAAAAAAACMYAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "third_party/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 21766,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					6,
					2,
					"left_delete",
					null,
					"AgAAAGICAAAAAAAAYgIAAAAAAAC7AAAAaWYgKENNQUtFX0JVSUxEX1RZUEUgU1RSRVFVQUwgIlJlbGVhc2UiKQogIHNldChFWFRFUk5BTFNfSU5TVEFMTF9ESVIgJHtQUk9KRUNUX1NPVVJDRV9ESVJ9Ly4uL2RlcHMvcmVsZWFzZSkKZWxzZSgpCiAgc2V0KEVYVEVSTkFMU19JTlNUQUxMX0RJUiAke1BST0pFQ1RfU09VUkNFX0RJUn0vLi4vZGVwcy9kZWJ1ZykKZW5kaWYoKWECAAAAAAAAYQIAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAdAwAAAAAAAGICAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"left_delete",
					null,
					"AQAAAGACAAAAAAAAYAIAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABhAgAAAAAAAGECAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					2,
					"left_delete",
					null,
					"AgAAALUAAAAAAAAAtQAAAAAAAAATAAAAJHtDTUFLRV9CVUlMRF9UWVBFfbQAAAAAAAAAtAAAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1AAAAAAAAAMgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAMgeAAAAAAAAyR4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIHgAAAAAAAMgeAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"left_delete",
					null,
					"AQAAANkeAAAAAAAA2R4AAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADaHgAAAAAAANoeAAAAAAAAAAAAAAAAAAA"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAANoeAAAAAAAA2x4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADaHgAAAAAAANoeAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAABMfAAAAAAAAFB8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATHwAAAAAAABMfAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"left_delete",
					null,
					"AQAAAGkfAAAAAAAAaR8AAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqHwAAAAAAAGofAAAAAAAAAAAAAAAAIkA"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAGofAAAAAAAAax8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqHwAAAAAAAGofAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAKAjAAAAAAAAoSMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACgIwAAAAAAAKAjAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"paste",
					null,
					"AQAAALkBAAAAAAAAyAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5AQAAAAAAALkBAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "${"
					},
					"AgAAALkBAAAAAAAAugEAAAAAAAAAAAAAugEAAAAAAAC7AQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5AQAAAAAAALkBAAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAMoBAAAAAAAAywEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKAQAAAAAAAMoBAAAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAMsBAAAAAAAAzAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLAQAAAAAAAMsBAAAAAAAAAAAAAAAA8L8"
				],
				[
					59,
					1,
					"paste",
					null,
					"AQAAAA0CAAAAAAAAIAIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAANAgAAAAAAAA0CAAAAAAAAAAAAAAAA8L8"
				],
				[
					62,
					1,
					"paste",
					null,
					"AQAAAGUCAAAAAAAAeAIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABlAgAAAAAAAGUCAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/GFX/FalcorGFX.h",
			"settings":
			{
				"buffer_size": 10978,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"left_delete",
					null,
					"AQAAAD8qAAAAAAAAPyoAAAAAAAA5AgAAICAgIC8qCiAgICAgICAgdmtyZXN1bHRfMl9zdHJpbmcoVktfRVJST1JfT1VUX09GX1BPT0xfTUVNT1JZX0tIUik7CiAgICAgICAgdmtyZXN1bHRfMl9zdHJpbmcoVktfRVJST1JfSU5WQUxJRF9FWFRFUk5BTF9IQU5ETEVfS0hSKTsKICAgICAgICB2a3Jlc3VsdF8yX3N0cmluZyhWS19FUlJPUl9GUkFHTUVOVEFUSU9OX0VYVCk7CiAgICAjaWZkZWYgVktfRVJST1JfTk9UX1BFUk1JVFRFRF9FWFQgICAgCiAgICAgICAgdmtyZXN1bHRfMl9zdHJpbmcoVktfRVJST1JfTk9UX1BFUk1JVFRFRF9FWFQpOwogICAgI2VuZGlmICAgIAogICAgICAgIHZrcmVzdWx0XzJfc3RyaW5nKFZLX0VSUk9SX0lOVkFMSURfREVWSUNFX0FERFJFU1NfRVhUKTsKICAgICAgICB2a3Jlc3VsdF8yX3N0cmluZyhWS19FUlJPUl9JTlZBTElEX09QQVFVRV9DQVBUVVJFX0FERFJFU1NfS0hSKTsKICAgICAgICB2a3Jlc3VsdF8yX3N0cmluZyhWS19QSVBFTElORV9DT01QSUxFX1JFUVVJUkVEX0VYVCk7CiAgICAgICAgdmtyZXN1bHRfMl9zdHJpbmcoVktfRVJST1JfUElQRUxJTkVfQ09NUElMRV9SRVFVSVJFRF9FWFQpOwogICAgKi8",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4LAAAAAAAAD8qAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "\n\t"
					},
					"AwAAAFAqAAAAAAAAUSoAAAAAAAAAAAAAUSoAAAAAAABZKgAAAAAAAAAAAABZKgAAAAAAAF0qAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABQKgAAAAAAAFAqAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAF0qAAAAAAAAXyoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABdKgAAAAAAAF0qAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"right_delete",
					null,
					"AQAAAF4qAAAAAAAAXioAAAAAAAABAAAAfQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeKgAAAAAAAF4qAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKAqAAAAAAAAoSoAAAAAAAAAAAAAoSoAAAAAAAClKgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACgKgAAAAAAAKAqAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\t\t}"
					},
					"AwAAAKAqAAAAAAAApCoAAAAAAAAAAAAApCoAAAAAAACoKgAAAAAAAAAAAACoKgAAAAAAAKkqAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACgKgAAAAAAAKAqAAAAAAAAAAAAAAAAQkA"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAIEqAAAAAAAAhSoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBKgAAAAAAAIEqAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAGsqAAAAAAAAbyoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrKgAAAAAAAGsqAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "fa"
					},
					"AgAAAHYqAAAAAAAAdyoAAAAAAAAAAAAAdyoAAAAAAAB4KgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB2KgAAAAAAAHYqAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "false"
					},
					"AgAAAHYqAAAAAAAAdioAAAAAAAACAAAAZmF2KgAAAAAAAHsqAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4KgAAAAAAAHgqAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					5,
					"right_delete",
					null,
					"BQAAAF0qAAAAAAAAXSoAAAAAAAAOAAAAewogICAgICAgICAgICBdKgAAAAAAAF0qAAAAAAAAAQAAACBdKgAAAAAAAF0qAAAAAAAAAQAAACBdKgAAAAAAAF0qAAAAAAAAAQAAACBdKgAAAAAAAF0qAAAAAAAAAQAAACA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABdKgAAAAAAAGsqAAAAAAAAAAAAAAAAW0A"
				],
				[
					29,
					4,
					"right_delete",
					null,
					"BAAAAHgqAAAAAAAAeCoAAAAAAAABAAAAIHgqAAAAAAAAeCoAAAAAAAABAAAAIHgqAAAAAAAAeCoAAAAAAAABAAAAIHgqAAAAAAAAeCoAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4KgAAAAAAAHgqAAAAAAAAAAAAAAAAW0A"
				],
				[
					32,
					5,
					"left_delete",
					null,
					"BQAAAJ8qAAAAAAAAnyoAAAAAAAABAAAAfZsqAAAAAAAAmyoAAAAAAAAEAAAAICAgIJcqAAAAAAAAlyoAAAAAAAAEAAAAICAgIJMqAAAAAAAAkyoAAAAAAAAEAAAAICAgIJIqAAAAAAAAkioAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACgKgAAAAAAAKAqAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/Falcor/Utils/Image/LTX_Bitmap.cpp",
			"settings":
			{
				"buffer_size": 19325,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					6,
					2,
					"left_delete",
					null,
					"AgAAAA1EAAAAAAAADUQAAAAAAABFAAAACUxMT0dfREJHIDw8ICJMVFhfQml0bWFwOjpyZWFkUGFnZURhdGEgIiA8PCBzdGQ6OnRvX3N0cmluZyhwYWdlTnVtKTsKDEQAAAAAAAAMRAAAAAAAAAEAAAAK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAANRAAAAAAAAFJEAAAAAAAAAAAAAAAA8L8"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 320.0,
		"history":
		[
			"cd /home/max/dev"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/media/max/1TB_Ext/dev/Lava",
		"/media/max/1TB_Ext/dev/Lava/cmake",
		"/media/max/1TB_Ext/dev/Lava/src",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/GFX",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/Vulkan",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Scene",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Scene/Material",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Utils",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Utils/Image",
		"/media/max/1TB_Ext/dev/Lava/src/gfx_lib",
		"/media/max/1TB_Ext/dev/Lava/src/gfx_lib/vulkan",
		"/media/max/1TB_Ext/dev/Lava/src/lava_lib",
		"/media/max/1TB_Ext/dev/Lava/src/lava_lib/reader_lsd",
		"/media/max/1TB_Ext/dev/Lava/src/RenderPasses",
		"/media/max/1TB_Ext/dev/Lava/src/RenderPasses/ForwardLightingPass",
		"/media/max/1TB_Ext/dev/Lava/src/RenderPasses/HBAO",
		"/media/max/1TB_Ext/dev/Lava/src/RenderPasses/SkyBox",
		"/media/max/1TB_Ext/dev/Lava/src/RenderPasses/TexturesResolvePass",
		"/media/max/1TB_Ext/dev/Lava/third_party",
		"/media/max/1TB_Ext/dev/Lava/third_party/external",
		"/media/max/1TB_Ext/dev/Lava/third_party/external/slang",
		"/media/max/1TB_Ext/dev/Lava/third_party/external/slang/src"
	],
	"file_history":
	[
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/Device.h",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/Vulkan/VKDevice.h",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/GFX/GFXDeviceApiData.h",
		"/media/max/1TB_Ext/dev/Lava/src/gfx_lib/command-encoder-com-forward.h",
		"/media/max/1TB_Ext/dev/Lava/src/gfx_lib/vulkan/vk-device.cpp",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/Vulkan/VKTexture.cpp",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/GFX/FalcorGFX.h",
		"/media/max/1TB_Ext/dev/Lava/src/RenderPasses/GBuffer/GBuffer/GBufferRT.h",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/GFX/GFXGpuFence.cpp",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/GFX/GFXLowLevelContextData.cpp",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/GFX/GFXResource.cpp",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/GFX/GFXResourceViews.cpp",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/RtAccelerationStructure.h",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/GFX/GFXSampler.cpp",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/Program/ProgramVersion.h",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/RootSignature.cpp",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/GFX/GFXBuffer.cpp",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/GFX/GFXDevice.cpp",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/GFX/GFXComputeStateObject.cpp",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/Framework.h",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/State/GraphicsState.cpp",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/Vulkan/FalcorVK.h",
		"/media/max/1TB_Ext/dev/Lava/src/gfx_lib/render.cpp",
		"/media/max/1TB_Ext/dev/Lava/src/gfx_lib/vulkan/vk-helper-functions.cpp",
		"/media/max/1TB_Ext/dev/Lava/src/gfx_lib/vulkan/vk-api.h",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/GFX/GFXTexture.cpp",
		"/media/max/1TB_Ext/dev/Lava/src/gfx_lib/vulkan/vk-device.h",
		"/media/max/1TB_Ext/dev/Lava/src/RenderPasses/GBuffer/GBuffer/GBufferRT.cpp",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/RenderGraph/RenderPassStandardFlags.h",
		"/media/max/1TB_Ext/dev/Lava/src/RenderPasses/CMakeLists.txt",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/CMakeLists.txt",
		"/media/max/1TB_Ext/dev/Lava/CMakeLists.txt",
		"/media/max/1TB_Ext/dev/Lava/third_party/CMakeLists.txt",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Scene/Material/MaterialSystem.slang",
		"/media/max/1TB_Ext/dev/Lava/src/lava_lib/reader_lsd/session.cpp",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/GFX/GFXCopyContext.cpp",
		"/media/max/1TB_Ext/dev/Lava/src/RenderPasses/TexturesResolvePass/TexturesResolvePass.cpp",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Scene/Material/Material.h",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Scene/Material/Material.cpp",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/Sampler.cpp",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/Sampler.h",
		"/media/max/1TB_Ext/dev/Lava/src/RenderPasses/TexturesResolvePass/TexturesResolvePass.h",
		"/media/max/1TB_Ext/dev/Lava/src/lava_lib/renderer.cpp",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/RenderGraph/RenderGraph.h",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/Formats.h",
		"/media/max/1TB_Ext/dev/Lava/src/RenderPasses/TexturesResolvePass/TexturesResolvePass.ps.slang",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Utils/Image/TextureManager.cpp",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Utils/Image/LTX_Bitmap.cpp",
		"/media/max/1TB_Ext/dev/Lava/src/gfx_lib/vulkan/vk-command-encoder.cpp",
		"/media/max/1TB_Ext/dev/Lava/src/gfx_lib/transient-resource-heap-base.h",
		"/media/max/1TB_Ext/dev/Lava/src/gfx_lib/resource-desc-utils.h",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/Texture.h",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/Texture.cpp",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/GFX/GFXVirtualTexturePage.cpp",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/VirtualTexturePage.h",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/VirtualTexturePage.cpp",
		"/media/max/1TB_Ext/dev/Lava/src/gfx_lib/slang-gfx.h",
		"/media/max/1TB_Ext/dev/Lava/src/gfx_lib/vulkan/vk-command-encoder.h",
		"/media/max/1TB_Ext/dev/Lava/src/gfx_lib/debug-layer.h",
		"/media/max/1TB_Ext/dev/Lava/src/gfx_lib/debug-layer.cpp",
		"/media/max/1TB_Ext/dev/Lava/src/Falcor/Core/API/ResourceManager.cpp",
		"/mnt/misc_hdd/dev/Lava/src/gfx_lib/vulkan/vk-api.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/GFX/GFXResource.h",
		"/mnt/misc_hdd/dev/Lava/src/gfx_lib/slang-gfx.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/RtAccelerationStructurePostBuildInfoPool.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan/VKRtQueryPool.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/RtQueryPool.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/GFX/GFXRenderContext.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/GFX/GFXRtAccelerationStructurePostBuildInfoPool.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan/VKRtAccelerationStructure.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/Program/Program.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan/VKTexture.cpp",
		"/mnt/misc_hdd/dev/Lava/src/gfx_lib/vulkan/vk-device.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan/VKRtAccelerationStructure.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan/VKShader.cpp",
		"/mnt/misc_hdd/dev/Lava/src/gfx_lib/vulkan/vk-util.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/RtAccelerationStructure.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan/VKRtAccelerationStructurePostBuildInfoPool.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/ErrorHandling.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/GFX/GFXRtAccelerationStructure.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/GFX/GFXRtAccelerationStructure.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/CMakeLists.txt",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Texture.h",
		"/mnt/misc_hdd/dev/Lava/third_party/CMakeLists.txt",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Sampler.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Buffer.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/GFX/GFXBuffer.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Buffer.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Device.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/GFX/GFXDeviceManager.cpp",
		"/mnt/misc_hdd/dev/Lava/src/gfx_lib/vulkan/vk-shader-program.cpp",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/gfx/renderer-shared.h",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/gfx/vulkan/vk-query.h",
		"/mnt/misc_hdd/dev/Lava/src/gfx_lib/vulkan/vk-descriptor-allocator.h",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/external/vulkan/include/vulkan/vulkan_raii.hpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Scene.cpp",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/slang.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan/VKCopyContext.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan/VKDescriptorSet.cpp",
		"/mnt/misc_hdd/dev/Lava/src/gfx_lib/vulkan/vk-helper-functions.cpp",
		"/mnt/misc_hdd/dev/Lava/src/gfx_lib/vulkan/vk-util.cpp",
		"/mnt/misc_hdd/dev/Lava/CMakeLists.txt",
		"/mnt/misc_hdd/dev/Lava/cmake/SuperBuild.cmake",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/FalcorConfig.h",
		"/mnt/misc_hdd/dev/Lava/src/CMakeLists.txt",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/GFX/FalcorGFX.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/State/GraphicsState.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Scene.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/GFX/GFXLowLevelContextData.cpp",
		"/mnt/misc_hdd/dev/Lava/src/gfx_lib/vulkan/vk-command-encoder.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Timing/Profiler.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan/FalcorVK.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan/VKSmartHandle.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan/VKDevice.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/GFX/GFXFbo.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/ResourceViews.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan/VKFbo.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/FBO.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/GFX/GFXDevice.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/DeviceManager.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan/VKDeviceManager.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan/VKDevice.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan/VKComputeContext.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan/VKComputeStateObject.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/RootSignature.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/RootSignature.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/DescriptorSet.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/ComputeContext.h"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 125.0,
		"where_history":
		[
			"/media/max/1TB_Ext/dev/Lava/src/RenderPasses,<project filters>",
			"/media/max/1TB_Ext/dev/Lava/src,<project filters>",
			"/media/max/1TB_Ext/dev/Lava/src/Falcor,<project filters>",
			"/media/max/1TB_Ext/dev/Lava/src,<project filters>",
			"/media/max/1TB_Ext/dev/Lava/src/gfx_lib,<project filters>",
			"/media/max/1TB_Ext/dev/Lava/third_party/external/slang/src/Slang,<project filters>",
			"/media/max/1TB_Ext/dev/Lava/src/gfx_lib/vulkan,<project filters>",
			"/media/max/1TB_Ext/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/gfx_lib/vulkan,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/gfx_lib/vulkan,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/source,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/gfx_lib,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/Program,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/RenderPasses/RTXDIPass,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Material,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Material,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Material,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Material,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Material,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Rendering,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Rendering/RTXDI,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/lava_lib,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/RenderPasses,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/RTXDI/src/RTXDI,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/RTXDI/src/RTXDI/rtxdi-sdk,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Rendering/RTXDI,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Rendering,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/RTXDI/src/RTXDI/rtxdi-sdk,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/RTXDI/src/RTXDI,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Rendering/RTXDI,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/RTXDI/src/RTXDI,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Rendering/RTXDI,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/RTXDI/src/RTXDI,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Rendering/RTXDI,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/RenderPasses/RTXDIPass,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/RenderPasses/RTXDIPass,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/RenderPasses,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/RenderPasses,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/VBuffer,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/RenderPasses,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/Program,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/openvdb/src/OpenVDB/nanovdb,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang,<project filters>",
			"/mnt/misc_hdd/dev/Lava/deps/include/slang,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/GFX,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/RenderPasses,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/tbb/src/Tbb,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/tbb/src/Tbb/include/tbb,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Rendering/RTXDI,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/RTXDI/src/RTXDI,<project filters>"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"SampleLevel",
			"TileInfo:",
			"Sparse texture handle mode is:",
			"std::cout",
			"Sparse address space size:",
			"printf(",
			"mCmdQueues",
			"mCmdNativeQueues",
			"VkSparseImageMemoryBind",
			"gSampler",
			"pages needs to be loaded",
			"uploadTextureData",
			"DebugResourceCommandEncoderImpl",
			"DebugRenderCommandEncoder",
			"mSparseImageMemoryBinds",
			"BACKEND",
			"memoryProperties",
			"VkPhysicalDeviceProperties",
			"sparseAddressSpaceSize",
			"VkPipelineShaderStageCreateInfo",
			"QueryPoolBase",
			"QueryPoolImpl",
			"IQueryPoolImpl",
			"reset",
			"::reset(",
			"Shader::create(",
			"vkCreateAccelerationStructureKHR",
			"releaseResource",
			"::releaseResource",
			"SLANG_RETURN_ON_FAIL",
			"#define SLANG_RETURN_ON_FAIL",
			"SLANG_RETURN_ON_FAIL",
			"List",
			"SlangResult",
			"RtAccelerationStructurePostBuildInfoPool::create",
			"mApiHandle",
			"SLANG_NO_THROW",
			"SlangResult",
			"entryPointGroupIndex",
			"mpPrivateData",
			"ResourceState::AccelStructBuildInput",
			"case ResourceState::AccelStructBuildInput",
			"getProgramKernels(",
			"::getProgramKernels",
			"ProgramKernels",
			"VkAccessFlagBits",
			"VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR",
			"VkComputePipelineCreateInfo",
			"mAlloc",
			"mAllcocator",
			"3RD_ARGS",
			"FALCOR_VK",
			"slang-gfx.h",
			"String::",
			"gfxCreateDevice",
			"include_directories",
			"slang.h",
			"renderer-shared",
			"createTextureResource",
			"VK_IMAGE_CREATE_SPARSE_BINDING_BIT",
			"ITextureResource",
			"calculateTileID2D",
			"mTextureLTXBitmapsMap",
			"mAsyncTextureLoader",
			"mSparseTexturesEnabled",
			"texGrads",
			"gTextureGrads",
			"FalcorBSDF",
			"MATERIAL_SYSTEM_TEXTURE_DESC_COUNT",
			"setRoughnessTexture",
			"texBaseColor",
			"texRoughness",
			"Invalid texture slot",
			"setRoughnessTexture",
			"ShadingData",
			"sd.specular",
			"specularRoughness",
			"MaterialParams",
			"specular",
			"data.specular",
			"FalcorBSDF",
			"setBaseColor",
			"MaterialParams",
			"MaterialParameters",
			"ndir_to_oct_snorm",
			"encodeNormal2x16",
			"setSurfaceData",
			"TextureManager",
			"AsyncTextureLoader",
			"createFromFile",
			"No sub-container",
			"std::cout",
			"markOutput",
			"getOutputName",
			"getOutputMasks",
			"getRenderPassAndNamePair",
			"getUnsatisfiedInputs",
			"autoConnectPasses",
			"autoGenEdges",
			"autoConnectPasses",
			"gEnvMapSampler",
			"TargetStoreOp",
			"TargetLoadOp",
			"::TargetAccessDesc",
			"::TargetLayout",
			"::Extents",
			"ITextureResource",
			"sGenerateDebugInfo",
			"setGenerateDebugInfoEnabled",
			"sGenerateDebugInfo",
			"_DEBUG",
			"VMA",
			"OpenEXR_ROOT",
			"OpenEXR",
			"specular",
			"specula",
			"setRoughness",
			"FALCOR_FLIP_Y",
			"projMat",
			"setSurfaceData",
			"SurfaceData",
			"ShadingData",
			"setShaderData",
			"normal",
			".N",
			"sd.N",
			"normal",
			".N"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"AttachmentStoreOp",
			"AttachmentLoadOp",
			"::AttachmentAccessDesc",
			"::AttachmentLayout",
			"::Size",
			"DEPS_DIR",
			"fs",
			"mpDevice",
			"getGeometryInstance",
			"PROFILE(mpDevice, ",
			"assert",
			"mpDevice",
			"SkinningVertexVector",
			"to_string",
			"std::runtime_error",
			"assert",
			"std::runtime_error",
			"assert",
			"sceneBuilder",
			"MxSocketDirection",
			"Falcor::MxSocketDataType",
			"MxGeneratorsLibrary",
			"NodeTypeDesc",
			"NodeTypesLibrary",
			"r",
			"deps",
			"DEPS_BINARY_DIR",
			"BINARY_DIR",
			"EXTERNALS_INSTALL_DIR",
			"postBuildInfoCompactedSize",
			"mBuilt",
			"mProperties",
			"mCreateInfo",
			"mBuildInfo",
			"TopLevelAccelerationStructure",
			"BottomLevelAccelerationStructure",
			"AccelerationStructure",
			"slang",
			"SLANG",
			"Slang",
			"EXTERNAL_BOOST_VERSION",
			"LAVA_3RD_LIB_LINK_WITH_STATIC",
			"vsOut",
			"MAX_HIZ_LOD",
			"HiZ",
			"lsdtype",
			"lv_",
			"mSuperSampleCount",
			"_getMaxHorizonGrouped",
			"float2",
			"float4",
			"float3",
			"float2",
			"gMaxZBuffer",
			"gAoDistance",
			"gAoQuality",
			"gAOQuality",
			"float2",
			"float3",
			"float4",
			"float3",
			"float2",
			"mpDepthSampler",
			"float2",
			"int3",
			"float2",
			"float3",
			"float2",
			"float3",
			"float2",
			"float3",
			"pComputeHBAOPass",
			"kAoOut",
			"kHorizonMap",
			"HBAO",
			"pagesCountZ",
			"pagesCountY",
			"pagesCountX",
			"CACAO",
			"ResourceManager",
			"LAVA_3RDPARTY_INSTALL_DIR",
			"LAVA_3RDPARTY_SOURCE_DIR",
			"partialPageDims",
			"mInitialized",
			"sparseResourceManager",
			"SparseResourceManager",
			"materialSparseTextures",
			"imageCreateInfo",
			"unique_points",
			"geometry_name",
			"uv_coords",
			"Mesh",
			"outColor",
			"lsd",
			"LAVA_VEX_DISABLE_AUXPLANE",
			"LAVA",
			"Lava",
			"lv_",
			"lava",
			"lv_",
			"ExprValue",
			"ctx",
			"context",
			"LSD",
			"cmd_",
			"lv_",
			"li_",
			"LSD",
			"cmd_",
			"LSD",
			"cmd_",
			"LSD",
			"cmd_",
			"LSD",
			"cmd_",
			"LSD",
			"cmd_",
			"ROP_Lava",
			"Lava",
			"lava",
			"mRenderer",
			"RENDERER",
			"LAVA",
			"Lava",
			"LAVA",
			"Lava",
			"LAVA",
			"HdLava"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/Falcor/Core/API/Vulkan/VKDevice.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 58454,
						"regions":
						{
						},
						"selection":
						[
							[
								37649,
								37790
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10777.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/Falcor/Scene/Material/MaterialSystem.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14068,
						"regions":
						{
						},
						"selection":
						[
							[
								11205,
								11205
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3849.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/RenderPasses/TexturesResolvePass/TexturesResolveCommon.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5351,
						"regions":
						{
						},
						"selection":
						[
							[
								2503,
								2503
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1026.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/Falcor/Utils/Image/TextureManager.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21122,
						"regions":
						{
						},
						"selection":
						[
							[
								14446,
								14446
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 7446.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/Falcor/Utils/Image/TextureManager.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10877,
						"regions":
						{
						},
						"selection":
						[
							[
								10726,
								10726
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3780.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/lava_lib/reader_lsd/session.cpp",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 40128,
						"regions":
						{
						},
						"selection":
						[
							[
								38448,
								38448
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 19239.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/RenderPasses/TexturesResolvePass/TexturesResolvePass.ps.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3630,
						"regions":
						{
						},
						"selection":
						[
							[
								3385,
								3385
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1368.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/Falcor/Scene/Material/Material.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12894,
						"regions":
						{
						},
						"selection":
						[
							[
								8912,
								8912
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3164.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/gfx_lib/vulkan/vk-device.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 86650,
						"regions":
						{
						},
						"selection":
						[
							[
								43575,
								43584
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 22088.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "src/RenderPasses/TexturesResolvePass/TexturesResolvePass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13172,
						"regions":
						{
						},
						"selection":
						[
							[
								5123,
								5123
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2106.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/Falcor/Core/API/Texture.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20702,
						"regions":
						{
						},
						"selection":
						[
							[
								2785,
								2797
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 876.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "src/RenderPasses/SkyBox/SkyBox.3d.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2913,
						"regions":
						{
						},
						"selection":
						[
							[
								2530,
								2539
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 594.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "src/RenderPasses/SkyBox/SkyBox.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4038,
						"regions":
						{
						},
						"selection":
						[
							[
								3500,
								3500
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 864.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "src/lava_lib/renderer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18320,
						"regions":
						{
						},
						"selection":
						[
							[
								2235,
								2235
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 580.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "src/Falcor/Scene/SceneBuilder.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 112904,
						"regions":
						{
						},
						"selection":
						[
							[
								89888,
								89913
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 37777.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "src/Falcor/Scene/Material/MaterialSystem.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19984,
						"regions":
						{
						},
						"selection":
						[
							[
								8263,
								8263
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3235.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 16,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 51495,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions": "/QAAAK4AAAAAAAAAtQAAAAAAAAAAAAAAAADwvycBAAAAAAAALgEAAAAAAAAAAAAAAADwvyQCAAAAAAAAKwIAAAAAAAAAAAAAAADwv7UCAAAAAAAAvAIAAAAAAAAAAAAAAADwv4AEAAAAAAAAhwQAAAAAAAAAAAAAAADwv7QEAAAAAAAAuwQAAAAAAAAAAAAAAADwvwAFAAAAAAAABwUAAAAAAAAAAAAAAADwv2sFAAAAAAAAcgUAAAAAAAAAAAAAAADwv60FAAAAAAAAtAUAAAAAAAAAAAAAAADwvyYGAAAAAAAALQYAAAAAAAAAAAAAAADwv2sGAAAAAAAAcgYAAAAAAAAAAAAAAADwv5EGAAAAAAAAmAYAAAAAAAAAAAAAAADwv/wGAAAAAAAAAwcAAAAAAAAAAAAAAADwv2cHAAAAAAAAbgcAAAAAAAAAAAAAAADwv3YIAAAAAAAAfQgAAAAAAAAAAAAAAADwvwUJAAAAAAAADAkAAAAAAAAAAAAAAADwv/4JAAAAAAAABQoAAAAAAAAAAAAAAADwv34KAAAAAAAAhQoAAAAAAAAAAAAAAADwv84KAAAAAAAA1QoAAAAAAAAAAAAAAADwvxELAAAAAAAAGAsAAAAAAAAAAAAAAADwvzIMAAAAAAAAOQwAAAAAAAAAAAAAAADwvzgNAAAAAAAAPw0AAAAAAAAAAAAAAADwv3QOAAAAAAAAew4AAAAAAAAAAAAAAADwv24PAAAAAAAAdQ8AAAAAAAAAAAAAAADwv2kQAAAAAAAAcBAAAAAAAAAAAAAAAADwv2URAAAAAAAAbBEAAAAAAAAAAAAAAADwv2ISAAAAAAAAaRIAAAAAAAAAAAAAAADwv74TAAAAAAAAxRMAAAAAAAAAAAAAAADwv+QUAAAAAAAA6xQAAAAAAAAAAAAAAADwvy8VAAAAAAAANhUAAAAAAAAAAAAAAADwv9cVAAAAAAAA3hUAAAAAAAAAAAAAAADwv5IWAAAAAAAAmRYAAAAAAAAAAAAAAADwv90XAAAAAAAA9xcAAAAAAAAAAAAAAADwv5QZAAAAAAAArhkAAAAAAAAAAAAAAADwv3sbAAAAAAAAhBsAAAAAAAAAAAAAAADwv6QcAAAAAAAArRwAAAAAAAAAAAAAAADwv+gdAAAAAAAA8R0AAAAAAAAAAAAAAADwv3YfAAAAAAAAfx8AAAAAAAAAAAAAAADwv8cgAAAAAAAA0CAAAAAAAAAAAAAAAADwv8YhAAAAAAAAzyEAAAAAAAAAAAAAAADwvzojAAAAAAAAQyMAAAAAAAAAAAAAAADwv4EjAAAAAAAAiiMAAAAAAAAAAAAAAADwv9AjAAAAAAAA2SMAAAAAAAAAAAAAAADwv2okAAAAAAAAcyQAAAAAAAAAAAAAAADwv/glAAAAAAAAASYAAAAAAAAAAAAAAADwv7QmAAAAAAAAvSYAAAAAAAAAAAAAAADwv6onAAAAAAAAsycAAAAAAAAAAAAAAADwvxMoAAAAAAAAHCgAAAAAAAAAAAAAAADwv3MoAAAAAAAAfCgAAAAAAAAAAAAAAADwv9coAAAAAAAA4CgAAAAAAAAAAAAAAADwvz4qAAAAAAAARyoAAAAAAAAAAAAAAADwvxEsAAAAAAAAGiwAAAAAAAAAAAAAAADwv/8sAAAAAAAACC0AAAAAAAAAAAAAAADwvz0tAAAAAAAARi0AAAAAAAAAAAAAAADwv5MtAAAAAAAAnC0AAAAAAAAAAAAAAADwv+YtAAAAAAAA7y0AAAAAAAAAAAAAAADwv1kuAAAAAAAAYi4AAAAAAAAAAAAAAADwv8QuAAAAAAAAzS4AAAAAAAAAAAAAAADwv78vAAAAAAAAyC8AAAAAAAAAAAAAAADwvyMwAAAAAAAALDAAAAAAAAAAAAAAAADwvysxAAAAAAAANDEAAAAAAAAAAAAAAADwv0wyAAAAAAAAVTIAAAAAAAAAAAAAAADwv1AzAAAAAAAAWTMAAAAAAAAAAAAAAADwvws1AAAAAAAAFDUAAAAAAAAAAAAAAADwvws2AAAAAAAAFDYAAAAAAAAAAAAAAADwvxM3AAAAAAAAHDcAAAAAAAAAAAAAAADwv0I4AAAAAAAASzgAAAAAAAAAAAAAAADwv5I4AAAAAAAAmzgAAAAAAAAAAAAAAADwv4c5AAAAAAAAkDkAAAAAAAAAAAAAAADwvyg6AAAAAAAAMToAAAAAAAAAAAAAAADwv8E6AAAAAAAAyjoAAAAAAAAAAAAAAADwv387AAAAAAAAiDsAAAAAAAAAAAAAAADwv7s8AAAAAAAAxDwAAAAAAAAAAAAAAADwv/E9AAAAAAAA+j0AAAAAAAAAAAAAAADwvyI/AAAAAAAAKz8AAAAAAAAAAAAAAADwvzdAAAAAAAAAQEAAAAAAAAAAAAAAAADwv3ZBAAAAAAAAf0EAAAAAAAAAAAAAAADwv89CAAAAAAAA2EIAAAAAAAAAAAAAAADwv71DAAAAAAAAxkMAAAAAAAAAAAAAAADwv85EAAAAAAAA10QAAAAAAAAAAAAAAADwv4BFAAAAAAAAiUUAAAAAAAAAAAAAAADwv/NFAAAAAAAA/EUAAAAAAAAAAAAAAADwv2ZGAAAAAAAAb0YAAAAAAAAAAAAAAADwv5FGAAAAAAAAmkYAAAAAAAAAAAAAAADwv7tGAAAAAAAAxEYAAAAAAAAAAAAAAADwv+RGAAAAAAAA7UYAAAAAAAAAAAAAAADwvzRHAAAAAAAAPUcAAAAAAAAAAAAAAADwv8RHAAAAAAAAzUcAAAAAAAAAAAAAAADwv1lIAAAAAAAAYkgAAAAAAAAAAAAAAADwvzBJAAAAAAAAOUkAAAAAAAAAAAAAAADwv39KAAAAAAAAiEoAAAAAAAAAAAAAAADwv6pLAAAAAAAAs0sAAAAAAAAAAAAAAADwv+ZLAAAAAAAA70sAAAAAAAAAAAAAAADwvz9MAAAAAAAASEwAAAAAAAAAAAAAAADwvxZNAAAAAAAAH00AAAAAAAAAAAAAAADwvyFOAAAAAAAAKk4AAAAAAAAAAAAAAADwvyRPAAAAAAAALU8AAAAAAAAAAAAAAADwv6hPAAAAAAAAsU8AAAAAAAAAAAAAAADwv+ZPAAAAAAAA708AAAAAAAAAAAAAAADwv3hQAAAAAAAAgVAAAAAAAAAAAAAAAADwv91QAAAAAAAA5lAAAAAAAAAAAAAAAADwv59RAAAAAAAAqFEAAAAAAAAAAAAAAADwv49SAAAAAAAAmFIAAAAAAAAAAAAAAADwv1pTAAAAAAAAY1MAAAAAAAAAAAAAAADwv+xTAAAAAAAA9VMAAAAAAAAAAAAAAADwv49UAAAAAAAAmFQAAAAAAAAAAAAAAADwv0NVAAAAAAAATFUAAAAAAAAAAAAAAADwv0BWAAAAAAAASVYAAAAAAAAAAAAAAADwv9BWAAAAAAAA2VYAAAAAAAAAAAAAAADwv3BXAAAAAAAAeVcAAAAAAAAAAAAAAADwv0hYAAAAAAAAUVgAAAAAAAAAAAAAAADwv9VYAAAAAAAA3lgAAAAAAAAAAAAAAADwv25ZAAAAAAAAd1kAAAAAAAAAAAAAAADwvwpaAAAAAAAAE1oAAAAAAAAAAAAAAADwv9xaAAAAAAAA5VoAAAAAAAAAAAAAAADwv9VbAAAAAAAA3lsAAAAAAAAAAAAAAADwvwBdAAAAAAAACV0AAAAAAAAAAAAAAADwv61dAAAAAAAAtl0AAAAAAAAAAAAAAADwv6JeAAAAAAAAq14AAAAAAAAAAAAAAADwv5hfAAAAAAAAoV8AAAAAAAAAAAAAAADwv9ZgAAAAAAAA32AAAAAAAAAAAAAAAADwv3ViAAAAAAAAfmIAAAAAAAAAAAAAAADwv15jAAAAAAAAZ2MAAAAAAAAAAAAAAADwv1ZkAAAAAAAAX2QAAAAAAAAAAAAAAADwvyhlAAAAAAAAMWUAAAAAAAAAAAAAAADwv/tlAAAAAAAABGYAAAAAAAAAAAAAAADwv65mAAAAAAAAt2YAAAAAAAAAAAAAAADwv1tnAAAAAAAAZGcAAAAAAAAAAAAAAADwv3xoAAAAAAAAhWgAAAAAAAAAAAAAAADwvzlpAAAAAAAAQmkAAAAAAAAAAAAAAADwv5RqAAAAAAAAnWoAAAAAAAAAAAAAAADwv79qAAAAAAAAyGoAAAAAAAAAAAAAAADwv+hqAAAAAAAA8WoAAAAAAAAAAAAAAADwvxtrAAAAAAAAJGsAAAAAAAAAAAAAAADwv59rAAAAAAAAqGsAAAAAAAAAAAAAAADwvzdsAAAAAAAAQGwAAAAAAAAAAAAAAADwvw5tAAAAAAAAF20AAAAAAAAAAAAAAADwvzltAAAAAAAAQm0AAAAAAAAAAAAAAADwv2JtAAAAAAAAa20AAAAAAAAAAAAAAADwv+ltAAAAAAAA8m0AAAAAAAAAAAAAAADwv4FuAAAAAAAAim4AAAAAAAAAAAAAAADwv3dvAAAAAAAAgG8AAAAAAAAAAAAAAADwvytwAAAAAAAANHAAAAAAAAAAAAAAAADwv99xAAAAAAAA6HEAAAAAAAAAAAAAAADwvydzAAAAAAAAMHMAAAAAAAAAAAAAAADwv29zAAAAAAAAeHMAAAAAAAAAAAAAAADwv6dzAAAAAAAAsHMAAAAAAAAAAAAAAADwvzt0AAAAAAAARHQAAAAAAAAAAAAAAADwv3Z0AAAAAAAAf3QAAAAAAAAAAAAAAADwv3R1AAAAAAAAfXUAAAAAAAAAAAAAAADwvzp2AAAAAAAAQ3YAAAAAAAAAAAAAAADwv2J3AAAAAAAAa3cAAAAAAAAAAAAAAADwv554AAAAAAAAp3gAAAAAAAAAAAAAAADwvxx5AAAAAAAAJXkAAAAAAAAAAAAAAADwv7d5AAAAAAAAwHkAAAAAAAAAAAAAAADwv1x6AAAAAAAAZXoAAAAAAAAAAAAAAADwvwB7AAAAAAAACXsAAAAAAAAAAAAAAADwv6F7AAAAAAAAqnsAAAAAAAAAAAAAAADwvx98AAAAAAAAKHwAAAAAAAAAAAAAAADwv3N9AAAAAAAAkX0AAAAAAAAAAAAAAADwv71+AAAAAAAAxn4AAAAAAAAAAAAAAADwv3iAAAAAAAAAg4AAAAAAAAAAAAAAAADwv++AAAAAAAAA+oAAAAAAAAAAAAAAAADwv0iBAAAAAAAAU4EAAAAAAAAAAAAAAADwv6GBAAAAAAAArIEAAAAAAAAAAAAAAADwv/uBAAAAAAAABoIAAAAAAAAAAAAAAADwv7WCAAAAAAAAwIIAAAAAAAAAAAAAAADwvxGDAAAAAAAAHIMAAAAAAAAAAAAAAADwv2uDAAAAAAAAdoMAAAAAAAAAAAAAAADwv8aDAAAAAAAA0YMAAAAAAAAAAAAAAADwv8iEAAAAAAAA04QAAAAAAAAAAAAAAADwv0aFAAAAAAAAUYUAAAAAAAAAAAAAAADwv+WFAAAAAAAA8IUAAAAAAAAAAAAAAADwv1WGAAAAAAAAYIYAAAAAAAAAAAAAAADwvzaHAAAAAAAAQYcAAAAAAAAAAAAAAADwv66HAAAAAAAAuYcAAAAAAAAAAAAAAADwv6OIAAAAAAAArogAAAAAAAAAAAAAAADwvyOJAAAAAAAALokAAAAAAAAAAAAAAADwvyyKAAAAAAAAN4oAAAAAAAAAAAAAAADwv7SKAAAAAAAAv4oAAAAAAAAAAAAAAADwv9GLAAAAAAAA3IsAAAAAAAAAAAAAAADwv2GMAAAAAAAAbIwAAAAAAAAAAAAAAADwv5KNAAAAAAAAnY0AAAAAAAAAAAAAAADwvyqOAAAAAAAANY4AAAAAAAAAAAAAAADwv2+PAAAAAAAAeo8AAAAAAAAAAAAAAADwvw+QAAAAAAAAGpAAAAAAAAAAAAAAAADwv2iRAAAAAAAAc5EAAAAAAAAAAAAAAADwvxCSAAAAAAAAG5IAAAAAAAAAAAAAAADwv32TAAAAAAAAiJMAAAAAAAAAAAAAAADwvy2UAAAAAAAAOJQAAAAAAAAAAAAAAADwv66VAAAAAAAAuZUAAAAAAAAAAAAAAADwv2aWAAAAAAAAcZYAAAAAAAAAAAAAAADwv72XAAAAAAAAyJcAAAAAAAAAAAAAAADwvymYAAAAAAAANJgAAAAAAAAAAAAAAADwv2OZAAAAAAAAbpkAAAAAAAAAAAAAAADwv3GaAAAAAAAAfJoAAAAAAAAAAAAAAADwv8iaAAAAAAAA05oAAAAAAAAAAAAAAADwvyCbAAAAAAAAK5sAAAAAAAAAAAAAAADwv3ebAAAAAAAAgpsAAAAAAAAAAAAAAADwv86bAAAAAAAA2ZsAAAAAAAAAAAAAAADwvyacAAAAAAAAMZwAAAAAAAAAAAAAAADwv32cAAAAAAAAiJwAAAAAAAAAAAAAAADwv9ScAAAAAAAA35wAAAAAAAAAAAAAAADwvyydAAAAAAAAN50AAAAAAAAAAAAAAADwv9KeAAAAAAAA3Z4AAAAAAAAAAAAAAADwv7KfAAAAAAAAvZ8AAAAAAAAAAAAAAADwv5mgAAAAAAAApKAAAAAAAAAAAAAAAADwv8ahAAAAAAAA0aEAAAAAAAAAAAAAAADwvyqiAAAAAAAANaIAAAAAAAAAAAAAAADwv46iAAAAAAAAmaIAAAAAAAAAAAAAAADwv/KiAAAAAAAA/aIAAAAAAAAAAAAAAADwvw2kAAAAAAAAGKQAAAAAAAAAAAAAAADwv3GkAAAAAAAAfKQAAAAAAAAAAAAAAADwv6KlAAAAAAAAraUAAAAAAAAAAAAAAADwvwemAAAAAAAAEqYAAAAAAAAAAAAAAADwv22mAAAAAAAAeKYAAAAAAAAAAAAAAADwv9OmAAAAAAAA3qYAAAAAAAAAAAAAAADwvzinAAAAAAAAQ6cAAAAAAAAAAAAAAADwvyuoAAAAAAAANqgAAAAAAAAAAAAAAADwv2upAAAAAAAAdqkAAAAAAAAAAAAAAADwv8GpAAAAAAAAzKkAAAAAAAAAAAAAAADwvxeqAAAAAAAAIqoAAAAAAAAAAAAAAADwv22qAAAAAAAAeKoAAAAAAAAAAAAAAADwv5irAAAAAAAAo6sAAAAAAAAAAAAAAADwv+6rAAAAAAAA+asAAAAAAAAAAAAAAADwv0SsAAAAAAAAT6wAAAAAAAAAAAAAAADwv5qsAAAAAAAApawAAAAAAAAAAAAAAADwv5atAAAAAAAAoa0AAAAAAAAAAAAAAADwv8OuAAAAAAAAzq4AAAAAAAAAAAAAAADwv2yvAAAAAAAAd68AAAAAAAAAAAAAAADwv3KwAAAAAAAAfbAAAAAAAAAAAAAAAADwv6KxAAAAAAAArbEAAAAAAAAAAAAAAADwv3CyAAAAAAAAe7IAAAAAAAAAAAAAAADwv5SzAAAAAAAAn7MAAAAAAAAAAAAAAADwv2C0AAAAAAAAa7QAAAAAAAAAAAAAAADwv1e1AAAAAAAAYrUAAAAAAAAAAAAAAADwv8a2AAAAAAAA0bYAAAAAAAAAAAAAAADwvyO4AAAAAAAALrgAAAAAAAAAAAAAAADwv525AAAAAAAAqLkAAAAAAAAAAAAAAADwv9K6AAAAAAAA3boAAAAAAAAAAAAAAADwvym8AAAAAAAANLwAAAAAAAAAAAAAAADwv7u9AAAAAAAAxr0AAAAAAAAAAAAAAADwv4u+AAAAAAAAlr4AAAAAAAAAAAAAAADwvwzAAAAAAAAAF8AAAAAAAAAAAAAAAADwv77AAAAAAAAAycAAAAAAAAAAAAAAAADwv+XBAAAAAAAA8MEAAAAAAAAAAAAAAADwvzLDAAAAAAAAPcMAAAAAAAAAAAAAAADwv0/EAAAAAAAAWsQAAAAAAAAAAAAAAADwvyHFAAAAAAAALMUAAAAAAAAAAAAAAADwv8nFAAAAAAAA1MUAAAAAAAAAAAAAAADwv+3GAAAAAAAA+MYAAAAAAAAAAAAAAADwvz3IAAAAAAAASMgAAAAAAAAAAAAAAADwv7XIAAAAAAAAwMgAAAAAAAAAAAAAAADwvw",
								"scope": ""
							}
						},
						"selection":
						[
							[
								34022,
								33987
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 6,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 13860.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "src/lava_lib/reader_lsd/session.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6042,
						"regions":
						{
						},
						"selection":
						[
							[
								5306,
								5315
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1966.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "src/Falcor/Core/API/GFX/GFXCopyContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20089,
						"regions":
						{
						},
						"selection":
						[
							[
								9736,
								9736
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 7374.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "src/Falcor/Core/API/Vulkan/VKTexture.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25356,
						"regions":
						{
						},
						"selection":
						[
							[
								12468,
								12468
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5502.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "src/Falcor/Utils/Timing/Profiler.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15284,
						"regions":
						{
						},
						"selection":
						[
							[
								9033,
								9033
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6870.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "src/Falcor/Core/API/Buffer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12058,
						"regions":
						{
						},
						"selection":
						[
							[
								11068,
								11068
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4936.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "src/Falcor/Core/API/Texture.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22555,
						"regions":
						{
						},
						"selection":
						[
							[
								20034,
								19778
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 7811.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "src/Falcor/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6682,
						"regions":
						{
						},
						"selection":
						[
							[
								5536,
								5536
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3186.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "src/Falcor/Core/API/GFX/GFXDevice.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21084,
						"regions":
						{
						},
						"selection":
						[
							[
								11465,
								11465
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4412.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "src/Falcor/Core/API/GFX/GFXTexture.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7742,
						"regions":
						{
						},
						"selection":
						[
							[
								5088,
								5088
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2112.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "src/gfx_lib/debug-layer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 61434,
						"regions":
						{
						},
						"selection":
						[
							[
								35455,
								35455
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 18850.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "cmake/SuperBuild.cmake",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1814,
						"regions":
						{
						},
						"selection":
						[
							[
								1397,
								1397
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 162.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6241,
						"regions":
						{
						},
						"selection":
						[
							[
								6180,
								6180
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3137.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "third_party/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21766,
						"regions":
						{
						},
						"selection":
						[
							[
								632,
								632
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "src/Falcor/Core/API/GFX/FalcorGFX.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10978,
						"regions":
						{
						},
						"selection":
						[
							[
								10898,
								10898
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4536.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "src/Falcor/Utils/Image/LTX_Bitmap.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19325,
						"regions":
						{
						},
						"selection":
						[
							[
								17420,
								17420
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 9126.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 43.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 33.0
	},
	"output.unsaved_changes":
	{
		"height": 31.0
	},
	"pinned_build_system": "Packages/Makefile/Make.sublime-build",
	"project": "falcor.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"src/lava_lib/reader_lsd/grammar_lsd.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 431.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
