{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"mRt",
				"mRtBuilder"
			],
			[
				"ass",
				"assert"
			],
			[
				"m",
				"mAccel"
			],
			[
				"mBla",
				"mBlasBuilt"
			],
			[
				"des",
				"destroy"
			],
			[
				"Sce",
				"Scene"
			],
			[
				"getDe",
				"getDeviceProcAddr"
			],
			[
				"dev",
				"device"
			],
			[
				"in",
				"instance"
			],
			[
				"exten",
				"extension"
			],
			[
				"createB",
				"createBottomLevelAS"
			],
			[
				"initR",
				"initRayTracing"
			],
			[
				"sz",
				"sizeof"
			],
			[
				"uin",
				"uint16_t"
			],
			[
				"size",
				"sizeof"
			],
			[
				"getA",
				"getApiHandle"
			],
			[
				"mRa",
				"mRayTraceInitialized"
			],
			[
				"pri",
				"printf"
			],
			[
				"La",
				"LavaResourceAllocatorVma"
			],
			[
				"sc",
				"scratch_buffer"
			],
			[
				"inpu",
				"input"
			],
			[
				"VK",
				"VK_NULL_HANDLE"
			],
			[
				"acc",
				"accelerationStructureSize"
			],
			[
				"pre",
				"prebuildInfo"
			],
			[
				"Vk",
				"VkStructureType"
			],
			[
				"vk",
				"vkType"
			],
			[
				"tr",
				"triangles"
			],
			[
				"LO",
				"LOG_ERR"
			],
			[
				"mB",
				"mBuildInfo"
			],
			[
				"g",
				"getApiHandle"
			],
			[
				"prinf",
				"printf"
			],
			[
				"hos",
				"hostAddress"
			],
			[
				"si",
				"size"
			],
			[
				"pr",
				"primitive_counts"
			],
			[
				"siz",
				"size_t"
			],
			[
				"devi",
				"deviceAddress"
			],
			[
				"mBui",
				"mBuilt"
			],
			[
				"scr",
				"scratch_buffer"
			],
			[
				"VK_A",
				"VK_ACCESS_SHADER_WRITE_BIT"
			],
			[
				"I",
				"Index"
			],
			[
				"c",
				"create"
			],
			[
				"A",
				"AccelerationStructureDest"
			],
			[
				"get",
				"getApiHandle"
			],
			[
				"p",
				"pDevice"
			],
			[
				"pro",
				"protected"
			],
			[
				"RenderGr",
				"RenderGraph"
			],
			[
				"Render",
				"RenderGraph"
			],
			[
				"geom",
				"geomDescs"
			],
			[
				"Acce",
				"AccelerationStructureInput"
			],
			[
				"mE",
				"mEnabledHostQueryResetFeatures"
			],
			[
				"phy",
				"physicalDeviceFeatures"
			],
			[
				"Pne",
				"PnextChainPushFront"
			],
			[
				"res",
				"result"
			],
			[
				"VkRe",
				"VkResult"
			],
			[
				"LOG",
				"LOG_ERR"
			],
			[
				"VkCo",
				"VkCommandPool"
			],
			[
				"pC",
				"pContext"
			],
			[
				"s",
				"size"
			],
			[
				"bl",
				"blasGroupIndex"
			],
			[
				"ac",
				"acceleration"
			],
			[
				"prin",
				"printf"
			],
			[
				"mes",
				"mesh"
			],
			[
				"COM",
				"COMPACT_BLAS"
			],
			[
				"LOG_",
				"LOG_ERR"
			],
			[
				"Sha",
				"SharedPtr"
			],
			[
				"Bo",
				"BottomLevelAccelerationStructure"
			],
			[
				"inst",
				"instances"
			],
			[
				"scra",
				"scratchBufferSize"
			],
			[
				"mIns",
				"mInstanceDescs"
			],
			[
				"pT",
				"pTLAS"
			],
			[
				"mpQE",
				"mpQueryHeap"
			],
			[
				"Que",
				"QueryHeap"
			],
			[
				"Wr",
				"Write"
			],
			[
				"uint",
				"uint32_t"
			],
			[
				"Share",
				"SharedPtr"
			],
			[
				"VK_KH",
				"VK_KHR_ray_query_enabled"
			],
			[
				"VK_",
				"VK_KHR_acceleration_structure_enabled"
			],
			[
				"pN",
				"pNext"
			],
			[
				"off",
				"offset"
			],
			[
				"blasC",
				"blasCopyInfo"
			],
			[
				"descripto",
				"descriptorCount"
			],
			[
				"pS",
				"pSrv"
			],
			[
				"pV",
				"pView"
			],
			[
				"VK_N",
				"VK_NULL_HANDLE"
			],
			[
				"Des",
				"DescriptorPool"
			],
			[
				"nu",
				"nullptr"
			],
			[
				"mSu",
				"mSupportedFeatures"
			],
			[
				"def",
				"default"
			],
			[
				"mpD",
				"mpDevice"
			],
			[
				"cul",
				"cullMode"
			],
			[
				"cull",
				"cullMode"
			],
			[
				"no",
				"nodeId"
			],
			[
				"node",
				"nodeId"
			],
			[
				"new",
				"newNodeID"
			],
			[
				"nod",
				"nodeId"
			],
			[
				"ins",
				"instance"
			],
			[
				"S",
				"SceneCache"
			],
			[
				"std",
				"stdint"
			],
			[
				"GBuffer",
				"GBufferRaster"
			],
			[
				"wi",
				"widget"
			],
			[
				"con",
				"console"
			],
			[
				"mp",
				"mpDevice"
			],
			[
				"SRC",
				"SRC_FALCOR_UTILS_LOGGER_H_"
			],
			[
				"Min",
				"MinimalPathTracer"
			],
			[
				"mD",
				"mDirty"
			],
			[
				"pEnvM",
				"pEnvMap"
			],
			[
				"mpEnvm",
				"mpEnvMapSampler"
			],
			[
				"mpEnv",
				"mpEnvSampler"
			],
			[
				"pTe",
				"pTexture"
			],
			[
				"light",
				"light_color"
			],
			[
				"pA",
				"pAllocations"
			],
			[
				"mpS",
				"mpScene"
			],
			[
				"insta",
				"instance"
			],
			[
				"inc",
				"include"
			],
			[
				"FA",
				"FALCOR_RAYTRACING_RTSTATEOBJECT_H_"
			],
			[
				"FALCOR_UT",
				"FALCOR_UTILS_MATH_AABB_H_"
			],
			[
				"FALCOR_SC",
				"SRC_FALCOR_SCENE_VOLUME_H_"
			],
			[
				"ho",
				"hostAddress"
			],
			[
				"Root",
				"RootSignature"
			],
			[
				"re",
				"return"
			],
			[
				"sh",
				"shaders"
			],
			[
				"sha",
				"shading_context_name"
			],
			[
				"i",
				"import"
			],
			[
				"co",
				"codeTabs"
			],
			[
				"Qt",
				"QtGui"
			],
			[
				"clo",
				"closeButton"
			],
			[
				"vop",
				"vop_node_ctx"
			],
			[
				"arg",
				"_args_names_cache"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/Falcor/Core/API/Vulkan/VKDescriptorSet.cpp",
			"settings":
			{
				"buffer_size": 10338,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"CAAAAHoNAAAAAAAAew0AAAAAAAAAAAAAew0AAAAAAACDDQAAAAAAAAAAAACDDQAAAAAAAIQNAAAAAAAAAAAAAIQNAAAAAAAAjA0AAAAAAAAAAAAAew0AAAAAAAB7DQAAAAAAAAgAAAAgICAgICAgIIQNAAAAAAAAhQ0AAAAAAAAAAAAAhQ0AAAAAAACNDQAAAAAAAAAAAAB8DQAAAAAAAHwNAAAAAAAACAAAACAgICAgICAg",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB6DQAAAAAAAHoNAAAAAAAAAAAAAAAAUkA"
				],
				[
					9,
					1,
					"reindent",
					null,
					"AQAAAHsNAAAAAAAAgw0AAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB7DQAAAAAAAHsNAAAAAAAAAAAAAAAAUkA"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "ass"
					},
					"AwAAAIMNAAAAAAAAhA0AAAAAAAAAAAAAhA0AAAAAAACFDQAAAAAAAAAAAACFDQAAAAAAAIYNAAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACDDQAAAAAAAIMNAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert_completion",
					{
						"completion": "assert",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "assert"
					},
					"AgAAAIMNAAAAAAAAgw0AAAAAAAADAAAAYXNzgw0AAAAAAACJDQAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACGDQAAAAAAAIYNAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIkNAAAAAAAAiw0AAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJDQAAAAAAAIkNAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "pV"
					},
					"AgAAAIoNAAAAAAAAiw0AAAAAAAAAAAAAiw0AAAAAAACMDQAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACKDQAAAAAAAIoNAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"insert_completion",
					{
						"completion": "pView",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "pView"
					},
					"AgAAAIoNAAAAAAAAig0AAAAAAAACAAAAcFaKDQAAAAAAAI8NAAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMDQAAAAAAAIwNAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJANAAAAAAAAkQ0AAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACQDQAAAAAAAJANAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "\nas"
					},
					"BQAAAOYYAAAAAAAA5xgAAAAAAAAAAAAA5xgAAAAAAADrGAAAAAAAAAAAAADrGAAAAAAAAO8YAAAAAAAAAAAAAO8YAAAAAAAA8BgAAAAAAAAAAAAA8BgAAAAAAADxGAAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmGAAAAAAAAOYYAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert_completion",
					{
						"completion": "assert",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "assert"
					},
					"AgAAAO8YAAAAAAAA7xgAAAAAAAACAAAAYXPvGAAAAAAAAPUYAAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADxGAAAAAAAAPEYAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPUYAAAAAAAA9xgAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD1GAAAAAAAAPUYAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "pS"
					},
					"AgAAAPYYAAAAAAAA9xgAAAAAAAAAAAAA9xgAAAAAAAD4GAAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2GAAAAAAAAPYYAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert_completion",
					{
						"completion": "pSrv",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "pSrv"
					},
					"AgAAAPYYAAAAAAAA9hgAAAAAAAACAAAAcFP2GAAAAAAAAPoYAAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD4GAAAAAAAAPgYAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAPsYAAAAAAAA/BgAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD7GAAAAAAAAPsYAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "\nass"
					},
					"BgAAAAsaAAAAAAAADBoAAAAAAAAAAAAADBoAAAAAAAAQGgAAAAAAAAAAAAAQGgAAAAAAABQaAAAAAAAAAAAAABQaAAAAAAAAFRoAAAAAAAAAAAAAFRoAAAAAAAAWGgAAAAAAAAAAAAAWGgAAAAAAABcaAAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALGgAAAAAAAAsaAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"insert_completion",
					{
						"completion": "assert",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "assert"
					},
					"AgAAABQaAAAAAAAAFBoAAAAAAAADAAAAYXNzFBoAAAAAAAAaGgAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAXGgAAAAAAABcaAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABoaAAAAAAAAHBoAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAaGgAAAAAAABoaAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "pU"
					},
					"AgAAABsaAAAAAAAAHBoAAAAAAAAAAAAAHBoAAAAAAAAdGgAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbGgAAAAAAABsaAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"insert_completion",
					{
						"completion": "pUav",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "pUav"
					},
					"AgAAABsaAAAAAAAAGxoAAAAAAAACAAAAcFUbGgAAAAAAAB8aAAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAdGgAAAAAAAB0aAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAACAaAAAAAAAAIRoAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgGgAAAAAAACAaAAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": " &&"
					},
					"AwAAAPoYAAAAAAAA+xgAAAAAAAAAAAAA+xgAAAAAAAD8GAAAAAAAAAAAAAD8GAAAAAAAAP0YAAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6GAAAAAAAAPoYAAAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAP0YAAAAAAAA/hgAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD9GAAAAAAAAP0YAAAAAAAAAAAAAAAA8L8"
				],
				[
					57,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAP4YAAAAAAAAABkAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD+GAAAAAAAAP4YAAAAAAAAAAAAAAAA8L8"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": " &&"
					},
					"AwAAACUaAAAAAAAAJhoAAAAAAAAAAAAAJhoAAAAAAAAnGgAAAAAAAAAAAAAnGgAAAAAAACgaAAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAlGgAAAAAAACUaAAAAAAAAAAAAAAAA8L8"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACgaAAAAAAAAKRoAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAoGgAAAAAAACgaAAAAAAAAAAAAAAAA8L8"
				],
				[
					62,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAACkaAAAAAAAAKxoAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAApGgAAAAAAACkaAAAAAAAAAAAAAAAA8L8"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "Sahre"
					},
					"BQAAAP8YAAAAAAAAABkAAAAAAAAAAAAAABkAAAAAAAABGQAAAAAAAAAAAAABGQAAAAAAAAIZAAAAAAAAAAAAAAIZAAAAAAAAAxkAAAAAAAAAAAAAAxkAAAAAAAAEGQAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/GAAAAAAAAP8YAAAAAAAAAAAAAAAAa0A"
				],
				[
					72,
					1,
					"paste",
					null,
					"AgAAAP8YAAAAAAAAERkAAAAAAAAAAAAAERkAAAAAAAARGQAAAAAAAAUAAABTYWhyZQ",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/GAAAAAAAAAQZAAAAAAAAAAAAAAAA8L8"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": " poi"
					},
					"BAAAABEZAAAAAAAAEhkAAAAAAAAAAAAAEhkAAAAAAAATGQAAAAAAAAAAAAATGQAAAAAAABQZAAAAAAAAAAAAABQZAAAAAAAAFRkAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAARGQAAAAAAABEZAAAAAAAAAAAAAAAA8L8"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "nter"
					},
					"BAAAABUZAAAAAAAAFhkAAAAAAAAAAAAAFhkAAAAAAAAXGQAAAAAAAAAAAAAXGQAAAAAAABgZAAAAAAAAAAAAABgZAAAAAAAAGRkAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAVGQAAAAAAABUZAAAAAAAAAAAAAAAA8L8"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": " is"
					},
					"AwAAABkZAAAAAAAAGhkAAAAAAAAAAAAAGhkAAAAAAAAbGQAAAAAAAAAAAAAbGQAAAAAAABwZAAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAZGQAAAAAAABkZAAAAAAAAAAAAAAAA8L8"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": " NULL"
					},
					"BQAAABwZAAAAAAAAHRkAAAAAAAAAAAAAHRkAAAAAAAAeGQAAAAAAAAAAAAAeGQAAAAAAAB8ZAAAAAAAAAAAAAB8ZAAAAAAAAIBkAAAAAAAAAAAAAIBkAAAAAAAAhGQAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcGQAAAAAAABwZAAAAAAAAAAAAAAAA8L8"
				],
				[
					82,
					1,
					"paste",
					null,
					"AQAAAEwaAAAAAAAAbhoAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMGgAAAAAAAEwaAAAAAAAAAAAAAAAA8L8"
				],
				[
					90,
					1,
					"paste",
					null,
					"AgAAAEwaAAAAAAAAXxoAAAAAAAAAAAAAXxoAAAAAAABfGgAAAAAAABIAAABTaGFkZXJSZXNvdXJjZVZpZXc",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMGgAAAAAAAF4aAAAAAAAAAAAAAAAA8L8"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIAfAAAAAAAAgR8AAAAAAAAAAAAAgR8AAAAAAACJHwAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACAHwAAAAAAAIAfAAAAAAAAAAAAAAAA8L8"
				],
				[
					98,
					1,
					"paste",
					null,
					"AQAAAIAfAAAAAAAAth8AAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACAHwAAAAAAAIAfAAAAAAAAAAAAAAAAUkA"
				],
				[
					106,
					1,
					"paste",
					null,
					"AgAAAJAfAAAAAAAAoh8AAAAAAAAAAAAAoh8AAAAAAACiHwAAAAAAABMAAABVbm9yZGVyZWRBY2Nlc3NWaWV3",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACQHwAAAAAAAKMfAAAAAAAAAAAAAAAA8L8"
				],
				[
					133,
					1,
					"paste",
					null,
					"AgAAAIcfAAAAAAAAjB8AAAAAAAAAAAAAjB8AAAAAAACMHwAAAAAAAAQAAABwVWF2",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACHHwAAAAAAAIsfAAAAAAAAAAAAAAAA8L8"
				],
				[
					160,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAANYOAAAAAAAA1w4AAAAAAAAAAAAA1w4AAAAAAADYDgAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADWDgAAAAAAANYOAAAAAAAAAAAAAAAAAAA"
				],
				[
					162,
					1,
					"reindent",
					null,
					"AQAAANcOAAAAAAAA3w4AAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXDgAAAAAAANcOAAAAAAAAAAAAAAAAAAA"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": "auto"
					},
					"BAAAAN8OAAAAAAAA4A4AAAAAAAAAAAAA4A4AAAAAAADhDgAAAAAAAAAAAADhDgAAAAAAAOIOAAAAAAAAAAAAAOIOAAAAAAAA4w4AAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfDgAAAAAAAN8OAAAAAAAAAAAAAAAA8L8"
				],
				[
					164,
					1,
					"insert",
					{
						"characters": " desc"
					},
					"BQAAAOMOAAAAAAAA5A4AAAAAAAAAAAAA5A4AAAAAAADlDgAAAAAAAAAAAADlDgAAAAAAAOYOAAAAAAAAAAAAAOYOAAAAAAAA5w4AAAAAAAAAAAAA5w4AAAAAAADoDgAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADjDgAAAAAAAOMOAAAAAAAAAAAAAAAA8L8"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": "ripto"
					},
					"BQAAAOgOAAAAAAAA6Q4AAAAAAAAAAAAA6Q4AAAAAAADqDgAAAAAAAAAAAADqDgAAAAAAAOsOAAAAAAAAAAAAAOsOAAAAAAAA7A4AAAAAAAAAAAAA7A4AAAAAAADtDgAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADoDgAAAAAAAOgOAAAAAAAAAAAAAAAA8L8"
				],
				[
					168,
					1,
					"insert_completion",
					{
						"completion": "descriptorCount",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "descriptorCount"
					},
					"AgAAAOQOAAAAAAAA5A4AAAAAAAAJAAAAZGVzY3JpcHRv5A4AAAAAAADzDgAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtDgAAAAAAAO0OAAAAAAAAAAAAAAAA8L8"
				],
				[
					169,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAPMOAAAAAAAA9A4AAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADzDgAAAAAAAPMOAAAAAAAAAAAAAAAA8L8"
				],
				[
					170,
					1,
					"left_delete",
					null,
					"AQAAAPMOAAAAAAAA8w4AAAAAAAABAAAAPQ",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD0DgAAAAAAAPQOAAAAAAAAAAAAAAAA8L8"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAPMOAAAAAAAA9A4AAAAAAAAAAAAA9A4AAAAAAAD1DgAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADzDgAAAAAAAPMOAAAAAAAAAAAAAAAA8L8"
				],
				[
					172,
					1,
					"insert",
					{
						"characters": " 1;"
					},
					"AwAAAPUOAAAAAAAA9g4AAAAAAAAAAAAA9g4AAAAAAAD3DgAAAAAAAAAAAAD3DgAAAAAAAPgOAAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD1DgAAAAAAAPUOAAAAAAAAAAAAAAAA8L8"
				],
				[
					179,
					1,
					"paste",
					null,
					"AgAAABcYAAAAAAAAJhgAAAAAAAAAAAAAJhgAAAAAAAAmGAAAAAAAAAEAAAAx",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAXGAAAAAAAABgYAAAAAAAAAAAAAAAA8L8"
				],
				[
					186,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAALAUAAAAAAAAsRQAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwFAAAAAAAALAUAAAAAAAAAAAAAAAAAAA"
				],
				[
					188,
					1,
					"reindent",
					null,
					"AQAAALAUAAAAAAAAxBQAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwFAAAAAAAALAUAAAAAAAAAAAAAAAAAAA"
				],
				[
					189,
					1,
					"paste",
					null,
					"AQAAAMQUAAAAAAAA0xQAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADEFAAAAAAAAMQUAAAAAAAAAAAAAAAA8L8"
				],
				[
					190,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAANMUAAAAAAAA1BQAAAAAAAAAAAAA1BQAAAAAAADVFAAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADTFAAAAAAAANMUAAAAAAAAAAAAAAAA8L8"
				],
				[
					191,
					1,
					"insert",
					{
						"characters": " 0;"
					},
					"AwAAANUUAAAAAAAA1hQAAAAAAAAAAAAA1hQAAAAAAADXFAAAAAAAAAAAAADXFAAAAAAAANgUAAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADVFAAAAAAAANUUAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAIoVAAAAAAAAixUAAAAAAAAAAAAAixUAAAAAAACMFQAAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIoVAAAAAAAAihUAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"reindent",
					null,
					"AQAAAH8PAAAAAAAAiw8AAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH8PAAAAAAAAfw8AAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "ass"
					},
					"AwAAAIsPAAAAAAAAjA8AAAAAAAAAAAAAjA8AAAAAAACNDwAAAAAAAAAAAACNDwAAAAAAAI4PAAAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIsPAAAAAAAAiw8AAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					1,
					"insert_completion",
					{
						"completion": "assert",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "assert"
					},
					"AgAAAIsPAAAAAAAAiw8AAAAAAAADAAAAYXNziw8AAAAAAACRDwAAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI4PAAAAAAAAjg8AAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJEPAAAAAAAAkw8AAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJEPAAAAAAAAkQ8AAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "pBU"
					},
					"AwAAAJIPAAAAAAAAkw8AAAAAAAAAAAAAkw8AAAAAAACUDwAAAAAAAAAAAACUDwAAAAAAAJUPAAAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJIPAAAAAAAAkg8AAAAAAAAAAAAAAADwvw"
				],
				[
					33,
					1,
					"insert_completion",
					{
						"completion": "pBuffer",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "pBuffer"
					},
					"AgAAAJIPAAAAAAAAkg8AAAAAAAADAAAAcEJVkg8AAAAAAACZDwAAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJUPAAAAAAAAlQ8AAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": " &&"
					},
					"AwAAAJkPAAAAAAAAmg8AAAAAAAAAAAAAmg8AAAAAAACbDwAAAAAAAAAAAACbDwAAAAAAAJwPAAAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJkPAAAAAAAAmQ8AAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJwPAAAAAAAAnQ8AAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJwPAAAAAAAAnA8AAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAJ0PAAAAAAAAnw8AAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ0PAAAAAAAAnQ8AAAAAAAAAAAAAAADwvw"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "No"
					},
					"AgAAAJ4PAAAAAAAAnw8AAAAAAAAAAAAAnw8AAAAAAACgDwAAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ4PAAAAAAAAng8AAAAAAAAAAAAAAADwvw"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKAPAAAAAAAAoQ8AAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKAPAAAAAAAAoA8AAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "resource"
					},
					"CAAAAKEPAAAAAAAAog8AAAAAAAAAAAAAog8AAAAAAACjDwAAAAAAAAAAAACjDwAAAAAAAKQPAAAAAAAAAAAAAKQPAAAAAAAApQ8AAAAAAAAAAAAApQ8AAAAAAACmDwAAAAAAAAAAAACmDwAAAAAAAKcPAAAAAAAAAAAAAKcPAAAAAAAAqA8AAAAAAAAAAAAAqA8AAAAAAACpDwAAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKEPAAAAAAAAoQ8AAAAAAAAAAAAAAADwvw"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": " buffer"
					},
					"BwAAAKkPAAAAAAAAqg8AAAAAAAAAAAAAqg8AAAAAAACrDwAAAAAAAAAAAACrDwAAAAAAAKwPAAAAAAAAAAAAAKwPAAAAAAAArQ8AAAAAAAAAAAAArQ8AAAAAAACuDwAAAAAAAAAAAACuDwAAAAAAAK8PAAAAAAAAAAAAAK8PAAAAAAAAsA8AAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKkPAAAAAAAAqQ8AAAAAAAAAAAAAAADwvw"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": " !!!"
					},
					"BAAAALAPAAAAAAAAsQ8AAAAAAAAAAAAAsQ8AAAAAAACyDwAAAAAAAAAAAACyDwAAAAAAALMPAAAAAAAAAAAAALMPAAAAAAAAtA8AAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALAPAAAAAAAAsA8AAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALYPAAAAAAAAtw8AAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALYPAAAAAAAAtg8AAAAAAAAAAAAAAADwvw"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAEcQAAAAAAAASBAAAAAAAAAAAAAASBAAAAAAAABJEAAAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEcQAAAAAAAARxAAAAAAAAAAAAAAAADwvw"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAJISAAAAAAAAkxIAAAAAAAAAAAAAkxIAAAAAAACUEgAAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJISAAAAAAAAkhIAAAAAAAAAAAAAAABbQA"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAKkSAAAAAAAAqhIAAAAAAAAAAAAAqhIAAAAAAACrEgAAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKkSAAAAAAAAqRIAAAAAAAAAAAAAAADwvw"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAPoSAAAAAAAA+xIAAAAAAAAAAAAA+xIAAAAAAAD8EgAAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPoSAAAAAAAA+hIAAAAAAAAAAAAAAADwvw"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAADUTAAAAAAAANhMAAAAAAAAAAAAANhMAAAAAAAA3EwAAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADUTAAAAAAAANRMAAAAAAAAAAAAAAADwvw"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAALkTAAAAAAAAuhMAAAAAAAAAAAAAuhMAAAAAAAC7EwAAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALkTAAAAAAAAuRMAAAAAAAAAAAAAAADwvw"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAAAUAAAAAAAAARQAAAAAAAAAAAAAARQAAAAAAAACFAAAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAUAAAAAAAAABQAAAAAAAAAAAAAAADwvw"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAFkUAAAAAAAAWhQAAAAAAAAAAAAAWhQAAAAAAABbFAAAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFkUAAAAAAAAWRQAAAAAAAAAAAAAAADwvw"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAL0UAAAAAAAAvhQAAAAAAAAAAAAAvhQAAAAAAAC/FAAAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL0UAAAAAAAAvRQAAAAAAAAAAAAAAADwvw"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAAYVAAAAAAAABxUAAAAAAAAAAAAABxUAAAAAAAAIFQAAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAYVAAAAAAAABhUAAAAAAAAAAAAAAADwvw"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAADEVAAAAAAAAMhUAAAAAAAAAAAAAMhUAAAAAAAAzFQAAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADEVAAAAAAAAMRUAAAAAAAAAAAAAAADwvw"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAEUVAAAAAAAARhUAAAAAAAAAAAAARhUAAAAAAABHFQAAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEUVAAAAAAAARRUAAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "\nreturn;"
					},
					"CQAAAHAVAAAAAAAAcRUAAAAAAAAAAAAAcRUAAAAAAAB9FQAAAAAAAAAAAAB9FQAAAAAAAH4VAAAAAAAAAAAAAH4VAAAAAAAAfxUAAAAAAAAAAAAAfxUAAAAAAACAFQAAAAAAAAAAAACAFQAAAAAAAIEVAAAAAAAAAAAAAIEVAAAAAAAAghUAAAAAAAAAAAAAghUAAAAAAACDFQAAAAAAAAAAAACDFQAAAAAAAIQVAAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcBUAAAAAAABwFQAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					2,
					"right_delete",
					null,
					"AgAAAEcQAAAAAAAARxAAAAAAAAABAAAAL0cQAAAAAAAARxAAAAAAAAABAAAALw",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARxAAAAAAAABHEAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					2,
					"right_delete",
					null,
					"AgAAAJASAAAAAAAAkBIAAAAAAAABAAAAL5ASAAAAAAAAkBIAAAAAAAABAAAALw",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkBIAAAAAAACQEgAAAAAAAAAAAAAAAFtA"
				],
				[
					14,
					2,
					"right_delete",
					null,
					"AgAAAKUSAAAAAAAApRIAAAAAAAABAAAAL6USAAAAAAAApRIAAAAAAAABAAAALw",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApRIAAAAAAAClEgAAAAAAAAAAAAAAAFtA"
				],
				[
					16,
					2,
					"right_delete",
					null,
					"AgAAACsVAAAAAAAAKxUAAAAAAAABAAAALysVAAAAAAAAKxUAAAAAAAABAAAALw",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKxUAAAAAAAArFQAAAAAAAAAAAAAAAFtA"
				],
				[
					18,
					2,
					"right_delete",
					null,
					"AgAAAD0VAAAAAAAAPRUAAAAAAAABAAAALz0VAAAAAAAAPRUAAAAAAAABAAAALw",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPRUAAAAAAAA9FQAAAAAAAAAAAAAAAFtA"
				],
				[
					23,
					1,
					"left_delete",
					null,
					"AQAAAG8VAAAAAAAAbxUAAAAAAAAUAAAAICAgIHJldHVybjsKICAgICAgICA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbxUAAAAAAACDFQAAAAAAAAAAAAAAAFJA"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACcVAAAAAAAAKBUAAAAAAAAAAAAAKBUAAAAAAAAwFQAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJxUAAAAAAAAnFQAAAAAAAAAAAAAAAFJA"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAACcVAAAAAAAAKxUAAAAAAAAAAAAAKxUAAAAAAAAvFQAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJxUAAAAAAAAnFQAAAAAAAAAAAAAAAFJA"
				],
				[
					28,
					1,
					"paste",
					null,
					"AQAAAC8VAAAAAAAAQxUAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALxUAAAAAAAAvFQAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": "\n\nvoid"
					},
					"CQAAAEIZAAAAAAAAQxkAAAAAAAAAAAAAQxkAAAAAAABHGQAAAAAAAAAAAABHGQAAAAAAAEgZAAAAAAAAAAAAAEgZAAAAAAAATBkAAAAAAAAAAAAAQxkAAAAAAABDGQAAAAAAAAQAAAAgICAgSBkAAAAAAABJGQAAAAAAAAAAAABJGQAAAAAAAEoZAAAAAAAAAAAAAEoZAAAAAAAASxkAAAAAAAAAAAAASxkAAAAAAABMGQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQhkAAAAAAABCGQAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEwZAAAAAAAATRkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATBkAAAAAAABMGQAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAAE0ZAAAAAAAAnBkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATRkAAAAAAABNGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					2,
					"right_delete",
					null,
					"AgAAAE0ZAAAAAAAATRkAAAAAAAAEAAAAYm9vbE0ZAAAAAAAATRkAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAATRkAAAAAAABRGQAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"paste",
					null,
					"AQAAAE0ZAAAAAAAAXBkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATRkAAAAAAABNGQAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"left_delete",
					null,
					"AQAAAKUZAAAAAAAApRkAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAphkAAAAAAACmGQAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKUZAAAAAAAAphkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApRkAAAAAAAClGQAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAKYZAAAAAAAAqBkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAphkAAAAAAACmGQAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAKcZAAAAAAAAqBkAAAAAAAAAAAAAqBkAAAAAAACsGQAAAAAAAAAAAACsGQAAAAAAAK0ZAAAAAAAAAAAAAK0ZAAAAAAAAsRkAAAAAAAAAAAAAqBkAAAAAAACoGQAAAAAAAAQAAAAgICAgqBkAAAAAAACwGQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApxkAAAAAAACnGQAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					3,
					"left_delete",
					null,
					"AwAAAEQZAAAAAAAARBkAAAAAAAByAAAAICAgIHZvaWQgRGVzY3JpcHRvclNldDo6c2V0QVMoY29uc3QgQmluZExvY2F0aW9uJiBiaW5kTG9jYXRpb24sIFZrQWNjZWxlcmF0aW9uU3RydWN0dXJlS0hSIGFjY2VsKSB7CiAgICAgICAgCiAgICB9QxkAAAAAAABDGQAAAAAAAAEAAAAKQhkAAAAAAABCGQAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAAthkAAAAAAABEGQAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAEMZAAAAAAAARBkAAAAAAAAAAAAARBkAAAAAAABFGQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQxkAAAAAAABDGQAAAAAAAAAAAAAAgEZA"
				],
				[
					29,
					1,
					"reindent",
					null,
					"AQAAAEQZAAAAAAAASBkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARBkAAAAAAABEGQAAAAAAAAAAAAAAAAAA"
				],
				[
					30,
					1,
					"paste",
					null,
					"AQAAAEgZAAAAAAAAnhkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASBkAAAAAAABIGQAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"left_delete",
					null,
					"AQAAAJ0ZAAAAAAAAnRkAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAnhkAAAAAAACeGQAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJ0ZAAAAAAAAnhkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnRkAAAAAAACdGQAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJ4ZAAAAAAAAoBkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnhkAAAAAAACeGQAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAJ8ZAAAAAAAAoBkAAAAAAAAAAAAAoBkAAAAAAACkGQAAAAAAAAAAAACkGQAAAAAAAKUZAAAAAAAAAAAAAKUZAAAAAAAAqRkAAAAAAAAAAAAAoBkAAAAAAACgGQAAAAAAAAQAAAAgICAgoBkAAAAAAACoGQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnxkAAAAAAACfGQAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"paste",
					null,
					"AQAAAE0ZAAAAAAAAXBkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATRkAAAAAAABNGQAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAALcZAAAAAAAAuxkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtxkAAAAAAAC3GQAAAAAAAAAAAAAAAGtA"
				],
				[
					43,
					1,
					"left_delete",
					null,
					"AQAAALcZAAAAAAAAtxkAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAuxkAAAAAAAC7GQAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "prin"
					},
					"BAAAALcZAAAAAAAAuBkAAAAAAAAAAAAAuBkAAAAAAAC5GQAAAAAAAAAAAAC5GQAAAAAAALoZAAAAAAAAAAAAALoZAAAAAAAAuxkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtxkAAAAAAAC3GQAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert_completion",
					{
						"completion": "printf",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "printf"
					},
					"AgAAALcZAAAAAAAAtxkAAAAAAAAEAAAAcHJpbrcZAAAAAAAAvRkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuxkAAAAAAAC7GQAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAL0ZAAAAAAAAvxkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvRkAAAAAAAC9GQAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAL4ZAAAAAAAAwBkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvhkAAAAAAAC+GQAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "!!!!"
					},
					"BAAAAL8ZAAAAAAAAwBkAAAAAAAAAAAAAwBkAAAAAAADBGQAAAAAAAAAAAADBGQAAAAAAAMIZAAAAAAAAAAAAAMIZAAAAAAAAwxkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvxkAAAAAAAC/GQAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMMZAAAAAAAAxBkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwxkAAAAAAADDGQAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"paste",
					null,
					"AQAAAMQZAAAAAAAA2BkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxBkAAAAAAADEGQAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "'n"
					},
					"AgAAANgZAAAAAAAA2RkAAAAAAAAAAAAA2RkAAAAAAADaGQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2BkAAAAAAADYGQAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANwZAAAAAAAA3RkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3BkAAAAAAADcGQAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": "\\"
					},
					"AQAAANgZAAAAAAAA2RkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2BkAAAAAAADYGQAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"right_delete",
					null,
					"AQAAANkZAAAAAAAA2RkAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAA2RkAAAAAAADZGQAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"CAAAAN0ZAAAAAAAA3hkAAAAAAAAAAAAA3hkAAAAAAADmGQAAAAAAAAAAAADmGQAAAAAAAOcZAAAAAAAAAAAAAOcZAAAAAAAA7xkAAAAAAAAAAAAA3hkAAAAAAADeGQAAAAAAAAgAAAAgICAgICAgIOcZAAAAAAAA6BkAAAAAAAAAAAAA6BkAAAAAAADwGQAAAAAAAAAAAADfGQAAAAAAAN8ZAAAAAAAACAAAACAgICAgICAg",
					"AQAAAAAAAAABAAAA3RkAAAAAAADdGQAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"paste",
					null,
					"AQAAAOgZAAAAAAAADhoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6BkAAAAAAADoGQAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": " done"
					},
					"BQAAAAkaAAAAAAAAChoAAAAAAAAAAAAAChoAAAAAAAALGgAAAAAAAAAAAAALGgAAAAAAAAwaAAAAAAAAAAAAAAwaAAAAAAAADRoAAAAAAAAAAAAADRoAAAAAAAAOGgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACRoAAAAAAAAJGgAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": " ~!"
					},
					"AwAAAA4aAAAAAAAADxoAAAAAAAAAAAAADxoAAAAAAAAQGgAAAAAAAAAAAAAQGgAAAAAAABEaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADhoAAAAAAAAOGgAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					2,
					"left_delete",
					null,
					"AgAAABAaAAAAAAAAEBoAAAAAAAABAAAAIQ8aAAAAAAAADxoAAAAAAAABAAAAfg",
					"AQAAAAAAAAABAAAAERoAAAAAAAARGgAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "!"
					},
					"AQAAAA8aAAAAAAAAEBoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADxoAAAAAAAAPGgAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"reindent",
					null,
					"AQAAAN4ZAAAAAAAA5hkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3hkAAAAAAADeGQAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"paste",
					null,
					"AQAAAOYZAAAAAAAAvhoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5hkAAAAAAADmGQAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAGMaAAAAAAAAZRoAAAAAAAAAAAAAZRoAAAAAAABpGgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYxoAAAAAAABjGgAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AQAAAOYZAAAAAAAA5xkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5hkAAAAAAADmGQAAAAAAAAAAAAAAAFJA"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAJcaAAAAAAAAmRoAAAAAAAAAAAAAmRoAAAAAAACdGgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlxoAAAAAAACXGgAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"paste",
					null,
					"AgAAAMYaAAAAAAAAyxoAAAAAAAAAAAAAyxoAAAAAAADLGgAAAAAAAAQAAAB0bGFz",
					"AQAAAAAAAAABAAAAxhoAAAAAAADKGgAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"insert",
					{
						"characters": "V"
					},
					"AQAAAOYZAAAAAAAA5xkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5hkAAAAAAADmGQAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"right_delete",
					null,
					"AQAAAOcZAAAAAAAA5xkAAAAAAAABAAAAdg",
					"AQAAAAAAAAABAAAA5xkAAAAAAADnGQAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"reindent",
					null,
					"AQAAAM0aAAAAAAAA1RoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzRoAAAAAAADNGgAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BgAAANUaAAAAAAAA1hoAAAAAAAAAAAAA1hoAAAAAAADeGgAAAAAAAAAAAADNGgAAAAAAAM0aAAAAAAAACAAAACAgICAgICAg1hoAAAAAAADXGgAAAAAAAAAAAADXGgAAAAAAAN8aAAAAAAAAAAAAAM4aAAAAAAAAzhoAAAAAAAAIAAAAICAgICAgICA",
					"AQAAAAAAAAABAAAA1RoAAAAAAADVGgAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"reindent",
					null,
					"AQAAAM4aAAAAAAAA1hoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzhoAAAAAAADOGgAAAAAAAAAAAAAAAFJA"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AgAAANYaAAAAAAAA1xoAAAAAAAAAAAAA2BoAAAAAAADYGgAAAAAAAAgAAAAgICAgICAgIA",
					"AQAAAAAAAAABAAAA1hoAAAAAAADWGgAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"left_delete",
					null,
					"AQAAANYaAAAAAAAA1hoAAAAAAAABAAAAdg",
					"AQAAAAAAAAABAAAA1xoAAAAAAADXGgAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"paste",
					null,
					"AQAAANYaAAAAAAAAHBsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1hoAAAAAAADWGgAAAAAAAAAAAAAAAPC/"
				],
				[
					131,
					1,
					"paste",
					null,
					"AgAAAO0aAAAAAAAADRsAAAAAAAAAAAAADRsAAAAAAAANGwAAAAAAABYAAABkZXZpY2UtPmdldEFwaUhhbmRsZSgp",
					"AQAAAAAAAAABAAAA7RoAAAAAAAADGwAAAAAAAAAAAAAAAPC/"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAN0ZAAAAAAAA3hkAAAAAAAAAAAAA3hkAAAAAAADmGQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3RkAAAAAAADdGQAAAAAAAAAAAAAAAPC/"
				],
				[
					138,
					1,
					"paste",
					null,
					"AQAAAOYZAAAAAAAABhoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5hkAAAAAAADmGQAAAAAAAAAAAAAAAPC/"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAYaAAAAAAAABxoAAAAAAAAAAAAABxoAAAAAAAAPGgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABhoAAAAAAAAGGgAAAAAAAAAAAAAAAPC/"
				],
				[
					149,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAAYaAAAAAAAABxoAAAAAAAAAAAAABxoAAAAAAAAPGgAAAAAAAAAAAAAQGgAAAAAAABAaAAAAAAAACAAAACAgICAgICAg",
					"AQAAAAAAAAABAAAABhoAAAAAAAAGGgAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					1,
					"paste",
					null,
					"AQAAAA8aAAAAAAAARBoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADxoAAAAAAAAPGgAAAAAAAAAAAAAAAPC/"
				],
				[
					154,
					1,
					"right_delete",
					null,
					"AQAAAEcQAAAAAAAARxAAAAAAAAAPAAAAaWYgKHBCdWZmZXIpIHsK",
					"AQAAAAAAAAABAAAARxAAAAAAAABWEAAAAAAAAAAAAAAAAFtA"
				],
				[
					157,
					1,
					"right_delete",
					null,
					"AQAAAHkSAAAAAAAAeRIAAAAAAADbAgAAICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKHR5cGUgPT0gRGVzY3JpcHRvclBvb2w6OlR5cGU6OkFjY2VsZXJhdGlvblN0cnVjdHVyZVNydiApIHsKICAgICAgICAgICAgLy8gICAgICAgIC8vIEVtcHR5IGFjY2VsZXJhdGlvbiBzdHJ1Y3R1cmUgdmlldwogICAgICAgICAgICAvLyAgICAgICAgZGVzY3JpcHRvclNldEFjY2VsZXJhdGlvblN0cnVjdHVyZS5zVHlwZSA9IFZLX1NUUlVDVFVSRV9UWVBFX1dSSVRFX0RFU0NSSVBUT1JfU0VUX0FDQ0VMRVJBVElPTl9TVFJVQ1RVUkVfS0hSOwogICAgICAgICAgICAvLyAgICAgICAgZGVzY3JpcHRvclNldEFjY2VsZXJhdGlvblN0cnVjdHVyZS5wTmV4dCA9IE5VTEw7CiAgICAgICAgICAgIC8vICAgICAgICBkZXNjcmlwdG9yU2V0QWNjZWxlcmF0aW9uU3RydWN0dXJlLmFjY2VsZXJhdGlvblN0cnVjdHVyZUNvdW50ID0gMDsKICAgICAgICAgICAgLy8gICAgICAgIGRlc2NyaXB0b3JTZXRBY2NlbGVyYXRpb25TdHJ1Y3R1cmUucEFjY2VsZXJhdGlvblN0cnVjdHVyZXMgPSBWS19OVUxMX0hBTkRMRTsKCiAgICAgICAgICAgIC8vICAgICAgICB3cml0ZS5wTmV4dCA9ICZkZXNjcmlwdG9yU2V0QWNjZWxlcmF0aW9uU3RydWN0dXJlOwogICAgICAgICAgICAvLyAgICAgICAgZGVzY3JpcHRvckNvdW50ID0gMDsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0",
					"AQAAAAAAAAABAAAAVBUAAAAAAAB5EgAAAAAAAAAAAAAAAPC/"
				],
				[
					160,
					1,
					"unindent",
					null,
					"CwAAAEgQAAAAAAAASBAAAAAAAAAEAAAAICAgIG4QAAAAAAAAbhAAAAAAAAAEAAAAICAgILMQAAAAAAAAsxAAAAAAAAAEAAAAICAgIO4QAAAAAAAA7hAAAAAAAAAEAAAAICAgIBsRAAAAAAAAGxEAAAAAAAAEAAAAICAgIDARAAAAAAAAMBEAAAAAAAAEAAAAICAgIGkRAAAAAAAAaREAAAAAAAAEAAAAICAgIKkRAAAAAAAAqREAAAAAAAAEAAAAICAgINwRAAAAAAAA3BEAAAAAAAAEAAAAICAgIAkSAAAAAAAACRIAAAAAAAAEAAAAICAgIDsSAAAAAAAAOxIAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAdBIAAAAAAABIEAAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"left_delete",
					null,
					"AQAAADoQAAAAAAAAOhAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAOxAAAAAAAAA7EAAAAAAAAAAAAAAAAPC/"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"CAAAAMYWAAAAAAAAxxYAAAAAAAAAAAAAxxYAAAAAAADPFgAAAAAAAAAAAADPFgAAAAAAANAWAAAAAAAAAAAAANAWAAAAAAAA2BYAAAAAAAAAAAAAxxYAAAAAAADHFgAAAAAAAAgAAAAgICAgICAgINAWAAAAAAAA0RYAAAAAAAAAAAAA0RYAAAAAAADZFgAAAAAAAAAAAADIFgAAAAAAAMgWAAAAAAAACAAAACAgICAgICAg",
					"AQAAAAAAAAABAAAAxhYAAAAAAADGFgAAAAAAAAAAAAAAAPC/"
				],
				[
					173,
					1,
					"reindent",
					null,
					"AQAAAMgWAAAAAAAA0BYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyBYAAAAAAADIFgAAAAAAAAAAAAAAAFJA"
				],
				[
					174,
					1,
					"insert",
					{
						"characters": "auto"
					},
					"BQAAANAWAAAAAAAA0RYAAAAAAAAAAAAA0hYAAAAAAADSFgAAAAAAAAgAAAAgICAgICAgINEWAAAAAAAA0hYAAAAAAAAAAAAA0hYAAAAAAADTFgAAAAAAAAAAAADTFgAAAAAAANQWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0BYAAAAAAADQFgAAAAAAAAAAAAAAAPC/"
				],
				[
					175,
					1,
					"insert",
					{
						"characters": " bindI"
					},
					"BgAAANQWAAAAAAAA1RYAAAAAAAAAAAAA1RYAAAAAAADWFgAAAAAAAAAAAADWFgAAAAAAANcWAAAAAAAAAAAAANcWAAAAAAAA2BYAAAAAAAAAAAAA2BYAAAAAAADZFgAAAAAAAAAAAADZFgAAAAAAANoWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1BYAAAAAAADUFgAAAAAAAAAAAAAAAPC/"
				],
				[
					176,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAANoWAAAAAAAA2xYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2hYAAAAAAADaFgAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					1,
					"insert_completion",
					{
						"completion": "bindIndex",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "bindIndex"
					},
					"AgAAANUWAAAAAAAA1RYAAAAAAAAGAAAAYmluZElu1RYAAAAAAADeFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2xYAAAAAAADbFgAAAAAAAAAAAAAAAPC/"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAN4WAAAAAAAA3xYAAAAAAAAAAAAA3xYAAAAAAADgFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3hYAAAAAAADeFgAAAAAAAAAAAAAAAPC/"
				],
				[
					179,
					1,
					"paste",
					null,
					"AQAAAOAWAAAAAAAACRcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4BYAAAAAAADgFgAAAAAAAAAAAAAAAPC/"
				],
				[
					180,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAAkXAAAAAAAAChcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACRcAAAAAAAAJFwAAAAAAAAAAAAAAAPC/"
				],
				[
					183,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAN8WAAAAAAAA4BYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3xYAAAAAAADfFgAAAAAAAAAAAAAAAPC/"
				],
				[
					190,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHQXAAAAAAAAdRcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdBcAAAAAAAB0FwAAAAAAAAAAAAAAYGVA"
				],
				[
					192,
					1,
					"reindent",
					null,
					"AQAAAHQXAAAAAAAAfBcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdBcAAAAAAAB0FwAAAAAAAAAAAAAAAAAA"
				],
				[
					193,
					1,
					"paste",
					null,
					"AQAAAHwXAAAAAAAAjhcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfBcAAAAAAAB8FwAAAAAAAAAAAAAAAPC/"
				],
				[
					202,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAI4XAAAAAAAAjxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjhcAAAAAAACOFwAAAAAAAAAAAAAAAPC/"
				],
				[
					203,
					1,
					"paste",
					null,
					"AQAAAI8XAAAAAAAAmBcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjxcAAAAAAACPFwAAAAAAAAAAAAAAAPC/"
				],
				[
					204,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJgXAAAAAAAAmRcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmBcAAAAAAACYFwAAAAAAAAAAAAAAAPC/"
				],
				[
					212,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJkXAAAAAAAAmhcAAAAAAAAAAAAAmhcAAAAAAACiFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmRcAAAAAAACZFwAAAAAAAAAAAAAAAPC/"
				],
				[
					213,
					1,
					"paste",
					null,
					"AQAAAKIXAAAAAAAAxRcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAohcAAAAAAACiFwAAAAAAAAAAAAAAAPC/"
				],
				[
					216,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAwXAAAAAAAADRcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADBcAAAAAAAAMFwAAAAAAAAAAAAAAAPC/"
				],
				[
					218,
					1,
					"reindent",
					null,
					"AQAAAAwXAAAAAAAAFBcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADBcAAAAAAAAMFwAAAAAAAAAAAAAAAAAA"
				],
				[
					219,
					1,
					"insert",
					{
						"characters": "auto"
					},
					"BAAAABQXAAAAAAAAFRcAAAAAAAAAAAAAFRcAAAAAAAAWFwAAAAAAAAAAAAAWFwAAAAAAABcXAAAAAAAAAAAAABcXAAAAAAAAGBcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFBcAAAAAAAAUFwAAAAAAAAAAAAAAAPC/"
				],
				[
					220,
					1,
					"insert",
					{
						"characters": " a"
					},
					"AgAAABgXAAAAAAAAGRcAAAAAAAAAAAAAGRcAAAAAAAAaFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGBcAAAAAAAAYFwAAAAAAAAAAAAAAAPC/"
				],
				[
					221,
					1,
					"insert_completion",
					{
						"completion": "arrayIndex",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "arrayIndex"
					},
					"AgAAABkXAAAAAAAAGRcAAAAAAAABAAAAYRkXAAAAAAAAIxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGhcAAAAAAAAaFwAAAAAAAAAAAAAAAPC/"
				],
				[
					222,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAACMXAAAAAAAAJBcAAAAAAAAAAAAAJBcAAAAAAAAlFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIxcAAAAAAAAjFwAAAAAAAAAAAAAAAPC/"
				],
				[
					223,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACUXAAAAAAAAJhcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJRcAAAAAAAAlFwAAAAAAAAAAAAAAAPC/"
				],
				[
					232,
					1,
					"paste",
					null,
					"AQAAACYXAAAAAAAALxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJhcAAAAAAAAmFwAAAAAAAAAAAAAAAPC/"
				],
				[
					233,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAC8XAAAAAAAAMBcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALxcAAAAAAAAvFwAAAAAAAAAAAAAAAPC/"
				],
				[
					240,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOoXAAAAAAAA6xcAAAAAAAAAAAAA6xcAAAAAAADzFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6hcAAAAAAADqFwAAAAAAAAAAAAAAAPC/"
				],
				[
					241,
					1,
					"paste",
					null,
					"AQAAAPMXAAAAAAAAMxgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8xcAAAAAAADzFwAAAAAAAAAAAAAAAPC/"
				],
				[
					248,
					1,
					"paste",
					null,
					"AQAAAPMXAAAAAAAA+BcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8xcAAAAAAADzFwAAAAAAAAAAAAAAAPC/"
				],
				[
					251,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADgYAAAAAAAAORgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOBgAAAAAAAA4GAAAAAAAAAAAAAAAAPC/"
				],
				[
					253,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAACoZAAAAAAAAKxkAAAAAAAAAAAAAKxkAAAAAAAAsGQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKhkAAAAAAAAqGQAAAAAAAAAAAAAA8IVA"
				],
				[
					255,
					1,
					"reindent",
					null,
					"AQAAACsZAAAAAAAAMxkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKxkAAAAAAAArGQAAAAAAAAAAAAAAAAAA"
				],
				[
					256,
					1,
					"insert",
					{
						"characters": "wtire"
					},
					"BQAAADMZAAAAAAAANBkAAAAAAAAAAAAANBkAAAAAAAA1GQAAAAAAAAAAAAA1GQAAAAAAADYZAAAAAAAAAAAAADYZAAAAAAAANxkAAAAAAAAAAAAANxkAAAAAAAA4GQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMxkAAAAAAAAzGQAAAAAAAAAAAAAAAPC/"
				],
				[
					257,
					4,
					"left_delete",
					null,
					"BAAAADcZAAAAAAAANxkAAAAAAAABAAAAZTYZAAAAAAAANhkAAAAAAAABAAAAcjUZAAAAAAAANRkAAAAAAAABAAAAaTQZAAAAAAAANBkAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAOBkAAAAAAAA4GQAAAAAAAAAAAAAAAPC/"
				],
				[
					258,
					1,
					"insert",
					{
						"characters": "rite.pN"
					},
					"BwAAADQZAAAAAAAANRkAAAAAAAAAAAAANRkAAAAAAAA2GQAAAAAAAAAAAAA2GQAAAAAAADcZAAAAAAAAAAAAADcZAAAAAAAAOBkAAAAAAAAAAAAAOBkAAAAAAAA5GQAAAAAAAAAAAAA5GQAAAAAAADoZAAAAAAAAAAAAADoZAAAAAAAAOxkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANBkAAAAAAAA0GQAAAAAAAAAAAAAAAPC/"
				],
				[
					259,
					1,
					"insert_completion",
					{
						"completion": "pNext",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "pNext"
					},
					"AgAAADkZAAAAAAAAORkAAAAAAAACAAAAcE45GQAAAAAAAD4ZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOxkAAAAAAAA7GQAAAAAAAAAAAAAAAPC/"
				],
				[
					260,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAD4ZAAAAAAAAPxkAAAAAAAAAAAAAPxkAAAAAAABAGQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPhkAAAAAAAA+GQAAAAAAAAAAAAAAAPC/"
				],
				[
					261,
					1,
					"insert",
					{
						"characters": " &"
					},
					"AgAAAEAZAAAAAAAAQRkAAAAAAAAAAAAAQRkAAAAAAABCGQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQBkAAAAAAABAGQAAAAAAAAAAAAAAAPC/"
				],
				[
					262,
					1,
					"insert",
					{
						"characters": "se"
					},
					"AgAAAEIZAAAAAAAAQxkAAAAAAAAAAAAAQxkAAAAAAABEGQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQhkAAAAAAABCGQAAAAAAAAAAAAAAAPC/"
				],
				[
					263,
					2,
					"left_delete",
					null,
					"AgAAAEMZAAAAAAAAQxkAAAAAAAABAAAAZUIZAAAAAAAAQhkAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAARBkAAAAAAABEGQAAAAAAAAAAAAAAAPC/"
				],
				[
					264,
					1,
					"insert",
					{
						"characters": "desc"
					},
					"BAAAAEIZAAAAAAAAQxkAAAAAAAAAAAAAQxkAAAAAAABEGQAAAAAAAAAAAABEGQAAAAAAAEUZAAAAAAAAAAAAAEUZAAAAAAAARhkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQhkAAAAAAABCGQAAAAAAAAAAAAAAAPC/"
				],
				[
					265,
					1,
					"insert_completion",
					{
						"completion": "descASInfo",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "descASInfo"
					},
					"AgAAAEIZAAAAAAAAQhkAAAAAAAAEAAAAZGVzY0IZAAAAAAAATBkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARhkAAAAAAABGGQAAAAAAAAAAAAAAAPC/"
				],
				[
					266,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEwZAAAAAAAATRkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATBkAAAAAAABMGQAAAAAAAAAAAAAAAPC/"
				],
				[
					272,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJgXAAAAAAAAmRcAAAAAAAAAAAAAmRcAAAAAAAChFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmBcAAAAAAACYFwAAAAAAAAAAAAAAAPC/"
				],
				[
					273,
					1,
					"paste",
					null,
					"AQAAAKEXAAAAAAAAtBcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoRcAAAAAAAChFwAAAAAAAAAAAAAAAPC/"
				],
				[
					281,
					1,
					"paste",
					null,
					"AgAAALAXAAAAAAAAuhcAAAAAAAAAAAAAuhcAAAAAAAC6FwAAAAAAAAMAAABzZXQ",
					"AQAAAAAAAAABAAAAsBcAAAAAAACzFwAAAAAAAAAAAAAAAPC/"
				],
				[
					284,
					1,
					"right_delete",
					null,
					"AQAAACsYAAAAAAAAKxgAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAAKxgAAAAAAAArGAAAAAAAAAAAAAAAAPC/"
				],
				[
					292,
					1,
					"paste",
					null,
					"AgAAAAIYAAAAAAAACxgAAAAAAAAAAAAACxgAAAAAAAALGAAAAAAAAAoAAABhcnJheUluZGV4",
					"AQAAAAAAAAABAAAADBgAAAAAAAACGAAAAAAAAAAAAAAAAPC/"
				],
				[
					297,
					1,
					"right_delete",
					null,
					"AQAAABQXAAAAAAAAFBcAAAAAAAAdAAAAYXV0byBhcnJheUluZGV4ID0gZGVzY0luZGV4Owo",
					"AQAAAAAAAAABAAAAFBcAAAAAAAAxFwAAAAAAAAAAAAAAAFJA"
				],
				[
					303,
					1,
					"paste",
					null,
					"AgAAAKcXAAAAAAAA5BcAAAAAAAAAAAAA5BcAAAAAAADkFwAAAAAAAB0AAAB3cml0ZS5kc3RCaW5kaW5nID0gYmluZEluZGV4Ow",
					"AQAAAAAAAAABAAAApxcAAAAAAADEFwAAAAAAAAAAAAAAAPC/"
				],
				[
					307,
					1,
					"right_delete",
					null,
					"AQAAANAWAAAAAAAA0BYAAAAAAABNAAAAYXV0byBiaW5kSW5kZXggPSBtTGF5b3V0LmdldFJhbmdlKHJhbmdlSW5kZXgpLmJhc2VSZWdJbmRleDsKICAgICAgICAKICAgICAgICA",
					"AQAAAAAAAAABAAAA0BYAAAAAAAAdFwAAAAAAAAAAAAAAAFJA"
				],
				[
					314,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABEYAAAAAAAAEhgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAERgAAAAAAAARGAAAAAAAAAAAAAAAYGVA"
				],
				[
					316,
					1,
					"reindent",
					null,
					"AQAAABEYAAAAAAAAGRgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAERgAAAAAAAARGAAAAAAAAAAAAAAAAAAA"
				],
				[
					317,
					1,
					"paste",
					null,
					"AQAAABkYAAAAAAAAMxgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGRgAAAAAAAAZGAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/DescriptorSet.h",
			"settings":
			{
				"buffer_size": 5947,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEkRAAAAAAAAShEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASREAAAAAAABJEQAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"reindent",
					null,
					"AQAAAEoRAAAAAAAAThEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAShEAAAAAAABKEQAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"paste",
					null,
					"AQAAAE4RAAAAAAAAoxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAThEAAAAAAABOEQAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "A"
					},
					"AQAAAFYRAAAAAAAAVxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVhEAAAAAAABWEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					2,
					"right_delete",
					null,
					"AgAAAFgRAAAAAAAAWBEAAAAAAAABAAAAclgRAAAAAAAAWBEAAAAAAAABAAAAdg",
					"AQAAAAAAAAABAAAAWBEAAAAAAABYEQAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"paste",
					null,
					"AgAAAIIRAAAAAAAAnBEAAAAAAAAAAAAAnBEAAAAAAACcEQAAAAAAAB4AAABjb25zdCBTaGFkZXJSZXNvdXJjZVZpZXcqIHBTcnY",
					"AQAAAAAAAAABAAAAghEAAAAAAACgEQAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " acc"
					},
					"BAAAAJwRAAAAAAAAnREAAAAAAAAAAAAAnREAAAAAAACeEQAAAAAAAAAAAACeEQAAAAAAAJ8RAAAAAAAAAAAAAJ8RAAAAAAAAoBEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnBEAAAAAAACcEQAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert_completion",
					{
						"completion": "accel",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "accel"
					},
					"AgAAAJ0RAAAAAAAAnREAAAAAAAADAAAAYWNjnREAAAAAAACiEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoBEAAAAAAACgEQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/Core/BufferTypes/ParameterBlock.cpp",
			"settings":
			{
				"buffer_size": 67365,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "\nprib"
					},
					"BwAAAEPQAAAAAAAARNAAAAAAAAAAAAAARNAAAAAAAABc0AAAAAAAAAAAAABc0AAAAAAAAGDQAAAAAAAAAAAAAGDQAAAAAAAAYdAAAAAAAAAAAAAAYdAAAAAAAABi0AAAAAAAAAAAAABi0AAAAAAAAGPQAAAAAAAAAAAAAGPQAAAAAAAAZNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQ9AAAAAAAABD0AAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"left_delete",
					null,
					"AQAAAGPQAAAAAAAAY9AAAAAAAAABAAAAYg",
					"AQAAAAAAAAABAAAAZNAAAAAAAABk0AAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "nt"
					},
					"AgAAAGPQAAAAAAAAZNAAAAAAAAAAAAAAZNAAAAAAAABl0AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAY9AAAAAAAABj0AAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert_completion",
					{
						"completion": "printf",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "printf"
					},
					"AgAAAGDQAAAAAAAAYNAAAAAAAAAFAAAAcHJpbnRg0AAAAAAAAGbQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZdAAAAAAAABl0AAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGbQAAAAAAAAaNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZtAAAAAAAABm0AAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAGfQAAAAAAAAadAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZ9AAAAAAAABn0AAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "!!!!!!!!!!!!"
					},
					"DAAAAGjQAAAAAAAAadAAAAAAAAAAAAAAadAAAAAAAABq0AAAAAAAAAAAAABq0AAAAAAAAGvQAAAAAAAAAAAAAGvQAAAAAAAAbNAAAAAAAAAAAAAAbNAAAAAAAABt0AAAAAAAAAAAAABt0AAAAAAAAG7QAAAAAAAAAAAAAG7QAAAAAAAAb9AAAAAAAAAAAAAAb9AAAAAAAABw0AAAAAAAAAAAAABw0AAAAAAAAHHQAAAAAAAAAAAAAHHQAAAAAAAActAAAAAAAAAAAAAActAAAAAAAABz0AAAAAAAAAAAAABz0AAAAAAAAHTQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaNAAAAAAAABo0AAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHTQAAAAAAAAddAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdNAAAAAAAAB00AAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"paste",
					null,
					"AQAAAHXQAAAAAAAAotAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAddAAAAAAAAB10AAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "\\n"
					},
					"AgAAAKLQAAAAAAAAo9AAAAAAAAAAAAAAo9AAAAAAAACk0AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAotAAAAAAAACi0AAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKbQAAAAAAAAp9AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAptAAAAAAAACm0AAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAExzAAAAAAAATXMAAAAAAAAAAAAATXMAAAAAAABOcwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATHMAAAAAAABMcwAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					2,
					"left_delete",
					null,
					"AgAAAE1zAAAAAAAATXMAAAAAAAABAAAACkxzAAAAAAAATHMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAATnMAAAAAAABOcwAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAKd1AAAAAAAAqHUAAAAAAAAAAAAAqHUAAAAAAACpdQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAp3UAAAAAAACndQAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"paste",
					null,
					"AQAAAKh1AAAAAAAA+3UAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqHUAAAAAAACodQAAAAAAAAAAAAAAAAAA"
				],
				[
					36,
					1,
					"right_delete",
					null,
					"AQAAAKh1AAAAAAAAqHUAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAArHUAAAAAAACodQAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"paste",
					null,
					"AQAAAK11AAAAAAAAvXUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArXUAAAAAAACtdQAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"left_delete",
					null,
					"AQAAAAZ2AAAAAAAABnYAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAB3YAAAAAAAAHdgAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAZ2AAAAAAAAB3YAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABnYAAAAAAAAGdgAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAAd2AAAAAAAACXYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAB3YAAAAAAAAHdgAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAAh2AAAAAAAACXYAAAAAAAAAAAAACXYAAAAAAAAKdgAAAAAAAAAAAAAJdgAAAAAAAA12AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACHYAAAAAAAAIdgAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"paste",
					null,
					"AQAAAA12AAAAAAAAQ3YAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADXYAAAAAAAANdgAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"CAAAADJ2AAAAAAAAM3YAAAAAAAAAAAAAM3YAAAAAAAA3dgAAAAAAAAAAAAA3dgAAAAAAADh2AAAAAAAAAAAAADh2AAAAAAAAPHYAAAAAAAAAAAAAM3YAAAAAAAAzdgAAAAAAAAQAAAAgICAgOHYAAAAAAAA5dgAAAAAAAAAAAAA5dgAAAAAAAD12AAAAAAAAAAAAADR2AAAAAAAANHYAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAMnYAAAAAAAAydgAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"reindent",
					null,
					"AQAAADR2AAAAAAAAOHYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANHYAAAAAAAA0dgAAAAAAAAAAAAAAAEJA"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": "auto"
					},
					"BQAAADh2AAAAAAAAOXYAAAAAAAAAAAAAOnYAAAAAAAA6dgAAAAAAAAQAAAAgICAgOXYAAAAAAAA6dgAAAAAAAAAAAAA6dgAAAAAAADt2AAAAAAAAAAAAADt2AAAAAAAAPHYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOHYAAAAAAAA4dgAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": " &ass"
					},
					"BQAAADx2AAAAAAAAPXYAAAAAAAAAAAAAPXYAAAAAAAA+dgAAAAAAAAAAAAA+dgAAAAAAAD92AAAAAAAAAAAAAD92AAAAAAAAQHYAAAAAAAAAAAAAQHYAAAAAAABBdgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPHYAAAAAAAA8dgAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "ignedAS"
					},
					"BwAAAEF2AAAAAAAAQnYAAAAAAAAAAAAAQnYAAAAAAABDdgAAAAAAAAAAAABDdgAAAAAAAER2AAAAAAAAAAAAAER2AAAAAAAARXYAAAAAAAAAAAAARXYAAAAAAABGdgAAAAAAAAAAAABGdgAAAAAAAEd2AAAAAAAAAAAAAEd2AAAAAAAASHYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQXYAAAAAAABBdgAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAEh2AAAAAAAASXYAAAAAAAAAAAAASXYAAAAAAABKdgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASHYAAAAAAABIdgAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": " m"
					},
					"AgAAAEp2AAAAAAAAS3YAAAAAAAAAAAAAS3YAAAAAAABMdgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASnYAAAAAAABKdgAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"paste",
					null,
					"AQAAAEx2AAAAAAAAZnYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATHYAAAAAAABMdgAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					25,
					"left_delete",
					null,
					"GQAAAGV2AAAAAAAAZXYAAAAAAAABAAAAUmR2AAAAAAAAZHYAAAAAAAABAAAASGN2AAAAAAAAY3YAAAAAAAABAAAAS2J2AAAAAAAAYnYAAAAAAAABAAAAZWF2AAAAAAAAYXYAAAAAAAABAAAAcmB2AAAAAAAAYHYAAAAAAAABAAAAdV92AAAAAAAAX3YAAAAAAAABAAAAdF52AAAAAAAAXnYAAAAAAAABAAAAY112AAAAAAAAXXYAAAAAAAABAAAAdVx2AAAAAAAAXHYAAAAAAAABAAAAclt2AAAAAAAAW3YAAAAAAAABAAAAdFp2AAAAAAAAWnYAAAAAAAABAAAAU1l2AAAAAAAAWXYAAAAAAAABAAAAblh2AAAAAAAAWHYAAAAAAAABAAAAb1d2AAAAAAAAV3YAAAAAAAABAAAAaVZ2AAAAAAAAVnYAAAAAAAABAAAAdFV2AAAAAAAAVXYAAAAAAAABAAAAYVR2AAAAAAAAVHYAAAAAAAABAAAAclN2AAAAAAAAU3YAAAAAAAABAAAAZVJ2AAAAAAAAUnYAAAAAAAABAAAAbFF2AAAAAAAAUXYAAAAAAAABAAAAZVB2AAAAAAAAUHYAAAAAAAABAAAAY092AAAAAAAAT3YAAAAAAAABAAAAY052AAAAAAAATnYAAAAAAAABAAAAQU12AAAAAAAATXYAAAAAAAABAAAAaw",
					"AQAAAAAAAAABAAAAZnYAAAAAAABmdgAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"left_delete",
					null,
					"AQAAAEx2AAAAAAAATHYAAAAAAAABAAAAVg",
					"AQAAAAAAAAABAAAATXYAAAAAAABNdgAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "Accel;"
					},
					"BgAAAEx2AAAAAAAATXYAAAAAAAAAAAAATXYAAAAAAABOdgAAAAAAAAAAAABOdgAAAAAAAE92AAAAAAAAAAAAAE92AAAAAAAAUHYAAAAAAAAAAAAAUHYAAAAAAABRdgAAAAAAAAAAAABRdgAAAAAAAFJ2AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATHYAAAAAAABMdgAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAA12AAAAAAAADnYAAAAAAAAAAAAADnYAAAAAAAASdgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADXYAAAAAAAANdgAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"paste",
					null,
					"AQAAAA12AAAAAAAAO3YAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADXYAAAAAAAANdgAAAAAAAAAAAAAAAEJA"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADt2AAAAAAAAPHYAAAAAAAAAAAAAPHYAAAAAAABAdgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAO3YAAAAAAAA7dgAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					4,
					"left_delete",
					null,
					"BQAAAHB2AAAAAAAAcHYAAAAAAAAaAAAAYXV0byAmYXNzaWduZWRBUyA9IG1BY2NlbDs8dgAAAAAAADx2AAAAAAAABAAAACAgICBodgAAAAAAAGh2AAAAAAAABAAAACAgICBndgAAAAAAAGd2AAAAAAAAAQAAAApmdgAAAAAAAGZ2AAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAcHYAAAAAAACKdgAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAADx2AAAAAAAAPXYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPHYAAAAAAAA8dgAAAAAAAAAAAAAAEHdA"
				],
				[
					96,
					1,
					"reindent",
					null,
					"AQAAADx2AAAAAAAAQHYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPHYAAAAAAAA8dgAAAAAAAAAAAAAAAAAA"
				],
				[
					97,
					1,
					"paste",
					null,
					"AQAAAEB2AAAAAAAAWnYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQHYAAAAAAABAdgAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": "as"
					},
					"AwAAALzRAAAAAAAAvdEAAAAAAAAAAAAAvdEAAAAAAAC90QAAAAAAAAUAAABwVmlld73RAAAAAAAAvtEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvNEAAAAAAADB0QAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"left_delete",
					null,
					"AQAAAL3RAAAAAAAAvdEAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAvtEAAAAAAAC+0QAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": "ccel"
					},
					"BAAAAL3RAAAAAAAAvtEAAAAAAAAAAAAAvtEAAAAAAAC/0QAAAAAAAAAAAAC/0QAAAAAAAMDRAAAAAAAAAAAAAMDRAAAAAAAAwdEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvdEAAAAAAAC90QAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": "Accel"
					},
					"BQAAAMXRAAAAAAAAxtEAAAAAAAAAAAAAxtEAAAAAAADH0QAAAAAAAAAAAADH0QAAAAAAAMjRAAAAAAAAAAAAAMjRAAAAAAAAydEAAAAAAAAAAAAAydEAAAAAAADK0QAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxdEAAAAAAADF0QAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					20,
					"right_delete",
					null,
					"FAAAAMrRAAAAAAAAytEAAAAAAAABAAAAU8rRAAAAAAAAytEAAAAAAAABAAAAUsrRAAAAAAAAytEAAAAAAAABAAAAVsrRAAAAAAAAytEAAAAAAAABAAAAc8rRAAAAAAAAytEAAAAAAAABAAAAW8rRAAAAAAAAytEAAAAAAAABAAAAZsrRAAAAAAAAytEAAAAAAAABAAAAbMrRAAAAAAAAytEAAAAAAAABAAAAYcrRAAAAAAAAytEAAAAAAAABAAAAdMrRAAAAAAAAytEAAAAAAAABAAAAScrRAAAAAAAAytEAAAAAAAABAAAAbsrRAAAAAAAAytEAAAAAAAABAAAAZMrRAAAAAAAAytEAAAAAAAABAAAAZcrRAAAAAAAAytEAAAAAAAABAAAAeMrRAAAAAAAAytEAAAAAAAABAAAAXcrRAAAAAAAAytEAAAAAAAABAAAALsrRAAAAAAAAytEAAAAAAAABAAAAcMrRAAAAAAAAytEAAAAAAAABAAAAVsrRAAAAAAAAytEAAAAAAAABAAAAacrRAAAAAAAAytEAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAytEAAAAAAADK0QAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"right_delete",
					null,
					"AQAAAMrRAAAAAAAAytEAAAAAAAABAAAAdw",
					"AQAAAAAAAAABAAAAytEAAAAAAADK0QAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"right_delete",
					null,
					"AQAAAOjRAAAAAAAA6NEAAAAAAACOAAAAaWYoIXBWaWV3IHx8ICFtU1JWc1tmbGF0SW5kZXhdLnBSZXNvdXJjZSkgcFZpZXcgPSBTaGFkZXJSZXNvdXJjZVZpZXc6OmdldE51bGxBY2NlbGVyYXRpb25TdHJ1Y3R1cmVWaWV3KG1wRGV2aWNlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIA",
					"AQAAAAAAAAABAAAA6NEAAAAAAAB20gAAAAAAAAAAAAAAgG9A"
				],
				[
					120,
					11,
					"right_delete",
					null,
					"CwAAABrSAAAAAAAAGtIAAAAAAAABAAAAcBrSAAAAAAAAGtIAAAAAAAABAAAAVhrSAAAAAAAAGtIAAAAAAAABAAAAaRrSAAAAAAAAGtIAAAAAAAABAAAAZRrSAAAAAAAAGtIAAAAAAAABAAAAdxrSAAAAAAAAGtIAAAAAAAABAAAALhrSAAAAAAAAGtIAAAAAAAABAAAAZxrSAAAAAAAAGtIAAAAAAAABAAAAZRrSAAAAAAAAGtIAAAAAAAABAAAAdBrSAAAAAAAAGtIAAAAAAAABAAAAKBrSAAAAAAAAGtIAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAGtIAAAAAAAAa0gAAAAAAAAAAAAAAAPC/"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAABrSAAAAAAAAG9IAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGtIAAAAAAAAa0gAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"insert_completion",
					{
						"completion": "mAccel",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mAccel"
					},
					"AgAAABrSAAAAAAAAGtIAAAAAAAABAAAAbRrSAAAAAAAAINIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAG9IAAAAAAAAb0gAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": "A"
					},
					"AQAAAPXRAAAAAAAA9tEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9dEAAAAAAAD10QAAAAAAAAAAAAAAAPC/"
				],
				[
					130,
					2,
					"right_delete",
					null,
					"AgAAAPfRAAAAAAAA99EAAAAAAAABAAAAcvfRAAAAAAAA99EAAAAAAAABAAAAdg",
					"AQAAAAAAAAABAAAA99EAAAAAAAD30QAAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"right_delete",
					null,
					"AQAAALfRAAAAAAAAt9EAAAAAAAAxAAAAYXV0byBhY2NlbCA9IG1BY2NlbDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIA",
					"AQAAAAAAAAABAAAAt9EAAAAAAADo0QAAAAAAAAAAAAAAgG9A"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAh2AAAAAAAACXYAAAAAAAAAAAAACXYAAAAAAAANdgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACHYAAAAAAAAIdgAAAAAAAAAAAAAAAPC/"
				],
				[
					141,
					1,
					"paste",
					null,
					"AQAAAA12AAAAAAAAMnYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADXYAAAAAAAANdgAAAAAAAAAAAAAAAPC/"
				],
				[
					142,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADJ2AAAAAAAAM3YAAAAAAAAAAAAAM3YAAAAAAAA3dgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMnYAAAAAAAAydgAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					1,
					"paste",
					null,
					"AgAAABp2AAAAAAAAKHYAAAAAAAAAAAAAKHYAAAAAAAAodgAAAAAAAA0AAABEZXNjcmlwdG9yU2V0",
					"AQAAAAAAAAABAAAAGnYAAAAAAAAndgAAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AwAAAIt2AAAAAAAAjHYAAAAAAAAAAAAANHYAAAAAAAA0dgAAAAAAAAQAAAAgICAgiHYAAAAAAACJdgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAi3YAAAAAAACLdgAAAAAAAAAAAAAAAPC/"
				],
				[
					155,
					1,
					"reindent",
					null,
					"AQAAAIh2AAAAAAAAjHYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiHYAAAAAAACIdgAAAAAAAAAAAAAAAAAA"
				],
				[
					156,
					1,
					"insert",
					{
						"characters": "mA"
					},
					"AgAAAIx2AAAAAAAAjXYAAAAAAAAAAAAAjXYAAAAAAACOdgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjHYAAAAAAACMdgAAAAAAAAAAAAAAAPC/"
				],
				[
					157,
					1,
					"insert_completion",
					{
						"completion": "mAccel",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mAccel"
					},
					"AgAAAIx2AAAAAAAAjHYAAAAAAAACAAAAbUGMdgAAAAAAAJJ2AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjnYAAAAAAACOdgAAAAAAAAAAAAAAAPC/"
				],
				[
					158,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAJJ2AAAAAAAAk3YAAAAAAAAAAAAAk3YAAAAAAACUdgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAknYAAAAAAACSdgAAAAAAAAAAAAAAAPC/"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": " accel;"
					},
					"BwAAAJR2AAAAAAAAlXYAAAAAAAAAAAAAlXYAAAAAAACWdgAAAAAAAAAAAACWdgAAAAAAAJd2AAAAAAAAAAAAAJd2AAAAAAAAmHYAAAAAAAAAAAAAmHYAAAAAAACZdgAAAAAAAAAAAACZdgAAAAAAAJp2AAAAAAAAAAAAAJp2AAAAAAAAm3YAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlHYAAAAAAACUdgAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADN2AAAAAAAANHYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAM3YAAAAAAAAzdgAAAAAAAAAAAAAAAPC/"
				],
				[
					183,
					1,
					"insert",
					{
						"characters": "\\"
					},
					"AgAAAC92AAAAAAAAMHYAAAAAAAAAAAAAMHYAAAAAAAAwdgAAAAAAAAEAAAAn",
					"AQAAAAAAAAABAAAAL3YAAAAAAAAwdgAAAAAAAAAAAAAAAPC/"
				],
				[
					189,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAMh2AAAAAAAAyXYAAAAAAAAAAAAAyXYAAAAAAADKdgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyHYAAAAAAADIdgAAAAAAAAAAAAAAAPC/"
				],
				[
					191,
					1,
					"reindent",
					null,
					"AQAAAMl2AAAAAAAAzXYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyXYAAAAAAADJdgAAAAAAAAAAAAAAAAAA"
				],
				[
					192,
					1,
					"paste",
					null,
					"AQAAAM12AAAAAAAA9HYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzXYAAAAAAADNdgAAAAAAAAAAAAAAAPC/"
				],
				[
					194,
					1,
					"insert",
					{
						"characters": " doin"
					},
					"BQAAAO92AAAAAAAA8HYAAAAAAAAAAAAA8HYAAAAAAADxdgAAAAAAAAAAAADxdgAAAAAAAPJ2AAAAAAAAAAAAAPJ2AAAAAAAA83YAAAAAAAAAAAAA83YAAAAAAAD0dgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA73YAAAAAAADvdgAAAAAAAAAAAAAAAPC/"
				],
				[
					195,
					2,
					"left_delete",
					null,
					"AgAAAPN2AAAAAAAA83YAAAAAAAABAAAAbvJ2AAAAAAAA8nYAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAA9HYAAAAAAAD0dgAAAAAAAAAAAAAAAPC/"
				],
				[
					196,
					1,
					"insert",
					{
						"characters": "ne"
					},
					"AgAAAPJ2AAAAAAAA83YAAAAAAAAAAAAA83YAAAAAAAD0dgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8nYAAAAAAADydgAAAAAAAAAAAAAAAPC/"
				],
				[
					197,
					1,
					"insert",
					{
						"characters": " !!!!"
					},
					"BQAAAPR2AAAAAAAA9XYAAAAAAAAAAAAA9XYAAAAAAAD2dgAAAAAAAAAAAAD2dgAAAAAAAPd2AAAAAAAAAAAAAPd2AAAAAAAA+HYAAAAAAAAAAAAA+HYAAAAAAAD5dgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9HYAAAAAAAD0dgAAAAAAAAAAAAAAAPC/"
				],
				[
					200,
					1,
					"insert",
					{
						"characters": "\nass"
					},
					"BQAAADR2AAAAAAAANXYAAAAAAAAAAAAANXYAAAAAAAA5dgAAAAAAAAAAAAA5dgAAAAAAADp2AAAAAAAAAAAAADp2AAAAAAAAO3YAAAAAAAAAAAAAO3YAAAAAAAA8dgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANHYAAAAAAAA0dgAAAAAAAAAAAAAAAPC/"
				],
				[
					202,
					1,
					"insert_completion",
					{
						"completion": "assert",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "assert"
					},
					"AgAAADl2AAAAAAAAOXYAAAAAAAADAAAAYXNzOXYAAAAAAAA/dgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPHYAAAAAAAA8dgAAAAAAAAAAAAAAAPC/"
				],
				[
					203,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAD92AAAAAAAAQXYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAP3YAAAAAAAA/dgAAAAAAAAAAAAAAAPC/"
				],
				[
					204,
					1,
					"insert",
					{
						"characters": "acc"
					},
					"AwAAAEB2AAAAAAAAQXYAAAAAAAAAAAAAQXYAAAAAAABCdgAAAAAAAAAAAABCdgAAAAAAAEN2AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQHYAAAAAAABAdgAAAAAAAAAAAAAAAPC/"
				],
				[
					205,
					1,
					"insert_completion",
					{
						"completion": "accel",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "accel"
					},
					"AgAAAEB2AAAAAAAAQHYAAAAAAAADAAAAYWNjQHYAAAAAAABFdgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQ3YAAAAAAABDdgAAAAAAAAAAAAAAAPC/"
				],
				[
					206,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAAEV2AAAAAAAARnYAAAAAAAAAAAAARnYAAAAAAABHdgAAAAAAAAAAAABHdgAAAAAAAEh2AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARXYAAAAAAABFdgAAAAAAAAAAAAAAAPC/"
				],
				[
					207,
					1,
					"insert",
					{
						"characters": " VK_"
					},
					"BAAAAEh2AAAAAAAASXYAAAAAAAAAAAAASXYAAAAAAABKdgAAAAAAAAAAAABKdgAAAAAAAEt2AAAAAAAAAAAAAEt2AAAAAAAATHYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASHYAAAAAAABIdgAAAAAAAAAAAAAAAPC/"
				],
				[
					208,
					1,
					"insert_completion",
					{
						"completion": "VK_NULL_HANDLE",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "VK_NULL_HANDLE"
					},
					"AgAAAEl2AAAAAAAASXYAAAAAAAADAAAAVktfSXYAAAAAAABXdgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATHYAAAAAAABMdgAAAAAAAAAAAAAAAPC/"
				],
				[
					210,
					1,
					"right_delete",
					null,
					"AQAAAEZ2AAAAAAAARnYAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAARnYAAAAAAABGdgAAAAAAAAAAAAAAAPC/"
				],
				[
					211,
					1,
					"insert",
					{
						"characters": "!"
					},
					"AQAAAEZ2AAAAAAAAR3YAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARnYAAAAAAABGdgAAAAAAAAAAAAAAAPC/"
				],
				[
					214,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFh2AAAAAAAAWXYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWHYAAAAAAABYdgAAAAAAAAAAAAAAAPC/"
				],
				[
					224,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAADl2AAAAAAAAOnYAAAAAAAAAAAAAOnYAAAAAAAA7dgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOXYAAAAAAAA5dgAAAAAAAAAAAAAAAPC/"
				],
				[
					225,
					2,
					"left_delete",
					null,
					"AgAAADp2AAAAAAAAOnYAAAAAAAABAAAALzl2AAAAAAAAOXYAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAO3YAAAAAAAA7dgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/Core/Program/ProgramReflection.h",
			"settings":
			{
				"buffer_size": 55071,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					9,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHzWAAAAAAAAfdYAAAAAAAAAAAAAfdYAAAAAAACF1gAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfNYAAAAAAAB81gAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"paste",
					null,
					"AQAAAIXWAAAAAAAAnNYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhdYAAAAAAACF1gAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "Acce"
					},
					"BQAAAJPWAAAAAAAAlNYAAAAAAAAAAAAAlNYAAAAAAACU1gAAAAAAAAcAAABTYW1wbGVylNYAAAAAAACV1gAAAAAAAAAAAACV1gAAAAAAAJbWAAAAAAAAAAAAAJbWAAAAAAAAl9YAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAk9YAAAAAAACa1gAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert_completion",
					{
						"completion": "AccelerationStructure",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "AccelerationStructure"
					},
					"AgAAAJPWAAAAAAAAk9YAAAAAAAAEAAAAQWNjZZPWAAAAAAAAqNYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAl9YAAAAAAACX1gAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKRootSignature.cpp",
			"settings":
			{
				"buffer_size": 6803,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKSmartHandle.h",
			"settings":
			{
				"buffer_size": 11578,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Scene.slang",
			"redo_stack":
			[
				[
					18,
					1,
					"right_delete",
					null,
					"AQAAAE0LAAAAAAAAVAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATQsAAAAAAABNCwAAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 41056,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAADILAAAAAAAAMwsAAAAAAAAAAAAAMwsAAAAAAAA0CwAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAyCwAAAAAAADILAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					2,
					"right_delete",
					null,
					"AgAAADILAAAAAAAAMgsAAAAAAAABAAAALzILAAAAAAAAMgsAAAAAAAABAAAALw",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADILAAAAAAAAMgsAAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAC0LAAAAAAAALgsAAAAAAAAAAAAALgsAAAAAAAAyCwAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC0LAAAAAAAALQsAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"paste",
					null,
					"AQAAADILAAAAAAAATgsAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADILAAAAAAAAMgsAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAIMLAAAAAAAAhAsAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIMLAAAAAAAAgwsAAAAAAAAAAAAAAAByQA"
				],
				[
					11,
					1,
					"right_delete",
					null,
					"AQAAAC4LAAAAAAAALgsAAAAAAAABAAAAIA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC4LAAAAAAAALgsAAAAAAAAAAAAAAAAAAA"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAADELAAAAAAAAMgsAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADELAAAAAAAAMQsAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"reindent",
					null,
					"AQAAAIMLAAAAAAAAhwsAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIMLAAAAAAAAgwsAAAAAAAAAAAAAAABCQA"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "#endig"
					},
					"BgAAAIcLAAAAAAAAiAsAAAAAAAAAAAAAiAsAAAAAAACJCwAAAAAAAAAAAACJCwAAAAAAAIoLAAAAAAAAAAAAAIoLAAAAAAAAiwsAAAAAAAAAAAAAiwsAAAAAAACMCwAAAAAAAAAAAACMCwAAAAAAAI0LAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIcLAAAAAAAAhwsAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"left_delete",
					null,
					"AQAAAIwLAAAAAAAAjAsAAAAAAAABAAAAZw",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI0LAAAAAAAAjQsAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAIwLAAAAAAAAjQsAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIwLAAAAAAAAjAsAAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					1,
					"left_delete",
					null,
					"AQAAAC4LAAAAAAAALgsAAAAAAAAEAAAAICAgIA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADILAAAAAAAAMgsAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					4,
					"right_delete",
					null,
					"BAAAAH8LAAAAAAAAfwsAAAAAAAABAAAAIH8LAAAAAAAAfwsAAAAAAAABAAAAIH8LAAAAAAAAfwsAAAAAAAABAAAAIH8LAAAAAAAAfwsAAAAAAAABAAAAIA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH8LAAAAAAAAfwsAAAAAAAAAAAAAAAAAAA"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "DISABLE_"
					},
					"CQAAADYLAAAAAAAANwsAAAAAAAAAAAAANwsAAAAAAAA3CwAAAAAAABQAAABTQ0VORV9NQVRFUklBTF9DT1VOVDcLAAAAAAAAOAsAAAAAAAAAAAAAOAsAAAAAAAA5CwAAAAAAAAAAAAA5CwAAAAAAADoLAAAAAAAAAAAAADoLAAAAAAAAOwsAAAAAAAAAAAAAOwsAAAAAAAA8CwAAAAAAAAAAAAA8CwAAAAAAAD0LAAAAAAAAAAAAAD0LAAAAAAAAPgsAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADYLAAAAAAAASgsAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "RAYTRAC"
					},
					"BwAAAD4LAAAAAAAAPwsAAAAAAAAAAAAAPwsAAAAAAABACwAAAAAAAAAAAABACwAAAAAAAEELAAAAAAAAAAAAAEELAAAAAAAAQgsAAAAAAAAAAAAAQgsAAAAAAABDCwAAAAAAAAAAAABDCwAAAAAAAEQLAAAAAAAAAAAAAEQLAAAAAAAARQsAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD4LAAAAAAAAPgsAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "ING"
					},
					"AwAAAEULAAAAAAAARgsAAAAAAAAAAAAARgsAAAAAAABHCwAAAAAAAAAAAABHCwAAAAAAAEgLAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEULAAAAAAAARQsAAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHwLAAAAAAAAfQsAAAAAAAAAAAAAfQsAAAAAAACBCwAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHwLAAAAAAAAfAsAAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"left_delete",
					null,
					"AQAAAH0LAAAAAAAAfQsAAAAAAAAEAAAAICAgIA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIELAAAAAAAAgQsAAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "\n#"
					},
					"AgAAAH0LAAAAAAAAfgsAAAAAAAAAAAAAfgsAAAAAAAB/CwAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH0LAAAAAAAAfQsAAAAAAAAAAAAAAADwvw"
				],
				[
					37,
					3,
					"left_delete",
					null,
					"AwAAAH4LAAAAAAAAfgsAAAAAAAABAAAAI30LAAAAAAAAfQsAAAAAAAABAAAACnwLAAAAAAAAfAsAAAAAAAABAAAACg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH8LAAAAAAAAfwsAAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAE0LAAAAAAAATgsAAAAAAAAAAAAATgsAAAAAAABPCwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE0LAAAAAAAATQsAAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					2,
					"right_delete",
					null,
					"AgAAAE0LAAAAAAAATQsAAAAAAAABAAAAL00LAAAAAAAATQsAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAATQsAAAAAAABNCwAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAE0LAAAAAAAATgsAAAAAAAAAAAAATgsAAAAAAABPCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATQsAAAAAAABNCwAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					2,
					"left_delete",
					null,
					"AgAAAE4LAAAAAAAATgsAAAAAAAABAAAAL00LAAAAAAAATQsAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAATwsAAAAAAABPCwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/Scene/Scene.cpp",
			"settings":
			{
				"buffer_size": 136796,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"reindent",
					null,
					"AQAAAEFrAQAAAAAARWsBAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEFrAQAAAAAAQWsBAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAAEVrAQAAAAAAdmsBAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEVrAQAAAAAARWsBAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "\n\n}"
					},
					"CQAAAHZrAQAAAAAAd2sBAAAAAAAAAAAAd2sBAAAAAAB7awEAAAAAAAAAAAB7awEAAAAAAH9rAQAAAAAAAAAAAH9rAQAAAAAAgGsBAAAAAAAAAAAAgGsBAAAAAACIawEAAAAAAAAAAAB3awEAAAAAAHdrAQAAAAAACAAAACAgICAgICAggGsBAAAAAACBawEAAAAAAAAAAAB4awEAAAAAAHhrAQAAAAAACAAAACAgICAgICAgeGsBAAAAAAB8awEAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHZrAQAAAAAAdmsBAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAEBrAQAAAAAAQWsBAAAAAAAAAAAAQWsBAAAAAABFawEAAAAAAAAAAABFawEAAAAAAEZrAQAAAAAAAAAAAEZrAQAAAAAASmsBAAAAAAAAAAAAQWsBAAAAAABBawEAAAAAAAQAAAAgICAg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEBrAQAAAAAAQGsBAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"paste",
					null,
					"AQAAAEZrAQAAAAAAj2sBAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEZrAQAAAAAARmsBAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					1,
					"reindent",
					null,
					"AQAAAMZrAQAAAAAAzmsBAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMZrAQAAAAAAxmsBAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"paste",
					null,
					"AQAAAM5rAQAAAAAA/WsBAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM5rAQAAAAAAzmsBAAAAAAAAAAAAAADwvw"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAP1rAQAAAAAA/msBAAAAAAAAAAAA/msBAAAAAAAGbAEAAAAAAAAAAAAGbAEAAAAAAAdsAQAAAAAAAAAAAAdsAQAAAAAAD2wBAAAAAAAAAAAA/msBAAAAAAD+awEAAAAAAAgAAAAgICAgICAgIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP1rAQAAAAAA/WsBAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					1,
					"paste",
					null,
					"AQAAAAdsAQAAAAAANWwBAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAdsAQAAAAAAB2wBAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "\n\n\n}"
					},
					"DAAAADVsAQAAAAAANmwBAAAAAAAAAAAANmwBAAAAAAA+bAEAAAAAAAAAAAA+bAEAAAAAAEJsAQAAAAAAAAAAAEJsAQAAAAAAQ2wBAAAAAAAAAAAAQ2wBAAAAAABPbAEAAAAAAAAAAAA2bAEAAAAAADZsAQAAAAAADAAAACAgICAgICAgICAgIENsAQAAAAAARGwBAAAAAAAAAAAARGwBAAAAAABQbAEAAAAAAAAAAAA3bAEAAAAAADdsAQAAAAAADAAAACAgICAgICAgICAgIERsAQAAAAAARWwBAAAAAAAAAAAAOGwBAAAAAAA4bAEAAAAAAAwAAAAgICAgICAgICAgICA4bAEAAAAAAEBsAQAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADVsAQAAAAAANWwBAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"reindent",
					null,
					"AQAAADZsAQAAAAAAQmwBAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADZsAQAAAAAANmwBAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"paste",
					null,
					"AQAAAEJsAQAAAAAAnGwBAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEJsAQAAAAAAQmwBAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"reindent",
					null,
					"AQAAAEFrAQAAAAAARWsBAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEFrAQAAAAAAQWsBAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					1,
					"paste",
					null,
					"AQAAAEVrAQAAAAAAs2sBAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEVrAQAAAAAARWsBAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALNrAQAAAAAAtGsBAAAAAAAAAAAAtGsBAAAAAAC4awEAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALNrAQAAAAAAs2sBAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAALNrAQAAAAAAtGsBAAAAAAAAAAAAtGsBAAAAAAC4awEAAAAAAAAAAAC5awEAAAAAALlrAQAAAAAABAAAACAgICA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALNrAQAAAAAAs2sBAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"paste",
					null,
					"AQAAALhrAQAAAAAA22sBAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALhrAQAAAAAAuGsBAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAALhrAQAAAAAAuWsBAAAAAAAAAAAAuWsBAAAAAAC6awEAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALhrAQAAAAAAuGsBAAAAAAAAAAAAAADwvw"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAADptAQAAAAAAO20BAAAAAAAAAAAAO20BAAAAAAA8bQEAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADptAQAAAAAAOm0BAAAAAAAAAAAAAADwvw"
				],
				[
					44,
					1,
					"reindent",
					null,
					"AQAAADttAQAAAAAAR20BAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADttAQAAAAAAO20BAAAAAAAAAAAAAAAAAA"
				],
				[
					45,
					1,
					"paste",
					null,
					"AQAAAEdtAQAAAAAA4m0BAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEdtAQAAAAAAR20BAAAAAAAAAAAAAADwvw"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAHdtAQAAAAAAe20BAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHdtAQAAAAAAd20BAAAAAAAAAAAAAADwvw"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAMttAQAAAAAAz20BAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMttAQAAAAAAy20BAAAAAAAAAAAAAADwvw"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAPttAQAAAAAA/G0BAAAAAAAAAAAA/G0BAAAAAAAAbgEAAAAAAAAAAAAAbgEAAAAAAAFuAQAAAAAAAAAAAAFuAQAAAAAABW4BAAAAAAAAAAAA/G0BAAAAAAD8bQEAAAAAAAQAAAAgICAg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPttAQAAAAAA+20BAAAAAAAAAAAAAADwvw"
				],
				[
					57,
					1,
					"paste",
					null,
					"AQAAAAFuAQAAAAAAWm4BAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAFuAQAAAAAAAW4BAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "\nSce"
					},
					"BAAAAN0pAAAAAAAA3ikAAAAAAAAAAAAA3ikAAAAAAADfKQAAAAAAAAAAAADfKQAAAAAAAOApAAAAAAAAAAAAAOApAAAAAAAA4SkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADdKQAAAAAAAN0pAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"insert_completion",
					{
						"completion": "Scene",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Scene"
					},
					"AgAAAN4pAAAAAAAA3ikAAAAAAAADAAAAU2Nl3ikAAAAAAADjKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhKQAAAAAAAOEpAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "::~S"
					},
					"BAAAAOMpAAAAAAAA5CkAAAAAAAAAAAAA5CkAAAAAAADlKQAAAAAAAAAAAADlKQAAAAAAAOYpAAAAAAAAAAAAAOYpAAAAAAAA5ykAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADjKQAAAAAAAOMpAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "ce"
					},
					"AgAAAOcpAAAAAAAA6CkAAAAAAAAAAAAA6CkAAAAAAADpKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnKQAAAAAAAOcpAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert_completion",
					{
						"completion": "Scene",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Scene"
					},
					"AgAAAOYpAAAAAAAA5ikAAAAAAAADAAAAU2Nl5ikAAAAAAADrKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADpKQAAAAAAAOkpAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOspAAAAAAAA7SkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADrKQAAAAAAAOspAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAO0pAAAAAAAA7ikAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtKQAAAAAAAO0pAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAO4pAAAAAAAA8CkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuKQAAAAAAAO4pAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAO8pAAAAAAAA8CkAAAAAAAAAAAAA8CkAAAAAAADxKQAAAAAAAAAAAADwKQAAAAAAAPQpAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvKQAAAAAAAO8pAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "mpRt"
					},
					"BAAAAPQpAAAAAAAA9SkAAAAAAAAAAAAA9SkAAAAAAAD2KQAAAAAAAAAAAAD2KQAAAAAAAPcpAAAAAAAAAAAAAPcpAAAAAAAA+CkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD0KQAAAAAAAPQpAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "Bu"
					},
					"AgAAAPgpAAAAAAAA+SkAAAAAAAAAAAAA+SkAAAAAAAD6KQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD4KQAAAAAAAPgpAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "ilder"
					},
					"BQAAAPopAAAAAAAA+ykAAAAAAAAAAAAA+ykAAAAAAAD8KQAAAAAAAAAAAAD8KQAAAAAAAP0pAAAAAAAAAAAAAP0pAAAAAAAA/ikAAAAAAAAAAAAA/ikAAAAAAAD/KQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6KQAAAAAAAPopAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"right_delete",
					null,
					"AQAAAPUpAAAAAAAA9SkAAAAAAAABAAAAcA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD1KQAAAAAAAPUpAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": ".des"
					},
					"BAAAAP4pAAAAAAAA/ykAAAAAAAAAAAAA/ykAAAAAAAAAKgAAAAAAAAAAAAAAKgAAAAAAAAEqAAAAAAAAAAAAAAEqAAAAAAAAAioAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD+KQAAAAAAAP4pAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert_completion",
					{
						"completion": "destroy",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "destroy"
					},
					"AgAAAP8pAAAAAAAA/ykAAAAAAAADAAAAZGVz/ykAAAAAAAAGKgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACKgAAAAAAAAIqAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAYqAAAAAAAACCoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAGKgAAAAAAAAYqAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAAgqAAAAAAAACSoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAIKgAAAAAAAAgqAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"reindent",
					null,
					"AQAAAK5uAQAAAAAAsm4BAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACubgEAAAAAAK5uAQAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"paste",
					null,
					"AQAAALJuAQAAAAAA524BAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACybgEAAAAAALJuAQAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOduAQAAAAAA6G4BAAAAAAAAAAAA6G4BAAAAAADsbgEAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnbgEAAAAAAOduAQAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"paste",
					null,
					"AQAAAOxuAQAAAAAADW8BAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsbgEAAAAAAOxuAQAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAOxuAQAAAAAA7W4BAAAAAAAAAAAA7W4BAAAAAADubgEAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsbgEAAAAAAOxuAQAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAABBvAQAAAAAAEW8BAAAAAAAAAAAAEW8BAAAAAAASbwEAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQbwEAAAAAABBvAQAAAAAAAAAAAAAA8L8"
				],
				[
					58,
					1,
					"reindent",
					null,
					"AQAAABFvAQAAAAAAFW8BAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAARbwEAAAAAABFvAQAAAAAAAAAAAAAAAAA"
				],
				[
					59,
					1,
					"paste",
					null,
					"AQAAABVvAQAAAAAAnG8BAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAVbwEAAAAAABVvAQAAAAAAAAAAAAAA8L8"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAJxvAQAAAAAAnW8BAAAAAAAAAAAAnW8BAAAAAAClbwEAAAAAAAAAAAClbwEAAAAAAKZvAQAAAAAAAAAAAKZvAQAAAAAArm8BAAAAAAAAAAAAnW8BAAAAAACdbwEAAAAAAAgAAAAgICAgICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACcbwEAAAAAAJxvAQAAAAAAAAAAAAAA8L8"
				],
				[
					61,
					1,
					"left_delete",
					null,
					"AQAAAKJvAQAAAAAAom8BAAAAAAAEAAAAICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACmbwEAAAAAAKZvAQAAAAAAAAAAAAAA8L8"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAKJvAQAAAAAAo28BAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACibwEAAAAAAKJvAQAAAAAAAAAAAAAA8L8"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAJ1vAQAAAAAAnm8BAAAAAAAAAAAAnm8BAAAAAACfbwEAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdbwEAAAAAAJ1vAQAAAAAAAAAAAAAA8L8"
				],
				[
					78,
					1,
					"reindent",
					null,
					"AQAAAJ5vAQAAAAAApm8BAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACebwEAAAAAAJ5vAQAAAAAAAAAAAAAAAAA"
				],
				[
					79,
					1,
					"paste",
					null,
					"AQAAAKZvAQAAAAAAhXYBAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACmbwEAAAAAAKZvAQAAAAAAAAAAAAAA8L8"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAHpyAQAAAAAAe3IBAAAAAAAAAAAAe3IBAAAAAAB8cgEAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB6cgEAAAAAAHpyAQAAAAAAAAAAAAAA8L8"
				],
				[
					84,
					1,
					"reindent",
					null,
					"AQAAAHtyAQAAAAAAh3IBAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB7cgEAAAAAAHtyAQAAAAAAAAAAAAAAAAA"
				],
				[
					85,
					1,
					"paste",
					null,
					"AQAAAIdyAQAAAAAAtHIBAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACHcgEAAAAAAIdyAQAAAAAAAAAAAAAA8L8"
				],
				[
					93,
					1,
					"paste",
					null,
					"AgAAAMJyAQAAAAAAyXIBAAAAAAAAAAAAyXIBAAAAAADJcgEAAAAAAAQAAABkZXNj",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCcgEAAAAAAMZyAQAAAAAAAAAAAAAA8L8"
				],
				[
					96,
					1,
					"paste",
					null,
					"AgAAAJt2AQAAAAAAtnYBAAAAAAAAAAAAtnYBAAAAAAC2dgEAAAAAAB4AAABpbnN0YW5jZURlc2NzLnB1c2hfYmFjayhkZXNjKTs",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACbdgEAAAAAALl2AQAAAAAAAAAAAAAA8L8"
				],
				[
					101,
					1,
					"reindent",
					null,
					"AQAAAMF2AQAAAAAAyXYBAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBdgEAAAAAAMF2AQAAAAAAAAAAAAAA8L8"
				],
				[
					102,
					1,
					"paste",
					null,
					"AQAAAMl2AQAAAAAAIHcBAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADJdgEAAAAAAMl2AQAAAAAAAAAAAAAA8L8"
				],
				[
					110,
					1,
					"paste",
					null,
					"AgAAAG10AQAAAAAAdHQBAAAAAAAAAAAAdHQBAAAAAAB0dAEAAAAAAAQAAABkZXNj",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABtdAEAAAAAAHF0AQAAAAAAAAAAAAAA8L8"
				],
				[
					114,
					1,
					"paste",
					null,
					"AgAAAOZ1AQAAAAAA7XUBAAAAAAAAAAAA7XUBAAAAAADtdQEAAAAAAAQAAABkZXNj",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmdQEAAAAAAOp1AQAAAAAAAAAAAAAA8L8"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJR2AQAAAAAAlXYBAAAAAAAAAAAAlXYBAAAAAAChdgEAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACUdgEAAAAAAJR2AQAAAAAAAAAAAAAA8L8"
				],
				[
					118,
					1,
					"paste",
					null,
					"AQAAAKF2AQAAAAAAEncBAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChdgEAAAAAAKF2AQAAAAAAAAAAAAAA8L8"
				],
				[
					121,
					20,
					"left_delete",
					null,
					"FAAAAMZ2AQAAAAAAxnYBAAAAAAABAAAAIMV2AQAAAAAAxXYBAAAAAAABAAAAIMR2AQAAAAAAxHYBAAAAAAABAAAAIMN2AQAAAAAAw3YBAAAAAAABAAAAIMJ2AQAAAAAAwnYBAAAAAAABAAAAIMF2AQAAAAAAwXYBAAAAAAABAAAAIMB2AQAAAAAAwHYBAAAAAAABAAAAIL92AQAAAAAAv3YBAAAAAAABAAAAIL52AQAAAAAAvnYBAAAAAAABAAAAIL12AQAAAAAAvXYBAAAAAAABAAAAILx2AQAAAAAAvHYBAAAAAAABAAAAILt2AQAAAAAAu3YBAAAAAAABAAAAILp2AQAAAAAAunYBAAAAAAABAAAAILl2AQAAAAAAuXYBAAAAAAABAAAAILh2AQAAAAAAuHYBAAAAAAABAAAAILd2AQAAAAAAt3YBAAAAAAABAAAAILZ2AQAAAAAAtnYBAAAAAAABAAAAILV2AQAAAAAAtXYBAAAAAAABAAAAILR2AQAAAAAAtHYBAAAAAAABAAAAILN2AQAAAAAAs3YBAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADHdgEAAAAAAMd2AQAAAAAAAAAAAAAA8L8"
				],
				[
					128,
					1,
					"paste",
					null,
					"AgAAANF2AQAAAAAA3XYBAAAAAAAAAAAA3XYBAAAAAADddgEAAAAAAA4AAABpbnN0LnRyYW5zZm9ybQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADRdgEAAAAAAN92AQAAAAAAAAAAAAAA8L8"
				],
				[
					132,
					1,
					"right_delete",
					null,
					"AQAAAFB2AQAAAAAAUHYBAAAAAABRAAAAc3RkOjptZW1jcHkoJmRlc2MudHJhbnNmb3JtLCAmdHJhbnNmb3JtNHg0LCBzaXplb2YoZGVzYy50cmFuc2Zvcm0pKTsKICAgICAgICAgICAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABQdgEAAAAAAKF2AQAAAAAAAAAAAAAAW0A"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFB2AQAAAAAAUXYBAAAAAAAAAAAAUXYBAAAAAABddgEAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABQdgEAAAAAAFB2AQAAAAAAAAAAAAAA8L8"
				],
				[
					136,
					2,
					"left_delete",
					null,
					"AgAAAPV2AQAAAAAA9XYBAAAAAAABAAAAcvR2AQAAAAAA9HYBAAAAAAABAAAAXw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2dgEAAAAAAPZ2AQAAAAAAAAAAAAAA8L8"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": "R"
					},
					"AQAAAPR2AQAAAAAA9XYBAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD0dgEAAAAAAPR2AQAAAAAAAAAAAAAA8L8"
				],
				[
					143,
					1,
					"paste",
					null,
					"AgAAAC5zAQAAAAAAO3MBAAAAAAAAAAAAO3MBAAAAAAA7cwEAAAAAAAkAAABnbG06Om1hdDQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAucwEAAAAAADdzAQAAAAAAAAAAAAAA8L8"
				],
				[
					146,
					3,
					"right_delete",
					null,
					"AwAAAEVzAQAAAAAARXMBAAAAAAABAAAANEVzAQAAAAAARXMBAAAAAAABAAAAeEVzAQAAAAAARXMBAAAAAAABAAAANA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABFcwEAAAAAAEVzAQAAAAAAAAAAAAAA8L8"
				],
				[
					149,
					27,
					"right_delete",
					null,
					"GwAAAEVzAQAAAAAARXMBAAAAAAABAAAAIEVzAQAAAAAARXMBAAAAAAABAAAAPUVzAQAAAAAARXMBAAAAAAABAAAAIEVzAQAAAAAARXMBAAAAAAABAAAAZ0VzAQAAAAAARXMBAAAAAAABAAAAbEVzAQAAAAAARXMBAAAAAAABAAAAbUVzAQAAAAAARXMBAAAAAAABAAAAOkVzAQAAAAAARXMBAAAAAAABAAAAOkVzAQAAAAAARXMBAAAAAAABAAAAaUVzAQAAAAAARXMBAAAAAAABAAAAZEVzAQAAAAAARXMBAAAAAAABAAAAZUVzAQAAAAAARXMBAAAAAAABAAAAbkVzAQAAAAAARXMBAAAAAAABAAAAdEVzAQAAAAAARXMBAAAAAAABAAAAaUVzAQAAAAAARXMBAAAAAAABAAAAdEVzAQAAAAAARXMBAAAAAAABAAAAeUVzAQAAAAAARXMBAAAAAAABAAAAPEVzAQAAAAAARXMBAAAAAAABAAAAZ0VzAQAAAAAARXMBAAAAAAABAAAAbEVzAQAAAAAARXMBAAAAAAABAAAAbUVzAQAAAAAARXMBAAAAAAABAAAAOkVzAQAAAAAARXMBAAAAAAABAAAAOkVzAQAAAAAARXMBAAAAAAABAAAAbUVzAQAAAAAARXMBAAAAAAABAAAAYUVzAQAAAAAARXMBAAAAAAABAAAAdEVzAQAAAAAARXMBAAAAAAABAAAANEVzAQAAAAAARXMBAAAAAAABAAAAPg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABFcwEAAAAAAEVzAQAAAAAAAAAAAAAA8L8"
				],
				[
					151,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAEZzAQAAAAAAR3MBAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABGcwEAAAAAAEZzAQAAAAAAAAAAAAAA8L8"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAElzAQAAAAAASnMBAAAAAAAAAAAASnMBAAAAAABWcwEAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABJcwEAAAAAAElzAQAAAAAAAAAAAAAA8L8"
				],
				[
					160,
					1,
					"paste",
					null,
					"AgAAAIF2AQAAAAAAinYBAAAAAAAAAAAAinYBAAAAAACKdgEAAAAAAAwAAAB0cmFuc2Zvcm00eDQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBdgEAAAAAAI12AQAAAAAAAAAAAAAA8L8"
				],
				[
					164,
					1,
					"paste",
					null,
					"AgAAAJ50AQAAAAAAp3QBAAAAAAAAAAAAp3QBAAAAAACndAEAAAAAAAwAAAB0cmFuc2Zvcm00eDQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACedAEAAAAAAKp0AQAAAAAAAAAAAAAA8L8"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJ1vAQAAAAAAnm8BAAAAAAAAAAAAS3MBAAAAAABLcwEAAAAAAAwAAAAgICAgICAgICAgICA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdbwEAAAAAAJ1vAQAAAAAAAAAAAAAA8L8"
				],
				[
					172,
					1,
					"reindent",
					null,
					"AQAAAJ1vAQAAAAAApW8BAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdbwEAAAAAAJ1vAQAAAAAAAAAAAAAAAAA"
				],
				[
					173,
					1,
					"paste",
					null,
					"AQAAAKVvAQAAAAAA028BAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClbwEAAAAAAKVvAQAAAAAAAAAAAAAA8L8"
				],
				[
					183,
					1,
					"paste",
					null,
					"AgAAANV0AQAAAAAA33QBAAAAAAAAAAAA33QBAAAAAADfdAEAAAAAAAkAAAB0cmFuc3Bvc2U",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADVdAEAAAAAAN50AQAAAAAAAAAAAAAA8L8"
				],
				[
					186,
					1,
					"insert",
					{
						"characters": "nvmath"
					},
					"BgAAANV0AQAAAAAA1nQBAAAAAAAAAAAA1nQBAAAAAADXdAEAAAAAAAAAAADXdAEAAAAAANh0AQAAAAAAAAAAANh0AQAAAAAA2XQBAAAAAAAAAAAA2XQBAAAAAADadAEAAAAAAAAAAADadAEAAAAAANt0AQAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADVdAEAAAAAANV0AQAAAAAAAAAAAAAA8L8"
				],
				[
					187,
					1,
					"insert",
					{
						"characters": "\"\""
					},
					"AgAAANt0AQAAAAAA3HQBAAAAAAAAAAAA3HQBAAAAAADddAEAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADbdAEAAAAAANt0AQAAAAAAAAAAAAAA8L8"
				],
				[
					188,
					2,
					"left_delete",
					null,
					"AgAAANx0AQAAAAAA3HQBAAAAAAABAAAAItt0AQAAAAAA23QBAAAAAAABAAAAIg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADddAEAAAAAAN10AQAAAAAAAAAAAAAA8L8"
				],
				[
					189,
					1,
					"insert",
					{
						"characters": "::"
					},
					"AgAAANt0AQAAAAAA3HQBAAAAAAAAAAAA3HQBAAAAAADddAEAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADbdAEAAAAAANt0AQAAAAAAAAAAAAAA8L8"
				],
				[
					191,
					1,
					"right_delete",
					null,
					"AQAAAOV0AQAAAAAA5XQBAAAAAAABAAAAVA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADldAEAAAAAAOV0AQAAAAAAAAAAAAAA8L8"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": "float"
					},
					"BQAAAOV0AQAAAAAA5nQBAAAAAAAAAAAA5nQBAAAAAADndAEAAAAAAAAAAADndAEAAAAAAOh0AQAAAAAAAAAAAOh0AQAAAAAA6XQBAAAAAAAAAAAA6XQBAAAAAADqdAEAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADldAEAAAAAAOV0AQAAAAAAAAAAAAAA8L8"
				],
				[
					199,
					1,
					"paste",
					null,
					"AQAAAOx0AQAAAAAACXUBAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsdAEAAAAAAOx0AQAAAAAAAAAAAAAA8L8"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAD51AQAAAAAAP3UBAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA+dQEAAAAAAD51AQAAAAAAAAAAAAAA8L8"
				],
				[
					208,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAB8IAAAAAAAAIAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfCAAAAAAAAB8IAAAAAAAAAAAAAAAA8L8"
				],
				[
					209,
					1,
					"paste",
					null,
					"AQAAACAIAAAAAAAAPwgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgCAAAAAAAACAIAAAAAAAAAAAAAAAA8L8"
				],
				[
					216,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAI5rAQAAAAAAj2sBAAAAAAAAAAAAj2sBAAAAAACTawEAAAAAAAAAAACTawEAAAAAAJRrAQAAAAAAAAAAAJRrAQAAAAAAmGsBAAAAAAAAAAAAj2sBAAAAAACPawEAAAAAAAQAAAAgICAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACOawEAAAAAAI5rAQAAAAAAAAAAAAAA8L8"
				],
				[
					218,
					1,
					"reindent",
					null,
					"AQAAAI9rAQAAAAAAk2sBAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPawEAAAAAAI9rAQAAAAAAAAAAAAAAQkA"
				],
				[
					219,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AwAAAJNrAQAAAAAAlGsBAAAAAAAAAAAAlWsBAAAAAACVawEAAAAAAAQAAAAgICAglGsBAAAAAACVawEAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACTawEAAAAAAJNrAQAAAAAAAAAAAAAA8L8"
				],
				[
					220,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJVrAQAAAAAAlmsBAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACVawEAAAAAAJVrAQAAAAAAAAAAAAAA8L8"
				],
				[
					221,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJZrAQAAAAAAmGsBAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWawEAAAAAAJZrAQAAAAAAAAAAAAAA8L8"
				],
				[
					222,
					1,
					"paste",
					null,
					"AQAAAJdrAQAAAAAAoWsBAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACXawEAAAAAAJdrAQAAAAAAAAAAAAAA8L8"
				],
				[
					224,
					1,
					"insert",
					{
						"characters": " ret"
					},
					"BAAAAKJrAQAAAAAAo2sBAAAAAAAAAAAAo2sBAAAAAACkawEAAAAAAAAAAACkawEAAAAAAKVrAQAAAAAAAAAAAKVrAQAAAAAApmsBAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACiawEAAAAAAKJrAQAAAAAAAAAAAAAA8L8"
				],
				[
					225,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAAKNrAQAAAAAAo2sBAAAAAAADAAAAcmV0o2sBAAAAAACpawEAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACmawEAAAAAAKZrAQAAAAAAAAAAAAAA8L8"
				],
				[
					226,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAAKlrAQAAAAAAqmsBAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpawEAAAAAAKlrAQAAAAAAAAAAAAAA8L8"
				],
				[
					227,
					1,
					"left_delete",
					null,
					"AQAAAKlrAQAAAAAAqWsBAAAAAAABAAAAJw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACqawEAAAAAAKprAQAAAAAAAAAAAAAA8L8"
				],
				[
					228,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKlrAQAAAAAAqmsBAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpawEAAAAAAKlrAQAAAAAAAAAAAAAA8L8"
				],
				[
					232,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMZuAQAAAAAAx24BAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADGbgEAAAAAAMZuAQAAAAAAAAAAAAAA8L8"
				],
				[
					234,
					1,
					"reindent",
					null,
					"AQAAAMZuAQAAAAAAym4BAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADGbgEAAAAAAMZuAQAAAAAAAAAAAAAAAAA"
				],
				[
					235,
					1,
					"insert",
					{
						"characters": "mB"
					},
					"AgAAAMpuAQAAAAAAy24BAAAAAAAAAAAAy24BAAAAAADMbgEAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKbgEAAAAAAMpuAQAAAAAAAAAAAAAA8L8"
				],
				[
					236,
					1,
					"insert",
					{
						"characters": "la"
					},
					"AgAAAMxuAQAAAAAAzW4BAAAAAAAAAAAAzW4BAAAAAADObgEAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADMbgEAAAAAAMxuAQAAAAAAAAAAAAAA8L8"
				],
				[
					239,
					1,
					"insert_completion",
					{
						"completion": "mBlasBuilt",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mBlasBuilt"
					},
					"AgAAAMpuAQAAAAAAym4BAAAAAAAEAAAAbUJsYcpuAQAAAAAA1G4BAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADObgEAAAAAAM5uAQAAAAAAAAAAAAAA8L8"
				],
				[
					240,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAANRuAQAAAAAA1W4BAAAAAAAAAAAA1W4BAAAAAADWbgEAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADUbgEAAAAAANRuAQAAAAAAAAAAAAAA8L8"
				],
				[
					241,
					1,
					"insert",
					{
						"characters": " t"
					},
					"AgAAANZuAQAAAAAA124BAAAAAAAAAAAA124BAAAAAADYbgEAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADWbgEAAAAAANZuAQAAAAAAAAAAAAAA8L8"
				],
				[
					242,
					1,
					"insert_completion",
					{
						"completion": "true",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "true"
					},
					"AgAAANduAQAAAAAA124BAAAAAAABAAAAdNduAQAAAAAA224BAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADYbgEAAAAAANhuAQAAAAAAAAAAAAAA8L8"
				],
				[
					243,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANtuAQAAAAAA3G4BAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADbbgEAAAAAANtuAQAAAAAAAAAAAAAA8L8"
				],
				[
					247,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAAFvAQAAAAAAAm8BAAAAAAAAAAAAAm8BAAAAAAAGbwEAAAAAAAAAAAAGbwEAAAAAAAdvAQAAAAAAAAAAAAdvAQAAAAAAC28BAAAAAAAAAAAAAm8BAAAAAAACbwEAAAAAAAQAAAAgICAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABbwEAAAAAAAFvAQAAAAAAAAAAAAAA8L8"
				],
				[
					249,
					1,
					"reindent",
					null,
					"AQAAAAJvAQAAAAAABm8BAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACbwEAAAAAAAJvAQAAAAAAAAAAAAAAQkA"
				],
				[
					250,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AwAAAAZvAQAAAAAAB28BAAAAAAAAAAAACG8BAAAAAAAIbwEAAAAAAAQAAAAgICAgB28BAAAAAAAIbwEAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAGbwEAAAAAAAZvAQAAAAAAAAAAAAAA8L8"
				],
				[
					251,
					1,
					"insert",
					{
						"characters": " m"
					},
					"AgAAAAhvAQAAAAAACW8BAAAAAAAAAAAACW8BAAAAAAAKbwEAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAIbwEAAAAAAAhvAQAAAAAAAAAAAAAA8L8"
				],
				[
					252,
					1,
					"left_delete",
					null,
					"AQAAAAlvAQAAAAAACW8BAAAAAAABAAAAbQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAKbwEAAAAAAApvAQAAAAAAAAAAAAAA8L8"
				],
				[
					253,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAlvAQAAAAAAC28BAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJbwEAAAAAAAlvAQAAAAAAAAAAAAAA8L8"
				],
				[
					254,
					1,
					"insert",
					{
						"characters": "mTlas"
					},
					"BQAAAApvAQAAAAAAC28BAAAAAAAAAAAAC28BAAAAAAAMbwEAAAAAAAAAAAAMbwEAAAAAAA1vAQAAAAAAAAAAAA1vAQAAAAAADm8BAAAAAAAAAAAADm8BAAAAAAAPbwEAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAKbwEAAAAAAApvAQAAAAAAAAAAAAAA8L8"
				],
				[
					255,
					1,
					"insert",
					{
						"characters": "Built"
					},
					"BQAAAA9vAQAAAAAAEG8BAAAAAAAAAAAAEG8BAAAAAAARbwEAAAAAAAAAAAARbwEAAAAAABJvAQAAAAAAAAAAABJvAQAAAAAAE28BAAAAAAAAAAAAE28BAAAAAAAUbwEAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPbwEAAAAAAA9vAQAAAAAAAAAAAAAA8L8"
				],
				[
					257,
					1,
					"insert",
					{
						"characters": " retu"
					},
					"BQAAABVvAQAAAAAAFm8BAAAAAAAAAAAAFm8BAAAAAAAXbwEAAAAAAAAAAAAXbwEAAAAAABhvAQAAAAAAAAAAABhvAQAAAAAAGW8BAAAAAAAAAAAAGW8BAAAAAAAabwEAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAVbwEAAAAAABVvAQAAAAAAAAAAAAAA8L8"
				],
				[
					258,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAABZvAQAAAAAAFm8BAAAAAAAEAAAAcmV0dRZvAQAAAAAAHG8BAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAabwEAAAAAABpvAQAAAAAAAAAAAAAA8L8"
				],
				[
					259,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAABxvAQAAAAAAHW8BAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcbwEAAAAAABxvAQAAAAAAAAAAAAAA8L8"
				],
				[
					260,
					1,
					"left_delete",
					null,
					"AQAAABxvAQAAAAAAHG8BAAAAAAABAAAAJw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAdbwEAAAAAAB1vAQAAAAAAAAAAAAAA8L8"
				],
				[
					261,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABxvAQAAAAAAHW8BAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcbwEAAAAAABxvAQAAAAAAAAAAAAAA8L8"
				],
				[
					268,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAAR4AQAAAAAABXgBAAAAAAAAAAAABXgBAAAAAAAJeAEAAAAAAAAAAAAJeAEAAAAAAAp4AQAAAAAAAAAAAAp4AQAAAAAADngBAAAAAAAAAAAABXgBAAAAAAAFeAEAAAAAAAQAAAAgICAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAEeAEAAAAAAAR4AQAAAAAAAAAAAAAA8L8"
				],
				[
					269,
					1,
					"paste",
					null,
					"AQAAAAp4AQAAAAAAFHgBAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAKeAEAAAAAAAp4AQAAAAAAAAAAAAAA8L8"
				],
				[
					270,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAABR4AQAAAAAAFXgBAAAAAAAAAAAAFXgBAAAAAAAWeAEAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAUeAEAAAAAABR4AQAAAAAAAAAAAAAA8L8"
				],
				[
					271,
					1,
					"insert",
					{
						"characters": " tr"
					},
					"AwAAABZ4AQAAAAAAF3gBAAAAAAAAAAAAF3gBAAAAAAAYeAEAAAAAAAAAAAAYeAEAAAAAABl4AQAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAWeAEAAAAAABZ4AQAAAAAAAAAAAAAA8L8"
				],
				[
					272,
					1,
					"insert_completion",
					{
						"completion": "true",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "true"
					},
					"AgAAABd4AQAAAAAAF3gBAAAAAAACAAAAdHIXeAEAAAAAABt4AQAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAZeAEAAAAAABl4AQAAAAAAAAAAAAAA8L8"
				],
				[
					273,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABt4AQAAAAAAHHgBAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbeAEAAAAAABt4AQAAAAAAAAAAAAAA8L8"
				],
				[
					277,
					4,
					"left_delete",
					null,
					"BAAAAKh3AQAAAAAAqHcBAAAAAABWAAAAbVJ0QnVpbGRlci5idWlsZFRsYXModGxhcywgVktfQlVJTERfQUNDRUxFUkFUSU9OX1NUUlVDVFVSRV9QUkVGRVJfRkFTVF9UUkFDRV9CSVRfS0hSKTukdwEAAAAAAKR3AQAAAAAABAAAACAgICCgdwEAAAAAAKB3AQAAAAAABAAAACAgICCfdwEAAAAAAJ93AQAAAAAAAQAAAAo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACodwEAAAAAAP53AQAAAAAAAAAAAAAA8L8"
				],
				[
					279,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKV3AQAAAAAApncBAAAAAAAAAAAApncBAAAAAACqdwEAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACldwEAAAAAAKV3AQAAAAAAAAAAAABAVEA"
				],
				[
					280,
					1,
					"paste",
					null,
					"AQAAAKp3AQAAAAAAAHgBAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACqdwEAAAAAAKp3AQAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAFcyAAAAAAAAWDIAAAAAAAAAAAAAWDIAAAAAAABZMgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVzIAAAAAAABXMgAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"reindent",
					null,
					"AQAAAFgyAAAAAAAAXDIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWDIAAAAAAABYMgAAAAAAAAAAAAAAAAAA"
				],
				[
					15,
					1,
					"paste",
					null,
					"AQAAAFwyAAAAAAAAojIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXDIAAAAAAABcMgAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "A"
					},
					"AQAAAIkyAAAAAAAAijIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiTIAAAAAAACJMgAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					2,
					"right_delete",
					null,
					"AgAAAIsyAAAAAAAAizIAAAAAAAABAAAAcosyAAAAAAAAizIAAAAAAAABAAAAdg",
					"AQAAAAAAAAABAAAAizIAAAAAAACLMgAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					19,
					"right_delete",
					null,
					"EwAAAIwyAAAAAAAAjDIAAAAAAAABAAAAdIwyAAAAAAAAjDIAAAAAAAABAAAAbIwyAAAAAAAAjDIAAAAAAAABAAAAYYwyAAAAAAAAjDIAAAAAAAABAAAAc4wyAAAAAAAAjDIAAAAAAAABAAAASYwyAAAAAAAAjDIAAAAAAAABAAAAdIwyAAAAAAAAjDIAAAAAAAABAAAALYwyAAAAAAAAjDIAAAAAAAABAAAAPowyAAAAAAAAjDIAAAAAAAABAAAAc4wyAAAAAAAAjDIAAAAAAAABAAAAZYwyAAAAAAAAjDIAAAAAAAABAAAAY4wyAAAAAAAAjDIAAAAAAAABAAAAb4wyAAAAAAAAjDIAAAAAAAABAAAAbowyAAAAAAAAjDIAAAAAAAABAAAAZIwyAAAAAAAAjDIAAAAAAAABAAAALowyAAAAAAAAjDIAAAAAAAABAAAAcIwyAAAAAAAAjDIAAAAAAAABAAAAU4wyAAAAAAAAjDIAAAAAAAABAAAAcowyAAAAAAAAjDIAAAAAAAABAAAAdg",
					"AQAAAAAAAAABAAAAjDIAAAAAAACMMgAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "mp"
					},
					"AgAAAIwyAAAAAAAAjTIAAAAAAAAAAAAAjTIAAAAAAACOMgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjDIAAAAAAACMMgAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"left_delete",
					null,
					"AQAAAI0yAAAAAAAAjTIAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAAjjIAAAAAAACOMgAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "Rt"
					},
					"AgAAAI0yAAAAAAAAjjIAAAAAAAAAAAAAjjIAAAAAAACPMgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjTIAAAAAAACNMgAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert_completion",
					{
						"completion": "mRtBuilder",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mRtBuilder"
					},
					"AgAAAIwyAAAAAAAAjDIAAAAAAAADAAAAbVJ0jDIAAAAAAACWMgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjzIAAAAAAACPMgAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": ".getA"
					},
					"BQAAAJYyAAAAAAAAlzIAAAAAAAAAAAAAlzIAAAAAAACYMgAAAAAAAAAAAACYMgAAAAAAAJkyAAAAAAAAAAAAAJkyAAAAAAAAmjIAAAAAAAAAAAAAmjIAAAAAAACbMgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAljIAAAAAAACWMgAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "cc"
					},
					"AgAAAJsyAAAAAAAAnDIAAAAAAAAAAAAAnDIAAAAAAACdMgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmzIAAAAAAACbMgAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAJ0yAAAAAAAAnjIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnTIAAAAAAACdMgAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"paste",
					null,
					"AgAAAJcyAAAAAAAArzIAAAAAAAAAAAAArzIAAAAAAACvMgAAAAAAAAcAAABnZXRBY2Ns",
					"AQAAAAAAAAABAAAAlzIAAAAAAACeMgAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAK8yAAAAAAAAsTIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArzIAAAAAAACvMgAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "\npr"
					},
					"BAAAAA0yAAAAAAAADjIAAAAAAAAAAAAADjIAAAAAAAASMgAAAAAAAAAAAAASMgAAAAAAABMyAAAAAAAAAAAAABMyAAAAAAAAFDIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADTIAAAAAAAANMgAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "int"
					},
					"AwAAABQyAAAAAAAAFTIAAAAAAAAAAAAAFTIAAAAAAAAWMgAAAAAAAAAAAAAWMgAAAAAAABcyAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFDIAAAAAAAAUMgAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert_completion",
					{
						"completion": "printf",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "printf"
					},
					"AgAAABIyAAAAAAAAEjIAAAAAAAAFAAAAcHJpbnQSMgAAAAAAABgyAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFzIAAAAAAAAXMgAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABgyAAAAAAAAGjIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGDIAAAAAAAAYMgAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAABkyAAAAAAAAGzIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGTIAAAAAAAAZMgAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "AS"
					},
					"AgAAABoyAAAAAAAAGzIAAAAAAAAAAAAAGzIAAAAAAAAcMgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGjIAAAAAAAAaMgAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABwyAAAAAAAAHTIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHDIAAAAAAAAcMgAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					3,
					"left_delete",
					null,
					"AwAAABwyAAAAAAAAHDIAAAAAAAABAAAAIBsyAAAAAAAAGzIAAAAAAAABAAAAUxoyAAAAAAAAGjIAAAAAAAABAAAAQQ",
					"AQAAAAAAAAABAAAAHTIAAAAAAAAdMgAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "TLAS"
					},
					"BAAAABoyAAAAAAAAGzIAAAAAAAAAAAAAGzIAAAAAAAAcMgAAAAAAAAAAAAAcMgAAAAAAAB0yAAAAAAAAAAAAAB0yAAAAAAAAHjIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGjIAAAAAAAAaMgAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": " %"
					},
					"AgAAAB4yAAAAAAAAHzIAAAAAAAAAAAAAHzIAAAAAAAAgMgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHjIAAAAAAAAeMgAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "zu"
					},
					"AgAAACAyAAAAAAAAITIAAAAAAAAAAAAAITIAAAAAAAAiMgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIDIAAAAAAAAgMgAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": " 'n"
					},
					"AwAAACIyAAAAAAAAIzIAAAAAAAAAAAAAIzIAAAAAAAAkMgAAAAAAAAAAAAAkMgAAAAAAACUyAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIjIAAAAAAAAiMgAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"left_delete",
					null,
					"AQAAACIyAAAAAAAAIjIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAIzIAAAAAAAAjMgAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "\\"
					},
					"AQAAACIyAAAAAAAAIzIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIjIAAAAAAAAiMgAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACIyAAAAAAAAIzIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIjIAAAAAAAAiMgAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"right_delete",
					null,
					"AQAAACQyAAAAAAAAJDIAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAAJDIAAAAAAAAkMgAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACYyAAAAAAAAJzIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJjIAAAAAAAAmMgAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACcyAAAAAAAAKDIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJzIAAAAAAAAnMgAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": "mRt"
					},
					"AwAAACgyAAAAAAAAKTIAAAAAAAAAAAAAKTIAAAAAAAAqMgAAAAAAAAAAAAAqMgAAAAAAACsyAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKDIAAAAAAAAoMgAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert_completion",
					{
						"completion": "mRtBuilder",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mRtBuilder"
					},
					"AgAAACgyAAAAAAAAKDIAAAAAAAADAAAAbVJ0KDIAAAAAAAAyMgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKzIAAAAAAAArMgAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"paste",
					null,
					"AQAAADIyAAAAAAAATTIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMjIAAAAAAAAyMgAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAE4yAAAAAAAATzIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATjIAAAAAAABOMgAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"left_delete",
					null,
					"AQAAAE4yAAAAAAAATjIAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAATzIAAAAAAABPMgAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAE4yAAAAAAAATzIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATjIAAAAAAABOMgAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJgyAAAAAAAAmTIAAAAAAAAAAAAAmTIAAAAAAACdMgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmDIAAAAAAACYMgAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BgAAAIUyAAAAAAAAhjIAAAAAAAAAAAAAhjIAAAAAAACKMgAAAAAAAAAAAACeMgAAAAAAAJ4yAAAAAAAABAAAACAgICCKMgAAAAAAAIsyAAAAAAAAAAAAAIsyAAAAAAAAjzIAAAAAAAAAAAAAhjIAAAAAAACGMgAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAABAAAAhTIAAAAAAACFMgAAAAAAAAAAAAAAAEJA"
				],
				[
					94,
					1,
					"paste",
					null,
					"AQAAAJ8yAAAAAAAA3DIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnzIAAAAAAACfMgAAAAAAAAAAAAAAAEJA"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAJ8yAAAAAAAAozIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnzIAAAAAAACfMgAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					3,
					"left_delete",
					null,
					"AwAAABIyAAAAAAAAEjIAAAAAAAA9AAAAcHJpbnRmKCJUTEFTICV6dSBcbiIsIG1SdEJ1aWxkZXIuZ2V0QWNjZWxlcmF0aW9uU3RydWN0dXJlKCkpOw4yAAAAAAAADjIAAAAAAAAEAAAAICAgIA0yAAAAAAAADTIAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAEjIAAAAAAABPMgAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"reindent",
					null,
					"AQAAAEQyAAAAAAAASDIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARDIAAAAAAABEMgAAAAAAAAAAAAAAIGxA"
				],
				[
					104,
					1,
					"paste",
					null,
					"AQAAAEgyAAAAAAAAhTIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASDIAAAAAAABIMgAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": " handle"
					},
					"BwAAAFQyAAAAAAAAVTIAAAAAAAAAAAAAVTIAAAAAAABWMgAAAAAAAAAAAABWMgAAAAAAAFcyAAAAAAAAAAAAAFcyAAAAAAAAWDIAAAAAAAAAAAAAWDIAAAAAAABZMgAAAAAAAAAAAABZMgAAAAAAAFoyAAAAAAAAAAAAAFoyAAAAAAAAWzIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVDIAAAAAAABUMgAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": " beforre"
					},
					"CAAAAFsyAAAAAAAAXDIAAAAAAAAAAAAAXDIAAAAAAABdMgAAAAAAAAAAAABdMgAAAAAAAF4yAAAAAAAAAAAAAF4yAAAAAAAAXzIAAAAAAAAAAAAAXzIAAAAAAABgMgAAAAAAAAAAAABgMgAAAAAAAGEyAAAAAAAAAAAAAGEyAAAAAAAAYjIAAAAAAAAAAAAAYjIAAAAAAABjMgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWzIAAAAAAABbMgAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"right_delete",
					null,
					"AQAAAGEyAAAAAAAAYTIAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAYTIAAAAAAABhMgAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": "handle"
					},
					"BgAAAL0yAAAAAAAAvjIAAAAAAAAAAAAAvjIAAAAAAAC/MgAAAAAAAAAAAAC/MgAAAAAAAMAyAAAAAAAAAAAAAMAyAAAAAAAAwTIAAAAAAAAAAAAAwTIAAAAAAADCMgAAAAAAAAAAAADCMgAAAAAAAMMyAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvTIAAAAAAAC9MgAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": " after"
					},
					"BgAAAMMyAAAAAAAAxDIAAAAAAAAAAAAAxDIAAAAAAADFMgAAAAAAAAAAAADFMgAAAAAAAMYyAAAAAAAAAAAAAMYyAAAAAAAAxzIAAAAAAAAAAAAAxzIAAAAAAADIMgAAAAAAAAAAAADIMgAAAAAAAMkyAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwzIAAAAAAADDMgAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMkyAAAAAAAAyjIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyTIAAAAAAADJMgAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"paste",
					null,
					"AgAAAGMyAAAAAAAAZTIAAAAAAAAAAAAAZTIAAAAAAABlMgAAAAAAAAMAAAAlenU",
					"AQAAAAAAAAABAAAAYzIAAAAAAABmMgAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"paste",
					null,
					"AgAAAMkyAAAAAAAAyzIAAAAAAAAAAAAAyzIAAAAAAADLMgAAAAAAAAMAAAAlenU",
					"AQAAAAAAAAABAAAAyTIAAAAAAADMMgAAAAAAAAAAAAAAAPC/"
				],
				[
					132,
					1,
					"paste",
					null,
					"AQAAAGsyAAAAAAAAcjIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAazIAAAAAAABrMgAAAAAAAAAAAAAAAPC/"
				],
				[
					135,
					1,
					"paste",
					null,
					"AQAAANgyAAAAAAAA3zIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2DIAAAAAAADYMgAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAB4zAAAAAAAAHzMAAAAAAAAAAAAAHzMAAAAAAAAgMwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHjMAAAAAAAAeMwAAAAAAAAAAAAAAAPC/"
				],
				[
					142,
					2,
					"right_delete",
					null,
					"AgAAAB4zAAAAAAAAHjMAAAAAAAABAAAALx4zAAAAAAAAHjMAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAHjMAAAAAAAAeMwAAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAEMyAAAAAAAARDIAAAAAAAAAAAAARDIAAAAAAABIMgAAAAAAAAAAAABIMgAAAAAAAEkyAAAAAAAAAAAAAEkyAAAAAAAATTIAAAAAAAAAAAAARDIAAAAAAABEMgAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAABAAAAQzIAAAAAAABDMgAAAAAAAAAAAAAAAPC/"
				],
				[
					147,
					1,
					"reindent",
					null,
					"AQAAAEQyAAAAAAAASDIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARDIAAAAAAABEMgAAAAAAAAAAAAAAAEJA"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": "auto"
					},
					"BQAAAEgyAAAAAAAASTIAAAAAAAAAAAAASjIAAAAAAABKMgAAAAAAAAQAAAAgICAgSTIAAAAAAABKMgAAAAAAAAAAAABKMgAAAAAAAEsyAAAAAAAAAAAAAEsyAAAAAAAATDIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASDIAAAAAAABIMgAAAAAAAAAAAAAAAPC/"
				],
				[
					149,
					1,
					"insert",
					{
						"characters": " tst="
					},
					"BQAAAEwyAAAAAAAATTIAAAAAAAAAAAAATTIAAAAAAABOMgAAAAAAAAAAAABOMgAAAAAAAE8yAAAAAAAAAAAAAE8yAAAAAAAAUDIAAAAAAAAAAAAAUDIAAAAAAABRMgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATDIAAAAAAABMMgAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					1,
					"left_delete",
					null,
					"AQAAAFAyAAAAAAAAUDIAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAAUTIAAAAAAABRMgAAAAAAAAAAAAAAAPC/"
				],
				[
					151,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAFAyAAAAAAAAUTIAAAAAAAAAAAAAUTIAAAAAAABSMgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUDIAAAAAAABQMgAAAAAAAAAAAAAAAPC/"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFIyAAAAAAAAUzIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUjIAAAAAAABSMgAAAAAAAAAAAAAAAPC/"
				],
				[
					158,
					1,
					"paste",
					null,
					"AQAAAFMyAAAAAAAAeDIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUzIAAAAAAABTMgAAAAAAAAAAAAAAAPC/"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAHgyAAAAAAAAeTIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeDIAAAAAAAB4MgAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"paste",
					null,
					"AgAAAKkyAAAAAAAArDIAAAAAAAAAAAAArDIAAAAAAACsMgAAAAAAACUAAABtUnRCdWlsZGVyLmdldEFjY2VsZXJhdGlvblN0cnVjdHVyZSgp",
					"AQAAAAAAAAABAAAAqTIAAAAAAADOMgAAAAAAAAAAAAAAAPC/"
				],
				[
					169,
					1,
					"paste",
					null,
					"AgAAAFEzAAAAAAAAVDMAAAAAAAAAAAAAVDMAAAAAAABUMwAAAAAAACUAAABtUnRCdWlsZGVyLmdldEFjY2VsZXJhdGlvblN0cnVjdHVyZSgp",
					"AQAAAAAAAAABAAAAUTMAAAAAAAB2MwAAAAAAAAAAAAAAAPC/"
				],
				[
					198,
					1,
					"paste",
					null,
					"AgAAAKkyAAAAAAAAzjIAAAAAAAAAAAAAzjIAAAAAAADOMgAAAAAAAAMAAAB0c3Q",
					"AQAAAAAAAAABAAAAqTIAAAAAAACsMgAAAAAAAAAAAAAAAPC/"
				],
				[
					202,
					1,
					"paste",
					null,
					"AgAAAHMzAAAAAAAAmDMAAAAAAAAAAAAAmDMAAAAAAACYMwAAAAAAAAMAAAB0c3Q",
					"AQAAAAAAAAABAAAAczMAAAAAAAB2MwAAAAAAAAAAAAAAAPC/"
				],
				[
					206,
					1,
					"right_delete",
					null,
					"AQAAAEgyAAAAAAAASDIAAAAAAAA3AAAAYXV0byB0c3QgPSBtUnRCdWlsZGVyLmdldEFjY2VsZXJhdGlvblN0cnVjdHVyZSgpOwoKICAgIA",
					"AQAAAAAAAAABAAAASDIAAAAAAAB/MgAAAAAAAAAAAAAAAEJA"
				]
			]
		},
		{
			"file": "src/RenderPasses/DepthPass/DepthPass.cpp",
			"settings":
			{
				"buffer_size": 10285,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAACMYAAAAAAAAJBgAAAAAAAAAAAAAJBgAAAAAAAAlGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIxgAAAAAAAAjGAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/Core/Program/ShaderVar.h",
			"settings":
			{
				"buffer_size": 17330,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAHYgAAAAAAAAdyAAAAAAAAAAAAAAdyAAAAAAAAB4IAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdiAAAAAAAAB2IAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"reindent",
					null,
					"AQAAAHcgAAAAAAAAeyAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdyAAAAAAAAB3IAAAAAAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "bool"
					},
					"BAAAAHsgAAAAAAAAfCAAAAAAAAAAAAAAfCAAAAAAAAB9IAAAAAAAAAAAAAB9IAAAAAAAAH4gAAAAAAAAAAAAAH4gAAAAAAAAfyAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeyAAAAAAAAB7IAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": " set"
					},
					"BAAAAH8gAAAAAAAAgCAAAAAAAAAAAAAAgCAAAAAAAACBIAAAAAAAAAAAAACBIAAAAAAAAIIgAAAAAAAAAAAAAIIgAAAAAAAAgyAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfyAAAAAAAAB/IAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "As"
					},
					"AgAAAIMgAAAAAAAAhCAAAAAAAAAAAAAAhCAAAAAAAACFIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgyAAAAAAAACDIAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"left_delete",
					null,
					"AQAAAIQgAAAAAAAAhCAAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAhSAAAAAAAACFIAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "A"
					},
					"AQAAAIQgAAAAAAAAhSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhCAAAAAAAACEIAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIUgAAAAAAAAhyAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhSAAAAAAAACFIAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " const"
					},
					"BgAAAIcgAAAAAAAAiCAAAAAAAAAAAAAAiCAAAAAAAACJIAAAAAAAAAAAAACJIAAAAAAAAIogAAAAAAAAAAAAAIogAAAAAAAAiyAAAAAAAAAAAAAAiyAAAAAAAACMIAAAAAAAAAAAAACMIAAAAAAAAI0gAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhyAAAAAAAACHIAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"right_delete",
					null,
					"AQAAAIQgAAAAAAAAhCAAAAAAAAABAAAAQQ",
					"AQAAAAAAAAABAAAAhCAAAAAAAACEIAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AQAAAIQgAAAAAAAAhSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhCAAAAAAAACEIAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAI0gAAAAAAAAjiAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjSAAAAAAAACNIAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHYgAAAAAAAAdyAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdiAAAAAAAAB2IAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"reindent",
					null,
					"AQAAAHcgAAAAAAAAeyAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdyAAAAAAAAB3IAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"paste",
					null,
					"AQAAAHsgAAAAAAAACiEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeyAAAAAAAAB7IAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "acceleta"
					},
					"CQAAAIcgAAAAAAAAiCAAAAAAAAAAAAAAiCAAAAAAAACIIAAAAAAAAAcAAABzYW1wbGVyiCAAAAAAAACJIAAAAAAAAAAAAACJIAAAAAAAAIogAAAAAAAAAAAAAIogAAAAAAAAiyAAAAAAAAAAAAAAiyAAAAAAAACMIAAAAAAAAAAAAACMIAAAAAAAAI0gAAAAAAAAAAAAAI0gAAAAAAAAjiAAAAAAAAAAAAAAjiAAAAAAAACPIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhyAAAAAAAACOIAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					2,
					"left_delete",
					null,
					"AgAAAI4gAAAAAAAAjiAAAAAAAAABAAAAYY0gAAAAAAAAjSAAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAjyAAAAAAAACPIAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "ration"
					},
					"BgAAAI0gAAAAAAAAjiAAAAAAAAAAAAAAjiAAAAAAAACPIAAAAAAAAAAAAACPIAAAAAAAAJAgAAAAAAAAAAAAAJAgAAAAAAAAkSAAAAAAAAAAAAAAkSAAAAAAAACSIAAAAAAAAAAAAACSIAAAAAAAAJMgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjSAAAAAAAACNIAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " struc"
					},
					"BgAAAJMgAAAAAAAAlCAAAAAAAAAAAAAAlCAAAAAAAACVIAAAAAAAAAAAAACVIAAAAAAAAJYgAAAAAAAAAAAAAJYgAAAAAAAAlyAAAAAAAAAAAAAAlyAAAAAAAACYIAAAAAAAAAAAAACYIAAAAAAAAJkgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkyAAAAAAAACTIAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "ture"
					},
					"BAAAAJkgAAAAAAAAmiAAAAAAAAAAAAAAmiAAAAAAAACbIAAAAAAAAAAAAACbIAAAAAAAAJwgAAAAAAAAAAAAAJwgAAAAAAAAnSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmSAAAAAAAACZIAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAAkhAAAAAAAACiEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACSEAAAAAAAAJIQAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"right_delete",
					null,
					"AQAAAAkhAAAAAAAACSEAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAACSEAAAAAAAAJIQAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAAkhAAAAAAAACiEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACSEAAAAAAAAJIQAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"right_delete",
					null,
					"AQAAAAshAAAAAAAACyEAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAACyEAAAAAAAALIQAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "ccele"
					},
					"BQAAAAwhAAAAAAAADSEAAAAAAAAAAAAADSEAAAAAAAAOIQAAAAAAAAAAAAAOIQAAAAAAAA8hAAAAAAAAAAAAAA8hAAAAAAAAECEAAAAAAAAAAAAAECEAAAAAAAARIQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADCEAAAAAAAAMIQAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "ration"
					},
					"BgAAABEhAAAAAAAAEiEAAAAAAAAAAAAAEiEAAAAAAAATIQAAAAAAAAAAAAATIQAAAAAAABQhAAAAAAAAAAAAABQhAAAAAAAAFSEAAAAAAAAAAAAAFSEAAAAAAAAWIQAAAAAAAAAAAAAWIQAAAAAAABchAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAESEAAAAAAAARIQAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": " structure"
					},
					"CgAAABchAAAAAAAAGCEAAAAAAAAAAAAAGCEAAAAAAAAZIQAAAAAAAAAAAAAZIQAAAAAAABohAAAAAAAAAAAAABohAAAAAAAAGyEAAAAAAAAAAAAAGyEAAAAAAAAcIQAAAAAAAAAAAAAcIQAAAAAAAB0hAAAAAAAAAAAAAB0hAAAAAAAAHiEAAAAAAAAAAAAAHiEAAAAAAAAfIQAAAAAAAAAAAAAfIQAAAAAAACAhAAAAAAAAAAAAACAhAAAAAAAAISEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFyEAAAAAAAAXIQAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					5,
					"right_delete",
					null,
					"BQAAACEhAAAAAAAAISEAAAAAAAABAAAAbSEhAAAAAAAAISEAAAAAAAABAAAAcCEhAAAAAAAAISEAAAAAAAABAAAAbCEhAAAAAAAAISEAAAAAAAABAAAAZSEhAAAAAAAAISEAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAISEAAAAAAAAhIQAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"paste",
					null,
					"AQAAADkhAAAAAAAAUyEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOSEAAAAAAAA5IQAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": " accel"
					},
					"BgAAAFMhAAAAAAAAVCEAAAAAAAAAAAAAVCEAAAAAAABVIQAAAAAAAAAAAABVIQAAAAAAAFYhAAAAAAAAAAAAAFYhAAAAAAAAVyEAAAAAAAAAAAAAVyEAAAAAAABYIQAAAAAAAAAAAABYIQAAAAAAAFkhAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUyEAAAAAAABTIQAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAZCAAAAAAAAB0IAAAAAAAAAAAAAB0IAAAAAAAALQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABkIAAAAAAAAGQgAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"paste",
					null,
					"AQAAAAZCAAAAAAAAO0IAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABkIAAAAAAAAGQgAAAAAAAAAAAAAAAEJA"
				],
				[
					67,
					1,
					"paste",
					null,
					"AgAAABNCAAAAAAAAM0IAAAAAAAAAAAAAM0IAAAAAAAAzQgAAAAAAACAAAABjb25zdCBCdWZmZXI6OlNoYXJlZFB0ciYgcEJ1ZmZlcg",
					"AQAAAAAAAAABAAAAE0IAAAAAAAAzQgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/Core/Program/ShaderVar.cpp",
			"settings":
			{
				"buffer_size": 15662,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAKguAAAAAAAAqS4AAAAAAAAAAAAAqS4AAAAAAACqLgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqC4AAAAAAACoLgAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"reindent",
					null,
					"AQAAAKkuAAAAAAAArS4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqS4AAAAAAACpLgAAAAAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "bool"
					},
					"BAAAAK0uAAAAAAAAri4AAAAAAAAAAAAAri4AAAAAAACvLgAAAAAAAAAAAACvLgAAAAAAALAuAAAAAAAAAAAAALAuAAAAAAAAsS4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArS4AAAAAAACtLgAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALEuAAAAAAAAsi4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsS4AAAAAAACxLgAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"paste",
					null,
					"AQAAALIuAAAAAAAA5S4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsi4AAAAAAACyLgAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"paste",
					null,
					"AgAAALIuAAAAAAAAvS4AAAAAAAAAAAAAvS4AAAAAAAC9LgAAAAAAAAUAAABib29sIA",
					"AQAAAAAAAAABAAAAsi4AAAAAAAC3LgAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"left_delete",
					null,
					"AQAAAOouAAAAAAAA6i4AAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAA6y4AAAAAAADrLgAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOouAAAAAAAA6y4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6i4AAAAAAADqLgAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAOsuAAAAAAAA7S4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6y4AAAAAAADrLgAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAOwuAAAAAAAA7S4AAAAAAAAAAAAA7S4AAAAAAADxLgAAAAAAAAAAAADxLgAAAAAAAPIuAAAAAAAAAAAAAPIuAAAAAAAA9i4AAAAAAAAAAAAA7S4AAAAAAADtLgAAAAAAAAQAAAAgICAg7S4AAAAAAAD1LgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7C4AAAAAAADsLgAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"paste",
					null,
					"AQAAAPUuAAAAAAAAIy8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9S4AAAAAAAD1LgAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "AS"
					},
					"AwAAAAgvAAAAAAAACS8AAAAAAAAAAAAACS8AAAAAAAAJLwAAAAAAAAcAAABUZXh0dXJlCS8AAAAAAAAKLwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACC8AAAAAAAAPLwAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"paste",
					null,
					"AgAAABQvAAAAAAAAGS8AAAAAAAAAAAAAGS8AAAAAAAAZLwAAAAAAAAgAAABwVGV4dHVyZQ",
					"AQAAAAAAAAABAAAAFC8AAAAAAAAcLwAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					2,
					"left_delete",
					null,
					"AgAAAHouAAAAAAAAei4AAAAAAAAEAAAAICAgIHkuAAAAAAAAeS4AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAfi4AAAAAAAB+LgAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHkuAAAAAAAAei4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeS4AAAAAAAB5LgAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					2,
					"left_delete",
					null,
					"AgAAAGgvAAAAAAAAaC8AAAAAAAAEAAAAICAgIGcvAAAAAAAAZy8AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAbC8AAAAAAABsLwAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGcvAAAAAAAAaC8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZy8AAAAAAABnLwAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					2,
					"left_delete",
					null,
					"AgAAAPEvAAAAAAAA8S8AAAAAAAAEAAAAICAgIPAvAAAAAAAA8C8AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA9S8AAAAAAAD1LwAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPAvAAAAAAAA8S8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8C8AAAAAAADwLwAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					2,
					"left_delete",
					null,
					"AgAAAHgwAAAAAAAAeDAAAAAAAAAEAAAAICAgIHcwAAAAAAAAdzAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAfDAAAAAAAAB8MAAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHcwAAAAAAAAeDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdzAAAAAAAAB3MAAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					2,
					"left_delete",
					null,
					"AgAAAAIxAAAAAAAAAjEAAAAAAAAEAAAAICAgIAExAAAAAAAAATEAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAABjEAAAAAAAAGMQAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAExAAAAAAAAAjEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAATEAAAAAAAABMQAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					2,
					"left_delete",
					null,
					"AgAAAIcxAAAAAAAAhzEAAAAAAAAEAAAAICAgIIYxAAAAAAAAhjEAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAizEAAAAAAACLMQAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIYxAAAAAAAAhzEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhjEAAAAAAACGMQAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					2,
					"left_delete",
					null,
					"AgAAABoyAAAAAAAAGjIAAAAAAAAEAAAAICAgIBkyAAAAAAAAGTIAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAHjIAAAAAAAAeMgAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABkyAAAAAAAAGjIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGTIAAAAAAAAZMgAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"right_delete",
					null,
					"AQAAAKgyAAAAAAAAqDIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAqDIAAAAAAACoMgAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					3,
					"right_delete",
					null,
					"AwAAAKUyAAAAAAAApTIAAAAAAAABAAAAIKUyAAAAAAAApTIAAAAAAAABAAAAIKUyAAAAAAAApTIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAApTIAAAAAAAClMgAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAKUyAAAAAAAAqTIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApTIAAAAAAAClMgAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"paste",
					null,
					"AQAAAPgzAAAAAAAALTQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+DMAAAAAAAD4MwAAAAAAAAAAAAAAAEJA"
				]
			]
		},
		{
			"file": "src/Falcor/Scene/Animation/AnimationController.h",
			"settings":
			{
				"buffer_size": 8084,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/glm/glm/fwd.hpp",
			"settings":
			{
				"buffer_size": 27546,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/glm/glm/detail/type_mat2x2.inl",
			"settings":
			{
				"buffer_size": 13967,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/glm/glm/ext/matrix_float4x4.hpp",
			"settings":
			{
				"buffer_size": 710,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/nvpro_core/nvvk/extensions_vk.hpp",
			"settings":
			{
				"buffer_size": 1519,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/nvpro_core/nvvk/extensions_vk.cpp",
			"settings":
			{
				"buffer_size": 153893,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 16 files for \"ReflectionType\" (case sensitive)\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Core/Program/ProgramReflection.cpp:\n   44  \n   45      TypedShaderVarOffset::TypedShaderVarOffset(\n   46:         const ReflectionType* pType,\n   47          ShaderVarOffset       offset)\n   48          : ShaderVarOffset(offset)\n   ..\n   80      }\n   81  \n   82:     TypedShaderVarOffset ReflectionType::getZeroOffset() const\n   83      {\n   84          return TypedShaderVarOffset(this, ShaderVarOffset::kZero);\n   85      }\n   86  \n   87:     TypedShaderVarOffset ReflectionType::getMemberOffset(const std::string& name) const\n   88      {\n   89          return getZeroOffset()[name];\n   ..\n  506          ProgramVersion const*       pProgramVersion);\n  507  \n  508:     ReflectionType::SharedPtr reflectType(\n  509          TypeLayoutReflection*       pSlangType,\n  510          ParameterBlockReflection*   pBlock,\n  ...\n  596      static ParameterCategory getParameterCategory(TypeLayoutReflection* pTypeLayout);\n  597  \n  598:     ReflectionType::SharedPtr reflectResourceType(\n  599          TypeLayoutReflection*       pSlangType,\n  600          ParameterBlockReflection*   pBlock,\n  ...\n  719      }\n  720  \n  721:     ReflectionType::SharedPtr reflectStructType(\n  722          TypeLayoutReflection*       pSlangType,\n  723          ParameterBlockReflection*   pBlock,\n  ...\n  754      }\n  755  \n  756:     static ReflectionType::ByteSize getByteSize(TypeLayoutReflection* pSlangType) {\n  757          return pSlangType->getSize(SLANG_PARAMETER_CATEGORY_UNIFORM);\n  758      }\n  759  \n  760:     ReflectionType::SharedPtr reflectArrayType(\n  761          TypeLayoutReflection*       pSlangType,\n  762          ParameterBlockReflection*   pBlock,\n  ...\n  767          uint32_t elementByteStride = (uint32_t)pSlangType->getElementStride(SLANG_PARAMETER_CATEGORY_UNIFORM);\n  768  \n  769:         ReflectionType::SharedPtr pElementType = reflectType(\n  770              pSlangType->getElementTypeLayout(),\n  771              pBlock,\n  ...\n  779      }\n  780  \n  781:     ReflectionType::SharedPtr reflectBasicType(TypeLayoutReflection* pSlangType) {\n  782          const bool isRowMajor = pSlangType->getMatrixLayoutMode() == SLANG_MATRIX_LAYOUT_ROW_MAJOR;\n  783          ReflectionBasicType::Type type = getVariableType(pSlangType->getScalarType(), pSlangType->getRowCount(), pSlangType->getColumnCount());\n  784:         ReflectionType::SharedPtr pType = ReflectionBasicType::create(type, isRowMajor, pSlangType->getSize(), pSlangType);\n  785          return pType;\n  786      }\n  787  \n  788:     ReflectionType::SharedPtr reflectInterfaceType(\n  789          TypeLayoutReflection*       pSlangType,\n  790          ParameterBlockReflection*   pBlock,\n  ...\n  835      }\n  836  \n  837:     ReflectionType::SharedPtr reflectSpecializedType(\n  838          TypeLayoutReflection*       pSlangType,\n  839          ParameterBlockReflection*   pBlock,\n  ...\n  860      }\n  861  \n  862:     ReflectionType::SharedPtr reflectType(\n  863          TypeLayoutReflection*       pSlangType,\n  864          ParameterBlockReflection*   pBlock,\n  ...\n  928          std::string name(pSlangLayout->getName());\n  929  \n  930:         ReflectionType::SharedPtr pType = reflectType(\n  931              pSlangLayout->getTypeLayout(),\n  932              pBlock,\n  ...\n 1350      ReflectionVar::SharedPtr ReflectionVar::create(\n 1351          const std::string& name,\n 1352:         const ReflectionType::SharedConstPtr& pType,\n 1353          ShaderVarOffset const& bindLocation)\n 1354      {\n ....\n 1361      ReflectionVar::ReflectionVar(\n 1362          const std::string& name,\n 1363:         const ReflectionType::SharedConstPtr& pType,\n 1364          ShaderVarOffset const& bindLocation)\n 1365          : mName(name)\n ....\n 1383  \n 1384      void ParameterBlockReflection::setElementType(\n 1385:         ReflectionType::SharedConstPtr const& pElementType)\n 1386      {\n 1387          assert(!mpElementType);\n ....\n 1391      ParameterBlockReflection::SharedPtr ParameterBlockReflection::create(\n 1392          ProgramVersion const* pProgramVersion,\n 1393:         ReflectionType::SharedConstPtr const& pElementType)\n 1394      {\n 1395          auto pResult = createEmpty(pProgramVersion);\n ....\n 1589  \n 1590          uint32_t computeDescriptorSetIndex(\n 1591:             const ReflectionType::ResourceRange&                    range,\n 1592              const ParameterBlockReflection::ResourceRangeBindingInfo& bindingInfo)\n 1593          {\n ....\n 1812      }\n 1813  \n 1814:     TypedShaderVarOffset ReflectionType::findMemberByOffset(size_t offset) const\n 1815      {\n 1816          if (auto pStructType = asStructType())\n ....\n 1845      }\n 1846  \n 1847:     ReflectionVar::SharedConstPtr ReflectionType::findMember(const std::string& name) const\n 1848      {\n 1849          if (auto pStructType = asStructType())\n ....\n 1872      }\n 1873  \n 1874:     const ReflectionResourceType* ReflectionType::asResourceType() const\n 1875      {\n 1876:         return this && this->getKind() == ReflectionType::Kind::Resource ? static_cast<const ReflectionResourceType*>(this) : nullptr;\n 1877      }\n 1878  \n 1879:     const ReflectionBasicType* ReflectionType::asBasicType() const\n 1880      {\n 1881:         return this && this->getKind() == ReflectionType::Kind::Basic ? static_cast<const ReflectionBasicType*>(this) : nullptr;\n 1882      }\n 1883  \n 1884:     const ReflectionStructType* ReflectionType::asStructType() const\n 1885      {\n 1886:         return this && this->getKind() == ReflectionType::Kind::Struct ? static_cast<const ReflectionStructType*>(this) : nullptr;\n 1887      }\n 1888  \n 1889:     const ReflectionArrayType* ReflectionType::asArrayType() const\n 1890      {\n 1891:         return this && this->getKind() == ReflectionType::Kind::Array ? static_cast<const ReflectionArrayType*>(this) : nullptr;\n 1892      }\n 1893  \n 1894:     const ReflectionInterfaceType* ReflectionType::asInterfaceType() const\n 1895      {\n 1896:         return this && this->getKind() == ReflectionType::Kind::Interface ? static_cast<const ReflectionInterfaceType*>(this) : nullptr;\n 1897      }\n 1898  \n 1899:     const ReflectionType* ReflectionType::unwrapArray() const\n 1900      {\n 1901:         const ReflectionType* pType = this;\n 1902          while (auto pArrayType = pType->asArrayType())\n 1903          {\n ....\n 1907      }\n 1908  \n 1909:     uint32_t ReflectionType::getTotalArrayElementCount() const\n 1910      {\n 1911          uint32_t result = 1;\n 1912  \n 1913:         const ReflectionType* pType = this;\n 1914          while (auto pArrayType = pType->asArrayType())\n 1915          {\n ....\n 1923          uint32_t arraySize,\n 1924          uint32_t arrayStride,\n 1925:         const ReflectionType::SharedConstPtr& pType,\n 1926          ByteSize byteSize,\n 1927          slang::TypeLayoutReflection*    pSlangTypeLayout)\n ....\n 1933          uint32_t elementCount,\n 1934          uint32_t elementByteStride,\n 1935:         const ReflectionType::SharedConstPtr& pElementType,\n 1936          ByteSize byteSize,\n 1937          slang::TypeLayoutReflection*    pSlangTypeLayout)\n 1938:         : ReflectionType(ReflectionType::Kind::Array, byteSize, pSlangTypeLayout)\n 1939          , mElementCount(elementCount)\n 1940          , mElementByteStride(elementByteStride)\n ....\n 1960      ReflectionResourceType::ReflectionResourceType(Type type, Dimensions dims, StructuredType structuredType, ReturnType retType, ShaderAccess shaderAccess,\n 1961          slang::TypeLayoutReflection* pSlangTypeLayout)\n 1962:         : ReflectionType(ReflectionType::Kind::Resource, 0, pSlangTypeLayout)\n 1963          , mType(type)\n 1964          , mStructuredType(structuredType)\n ....\n 1975      }\n 1976  \n 1977:     void ReflectionResourceType::setStructType(const ReflectionType::SharedConstPtr& pType)\n 1978      {\n 1979          mpStructType = pType;\n ....\n 1988      ReflectionBasicType::ReflectionBasicType(Type type, bool isRowMajor, size_t size,\n 1989          slang::TypeLayoutReflection*    pSlangTypeLayout)\n 1990:         : ReflectionType(ReflectionType::Kind::Basic, size, pSlangTypeLayout)\n 1991          , mType(type)\n 1992          , mIsRowMajor(isRowMajor)\n ....\n 2001      ReflectionStructType::ReflectionStructType(size_t size, const std::string& name,\n 2002          slang::TypeLayoutReflection*    pSlangTypeLayout)\n 2003:         : ReflectionType(ReflectionType::Kind::Struct, size, pSlangTypeLayout)\n 2004          , mName(name) {}\n 2005  \n ....\n 2012      }\n 2013  \n 2014:     bool ReflectionArrayType::operator==(const ReflectionType& other) const {\n 2015          const ReflectionArrayType* pOther = other.asArrayType();\n 2016          if (!pOther) return false;\n ....\n 2018      }\n 2019  \n 2020:     bool ReflectionResourceType::operator==(const ReflectionType& other) const {\n 2021          const ReflectionResourceType* pOther = other.asResourceType();\n 2022          if (!pOther) return false;\n ....\n 2024      }\n 2025  \n 2026:     bool ReflectionStructType::operator==(const ReflectionType& other) const {\n 2027          const ReflectionStructType* pOther = other.asStructType();\n 2028          if (!pOther) return false;\n ....\n 2030      }\n 2031  \n 2032:     bool ReflectionBasicType::operator==(const ReflectionType& other) const {\n 2033          const ReflectionBasicType* pOther = other.asBasicType();\n 2034          if (!pOther) return false;\n ....\n 2098      }\n 2099  \n 2100:     ReflectionType::SharedPtr ProgramReflection::findType(const std::string& name) const {\n 2101          auto iter = mMapNameToType.find(name);\n 2102          if( iter != mMapNameToType.end() )\n ....\n 2125      ReflectionInterfaceType::ReflectionInterfaceType(\n 2126          slang::TypeLayoutReflection*    pSlangTypeLayout)\n 2127:         : ReflectionType(Kind::Interface, 0, pSlangTypeLayout)\n 2128      {\n 2129          ResourceRange range;\n ....\n 2141      }\n 2142  \n 2143:     bool ReflectionInterfaceType::operator==(const ReflectionType& other) const {\n 2144          auto pOtherInterface = other.asInterfaceType();\n 2145          if (!pOtherInterface) return false;\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Core/Program/ProgramReflection.h:\n   37  class ProgramVersion;\n   38  class ReflectionVar;\n   39: class ReflectionType;\n   40  class ReflectionResourceType;\n   41  class ReflectionBasicType;\n   ..\n  503  /** Represents the type of a shader variable and its offset relative to its enclosing type/buffer/block.\n  504  \n  505: A `TypedShaderVarOffset` is just a `ShaderVarOffset` plus a `ReflectionType` for\n  506  the variable at the given offset.\n  507  \n  ...\n  540      /** Get the type of the shader variable.\n  541      */\n  542:     std::shared_ptr<const ReflectionType> getType() const\n  543      {\n  544          return mpType;\n  ...\n  570      */\n  571      TypedShaderVarOffset(\n  572:         const ReflectionType* pType,\n  573          ShaderVarOffset       offset);\n  574  \n  575  private:\n  576:     std::shared_ptr<const ReflectionType> mpType;\n  577  };\n  578  \n  579  /** Reflection and layout information for a type in shader code.\n  580  */\n  581: class dlldecl ReflectionType : public std::enable_shared_from_this<ReflectionType>\n  582  {\n  583  public:\n  584:     using SharedPtr = std::shared_ptr<ReflectionType>;\n  585:     using SharedConstPtr = std::shared_ptr<const ReflectionType>;\n  586  \n  587:     virtual ~ReflectionType() = default;\n  588  \n  589      /** The kind of a type.\n  590  \n  591:     Every type has a kind, which specifies which subclass of `ReflectionType` it uses.\n  592  \n  593      When adding new derived classes, this enumeration should be updated.\n  ...\n  633      If `this` is an array, then applies `unwrapArray` to its element type.\n  634      */\n  635:     const ReflectionType* unwrapArray() const;\n  636  \n  637      /** Get the total number of array elements represented by this type.\n  ...\n  671      /** Get an offset that is zero bytes into this type.\n  672  \n  673:     Useful for turning a `ReflectionType` into a `TypedShaderVarOffset` so\n  674      that the `[]` operator can be used to look up members/elements.\n  675      */\n  ...\n  678      /** Compare types for equality.\n  679  \n  680:     It is possible for two distinct `ReflectionType` instances to represent\n  681      the same type with the same layout. The `==` operator must be used to\n  682      tell if two types have the same structure.\n  683      */\n  684:     virtual bool operator==(const ReflectionType& other) const = 0;\n  685  \n  686      /** Compare types for inequality.\n  687      */\n  688:     bool operator!=(const ReflectionType& other) const { return !(*this == other); }\n  689  \n  690      /** A range of resources contained (directly or indirectly) in this type.\n  ...\n  709  \n  710      The `ResourceRange` type is mostly an implementation detail\n  711:     of `ReflectionType` that supports `ParameterBlock` and users\n  712      should probably not rely on this information.\n  713      */\n  ...\n  743  \n  744  protected:\n  745:     ReflectionType(Kind kind, ByteSize byteSize, slang::TypeLayoutReflection* pSlangTypeLayout)\n  746          : mKind(kind)\n  747          , mByteSize(byteSize)\n  ...\n  757  /** Represents an array type in shader code.\n  758  */\n  759: class dlldecl ReflectionArrayType : public ReflectionType, public inherit_shared_from_this<ReflectionType, ReflectionArrayType>\n  760  {\n  761  public:\n  762      using SharedPtr = std::shared_ptr<ReflectionArrayType>;\n  763      using SharedConstPtr = std::shared_ptr<const ReflectionArrayType>;\n  764:     using inherit_shared_from_this<ReflectionType, ReflectionArrayType>::shared_from_this;\n  765  \n  766      /** Create a new object\n  ...\n  769          uint32_t elementCount,\n  770          uint32_t elementByteStride,\n  771:         const ReflectionType::SharedConstPtr& pElementType,\n  772          ByteSize byteSize,\n  773          slang::TypeLayoutReflection*    pSlangTypeLayout);\n  ...\n  789      /** Get the type of the array elements.\n  790      */\n  791:     const ReflectionType::SharedConstPtr& getElementType() const { return mpElementType; }\n  792  \n  793      bool operator==(const ReflectionArrayType& other) const;\n  794:     bool operator==(const ReflectionType& other) const override;\n  795  \n  796  private:\n  ...\n  798          uint32_t                                elementCount,\n  799          uint32_t                                elementByteStride,\n  800:         const ReflectionType::SharedConstPtr&   pElementType,\n  801          ByteSize                                totalByteSize,\n  802          slang::TypeLayoutReflection*    pSlangTypeLayout);\n  ...\n  804      uint32_t mElementCount = 0;\n  805      uint32_t mElementByteStride = 0;\n  806:     ReflectionType::SharedConstPtr mpElementType;\n  807  };\n  808  \n  809  /** Represents a `struct` type in shader code.\n  810  */\n  811: class dlldecl ReflectionStructType : public ReflectionType, public inherit_shared_from_this<ReflectionType, ReflectionStructType>\n  812  {\n  813  public:\n  814      using SharedPtr = std::shared_ptr<ReflectionStructType>;\n  815      using SharedConstPtr = std::shared_ptr<const ReflectionStructType>;\n  816:     using inherit_shared_from_this<ReflectionType, ReflectionStructType>::shared_from_this;\n  817  \n  818      /** Get the name of the struct type\n  ...\n  847  \n  848      bool operator==(const ReflectionStructType& other) const;\n  849:     bool operator==(const ReflectionType& other) const override;\n  850  \n  851      // TODO(tfoley): The following members are only needed to construct a type.\n  ...\n  886  /** Reflection object for scalars, vectors and matrices\n  887  */\n  888: class dlldecl ReflectionBasicType : public ReflectionType, public inherit_shared_from_this<ReflectionType, ReflectionBasicType>\n  889  {\n  890  public:\n  891      using SharedPtr = std::shared_ptr<ReflectionBasicType>;\n  892      using SharedConstPtr = std::shared_ptr<const ReflectionBasicType>;\n  893:     using inherit_shared_from_this<ReflectionType, ReflectionBasicType>::shared_from_this;\n  894  \n  895      /** The type of the object\n  ...\n  955  \n  956      bool operator==(const ReflectionBasicType& other) const;\n  957:     bool operator==(const ReflectionType& other) const override;\n  958  private:\n  959      ReflectionBasicType(\n  ...\n  968  /** Reflection object for resources\n  969  */\n  970: class dlldecl ReflectionResourceType : public ReflectionType, public inherit_shared_from_this<ReflectionType, ReflectionResourceType>\n  971  {\n  972  public:\n  973      using SharedPtr = std::shared_ptr<ReflectionResourceType>;\n  974      using SharedConstPtr = std::shared_ptr<const ReflectionResourceType>;\n  975:     using inherit_shared_from_this<ReflectionType, ReflectionResourceType>::shared_from_this;\n  976  \n  977      /** Describes how the shader will access the resource\n  ...\n 1047      /** For structured- and constant-buffers, set a reflection-type describing the buffer's layout\n 1048      */\n 1049:     void setStructType(const ReflectionType::SharedConstPtr& pType);\n 1050  \n 1051      /** Get the struct-type\n 1052      */\n 1053:     const ReflectionType::SharedConstPtr& getStructType() const { return mpStructType; }\n 1054  \n 1055      const std::shared_ptr<const ParameterBlockReflection>& getParameterBlockReflector() const { return mpParameterBlockReflector; }\n ....\n 1084  \n 1085      bool operator==(const ReflectionResourceType& other) const;\n 1086:     bool operator==(const ReflectionType& other) const override;\n 1087  private:\n 1088      ReflectionResourceType(Type type, Dimensions dims, StructuredType structuredType, ReturnType retType, ShaderAccess shaderAccess,\n ....\n 1094      ShaderAccess mShaderAccess;\n 1095      Type mType;\n 1096:     ReflectionType::SharedConstPtr mpStructType;   // For constant- and structured-buffers\n 1097      std::shared_ptr<const ParameterBlockReflection> mpParameterBlockReflector; // For constant buffers and parameter blocks\n 1098  };\n ....\n 1100  /** Reflection object for resources\n 1101  */\n 1102: class dlldecl ReflectionInterfaceType : public ReflectionType, public inherit_shared_from_this<ReflectionType, ReflectionInterfaceType>\n 1103  {\n 1104  public:\n 1105      using SharedPtr = std::shared_ptr<ReflectionInterfaceType>;\n 1106      using SharedConstPtr = std::shared_ptr<const ReflectionInterfaceType>;\n 1107:     using inherit_shared_from_this<ReflectionType, ReflectionInterfaceType>::shared_from_this;\n 1108  \n 1109      static SharedPtr create(\n ....\n 1111  \n 1112      bool operator==(const ReflectionInterfaceType& other) const;\n 1113:     bool operator==(const ReflectionType& other) const override;\n 1114  \n 1115      const std::shared_ptr<const ParameterBlockReflection>& getParameterBlockReflector() const { return mpParameterBlockReflector; }\n ....\n 1141      static SharedPtr create(\n 1142          const std::string& name,\n 1143:         const ReflectionType::SharedConstPtr& pType,\n 1144          ShaderVarOffset const& bindLocation);\n 1145  \n ....\n 1150      /** Get the variable type\n 1151      */\n 1152:     const ReflectionType::SharedConstPtr& getType() const { return mpType; }\n 1153  \n 1154      /** Get the variable offset\n ....\n 1164      ReflectionVar(\n 1165          const std::string& name,\n 1166:         const ReflectionType::SharedConstPtr& pType,\n 1167          ShaderVarOffset const& bindLocation);\n 1168  \n 1169      std::string mName;\n 1170:     ReflectionType::SharedConstPtr mpType;\n 1171      ShaderVarOffset mBindLocation;\n 1172  };\n ....\n 1188      static SharedPtr create(\n 1189          ProgramVersion const* pProgramVersion,\n 1190:         ReflectionType::SharedConstPtr const& pElementType);\n 1191  \n 1192      /** Create a new shader object reflector, for the given element type.\n ....\n 1198      /** Get the type of the contents of the parameter block.\n 1199      */\n 1200:     ReflectionType::SharedConstPtr getElementType() const { return mpElementType; }\n 1201  \n 1202      using BindLocation = TypedShaderVarOffset;\n ....\n 1309  \n 1310      void setElementType(\n 1311:         ReflectionType::SharedConstPtr const& pElementType);\n 1312  \n 1313      void addResourceRange(\n ....\n 1325      uint32_t getResourceRangeCount() const { return (uint32_t) mResourceRanges.size(); }\n 1326  \n 1327:     ReflectionType::ResourceRange const& getResourceRange(uint32_t index) const { return getElementType()->getResourceRange(index); }\n 1328  \n 1329      /** Get binding information on a contained descriptor range.\n ....\n 1354      /// this will be the type `T`.\n 1355      ///\n 1356:     ReflectionType::SharedConstPtr mpElementType;\n 1357  \n 1358      /// Binding information for the \"default\" constant buffer, if needed.\n ....\n 1485          \\return nullptr if the type does not exist.\n 1486      */\n 1487:     ReflectionType::SharedPtr findType(const std::string& name) const;\n 1488  \n 1489      ReflectionVar::SharedConstPtr findMember(const std::string& name) const;\n ....\n 1514  \n 1515      slang::ShaderReflection* mpSlangReflector = nullptr;\n 1516:     mutable std::map<std::string, ReflectionType::SharedPtr> mMapNameToType;\n 1517  \n 1518      std::vector<EntryPointGroupReflection::SharedPtr> mEntryPointGroups;\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Core/Program/ShaderVar.cpp:\n  406      }\n  407  \n  408:     ReflectionType::SharedConstPtr ShaderVar::getType() const\n  409      {\n  410          return mOffset.getType();\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Core/Program/ShaderVar.h:\n  104  \n  105      */\n  106:     ReflectionType::SharedConstPtr getType() const;\n  107  \n  108      /** Get the offset that this shader variable points to inside the parameter block.\n\n113 matches across 4 files\n\n\nSearching 16 files for \"TypeReflection\" (case sensitive)\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Core/Program/ProgramReflection.cpp:\n  204      };\n  205  \n  206:     static ReflectionResourceType::Type getResourceType(TypeReflection* pSlangType)\n  207      {\n  208          switch (pSlangType->unwrapArray()->getKind())\n  209          {\n  210:         case TypeReflection::Kind::ParameterBlock:\n  211:         case TypeReflection::Kind::ConstantBuffer:\n  212              return ReflectionResourceType::Type::ConstantBuffer;\n  213:         case TypeReflection::Kind::SamplerState:\n  214              return ReflectionResourceType::Type::Sampler;\n  215:         case TypeReflection::Kind::ShaderStorageBuffer:\n  216              return ReflectionResourceType::Type::StructuredBuffer;\n  217:         case TypeReflection::Kind::TextureBuffer:\n  218              return ReflectionResourceType::Type::TypedBuffer;\n  219:         case TypeReflection::Kind::Resource:\n  220              switch (pSlangType->getResourceShape() & SLANG_RESOURCE_BASE_SHAPE_MASK)\n  221              {\n  ...\n  243      }\n  244  \n  245:     static ReflectionResourceType::ShaderAccess getShaderAccess(TypeReflection* pSlangType)\n  246      {\n  247          // Compute access for an array using the underlying type...\n  ...\n  250          switch (pSlangType->getKind())\n  251          {\n  252:         case TypeReflection::Kind::SamplerState:\n  253:         case TypeReflection::Kind::ConstantBuffer:\n  254              return ReflectionResourceType::ShaderAccess::Read;\n  255              break;\n  256  \n  257:         case TypeReflection::Kind::Resource:\n  258:         case TypeReflection::Kind::ShaderStorageBuffer:\n  259              switch (pSlangType->getResourceAccess())\n  260              {\n  ...\n  275      }\n  276  \n  277:     static ReflectionResourceType::ReturnType getReturnType(TypeReflection* pType)\n  278      {\n  279          // Could be a resource that doesn't have a specific element type (e.g., a raw buffer)\n  ...\n  283          switch (pType->getScalarType())\n  284          {\n  285:         case TypeReflection::ScalarType::Float32:\n  286              return ReflectionResourceType::ReturnType::Float;\n  287:         case TypeReflection::ScalarType::Int32:\n  288              return ReflectionResourceType::ReturnType::Int;\n  289:         case TypeReflection::ScalarType::UInt32:\n  290              return ReflectionResourceType::ReturnType::Uint;\n  291:         case TypeReflection::ScalarType::Float64:\n  292              return ReflectionResourceType::ReturnType::Double;\n  293  \n  294              // Could be a resource that uses an aggregate element type (e.g., a structured buffer)\n  295:         case TypeReflection::ScalarType::None:\n  296              return ReflectionResourceType::ReturnType::Unknown;\n  297  \n  ...\n  334      }\n  335  \n  336:     ReflectionBasicType::Type getVariableType(TypeReflection::ScalarType slangScalarType, uint32_t rows, uint32_t columns) {\n  337          switch (slangScalarType) {\n  338:         case TypeReflection::ScalarType::Bool:\n  339              assert(rows == 1);\n  340              switch (columns)\n  ...\n  349                  return ReflectionBasicType::Type::Bool4;\n  350              }\n  351:         case TypeReflection::ScalarType::UInt8:\n  352              assert(rows == 1);\n  353              switch (columns)\n  ...\n  356                  return ReflectionBasicType::Type::Uint_8;\n  357              }\n  358:         case TypeReflection::ScalarType::UInt32:\n  359              assert(rows == 1);\n  360              switch (columns)\n  ...\n  369                  return ReflectionBasicType::Type::Uint4;\n  370              }\n  371:         case TypeReflection::ScalarType::UInt64:\n  372              assert(rows == 1);\n  373              switch (columns)\n  ...\n  382                  return ReflectionBasicType::Type::Uint64_4;\n  383              }\n  384:         case TypeReflection::ScalarType::Int32:\n  385              assert(rows == 1);\n  386              switch (columns)\n  ...\n  395                  return ReflectionBasicType::Type::Int4;\n  396              }\n  397:         case TypeReflection::ScalarType::Int8:\n  398              assert(rows == 1);\n  399              switch (columns)\n  ...\n  402                  return ReflectionBasicType::Type::Int_8;\n  403              }\n  404:         case TypeReflection::ScalarType::Int64:\n  405              assert(rows == 1);\n  406              switch (columns)\n  ...\n  415                  return ReflectionBasicType::Type::Int64_4;\n  416              }\n  417:         case TypeReflection::ScalarType::Float32:\n  418              switch (rows)\n  419              {\n  ...\n  471      }\n  472  \n  473:     static ReflectionResourceType::StructuredType getStructuredBufferType(TypeReflection* pSlangType) {\n  474          auto invalid = ReflectionResourceType::StructuredType::Invalid;\n  475  \n  476:         if (pSlangType->getKind() != TypeReflection::Kind::Resource)\n  477              return invalid; // not a structured buffer\n  478  \n  ...\n  547                  // functions to handle this stuff.\n  548                  //\n  549:                 if(pp->pVar->getType()->getKind() == slang::TypeReflection::Kind::ParameterBlock\n  550                      && hasUsage(pp->pVar->getTypeLayout(), SLANG_PARAMETER_CATEGORY_REGISTER_SPACE)\n  551                      && category != SLANG_PARAMETER_CATEGORY_REGISTER_SPACE)\n  ...\n  578                  // to compute this.\n  579                  //\n  580:                 if(pp->pVar->getTypeLayout()->getKind() == slang::TypeReflection::Kind::ParameterBlock) {\n  581                      return offset + (uint32_t) getRegisterIndexFromPath(pp, SLANG_PARAMETER_CATEGORY_REGISTER_SPACE);\n  582                  }\n  ...\n  701                      // `ParameterBlockReflection` to look it up.\n  702  \n  703:                     if (pSlangType->getKind() == slang::TypeReflection::Kind::ParameterBlock)\n  704                      {\n  705                          bindingInfo.flavor = ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::ParameterBlock;\n  ...\n  869          auto kind = pSlangType->getType()->getKind();\n  870          switch (kind) {\n  871:             case TypeReflection::Kind::ParameterBlock:\n  872                  kind = kind;\n  873:             case TypeReflection::Kind::Resource:\n  874:             case TypeReflection::Kind::SamplerState:\n  875:             case TypeReflection::Kind::ConstantBuffer:\n  876:             case TypeReflection::Kind::ShaderStorageBuffer:\n  877:             case TypeReflection::Kind::TextureBuffer:\n  878                  return reflectResourceType(pSlangType, pBlock, pPath, pProgramVersion);\n  879:             case TypeReflection::Kind::Struct:\n  880                  return reflectStructType(pSlangType, pBlock, pPath, pProgramVersion);\n  881:             case TypeReflection::Kind::Array:\n  882                  return reflectArrayType(pSlangType, pBlock, pPath, pProgramVersion);\n  883:             case TypeReflection::Kind::Interface:\n  884                  return reflectInterfaceType(pSlangType, pBlock, pPath, pProgramVersion);\n  885:             case TypeReflection::Kind::Specialized:\n  886                  return reflectSpecializedType(pSlangType, pBlock, pPath, pProgramVersion);\n  887:             case TypeReflection::Kind::Scalar:\n  888:             case TypeReflection::Kind::Matrix:\n  889:             case TypeReflection::Kind::Vector:\n  890                  return reflectBasicType(pSlangType);\n  891:             case TypeReflection::Kind::None:\n  892                  return nullptr;\n  893:             case TypeReflection::Kind::GenericTypeParameter:\n  894                  // TODO: How to handle this type? Let it generate an error for now.\n  895                  throw std::runtime_error(\"Unexpected Slang type\");\n  ...\n  904          if (category == ParameterCategory::Mixed) {\n  905              switch (pTypeLayout->getKind()) {\n  906:                 case TypeReflection::Kind::ConstantBuffer:\n  907:                 case TypeReflection::Kind::ParameterBlock:\n  908:                 case TypeReflection::Kind::None:\n  909                      category = ParameterCategory::ConstantBuffer;\n  910                      break;\n  ...\n  983          if (pTypeLayout->getSize(category) == 0) return;\n  984  \n  985:         TypeReflection::Kind kind = pTypeLayout->getKind();\n  986          // If this is a leaf node, store it\n  987:         if ((kind == TypeReflection::Kind::Matrix) || (kind == TypeReflection::Kind::Vector) || (kind == TypeReflection::Kind::Scalar)) {\n  988              storeShaderVariable(path, category, name, varMap, pVarMapBySemantic, 0, 0);\n  989:         } else if (kind == TypeReflection::Kind::Array) {\n  990              auto arrayKind = pTypeLayout->getElementTypeLayout()->getKind();\n  991:             assert((arrayKind == TypeReflection::Kind::Matrix) || (arrayKind == TypeReflection::Kind::Vector) || (arrayKind == TypeReflection::Kind::Scalar));\n  992              uint32_t arraySize = (uint32_t)pTypeLayout->getTotalArrayElementCount();\n  993              uint32_t arrayStride = (uint32_t)pTypeLayout->getElementStride(SLANG_PARAMETER_CATEGORY_UNIFORM);\n  994              storeShaderVariable(path, category, name, varMap, pVarMapBySemantic, arraySize, arrayStride);\n  995:         } else if (kind == TypeReflection::Kind::Struct) {\n  996              for (uint32_t f = 0; f < pTypeLayout->getFieldCount(); f++) {\n  997                  auto pField = pTypeLayout->getFieldByIndex(f);\n\n59 matches in 1 file\n\n\nSearching 7755 files for \"TypeReflection\" (case sensitive)\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/slang-gfx.h:\n 2069  \n 2070      virtual SLANG_NO_THROW Result SLANG_MCALL createShaderObject(\n 2071:         slang::TypeReflection* type,\n 2072          ShaderObjectContainerType container,\n 2073          IShaderObject** outObject) = 0;\n 2074  \n 2075:     inline ComPtr<IShaderObject> createShaderObject(slang::TypeReflection* type)\n 2076      {\n 2077          ComPtr<IShaderObject> object;\n ....\n 2081  \n 2082      virtual SLANG_NO_THROW Result SLANG_MCALL createMutableShaderObject(\n 2083:         slang::TypeReflection* type,\n 2084          ShaderObjectContainerType container,\n 2085          IShaderObject** outObject) = 0;\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/slang.h:\n 2204      struct BufferReflection;\n 2205      struct TypeLayoutReflection;\n 2206:     struct TypeReflection;\n 2207      struct VariableLayoutReflection;\n 2208      struct VariableReflection;\n ....\n 2218              return (uint32_t)spReflectionUserAttribute_GetArgumentCount((SlangReflectionUserAttribute*)this);\n 2219          }\n 2220:         TypeReflection* getArgumentType(uint32_t index)\n 2221          {\n 2222:             return (TypeReflection*)spReflectionUserAttribute_GetArgumentType((SlangReflectionUserAttribute*)this, index);\n 2223          }\n 2224          SlangResult getArgumentValueInt(uint32_t index, int * value)\n ....\n 2236      };\n 2237  \n 2238:     struct TypeReflection\n 2239      {\n 2240          enum class Kind\n ....\n 2293          }\n 2294  \n 2295:         bool isArray() { return getKind() == TypeReflection::Kind::Array; }\n 2296  \n 2297:         TypeReflection* unwrapArray()\n 2298          {\n 2299:             TypeReflection* type = this;\n 2300              while( type->isArray() )\n 2301              {\n ....\n 2315              if(!isArray()) return 0;\n 2316              size_t result = 1;\n 2317:             TypeReflection* type = this;\n 2318              for(;;)\n 2319              {\n ....\n 2326          }\n 2327  \n 2328:         TypeReflection* getElementType()\n 2329          {\n 2330:             return (TypeReflection*) spReflectionType_GetElementType((SlangReflectionType*) this);\n 2331          }\n 2332  \n ....\n 2346          }\n 2347  \n 2348:         TypeReflection* getResourceResultType()\n 2349          {\n 2350:             return (TypeReflection*) spReflectionType_GetResourceResultType((SlangReflectionType*) this);\n 2351          }\n 2352  \n ....\n 2443      struct TypeLayoutReflection\n 2444      {\n 2445:         TypeReflection* getType()\n 2446          {\n 2447:             return (TypeReflection*) spReflectionTypeLayout_GetType((SlangReflectionTypeLayout*) this);\n 2448          }\n 2449  \n 2450:         TypeReflection::Kind getKind()\n 2451          {\n 2452:             return (TypeReflection::Kind) spReflectionTypeLayout_getKind((SlangReflectionTypeLayout*) this);\n 2453          }\n 2454  \n ....\n 2552          }\n 2553  \n 2554:         TypeReflection::ScalarType getScalarType()\n 2555          {\n 2556              return getType()->getScalarType();\n 2557          }\n 2558  \n 2559:         TypeReflection* getResourceResultType()\n 2560          {\n 2561              return getType()->getResourceResultType();\n ....\n 2766          }\n 2767  \n 2768:         TypeReflection* getType()\n 2769          {\n 2770:             return (TypeReflection*) spReflectionVariable_GetType((SlangReflectionVariable*) this);\n 2771          }\n 2772  \n ....\n 2833          }\n 2834  \n 2835:         TypeReflection* getType()\n 2836          {\n 2837              return getVariable()->getType();\n ....\n 2944              return spReflectionTypeParameter_GetConstraintCount((SlangReflectionTypeParameter*) this);\n 2945          }\n 2946:         TypeReflection* getConstraintByIndex(int index)\n 2947          {\n 2948:             return (TypeReflection*)spReflectionTypeParameter_GetConstraintByIndex((SlangReflectionTypeParameter*) this, index);\n 2949          }\n 2950      };\n ....\n 3009          }\n 3010  \n 3011:         TypeReflection* findTypeByName(const char* name)\n 3012          {\n 3013:             return (TypeReflection*)spReflection_FindTypeByName(\n 3014                  (SlangReflection*) this,\n 3015                  name);\n ....\n 3017  \n 3018          TypeLayoutReflection* getTypeLayout(\n 3019:             TypeReflection* type,\n 3020              LayoutRules     rules = LayoutRules::Default)\n 3021          {\n ....\n 3033          }\n 3034  \n 3035:         TypeReflection* specializeType(\n 3036:             TypeReflection*         type,\n 3037              SlangInt                specializationArgCount,\n 3038:             TypeReflection* const*  specializationArgs,\n 3039              ISlangBlob**            outDiagnostics)\n 3040          {\n 3041:             return (TypeReflection*) spReflection_specializeType(\n 3042                  (SlangReflection*) this,\n 3043                  (SlangReflectionType*) type,\n ....\n 4015              /** Specialize a type based on type arguments.\n 4016              */\n 4017:         virtual SLANG_NO_THROW TypeReflection* SLANG_MCALL specializeType(\n 4018:             TypeReflection*             type,\n 4019              SpecializationArg const*    specializationArgs,\n 4020              SlangInt                    specializationArgCount,\n ....\n 4025              */\n 4026          virtual SLANG_NO_THROW TypeLayoutReflection* SLANG_MCALL getTypeLayout(\n 4027:             TypeReflection* type,\n 4028              SlangInt        targetIndex = 0,\n 4029              LayoutRules     rules = LayoutRules::Default,\n ....\n 4037                  @param `outDiagnostics`: a blob to receive diagnostic messages.\n 4038              */\n 4039:         virtual SLANG_NO_THROW TypeReflection* SLANG_MCALL getContainerType(\n 4040:             TypeReflection* elementType,\n 4041              ContainerType containerType,\n 4042              ISlangBlob** outDiagnostics = nullptr) = 0;\n 4043  \n 4044:             /** Return a `TypeReflection` that represents the `__Dynamic` type.\n 4045                  This type can be used as a specialization argument to indicate using\n 4046                  dynamic dispatch.\n 4047              */\n 4048:         virtual SLANG_NO_THROW TypeReflection* SLANG_MCALL getDynamicType() = 0;\n 4049  \n 4050              /** Get the mangled name for a type RTTI object.\n 4051              */\n 4052          virtual SLANG_NO_THROW SlangResult SLANG_MCALL getTypeRTTIMangledName(\n 4053:             TypeReflection* type,\n 4054              ISlangBlob** outNameBlob) = 0;\n 4055  \n ....\n 4057              */\n 4058          virtual SLANG_NO_THROW SlangResult SLANG_MCALL getTypeConformanceWitnessMangledName(\n 4059:             TypeReflection* type,\n 4060:             TypeReflection* interfaceType,\n 4061              ISlangBlob** outNameBlob) = 0;\n 4062  \n ....\n 4064              */\n 4065          virtual SLANG_NO_THROW SlangResult SLANG_MCALL getTypeConformanceWitnessSequentialID(\n 4066:             slang::TypeReflection* type,\n 4067:             slang::TypeReflection* interfaceType,\n 4068              uint32_t*              outId) = 0;\n 4069  \n ....\n 4093              */\n 4094          virtual SLANG_NO_THROW SlangResult SLANG_MCALL createTypeConformanceComponentType(\n 4095:             slang::TypeReflection* type,\n 4096:             slang::TypeReflection* interfaceType,\n 4097              ITypeConformance** outConformance,\n 4098              SlangInt conformanceIdOverride,\n ....\n 4324          {\n 4325              /** A type specialization argument, used for `Kind::Type`. */\n 4326:             TypeReflection* type;\n 4327          };\n 4328  \n 4329:         static SpecializationArg fromType(TypeReflection* inType)\n 4330          {\n 4331              SpecializationArg rs;\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/docs/api-users-guide.md:\n  321  \n  322  ```c++\n  323: slang::TypeReflection::Kind kind = typeLayout->getKind();\n  324  ```\n  325  \n  326: The available cases for `slang::TypeReflection::Kind` include `Scalar`, `Vector`, `Array`, `Struct`, etc.\n  327  \n  328  For any type layout, you can query the resources it consumes, or a particular parameter category:\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/examples/model-viewer/main.cpp:\n   47      ComPtr<IShaderProgram> shaderProgram;\n   48  \n   49:     slang::TypeReflection* perViewShaderType;\n   50:     slang::TypeReflection* perModelShaderType;\n   51  \n   52      Result init(IDevice* inDevice)\n   ..\n  288  \n  289      // Retrieves the shader type for this light object.\n  290:     virtual slang::TypeReflection* getShaderType(RendererContext* context) = 0;\n  291  \n  292      // The shader object for a light will be stashed here\n  ...\n  297  // Helper function to retrieve the underlying shader type of `T`.\n  298  template<typename T>\n  299: slang::TypeReflection* getShaderType(RendererContext* context)\n  300  {\n  301      auto program = context->slangReflection;\n  ...\n  321      }\n  322  \n  323:     virtual slang::TypeReflection* getShaderType(RendererContext* context) override\n  324      {\n  325          return ::getShaderType<DirectionalLight>(context);\n  ...\n  340      }\n  341  \n  342:     virtual slang::TypeReflection* getShaderType(RendererContext* context) override\n  343      {\n  344          return ::getShaderType<PointLight>(context);\n  ...\n  372      };\n  373      std::vector<LightArrayLayout> lightArrayLayouts;\n  374:     std::map<slang::TypeReflection*, Int> mapLightTypeToArrayIndex;\n  375:     slang::TypeReflection* shaderType = nullptr;\n  376  \n  377:     void addLightType(RendererContext* context, slang::TypeReflection* lightType, Int maximumCount)\n  378      {\n  379          Int arrayIndex = (Int)lightArrayLayouts.size();\n  ...\n  409      }\n  410  \n  411:     Int getArrayIndexForType(slang::TypeReflection* lightType)\n  412      {\n  413          auto iter = mapLightTypeToArrayIndex.find(lightType);\n  ...\n  464      std::vector<RefPtr<LightArray>> lightArrays;\n  465  \n  466:     RefPtr<LightArray> getArrayForType(slang::TypeReflection* type)\n  467      {\n  468          auto index = layout->getArrayIndexForType(type);\n  ...\n  477  \n  478      // Get the proper shader type that represents this lighting environment.\n  479:     slang::TypeReflection* getShaderType()\n  480      {\n  481          // Given a lighting environment with N light types:\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/examples/shader-object/main.cpp:\n  207          // To do so, we first need to lookup for the `AddTransformer` type defined in the shader\n  208          // code.\n  209:         slang::TypeReflection* addTransformerType =\n  210              slangReflection->findTypeByName(\"AddTransformer\");\n  211  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/source/core/slang-type-text-util.cpp:\n   35  struct ScalarTypeInfo\n   36  {\n   37:     slang::TypeReflection::ScalarType type;\n   38      UnownedStringSlice text;\n   39  };\n   ..\n   42  {\n   43      #define SLANG_SCALAR_TYPE_INFO(value, text) \\\n   44:             { slang::TypeReflection::ScalarType::value, UnownedStringSlice::fromLiteral(#text) },\n   45      SLANG_SCALAR_TYPES(SLANG_SCALAR_TYPE_INFO)\n   46  };\n   ..\n  106  }\n  107  \n  108: /* static */UnownedStringSlice TypeTextUtil::getScalarTypeName(slang::TypeReflection::ScalarType scalarType)\n  109  {    \n  110:     typedef slang::TypeReflection::ScalarType ScalarType;\n  111      switch (scalarType)\n  112      {\n  ...\n  119  }\n  120  \n  121: /* static */slang::TypeReflection::ScalarType TypeTextUtil::findScalarType(const UnownedStringSlice& inText)\n  122  {\n  123      for (Index i = 0; i < SLANG_COUNT_OF(s_scalarTypeInfos); ++i)\n  ...\n  129          }\n  130      }\n  131:     return slang::TypeReflection::ScalarType::None;\n  132  }\n  133  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/source/core/slang-type-text-util.h:\n   14  {\n   15          /// Get the scalar type as text.\n   16:     static Slang::UnownedStringSlice getScalarTypeName(slang::TypeReflection::ScalarType scalarType);\n   17  \n   18          // Converts text to scalar type. Returns 'none' if not determined\n   19:     static slang::TypeReflection::ScalarType findScalarType(const Slang::UnownedStringSlice& text);\n   20  \n   21          /// As human readable text\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/source/slang/slang-compiler.h:\n 1391      struct ContainerTypeKey\n 1392      {\n 1393:         slang::TypeReflection* elementType;\n 1394          slang::ContainerType containerType;\n 1395          bool operator==(ContainerTypeKey other)\n ....\n 1425              slang::IComponentType**         outCompositeComponentType,\n 1426              ISlangBlob**                    outDiagnostics = nullptr) override;\n 1427:         SLANG_NO_THROW slang::TypeReflection* SLANG_MCALL specializeType(\n 1428:             slang::TypeReflection*          type,\n 1429              slang::SpecializationArg const* specializationArgs,\n 1430              SlangInt                        specializationArgCount,\n 1431              ISlangBlob**                    outDiagnostics = nullptr) override;\n 1432          SLANG_NO_THROW slang::TypeLayoutReflection* SLANG_MCALL getTypeLayout(\n 1433:             slang::TypeReflection* type,\n 1434              SlangInt               targetIndex = 0,\n 1435              slang::LayoutRules     rules = slang::LayoutRules::Default,\n 1436              ISlangBlob**    outDiagnostics = nullptr) override;\n 1437:         SLANG_NO_THROW slang::TypeReflection* SLANG_MCALL getContainerType(\n 1438:             slang::TypeReflection* elementType,\n 1439              slang::ContainerType containerType,\n 1440              ISlangBlob** outDiagnostics = nullptr) override;\n 1441:         SLANG_NO_THROW slang::TypeReflection* SLANG_MCALL getDynamicType() override;\n 1442          SLANG_NO_THROW SlangResult SLANG_MCALL getTypeRTTIMangledName(\n 1443:             slang::TypeReflection* type,\n 1444              ISlangBlob** outNameBlob) override;\n 1445          SLANG_NO_THROW SlangResult SLANG_MCALL getTypeConformanceWitnessMangledName(\n 1446:             slang::TypeReflection* type,\n 1447:             slang::TypeReflection* interfaceType,\n 1448              ISlangBlob** outNameBlob) override;\n 1449          SLANG_NO_THROW SlangResult SLANG_MCALL getTypeConformanceWitnessSequentialID(\n 1450:             slang::TypeReflection* type,\n 1451:             slang::TypeReflection* interfaceType,\n 1452              uint32_t*              outId) override;\n 1453          SLANG_NO_THROW SlangResult SLANG_MCALL createTypeConformanceComponentType(\n 1454:             slang::TypeReflection* type,\n 1455:             slang::TypeReflection* interfaceType,\n 1456              slang::ITypeConformance** outConformance,\n 1457              SlangInt conformanceIdOverride,\n ....\n 2590  }\n 2591  \n 2592: SLANG_FORCE_INLINE Type* asInternal(slang::TypeReflection* type)\n 2593  {\n 2594      return reinterpret_cast<Type*>(type);\n 2595  }\n 2596  \n 2597: SLANG_FORCE_INLINE slang::TypeReflection* asExternal(Type* type)\n 2598  {\n 2599:     return reinterpret_cast<slang::TypeReflection*>(type);\n 2600  }\n 2601  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/source/slang/slang.cpp:\n 1003  }\n 1004  \n 1005: SLANG_NO_THROW slang::TypeReflection* SLANG_MCALL Linkage::specializeType(\n 1006:     slang::TypeReflection*          inUnspecializedType,\n 1007      slang::SpecializationArg const* specializationArgs,\n 1008      SlangInt                        specializationArgCount,\n ....\n 1030  \n 1031  SLANG_NO_THROW slang::TypeLayoutReflection* SLANG_MCALL Linkage::getTypeLayout(\n 1032:     slang::TypeReflection*  inType,\n 1033      SlangInt                targetIndex,\n 1034      slang::LayoutRules      rules,\n ....\n 1060  }\n 1061  \n 1062: SLANG_NO_THROW slang::TypeReflection* SLANG_MCALL Linkage::getContainerType(\n 1063:     slang::TypeReflection* inType,\n 1064      slang::ContainerType containerType,\n 1065      ISlangBlob** outDiagnostics)\n ....\n 1067      auto type = asInternal(inType);\n 1068  \n 1069:     Type* containerTypeReflection = nullptr;\n 1070      ContainerTypeKey key = {inType, containerType};\n 1071:     if (!m_containerTypes.TryGetValue(key, containerTypeReflection))\n 1072      {\n 1073          switch (containerType)\n ....\n 1079                  cbType->declRef = getASTBuilder()->getBuiltinDeclRef(\n 1080                      \"ConstantBuffer\", makeConstArrayViewSingle<Val*>(static_cast<Val*>(type)));\n 1081:                 containerTypeReflection = cbType;\n 1082              }\n 1083              break;\n ....\n 1088                  pbType->declRef = getASTBuilder()->getBuiltinDeclRef(\n 1089                      \"ParameterBlock\", makeConstArrayViewSingle<Val*>(static_cast<Val*>(type)));\n 1090:                 containerTypeReflection = pbType;\n 1091              }\n 1092              break;\n ....\n 1098                  sbType->declRef = getASTBuilder()->getBuiltinDeclRef(\n 1099                      \"HLSLStructuredBufferType\", makeConstArrayViewSingle<Val*>(static_cast<Val*>(type)));\n 1100:                 containerTypeReflection = sbType;\n 1101              }\n 1102              break;\n ....\n 1104              {\n 1105                  ArrayExpressionType* arrType = getASTBuilder()->getArrayType(type, nullptr);\n 1106:                 containerTypeReflection = arrType;\n 1107              }\n 1108              break;\n 1109          default:\n 1110:             containerTypeReflection = type;\n 1111              break;\n 1112          }\n 1113          \n 1114:         m_containerTypes.Add(key, containerTypeReflection);\n 1115      }\n 1116  \n 1117      SLANG_UNUSED(outDiagnostics);\n 1118  \n 1119:     return asExternal(containerTypeReflection);\n 1120  }\n 1121  \n 1122: SLANG_NO_THROW slang::TypeReflection* SLANG_MCALL Linkage::getDynamicType()\n 1123  {\n 1124      return asExternal(getASTBuilder()->getSharedASTBuilder()->getDynamicType());\n ....\n 1126  \n 1127  SLANG_NO_THROW SlangResult SLANG_MCALL Linkage::getTypeRTTIMangledName(\n 1128:     slang::TypeReflection* type, ISlangBlob** outNameBlob)\n 1129  {\n 1130      auto internalType = asInternal(type);\n ....\n 1140  \n 1141  SLANG_NO_THROW SlangResult SLANG_MCALL Linkage::getTypeConformanceWitnessMangledName(\n 1142:     slang::TypeReflection* type, slang::TypeReflection* interfaceType, ISlangBlob** outNameBlob)\n 1143  {\n 1144      auto subType = asInternal(type);\n ....\n 1151  \n 1152  SLANG_NO_THROW SlangResult SLANG_MCALL Linkage::getTypeConformanceWitnessSequentialID(\n 1153:     slang::TypeReflection* type,\n 1154:     slang::TypeReflection* interfaceType,\n 1155      uint32_t* outId)\n 1156  {\n ....\n 1185  \n 1186  SLANG_NO_THROW SlangResult SLANG_MCALL Linkage::createTypeConformanceComponentType(\n 1187:     slang::TypeReflection* type,\n 1188:     slang::TypeReflection* interfaceType,\n 1189      slang::ITypeConformance** outConformanceComponentType,\n 1190      SlangInt conformanceIdOverride,\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/gfx/debug-layer.cpp:\n  613  \n  614  Result DebugDevice::createShaderObject(\n  615:     slang::TypeReflection* type,\n  616      ShaderObjectContainerType containerType,\n  617      IShaderObject** outShaderObject)\n  ...\n  633  \n  634  Result DebugDevice::createMutableShaderObject(\n  635:     slang::TypeReflection* type,\n  636      ShaderObjectContainerType containerType,\n  637      IShaderObject** outShaderObject)\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/gfx/debug-layer.h:\n  113          createCommandQueue(const ICommandQueue::Desc& desc, ICommandQueue** outQueue) override;\n  114      virtual SLANG_NO_THROW Result SLANG_MCALL createShaderObject(\n  115:         slang::TypeReflection* type,\n  116          ShaderObjectContainerType container,\n  117          IShaderObject** outObject) override;\n  118      virtual SLANG_NO_THROW Result SLANG_MCALL createMutableShaderObject(\n  119:         slang::TypeReflection* type,\n  120          ShaderObjectContainerType container,\n  121          IShaderObject** outObject) override;\n  ...\n  295  public:\n  296      Slang::String m_typeName;\n  297:     slang::TypeReflection* m_slangType = nullptr;\n  298      DebugDevice* m_device;\n  299      Slang::List<Slang::RefPtr<DebugShaderObject>> m_entryPoints;\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/gfx/renderer-shared.cpp:\n  402  \n  403  SLANG_NO_THROW Result SLANG_MCALL RendererBase::createShaderObject(\n  404:     slang::TypeReflection* type,\n  405      ShaderObjectContainerType container,\n  406      IShaderObject** outObject)\n  ...\n  412  \n  413  SLANG_NO_THROW Result SLANG_MCALL RendererBase::createMutableShaderObject(\n  414:     slang::TypeReflection* type,\n  415      ShaderObjectContainerType containerType,\n  416      IShaderObject** outObject)\n  ...\n  482  \n  483  Result RendererBase::getShaderObjectLayout(\n  484:     slang::TypeReflection* type,\n  485      ShaderObjectContainerType container,\n  486      ShaderObjectLayoutBase** outLayout)\n  ...\n  511  \n  512  \n  513: ShaderComponentID ShaderCache::getComponentId(slang::TypeReflection* type)\n  514  {\n  515      ComponentKey key;\n  ...\n  517      switch (type->getKind())\n  518      {\n  519:     case slang::TypeReflection::Kind::Specialized:\n  520          {\n  521              auto baseType = type->getElementType();\n  ...\n  533                  if(auto rawArgType = spReflectionType_getSpecializedTypeArgType(rawType, a))\n  534                  {\n  535:                     auto argType = (slang::TypeReflection*) rawArgType;\n  536                      builder.append(argType->getName());\n  537                  }\n  ...\n  615  \n  616  Result ShaderObjectBase::setExistentialHeader(\n  617:     slang::TypeReflection* existentialType,\n  618:     slang::TypeReflection* concreteType,\n  619      ShaderOffset offset)\n  620  {\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/gfx/renderer-shared.h:\n  320  struct ExtendedShaderObjectType\n  321  {\n  322:     slang::TypeReflection* slangType;\n  323      ShaderComponentID componentID;\n  324  };\n  ...\n  394              switch (typeLayout->getKind())\n  395              {\n  396:             case slang::TypeReflection::Kind::Array:\n  397                  SLANG_ASSERT(outContainerType == ShaderObjectContainerType::None);\n  398                  outContainerType = ShaderObjectContainerType::Array;\n  399                  typeLayout = typeLayout->getElementTypeLayout();\n  400                  return typeLayout;\n  401:             case slang::TypeReflection::Kind::Resource:\n  402                  {\n  403                      if (typeLayout->getResourceShape() != SLANG_STRUCTURED_BUFFER)\n  ...\n  415              default:\n  416                  return typeLayout;\n  417:             case slang::TypeReflection::Kind::ConstantBuffer:\n  418:             case slang::TypeReflection::Kind::ParameterBlock:\n  419                  typeLayout = typeLayout->getElementTypeLayout();\n  420                  continue;\n  ...\n  514      /// Sets the RTTI ID and RTTI witness table fields of an existential value.\n  515      Result setExistentialHeader(\n  516:         slang::TypeReflection* existentialType,\n  517:         slang::TypeReflection* concreteType,\n  518          ShaderOffset offset);\n  519  \n  ...\n  662              // we need to make sure to fill in the existential value header (RTTI ID and\n  663              // witness table IDs).\n  664:             if (layout->getElementTypeLayout()->getKind() == slang::TypeReflection::Kind::Interface)\n  665              {\n  666                  auto existentialType = layout->getElementTypeLayout()->getType();\n  ...\n 1145  {\n 1146  public:\n 1147:     ShaderComponentID getComponentId(slang::TypeReflection* type);\n 1148      ShaderComponentID getComponentId(Slang::UnownedStringSlice name);\n 1149      ShaderComponentID getComponentId(ComponentKey key);\n ....\n 1233  \n 1234      virtual SLANG_NO_THROW Result SLANG_MCALL createShaderObject(\n 1235:         slang::TypeReflection* type,\n 1236          ShaderObjectContainerType containerType,\n 1237          IShaderObject** outObject) SLANG_OVERRIDE;\n 1238  \n 1239      virtual SLANG_NO_THROW Result SLANG_MCALL createMutableShaderObject(\n 1240:         slang::TypeReflection* type,\n 1241          ShaderObjectContainerType containerType,\n 1242          IShaderObject** outObject) SLANG_OVERRIDE;\n ....\n 1276  \n 1277      Result getShaderObjectLayout(\n 1278:         slang::TypeReflection*      type,\n 1279          ShaderObjectContainerType   container,\n 1280          ShaderObjectLayoutBase**    outLayout);\n ....\n 1311      ShaderCache shaderCache;\n 1312  \n 1313:     Slang::Dictionary<slang::TypeReflection*, Slang::RefPtr<ShaderObjectLayoutBase>> m_shaderObjectLayoutCache;\n 1314  };\n 1315  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/gfx/d3d11/render-d3d11.cpp:\n 1051          RendererBase* getRenderer() { return m_renderer; }\n 1052  \n 1053:         slang::TypeReflection* getType()\n 1054          {\n 1055              return m_elementTypeLayout->getType();\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/gfx/d3d12/render-d3d12.cpp:\n 1359          RendererBase* getRenderer() { return m_renderer; }\n 1360  \n 1361:         slang::TypeReflection* getType() { return m_elementTypeLayout->getType(); }\n 1362  \n 1363      protected:\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/gfx/open-gl/render-gl.cpp:\n  795          RendererBase* getRenderer() { return m_renderer; }\n  796  \n  797:         slang::TypeReflection* getType()\n  798          {\n  799              return m_elementTypeLayout->getType();\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/gfx/vulkan/render-vk.cpp:\n 1820          VKDevice* getDevice() { return static_cast<VKDevice*>(m_renderer); }\n 1821  \n 1822:         slang::TypeReflection* getType() { return m_elementTypeLayout->getType(); }\n 1823  \n 1824      protected:\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/gfx-unit-test/compute-smoke.cpp:\n   65              auto rootObject = encoder->bindPipeline(pipelineState);\n   66  \n   67:             slang::TypeReflection* addTransformerType =\n   68                  slangReflection->findTypeByName(\"AddTransformer\");\n   69  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/gfx-unit-test/mutable-shader-object.cpp:\n   55  \n   56          {\n   57:             slang::TypeReflection* addTransformerType =\n   58                  slangReflection->findTypeByName(\"AddTransformer\");\n   59  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/gfx-unit-test/root-mutable-shader-object.cpp:\n   59          entryPointCursor.getPath(\"buffer\").setResource(bufferView);\n   60  \n   61:         slang::TypeReflection* addTransformerType =\n   62              slangReflection->findTypeByName(\"AddTransformer\");\n   63          ComPtr<IShaderObject> transformer;\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/gfx-util/shader-cursor.cpp:\n   11          return SLANG_E_INVALID_ARG;\n   12  \n   13:     case slang::TypeReflection::Kind::ConstantBuffer:\n   14:     case slang::TypeReflection::Kind::ParameterBlock:\n   15          {\n   16              auto subObject = m_baseObject->getObject(m_offset);\n   ..\n   35          // The easy/expected case is when the value has a structure type.\n   36          //\n   37:     case slang::TypeReflection::Kind::Struct:\n   38          {\n   39              // We start by looking up the index of a field matching `name`.\n   ..\n  103      // and in these cases we want the access to Just Work.\n  104      //\n  105:     case slang::TypeReflection::Kind::ConstantBuffer:\n  106:     case slang::TypeReflection::Kind::ParameterBlock:\n  107          {\n  108              // We basically need to \"dereference\" the current cursor\n  ...\n  159      switch( m_typeLayout->getKind() )\n  160      {\n  161:     case slang::TypeReflection::Kind::Array:\n  162          {\n  163              ShaderCursor elementCursor;\n  ...\n  174          break;\n  175  \n  176:     case slang::TypeReflection::Kind::Struct:\n  177          {\n  178              // The logic here is similar to `getField()` except that we don't\n  ...\n  197          break;\n  198  \n  199:     case slang::TypeReflection::Kind::Vector:\n  200:     case slang::TypeReflection::Kind::Matrix:\n  201          {\n  202              ShaderCursor fieldCursor;\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/render-test/render-test-main.cpp:\n  187          switch(dataCursor.getTypeLayout()->getKind())\n  188          {\n  189:         case slang::TypeReflection::Kind::ConstantBuffer:\n  190:         case slang::TypeReflection::Kind::ParameterBlock:\n  191              dataCursor = dataCursor.getDereferenced();\n  192              break;\n  ...\n  320      {\n  321          auto typeName = srcVal->typeName;\n  322:         slang::TypeReflection* slangType = nullptr;\n  323          if(typeName.getLength() != 0)\n  324          {\n  ...\n  340                  break;\n  341  \n  342:             case slang::TypeReflection::Kind::ConstantBuffer:\n  343:             case slang::TypeReflection::Kind::ParameterBlock:\n  344                  // If the cursor is pointing at a constant buffer\n  345                  // or parameter block, then we assume the user\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/render-test/shader-input-layout.cpp:\n  937      /* static */SlangResult ShaderInputLayout::writeBinding(slang::TypeLayoutReflection* typeLayout, const void* data, size_t sizeInBytes, WriterHelper writer)\n  938      {\n  939:         typedef slang::TypeReflection::ScalarType ScalarType;\n  940  \n  941:         slang::TypeReflection::ScalarType scalarType = slang::TypeReflection::ScalarType::None;\n  942  \n  943          slang::TypeLayoutReflection* elementTypeLayout = nullptr;\n  ...\n  948              {\n  949                  \n  950:                 //case slang::TypeReflection::Kind::Struct:\n  951:                 case slang::TypeReflection::Kind::Array:\n  952:                 case slang::TypeReflection::Kind::Matrix:\n  953:                 case slang::TypeReflection::Kind::Vector:\n  954                  {\n  955                      elementTypeLayout = typeLayout->getElementTypeLayout();\n  956                      break;\n  957                  }\n  958:                 case slang::TypeReflection::Kind::Scalar:\n  959                  {\n  960                      elementTypeLayout = typeLayout;\n  961                      break;\n  962                  }\n  963:                 case slang::TypeReflection::Kind::Resource:\n  964                  {\n  965                      elementTypeLayout = typeLayout->getElementTypeLayout();\n  966                      break;\n  967                  }   \n  968:                 case slang::TypeReflection::Kind::TextureBuffer:\n  969:                 case slang::TypeReflection::Kind::ShaderStorageBuffer:\n  970                  {\n  971                      elementTypeLayout = typeLayout->getElementTypeLayout();\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/slang-reflection-test/slang-reflection-test-main.cpp:\n  201  static void emitReflectionVarInfoJSON(PrettyWriter& writer, slang::VariableReflection* var);\n  202  static void emitReflectionTypeLayoutJSON(PrettyWriter& writer, slang::TypeLayoutReflection* type);\n  203: static void emitReflectionTypeJSON(PrettyWriter& writer, slang::TypeReflection* type);\n  204  \n  205  static void emitReflectionVarBindingInfoJSON(\n  ...\n  415  }\n  416  \n  417: static void emitUserAttributes(PrettyWriter& writer, slang::TypeReflection* type)\n  418  {\n  419      auto attribCount = type->getUserAttributeCount();\n  ...\n  487          assert(!\"unhandled case\");\n  488          break;\n  489: #define CASE(TAG, ID) case slang::TypeReflection::ScalarType::TAG: write(writer, #ID); break\n  490          CASE(Void, void);\n  491          CASE(Bool, bool);\n  ...\n  510  static void emitReflectionResourceTypeBaseInfoJSON(\n  511      PrettyWriter&           writer,\n  512:     slang::TypeReflection*  type)\n  513  {\n  514      auto shape  = type->getResourceShape();\n  ...\n  578  static void emitReflectionTypeInfoJSON(\n  579      PrettyWriter&           writer,\n  580:     slang::TypeReflection*  type)\n  581  {\n  582      auto kind = type->getKind();\n  583      switch(kind)\n  584      {\n  585:     case slang::TypeReflection::Kind::SamplerState:\n  586          comma(writer);\n  587          write(writer, \"\\\"kind\\\": \\\"samplerState\\\"\");\n  588          break;\n  589  \n  590:     case slang::TypeReflection::Kind::Resource:\n  591          {\n  592              emitReflectionResourceTypeBaseInfoJSON(writer, type);\n  ...\n  616          break;\n  617  \n  618:     case slang::TypeReflection::Kind::ConstantBuffer:\n  619          comma(writer);\n  620          write(writer, \"\\\"kind\\\": \\\"constantBuffer\\\"\");\n  ...\n  626          break;\n  627  \n  628:     case slang::TypeReflection::Kind::ParameterBlock:\n  629          comma(writer);\n  630          write(writer, \"\\\"kind\\\": \\\"parameterBlock\\\"\");\n  ...\n  636          break;\n  637  \n  638:     case slang::TypeReflection::Kind::TextureBuffer:\n  639          comma(writer);\n  640          write(writer, \"\\\"kind\\\": \\\"textureBuffer\\\"\");\n  ...\n  646          break;\n  647  \n  648:     case slang::TypeReflection::Kind::ShaderStorageBuffer:\n  649          comma(writer);\n  650          write(writer, \"\\\"kind\\\": \\\"shaderStorageBuffer\\\"\");\n  ...\n  656          break;\n  657  \n  658:     case slang::TypeReflection::Kind::Scalar:\n  659          comma(writer);\n  660          write(writer, \"\\\"kind\\\": \\\"scalar\\\"\");\n  ...\n  665          break;\n  666  \n  667:     case slang::TypeReflection::Kind::Vector:\n  668          comma(writer);\n  669          write(writer, \"\\\"kind\\\": \\\"vector\\\"\");\n  ...\n  678          break;\n  679  \n  680:     case slang::TypeReflection::Kind::Matrix:\n  681          comma(writer);\n  682          write(writer, \"\\\"kind\\\": \\\"matrix\\\"\");\n  ...\n  694          break;\n  695  \n  696:     case slang::TypeReflection::Kind::Array:\n  697          {\n  698              auto arrayType = type;\n  ...\n  708          break;\n  709  \n  710:     case slang::TypeReflection::Kind::Struct:\n  711          {\n  712              comma(writer);\n  ...\n  730          break;\n  731  \n  732:     case slang::TypeReflection::Kind::GenericTypeParameter:\n  733          comma(writer);\n  734          write(writer, \"\\\"kind\\\": \\\"GenericTypeParameter\\\"\");\n  ...\n  736          emitReflectionNameInfoJSON(writer, type->getName());\n  737          break;\n  738:     case slang::TypeReflection::Kind::Interface:\n  739          comma(writer);\n  740          write(writer, \"\\\"kind\\\": \\\"Interface\\\"\");\n  ...\n  742          emitReflectionNameInfoJSON(writer, type->getName());\n  743          break;\n  744:     case slang::TypeReflection::Kind::Feedback:\n  745          comma(writer);\n  746          write(writer, \"\\\"kind\\\": \\\"Feedback\\\"\");\n  ...\n  826          break;\n  827  \n  828:     case slang::TypeReflection::Kind::Array:\n  829          {\n  830              auto arrayTypeLayout = typeLayout;\n  ...\n  852          break;\n  853  \n  854:     case slang::TypeReflection::Kind::Struct:\n  855          {\n  856              auto structTypeLayout = typeLayout;\n  ...\n  882          break;\n  883  \n  884:     case slang::TypeReflection::Kind::ConstantBuffer:\n  885          emitReflectionParameterGroupTypeLayoutInfoJSON(writer, typeLayout, \"constantBuffer\");\n  886          break;\n  887  \n  888:     case slang::TypeReflection::Kind::ParameterBlock:\n  889          emitReflectionParameterGroupTypeLayoutInfoJSON(writer, typeLayout, \"parameterBlock\");\n  890          break;\n  891  \n  892:     case slang::TypeReflection::Kind::TextureBuffer:\n  893          emitReflectionParameterGroupTypeLayoutInfoJSON(writer, typeLayout, \"textureBuffer\");\n  894          break;\n  895  \n  896:     case slang::TypeReflection::Kind::ShaderStorageBuffer:\n  897          comma(writer);\n  898          write(writer, \"\\\"kind\\\": \\\"shaderStorageBuffer\\\"\");\n  ...\n  904              typeLayout->getElementTypeLayout());\n  905          break;\n  906:     case slang::TypeReflection::Kind::GenericTypeParameter:\n  907          comma(writer);\n  908          write(writer, \"\\\"kind\\\": \\\"GenericTypeParameter\\\"\");\n  ...\n  911          emitReflectionNameInfoJSON(writer, typeLayout->getName());\n  912          break;\n  913:     case slang::TypeReflection::Kind::Interface:\n  914          comma(writer);\n  915          write(writer, \"\\\"kind\\\": \\\"Interface\\\"\");\n  ...\n  919          break;\n  920  \n  921:     case slang::TypeReflection::Kind::Resource:\n  922          {\n  923              // Some resource types (notably structured buffers)\n  ...\n  978  static void emitReflectionTypeJSON(\n  979      PrettyWriter&           writer,\n  980:     slang::TypeReflection*  type)\n  981  {\n  982      CommaTrackerRAII commaTracker(writer);\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/slang-test/slang-test-main.cpp:\n 2460  static SlangResult _compareWithType(const UnownedStringSlice& actual, const UnownedStringSlice& ref, double differenceThreshold = 0.0001)\n 2461  {\n 2462:     typedef slang::TypeReflection::ScalarType ScalarType;\n 2463  \n 2464      ScalarType scalarType = ScalarType::None;\n\n199 matches across 25 files\n\n\nSearching 7755 files for \"TypeReflection\" (case sensitive)\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/slang-gfx.h:\n 2069  \n 2070      virtual SLANG_NO_THROW Result SLANG_MCALL createShaderObject(\n 2071:         slang::TypeReflection* type,\n 2072          ShaderObjectContainerType container,\n 2073          IShaderObject** outObject) = 0;\n 2074  \n 2075:     inline ComPtr<IShaderObject> createShaderObject(slang::TypeReflection* type)\n 2076      {\n 2077          ComPtr<IShaderObject> object;\n ....\n 2081  \n 2082      virtual SLANG_NO_THROW Result SLANG_MCALL createMutableShaderObject(\n 2083:         slang::TypeReflection* type,\n 2084          ShaderObjectContainerType container,\n 2085          IShaderObject** outObject) = 0;\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/slang.h:\n 2204      struct BufferReflection;\n 2205      struct TypeLayoutReflection;\n 2206:     struct TypeReflection;\n 2207      struct VariableLayoutReflection;\n 2208      struct VariableReflection;\n ....\n 2218              return (uint32_t)spReflectionUserAttribute_GetArgumentCount((SlangReflectionUserAttribute*)this);\n 2219          }\n 2220:         TypeReflection* getArgumentType(uint32_t index)\n 2221          {\n 2222:             return (TypeReflection*)spReflectionUserAttribute_GetArgumentType((SlangReflectionUserAttribute*)this, index);\n 2223          }\n 2224          SlangResult getArgumentValueInt(uint32_t index, int * value)\n ....\n 2236      };\n 2237  \n 2238:     struct TypeReflection\n 2239      {\n 2240          enum class Kind\n ....\n 2293          }\n 2294  \n 2295:         bool isArray() { return getKind() == TypeReflection::Kind::Array; }\n 2296  \n 2297:         TypeReflection* unwrapArray()\n 2298          {\n 2299:             TypeReflection* type = this;\n 2300              while( type->isArray() )\n 2301              {\n ....\n 2315              if(!isArray()) return 0;\n 2316              size_t result = 1;\n 2317:             TypeReflection* type = this;\n 2318              for(;;)\n 2319              {\n ....\n 2326          }\n 2327  \n 2328:         TypeReflection* getElementType()\n 2329          {\n 2330:             return (TypeReflection*) spReflectionType_GetElementType((SlangReflectionType*) this);\n 2331          }\n 2332  \n ....\n 2346          }\n 2347  \n 2348:         TypeReflection* getResourceResultType()\n 2349          {\n 2350:             return (TypeReflection*) spReflectionType_GetResourceResultType((SlangReflectionType*) this);\n 2351          }\n 2352  \n ....\n 2443      struct TypeLayoutReflection\n 2444      {\n 2445:         TypeReflection* getType()\n 2446          {\n 2447:             return (TypeReflection*) spReflectionTypeLayout_GetType((SlangReflectionTypeLayout*) this);\n 2448          }\n 2449  \n 2450:         TypeReflection::Kind getKind()\n 2451          {\n 2452:             return (TypeReflection::Kind) spReflectionTypeLayout_getKind((SlangReflectionTypeLayout*) this);\n 2453          }\n 2454  \n ....\n 2552          }\n 2553  \n 2554:         TypeReflection::ScalarType getScalarType()\n 2555          {\n 2556              return getType()->getScalarType();\n 2557          }\n 2558  \n 2559:         TypeReflection* getResourceResultType()\n 2560          {\n 2561              return getType()->getResourceResultType();\n ....\n 2766          }\n 2767  \n 2768:         TypeReflection* getType()\n 2769          {\n 2770:             return (TypeReflection*) spReflectionVariable_GetType((SlangReflectionVariable*) this);\n 2771          }\n 2772  \n ....\n 2833          }\n 2834  \n 2835:         TypeReflection* getType()\n 2836          {\n 2837              return getVariable()->getType();\n ....\n 2944              return spReflectionTypeParameter_GetConstraintCount((SlangReflectionTypeParameter*) this);\n 2945          }\n 2946:         TypeReflection* getConstraintByIndex(int index)\n 2947          {\n 2948:             return (TypeReflection*)spReflectionTypeParameter_GetConstraintByIndex((SlangReflectionTypeParameter*) this, index);\n 2949          }\n 2950      };\n ....\n 3009          }\n 3010  \n 3011:         TypeReflection* findTypeByName(const char* name)\n 3012          {\n 3013:             return (TypeReflection*)spReflection_FindTypeByName(\n 3014                  (SlangReflection*) this,\n 3015                  name);\n ....\n 3017  \n 3018          TypeLayoutReflection* getTypeLayout(\n 3019:             TypeReflection* type,\n 3020              LayoutRules     rules = LayoutRules::Default)\n 3021          {\n ....\n 3033          }\n 3034  \n 3035:         TypeReflection* specializeType(\n 3036:             TypeReflection*         type,\n 3037              SlangInt                specializationArgCount,\n 3038:             TypeReflection* const*  specializationArgs,\n 3039              ISlangBlob**            outDiagnostics)\n 3040          {\n 3041:             return (TypeReflection*) spReflection_specializeType(\n 3042                  (SlangReflection*) this,\n 3043                  (SlangReflectionType*) type,\n ....\n 4015              /** Specialize a type based on type arguments.\n 4016              */\n 4017:         virtual SLANG_NO_THROW TypeReflection* SLANG_MCALL specializeType(\n 4018:             TypeReflection*             type,\n 4019              SpecializationArg const*    specializationArgs,\n 4020              SlangInt                    specializationArgCount,\n ....\n 4025              */\n 4026          virtual SLANG_NO_THROW TypeLayoutReflection* SLANG_MCALL getTypeLayout(\n 4027:             TypeReflection* type,\n 4028              SlangInt        targetIndex = 0,\n 4029              LayoutRules     rules = LayoutRules::Default,\n ....\n 4037                  @param `outDiagnostics`: a blob to receive diagnostic messages.\n 4038              */\n 4039:         virtual SLANG_NO_THROW TypeReflection* SLANG_MCALL getContainerType(\n 4040:             TypeReflection* elementType,\n 4041              ContainerType containerType,\n 4042              ISlangBlob** outDiagnostics = nullptr) = 0;\n 4043  \n 4044:             /** Return a `TypeReflection` that represents the `__Dynamic` type.\n 4045                  This type can be used as a specialization argument to indicate using\n 4046                  dynamic dispatch.\n 4047              */\n 4048:         virtual SLANG_NO_THROW TypeReflection* SLANG_MCALL getDynamicType() = 0;\n 4049  \n 4050              /** Get the mangled name for a type RTTI object.\n 4051              */\n 4052          virtual SLANG_NO_THROW SlangResult SLANG_MCALL getTypeRTTIMangledName(\n 4053:             TypeReflection* type,\n 4054              ISlangBlob** outNameBlob) = 0;\n 4055  \n ....\n 4057              */\n 4058          virtual SLANG_NO_THROW SlangResult SLANG_MCALL getTypeConformanceWitnessMangledName(\n 4059:             TypeReflection* type,\n 4060:             TypeReflection* interfaceType,\n 4061              ISlangBlob** outNameBlob) = 0;\n 4062  \n ....\n 4064              */\n 4065          virtual SLANG_NO_THROW SlangResult SLANG_MCALL getTypeConformanceWitnessSequentialID(\n 4066:             slang::TypeReflection* type,\n 4067:             slang::TypeReflection* interfaceType,\n 4068              uint32_t*              outId) = 0;\n 4069  \n ....\n 4093              */\n 4094          virtual SLANG_NO_THROW SlangResult SLANG_MCALL createTypeConformanceComponentType(\n 4095:             slang::TypeReflection* type,\n 4096:             slang::TypeReflection* interfaceType,\n 4097              ITypeConformance** outConformance,\n 4098              SlangInt conformanceIdOverride,\n ....\n 4324          {\n 4325              /** A type specialization argument, used for `Kind::Type`. */\n 4326:             TypeReflection* type;\n 4327          };\n 4328  \n 4329:         static SpecializationArg fromType(TypeReflection* inType)\n 4330          {\n 4331              SpecializationArg rs;\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/docs/api-users-guide.md:\n  321  \n  322  ```c++\n  323: slang::TypeReflection::Kind kind = typeLayout->getKind();\n  324  ```\n  325  \n  326: The available cases for `slang::TypeReflection::Kind` include `Scalar`, `Vector`, `Array`, `Struct`, etc.\n  327  \n  328  For any type layout, you can query the resources it consumes, or a particular parameter category:\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/examples/model-viewer/main.cpp:\n   47      ComPtr<IShaderProgram> shaderProgram;\n   48  \n   49:     slang::TypeReflection* perViewShaderType;\n   50:     slang::TypeReflection* perModelShaderType;\n   51  \n   52      Result init(IDevice* inDevice)\n   ..\n  288  \n  289      // Retrieves the shader type for this light object.\n  290:     virtual slang::TypeReflection* getShaderType(RendererContext* context) = 0;\n  291  \n  292      // The shader object for a light will be stashed here\n  ...\n  297  // Helper function to retrieve the underlying shader type of `T`.\n  298  template<typename T>\n  299: slang::TypeReflection* getShaderType(RendererContext* context)\n  300  {\n  301      auto program = context->slangReflection;\n  ...\n  321      }\n  322  \n  323:     virtual slang::TypeReflection* getShaderType(RendererContext* context) override\n  324      {\n  325          return ::getShaderType<DirectionalLight>(context);\n  ...\n  340      }\n  341  \n  342:     virtual slang::TypeReflection* getShaderType(RendererContext* context) override\n  343      {\n  344          return ::getShaderType<PointLight>(context);\n  ...\n  372      };\n  373      std::vector<LightArrayLayout> lightArrayLayouts;\n  374:     std::map<slang::TypeReflection*, Int> mapLightTypeToArrayIndex;\n  375:     slang::TypeReflection* shaderType = nullptr;\n  376  \n  377:     void addLightType(RendererContext* context, slang::TypeReflection* lightType, Int maximumCount)\n  378      {\n  379          Int arrayIndex = (Int)lightArrayLayouts.size();\n  ...\n  409      }\n  410  \n  411:     Int getArrayIndexForType(slang::TypeReflection* lightType)\n  412      {\n  413          auto iter = mapLightTypeToArrayIndex.find(lightType);\n  ...\n  464      std::vector<RefPtr<LightArray>> lightArrays;\n  465  \n  466:     RefPtr<LightArray> getArrayForType(slang::TypeReflection* type)\n  467      {\n  468          auto index = layout->getArrayIndexForType(type);\n  ...\n  477  \n  478      // Get the proper shader type that represents this lighting environment.\n  479:     slang::TypeReflection* getShaderType()\n  480      {\n  481          // Given a lighting environment with N light types:\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/examples/shader-object/main.cpp:\n  207          // To do so, we first need to lookup for the `AddTransformer` type defined in the shader\n  208          // code.\n  209:         slang::TypeReflection* addTransformerType =\n  210              slangReflection->findTypeByName(\"AddTransformer\");\n  211  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/source/core/slang-type-text-util.cpp:\n   35  struct ScalarTypeInfo\n   36  {\n   37:     slang::TypeReflection::ScalarType type;\n   38      UnownedStringSlice text;\n   39  };\n   ..\n   42  {\n   43      #define SLANG_SCALAR_TYPE_INFO(value, text) \\\n   44:             { slang::TypeReflection::ScalarType::value, UnownedStringSlice::fromLiteral(#text) },\n   45      SLANG_SCALAR_TYPES(SLANG_SCALAR_TYPE_INFO)\n   46  };\n   ..\n  106  }\n  107  \n  108: /* static */UnownedStringSlice TypeTextUtil::getScalarTypeName(slang::TypeReflection::ScalarType scalarType)\n  109  {    \n  110:     typedef slang::TypeReflection::ScalarType ScalarType;\n  111      switch (scalarType)\n  112      {\n  ...\n  119  }\n  120  \n  121: /* static */slang::TypeReflection::ScalarType TypeTextUtil::findScalarType(const UnownedStringSlice& inText)\n  122  {\n  123      for (Index i = 0; i < SLANG_COUNT_OF(s_scalarTypeInfos); ++i)\n  ...\n  129          }\n  130      }\n  131:     return slang::TypeReflection::ScalarType::None;\n  132  }\n  133  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/source/core/slang-type-text-util.h:\n   14  {\n   15          /// Get the scalar type as text.\n   16:     static Slang::UnownedStringSlice getScalarTypeName(slang::TypeReflection::ScalarType scalarType);\n   17  \n   18          // Converts text to scalar type. Returns 'none' if not determined\n   19:     static slang::TypeReflection::ScalarType findScalarType(const Slang::UnownedStringSlice& text);\n   20  \n   21          /// As human readable text\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/source/slang/slang-compiler.h:\n 1391      struct ContainerTypeKey\n 1392      {\n 1393:         slang::TypeReflection* elementType;\n 1394          slang::ContainerType containerType;\n 1395          bool operator==(ContainerTypeKey other)\n ....\n 1425              slang::IComponentType**         outCompositeComponentType,\n 1426              ISlangBlob**                    outDiagnostics = nullptr) override;\n 1427:         SLANG_NO_THROW slang::TypeReflection* SLANG_MCALL specializeType(\n 1428:             slang::TypeReflection*          type,\n 1429              slang::SpecializationArg const* specializationArgs,\n 1430              SlangInt                        specializationArgCount,\n 1431              ISlangBlob**                    outDiagnostics = nullptr) override;\n 1432          SLANG_NO_THROW slang::TypeLayoutReflection* SLANG_MCALL getTypeLayout(\n 1433:             slang::TypeReflection* type,\n 1434              SlangInt               targetIndex = 0,\n 1435              slang::LayoutRules     rules = slang::LayoutRules::Default,\n 1436              ISlangBlob**    outDiagnostics = nullptr) override;\n 1437:         SLANG_NO_THROW slang::TypeReflection* SLANG_MCALL getContainerType(\n 1438:             slang::TypeReflection* elementType,\n 1439              slang::ContainerType containerType,\n 1440              ISlangBlob** outDiagnostics = nullptr) override;\n 1441:         SLANG_NO_THROW slang::TypeReflection* SLANG_MCALL getDynamicType() override;\n 1442          SLANG_NO_THROW SlangResult SLANG_MCALL getTypeRTTIMangledName(\n 1443:             slang::TypeReflection* type,\n 1444              ISlangBlob** outNameBlob) override;\n 1445          SLANG_NO_THROW SlangResult SLANG_MCALL getTypeConformanceWitnessMangledName(\n 1446:             slang::TypeReflection* type,\n 1447:             slang::TypeReflection* interfaceType,\n 1448              ISlangBlob** outNameBlob) override;\n 1449          SLANG_NO_THROW SlangResult SLANG_MCALL getTypeConformanceWitnessSequentialID(\n 1450:             slang::TypeReflection* type,\n 1451:             slang::TypeReflection* interfaceType,\n 1452              uint32_t*              outId) override;\n 1453          SLANG_NO_THROW SlangResult SLANG_MCALL createTypeConformanceComponentType(\n 1454:             slang::TypeReflection* type,\n 1455:             slang::TypeReflection* interfaceType,\n 1456              slang::ITypeConformance** outConformance,\n 1457              SlangInt conformanceIdOverride,\n ....\n 2590  }\n 2591  \n 2592: SLANG_FORCE_INLINE Type* asInternal(slang::TypeReflection* type)\n 2593  {\n 2594      return reinterpret_cast<Type*>(type);\n 2595  }\n 2596  \n 2597: SLANG_FORCE_INLINE slang::TypeReflection* asExternal(Type* type)\n 2598  {\n 2599:     return reinterpret_cast<slang::TypeReflection*>(type);\n 2600  }\n 2601  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/source/slang/slang.cpp:\n 1003  }\n 1004  \n 1005: SLANG_NO_THROW slang::TypeReflection* SLANG_MCALL Linkage::specializeType(\n 1006:     slang::TypeReflection*          inUnspecializedType,\n 1007      slang::SpecializationArg const* specializationArgs,\n 1008      SlangInt                        specializationArgCount,\n ....\n 1030  \n 1031  SLANG_NO_THROW slang::TypeLayoutReflection* SLANG_MCALL Linkage::getTypeLayout(\n 1032:     slang::TypeReflection*  inType,\n 1033      SlangInt                targetIndex,\n 1034      slang::LayoutRules      rules,\n ....\n 1060  }\n 1061  \n 1062: SLANG_NO_THROW slang::TypeReflection* SLANG_MCALL Linkage::getContainerType(\n 1063:     slang::TypeReflection* inType,\n 1064      slang::ContainerType containerType,\n 1065      ISlangBlob** outDiagnostics)\n ....\n 1067      auto type = asInternal(inType);\n 1068  \n 1069:     Type* containerTypeReflection = nullptr;\n 1070      ContainerTypeKey key = {inType, containerType};\n 1071:     if (!m_containerTypes.TryGetValue(key, containerTypeReflection))\n 1072      {\n 1073          switch (containerType)\n ....\n 1079                  cbType->declRef = getASTBuilder()->getBuiltinDeclRef(\n 1080                      \"ConstantBuffer\", makeConstArrayViewSingle<Val*>(static_cast<Val*>(type)));\n 1081:                 containerTypeReflection = cbType;\n 1082              }\n 1083              break;\n ....\n 1088                  pbType->declRef = getASTBuilder()->getBuiltinDeclRef(\n 1089                      \"ParameterBlock\", makeConstArrayViewSingle<Val*>(static_cast<Val*>(type)));\n 1090:                 containerTypeReflection = pbType;\n 1091              }\n 1092              break;\n ....\n 1098                  sbType->declRef = getASTBuilder()->getBuiltinDeclRef(\n 1099                      \"HLSLStructuredBufferType\", makeConstArrayViewSingle<Val*>(static_cast<Val*>(type)));\n 1100:                 containerTypeReflection = sbType;\n 1101              }\n 1102              break;\n ....\n 1104              {\n 1105                  ArrayExpressionType* arrType = getASTBuilder()->getArrayType(type, nullptr);\n 1106:                 containerTypeReflection = arrType;\n 1107              }\n 1108              break;\n 1109          default:\n 1110:             containerTypeReflection = type;\n 1111              break;\n 1112          }\n 1113          \n 1114:         m_containerTypes.Add(key, containerTypeReflection);\n 1115      }\n 1116  \n 1117      SLANG_UNUSED(outDiagnostics);\n 1118  \n 1119:     return asExternal(containerTypeReflection);\n 1120  }\n 1121  \n 1122: SLANG_NO_THROW slang::TypeReflection* SLANG_MCALL Linkage::getDynamicType()\n 1123  {\n 1124      return asExternal(getASTBuilder()->getSharedASTBuilder()->getDynamicType());\n ....\n 1126  \n 1127  SLANG_NO_THROW SlangResult SLANG_MCALL Linkage::getTypeRTTIMangledName(\n 1128:     slang::TypeReflection* type, ISlangBlob** outNameBlob)\n 1129  {\n 1130      auto internalType = asInternal(type);\n ....\n 1140  \n 1141  SLANG_NO_THROW SlangResult SLANG_MCALL Linkage::getTypeConformanceWitnessMangledName(\n 1142:     slang::TypeReflection* type, slang::TypeReflection* interfaceType, ISlangBlob** outNameBlob)\n 1143  {\n 1144      auto subType = asInternal(type);\n ....\n 1151  \n 1152  SLANG_NO_THROW SlangResult SLANG_MCALL Linkage::getTypeConformanceWitnessSequentialID(\n 1153:     slang::TypeReflection* type,\n 1154:     slang::TypeReflection* interfaceType,\n 1155      uint32_t* outId)\n 1156  {\n ....\n 1185  \n 1186  SLANG_NO_THROW SlangResult SLANG_MCALL Linkage::createTypeConformanceComponentType(\n 1187:     slang::TypeReflection* type,\n 1188:     slang::TypeReflection* interfaceType,\n 1189      slang::ITypeConformance** outConformanceComponentType,\n 1190      SlangInt conformanceIdOverride,\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/gfx/debug-layer.cpp:\n  613  \n  614  Result DebugDevice::createShaderObject(\n  615:     slang::TypeReflection* type,\n  616      ShaderObjectContainerType containerType,\n  617      IShaderObject** outShaderObject)\n  ...\n  633  \n  634  Result DebugDevice::createMutableShaderObject(\n  635:     slang::TypeReflection* type,\n  636      ShaderObjectContainerType containerType,\n  637      IShaderObject** outShaderObject)\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/gfx/debug-layer.h:\n  113          createCommandQueue(const ICommandQueue::Desc& desc, ICommandQueue** outQueue) override;\n  114      virtual SLANG_NO_THROW Result SLANG_MCALL createShaderObject(\n  115:         slang::TypeReflection* type,\n  116          ShaderObjectContainerType container,\n  117          IShaderObject** outObject) override;\n  118      virtual SLANG_NO_THROW Result SLANG_MCALL createMutableShaderObject(\n  119:         slang::TypeReflection* type,\n  120          ShaderObjectContainerType container,\n  121          IShaderObject** outObject) override;\n  ...\n  295  public:\n  296      Slang::String m_typeName;\n  297:     slang::TypeReflection* m_slangType = nullptr;\n  298      DebugDevice* m_device;\n  299      Slang::List<Slang::RefPtr<DebugShaderObject>> m_entryPoints;\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/gfx/renderer-shared.cpp:\n  402  \n  403  SLANG_NO_THROW Result SLANG_MCALL RendererBase::createShaderObject(\n  404:     slang::TypeReflection* type,\n  405      ShaderObjectContainerType container,\n  406      IShaderObject** outObject)\n  ...\n  412  \n  413  SLANG_NO_THROW Result SLANG_MCALL RendererBase::createMutableShaderObject(\n  414:     slang::TypeReflection* type,\n  415      ShaderObjectContainerType containerType,\n  416      IShaderObject** outObject)\n  ...\n  482  \n  483  Result RendererBase::getShaderObjectLayout(\n  484:     slang::TypeReflection* type,\n  485      ShaderObjectContainerType container,\n  486      ShaderObjectLayoutBase** outLayout)\n  ...\n  511  \n  512  \n  513: ShaderComponentID ShaderCache::getComponentId(slang::TypeReflection* type)\n  514  {\n  515      ComponentKey key;\n  ...\n  517      switch (type->getKind())\n  518      {\n  519:     case slang::TypeReflection::Kind::Specialized:\n  520          {\n  521              auto baseType = type->getElementType();\n  ...\n  533                  if(auto rawArgType = spReflectionType_getSpecializedTypeArgType(rawType, a))\n  534                  {\n  535:                     auto argType = (slang::TypeReflection*) rawArgType;\n  536                      builder.append(argType->getName());\n  537                  }\n  ...\n  615  \n  616  Result ShaderObjectBase::setExistentialHeader(\n  617:     slang::TypeReflection* existentialType,\n  618:     slang::TypeReflection* concreteType,\n  619      ShaderOffset offset)\n  620  {\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/gfx/renderer-shared.h:\n  320  struct ExtendedShaderObjectType\n  321  {\n  322:     slang::TypeReflection* slangType;\n  323      ShaderComponentID componentID;\n  324  };\n  ...\n  394              switch (typeLayout->getKind())\n  395              {\n  396:             case slang::TypeReflection::Kind::Array:\n  397                  SLANG_ASSERT(outContainerType == ShaderObjectContainerType::None);\n  398                  outContainerType = ShaderObjectContainerType::Array;\n  399                  typeLayout = typeLayout->getElementTypeLayout();\n  400                  return typeLayout;\n  401:             case slang::TypeReflection::Kind::Resource:\n  402                  {\n  403                      if (typeLayout->getResourceShape() != SLANG_STRUCTURED_BUFFER)\n  ...\n  415              default:\n  416                  return typeLayout;\n  417:             case slang::TypeReflection::Kind::ConstantBuffer:\n  418:             case slang::TypeReflection::Kind::ParameterBlock:\n  419                  typeLayout = typeLayout->getElementTypeLayout();\n  420                  continue;\n  ...\n  514      /// Sets the RTTI ID and RTTI witness table fields of an existential value.\n  515      Result setExistentialHeader(\n  516:         slang::TypeReflection* existentialType,\n  517:         slang::TypeReflection* concreteType,\n  518          ShaderOffset offset);\n  519  \n  ...\n  662              // we need to make sure to fill in the existential value header (RTTI ID and\n  663              // witness table IDs).\n  664:             if (layout->getElementTypeLayout()->getKind() == slang::TypeReflection::Kind::Interface)\n  665              {\n  666                  auto existentialType = layout->getElementTypeLayout()->getType();\n  ...\n 1145  {\n 1146  public:\n 1147:     ShaderComponentID getComponentId(slang::TypeReflection* type);\n 1148      ShaderComponentID getComponentId(Slang::UnownedStringSlice name);\n 1149      ShaderComponentID getComponentId(ComponentKey key);\n ....\n 1233  \n 1234      virtual SLANG_NO_THROW Result SLANG_MCALL createShaderObject(\n 1235:         slang::TypeReflection* type,\n 1236          ShaderObjectContainerType containerType,\n 1237          IShaderObject** outObject) SLANG_OVERRIDE;\n 1238  \n 1239      virtual SLANG_NO_THROW Result SLANG_MCALL createMutableShaderObject(\n 1240:         slang::TypeReflection* type,\n 1241          ShaderObjectContainerType containerType,\n 1242          IShaderObject** outObject) SLANG_OVERRIDE;\n ....\n 1276  \n 1277      Result getShaderObjectLayout(\n 1278:         slang::TypeReflection*      type,\n 1279          ShaderObjectContainerType   container,\n 1280          ShaderObjectLayoutBase**    outLayout);\n ....\n 1311      ShaderCache shaderCache;\n 1312  \n 1313:     Slang::Dictionary<slang::TypeReflection*, Slang::RefPtr<ShaderObjectLayoutBase>> m_shaderObjectLayoutCache;\n 1314  };\n 1315  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/gfx/d3d11/render-d3d11.cpp:\n 1051          RendererBase* getRenderer() { return m_renderer; }\n 1052  \n 1053:         slang::TypeReflection* getType()\n 1054          {\n 1055              return m_elementTypeLayout->getType();\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/gfx/d3d12/render-d3d12.cpp:\n 1359          RendererBase* getRenderer() { return m_renderer; }\n 1360  \n 1361:         slang::TypeReflection* getType() { return m_elementTypeLayout->getType(); }\n 1362  \n 1363      protected:\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/gfx/open-gl/render-gl.cpp:\n  795          RendererBase* getRenderer() { return m_renderer; }\n  796  \n  797:         slang::TypeReflection* getType()\n  798          {\n  799              return m_elementTypeLayout->getType();\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/gfx/vulkan/render-vk.cpp:\n 1820          VKDevice* getDevice() { return static_cast<VKDevice*>(m_renderer); }\n 1821  \n 1822:         slang::TypeReflection* getType() { return m_elementTypeLayout->getType(); }\n 1823  \n 1824      protected:\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/gfx-unit-test/compute-smoke.cpp:\n   65              auto rootObject = encoder->bindPipeline(pipelineState);\n   66  \n   67:             slang::TypeReflection* addTransformerType =\n   68                  slangReflection->findTypeByName(\"AddTransformer\");\n   69  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/gfx-unit-test/mutable-shader-object.cpp:\n   55  \n   56          {\n   57:             slang::TypeReflection* addTransformerType =\n   58                  slangReflection->findTypeByName(\"AddTransformer\");\n   59  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/gfx-unit-test/root-mutable-shader-object.cpp:\n   59          entryPointCursor.getPath(\"buffer\").setResource(bufferView);\n   60  \n   61:         slang::TypeReflection* addTransformerType =\n   62              slangReflection->findTypeByName(\"AddTransformer\");\n   63          ComPtr<IShaderObject> transformer;\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/gfx-util/shader-cursor.cpp:\n   11          return SLANG_E_INVALID_ARG;\n   12  \n   13:     case slang::TypeReflection::Kind::ConstantBuffer:\n   14:     case slang::TypeReflection::Kind::ParameterBlock:\n   15          {\n   16              auto subObject = m_baseObject->getObject(m_offset);\n   ..\n   35          // The easy/expected case is when the value has a structure type.\n   36          //\n   37:     case slang::TypeReflection::Kind::Struct:\n   38          {\n   39              // We start by looking up the index of a field matching `name`.\n   ..\n  103      // and in these cases we want the access to Just Work.\n  104      //\n  105:     case slang::TypeReflection::Kind::ConstantBuffer:\n  106:     case slang::TypeReflection::Kind::ParameterBlock:\n  107          {\n  108              // We basically need to \"dereference\" the current cursor\n  ...\n  159      switch( m_typeLayout->getKind() )\n  160      {\n  161:     case slang::TypeReflection::Kind::Array:\n  162          {\n  163              ShaderCursor elementCursor;\n  ...\n  174          break;\n  175  \n  176:     case slang::TypeReflection::Kind::Struct:\n  177          {\n  178              // The logic here is similar to `getField()` except that we don't\n  ...\n  197          break;\n  198  \n  199:     case slang::TypeReflection::Kind::Vector:\n  200:     case slang::TypeReflection::Kind::Matrix:\n  201          {\n  202              ShaderCursor fieldCursor;\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/render-test/render-test-main.cpp:\n  187          switch(dataCursor.getTypeLayout()->getKind())\n  188          {\n  189:         case slang::TypeReflection::Kind::ConstantBuffer:\n  190:         case slang::TypeReflection::Kind::ParameterBlock:\n  191              dataCursor = dataCursor.getDereferenced();\n  192              break;\n  ...\n  320      {\n  321          auto typeName = srcVal->typeName;\n  322:         slang::TypeReflection* slangType = nullptr;\n  323          if(typeName.getLength() != 0)\n  324          {\n  ...\n  340                  break;\n  341  \n  342:             case slang::TypeReflection::Kind::ConstantBuffer:\n  343:             case slang::TypeReflection::Kind::ParameterBlock:\n  344                  // If the cursor is pointing at a constant buffer\n  345                  // or parameter block, then we assume the user\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/render-test/shader-input-layout.cpp:\n  937      /* static */SlangResult ShaderInputLayout::writeBinding(slang::TypeLayoutReflection* typeLayout, const void* data, size_t sizeInBytes, WriterHelper writer)\n  938      {\n  939:         typedef slang::TypeReflection::ScalarType ScalarType;\n  940  \n  941:         slang::TypeReflection::ScalarType scalarType = slang::TypeReflection::ScalarType::None;\n  942  \n  943          slang::TypeLayoutReflection* elementTypeLayout = nullptr;\n  ...\n  948              {\n  949                  \n  950:                 //case slang::TypeReflection::Kind::Struct:\n  951:                 case slang::TypeReflection::Kind::Array:\n  952:                 case slang::TypeReflection::Kind::Matrix:\n  953:                 case slang::TypeReflection::Kind::Vector:\n  954                  {\n  955                      elementTypeLayout = typeLayout->getElementTypeLayout();\n  956                      break;\n  957                  }\n  958:                 case slang::TypeReflection::Kind::Scalar:\n  959                  {\n  960                      elementTypeLayout = typeLayout;\n  961                      break;\n  962                  }\n  963:                 case slang::TypeReflection::Kind::Resource:\n  964                  {\n  965                      elementTypeLayout = typeLayout->getElementTypeLayout();\n  966                      break;\n  967                  }   \n  968:                 case slang::TypeReflection::Kind::TextureBuffer:\n  969:                 case slang::TypeReflection::Kind::ShaderStorageBuffer:\n  970                  {\n  971                      elementTypeLayout = typeLayout->getElementTypeLayout();\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/slang-reflection-test/slang-reflection-test-main.cpp:\n  201  static void emitReflectionVarInfoJSON(PrettyWriter& writer, slang::VariableReflection* var);\n  202  static void emitReflectionTypeLayoutJSON(PrettyWriter& writer, slang::TypeLayoutReflection* type);\n  203: static void emitReflectionTypeJSON(PrettyWriter& writer, slang::TypeReflection* type);\n  204  \n  205  static void emitReflectionVarBindingInfoJSON(\n  ...\n  415  }\n  416  \n  417: static void emitUserAttributes(PrettyWriter& writer, slang::TypeReflection* type)\n  418  {\n  419      auto attribCount = type->getUserAttributeCount();\n  ...\n  487          assert(!\"unhandled case\");\n  488          break;\n  489: #define CASE(TAG, ID) case slang::TypeReflection::ScalarType::TAG: write(writer, #ID); break\n  490          CASE(Void, void);\n  491          CASE(Bool, bool);\n  ...\n  510  static void emitReflectionResourceTypeBaseInfoJSON(\n  511      PrettyWriter&           writer,\n  512:     slang::TypeReflection*  type)\n  513  {\n  514      auto shape  = type->getResourceShape();\n  ...\n  578  static void emitReflectionTypeInfoJSON(\n  579      PrettyWriter&           writer,\n  580:     slang::TypeReflection*  type)\n  581  {\n  582      auto kind = type->getKind();\n  583      switch(kind)\n  584      {\n  585:     case slang::TypeReflection::Kind::SamplerState:\n  586          comma(writer);\n  587          write(writer, \"\\\"kind\\\": \\\"samplerState\\\"\");\n  588          break;\n  589  \n  590:     case slang::TypeReflection::Kind::Resource:\n  591          {\n  592              emitReflectionResourceTypeBaseInfoJSON(writer, type);\n  ...\n  616          break;\n  617  \n  618:     case slang::TypeReflection::Kind::ConstantBuffer:\n  619          comma(writer);\n  620          write(writer, \"\\\"kind\\\": \\\"constantBuffer\\\"\");\n  ...\n  626          break;\n  627  \n  628:     case slang::TypeReflection::Kind::ParameterBlock:\n  629          comma(writer);\n  630          write(writer, \"\\\"kind\\\": \\\"parameterBlock\\\"\");\n  ...\n  636          break;\n  637  \n  638:     case slang::TypeReflection::Kind::TextureBuffer:\n  639          comma(writer);\n  640          write(writer, \"\\\"kind\\\": \\\"textureBuffer\\\"\");\n  ...\n  646          break;\n  647  \n  648:     case slang::TypeReflection::Kind::ShaderStorageBuffer:\n  649          comma(writer);\n  650          write(writer, \"\\\"kind\\\": \\\"shaderStorageBuffer\\\"\");\n  ...\n  656          break;\n  657  \n  658:     case slang::TypeReflection::Kind::Scalar:\n  659          comma(writer);\n  660          write(writer, \"\\\"kind\\\": \\\"scalar\\\"\");\n  ...\n  665          break;\n  666  \n  667:     case slang::TypeReflection::Kind::Vector:\n  668          comma(writer);\n  669          write(writer, \"\\\"kind\\\": \\\"vector\\\"\");\n  ...\n  678          break;\n  679  \n  680:     case slang::TypeReflection::Kind::Matrix:\n  681          comma(writer);\n  682          write(writer, \"\\\"kind\\\": \\\"matrix\\\"\");\n  ...\n  694          break;\n  695  \n  696:     case slang::TypeReflection::Kind::Array:\n  697          {\n  698              auto arrayType = type;\n  ...\n  708          break;\n  709  \n  710:     case slang::TypeReflection::Kind::Struct:\n  711          {\n  712              comma(writer);\n  ...\n  730          break;\n  731  \n  732:     case slang::TypeReflection::Kind::GenericTypeParameter:\n  733          comma(writer);\n  734          write(writer, \"\\\"kind\\\": \\\"GenericTypeParameter\\\"\");\n  ...\n  736          emitReflectionNameInfoJSON(writer, type->getName());\n  737          break;\n  738:     case slang::TypeReflection::Kind::Interface:\n  739          comma(writer);\n  740          write(writer, \"\\\"kind\\\": \\\"Interface\\\"\");\n  ...\n  742          emitReflectionNameInfoJSON(writer, type->getName());\n  743          break;\n  744:     case slang::TypeReflection::Kind::Feedback:\n  745          comma(writer);\n  746          write(writer, \"\\\"kind\\\": \\\"Feedback\\\"\");\n  ...\n  826          break;\n  827  \n  828:     case slang::TypeReflection::Kind::Array:\n  829          {\n  830              auto arrayTypeLayout = typeLayout;\n  ...\n  852          break;\n  853  \n  854:     case slang::TypeReflection::Kind::Struct:\n  855          {\n  856              auto structTypeLayout = typeLayout;\n  ...\n  882          break;\n  883  \n  884:     case slang::TypeReflection::Kind::ConstantBuffer:\n  885          emitReflectionParameterGroupTypeLayoutInfoJSON(writer, typeLayout, \"constantBuffer\");\n  886          break;\n  887  \n  888:     case slang::TypeReflection::Kind::ParameterBlock:\n  889          emitReflectionParameterGroupTypeLayoutInfoJSON(writer, typeLayout, \"parameterBlock\");\n  890          break;\n  891  \n  892:     case slang::TypeReflection::Kind::TextureBuffer:\n  893          emitReflectionParameterGroupTypeLayoutInfoJSON(writer, typeLayout, \"textureBuffer\");\n  894          break;\n  895  \n  896:     case slang::TypeReflection::Kind::ShaderStorageBuffer:\n  897          comma(writer);\n  898          write(writer, \"\\\"kind\\\": \\\"shaderStorageBuffer\\\"\");\n  ...\n  904              typeLayout->getElementTypeLayout());\n  905          break;\n  906:     case slang::TypeReflection::Kind::GenericTypeParameter:\n  907          comma(writer);\n  908          write(writer, \"\\\"kind\\\": \\\"GenericTypeParameter\\\"\");\n  ...\n  911          emitReflectionNameInfoJSON(writer, typeLayout->getName());\n  912          break;\n  913:     case slang::TypeReflection::Kind::Interface:\n  914          comma(writer);\n  915          write(writer, \"\\\"kind\\\": \\\"Interface\\\"\");\n  ...\n  919          break;\n  920  \n  921:     case slang::TypeReflection::Kind::Resource:\n  922          {\n  923              // Some resource types (notably structured buffers)\n  ...\n  978  static void emitReflectionTypeJSON(\n  979      PrettyWriter&           writer,\n  980:     slang::TypeReflection*  type)\n  981  {\n  982      CommaTrackerRAII commaTracker(writer);\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tools/slang-test/slang-test-main.cpp:\n 2460  static SlangResult _compareWithType(const UnownedStringSlice& actual, const UnownedStringSlice& ref, double differenceThreshold = 0.0001)\n 2461  {\n 2462:     typedef slang::TypeReflection::ScalarType ScalarType;\n 2463  \n 2464      ScalarType scalarType = ScalarType::None;\n\n199 matches across 25 files\n\n\nSearching 1620 files for \"DescriptorSet::Type::AccelerationStructureSrv\" (case sensitive)\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan/VKResourceViews.cpp:\n  252  \n  253      DescriptorSet::Layout layout;\n  254:     layout.addRange(DescriptorSet::Type::AccelerationStructureSrv, 0, 1);\n  255      ShaderResourceView::ApiHandle handle = DescriptorSet::create(pDevice->getCpuDescriptorPool(), layout);\n  256      pDevice->getApiHandle()->CreateShaderResourceView(nullptr, &srvDesc, handle->getCpuHandle(0));\n  ...\n  260  \n  261      DescriptorSet::Layout layout;\n  262:     layout.addRange(DescriptorSet::Type::AccelerationStructureSrv, 0, 1);\n  263      ShaderResourceView::ApiHandle handle;// = DescriptorSet::create(pDevice, pDevice->getCpuDescriptorPool(), layout);\n  264  \n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Core/BufferTypes/ParameterBlock.cpp:\n  153      DescriptorSet::Type::TypedBufferSrv,\n  154      DescriptorSet::Type::StructuredBufferSrv,\n  155:     DescriptorSet::Type::AccelerationStructureSrv,\n  156  };\n  157  \n  ...\n  167      DescriptorSet::Type::TypedBufferSrv,\n  168      DescriptorSet::Type::StructuredBufferSrv,\n  169:     DescriptorSet::Type::AccelerationStructureSrv,\n  170  };\n  171  \n  ...\n  274              case DescriptorSet::Type::TypedBufferSrv:\n  275              case DescriptorSet::Type::StructuredBufferSrv:\n  276:             case DescriptorSet::Type::AccelerationStructureSrv:\n  277                  state.srvCount += range.count;\n  278                  break;\n  ...\n 1285                          }\n 1286                          break;\n 1287:                     case DescriptorSet::Type::AccelerationStructureSrv:\n 1288                          {\n 1289:                             printf(\"!!!!!!!!!!!! DescriptorSet::Type::AccelerationStructureSrv\\n\");\n 1290                              pDescSet->setAS(destRangeIndex, descriptorIndex, mAccel);\n 1291                          }\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Core/Program/ProgramReflection.cpp:\n 1304              case DescriptorSet::Type::TypedBufferSrv:\n 1305              case DescriptorSet::Type::StructuredBufferSrv:\n 1306:             case DescriptorSet::Type::AccelerationStructureSrv:\n 1307                  fieldRange.baseIndex = ioBuildState.srvCount;\n 1308                  ioBuildState.srvCount += fieldRange.count;\n ....\n 1528          case ReflectionResourceType::Type::AccelerationStructure:\n 1529              assert(shaderAccess == ReflectionResourceType::ShaderAccess::Read);\n 1530:             return DescriptorSet::Type::AccelerationStructureSrv;\n 1531              break;\n 1532          case ReflectionResourceType::Type::Sampler:\n\n9 matches across 3 files\n\n\nSearching 1620 files for \"DescriptorSet::Type::AccelerationStructureSrv\" (case sensitive)\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan/VKResourceViews.cpp:\n  252  \n  253      DescriptorSet::Layout layout;\n  254:     layout.addRange(DescriptorSet::Type::AccelerationStructureSrv, 0, 1);\n  255      ShaderResourceView::ApiHandle handle = DescriptorSet::create(pDevice->getCpuDescriptorPool(), layout);\n  256      pDevice->getApiHandle()->CreateShaderResourceView(nullptr, &srvDesc, handle->getCpuHandle(0));\n  ...\n  260  \n  261      DescriptorSet::Layout layout;\n  262:     layout.addRange(DescriptorSet::Type::AccelerationStructureSrv, 0, 1);\n  263      ShaderResourceView::ApiHandle handle;// = DescriptorSet::create(pDevice, pDevice->getCpuDescriptorPool(), layout);\n  264  \n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Core/BufferTypes/ParameterBlock.cpp:\n  153      DescriptorSet::Type::TypedBufferSrv,\n  154      DescriptorSet::Type::StructuredBufferSrv,\n  155:     DescriptorSet::Type::AccelerationStructureSrv,\n  156  };\n  157  \n  ...\n  167      DescriptorSet::Type::TypedBufferSrv,\n  168      DescriptorSet::Type::StructuredBufferSrv,\n  169:     DescriptorSet::Type::AccelerationStructureSrv,\n  170  };\n  171  \n  ...\n  274              case DescriptorSet::Type::TypedBufferSrv:\n  275              case DescriptorSet::Type::StructuredBufferSrv:\n  276:             case DescriptorSet::Type::AccelerationStructureSrv:\n  277                  state.srvCount += range.count;\n  278                  break;\n  ...\n 1285                          }\n 1286                          break;\n 1287:                     case DescriptorSet::Type::AccelerationStructureSrv:\n 1288                          {\n 1289:                             printf(\"!!!!!!!!!!!! DescriptorSet::Type::AccelerationStructureSrv\\n\");\n 1290                              pDescSet->setAS(destRangeIndex, descriptorIndex, mAccel);\n 1291                          }\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Core/Program/ProgramReflection.cpp:\n 1304              case DescriptorSet::Type::TypedBufferSrv:\n 1305              case DescriptorSet::Type::StructuredBufferSrv:\n 1306:             case DescriptorSet::Type::AccelerationStructureSrv:\n 1307                  fieldRange.baseIndex = ioBuildState.srvCount;\n 1308                  ioBuildState.srvCount += fieldRange.count;\n ....\n 1528          case ReflectionResourceType::Type::AccelerationStructure:\n 1529              assert(shaderAccess == ReflectionResourceType::ShaderAccess::Read);\n 1530:             return DescriptorSet::Type::AccelerationStructureSrv;\n 1531              break;\n 1532          case ReflectionResourceType::Type::Sampler:\n\n9 matches across 3 files\n\n\nSearching 2 files for \"prepareDescriptorSets\" (case sensitive)\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Core/BufferTypes/ParameterBlock.cpp:\n 1507  \n 1508                      case ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::ParameterBlock:\n 1509:                         if (!pSubBlock->prepareDescriptorSets(pContext, pSubObjectReflector)) {\n 1510                              return false;\n 1511                          }\n ....\n 1527      }\n 1528  \n 1529:     bool ParameterBlock::prepareDescriptorSets(CopyContext* pContext) {\n 1530          // Note: allocating and filling in descriptor sets will always\n 1531          // use the specialized reflector, which is based on how the\n ....\n 1536          auto pReflector = mpSpecializedReflector.get();\n 1537  \n 1538:         return prepareDescriptorSets(pContext, pReflector);\n 1539      }\n 1540  \n 1541:     bool ParameterBlock::prepareDescriptorSets(CopyContext* pContext, const ParameterBlockReflection* pReflector) {\n 1542:         //LOG_DBG(\"prepareDescriptorSets\");\n 1543          \n 1544          // We first need to check for \"indirect\" changes, where a write to\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Core/BufferTypes/ParameterBlock.h:\n  313      ParameterBlockReflection::SharedConstPtr getSpecializedReflector() const { return mpSpecializedReflector; }\n  314  \n  315:     bool prepareDescriptorSets(CopyContext* pCopyContext);\n  316  \n  317      uint32_t getDescriptorSetCount() const { return mpReflector->getDescriptorSetCount(); }\n  ...\n  371          size_t                          bufferSize);\n  372  \n  373:     bool prepareDescriptorSets(\n  374          CopyContext*                    pCopyContext,\n  375          const ParameterBlockReflection* pReflector);\n\n7 matches across 2 files\n\n\nSearching 108 files for \"RayData\" (case sensitive)\n\n0 matches\n\nSearching 1620 files for \"RayData\" (case sensitive)\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/RenderPasses/Shared/PathTracer/InteriorListHelpers.slang:\n   32      Note: This is currently limited to handling a maximum of 1 false intersection.\n   33  */\n   34: struct NestedRayData\n   35  {\n   36      uint topNestedPriority;     ///< Current top nested priority on interior list.\n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/ForwardLightingPass/ForwardLightingPass.slang:\n   86  /** Payload for shadow ray.\n   87  */\n   88: struct ShadowRayData\n   89  {\n   90      bool visible;\n   ..\n  105      ray.TMax = distance;\n  106  \n  107:     ShadowRayData rayData;\n  108      rayData.visible = false;    // Set to true by miss shader if ray is not terminated before\n  109      TraceRay(gScene.rtAccel, RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH, 0xff /* instanceInclusionMask */, 1 /* hitIdx */, rayTypeCount, 1 /* missIdx */, ray, rayData);\n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/GBuffer/GBufferRT.rt.slang:\n   58      We write the G-buffer from the hit shader, so this struct is very lightweight.\n   59  */\n   60: struct RayData\n   61  {\n   62      int dummy; // TODO: Passing in an empty payload struct doesn't work. Declare a dummy variable so that the compiler doesn't remove the declaration.\n   ..\n   64  \n   65  [shader(\"miss\")]\n   66: void miss(inout RayData rayData)\n   67  {\n   68      uint2 launchIndex = DispatchRaysIndex().xy;\n   ..\n   73  void anyHit(\n   74      uniform HitShaderParams hitParams,\n   75:     inout RayData rayData : SV_RayPayload, BuiltInTriangleIntersectionAttributes attribs : SV_IntersectionAttributes)\n   76  {\n   77  #if !DISABLE_ALPHA_TEST\n   ..\n  138  void closestHit(\n  139      uniform HitShaderParams hitParams,\n  140:     inout RayData rayData,\n  141      BuiltInTriangleIntersectionAttributes attribs)\n  142  {\n  ...\n  219  \n  220      // Trace ray\n  221:     RayData rayData;\n  222      TraceRay(gRtScene, gParams.rayFlags, 0xff /* instanceInclusionMask */, 0 /* hitIdx */, hitProgramCount, 0 /* missIdx */, ray, rayData);\n  223  \n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/VBuffer/VBufferRT.rt.slang:\n   43  /** ***************************** Ray index 0 ****************************** */\n   44  \n   45: struct RayData\n   46  {\n   47      int dummy; // TODO: Passing in an empty payload struct doesn't work. Declare a dummy variable so that the compiler doesn't remove the declaration.\n   ..\n   49  \n   50  [shader(\"miss\")]\n   51: void miss(inout RayData rayData)\n   52  {\n   53      // Write invalid hit to output buffer.\n   ..\n   59  void anyHit(\n   60      uniform HitShaderParams hitParams,\n   61:     inout RayData rayData : SV_RayPayload,\n   62      BuiltInTriangleIntersectionAttributes attribs : SV_IntersectionAttributes)\n   63  {\n   ..\n   73  void closestHit(\n   74      uniform HitShaderParams hitParams,\n   75:     inout RayData rayData,\n   76      BuiltInTriangleIntersectionAttributes attribs)\n   77  {\n   ..\n  109  \n  110      // Trace ray\n  111:     RayData rayData;\n  112      TraceRay(gRtScene, RAY_FLAG_NONE, 0xff /* instanceInclusionMask */, 0 /* hitIdx */, hitProgramCount, 0 /* missIdx */, ray, rayData);\n  113  \n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/MegakernelPathTracer/PathTracer.rt.slang:\n   53  \n   54  [shader(\"miss\")]\n   55: void scatterMiss(inout ScatterRayData rayData : SV_RayPayload)\n   56  {\n   57  }\n   ..\n   60  void scatterAnyHit(\n   61      uniform HitShaderParams hitParams,\n   62:     inout ScatterRayData rayData : SV_RayPayload, BuiltInTriangleIntersectionAttributes attribs : SV_IntersectionAttributes)\n   63  {\n   64      // Alpha test for non-opaque geometry.\n   ..\n   75  void scatterClosestHit(\n   76      uniform HitShaderParams hitParams,\n   77:     inout ScatterRayData rayData : SV_RayPayload, BuiltInTriangleIntersectionAttributes attribs : SV_IntersectionAttributes)\n   78  {\n   79      // Store hit information. Note we don't access the materials here.\n   ..\n   92  \n   93  [shader(\"miss\")]\n   94: void shadowMiss(inout ShadowRayData rayData : SV_RayPayload)\n   95  {\n   96      // The miss shader is executed if the ray misses all geometry. Mark as visible.\n   ..\n  101  void shadowAnyHit(\n  102      uniform HitShaderParams hitParams,\n  103:     inout ShadowRayData rayData : SV_RayPayload, BuiltInTriangleIntersectionAttributes attribs : SV_IntersectionAttributes)\n  104  {\n  105      // Alpha test for non-opaque geometry.\n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/MegakernelPathTracer/PathTracer.slang:\n   57  /** Payload for shadow ray.\n   58  */\n   59: struct ShadowRayData\n   60  {\n   61      bool visible;\n   ..\n   64  /** Payload for scatter ray.\n   65  */\n   66: struct ScatterRayData\n   67  {\n   68      uint2 packedHitInfo;        ///< Packed HitInfo data, or kInvalidIndex in the first component if ray missed.\n   69  #if USE_NESTED_DIELECTRICS\n   70:     NestedRayData nestedData;\n   71  #endif\n   72  };\n   ..\n   88      ray.TMax = valid ? distance : 0.f; // Set tmax = 0.0 for dummy rays.\n   89  \n   90:     ShadowRayData rayData = { false }; // Set to true by miss shader if ray is not terminated before\n   91      uint rayFlags = RAY_FLAG_SKIP_CLOSEST_HIT_SHADER | RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH;\n   92      TraceRay(gRtScene, rayFlags, 0xff /* instanceInclusionMask */, kRayTypeShadow /* hitIdx */, hitProgramCount, kRayTypeShadow /* missIdx */, ray, rayData);\n   ..\n  118      ray.TMax = kRayTMax;\n  119  \n  120:     ScatterRayData rayData;\n  121      rayData.packedHitInfo = { kInvalidIndex }; // Set the first component to kInvalidIndex\n  122  #if USE_NESTED_DIELECTRICS\n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/MinimalPathTracer/MinimalPathTracer.rt.slang:\n  101  /** Payload for shadow ray.\n  102  */\n  103: struct ShadowRayData\n  104  {\n  105      bool visible;\n  ...\n  108  /** Payload for scatter ray (80B).\n  109  */\n  110: struct ScatterRayData\n  111  {\n  112      float3  radiance;       ///< Accumulated outgoing radiance from path.\n  ...\n  123      /** Create ray payload with default parameters.\n  124      */\n  125:     static ScatterRayData create(SampleGenerator sg)\n  126      {\n  127:         ScatterRayData d;\n  128          d.terminated = false;\n  129          d.pathLength = 0;\n  ...\n  182      ray.TMax = distance;\n  183  \n  184:     ShadowRayData rayData;\n  185      rayData.visible = false;    // Set to true by miss shader if ray is not terminated before\n  186      TraceRay(gScene.rtAccel, RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH, 0xff /* instanceInclusionMask */, 1 /* hitIdx */, rayTypeCount, 1 /* missIdx */, ray, rayData);\n  ...\n  192      \\param[in] rayData Describes the ray parameters. The struct is modified based on the result.\n  193  */\n  194: void traceScatterRay(inout ScatterRayData rayData)\n  195  {\n  196      RayDesc ray;\n  ...\n  239      \\return True if the path continues.\n  240  */\n  241: bool generateScatterRay(const ShadingData sd, float3 rayOrigin, inout ScatterRayData rayData)\n  242  {\n  243      // Generate scatter ray as cosine-weighted direction over the hemisphere.\n  ...\n  256  \n  257  [shader(\"miss\")]\n  258: void scatterMiss(inout ScatterRayData rayData : SV_RayPayload)\n  259  {\n  260      // Ray missed the scene. Mark the ray as terminated.\n  ...\n  270  \n  271  [shader(\"anyhit\")]\n  272: void scatterAnyHit(inout ScatterRayData rayData : SV_RayPayload, BuiltInTriangleIntersectionAttributes attribs : SV_IntersectionAttributes)\n  273  {\n  274      // Alpha test for non-opaque geometry.\n  ...\n  280  \n  281  [shader(\"closesthit\")]\n  282: void scatterClosestHit(inout ScatterRayData rayData : SV_RayPayload, BuiltInTriangleIntersectionAttributes attribs : SV_IntersectionAttributes)\n  283  {\n  284      // Evaluate Falcor's material parameters at the hit point.\n  ...\n  326  \n  327  [shader(\"miss\")]\n  328: void shadowMiss(inout ShadowRayData rayData : SV_RayPayload)\n  329  {\n  330      // The miss shader is executed if the ray misses all geometry. Mark as visible.\n  ...\n  333  \n  334  [shader(\"anyhit\")]\n  335: void shadowAnyHit(inout ShadowRayData rayData : SV_RayPayload, BuiltInTriangleIntersectionAttributes attribs : SV_IntersectionAttributes)\n  336  {\n  337      // Alpha test for non-opaque geometry.\n  ...\n  403  \n  404          // Prepare ray payload.\n  405:         ScatterRayData rayData = ScatterRayData.create(sg);\n  406  \n  407          // Generate scatter ray.\n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/WhittedRayTracer/WhittedRayTracer.rt.slang:\n  107  /** Payload for shadow ray.\n  108  */\n  109: struct ShadowRayData\n  110  {\n  111      bool visible;\n  ...\n  122  /** Payload for scatter ray (128B when ray cones are used, 164B when ray diffs are used).\n  123  */\n  124: struct ScatterRayData\n  125  {\n  126      float3  radiance;                   ///< Accumulated outgoing radiance from path.\n  ...\n  139      /** Create ray payload with default parameters.\n  140      */\n  141:     static ScatterRayData create(SampleGenerator sg)\n  142      {\n  143:         ScatterRayData d;\n  144          d.terminated = false;\n  145          d.hasHitRefractiveMaterial = false;\n  ...\n  184      ray.TMax = distance;\n  185  \n  186:     ShadowRayData rayData;\n  187      rayData.visible = false;    // Set to true by miss shader if ray is not terminated before.\n  188      TraceRay(gScene.rtAccel, RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH, 0xff /* instanceInclusionMask */, 1 /* hitIdx */, rayTypeCount, 1 /* missIdx */, ray, rayData);\n  ...\n  194      \\param[in] rayData Describes the ray parameters. The struct is modified based on the result.\n  195  */\n  196: void traceScatterRay(inout ScatterRayData rayData)\n  197  {\n  198      RayDesc ray;\n  ...\n  244      \\param[in] rayData Ray payload.\n  245  */\n  246: void generateReflectionRay(const ShadingData sd, const float3 rayOrigin, const float3 rayDir, const float3 normal, bool tir, inout ScatterRayData rayData)\n  247  {\n  248      float3 wi = reflect(rayDir, normal);\n  ...\n  258  /*********************** Ray index 0: Scatter ray ************************ */\n  259  [shader(\"miss\")]\n  260: void scatterMiss(inout ScatterRayData rayData : SV_RayPayload)\n  261  {\n  262      // Ray missed the scene. Mark the ray as terminated.\n  ...\n  282  \n  283  [shader(\"anyhit\")]\n  284: void scatterAnyHit(inout ScatterRayData rayData : SV_RayPayload, BuiltInTriangleIntersectionAttributes attribs : SV_IntersectionAttributes)\n  285  {\n  286      // Alpha test for non-opaque geometry.\n  ...\n  292  \n  293  [shader(\"closesthit\")]\n  294: void scatterClosestHit(inout ScatterRayData rayData : SV_RayPayload, BuiltInTriangleIntersectionAttributes attribs : SV_IntersectionAttributes)\n  295  {\n  296      // Evaluate Falcor's material parameters at the hit point.\n  ...\n  474  \n  475  [shader(\"miss\")]\n  476: void shadowMiss(inout ShadowRayData rayData : SV_RayPayload)\n  477  {\n  478      // The miss shader is executed if the ray misses all geometry. Mark as visible.\n  ...\n  481  \n  482  [shader(\"anyhit\")]\n  483: void shadowAnyHit(inout ShadowRayData rayData : SV_RayPayload, BuiltInTriangleIntersectionAttributes attribs : SV_IntersectionAttributes)\n  484  {\n  485      // Alpha test for non-opaque geometry.\n  ...\n  547  \n  548          // Prepare ray payload.\n  549:         ScatterRayData rayData = ScatterRayData.create(sg);\n  550  \n  551          float3 refractedRayDir = float3(0.0f);\n\n/mnt/misc_hdd/dev/Lava/src/Samples/HelloDXR/HelloDXR.rt.slang:\n   38  };\n   39  \n   40: struct PrimaryRayData\n   41  {\n   42      float4 color;\n   ..\n   45  };\n   46  \n   47: struct ShadowRayData\n   48  {\n   49      bool hit;\n   ..\n   51  \n   52  [shader(\"miss\")]\n   53: void shadowMiss(inout ShadowRayData hitData)\n   54  {\n   55      hitData.hit = false;\n   ..\n   57  \n   58  [shader(\"anyhit\")]\n   59: void shadowAnyHit(inout ShadowRayData hitData, in BuiltInTriangleIntersectionAttributes attribs)\n   60  {\n   61      hitData.hit = true;\n   ..\n   63  \n   64  [shader(\"miss\")]\n   65: void primaryMiss(inout PrimaryRayData hitData)\n   66  {\n   67      hitData.color = float4(0.38f, 0.52f, 0.10f, 1);\n   ..\n   78      ray.TMax = max(0.01, length(direction));\n   79  \n   80:     ShadowRayData rayData;\n   81      rayData.hit = true;\n   82      TraceRay(gRtScene, RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH, 0xFF, 1 /* ray index */, hitProgramCount, 1, ray, rayData);\n   ..\n   89      if (hitDepth == 0)\n   90      {\n   91:         PrimaryRayData secondaryRay;\n   92          secondaryRay.depth.r = 1;\n   93          RayDesc ray;\n   ..\n  107  void primaryClosestHit(\n  108      uniform HitShaderParams hitParams,\n  109:     inout PrimaryRayData hitData, in BuiltInTriangleIntersectionAttributes attribs)\n  110  {\n  111      // Get the hit-point data\n  ...\n  146  void primaryAnyHit(\n  147      uniform HitShaderParams                 hitParams,\n  148:     inout PrimaryRayData                    rayData,\n  149      BuiltInTriangleIntersectionAttributes   attribs)\n  150  {\n  ...\n  176      }\n  177  \n  178:     PrimaryRayData hitData;\n  179      hitData.depth = 0;\n  180      TraceRay(gRtScene, 0 /*rayFlags*/, 0xFF, 0 /* ray index*/, hitProgramCount, 0, ray, hitData);\n\n61 matches across 9 files\n\n\nSearching 1620 files for \"RayDesc\" (case sensitive)\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/NullTrace.cs.slang:\n   34  void main(uint3 dispatchThreadId : SV_DispatchThreadID)\n   35  {\n   36:     RayDesc ray;\n   37      ray.Origin = float3(0, 0, 0);\n   38      ray.Direction = float3(1, 0, 0);\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Raytracing.slang:\n   50      uint rayType,\n   51      uint missIndex,\n   52:     RayDesc ray,\n   53      inout payload_t payload)\n   54  {\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/RaytracingInline.slang:\n   83  \n   84  // TODO: Pass UseAlphaTest as a template argument.\n   85: bool traceSceneRayImpl<let Flags : int>(const bool useAlphaTest, RayQuery<Flags> rayQuery, const RayDesc ray, out HitInfo hit, out float hitT, uint rayFlags, uint instanceInclusionMask)\n   86  {\n   87      rayQuery.TraceRayInline(gScene.rtAccel, rayFlags, instanceInclusionMask, ray);\n   ..\n  197  }\n  198  \n  199: bool traceSceneRay<let UseAlphaTest : int>(const RayDesc ray, out HitInfo hit, out float hitT, uint rayFlags, uint instanceInclusionMask)\n  200  {\n  201      // TODO: Use a constant expression to derive static ray flags.\n  ...\n  221  }\n  222  \n  223: bool traceSceneVisibilityRayImpl<let Flags : int>(const bool useAlphaTest, RayQuery<Flags> rayQuery, const RayDesc ray, uint rayFlags, uint instanceInclusionMask)\n  224  {\n  225      rayQuery.TraceRayInline(gScene.rtAccel, rayFlags, instanceInclusionMask, ray);\n  ...\n  283  }\n  284  \n  285: bool traceSceneVisibilityRay<let UseAlphaTest : int>(const RayDesc ray, uint rayFlags, uint instanceInclusionMask)\n  286  {\n  287      // TODO: Use a constant expression to derive static ray flags.\n  ...\n  311  struct SceneRayQuery<let UseAlphaTest : int> : ISceneRayQuery\n  312  {\n  313:     bool traceRay(const RayDesc ray, out HitInfo hit, out float hitT, uint rayFlags, uint instanceInclusionMask)\n  314      {\n  315          return traceSceneRay<UseAlphaTest>(ray, hit, hitT, rayFlags, instanceInclusionMask);\n  316      }\n  317  \n  318:     bool traceVisibilityRay(const RayDesc ray, uint rayFlags, uint instanceInclusionMask)\n  319      {\n  320          return traceSceneVisibilityRay<UseAlphaTest>(ray, rayFlags, instanceInclusionMask);\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/SceneRayQueryInterface.slang:\n   83  \n   84  // TODO: Pass UseAlphaTest as a template argument.\n   85: bool traceSceneRayImpl<let Flags : int>(const bool useAlphaTest, RayQuery<Flags> rayQuery, const RayDesc ray, out HitInfo hit, out float hitT, uint rayFlags, uint instanceInclusionMask)\n   86  {\n   87      rayQuery.TraceRayInline(gScene.rtAccel, rayFlags, instanceInclusionMask, ray);\n   ..\n  197  }\n  198  \n  199: bool traceSceneRay<let UseAlphaTest : int>(const RayDesc ray, out HitInfo hit, out float hitT, uint rayFlags, uint instanceInclusionMask)\n  200  {\n  201      // TODO: Use a constant expression to derive static ray flags.\n  ...\n  221  }\n  222  \n  223: bool traceSceneVisibilityRayImpl<let Flags : int>(const bool useAlphaTest, RayQuery<Flags> rayQuery, const RayDesc ray, uint rayFlags, uint instanceInclusionMask)\n  224  {\n  225      rayQuery.TraceRayInline(gScene.rtAccel, rayFlags, instanceInclusionMask, ray);\n  ...\n  283  }\n  284  \n  285: bool traceSceneVisibilityRay<let UseAlphaTest : int>(const RayDesc ray, uint rayFlags, uint instanceInclusionMask)\n  286  {\n  287      // TODO: Use a constant expression to derive static ray flags.\n  ...\n  311  struct SceneRayQuery<let UseAlphaTest : int> : ISceneRayQuery\n  312  {\n  313:     bool traceRay(const RayDesc ray, out HitInfo hit, out float hitT, uint rayFlags, uint instanceInclusionMask)\n  314      {\n  315          return traceSceneRay<UseAlphaTest>(ray, hit, hitT, rayFlags, instanceInclusionMask);\n  316      }\n  317  \n  318:     bool traceVisibilityRay(const RayDesc ray, uint rayFlags, uint instanceInclusionMask)\n  319      {\n  320          return traceSceneVisibilityRay<UseAlphaTest>(ray, rayFlags, instanceInclusionMask);\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Camera/Camera.slang:\n   36      float tMax;\n   37  \n   38:     RayDesc toRayDesc()\n   39      {\n   40          return { origin, tMin, dir, tMax };\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Math/Ray.slang:\n   29  \n   30  /** Ray type.\n   31:     This has equal layout to DXR RayDesc but adds additional functionality.\n   32  */\n   33  struct Ray\n   ..\n   48      }\n   49  \n   50:     /** Convert to DXR RayDesc.\n   51      */\n   52:     RayDesc toRayDesc()\n   53      {\n   54          return { origin, tMin, dir, tMax };\n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/ForwardLightingPass/ForwardLightingPass.slang:\n   99  bool traceShadowRay(float3 origin, float3 dir, float distance)\n  100  {\n  101:     RayDesc ray;\n  102      ray.Origin = origin;\n  103      ray.Direction = dir;\n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/GBuffer/GBufferRT.rt.slang:\n  213  #if USE_DEPTH_OF_FIELD\n  214      SampleGenerator sg = SampleGenerator.create(launchIndex, gParams.frameCount);\n  215:     RayDesc ray = gScene.camera.computeRayThinlens(launchIndex, launchDim, sampleNext2D(sg)).toRayDesc();\n  216  #else\n  217:     RayDesc ray = gScene.camera.computeRayPinhole(launchIndex, launchDim).toRayDesc();\n  218  #endif\n  219  \n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/VBuffer/VBufferRT.rt.slang:\n  103  #if USE_DEPTH_OF_FIELD\n  104      SampleGenerator sg = SampleGenerator.create(launchIndex, frameCount);\n  105:     RayDesc ray = gScene.camera.computeRayThinlens(launchIndex, launchDim, sampleNext2D(sg)).toRayDesc();\n  106  #else\n  107:     RayDesc ray = gScene.camera.computeRayPinhole(launchIndex, launchDim).toRayDesc();\n  108  #endif\n  109  \n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/MegakernelPathTracer/PathTracer.slang:\n   82  {\n   83      // Setup ray descriptor.\n   84:     RayDesc ray;\n   85      ray.Origin = origin;\n   86      ray.Direction = dir;\n   ..\n  112  {\n  113      // Setup ray based on params passed via payload.\n  114:     RayDesc ray;\n  115      ray.Origin = origin;\n  116      ray.Direction = dir;\n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/MinimalPathTracer/MinimalPathTracer.rt.slang:\n  176  bool traceShadowRay(float3 origin, float3 dir, float distance)\n  177  {\n  178:     RayDesc ray;\n  179      ray.Origin = origin;\n  180      ray.Direction = dir;\n  ...\n  194  void traceScatterRay(inout ScatterRayData rayData)\n  195  {\n  196:     RayDesc ray;\n  197      ray.Origin = rayData.origin;\n  198      ray.Direction = rayData.direction;\n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/WhittedRayTracer/WhittedRayTracer.rt.slang:\n  178  bool traceShadowRay(float3 origin, float3 dir, float distance)\n  179  {\n  180:     RayDesc ray;\n  181      ray.Origin = origin;\n  182      ray.Direction = dir;\n  ...\n  196  void traceScatterRay(inout ScatterRayData rayData)\n  197  {\n  198:     RayDesc ray;\n  199      ray.Origin = rayData.origin;\n  200      ray.Direction = rayData.direction;\n\n/mnt/misc_hdd/dev/Lava/src/Samples/HelloDXR/HelloDXR.rt.slang:\n   72  {\n   73      float3 direction = gScene.lights[lightIndex].posW - origin;\n   74:     RayDesc ray;\n   75      ray.Origin = origin;\n   76      ray.Direction = normalize(direction);\n   ..\n   91          PrimaryRayData secondaryRay;\n   92          secondaryRay.depth.r = 1;\n   93:         RayDesc ray;\n   94          ray.Origin = worldOrigin;\n   95          ray.Direction = reflect(worldRayDir, v.normalW);\n   ..\n  165      uint randSeed = rand_init(launchIndex.x + launchIndex.y * viewportDims.x, sampleIndex, 16);\n  166  \n  167:     RayDesc ray;\n  168      if (!useDOF)\n  169      {\n  170:         ray = gScene.camera.computeRayPinhole(launchIndex.xy, viewportDims).toRayDesc();\n  171      }\n  172      else\n  173      {\n  174          float2 u = float2(rand_next(randSeed), rand_next(randSeed));\n  175:         ray = gScene.camera.computeRayThinlens(launchIndex.xy, viewportDims, u).toRayDesc();\n  176      }\n  177  \n\n/mnt/misc_hdd/dev/Lava/src/Tools/FalcorTest/Tests/Slang/TraceRayInline.cs.slang:\n   45  \n   46      // Set up a trace. No work is done yet.\n   47:     RayDesc ray;\n   48      ray.Origin = float3(0, 0, 0);\n   49      ray.Direction = float3(1, 0, 0);\n\n41 matches across 14 files\n\n\nSearching 1620 files for \"rayTypeCount\" (case sensitive)\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Raytracing/RtBindingTable.cpp:\n   39      }\n   40  \n   41:     RtBindingTable::SharedPtr RtBindingTable::create(uint32_t missCount, uint32_t rayTypeCount, uint32_t geometryCount)\n   42      {\n   43:         return SharedPtr(new RtBindingTable(missCount, rayTypeCount, geometryCount));\n   44      }\n   45  \n   46:     RtBindingTable::RtBindingTable(uint32_t missCount, uint32_t rayTypeCount, uint32_t geometryCount)\n   47          : mMissCount(missCount)\n   48:         , mRayTypeCount(rayTypeCount)\n   49          , mGeometryCount(geometryCount)\n   50      {\n   ..\n   53              throw std::runtime_error(\"'missCount' exceeds the maximum supported (\" + std::to_string(kMaxMissCount) + \")\");\n   54          }\n   55:         if (rayTypeCount > kMaxRayTypeCount)\n   56          {\n   57:             throw std::runtime_error(\"'rayTypeCount' exceeds the maximum supported (\" + std::to_string(kMaxRayTypeCount) + \")\");\n   58          }\n   59  \n   60:         size_t recordCount = 1ull + missCount + rayTypeCount * geometryCount;\n   61          if (recordCount > std::numeric_limits<uint32_t>::max())\n   62          {\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Raytracing/RtBindingTable.h:\n   48          /** Create a new binding table.\n   49              \\param[in] missCount Number of miss shaders.\n   50:             \\param[in] rayTypeCount Number of ray types.\n   51              \\param[in] geometryCount Number of geometries.\n   52              \\return A new object, or throws an exception on error.\n   53          */\n   54:         static SharedPtr create(uint32_t missCount, uint32_t rayTypeCount, uint32_t geometryCount);\n   55  \n   56          /** Set the raygen shader ID.\n   ..\n  107          RtBindingTable& operator=(const RtBindingTable&) = delete;\n  108  \n  109:         RtBindingTable(uint32_t missCount, uint32_t rayTypeCount, uint32_t geometryCount);\n  110  \n  111          uint32_t getMissOffset(uint32_t missIndex) const\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Raytracing.slang:\n   34  cbuffer DxrPerFrame\n   35  {\n   36:     uint rayTypeCount;\n   37  };\n   38  \n   ..\n   53      inout payload_t payload)\n   54  {\n   55:     TraceRay(gScene.rtAccel, rayFlags, instanceInclusionMask, rayType, rayTypeCount, missIndex, ray, payload);\n   56  }\n   57  \n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Scene.cpp:\n  470      }\n  471  \n  472:     uint32_t rayTypeCount = pVars->getRayTypeCount();\n  473:     setRaytracingShaderData(pContext, pVars->getRootVar(), rayTypeCount);\n  474  \n  475      // Set ray type constant.\n  476:     pVars->getRootVar()[\"DxrPerFrame\"][\"rayTypeCount\"] = rayTypeCount;\n  477  \n  478      pContext->raytrace(pProgram, pVars.get(), dispatchDims.x, dispatchDims.y, dispatchDims.z);\n  ...\n 2880  }\n 2881  \n 2882: void Scene::setRaytracingShaderData(RenderContext* pContext, const ShaderVar& var, uint32_t rayTypeCount)\n 2883  {\n 2884      logWarning(\"!!!!!!!!!!!!!!!!setRaytracingShaderData\");\n ....\n 2897      // Note that for DXR 1.1 ray queries, the shader table is not used and the ray type count doesn't matter and can be set to zero.\n 2898      //\n 2899:     auto tlasIt = mTlasCache.find(rayTypeCount);\n 2900      if (tlasIt == mTlasCache.end())\n 2901      {\n 2902          // We need a hit entry per mesh right now to pass GeometryIndex()\n 2903          LOG_WARN(\"buildTlas\");\n 2904:         buildTlas(pContext, rayTypeCount, true);\n 2905  \n 2906          // If new TLAS was just created, get it so the iterator is valid\n 2907:         if (tlasIt == mTlasCache.end()) tlasIt = mTlasCache.find(rayTypeCount);\n 2908      }\n 2909  \n ....\n 2989  }\n 2990      \n 2991: void Scene::setRaytracingShaderData(RenderContext* pContext, const ShaderVar& var, uint32_t rayTypeCount) {\n 2992      // On first execution, create BLAS for each mesh.\n 2993      if (mBlasData.empty()) {\n ....\n 3006      // It really seems like a first-class notion of ray types (and the number thereof) is required.\n 3007      //\n 3008:     auto tlasIt = mTlasCache.find(rayTypeCount);\n 3009      if (tlasIt == mTlasCache.end()) {\n 3010          // We need a hit entry per mesh right now to pass GeometryIndex()\n 3011:         buildTlas(pContext, rayTypeCount, true);\n 3012  \n 3013          // If new TLAS was just created, get it so the iterator is valid\n 3014:         if (tlasIt == mTlasCache.end()) tlasIt = mTlasCache.find(rayTypeCount);\n 3015      }\n 3016  \n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Scene.cpp.5:\n  280      }\n  281  \n  282:     uint32_t rayTypeCount = pVars->getRayTypeCount();\n  283:     setRaytracingShaderData(pContext, pVars->getRootVar(), rayTypeCount);\n  284  \n  285      // Set ray type constant.\n  286:     pVars->getRootVar()[\"DxrPerFrame\"][\"rayTypeCount\"] = rayTypeCount;\n  287  \n  288      pContext->raytrace(pProgram, pVars.get(), dispatchDims.x, dispatchDims.y, dispatchDims.z);\n  ...\n 2719  }\n 2720  \n 2721: void Scene::setRaytracingShaderData(RenderContext* pContext, const ShaderVar& var, uint32_t rayTypeCount) {\n 2722      logWarning(\"!!!!!!!!!!!!!!!!setRaytracingShaderData\");\n 2723      // On first execution or if BLASes need to be rebuilt, create BLASes for all geometries.\n ....\n 2732      // Note that for DXR 1.1 ray queries, the shader table is not used and the ray type count doesn't matter and can be set to zero.\n 2733      //\n 2734:     auto tlasIt = mTlasCache.find(rayTypeCount);\n 2735      if (tlasIt == mTlasCache.end()) {\n 2736          // We need a hit entry per mesh right now to pass GeometryIndex()\n 2737:         buildTlas(pContext, rayTypeCount, true);\n 2738  \n 2739          // If new TLAS was just created, get it so the iterator is valid\n 2740:         if (tlasIt == mTlasCache.end()) tlasIt = mTlasCache.find(rayTypeCount);\n 2741      }\n 2742  \n ....\n 2818  }\n 2819      \n 2820: void Scene::setRaytracingShaderData(RenderContext* pContext, const ShaderVar& var, uint32_t rayTypeCount) {\n 2821      // On first execution, create BLAS for each mesh.\n 2822      if (mBlasData.empty()) {\n ....\n 2835      // It really seems like a first-class notion of ray types (and the number thereof) is required.\n 2836      //\n 2837:     auto tlasIt = mTlasCache.find(rayTypeCount);\n 2838      if (tlasIt == mTlasCache.end()) {\n 2839          // We need a hit entry per mesh right now to pass GeometryIndex()\n 2840:         buildTlas(pContext, rayTypeCount, true);\n 2841  \n 2842          // If new TLAS was just created, get it so the iterator is valid\n 2843:         if (tlasIt == mTlasCache.end()) tlasIt = mTlasCache.find(rayTypeCount);\n 2844      }\n 2845  \n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Scene.cpp.6:\n  438      }\n  439  \n  440:     uint32_t rayTypeCount = pVars->getRayTypeCount();\n  441:     setRaytracingShaderData(pContext, pVars->getRootVar(), rayTypeCount);\n  442  \n  443      // Set ray type constant.\n  444:     pVars->getRootVar()[\"DxrPerFrame\"][\"rayTypeCount\"] = rayTypeCount;\n  445  \n  446      pContext->raytrace(pProgram, pVars.get(), dispatchDims.x, dispatchDims.y, dispatchDims.z);\n  ...\n 2707  }\n 2708  \n 2709: void Scene::setRaytracingShaderData(RenderContext* pContext, const ShaderVar& var, uint32_t rayTypeCount)\n 2710  {\n 2711      logWarning(\"!!!!!!!!!!!!!!!!setRaytracingShaderData\");\n ....\n 2724      // Note that for DXR 1.1 ray queries, the shader table is not used and the ray type count doesn't matter and can be set to zero.\n 2725      //\n 2726:     auto tlasIt = mTlasCache.find(rayTypeCount);\n 2727      if (tlasIt == mTlasCache.end())\n 2728      {\n 2729          // We need a hit entry per mesh right now to pass GeometryIndex()\n 2730          LOG_WARN(\"buildTlas\");\n 2731:         buildTlas(pContext, rayTypeCount, true);\n 2732  \n 2733          // If new TLAS was just created, get it so the iterator is valid\n 2734:         if (tlasIt == mTlasCache.end()) tlasIt = mTlasCache.find(rayTypeCount);\n 2735      }\n 2736  \n ....\n 2816  }\n 2817      \n 2818: void Scene::setRaytracingShaderData(RenderContext* pContext, const ShaderVar& var, uint32_t rayTypeCount) {\n 2819      // On first execution, create BLAS for each mesh.\n 2820      if (mBlasData.empty()) {\n ....\n 2833      // It really seems like a first-class notion of ray types (and the number thereof) is required.\n 2834      //\n 2835:     auto tlasIt = mTlasCache.find(rayTypeCount);\n 2836      if (tlasIt == mTlasCache.end()) {\n 2837          // We need a hit entry per mesh right now to pass GeometryIndex()\n 2838:         buildTlas(pContext, rayTypeCount, true);\n 2839  \n 2840          // If new TLAS was just created, get it so the iterator is valid\n 2841:         if (tlasIt == mTlasCache.end()) tlasIt = mTlasCache.find(rayTypeCount);\n 2842      }\n 2843  \n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Scene.cpp.old:\n  194      PROFILE(mpDevice, \"raytraceScene\");\n  195  \n  196:     auto rayTypeCount = pProgram->getHitProgramCount();\n  197:     setRaytracingShaderData(pContext, pVars->getRootVar(), rayTypeCount);\n  198  \n  199      // If not set yet, set geometry indices for this RtProgramVars.\n  ...\n  204  \n  205      // Set ray type constant.\n  206:     pVars->getRootVar()[\"DxrPerFrame\"][\"hitProgramCount\"] = rayTypeCount;\n  207  \n  208      pContext->raytrace(pProgram, pVars.get(), dispatchDims.x, dispatchDims.y, dispatchDims.z);\n  ...\n 1523      }\n 1524      \n 1525:     void Scene::setRaytracingShaderData(RenderContext* pContext, const ShaderVar& var, uint32_t rayTypeCount) {\n 1526          // On first execution, create BLAS for each mesh.\n 1527          if (mBlasData.empty()) {\n ....\n 1540          // It really seems like a first-class notion of ray types (and the number thereof) is required.\n 1541          //\n 1542:         auto tlasIt = mTlasCache.find(rayTypeCount);\n 1543          if (tlasIt == mTlasCache.end()) {\n 1544              // We need a hit entry per mesh right now to pass GeometryIndex()\n 1545:             buildTlas(pContext, rayTypeCount, true);\n 1546  \n 1547              // If new TLAS was just created, get it so the iterator is valid\n 1548:             if (tlasIt == mTlasCache.end()) tlasIt = mTlasCache.find(rayTypeCount);\n 1549          }\n 1550  \n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Scene.cpp.old.2:\n  278      }\n  279  \n  280:     uint32_t rayTypeCount = pVars->getRayTypeCount();\n  281:     setRaytracingShaderData(pContext, pVars->getRootVar(), rayTypeCount);\n  282  \n  283      // Set ray type constant.\n  284:     pVars->getRootVar()[\"DxrPerFrame\"][\"rayTypeCount\"] = rayTypeCount;\n  285  \n  286      pContext->raytrace(pProgram, pVars.get(), dispatchDims.x, dispatchDims.y, dispatchDims.z);\n  ...\n 2516  }\n 2517  \n 2518: void Scene::setRaytracingShaderData(RenderContext* pContext, const ShaderVar& var, uint32_t rayTypeCount)\n 2519  {\n 2520      logWarning(\"!!!!!!!!!!!!!!!!setRaytracingShaderData\");\n ....\n 2531      // Note that for DXR 1.1 ray queries, the shader table is not used and the ray type count doesn't matter and can be set to zero.\n 2532      //\n 2533:     auto tlasIt = mTlasCache.find(rayTypeCount);\n 2534      if (tlasIt == mTlasCache.end())\n 2535      {\n 2536          // We need a hit entry per mesh right now to pass GeometryIndex()\n 2537:         buildTlas(pContext, rayTypeCount, true);\n 2538  \n 2539          // If new TLAS was just created, get it so the iterator is valid\n 2540:         if (tlasIt == mTlasCache.end()) tlasIt = mTlasCache.find(rayTypeCount);\n 2541      }\n 2542  \n ....\n 2622  }\n 2623      \n 2624: void Scene::setRaytracingShaderData(RenderContext* pContext, const ShaderVar& var, uint32_t rayTypeCount) {\n 2625      // On first execution, create BLAS for each mesh.\n 2626      if (mBlasData.empty()) {\n ....\n 2639      // It really seems like a first-class notion of ray types (and the number thereof) is required.\n 2640      //\n 2641:     auto tlasIt = mTlasCache.find(rayTypeCount);\n 2642      if (tlasIt == mTlasCache.end()) {\n 2643          // We need a hit entry per mesh right now to pass GeometryIndex()\n 2644:         buildTlas(pContext, rayTypeCount, true);\n 2645  \n 2646          // If new TLAS was just created, get it so the iterator is valid\n 2647:         if (tlasIt == mTlasCache.end()) tlasIt = mTlasCache.find(rayTypeCount);\n 2648      }\n 2649  \n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Scene.h:\n  710          \\param[in] pContext Render context.\n  711          \\param[in] var Shader variable to set data into, usually the root var.\n  712:         \\param[in] rayTypeCount Number of ray types in raygen program. Not needed for DXR 1.1.\n  713      */\n  714:     void setRaytracingShaderData(RenderContext* pContext, const ShaderVar& var, uint32_t rayTypeCount = 1);\n  715  \n  716      /** Get the name of the mesh with the given ID.\n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/ForwardLightingPass/ForwardLightingPass.slang:\n  107      ShadowRayData rayData;\n  108      rayData.visible = false;    // Set to true by miss shader if ray is not terminated before\n  109:     TraceRay(gScene.rtAccel, RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH, 0xff /* instanceInclusionMask */, 1 /* hitIdx */, rayTypeCount, 1 /* missIdx */, ray, rayData);\n  110  \n  111      return rayData.visible;\n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/MinimalPathTracer/MinimalPathTracer.rt.slang:\n  184      ShadowRayData rayData;\n  185      rayData.visible = false;    // Set to true by miss shader if ray is not terminated before\n  186:     TraceRay(gScene.rtAccel, RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH, 0xff /* instanceInclusionMask */, 1 /* hitIdx */, rayTypeCount, 1 /* missIdx */, ray, rayData);\n  187  \n  188      return rayData.visible;\n  ...\n  201  \n  202      uint rayFlags = 0;      // TODO: Set cull mode from the app\n  203:     TraceRay(gScene.rtAccel, rayFlags, 0xff /* instanceInclusionMask */, 0 /* hitIdx */, rayTypeCount, 0 /* missIdx */, ray, rayData);\n  204  }\n  205  \n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/WhittedRayTracer/WhittedRayTracer.rt.slang:\n  186      ShadowRayData rayData;\n  187      rayData.visible = false;    // Set to true by miss shader if ray is not terminated before.\n  188:     TraceRay(gScene.rtAccel, RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH, 0xff /* instanceInclusionMask */, 1 /* hitIdx */, rayTypeCount, 1 /* missIdx */, ray, rayData);\n  189  \n  190      return rayData.visible;\n  ...\n  203  \n  204      uint rayFlags = 0;      // TODO: Set cull mode from the app.\n  205:     TraceRay(gScene.rtAccel, rayFlags, 0xff /* instanceInclusionMask */, 0 /* hitIdx */, rayTypeCount, 0 /* missIdx */, ray, rayData);\n  206  }\n  207  \n\n74 matches across 12 files\n\n\nSearching 1620 files for \"traceVisibilityRay\" (case sensitive)\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/RaytracingInline.slang:\n  316      }\n  317  \n  318:     bool traceVisibilityRay(const RayDesc ray, uint rayFlags, uint instanceInclusionMask)\n  319      {\n  320          return traceSceneVisibilityRay<UseAlphaTest>(ray, rayFlags, instanceInclusionMask);\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/SceneRayQueryInterface.slang:\n  316      }\n  317  \n  318:     bool traceVisibilityRay(const RayDesc ray, uint rayFlags, uint instanceInclusionMask)\n  319      {\n  320          return traceSceneVisibilityRay<UseAlphaTest>(ray, rayFlags, instanceInclusionMask);\n\n2 matches across 2 files\n\n\nSearching 1620 files for \"RayDesc\" (case sensitive)\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/NullTrace.cs.slang:\n   34  void main(uint3 dispatchThreadId : SV_DispatchThreadID)\n   35  {\n   36:     RayDesc ray;\n   37      ray.Origin = float3(0, 0, 0);\n   38      ray.Direction = float3(1, 0, 0);\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Raytracing.slang:\n   50      uint rayType,\n   51      uint missIndex,\n   52:     RayDesc ray,\n   53      inout payload_t payload)\n   54  {\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/RaytracingInline.slang:\n   83  \n   84  // TODO: Pass UseAlphaTest as a template argument.\n   85: bool traceSceneRayImpl<let Flags : int>(const bool useAlphaTest, RayQuery<Flags> rayQuery, const RayDesc ray, out HitInfo hit, out float hitT, uint rayFlags, uint instanceInclusionMask)\n   86  {\n   87      rayQuery.TraceRayInline(gScene.rtAccel, rayFlags, instanceInclusionMask, ray);\n   ..\n  197  }\n  198  \n  199: bool traceSceneRay<let UseAlphaTest : int>(const RayDesc ray, out HitInfo hit, out float hitT, uint rayFlags, uint instanceInclusionMask)\n  200  {\n  201      // TODO: Use a constant expression to derive static ray flags.\n  ...\n  221  }\n  222  \n  223: bool traceSceneVisibilityRayImpl<let Flags : int>(const bool useAlphaTest, RayQuery<Flags> rayQuery, const RayDesc ray, uint rayFlags, uint instanceInclusionMask)\n  224  {\n  225      rayQuery.TraceRayInline(gScene.rtAccel, rayFlags, instanceInclusionMask, ray);\n  ...\n  283  }\n  284  \n  285: bool traceSceneVisibilityRay<let UseAlphaTest : int>(const RayDesc ray, uint rayFlags, uint instanceInclusionMask)\n  286  {\n  287      // TODO: Use a constant expression to derive static ray flags.\n  ...\n  311  struct SceneRayQuery<let UseAlphaTest : int> : ISceneRayQuery\n  312  {\n  313:     bool traceRay(const RayDesc ray, out HitInfo hit, out float hitT, uint rayFlags, uint instanceInclusionMask)\n  314      {\n  315          return traceSceneRay<UseAlphaTest>(ray, hit, hitT, rayFlags, instanceInclusionMask);\n  316      }\n  317  \n  318:     bool traceVisibilityRay(const RayDesc ray, uint rayFlags, uint instanceInclusionMask)\n  319      {\n  320          return traceSceneVisibilityRay<UseAlphaTest>(ray, rayFlags, instanceInclusionMask);\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/SceneRayQueryInterface.slang:\n   83  \n   84  // TODO: Pass UseAlphaTest as a template argument.\n   85: bool traceSceneRayImpl<let Flags : int>(const bool useAlphaTest, RayQuery<Flags> rayQuery, const RayDesc ray, out HitInfo hit, out float hitT, uint rayFlags, uint instanceInclusionMask)\n   86  {\n   87      rayQuery.TraceRayInline(gScene.rtAccel, rayFlags, instanceInclusionMask, ray);\n   ..\n  197  }\n  198  \n  199: bool traceSceneRay<let UseAlphaTest : int>(const RayDesc ray, out HitInfo hit, out float hitT, uint rayFlags, uint instanceInclusionMask)\n  200  {\n  201      // TODO: Use a constant expression to derive static ray flags.\n  ...\n  221  }\n  222  \n  223: bool traceSceneVisibilityRayImpl<let Flags : int>(const bool useAlphaTest, RayQuery<Flags> rayQuery, const RayDesc ray, uint rayFlags, uint instanceInclusionMask)\n  224  {\n  225      rayQuery.TraceRayInline(gScene.rtAccel, rayFlags, instanceInclusionMask, ray);\n  ...\n  283  }\n  284  \n  285: bool traceSceneVisibilityRay<let UseAlphaTest : int>(const RayDesc ray, uint rayFlags, uint instanceInclusionMask)\n  286  {\n  287      // TODO: Use a constant expression to derive static ray flags.\n  ...\n  311  struct SceneRayQuery<let UseAlphaTest : int> : ISceneRayQuery\n  312  {\n  313:     bool traceRay(const RayDesc ray, out HitInfo hit, out float hitT, uint rayFlags, uint instanceInclusionMask)\n  314      {\n  315          return traceSceneRay<UseAlphaTest>(ray, hit, hitT, rayFlags, instanceInclusionMask);\n  316      }\n  317  \n  318:     bool traceVisibilityRay(const RayDesc ray, uint rayFlags, uint instanceInclusionMask)\n  319      {\n  320          return traceSceneVisibilityRay<UseAlphaTest>(ray, rayFlags, instanceInclusionMask);\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Camera/Camera.slang:\n   36      float tMax;\n   37  \n   38:     RayDesc toRayDesc()\n   39      {\n   40          return { origin, tMin, dir, tMax };\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Math/Ray.slang:\n   29  \n   30  /** Ray type.\n   31:     This has equal layout to DXR RayDesc but adds additional functionality.\n   32  */\n   33  struct Ray\n   ..\n   48      }\n   49  \n   50:     /** Convert to DXR RayDesc.\n   51      */\n   52:     RayDesc toRayDesc()\n   53      {\n   54          return { origin, tMin, dir, tMax };\n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/ForwardLightingPass/ForwardLightingPass.slang:\n  126          bool V = traceShadowRay(rayOrigin, ls.dir, ls.distance);\n  127  \n  128:         traceVisibilityRay(const RayDesc ray, uint rayFlags, uint instanceInclusionMask)\n  129          \n  130          shadowFactor = V ? 1.0 : 0.0;\n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/GBuffer/GBufferRT.rt.slang:\n  213  #if USE_DEPTH_OF_FIELD\n  214      SampleGenerator sg = SampleGenerator.create(launchIndex, gParams.frameCount);\n  215:     RayDesc ray = gScene.camera.computeRayThinlens(launchIndex, launchDim, sampleNext2D(sg)).toRayDesc();\n  216  #else\n  217:     RayDesc ray = gScene.camera.computeRayPinhole(launchIndex, launchDim).toRayDesc();\n  218  #endif\n  219  \n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/VBuffer/VBufferRT.rt.slang:\n  103  #if USE_DEPTH_OF_FIELD\n  104      SampleGenerator sg = SampleGenerator.create(launchIndex, frameCount);\n  105:     RayDesc ray = gScene.camera.computeRayThinlens(launchIndex, launchDim, sampleNext2D(sg)).toRayDesc();\n  106  #else\n  107:     RayDesc ray = gScene.camera.computeRayPinhole(launchIndex, launchDim).toRayDesc();\n  108  #endif\n  109  \n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/MegakernelPathTracer/PathTracer.slang:\n   82  {\n   83      // Setup ray descriptor.\n   84:     RayDesc ray;\n   85      ray.Origin = origin;\n   86      ray.Direction = dir;\n   ..\n  112  {\n  113      // Setup ray based on params passed via payload.\n  114:     RayDesc ray;\n  115      ray.Origin = origin;\n  116      ray.Direction = dir;\n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/MinimalPathTracer/MinimalPathTracer.rt.slang:\n  176  bool traceShadowRay(float3 origin, float3 dir, float distance)\n  177  {\n  178:     RayDesc ray;\n  179      ray.Origin = origin;\n  180      ray.Direction = dir;\n  ...\n  194  void traceScatterRay(inout ScatterRayData rayData)\n  195  {\n  196:     RayDesc ray;\n  197      ray.Origin = rayData.origin;\n  198      ray.Direction = rayData.direction;\n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/WhittedRayTracer/WhittedRayTracer.rt.slang:\n  178  bool traceShadowRay(float3 origin, float3 dir, float distance)\n  179  {\n  180:     RayDesc ray;\n  181      ray.Origin = origin;\n  182      ray.Direction = dir;\n  ...\n  196  void traceScatterRay(inout ScatterRayData rayData)\n  197  {\n  198:     RayDesc ray;\n  199      ray.Origin = rayData.origin;\n  200      ray.Direction = rayData.direction;\n\n/mnt/misc_hdd/dev/Lava/src/Samples/HelloDXR/HelloDXR.rt.slang:\n   72  {\n   73      float3 direction = gScene.lights[lightIndex].posW - origin;\n   74:     RayDesc ray;\n   75      ray.Origin = origin;\n   76      ray.Direction = normalize(direction);\n   ..\n   91          PrimaryRayData secondaryRay;\n   92          secondaryRay.depth.r = 1;\n   93:         RayDesc ray;\n   94          ray.Origin = worldOrigin;\n   95          ray.Direction = reflect(worldRayDir, v.normalW);\n   ..\n  165      uint randSeed = rand_init(launchIndex.x + launchIndex.y * viewportDims.x, sampleIndex, 16);\n  166  \n  167:     RayDesc ray;\n  168      if (!useDOF)\n  169      {\n  170:         ray = gScene.camera.computeRayPinhole(launchIndex.xy, viewportDims).toRayDesc();\n  171      }\n  172      else\n  173      {\n  174          float2 u = float2(rand_next(randSeed), rand_next(randSeed));\n  175:         ray = gScene.camera.computeRayThinlens(launchIndex.xy, viewportDims, u).toRayDesc();\n  176      }\n  177  \n\n/mnt/misc_hdd/dev/Lava/src/Tools/FalcorTest/Tests/Slang/TraceRayInline.cs.slang:\n   45  \n   46      // Set up a trace. No work is done yet.\n   47:     RayDesc ray;\n   48      ray.Origin = float3(0, 0, 0);\n   49      ray.Direction = float3(1, 0, 0);\n\n41 matches across 14 files\n\n\nSearching 1620 files for \"TraceRayInline\" (case sensitive)\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/NullTrace.cs.slang:\n   41  \n   42      RayQuery<RAY_FLAG_FORCE_OPAQUE | RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES> rayQuery;\n   43:     rayQuery.TraceRayInline(gTlas, RAY_FLAG_NONE, 0xff, ray);\n   44      rayQuery.Proceed();\n   45      gOutput[dispatchThreadId.xy] = (rayQuery.CommittedStatus() == COMMITTED_TRIANGLE_HIT) ? 1 : 0;\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/RaytracingInline.slang:\n   85  bool traceSceneRayImpl<let Flags : int>(const bool useAlphaTest, RayQuery<Flags> rayQuery, const RayDesc ray, out HitInfo hit, out float hitT, uint rayFlags, uint instanceInclusionMask)\n   86  {\n   87:     rayQuery.TraceRayInline(gScene.rtAccel, rayFlags, instanceInclusionMask, ray);\n   88  \n   89      CurveIntersector::Attribs curveCommittedAttribs;\n   ..\n  223  bool traceSceneVisibilityRayImpl<let Flags : int>(const bool useAlphaTest, RayQuery<Flags> rayQuery, const RayDesc ray, uint rayFlags, uint instanceInclusionMask)\n  224  {\n  225:     rayQuery.TraceRayInline(gScene.rtAccel, rayFlags, instanceInclusionMask, ray);\n  226  \n  227      while (rayQuery.Proceed())\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/SceneRayQueryInterface.slang:\n   85  bool traceSceneRayImpl<let Flags : int>(const bool useAlphaTest, RayQuery<Flags> rayQuery, const RayDesc ray, out HitInfo hit, out float hitT, uint rayFlags, uint instanceInclusionMask)\n   86  {\n   87:     rayQuery.TraceRayInline(gScene.rtAccel, rayFlags, instanceInclusionMask, ray);\n   88  \n   89      CurveIntersector::Attribs curveCommittedAttribs;\n   ..\n  223  bool traceSceneVisibilityRayImpl<let Flags : int>(const bool useAlphaTest, RayQuery<Flags> rayQuery, const RayDesc ray, uint rayFlags, uint instanceInclusionMask)\n  224  {\n  225:     rayQuery.TraceRayInline(gScene.rtAccel, rayFlags, instanceInclusionMask, ray);\n  226  \n  227      while (rayQuery.Proceed())\n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/ForwardLightingPass/ForwardLightingPass.slang:\n  143  #endif\n  144  \n  145:         rayQuery.TraceRayInline(gScene.rtAccel, RAY_FLAG_NONE, 0xff, ray);\n  146          rayQuery.Proceed();\n  147          shadowFactor = (rayQuery.CommittedStatus() == COMMITTED_TRIANGLE_HIT) ? 0.0 : 1.0;\n\n/mnt/misc_hdd/dev/Lava/src/Tools/FalcorTest/FalcorTest.vcxproj:\n   31      <ClCompile Include=\"Tests\\Slang\\SlangTests.cpp\" />\n   32      <ClCompile Include=\"Tests\\Slang\\TraceRayFlags.cpp\" />\n   33:     <ClCompile Include=\"Tests\\Slang\\TraceRayInline.cpp\" />\n   34      <ClCompile Include=\"Tests\\Slang\\WaveOps.cpp\" />\n   35      <ClCompile Include=\"Tests\\Utils\\AABBTests.cpp\" />\n   ..\n   67      <ShaderSource Include=\"Tests\\Slang\\SlangTests.cs.slang\" />\n   68      <ShaderSource Include=\"Tests\\Slang\\TraceRayFlags.cs.slang\" />\n   69:     <ShaderSource Include=\"Tests\\Slang\\TraceRayInline.cs.slang\" />\n   70      <ShaderSource Include=\"Tests\\Slang\\WaveOps.cs.slang\" />\n   71      <ShaderSource Include=\"Tests\\Utils\\AABBTests.cs.slang\" />\n\n/mnt/misc_hdd/dev/Lava/src/Tools/FalcorTest/FalcorTest.vcxproj.filters:\n   87        <Filter>Tests\\Slang</Filter>\n   88      </ClCompile>\n   89:     <ClCompile Include=\"Tests\\Slang\\TraceRayInline.cpp\">\n   90        <Filter>Tests\\Slang</Filter>\n   91      </ClCompile>\n   ..\n  196        <Filter>Tests\\Slang</Filter>\n  197      </ShaderSource>\n  198:     <ShaderSource Include=\"Tests\\Slang\\TraceRayInline.cs.slang\">\n  199        <Filter>Tests\\Slang</Filter>\n  200      </ShaderSource>\n\n/mnt/misc_hdd/dev/Lava/src/Tools/FalcorTest/Tests/Slang/TraceRayInline.cpp:\n   31  namespace Falcor {\n   32  \n   33: GPU_TEST(testTraceRayInlineAPI, \"Requires shader model 6.5\") {\n   34      // We don't actually run the program, just make sure it compiles.\n   35:     ctx.createProgram(\"Tests/Slang/TraceRayInline.cs.slang\", \"testTraceRayInlineAPI\", Program::DefineList(), Shader::CompilerFlags::None, \"6_5\");\n   36  }\n   37  \n\n/mnt/misc_hdd/dev/Lava/src/Tools/FalcorTest/Tests/Slang/TraceRayInline.cs.slang:\n   36  \n   37  [numthreads(1, 1, 1)]\n   38: void testTraceRayInlineAPI(uint3 threadID : SV_DispatchThreadID)\n   39  {\n   40      uint i = 0;\n   ..\n   54      uint instanceMask = 0xff;\n   55  \n   56:     rayQuery.TraceRayInline(\n   57          gAccelerationStructure,\n   58          rayFlags,   // OR'd with flags above\n\n15 matches across 8 files\n\n\nSearching 7755 files for \"TraceRayInline\" (case sensitive)\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/docs/stdlib-doc.md:\n 64754  \n 64755  * `init`\n 64756: * `TraceRayInline`\n 64757  * `Proceed`\n 64758  * `Abort`\n .....\n 64805  \n 64806  --------------------------------------------------------------------------------\n 64807: # `RayQuery<rayFlags:uint>.TraceRayInline`\n 64808  \n 64809  ## Signature \n 64810  \n 64811  ```\n 64812: void RayQuery<rayFlags:uint>.TraceRayInline(\n 64813      RaytracingAccelerationStructure accelerationStructure,\n 64814      uint                 rayFlags,\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/examples/ray-tracing/shaders.slang:\n   37               RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH;\n   38  \n   39:     q.TraceRayInline(\n   40          sceneBVH,\n   41          rayFlags,\n   ..\n   68      let rayFlags = RAY_FLAG_NONE;\n   69  \n   70:     q.TraceRayInline(\n   71          sceneBVH,\n   72          rayFlags,\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/source/slang/hlsl.meta.slang:\n 4911  \n 4912  //\n 4913: // DXR 1.1 and `TraceRayInline` support\n 4914  //\n 4915  \n ....\n 4981      //\n 4982      __target_intrinsic(hlsl)\n 4983:     void TraceRayInline(\n 4984          RaytracingAccelerationStructure accelerationStructure,\n 4985          RAY_FLAG                        rayFlags,\n ....\n 5001      [__unsafeForceInlineEarly]\n 5002      __specialized_for_target(glsl)\n 5003:     void TraceRayInline(\n 5004          RaytracingAccelerationStructure accelerationStructure,\n 5005          RAY_FLAG                        rayFlags,\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/compute/ray-tracing-inline.slang:\n   21      let rayFlags = RAY_FLAG_NONE;\n   22  \n   23:     q.TraceRayInline(\n   24          scene,\n   25          rayFlags,\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/pipeline/ray-tracing/ray-query-subroutine.slang:\n   15      ray.TMin = 0;\n   16      ray.TMax = 1000.0;\n   17:     q.TraceRayInline(\n   18          /* accellerationStructure: */   gScene,\n   19          /* rayFlags: */                 N,\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/pipeline/ray-tracing/ray-query-subroutine.slang.hlsl:\n   10      ray_0.TMin = (float) int(0);\n   11      ray_0.TMax = 1000.00000000000000000000;\n   12:     q_0.TraceRayInline(gScene_0, (uint) int(0), (uint) int(-1), ray_0);\n   13      return int(1);\n   14  }\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/pipeline/ray-tracing/trace-ray-inline.slang:\n    5  \n    6  // The goal of this shader is to use all the main pieces\n    7: // of functionality in DXR 1.1's `TraceRayInline` feature,\n    8  // to ensure that they survive translation to HLSL.\n    9  \n   ..\n   13  \n   14  // We also need to decide what to do with hits/misses.\n   15: // The `TraceRayInline` approach eschews separate shader\n   16  // stages for RT, and instead expects users to write\n   17  // those operations as subroutines instead.\n   ..\n  110  \tMyRayPayload payload = { -1 };\n  111  \tRayDesc ray = { origin, tMin, direction, tMax };\n  112: \tquery.TraceRayInline(\n  113  \t\tmyAccelerationStructure,\n  114  \t\trayFlags,\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/pipeline/ray-tracing/trace-ray-inline.slang.glsl:\n   31  };\n   32  \n   33: void RayQuery_TraceRayInline_0(rayQueryEXT this_0, accelerationStructureEXT accelerationStructure_0, uint rayFlags_1, uint instanceInclusionMask_0, RayDesc_0 ray_0)\n   34  {\n   35      rayQueryInitializeEXT((this_0), (accelerationStructure_0), (rayFlags_1), (instanceInclusionMask_0), (ray_0.Origin_0), (ray_0.TMin_0), (ray_0.Direction_0), (ray_0.TMax_0));\n   ..\n   98   \n   99      RayDesc_0 ray_1 = { C_0._data.origin_0, C_0._data.tMin_0, C_0._data.direction_0, C_0._data.tMax_0 };\n  100:     RayQuery_TraceRayInline_0(query_0, myAccelerationStructure_0, C_0._data.rayFlags_0, C_0._data.instanceMask_0, ray_1);\n  101  \n  102      MyProceduralHitAttrs_0 _S3;\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/pipeline/ray-tracing/trace-ray-inline.slang.hlsl:\n   80      MyRayPayload_0 _S1 = { int(-1) };\n   81      RayDesc ray_0 = { C_0.origin_0, C_0.tMin_0, C_0.direction_0, C_0.tMax_0 };\n   82:     query_0.TraceRayInline(myAccelerationStructure_0, C_0.rayFlags_0, C_0.instanceMask_0, ray_0);\n   83  \n   84      MyProceduralHitAttrs_0 _S2;\n\n17 matches across 9 files\n\n\nSearching 7755 files for \"TraceRayInline\" (case sensitive)\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/docs/stdlib-doc.md:\n 64754  \n 64755  * `init`\n 64756: * `TraceRayInline`\n 64757  * `Proceed`\n 64758  * `Abort`\n .....\n 64805  \n 64806  --------------------------------------------------------------------------------\n 64807: # `RayQuery<rayFlags:uint>.TraceRayInline`\n 64808  \n 64809  ## Signature \n 64810  \n 64811  ```\n 64812: void RayQuery<rayFlags:uint>.TraceRayInline(\n 64813      RaytracingAccelerationStructure accelerationStructure,\n 64814      uint                 rayFlags,\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/examples/ray-tracing/shaders.slang:\n   37               RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH;\n   38  \n   39:     q.TraceRayInline(\n   40          sceneBVH,\n   41          rayFlags,\n   ..\n   68      let rayFlags = RAY_FLAG_NONE;\n   69  \n   70:     q.TraceRayInline(\n   71          sceneBVH,\n   72          rayFlags,\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/source/slang/hlsl.meta.slang:\n 4911  \n 4912  //\n 4913: // DXR 1.1 and `TraceRayInline` support\n 4914  //\n 4915  \n ....\n 4981      //\n 4982      __target_intrinsic(hlsl)\n 4983:     void TraceRayInline(\n 4984          RaytracingAccelerationStructure accelerationStructure,\n 4985          RAY_FLAG                        rayFlags,\n ....\n 5001      [__unsafeForceInlineEarly]\n 5002      __specialized_for_target(glsl)\n 5003:     void TraceRayInline(\n 5004          RaytracingAccelerationStructure accelerationStructure,\n 5005          RAY_FLAG                        rayFlags,\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/compute/ray-tracing-inline.slang:\n   21      let rayFlags = RAY_FLAG_NONE;\n   22  \n   23:     q.TraceRayInline(\n   24          scene,\n   25          rayFlags,\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/pipeline/ray-tracing/ray-query-subroutine.slang:\n   15      ray.TMin = 0;\n   16      ray.TMax = 1000.0;\n   17:     q.TraceRayInline(\n   18          /* accellerationStructure: */   gScene,\n   19          /* rayFlags: */                 N,\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/pipeline/ray-tracing/ray-query-subroutine.slang.hlsl:\n   10      ray_0.TMin = (float) int(0);\n   11      ray_0.TMax = 1000.00000000000000000000;\n   12:     q_0.TraceRayInline(gScene_0, (uint) int(0), (uint) int(-1), ray_0);\n   13      return int(1);\n   14  }\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/pipeline/ray-tracing/trace-ray-inline.slang:\n    5  \n    6  // The goal of this shader is to use all the main pieces\n    7: // of functionality in DXR 1.1's `TraceRayInline` feature,\n    8  // to ensure that they survive translation to HLSL.\n    9  \n   ..\n   13  \n   14  // We also need to decide what to do with hits/misses.\n   15: // The `TraceRayInline` approach eschews separate shader\n   16  // stages for RT, and instead expects users to write\n   17  // those operations as subroutines instead.\n   ..\n  110  \tMyRayPayload payload = { -1 };\n  111  \tRayDesc ray = { origin, tMin, direction, tMax };\n  112: \tquery.TraceRayInline(\n  113  \t\tmyAccelerationStructure,\n  114  \t\trayFlags,\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/pipeline/ray-tracing/trace-ray-inline.slang.glsl:\n   31  };\n   32  \n   33: void RayQuery_TraceRayInline_0(rayQueryEXT this_0, accelerationStructureEXT accelerationStructure_0, uint rayFlags_1, uint instanceInclusionMask_0, RayDesc_0 ray_0)\n   34  {\n   35      rayQueryInitializeEXT((this_0), (accelerationStructure_0), (rayFlags_1), (instanceInclusionMask_0), (ray_0.Origin_0), (ray_0.TMin_0), (ray_0.Direction_0), (ray_0.TMax_0));\n   ..\n   98   \n   99      RayDesc_0 ray_1 = { C_0._data.origin_0, C_0._data.tMin_0, C_0._data.direction_0, C_0._data.tMax_0 };\n  100:     RayQuery_TraceRayInline_0(query_0, myAccelerationStructure_0, C_0._data.rayFlags_0, C_0._data.instanceMask_0, ray_1);\n  101  \n  102      MyProceduralHitAttrs_0 _S3;\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/pipeline/ray-tracing/trace-ray-inline.slang.hlsl:\n   80      MyRayPayload_0 _S1 = { int(-1) };\n   81      RayDesc ray_0 = { C_0.origin_0, C_0.tMin_0, C_0.direction_0, C_0.tMax_0 };\n   82:     query_0.TraceRayInline(myAccelerationStructure_0, C_0.rayFlags_0, C_0.instanceMask_0, ray_0);\n   83  \n   84      MyProceduralHitAttrs_0 _S2;\n\n17 matches across 9 files\n\n\nSearching 7755 files for \"TraceRayInline\" (case sensitive)\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/docs/stdlib-doc.md:\n 64754  \n 64755  * `init`\n 64756: * `TraceRayInline`\n 64757  * `Proceed`\n 64758  * `Abort`\n .....\n 64805  \n 64806  --------------------------------------------------------------------------------\n 64807: # `RayQuery<rayFlags:uint>.TraceRayInline`\n 64808  \n 64809  ## Signature \n 64810  \n 64811  ```\n 64812: void RayQuery<rayFlags:uint>.TraceRayInline(\n 64813      RaytracingAccelerationStructure accelerationStructure,\n 64814      uint                 rayFlags,\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/examples/ray-tracing/shaders.slang:\n   37               RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH;\n   38  \n   39:     q.TraceRayInline(\n   40          sceneBVH,\n   41          rayFlags,\n   ..\n   68      let rayFlags = RAY_FLAG_NONE;\n   69  \n   70:     q.TraceRayInline(\n   71          sceneBVH,\n   72          rayFlags,\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/source/slang/hlsl.meta.slang:\n 4911  \n 4912  //\n 4913: // DXR 1.1 and `TraceRayInline` support\n 4914  //\n 4915  \n ....\n 4981      //\n 4982      __target_intrinsic(hlsl)\n 4983:     void TraceRayInline(\n 4984          RaytracingAccelerationStructure accelerationStructure,\n 4985          RAY_FLAG                        rayFlags,\n ....\n 5001      [__unsafeForceInlineEarly]\n 5002      __specialized_for_target(glsl)\n 5003:     void TraceRayInline(\n 5004          RaytracingAccelerationStructure accelerationStructure,\n 5005          RAY_FLAG                        rayFlags,\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/compute/ray-tracing-inline.slang:\n   21      let rayFlags = RAY_FLAG_NONE;\n   22  \n   23:     q.TraceRayInline(\n   24          scene,\n   25          rayFlags,\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/pipeline/ray-tracing/ray-query-subroutine.slang:\n   15      ray.TMin = 0;\n   16      ray.TMax = 1000.0;\n   17:     q.TraceRayInline(\n   18          /* accellerationStructure: */   gScene,\n   19          /* rayFlags: */                 N,\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/pipeline/ray-tracing/ray-query-subroutine.slang.hlsl:\n   10      ray_0.TMin = (float) int(0);\n   11      ray_0.TMax = 1000.00000000000000000000;\n   12:     q_0.TraceRayInline(gScene_0, (uint) int(0), (uint) int(-1), ray_0);\n   13      return int(1);\n   14  }\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/pipeline/ray-tracing/trace-ray-inline.slang:\n    5  \n    6  // The goal of this shader is to use all the main pieces\n    7: // of functionality in DXR 1.1's `TraceRayInline` feature,\n    8  // to ensure that they survive translation to HLSL.\n    9  \n   ..\n   13  \n   14  // We also need to decide what to do with hits/misses.\n   15: // The `TraceRayInline` approach eschews separate shader\n   16  // stages for RT, and instead expects users to write\n   17  // those operations as subroutines instead.\n   ..\n  110  \tMyRayPayload payload = { -1 };\n  111  \tRayDesc ray = { origin, tMin, direction, tMax };\n  112: \tquery.TraceRayInline(\n  113  \t\tmyAccelerationStructure,\n  114  \t\trayFlags,\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/pipeline/ray-tracing/trace-ray-inline.slang.glsl:\n   31  };\n   32  \n   33: void RayQuery_TraceRayInline_0(rayQueryEXT this_0, accelerationStructureEXT accelerationStructure_0, uint rayFlags_1, uint instanceInclusionMask_0, RayDesc_0 ray_0)\n   34  {\n   35      rayQueryInitializeEXT((this_0), (accelerationStructure_0), (rayFlags_1), (instanceInclusionMask_0), (ray_0.Origin_0), (ray_0.TMin_0), (ray_0.Direction_0), (ray_0.TMax_0));\n   ..\n   98   \n   99      RayDesc_0 ray_1 = { C_0._data.origin_0, C_0._data.tMin_0, C_0._data.direction_0, C_0._data.tMax_0 };\n  100:     RayQuery_TraceRayInline_0(query_0, myAccelerationStructure_0, C_0._data.rayFlags_0, C_0._data.instanceMask_0, ray_1);\n  101  \n  102      MyProceduralHitAttrs_0 _S3;\n\n/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/pipeline/ray-tracing/trace-ray-inline.slang.hlsl:\n   80      MyRayPayload_0 _S1 = { int(-1) };\n   81      RayDesc ray_0 = { C_0.origin_0, C_0.tMin_0, C_0.direction_0, C_0.tMax_0 };\n   82:     query_0.TraceRayInline(myAccelerationStructure_0, C_0.rayFlags_0, C_0.instanceMask_0, ray_0);\n   83  \n   84      MyProceduralHitAttrs_0 _S2;\n\n17 matches across 9 files\n\n\nSearching 183 files for \"uniform\" (case sensitive)\n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/CACAO/CACAO.SSAO.cs.slang:\n  228  \n  229  \n  230: void GenerateSSAOShadowsInternal(out float outShadowTerm, out float4 outEdges, out float outWeight, const float2 SVPos/*, const float2 normalizedScreenPos*/, uniform int qualityLevel, bool adaptiveBase)\n  231  {\n  232      float2 SVPosRounded = trunc(SVPos);\n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/GBuffer/GBufferRT.rt.slang:\n   72  [shader(\"anyhit\")]\n   73  void anyHit(\n   74:     uniform HitShaderParams hitParams,\n   75      inout RayData rayData : SV_RayPayload, BuiltInTriangleIntersectionAttributes attribs : SV_IntersectionAttributes)\n   76  {\n   ..\n  137  [shader(\"closesthit\")]\n  138  void closestHit(\n  139:     uniform HitShaderParams hitParams,\n  140      inout RayData rayData,\n  141      BuiltInTriangleIntersectionAttributes attribs)\n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/VBuffer/VBufferRT.rt.slang:\n   58  [shader(\"anyhit\")]\n   59  void anyHit(\n   60:     uniform HitShaderParams hitParams,\n   61      inout RayData rayData : SV_RayPayload,\n   62      BuiltInTriangleIntersectionAttributes attribs : SV_IntersectionAttributes)\n   ..\n   72  [shader(\"closesthit\")]\n   73  void closestHit(\n   74:     uniform HitShaderParams hitParams,\n   75      inout RayData rayData,\n   76      BuiltInTriangleIntersectionAttributes attribs)\n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/MegakernelPathTracer/PathTracer.rt.slang:\n   59  [shader(\"anyhit\")]\n   60  void scatterAnyHit(\n   61:     uniform HitShaderParams hitParams,\n   62      inout ScatterRayData rayData : SV_RayPayload, BuiltInTriangleIntersectionAttributes attribs : SV_IntersectionAttributes)\n   63  {\n   ..\n   74  [shader(\"closesthit\")]\n   75  void scatterClosestHit(\n   76:     uniform HitShaderParams hitParams,\n   77      inout ScatterRayData rayData : SV_RayPayload, BuiltInTriangleIntersectionAttributes attribs : SV_IntersectionAttributes)\n   78  {\n   ..\n  100  [shader(\"anyhit\")]\n  101  void shadowAnyHit(\n  102:     uniform HitShaderParams hitParams,\n  103      inout ShadowRayData rayData : SV_RayPayload, BuiltInTriangleIntersectionAttributes attribs : SV_IntersectionAttributes)\n  104  {\n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/MinimalPathTracer/MinimalPathTracer.rt.slang:\n   33  \n   34      At each hit point (including the primary hit loaded from the G-buffer),\n   35:     analytic light sources (point, directional) are sampled uniformly using\n   36      1 shadow ray, and 1 scatter ray is traced to sample the hemisphere.\n   37      At hit/miss the scatter ray includes light from emissive surface and\n   ..\n  205  \n  206  /** Evaluates the direct illumination from analytic lights.\n  207:     This function samples Falcor's light list uniformly with one shadow ray.\n  208      \\param[in] sd Shading data.\n  209      \\param[in] rayOrigin Ray origin for the shadow ray.\n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/WhittedRayTracer/WhittedRayTracer.rt.slang:\n  207  \n  208  /** Evaluates the direct illumination from all analytic lights.\n  209:     This function samples Falcor's light list uniformly with one shadow ray.\n  210      \\param[in] sd Shading data.\n  211      \\param[in] mtl The material at the shading point.\n\n11 matches across 6 files\n\n\nSearching 1620 files for \"uniform\" (case sensitive)\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Core/BufferTypes/ParameterBlock.cpp:\n 1003          return;\n 1004  \n 1005:     // We will check if the uniform data (e.g., ths stuff stored\n 1006      // in `mData`) has changed since we last wrote into the underlying\n 1007      // constant buffer.\n ....\n 1010      // we are relying on the caller to have already done that.\n 1011      //\n 1012:     // If no changes have been made to uniform data since we filled\n 1013      // in the underlying buffer, then we won't have to do anything.\n 1014      //\n ....\n 1026  \n 1027      // Once we've filled in the underlying constant buffer, we need\n 1028:     // to note the epoch at which we last observed the uniform state,\n 1029      // to avoid redundantly filling in the buffer yet again.\n 1030      //\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Core/BufferTypes/ParameterBlock.h:\n  286      size_t getElementSize() const;\n  287  \n  288:     /** Get offset of a uniform variable inside the block, given its name.\n  289      */\n  290      UniformShaderVarOffset getVariableOffset(const std::string& varName) const;\n  ...\n  333      void const* getRawData() { return mData.data(); }\n  334  \n  335:     /** Get the underlying constant buffer that holds the ordinary/uniform data for this block.\n  336          Be cautious with the returned buffer as it can be invalidated any time you set/bind something\n  337          to the parameter block (or one if its internal sub-blocks).\n  ...\n  359      void createConstantBuffers(const ShaderVar& var);\n  360  \n  361:     /** Get a constant buffer view for the underlying constant buffer for ordinary/uniform data.\n  362      */\n  363      ConstantBufferView::SharedPtr getUnderlyingConstantBufferView();\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Core/Platform/Windows/ProgressBarWin.cpp:\n   38          std::random_device rd;\n   39          std::mt19937 rng;\n   40:         std::uniform_int_distribution<int> dist;\n   41          std::thread thread;\n   42          bool running = true;\n   ..\n   79              // Initialize the random-number generator\n   80              pData->rng = std::mt19937(pData->rd());\n   81:             pData->dist = std::uniform_int_distribution<int>(0, (int)msgList.size() - 1);\n   82          }\n   83          else\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Core/Program/ProgramReflection.cpp:\n  104      // In simple cases, one can track this info top-down, by simply keeping\n  105      // a \"running total\" offset, but that doesn't account for the fact that\n  106:     // `baz` might be a texture, UAV, sampler, or uniform, and the offset\n  107      // we'd need to track for each case is different.\n  108      //\n  ...\n  117      //\n  118      // The `pPrimary` field represents the main path that gets used for\n  119:     // ordinary uniform, texture, buffer, etc. variables. In the 99% case\n  120      // this is all that ever gets used.\n  121      //\n  ...\n 1078      {\n 1079          uint32_t entryPointParamCount = pSlangEntryPoint->getParameterCount();\n 1080:         uint32_t uniformParamCount = 0;\n 1081          for (uint32_t pp = 0; pp < entryPointParamCount; ++pp)\n 1082          {\n ....\n 1086                  continue;\n 1087  \n 1088:             uniformParamCount++;\n 1089          }\n 1090:         return uniformParamCount;\n 1091      }\n 1092  \n ....\n 1097      {\n 1098          // We are going to expect/require that all the entry points have the\n 1099:         // same uniform parameters - or at least that for all the uniform\n 1100          // parameters they declare there is a match.\n 1101          //\n 1102          // We will start by finding out which of the entry points has the\n 1103:         // most uniform parameters.\n 1104          //\n 1105          auto pProgram = pProgramVersion->getProgram();\n ....\n 1786      bool ParameterBlockReflection::hasDefaultConstantBuffer() const\n 1787      {\n 1788:         // A parameter block needs a \"default\" constant buffer whenever its element type requires it to store ordinary/uniform data\n 1789          return getElementType()->getByteSize() != 0;\n 1790      }\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Core/Program/ProgramReflection.h:\n   45  class ParameterBlockReflection;\n   46  \n   47: /** Represents the offset of a uniform shader variable relative to its enclosing type/buffer/block.\n   48  \n   49: A `UniformShaderVarOffset` is a simple wrapper around a byte offset for a uniform shader variable.\n   50  It is used to make API signatures less ambiguous (e.g., about whether an integer represents an\n   51  index, an offset, a count, etc.\n   52  \n   53  A `UniformShaderVarOffset` can also encode an invalid offset (represented as an all-ones bit pattern),\n   54: to indicate that a particular uniform variable is not present.\n   55  \n   56  A `UniformShaderVarOffset` can be obtained from a reflection type or `ParameterBlock` using the\n   ..\n  333  \n  334  A `ShaderVarOffset` can be used to store the offset of a shader variable that might use\n  335: ordinary/uniform data, resources like textures/buffers/samplers, or some combination.\n  336  It effectively stores both a `UniformShaderVarOffset` and a `ResourceShaderVarOffset`\n  337  \n  ...\n  349  {\n  350  public:\n  351:     /** Construct a shader variable offset from its underlying uniform and resource offsets.\n  352      */\n  353      ShaderVarOffset(\n  354:         UniformShaderVarOffset uniform,\n  355          ResourceShaderVarOffset resource)\n  356:         : mUniform(uniform)\n  357          , mResource(resource)\n  358      {}\n  ...\n  401      }\n  402  \n  403:     /** Get the underlying uniform offset.\n  404      */\n  405      UniformShaderVarOffset getUniform() const\n  ...\n  408      }\n  409  \n  410:     /** Get the underlying uniform offset.\n  411  \n  412      This implicit conversion allows a `ShaderVarOffset` to be\n  ...\n  464      }\n  465  \n  466:     /** Type used to store the underlying uniform byte offset.\n  467      */\n  468      using ByteOffset = UniformShaderVarOffset::ByteOffset;\n  469  \n  470:     /** Get the uniform byte offset.\n  471      */\n  472      ByteOffset getByteOffset() const { return mUniform.getByteOffset(); }\n  ...\n  648      /** Get the size in bytes of instances of this type.\n  649  \n  650:     This function only counts uniform/ordinary data, and not resources like textures/buffers/samplers.\n  651      */\n  652      ByteSize getByteSize() const { return mByteSize; }\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Core/Program/ShaderVar.h:\n  111  \n  112      /** Get the byte offset that this shader variable points to inside the parameter block.   \n  113:         Note: If the type of the value being pointed at includes anything other than ordinary/uniform data, then this byte offset will not provide\n  114          complete enough information to re-create the same `ShaderVar` later.\n  115      */\n  ...\n  169      /** Assign raw binary data to the pointed-to value.\n  170  \n  171:         This operation will only assign to the ordinary/\"uniform\" data pointed to by this shader variable, and will not affect any\n  172          nested variables of texture/buffer/sampler types.\n  173      */\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Lights/EmissiveLightSamplerHelpers.slang:\n   44  import Experimental.Scene.Lights.EmissiveLightSamplerInterface;\n   45  \n   46: /** Samples an emissive triangle uniformly by area and evaluates the probability density function.\n   47      Note that the triangle is only emitting on the front-facing side.\n   48      \\param[in] lights The light collection.\n   ..\n   59      const EmissiveTriangle tri = gScene.lightCollection.getTriangle(triangleIndex);\n   60  \n   61:     // Sample the triangle uniformly.\n   62      const float3 barycentrics = sample_triangle(u);\n   63      ls.posW = tri.getPosition(barycentrics);\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Lights/EmissivePowerSampler.cpp:\n   90  EmissivePowerSampler::AliasTable EmissivePowerSampler::generateAliasTable(std::vector<float> weights) {\n   91      uint32_t N = uint32_t(weights.size());\n   92:     std::uniform_int_distribution<uint32_t> rngDist;\n   93  \n   94      double sum = 0.0f;\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Lights/EmissivePowerSampler.slang:\n   63          if (gScene.lightCollection.isEmpty()) return false;\n   64  \n   65:         // Randomly pick a triangle out of the global list with uniform probability.\n   66          float uLight = sampleNext1D(sg);\n   67          uint triangleCount = gScene.lightCollection.triangleCount;\n   ..\n   79          float triangleSelectionPdf = gScene.lightCollection.fluxData[triangleIndex].flux * _emissivePower.invWeightsSum;\n   80  \n   81:         // Sample the triangle uniformly.\n   82          float2 u = sampleNext2D(sg);\n   83  \n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Lights/EmissiveUniformSampler.h:\n   34  namespace Falcor\n   35  {\n   36:     /** Emissive light sampler using uniform sampling of the lights.\n   37  \n   38          This class wraps a LightCollection object, which holds the set of lights to sample.\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Lights/EmissiveUniformSampler.slang:\n   33  import Experimental.Scene.Lights.EmissiveLightSamplerInterface;\n   34  \n   35: /** Emissive light sampler using uniform sampling of the emissive triangles.\n   36  \n   37      The sampler implements the IEmissiveLightSampler interface (see\n   ..\n   57          if (gScene.lightCollection.getActiveTriangleCount() == 0) return false;\n   58  \n   59:         // Randomly pick a triangle out of the global list of active triangles with uniform probability.\n   60          float uLight = sampleNext1D(sg);\n   61          uint triangleCount = gScene.lightCollection.getActiveTriangleCount();\n   ..\n   64          float triangleSelectionPdf = 1.f / (float)triangleCount;\n   65  \n   66:         // Sample the triangle uniformly.\n   67          float2 u = sampleNext2D(sg);\n   68          if (!sampleTriangle(posW, triangleIndex, u, ls)) return false;\n   ..\n   78          \\param[in] upperHemisphere True if only upper hemisphere should be considered.\n   79          \\param[in] triangleIndex Index of selected triangle.\n   80:         \\return Probability of drawing the input triangle from an uniform distribution.\n   81      */\n   82      float evalTriangleSelectionPdf(const float3 posW, const float3 normalW, const bool upperHemisphere, const uint triangleIndex)\n   ..\n   84          if (triangleIndex == LightCollection::kInvalidIndex) return 0.f;\n   85  \n   86:         // Lights are chosen uniformly so the selection probability is just one over the number of lights.\n   87          return gScene.lightCollection.getActiveTriangleCount() > 0 ? 1.f / (float)gScene.lightCollection.getActiveTriangleCount() : 0.f;\n   88      }\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Lights/LightBVHSampler.h:\n   66              bool        useLightingCone = true;             ///< Use lighting cone in BVH nodes to cull backfacing lights when computing probabilities.\n   67              bool        disableNodeFlux = false;            ///< Do not take per-node flux into account in sampling.\n   68:             bool        useUniformTriangleSampling = true;  ///< Use uniform sampling to select a triangle within the sampled leaf node.\n   69  \n   70              SolidAngleBoundMethod solidAngleBoundMethod = SolidAngleBoundMethod::BoxToAverage; ///< Method to use to bound the solid angle subtended by a cluster.\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Lights/LightBVHSampler.slang:\n   78          if (!sampleLightViaBVH(posW, normalW, uLight, trianglePdf, triangleIndex)) return false;\n   79  \n   80:         // Sample a point on the triangle uniformly.\n   81          float2 u = sampleNext2D(sg);\n   82          if (!sampleTriangle(posW, triangleIndex, u, ls)) return false;\n   ..\n  253          \\param[in] posW Shading point in world space.\n  254          \\param[in] normalW Normal at the shading point in world space.\n  255:         \\param[in,out] u Uniform random number. Upon return, u is still uniform and can be used for sampling among the triangles in the leaf node.\n  256          \\param[out] pdf Probabiliy of the sampled leaf node, only valid if true is returned.\n  257          \\param[out] nodeIndex The index of the sampled BVH leaf node, only valid if true is returned.\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Material/TexLODHelpers.slang:\n  278      float3 ellipseAxis0 = rayConeDir - dot(faceNormal, rayConeDir) * faceNormal;                // Project rayConeDir onto the plane.\n  279      float3 rayDirPlaneProjection0 = ellipseAxis0 - dot(rayConeDir, ellipseAxis0) * rayConeDir;  // Project axis onto the plane defined by the ray cone dir.\n  280:     ellipseAxis0 *= rayConeRadiusAtIntersection / max(0.0001f, length(rayDirPlaneProjection0)); // Using uniform triangles to find the scale.\n  281  \n  282      float3 ellipseAxis1 = cross(faceNormal, ellipseAxis0);\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Volume/PhaseFunctions.slang:\n   30  import Utils.Math.MathHelpers;\n   31  \n   32: /** Evaluates the isotropic (uniform) phase function.\n   33  */\n   34  float evalPhaseIsotropic() { return M_1_4PI; }\n   ..\n   45  }\n   46  \n   47: /** Samples a direction according to the isotropic phase function, uniformly distributed over the sphere.\n   48      \\param[in] u Uniform random samples in [0, 1).\n   49  */\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Raytracing/RtStateObject.cpp:\n  134      resultImageLayoutBinding.stageFlags = VK_SHADER_STAGE_RAYGEN_BIT_KHR;\n  135  \n  136:     VkDescriptorSetLayoutBinding uniformBufferBinding{};\n  137:     uniformBufferBinding.binding = 2;\n  138:     uniformBufferBinding.descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;\n  139:     uniformBufferBinding.descriptorCount = 1;\n  140:     uniformBufferBinding.stageFlags = VK_SHADER_STAGE_RAYGEN_BIT_KHR;\n  141  \n  142      std::vector<VkDescriptorSetLayoutBinding> bindings({\n  143          accelerationStructureLayoutBinding,\n  144          resultImageLayoutBinding,\n  145:         uniformBufferBinding\n  146      });\n  147  \n\n/mnt/misc_hdd/dev/Lava/src/Falcor/RenderPasses/Shared/PathTracer/PathTracer.h:\n   87          EmissiveLightSamplerType            mSelectedEmissiveSampler = EmissiveLightSamplerType::LightBVH;  ///< Which emissive light sampler to use.\n   88  \n   89:         EmissiveUniformSampler::Options     mUniformSamplerOptions;         ///< Current options for the uniform sampler.\n   90          LightBVHSampler::Options            mLightBVHSamplerOptions;        ///< Current options for the light BVH sampler.\n   91  \n\n/mnt/misc_hdd/dev/Lava/src/Falcor/RenderPasses/Shared/PathTracer/PathTracerHelpers.slang:\n  203      p[2] *= invSum;\n  204  \n  205:     // Sample based on uniform random number. Rescale u to [0,1) afterwards.\n  206      float invPdf = 0.f;\n  207      float u = sampleNext1D(sg);\n  ...\n  246          if (u < p[1])\n  247          {\n  248:             // Sample analytic light source selected uniformly from the light list.\n  249              // TODO: Sample based on estimated contributions as pdf.\n  250              u /= p[1]; // Rescale to [0,1)\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Scene.cpp:\n  357      resultImageLayoutBinding.stageFlags = VK_SHADER_STAGE_RAYGEN_BIT_KHR;\n  358  \n  359:     VkDescriptorSetLayoutBinding uniformBufferBinding{};\n  360:     uniformBufferBinding.binding = 2;\n  361:     uniformBufferBinding.descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;\n  362:     uniformBufferBinding.descriptorCount = 1;\n  363:     uniformBufferBinding.stageFlags = VK_SHADER_STAGE_RAYGEN_BIT_KHR;\n  364  \n  365      std::vector<VkDescriptorSetLayoutBinding> bindings({\n  366          accelerationStructureLayoutBinding,\n  367          resultImageLayoutBinding,\n  368:         uniformBufferBinding\n  369      });\n  370  \n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Scene.cpp.6:\n  325      resultImageLayoutBinding.stageFlags = VK_SHADER_STAGE_RAYGEN_BIT_KHR;\n  326  \n  327:     VkDescriptorSetLayoutBinding uniformBufferBinding{};\n  328:     uniformBufferBinding.binding = 2;\n  329:     uniformBufferBinding.descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;\n  330:     uniformBufferBinding.descriptorCount = 1;\n  331:     uniformBufferBinding.stageFlags = VK_SHADER_STAGE_RAYGEN_BIT_KHR;\n  332  \n  333      std::vector<VkDescriptorSetLayoutBinding> bindings({\n  334          accelerationStructureLayoutBinding,\n  335          resultImageLayoutBinding,\n  336:         uniformBufferBinding\n  337      });\n  338  \n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/SceneBuilder.cpp:\n 1977  void SceneBuilder::optimizeMaterials() {\n 1978      // This passes optimizes the materials by analyzing the material textures\n 1979:     // and replacing constant textures by uniform material parameters.\n 1980      // NOTE: This code has to be updated if the texture usage changes.\n 1981  \n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Shading.slang:\n  161      ShadingData sd = {};\n  162  \n  163:     // Load base color and opacity. These are sampled from the same texture but either one can be uniform parameters.\n  164      // TODO: Rewrite as single texture fetch followed by extraction of color and opacity to make it easier to optimize.\n  165      float3 baseColor = sampleTexture(mr.baseColor, mr.samplerState, v.texC, md.baseColor, EXTRACT_BASE_COLOR_TYPE(md.flags), lod).rgb;\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Lights/LightCollection.cpp:\n  450          else\n  451          {\n  452:             // TODO: Currently we don't detect uniform radiance for textured lights, so just look at whether the mesh light is textured or not.\n  453              // This code will change when we tag individual triangles as textured vs non-textured.\n  454              bool isTextured = pScene->getMaterial(mMeshLights[tri.lightIdx].materialID)->getEmissiveTexture() != nullptr;\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Lights/Lights.slang:\n  412  float2 hammersley(uint index) {\n  413      // Compute Hammersley sequence\n  414:     // TODO: these should come from uniforms\n  415      // TODO: we should do this with logical bit operations\n  416      const uint numSamples = uint(IBL_INTEGRATION_IMPORTANCE_SAMPLING_COUNT);\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/AlphaTest.slang:\n  135          // Interpolate alpha threshold from noise at two scales\n  136          float x = (1 - lerpFactor) * alpha.x + lerpFactor * alpha.y;\n  137:         // Pass into CDF to compute uniformly distrib threshold\n  138          float a = min(lerpFactor, 1 - lerpFactor);\n  139          float3 cases = float3(x * x / (2 * a * (1 - a)), (x - 0.5 * a) / (1 - a), 1.0 - ((1 - x) * (1 - x) / (2 * a * (1 - a))));\n  140:         // Find our final, uniformly distributed alpha threshold\n  141          alphaCompare = (x < (1 - a)) ? ((x < a) ? cases.x : cases.y) : cases.z;\n  142          alphaCompare = clamp(alphaCompare, 1.0e-6, 1.0f);\n  ...\n  158          float x = (1 - lerpFactor) * alpha.x + lerpFactor * alpha.y;\n  159          float a = min(lerpFactor, 1 - lerpFactor);\n  160:         // Pass into CDF to compute uniformly distrib threshold\n  161          float3 cases = float3(x * x / (2 * a * (1 - a)), (x - 0.5 * a) / (1 - a), 1.0 - ((1 - x) * (1 - x) / (2 * a * (1 - a))));\n  162:         // Find our final, uniformly distributed alpha threshold\n  163          alphaCompare = (x < (1 - a)) ? ((x < a) ? cases.x : cases.y) : cases.z;\n  164          alphaCompare = clamp(alphaCompare, 1e-6f, 1.0f);\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/Material.h:\n  172  \n  173      /** Optimize texture usage for the given texture slot.\n  174:         This function may replace constant textures by uniform material parameters etc.\n  175          \\param[in] slot The texture slot.\n  176          \\param[in] texInfo Information about the texture bound to this slot.\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Helpers.slang:\n  280          // Interpolate alpha threshold from noise at two scales\n  281          float x = (1 - lerpFactor) * alpha.x + lerpFactor * alpha.y;\n  282:         // Pass into CDF to compute uniformly distrib threshold\n  283          float a = min(lerpFactor, 1 - lerpFactor);\n  284          float3 cases = float3(x * x / (2 * a * (1 - a)), (x - 0.5 * a) / (1 - a), 1.0 - ((1 - x) * (1 - x) / (2 * a * (1 - a))));\n  285:         // Find our final, uniformly distributed alpha threshold\n  286          alphaCompare = (x < (1 - a)) ? ((x < a) ? cases.x : cases.y) : cases.z;\n  287          alphaCompare = clamp(alphaCompare, 1.0e-6, 1.0f);\n  ...\n  303          float x = (1 - lerpFactor) * alpha.x + lerpFactor * alpha.y;\n  304          float a = min(lerpFactor, 1 - lerpFactor);\n  305:         // Pass into CDF to compute uniformly distrib threshold\n  306          float3 cases = float3(x * x / (2 * a * (1 - a)), (x - 0.5 * a) / (1 - a), 1.0 - ((1 - x) * (1 - x) / (2 * a * (1 - a))));\n  307:         // Find our final, uniformly distributed alpha threshold\n  308          alphaCompare = (x < (1 - a)) ? ((x < a) ? cases.x : cases.y) : cases.z;\n  309          alphaCompare = clamp(alphaCompare, 1e-6f, 1.0f);\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/SampleGenerators/StratifiedSamplePattern.cpp:\n   68      float2 StratifiedSamplePattern::next()\n   69      {\n   70:         auto dist = std::uniform_real_distribution<float>();\n   71          auto u = [&]() { return dist(mRng); };\n   72  \n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/SampleGenerators/StratifiedSamplePattern.h:\n   38      The number of samples is determined at creation time, but note that\n   39      the sample generator keeps generating random samples indefinitely.\n   40:     The distribution is therefore uniform random after each multiple of\n   41      getSampleCount() samples.\n   42  \n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Sampling/AliasTable.cpp:\n   63          if (weights.size() >= std::numeric_limits<uint32_t>::max()) throw std::runtime_error(\"Too many entries for alias table.\");\n   64  \n   65:         std::uniform_int_distribution<uint32_t> rngDist;\n   66  \n   67          mpWeights = Buffer::createStructured(mpDevice, sizeof(float), mCount, Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None, weights.data());\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Sampling/AliasTable.h:\n   69      struct Item {\n   70          float threshold;                ///< If rand() < threshold, pick indexB (else pick indexA)\n   71:         uint32_t indexA;                ///< The \"redirect\" index, if uniform sampling would overweight indexB.\n   72:         uint32_t indexB;                ///< The original / permutation index, sampled uniformly in [0...mCount-1]\n   73          uint32_t _pad;\n   74      };\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Sampling/AliasTable.slang:\n   61  \n   62      /** Sample from the table proportional to the weights.\n   63:         \\param[in] rnd Two uniform random number in [0..1).\n   64          \\return Returns the sampled item index.\n   65      */\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Sampling/SampleGenerator.cpp:\n   59      void SampleGenerator::registerAll()\n   60      {\n   61:         registerType(SAMPLE_GENERATOR_TINY_UNIFORM, \"Tiny uniform (32-bit)\", [] () { return SharedPtr(new SampleGenerator(SAMPLE_GENERATOR_TINY_UNIFORM)); });\n   62          registerType(SAMPLE_GENERATOR_UNIFORM, \"Uniform (128-bit)\", [] () { return SharedPtr(new SampleGenerator(SAMPLE_GENERATOR_UNIFORM)); });\n   63      }\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Sampling/TinyUniformSampleGenerator.slang:\n   31  import Utils.Math.BitTricks;\n   32  \n   33: /** Tiny uniform random sample generator.\n   34  \n   35      This generator has only 32 bit state and sub-optimal statistical properties.\n\n/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Sampling/UniformSampleGenerator.slang:\n   31  import Utils.Math.BitTricks;\n   32  \n   33: /** Default uniform pseudorandom number generator.\n   34  \n   35      This generator has 128 bit state and should have acceptable statistical\n\n/mnt/misc_hdd/dev/Lava/src/houdini/soho/parameters/lava.ds.bak:\n 2436      }\n 2437      parm {\n 2438: \tSOHO_TOGGLE(lv_volumeuniform, \"Uniform Volume\", \"Sampling\", 0)\n 2439: \tLAVA_PROP(\"object\", \"volumeuniform\")\n 2440      }\n 2441      parm {\n 2442: \tSOHO_FLOAT(lv_volumeuniformflipthresh, \"Uniform Volume Flipped Normal Detection Threshold\", \"Sampling\", 0)\n 2443: \tLAVA_PROP(\"object\", \"volumeuniformflipthresh\")\n 2444      }\n 2445      parm {\n 2446: \tSOHO_INT(lv_volumeuniformtype, \"Uniform Volume Type\", \"Sampling\", 0)\n 2447  \tmenu {\n 2448  \t    \"0\"\t\"Continuous\"\n 2449  \t    \"1\"\t\"Segment\"\n 2450  \t}\n 2451: \tLAVA_PROP(\"object\", \"volumeuniformtype\")\n 2452      }\n 2453      parm {\n ....\n 2590  \t\t\"nonraster\"\t\"Non-Raster Measuring\"\n 2591  \t\t\"raster\"\t\"Raster Space Measuring\"\n 2592: \t\t\"uniform\"\t\"Uniform Measuring\"\n 2593  \t    }\n 2594  \t}\n\n/mnt/misc_hdd/dev/Lava/src/houdini/soho/python2.7/LSDlava.py:\n  279      Object(\"volumesteprate\", \"float\", \"lv_volumesteprate\")\n  280      Object(\"volumesurface\", \"bool\", \"lv_volumesurface\")\n  281:     Object(\"volumeuniform\", \"bool\", \"lv_volumeuniform\")\n  282:     Object(\"volumeuniformflipthresh\", \"float\", \"lv_volumeuniformflipthresh\")\n  283:     Object(\"volumeuniformtype\", \"int\", \"lv_volumeuniformtype\")\n  284      Object(\"volumeupvector\", \"float\", \"lv_volumeupvector\")\n  285      Object(\"volumezerothresh\", \"float\", \"lv_volumezerothresh\")\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/bgeo/Attribute.h:\n   61  \n   62      // Katana needs:\n   63:     // scope (primitive/constant, face/uniform, point/varying, vertex/facevarying\n   64      //    this is defined by which attribute list it is a part of.\n   65      // inputType (float, double, integer, string, color3, color4, normal3, etc)\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/bgeo/parser/Mesh.cpp:\n  116  /*virtual*/ void Mesh::loadUniformData(UT_JSONParser& parser) {\n  117      std::cout << \"Mesh::loadUniformData\\n\";\n  118:     UniformDataHandle uniformHandle(*this);\n  119:     BGEO_CHECK(parser.parseObject(uniformHandle));\n  120      std::cout << \"Mesh::loadUniformData done\\n\";\n  121  }\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/bgeo/parser/PackedGeometry.cpp:\n  120  /*virtual*/ void PackedGeometry::loadUniformData(UT_JSONParser& parser)\n  121  {\n  122:     UniformDataHandle uniformHandle(*this);\n  123:     BGEO_CHECK(parser.parseObject(uniformHandle));\n  124  }\n  125  \n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/bgeo/parser/Poly.cpp:\n  103  /*virtual*/ void Poly::loadUniformData(UT_JSONParser& parser)\n  104  {\n  105:     UniformDataHandle uniformHandle(*this);\n  106:     BGEO_CHECK(parser.parseObject(uniformHandle));\n  107  }\n  108  \n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/bgeo/parser/PolygonRun.cpp:\n  106  \n  107  void PolygonRun::loadUniformData(UT_JSONParser& parser) {\n  108:     UniformDataHandle uniformHandle(*this);\n  109:     BGEO_CHECK(parser.parseObject(uniformHandle));\n  110  }\n  111  \n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/bgeo/parser/PolySoup.cpp:\n  132  void PolySoup::loadUniformData(UT_JSONParser& parser)\n  133  {\n  134:     UniformDataHandle uniformHandle(*this);\n  135:     BGEO_CHECK(parser.parseObject(uniformHandle));\n  136  }\n  137  \n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/bgeo/parser/Run.cpp:\n   71      BGEO_CHECK(parser.parseObject(stringsHandle));\n   72  \n   73:     parseArrayKey(parser, \"uniformfields\");\n   74      runPrimitive->loadUniformData(parser);\n   75  }\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/bgeo/parser/Volume.cpp:\n  118  void Volume::loadUniformData(UT_JSONParser& parser)\n  119  {\n  120:     UniformDataHandle uniformHandle(*this);\n  121:     BGEO_CHECK(parser.parseObject(uniformHandle));\n  122  }\n  123  \n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/cube_even_odd.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/cube_even_odd.geo:\n  144  \t    [\"type\",\"run\",\"runtype\",\"Poly\",\"varyingfields\",\n  145  \t\t[\"vertex\"\n  146: \t\t],\"uniformfields\",\n  147  \t\t{\n  148  \t\t    \"closed\":true\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/cube_multi_groups.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/cube_multi_groups.geo:\n  113  \t    [\"type\",\"run\",\"runtype\",\"Poly\",\"varyingfields\",\n  114  \t\t[\"vertex\"\n  115: \t\t],\"uniformfields\",\n  116  \t\t{\n  117  \t\t    \"closed\":true\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/cube_multi_groups_14.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/cube_multi_groups_14.geo:\n  109  \t    [\"type\",\"run\",\"runtype\",\"Poly\",\"varyingfields\",\n  110  \t\t[\"vertex\"\n  111: \t\t],\"uniformfields\",\n  112  \t\t{\n  113  \t\t    \"closed\":true\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/cube_multi_groups_15.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/cube_multi_groups_15.geo:\n  109  \t    [\"type\",\"run\",\"runtype\",\"Poly\",\"varyingfields\",\n  110  \t\t[\"vertex\"\n  111: \t\t],\"uniformfields\",\n  112  \t\t{\n  113  \t\t    \"closed\":true\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/cube_primgroup.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/cube_primgroup.geo:\n   65  \t    [\"type\",\"run\",\"runtype\",\"Poly\",\"varyingfields\",\n   66  \t\t[\"vertex\"\n   67: \t\t],\"uniformfields\",\n   68  \t\t{\n   69  \t\t    \"closed\":true\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/cube_primgroup_14.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/cube_primgroup_14.geo:\n   61  \t    [\"type\",\"run\",\"runtype\",\"Poly\",\"varyingfields\",\n   62  \t\t[\"vertex\"\n   63: \t\t],\"uniformfields\",\n   64  \t\t{\n   65  \t\t    \"closed\":true\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/cube_primgroup_15.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/cube_primgroup_15.geo:\n   61  \t    [\"type\",\"run\",\"runtype\",\"Poly\",\"varyingfields\",\n   62  \t\t[\"vertex\"\n   63: \t\t],\"uniformfields\",\n   64  \t\t{\n   65  \t\t    \"closed\":true\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/cubes_connectivity.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/cubes_connectivity.geo:\n  290  \t    [\"type\",\"run\",\"runtype\",\"Poly\",\"varyingfields\",\n  291  \t\t[\"vertex\"\n  292: \t\t],\"uniformfields\",\n  293  \t\t{\n  294  \t\t    \"closed\":true\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/grid_tetra.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/grid_tetra.geo:\n  110  \t    [\"type\",\"run\",\"runtype\",\"Poly\",\"varyingfields\",\n  111  \t\t[\"vertex\"\n  112: \t\t],\"uniformfields\",\n  113  \t\t{\n  114  \t\t    \"closed\":true\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/grid_tetra_14.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/grid_tetra_14.geo:\n  110  \t    [\"type\",\"run\",\"runtype\",\"Poly\",\"varyingfields\",\n  111  \t\t[\"vertex\"\n  112: \t\t],\"uniformfields\",\n  113  \t\t{\n  114  \t\t    \"closed\":true\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/grid_tetra_15.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/grid_tetra_15.geo:\n  110  \t    [\"type\",\"run\",\"runtype\",\"Poly\",\"varyingfields\",\n  111  \t\t[\"vertex\"\n  112: \t\t],\"uniformfields\",\n  113  \t\t{\n  114  \t\t    \"closed\":true\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/multivolume.geo:\n  184  \t    [\"type\",\"run\",\"runtype\",\"Volume\",\"varyingfields\",\n  185  \t\t[\"vertex\",\"border\",\"compression\",\"voxels\",\"visualization\"\n  186: \t\t],\"uniformfields\",\n  187  \t\t{\n  188  \t\t    \"taperx\":1,\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/multivolume_15.geo:\n  182  \t    [\"type\",\"run\",\"runtype\",\"Volume\",\"varyingfields\",\n  183  \t\t[\"vertex\",\"border\",\"compression\",\"sharedvoxels\",\"visualization\"\n  184: \t\t],\"uniformfields\",\n  185  \t\t{\n  186  \t\t    \"taperx\":1,\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/multivolume_16.geo:\n  182  \t    [\"type\",\"run\",\"runtype\",\"Volume\",\"varyingfields\",\n  183  \t\t[\"vertex\",\"border\",\"compression\",\"sharedvoxels\",\"visualization\"\n  184: \t\t],\"uniformfields\",\n  185  \t\t{\n  186  \t\t    \"taperx\":1,\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack4_simple.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack4_simple.geo:\n   52  \t    [\"type\",\"run\",\"runtype\",\"PackedGeometry\",\"varyingfields\",\n   53  \t\t[\"parameters\",\"vertex\"\n   54: \t\t],\"uniformfields\",\n   55  \t\t{\n   56  \t\t    \"viewportlod\":\"full\",\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack4_simple_16.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack4_simple_16.geo:\n   52  \t    [\"type\",\"run\",\"runtype\",\"PackedGeometry\",\"varyingfields\",\n   53  \t\t[\"parameters\",\"vertex\"\n   54: \t\t],\"uniformfields\",\n   55  \t\t{\n   56  \t\t    \"viewportlod\":\"full\",\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack4_simple_16_5.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack4_simple_16_5.geo:\n   52  \t    [\"type\",\"run\",\"runtype\",\"PackedGeometry\",\"varyingfields\",\n   53  \t\t[\"parameters\",\"vertex\"\n   54: \t\t],\"uniformfields\",\n   55  \t\t{\n   56  \t\t    \"viewportlod\":\"full\",\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack4_unshared.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack4_unshared.geo:\n   70  \t    [\"type\",\"run\",\"runtype\",\"PackedGeometry\",\"varyingfields\",\n   71  \t\t[\"parameters\",\"pivot\",\"vertex\"\n   72: \t\t],\"uniformfields\",\n   73  \t\t{\n   74  \t\t    \"viewportlod\":\"full\",\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack4_unshared_16.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack4_unshared_16.geo:\n   70  \t    [\"type\",\"run\",\"runtype\",\"PackedGeometry\",\"varyingfields\",\n   71  \t\t[\"parameters\",\"pivot\",\"vertex\"\n   72: \t\t],\"uniformfields\",\n   73  \t\t{\n   74  \t\t    \"viewportlod\":\"full\",\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack4_unshared_16_5.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack4_unshared_16_5.geo:\n   70  \t    [\"type\",\"run\",\"runtype\",\"PackedGeometry\",\"varyingfields\",\n   71  \t\t[\"parameters\",\"pivot\",\"vertex\"\n   72: \t\t],\"uniformfields\",\n   73  \t\t{\n   74  \t\t    \"viewportlod\":\"full\",\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack4_xform.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack4_xform.geo:\n   52  \t    [\"type\",\"run\",\"runtype\",\"PackedGeometry\",\"varyingfields\",\n   53  \t\t[\"parameters\",\"transform\",\"vertex\"\n   54: \t\t],\"uniformfields\",\n   55  \t\t{\n   56  \t\t    \"viewportlod\":\"full\",\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack4_xform_16.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack4_xform_16.geo:\n   52  \t    [\"type\",\"run\",\"runtype\",\"PackedGeometry\",\"varyingfields\",\n   53  \t\t[\"parameters\",\"transform\",\"vertex\"\n   54: \t\t],\"uniformfields\",\n   55  \t\t{\n   56  \t\t    \"viewportlod\":\"full\",\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack4_xform_16_5.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack4_xform_16_5.geo:\n   52  \t    [\"type\",\"run\",\"runtype\",\"PackedGeometry\",\"varyingfields\",\n   53  \t\t[\"parameters\",\"transform\",\"vertex\"\n   54: \t\t],\"uniformfields\",\n   55  \t\t{\n   56  \t\t    \"viewportlod\":\"full\",\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack_fragments2.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack_fragments2.geo:\n  378  \t\t\t[\"type\",\"run\",\"runtype\",\"Poly\",\"varyingfields\",\n  379  \t\t\t    [\"vertex\"\n  380: \t\t\t    ],\"uniformfields\",\n  381  \t\t\t    {\n  382  \t\t\t\t\"closed\":true\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack_fragments6.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack_fragments6.geo:\n   90  \t    [\"type\",\"run\",\"runtype\",\"PackedFragment\",\"varyingfields\",\n   91  \t\t[\"parameters\",\"pivot\",\"vertex\"\n   92: \t\t],\"uniformfields\",\n   93  \t\t{\n   94  \t\t    \"viewportlod\":\"full\",\n   ..\n 1071  \t\t\t[\"type\",\"run\",\"runtype\",\"Poly\",\"varyingfields\",\n 1072  \t\t\t    [\"vertex\"\n 1073: \t\t\t    ],\"uniformfields\",\n 1074  \t\t\t    {\n 1075  \t\t\t\t\"closed\":true\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack_fragments6_16.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack_fragments6_16.geo:\n   90  \t    [\"type\",\"run\",\"runtype\",\"PackedFragment\",\"varyingfields\",\n   91  \t\t[\"parameters\",\"pivot\",\"vertex\"\n   92: \t\t],\"uniformfields\",\n   93  \t\t{\n   94  \t\t    \"viewportlod\":\"full\",\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack_fragments6_16_5.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack_fragments6_16_5.geo:\n   90  \t    [\"type\",\"run\",\"runtype\",\"PackedFragment\",\"varyingfields\",\n   91  \t\t[\"parameters\",\"pivot\",\"vertex\"\n   92: \t\t],\"uniformfields\",\n   93  \t\t{\n   94  \t\t    \"viewportlod\":\"full\",\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack_fragments6_anim.0020.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack_fragments6_anim.0020.geo:\n  729  \t    [\"type\",\"run\",\"runtype\",\"PackedFragment\",\"varyingfields\",\n  730  \t\t[\"parameters\",\"pivot\",\"transform\",\"vertex\"\n  731: \t\t],\"uniformfields\",\n  732  \t\t{\n  733  \t\t    \"viewportlod\":\"full\"\n  ...\n 1975  \t\t\t[\"type\",\"run\",\"runtype\",\"Poly\",\"varyingfields\",\n 1976  \t\t\t    [\"vertex\"\n 1977: \t\t\t    ],\"uniformfields\",\n 1978  \t\t\t    {\n 1979  \t\t\t\t\"closed\":true\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack_fragments6_anim_16.0020.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack_fragments6_anim_16.0020.geo:\n  759  \t    [\"type\",\"run\",\"runtype\",\"PackedFragment\",\"varyingfields\",\n  760  \t\t[\"parameters\",\"pivot\",\"transform\",\"vertex\"\n  761: \t\t],\"uniformfields\",\n  762  \t\t{\n  763  \t\t    \"viewportlod\":\"full\"\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack_fragments6_anim_16_5.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack_fragments6_anim_16_5.geo:\n  759  \t    [\"type\",\"run\",\"runtype\",\"PackedFragment\",\"varyingfields\",\n  760  \t\t[\"parameters\",\"pivot\",\"transform\",\"vertex\"\n  761: \t\t],\"uniformfields\",\n  762  \t\t{\n  763  \t\t    \"viewportlod\":\"full\"\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack_level2.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack_level2.geo:\n  133  \t\t\t[\"type\",\"run\",\"runtype\",\"PackedGeometry\",\"varyingfields\",\n  134  \t\t\t    [\"parameters\",\"transform\",\"vertex\"\n  135: \t\t\t    ],\"uniformfields\",\n  136  \t\t\t    {\n  137  \t\t\t\t\"viewportlod\":\"full\",\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack_level2_16.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack_level2_16.geo:\n  133  \t\t\t[\"type\",\"run\",\"runtype\",\"PackedGeometry\",\"varyingfields\",\n  134  \t\t\t    [\"parameters\",\"transform\",\"vertex\"\n  135: \t\t\t    ],\"uniformfields\",\n  136  \t\t\t    {\n  137  \t\t\t\t\"viewportlod\":\"full\",\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack_level2_16_5.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pack_level2_16_5.geo:\n  133  \t\t\t[\"type\",\"run\",\"runtype\",\"PackedGeometry\",\"varyingfields\",\n  134  \t\t\t    [\"parameters\",\"transform\",\"vertex\"\n  135: \t\t\t    ],\"uniformfields\",\n  136  \t\t\t    {\n  137  \t\t\t\t\"viewportlod\":\"full\",\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/packed_disk_frames.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/packed_disk_frames.geo:\n   70  \t    [\"type\",\"run\",\"runtype\",\"PackedDisk\",\"varyingfields\",\n   71  \t\t[\"parameters\",\"vertex\"\n   72: \t\t],\"uniformfields\",\n   73  \t\t{\n   74  \t\t    \"viewportlod\":\"full\",\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/packed_disk_frames_16.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/packed_disk_frames_16.geo:\n   70  \t    [\"type\",\"run\",\"runtype\",\"PackedDisk\",\"varyingfields\",\n   71  \t\t[\"parameters\",\"vertex\"\n   72: \t\t],\"uniformfields\",\n   73  \t\t{\n   74  \t\t    \"viewportlod\":\"full\",\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/packed_disk_frames_16_5.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/packed_disk_frames_16_5.geo:\n   70  \t    [\"type\",\"run\",\"runtype\",\"PackedDisk\",\"varyingfields\",\n   71  \t\t[\"parameters\",\"vertex\"\n   72: \t\t],\"uniformfields\",\n   73  \t\t{\n   74  \t\t    \"viewportlod\":\"full\",\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/psoup_cubes.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/psoup_cubes.geo:\n  844  \t    [\"type\",\"run\",\"runtype\",\"PolySoup\",\"varyingfields\",\n  845  \t\t[\"vertex\",\"polyinfo\"\n  846: \t\t],\"uniformfields\",\n  847  \t\t{\n  848  \t\t}\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/psoup_cubes_16.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/psoup_cubes_16.geo:\n  844  \t    [\"type\",\"run\",\"runtype\",\"PolySoup\",\"varyingfields\",\n  845  \t\t[\"vertex\",\"polyinfo\"\n  846: \t\t],\"uniformfields\",\n  847  \t\t{\n  848  \t\t}\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pyro_crash_lo.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pyro_crash_lo.geo:\n  192  \t    [\"type\",\"run\",\"runtype\",\"Volume\",\"varyingfields\",\n  193  \t\t[\"vertex\",\"transform\",\"border\",\"compression\",\"sharedvoxels\",\"visualization\"\n  194: \t\t],\"uniformfields\",\n  195  \t\t{\n  196  \t\t    \"taperx\":1,\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/pyrosample.geo:\n  200  \t    [\"type\",\"run\",\"runtype\",\"Volume\",\"varyingfields\",\n  201  \t\t[\"vertex\",\"transform\",\"res\",\"border\",\"compression\",\"voxels\",\"visualization\"\n  202: \t\t],\"uniformfields\",\n  203  \t\t{\n  204  \t\t    \"taperx\":1,\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/vol5_noshared.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/vol5_noshared.geo:\n   73  \t    [\"type\",\"run\",\"runtype\",\"Volume\",\"varyingfields\",\n   74  \t\t[\"vertex\",\"border\",\"compression\",\"sharedvoxels\",\"visualization\"\n   75: \t\t],\"uniformfields\",\n   76  \t\t{\n   77  \t\t    \"taperx\":1,\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/vol5_noshared_16.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/vol5_noshared_16.geo:\n   73  \t    [\"type\",\"run\",\"runtype\",\"Volume\",\"varyingfields\",\n   74  \t\t[\"vertex\",\"border\",\"compression\",\"sharedvoxels\",\"visualization\"\n   75: \t\t],\"uniformfields\",\n   76  \t\t{\n   77  \t\t    \"taperx\":1,\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/vol5_shared.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/vol5_shared.geo:\n   73  \t    [\"type\",\"run\",\"runtype\",\"Volume\",\"varyingfields\",\n   74  \t\t[\"vertex\",\"border\",\"compression\",\"visualization\"\n   75: \t\t],\"uniformfields\",\n   76  \t\t{\n   77  \t\t    \"sharedvoxels\":\"voxels:0x7efbc6ed2500\",\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/vol5_shared_16.bgeo:\n    <binary>\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/test/geo/vol5_shared_16.geo:\n   73  \t    [\"type\",\"run\",\"runtype\",\"Volume\",\"varyingfields\",\n   74  \t\t[\"vertex\",\"border\",\"compression\",\"visualization\"\n   75: \t\t],\"uniformfields\",\n   76  \t\t{\n   77  \t\t    \"sharedvoxels\":\"voxels:0x7fb598233f80\",\n\n/mnt/misc_hdd/dev/Lava/src/lava_lib/sdl_display/sdl_opengl_window.cpp:\n  202      layout(location=0) in vec2 position;\n  203      layout(location=1) in vec2 coordinate;\n  204:     uniform vec2 translation;\n  205:     uniform float scale;\n  206      out vec2 Coordinate;\n  207      void main()\n  ...\n  216      #version 330\n  217      in vec2 Coordinate;\n  218:     uniform sampler2D tex;\n  219:     uniform float gamma;\n  220:     uniform float exposureLevel;\n  221      layout(location=0) out vec4 outColor;\n  222:     uniform int displayMode;\n  223      vec3 exposure(vec3 colour, float relative_fstop) {\n  224         return colour * pow(2.0,relative_fstop);\n\n/mnt/misc_hdd/dev/Lava/src/nvpro_core/GL/glcustom.h:\n 2494  typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXPROC) (GLuint index);\n 2495  typedef void (APIENTRYP PFNGLCOPYBUFFERSUBDATAPROC) (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);\n 2496: typedef void (APIENTRYP PFNGLGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);\n 2497: typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);\n 2498: typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);\n 2499: typedef GLuint (APIENTRYP PFNGLGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);\n 2500: typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);\n 2501: typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);\n 2502: typedef void (APIENTRYP PFNGLUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);\n 2503  #ifdef GL_GLEXT_PROTOTYPES\n 2504  GLAPI void APIENTRY glDrawArraysInstanced (GLenum mode, GLint first, GLsizei count, GLsizei instancecount);\n ....\n 2507  GLAPI void APIENTRY glPrimitiveRestartIndex (GLuint index);\n 2508  GLAPI void APIENTRY glCopyBufferSubData (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);\n 2509: GLAPI void APIENTRY glGetUniformIndices (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);\n 2510: GLAPI void APIENTRY glGetActiveUniformsiv (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);\n 2511: GLAPI void APIENTRY glGetActiveUniformName (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);\n 2512: GLAPI GLuint APIENTRY glGetUniformBlockIndex (GLuint program, const GLchar *uniformBlockName);\n 2513: GLAPI void APIENTRY glGetActiveUniformBlockiv (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);\n 2514: GLAPI void APIENTRY glGetActiveUniformBlockName (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);\n 2515: GLAPI void APIENTRY glUniformBlockBinding (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);\n 2516  #endif\n 2517  #endif /* GL_VERSION_3_1 */\n ....\n 4191  #endif /* GL_ARB_explicit_attrib_location */\n 4192  \n 4193: #ifndef GL_ARB_explicit_uniform_location\n 4194: #define GL_ARB_explicit_uniform_location 1\n 4195: #endif /* GL_ARB_explicit_uniform_location */\n 4196  \n 4197  #ifndef GL_ARB_fragment_coord_conventions\n ....\n 4874  #endif /* GL_ARB_transform_feedback_overflow_query */\n 4875  \n 4876: #ifndef GL_ARB_uniform_buffer_object\n 4877: #define GL_ARB_uniform_buffer_object 1\n 4878: #endif /* GL_ARB_uniform_buffer_object */\n 4879  \n 4880  #ifndef GL_ARB_vertex_array_bgra\n ....\n 6976  #endif /* GL_NV_texture_rectangle_compressed */\n 6977  \n 6978: #ifndef GL_NV_uniform_buffer_unified_memory\n 6979: #define GL_NV_uniform_buffer_unified_memory 1\n 6980  #define GL_UNIFORM_BUFFER_UNIFIED_NV      0x936E\n 6981  #define GL_UNIFORM_BUFFER_ADDRESS_NV      0x936F\n 6982  #define GL_UNIFORM_BUFFER_LENGTH_NV       0x9370\n 6983: #endif /* GL_NV_uniform_buffer_unified_memory */\n 6984  \n 6985  #ifndef GL_NV_vertex_attrib_integer_64bit\n\n/mnt/misc_hdd/dev/Lava/src/nvpro_core/GL/glsubset.h:\n 2494  typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXPROC) (GLuint index);\n 2495  typedef void (APIENTRYP PFNGLCOPYBUFFERSUBDATAPROC) (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);\n 2496: typedef void (APIENTRYP PFNGLGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);\n 2497: typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);\n 2498: typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);\n 2499: typedef GLuint (APIENTRYP PFNGLGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);\n 2500: typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);\n 2501: typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);\n 2502: typedef void (APIENTRYP PFNGLUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);\n 2503  #ifdef GL_GLEXT_PROTOTYPES\n 2504  GLAPI void APIENTRY glDrawArraysInstanced (GLenum mode, GLint first, GLsizei count, GLsizei instancecount);\n ....\n 2507  GLAPI void APIENTRY glPrimitiveRestartIndex (GLuint index);\n 2508  GLAPI void APIENTRY glCopyBufferSubData (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);\n 2509: GLAPI void APIENTRY glGetUniformIndices (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);\n 2510: GLAPI void APIENTRY glGetActiveUniformsiv (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);\n 2511: GLAPI void APIENTRY glGetActiveUniformName (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);\n 2512: GLAPI GLuint APIENTRY glGetUniformBlockIndex (GLuint program, const GLchar *uniformBlockName);\n 2513: GLAPI void APIENTRY glGetActiveUniformBlockiv (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);\n 2514: GLAPI void APIENTRY glGetActiveUniformBlockName (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);\n 2515: GLAPI void APIENTRY glUniformBlockBinding (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);\n 2516  #endif\n 2517  #endif /* GL_VERSION_3_1 */\n ....\n 5221  #endif /* GL_NV_texture_multisample */\n 5222  \n 5223: #ifndef GL_NV_uniform_buffer_unified_memory\n 5224: #define GL_NV_uniform_buffer_unified_memory 1\n 5225  #define GL_UNIFORM_BUFFER_UNIFIED_NV      0x936E\n 5226  #define GL_UNIFORM_BUFFER_ADDRESS_NV      0x936F\n 5227  #define GL_UNIFORM_BUFFER_LENGTH_NV       0x9370\n 5228: #endif /* GL_NV_uniform_buffer_unified_memory */\n 5229  \n 5230  #ifndef GL_NV_vertex_buffer_unified_memory\n\n/mnt/misc_hdd/dev/Lava/src/nvpro_core/imgui/backends/imgui_impl_gl.cpp:\n   24  \n   25    const GLchar* vertex_shader =\n   26:       \"layout(location=0) uniform mat4 ProjMtx;\\n\"\n   27        \"layout(location=0) in vec2 Position;\\n\"\n   28        \"layout(location=1) in vec2 UV;\\n\"\n   ..\n   38  \n   39    const GLchar* fragment_shader =\n   40:       \"layout(location=1, binding=0) uniform sampler2D Texture;\\n\"\n   41        \"in vec2 Frag_UV;\\n\"\n   42        \"in vec4 Frag_Color;\\n\"\n\n/mnt/misc_hdd/dev/Lava/src/nvpro_core/nvgl/extensions_gl.cpp:\n   93  int has_GL_NV_stereo_view_rendering = 0;\n   94  int has_GL_NV_texture_multisample = 0;\n   95: int has_GL_NV_uniform_buffer_unified_memory = 0;\n   96  int has_GL_NV_vertex_buffer_unified_memory = 0;\n   97  int has_GL_NV_viewport_swizzle = 0;\n   ..\n  198    has_GL_NV_stereo_view_rendering = load_GL_NV_stereo_view_rendering(fnGetProcAddress);\n  199    has_GL_NV_texture_multisample = load_GL_NV_texture_multisample(fnGetProcAddress);\n  200:   has_GL_NV_uniform_buffer_unified_memory = load_GL_NV_uniform_buffer_unified_memory(fnGetProcAddress);\n  201    has_GL_NV_vertex_buffer_unified_memory = load_GL_NV_vertex_buffer_unified_memory(fnGetProcAddress);\n  202    has_GL_NV_viewport_swizzle = load_GL_NV_viewport_swizzle(fnGetProcAddress);\n  ...\n 2128    pfn_glCopyBufferSubData(readTarget,writeTarget,readOffset,writeOffset,size);\n 2129  }\n 2130: GLAPI void APIENTRY glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar* const* uniformNames, GLuint* uniformIndices)\n 2131  {\n 2132    assert(pfn_glGetUniformIndices);\n 2133:   pfn_glGetUniformIndices(program,uniformCount,uniformNames,uniformIndices);\n 2134  }\n 2135: GLAPI void APIENTRY glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint* uniformIndices, GLenum pname, GLint* params)\n 2136  {\n 2137    assert(pfn_glGetActiveUniformsiv);\n 2138:   pfn_glGetActiveUniformsiv(program,uniformCount,uniformIndices,pname,params);\n 2139  }\n 2140: GLAPI void APIENTRY glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformName)\n 2141  {\n 2142    assert(pfn_glGetActiveUniformName);\n 2143:   pfn_glGetActiveUniformName(program,uniformIndex,bufSize,length,uniformName);\n 2144  }\n 2145: GLAPI GLuint APIENTRY glGetUniformBlockIndex(GLuint program, const GLchar* uniformBlockName)\n 2146  {\n 2147    assert(pfn_glGetUniformBlockIndex);\n 2148:   return pfn_glGetUniformBlockIndex(program,uniformBlockName);\n 2149  }\n 2150: GLAPI void APIENTRY glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params)\n 2151  {\n 2152    assert(pfn_glGetActiveUniformBlockiv);\n 2153:   pfn_glGetActiveUniformBlockiv(program,uniformBlockIndex,pname,params);\n 2154  }\n 2155: GLAPI void APIENTRY glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName)\n 2156  {\n 2157    assert(pfn_glGetActiveUniformBlockName);\n 2158:   pfn_glGetActiveUniformBlockName(program,uniformBlockIndex,bufSize,length,uniformBlockName);\n 2159  }\n 2160: GLAPI void APIENTRY glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)\n 2161  {\n 2162    assert(pfn_glUniformBlockBinding);\n 2163:   pfn_glUniformBlockBinding(program,uniformBlockIndex,uniformBlockBinding);\n 2164  }\n 2165  \n ....\n 7743  \n 7744  /* /////////////////////////////////// */\n 7745: /* GL_NV_uniform_buffer_unified_memory */\n 7746  \n 7747  \n 7748  \n 7749: int load_GL_NV_uniform_buffer_unified_memory(nvGLLoaderGetProcFN fnGetProcAddress)\n 7750  {\n 7751:   int success = has_extension(\"GL_NV_uniform_buffer_unified_memory\");\n 7752    return success;\n 7753  }\n\n/mnt/misc_hdd/dev/Lava/src/nvpro_core/nvgl/extensions_gl.hpp:\n  226  extern int has_GL_NV_stereo_view_rendering;\n  227  extern int has_GL_NV_texture_multisample;\n  228: extern int has_GL_NV_uniform_buffer_unified_memory;\n  229  extern int has_GL_NV_vertex_buffer_unified_memory;\n  230  extern int has_GL_NV_viewport_swizzle;\n  ...\n  303  int load_GL_NV_stereo_view_rendering(nvGLLoaderGetProcFN fnGetProcAddress);\n  304  int load_GL_NV_texture_multisample(nvGLLoaderGetProcFN fnGetProcAddress);\n  305: int load_GL_NV_uniform_buffer_unified_memory(nvGLLoaderGetProcFN fnGetProcAddress);\n  306  int load_GL_NV_vertex_buffer_unified_memory(nvGLLoaderGetProcFN fnGetProcAddress);\n  307  int load_GL_NV_viewport_swizzle(nvGLLoaderGetProcFN fnGetProcAddress);\n\n/mnt/misc_hdd/dev/Lava/src/nvpro_core/nvgl/extensions_gl.lua:\n   90  GL_NV_stereo_view_rendering\n   91  GL_NV_texture_multisample\n   92: GL_NV_uniform_buffer_unified_memory\n   93  GL_NV_vertex_buffer_unified_memory\n   94  GL_NV_viewport_swizzle\n\n/mnt/misc_hdd/dev/Lava/src/nvpro_core/nvvk/context_vk.hpp:\n  253        t16BitStorage.storageInputOutput16               = features11.storageInputOutput16;\n  254        t16BitStorage.storagePushConstant16              = features11.storagePushConstant16;\n  255:       t16BitStorage.uniformAndStorageBuffer16BitAccess = features11.uniformAndStorageBuffer16BitAccess;\n  256        samplerYcbcrConversion.samplerYcbcrConversion    = features11.samplerYcbcrConversion;\n  257        protectedMemory.protectedMemory                  = features11.protectedMemory;\n  ...\n  269        features11.storageInputOutput16               = t16BitStorage.storageInputOutput16;\n  270        features11.storagePushConstant16              = t16BitStorage.storagePushConstant16;\n  271:       features11.uniformAndStorageBuffer16BitAccess = t16BitStorage.uniformAndStorageBuffer16BitAccess;\n  272        features11.samplerYcbcrConversion             = samplerYcbcrConversion.samplerYcbcrConversion;\n  273        features11.protectedMemory                    = protectedMemory.protectedMemory;\n\n/mnt/misc_hdd/dev/Lava/src/nvpro_core/nvvk/descriptorsets_vk.cpp:\n  355  #endif\n  356  \n  357: #if VK_EXT_inline_uniform_block\n  358  VkWriteDescriptorSet DescriptorSetBindings::makeWrite(VkDescriptorSet                                  dstSet,\n  359                                                        uint32_t                                         dstBinding,\n  ...\n  427  }\n  428  #endif\n  429: #if VK_EXT_inline_uniform_block\n  430  VkWriteDescriptorSet DescriptorSetBindings::makeWriteArray(VkDescriptorSet                                  dstSet,\n  431                                                             uint32_t                                         dstBinding,\n\n/mnt/misc_hdd/dev/Lava/src/nvpro_core/nvvk/descriptorsets_vk.hpp:\n  265                                   uint32_t                                            arrayElement = 0) const;\n  266  #endif\n  267: #if VK_EXT_inline_uniform_block\n  268    VkWriteDescriptorSet makeWrite(VkDescriptorSet                                  dstSet,\n  269                                   uint32_t                                         dstBinding,\n  ...\n  286                                        const VkWriteDescriptorSetAccelerationStructureKHR* pAccel) const;\n  287  #endif\n  288: #if VK_EXT_inline_uniform_block\n  289    VkWriteDescriptorSet makeWriteArray(VkDescriptorSet                                  dstSet,\n  290                                        uint32_t                                         dstBinding,\n  ...\n  357    }\n  358  #endif\n  359: #if VK_EXT_inline_uniform_block\n  360    vk::WriteDescriptorSet makeWrite(vk::DescriptorSet                                  dstSet,\n  361                                     uint32_t                                           dstBinding,\n  ...\n  395    }\n  396  #endif\n  397: #if VK_EXT_inline_uniform_block\n  398    vk::WriteDescriptorSet makeWriteArray(vk::DescriptorSet                                  dstSet,\n  399                                          uint32_t                                           dstBinding,\n  ...\n  527    }\n  528  #endif\n  529: #if VK_EXT_inline_uniform_block\n  530    VkWriteDescriptorSet makeWrite(uint32_t                                         dstSetIdx,\n  531                                   uint32_t                                         dstBinding,\n  ...\n  561    }\n  562  #endif\n  563: #if VK_EXT_inline_uniform_block\n  564    VkWriteDescriptorSet makeWriteArray(uint32_t dstSetIdx, uint32_t dstBinding, const VkWriteDescriptorSetInlineUniformBlockEXT* pInline) const\n  565    {\n  ...\n  660    }\n  661  #endif\n  662: #if VK_EXT_inline_uniform_block\n  663    vk::WriteDescriptorSet makeWriteArray(uint32_t dstSetIdx, uint32_t dstBinding, const vk::WriteDescriptorSetInlineUniformBlockEXT* pInline) const\n  664    {\n\n/mnt/misc_hdd/dev/Lava/src/nvpro_core/nvvk/gizmos_vk.cpp:\n  216  // glslangValidator.exe --target-env vulkan1.2 --vn s_vert_spv -o axis.vert.h axis.vert\n  217  \n  218: layout(push_constant) uniform uPushConstant\n  219  {\n  220    mat4 transform;\n\n/mnt/misc_hdd/dev/Lava/src/nvpro_core/nvvk/raypicker_vk.hpp:\n  372  };\n  373  \n  374: layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;\n  375  layout(set = 0, binding = 1) buffer _resultPick { PickResult resultPick; };\n  376: layout(push_constant) uniform Constants\n  377  {\n  378    mat4  modelViewInv;\n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/CACAO/CACAO.SSAO.cs.slang:\n  228  \n  229  \n  230: void GenerateSSAOShadowsInternal(out float outShadowTerm, out float4 outEdges, out float outWeight, const float2 SVPos/*, const float2 normalizedScreenPos*/, uniform int qualityLevel, bool adaptiveBase)\n  231  {\n  232      float2 SVPosRounded = trunc(SVPos);\n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/GBuffer/GBufferRT.rt.slang:\n   72  [shader(\"anyhit\")]\n   73  void anyHit(\n   74:     uniform HitShaderParams hitParams,\n   75      inout RayData rayData : SV_RayPayload, BuiltInTriangleIntersectionAttributes attribs : SV_IntersectionAttributes)\n   76  {\n   ..\n  137  [shader(\"closesthit\")]\n  138  void closestHit(\n  139:     uniform HitShaderParams hitParams,\n  140      inout RayData rayData,\n  141      BuiltInTriangleIntersectionAttributes attribs)\n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/VBuffer/VBufferRT.rt.slang:\n   58  [shader(\"anyhit\")]\n   59  void anyHit(\n   60:     uniform HitShaderParams hitParams,\n   61      inout RayData rayData : SV_RayPayload,\n   62      BuiltInTriangleIntersectionAttributes attribs : SV_IntersectionAttributes)\n   ..\n   72  [shader(\"closesthit\")]\n   73  void closestHit(\n   74:     uniform HitShaderParams hitParams,\n   75      inout RayData rayData,\n   76      BuiltInTriangleIntersectionAttributes attribs)\n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/MegakernelPathTracer/PathTracer.rt.slang:\n   59  [shader(\"anyhit\")]\n   60  void scatterAnyHit(\n   61:     uniform HitShaderParams hitParams,\n   62      inout ScatterRayData rayData : SV_RayPayload, BuiltInTriangleIntersectionAttributes attribs : SV_IntersectionAttributes)\n   63  {\n   ..\n   74  [shader(\"closesthit\")]\n   75  void scatterClosestHit(\n   76:     uniform HitShaderParams hitParams,\n   77      inout ScatterRayData rayData : SV_RayPayload, BuiltInTriangleIntersectionAttributes attribs : SV_IntersectionAttributes)\n   78  {\n   ..\n  100  [shader(\"anyhit\")]\n  101  void shadowAnyHit(\n  102:     uniform HitShaderParams hitParams,\n  103      inout ShadowRayData rayData : SV_RayPayload, BuiltInTriangleIntersectionAttributes attribs : SV_IntersectionAttributes)\n  104  {\n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/MinimalPathTracer/MinimalPathTracer.rt.slang:\n   33  \n   34      At each hit point (including the primary hit loaded from the G-buffer),\n   35:     analytic light sources (point, directional) are sampled uniformly using\n   36      1 shadow ray, and 1 scatter ray is traced to sample the hemisphere.\n   37      At hit/miss the scatter ray includes light from emissive surface and\n   ..\n  205  \n  206  /** Evaluates the direct illumination from analytic lights.\n  207:     This function samples Falcor's light list uniformly with one shadow ray.\n  208      \\param[in] sd Shading data.\n  209      \\param[in] rayOrigin Ray origin for the shadow ray.\n\n/mnt/misc_hdd/dev/Lava/src/RenderPasses/WhittedRayTracer/WhittedRayTracer.rt.slang:\n  207  \n  208  /** Evaluates the direct illumination from all analytic lights.\n  209:     This function samples Falcor's light list uniformly with one shadow ray.\n  210      \\param[in] sd Shading data.\n  211      \\param[in] mtl The material at the shading point.\n\n/mnt/misc_hdd/dev/Lava/src/Samples/HelloDXR/HelloDXR.rt.slang:\n  106  [shader(\"closesthit\")]\n  107  void primaryClosestHit(\n  108:     uniform HitShaderParams hitParams,\n  109      inout PrimaryRayData hitData, in BuiltInTriangleIntersectionAttributes attribs)\n  110  {\n  ...\n  145  [shader(\"anyhit\")]\n  146  void primaryAnyHit(\n  147:     uniform HitShaderParams                 hitParams,\n  148      inout PrimaryRayData                    rayData,\n  149      BuiltInTriangleIntersectionAttributes   attribs)\n  ...\n  160  [shader(\"raygeneration\")]\n  161  void rayGen(\n  162:     uniform RWTexture2D<float4> gOutput)\n  163  {\n  164      uint3 launchIndex = DispatchRaysIndex();\n\n/mnt/misc_hdd/dev/Lava/src/Tools/FalcorTest/Tests/Core/RootBufferParamBlockTests.cpp:\n   43  \n   44          std::mt19937 rng;\n   45:         auto dist = std::uniform_int_distribution<uint32_t>(0, 100);\n   46          auto r = [&]() -> uint32_t { return dist(rng); };\n   47  \n\n/mnt/misc_hdd/dev/Lava/src/Tools/FalcorTest/Tests/Core/RootBufferStructTests.cpp:\n   37  \n   38          std::mt19937 rng;\n   39:         auto dist = std::uniform_int_distribution<uint32_t>(0, 100);\n   40          auto r = [&]() -> uint32_t { return dist(rng); };\n   41  \n\n/mnt/misc_hdd/dev/Lava/src/Tools/FalcorTest/Tests/Core/RootBufferTests.cpp:\n   37  \n   38          std::mt19937 rng;\n   39:         auto dist = std::uniform_int_distribution<uint32_t>(0, 100);\n   40          auto r = [&]() -> uint32_t { return dist(rng); };\n   41  \n\n/mnt/misc_hdd/dev/Lava/src/Tools/FalcorTest/Tests/ShadingUtils/RaytracingTests.cpp:\n   65  \n   66          std::mt19937 rng;\n   67:         auto dist = std::uniform_real_distribution<float>(-1.f, 1.f);\n   68          auto r = [&]() -> float { return dist(rng); };\n   69  \n\n/mnt/misc_hdd/dev/Lava/src/Tools/FalcorTest/Tests/ShadingUtils/ShadingUtilsTests.cpp:\n   45          {\n   46              std::mt19937 rng;\n   47:             auto dist = std::uniform_real_distribution<float>(-1, 1);\n   48              auto r = [&]() -> float { return dist(rng); };\n   49  \n   ..\n   65          {\n   66              std::mt19937 rng;\n   67:             auto distOut = std::uniform_real_distribution<float>(-20.f, 20.f);\n   68              auto rOut = [&]() -> float { return distOut(rng); };\n   69:             auto distIn = std::uniform_real_distribution<float>(-radius, radius);\n   70              auto rIn = [&]() -> float { return distIn(rng); };\n   71  \n   ..\n  112              {\n  113                  std::mt19937 rng;\n  114:                 auto dist = std::uniform_real_distribution<float>(-5, 5);\n  115                  auto r = [&]() -> float { return dist(rng); };\n  116  \n  ...\n  202      {\n  203          std::mt19937 rng;\n  204:         auto dist = std::uniform_real_distribution<float>(-10.f, 10.f);\n  205          auto r = [&]() -> float { return dist(rng); };\n  206  \n\n/mnt/misc_hdd/dev/Lava/src/Tools/FalcorTest/Tests/Slang/WaveOps.cpp:\n   42              for (auto& e : elems) e = rng();\n   43  \n   44:             std::uniform_int_distribution<size_t> select(0, numUnique-1);\n   45              std::vector<uint32_t> data(numElems);\n   46              for (auto& d : data) d = elems[select(rng)];\n\n/mnt/misc_hdd/dev/Lava/src/Tools/FalcorTest/Tests/Utils/ColorUtilsTests.cpp:\n   50          // Prepare for tests.\n   51          std::default_random_engine rng;\n   52:         auto dist = std::uniform_real_distribution<float>();\n   53          auto u = [&]() -> float { return dist(rng); };\n   54  \n\n/mnt/misc_hdd/dev/Lava/src/Tools/FalcorTest/Tests/Utils/MathHelpersTests.cpp:\n  118              std::random_device rd;\n  119              std::mt19937 gen(rd());\n  120:             std::uniform_real_distribution<> posAndNegDist(-100.f, 100.f);\n  121:             std::uniform_real_distribution<> posDist(1e-4f, 100.f);\n  122              for (int i = 0; i < 256; ++i)\n  123              {\n\n/mnt/misc_hdd/dev/Lava/src/Tools/FalcorTest/Tests/Utils/ParallelReductionTests.cpp:\n  104  \n  105              std::default_random_engine rng;\n  106:             auto dist = std::uniform_real_distribution<float>();\n  107              auto u = [&]() -> float { return dist(rng); };\n  108  \n\n355 matches across 157 files\n",
			"settings":
			{
				"buffer_size": 246280,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "third_party/external/slang/src/Slang/tests/compute/ray-tracing-inline.slang",
			"settings":
			{
				"buffer_size": 1179,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "third_party/external/slang/src/Slang/examples/ray-tracing/shaders.slang",
			"settings":
			{
				"buffer_size": 3942,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "src/Falcor/Scene/NullTrace.cs.slang",
			"settings":
			{
				"buffer_size": 2291,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRT.rt.slang",
			"settings":
			{
				"buffer_size": 9447,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "third_party/external/slang/src/Slang/slang.h",
			"settings":
			{
				"buffer_size": 183518,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "src/Falcor/Core/Program/ProgramReflection.cpp",
			"settings":
			{
				"buffer_size": 87821,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"CAAAADGNAAAAAAAAMo0AAAAAAAAAAAAAMo0AAAAAAAA6jQAAAAAAAAAAAAA6jQAAAAAAADuNAAAAAAAAAAAAADuNAAAAAAAAQ40AAAAAAAAAAAAAMo0AAAAAAAAyjQAAAAAAAAgAAAAgICAgICAgIDuNAAAAAAAAPI0AAAAAAAAAAAAAPI0AAAAAAABEjQAAAAAAAAAAAAAzjQAAAAAAADONAAAAAAAACAAAACAgICAgICAg",
					"AQAAAAAAAAABAAAAMY0AAAAAAAAxjQAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"reindent",
					null,
					"AQAAADONAAAAAAAAO40AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAM40AAAAAAAAzjQAAAAAAAAAAAAAAAFJA"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "suto"
					},
					"BQAAADuNAAAAAAAAPI0AAAAAAAAAAAAAPY0AAAAAAAA9jQAAAAAAAAgAAAAgICAgICAgIDyNAAAAAAAAPY0AAAAAAAAAAAAAPY0AAAAAAAA+jQAAAAAAAAAAAAA+jQAAAAAAAD+NAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAO40AAAAAAAA7jQAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAD+NAAAAAAAAQI0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAP40AAAAAAAA/jQAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					3,
					"left_delete",
					null,
					"AwAAAD+NAAAAAAAAP40AAAAAAAABAAAAID6NAAAAAAAAPo0AAAAAAAABAAAAbz2NAAAAAAAAPY0AAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAQI0AAAAAAABAjQAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAD2NAAAAAAAAPo0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPY0AAAAAAAA9jQAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					3,
					"left_delete",
					null,
					"AwAAAD2NAAAAAAAAPY0AAAAAAAABAAAAdDyNAAAAAAAAPI0AAAAAAAABAAAAdTuNAAAAAAAAO40AAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAPo0AAAAAAAA+jQAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "auto"
					},
					"BAAAADuNAAAAAAAAPI0AAAAAAAAAAAAAPI0AAAAAAAA9jQAAAAAAAAAAAAA9jQAAAAAAAD6NAAAAAAAAAAAAAD6NAAAAAAAAP40AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAO40AAAAAAAA7jQAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAD+NAAAAAAAAQI0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAP40AAAAAAAA/jQAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "dbg"
					},
					"AwAAAECNAAAAAAAAQY0AAAAAAAAAAAAAQY0AAAAAAABCjQAAAAAAAAAAAABCjQAAAAAAAEONAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQI0AAAAAAABAjQAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAEONAAAAAAAARI0AAAAAAAAAAAAARI0AAAAAAABFjQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQ40AAAAAAABDjQAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEWNAAAAAAAARo0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARY0AAAAAAABFjQAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "type"
					},
					"BAAAAEaNAAAAAAAAR40AAAAAAAAAAAAAR40AAAAAAABIjQAAAAAAAAAAAABIjQAAAAAAAEmNAAAAAAAAAAAAAEmNAAAAAAAASo0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARo0AAAAAAABGjQAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "_2_string"
					},
					"CQAAAEqNAAAAAAAAS40AAAAAAAAAAAAAS40AAAAAAABMjQAAAAAAAAAAAABMjQAAAAAAAE2NAAAAAAAAAAAAAE2NAAAAAAAATo0AAAAAAAAAAAAATo0AAAAAAABPjQAAAAAAAAAAAABPjQAAAAAAAFCNAAAAAAAAAAAAAFCNAAAAAAAAUY0AAAAAAAAAAAAAUY0AAAAAAABSjQAAAAAAAAAAAABSjQAAAAAAAFONAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASo0AAAAAAABKjQAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFONAAAAAAAAVY0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAU40AAAAAAABTjQAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "kin"
					},
					"AwAAAFSNAAAAAAAAVY0AAAAAAAAAAAAAVY0AAAAAAABWjQAAAAAAAAAAAABWjQAAAAAAAFeNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVI0AAAAAAABUjQAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAAFeNAAAAAAAAWI0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAV40AAAAAAABXjQAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFmNAAAAAAAAWo0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWY0AAAAAAABZjQAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					3,
					"left_delete",
					null,
					"AwAAADONAAAAAAAAM40AAAAAAAAoAAAAICAgICAgICBhdXRvIGRiZyA9IHR5cGVfMl9zdHJpbmcoa2luZCk7CjKNAAAAAAAAMo0AAAAAAAABAAAACjGNAAAAAAAAMY0AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAM40AAAAAAABbjQAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADGNAAAAAAAAMo0AAAAAAAAAAAAAMo0AAAAAAAA6jQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMY0AAAAAAAAxjQAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAL6OAAAAAAAAv44AAAAAAAAAAAAAv44AAAAAAADHjgAAAAAAAAAAAAAyjQAAAAAAADKNAAAAAAAACAAAACAgICAgICAg",
					"AQAAAAAAAAABAAAAvo4AAAAAAAC+jgAAAAAAAAAAAAAAAFJA"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "\t\tpr"
					},
					"BAAAALaOAAAAAAAAuo4AAAAAAAAAAAAAuo4AAAAAAAC+jgAAAAAAAAAAAAC+jgAAAAAAAL+OAAAAAAAAAAAAAL+OAAAAAAAAwI4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAto4AAAAAAAC2jgAAAAAAAAAAAAAAAFJA"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "int"
					},
					"AwAAAMCOAAAAAAAAwY4AAAAAAAAAAAAAwY4AAAAAAADCjgAAAAAAAAAAAADCjgAAAAAAAMOOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwI4AAAAAAADAjgAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert_completion",
					{
						"completion": "printf",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "printf"
					},
					"AgAAAL6OAAAAAAAAvo4AAAAAAAAFAAAAcHJpbnS+jgAAAAAAAMSOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAw44AAAAAAADDjgAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMSOAAAAAAAAxo4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxI4AAAAAAADEjgAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAMWOAAAAAAAAx44AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxY4AAAAAAADFjgAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "!!!"
					},
					"AwAAAMaOAAAAAAAAx44AAAAAAAAAAAAAx44AAAAAAADIjgAAAAAAAAAAAADIjgAAAAAAAMmOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxo4AAAAAAADGjgAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMmOAAAAAAAAyo4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyY4AAAAAAADJjgAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"paste",
					null,
					"AQAAAMqOAAAAAAAA3Y4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyo4AAAAAAADKjgAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": " \\n"
					},
					"AwAAAN2OAAAAAAAA3o4AAAAAAAAAAAAA3o4AAAAAAADfjgAAAAAAAAAAAADfjgAAAAAAAOCOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3Y4AAAAAAADdjgAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOKOAAAAAAAA444AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4o4AAAAAAADijgAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "\n\t"
					},
					"AwAAAGqPAAAAAAAAa48AAAAAAAAAAAAAa48AAAAAAAB3jwAAAAAAAAAAAAB3jwAAAAAAAHuPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAao8AAAAAAABqjwAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"paste",
					null,
					"AQAAAHuPAAAAAAAAoI8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAe48AAAAAAAB7jwAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "\n\t"
					},
					"AwAAACSQAAAAAAAAJZAAAAAAAAAAAAAAJZAAAAAAAAAxkAAAAAAAAAAAAAAxkAAAAAAAADWQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJJAAAAAAAAAkkAAAAAAAAAAAAAAA0H1A"
				],
				[
					60,
					1,
					"paste",
					null,
					"AQAAADWQAAAAAAAAWpAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANZAAAAAAAAA1kAAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "\n\t"
					},
					"AwAAAOGQAAAAAAAA4pAAAAAAAAAAAAAA4pAAAAAAAADukAAAAAAAAAAAAADukAAAAAAAAPKQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4ZAAAAAAAADhkAAAAAAAAAAAAAAA0H1A"
				],
				[
					63,
					1,
					"paste",
					null,
					"AQAAAPKQAAAAAAAAF5EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8pAAAAAAAADykAAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": "\n\t"
					},
					"AwAAAKSRAAAAAAAApZEAAAAAAAAAAAAApZEAAAAAAACxkQAAAAAAAAAAAACxkQAAAAAAALWRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApJEAAAAAAACkkQAAAAAAAAAAAAAA0H1A"
				],
				[
					66,
					1,
					"paste",
					null,
					"AQAAALWRAAAAAAAA2pEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtZEAAAAAAAC1kQAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMKSAAAAAAAAw5IAAAAAAAAAAAAAw5IAAAAAAADPkgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwpIAAAAAAADCkgAAAAAAAAAAAAAA0H1A"
				],
				[
					69,
					1,
					"paste",
					null,
					"AQAAAM+SAAAAAAAA9JIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAz5IAAAAAAADPkgAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAM+SAAAAAAAA05IAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAz5IAAAAAAADPkgAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGuTAAAAAAAAbJMAAAAAAAAAAAAAbJMAAAAAAAB8kwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAa5MAAAAAAABrkwAAAAAAAAAAAAAAAGJA"
				],
				[
					75,
					1,
					"paste",
					null,
					"AQAAAGuTAAAAAAAAkJMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAa5MAAAAAAABrkwAAAAAAAAAAAAAAAGJA"
				],
				[
					83,
					1,
					"paste",
					null,
					"AgAAAHeTAAAAAAAAfpMAAAAAAAAAAAAAfpMAAAAAAAB+kwAAAAAAABMAAAByZWZsZWN0UmVzb3VyY2VUeXBl",
					"AQAAAAAAAAABAAAAd5MAAAAAAACKkwAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"paste",
					null,
					"AgAAAN+SAAAAAAAA75IAAAAAAAAAAAAA75IAAAAAAADvkgAAAAAAABMAAAByZWZsZWN0UmVzb3VyY2VUeXBl",
					"AQAAAAAAAAABAAAA35IAAAAAAADykgAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"paste",
					null,
					"AgAAAMGRAAAAAAAA15EAAAAAAAAAAAAA15EAAAAAAADXkQAAAAAAABMAAAByZWZsZWN0UmVzb3VyY2VUeXBl",
					"AQAAAAAAAAABAAAAwZEAAAAAAADUkQAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"paste",
					null,
					"AgAAAP6QAAAAAAAAEpEAAAAAAAAAAAAAEpEAAAAAAAASkQAAAAAAABMAAAByZWZsZWN0UmVzb3VyY2VUeXBl",
					"AQAAAAAAAAABAAAA/pAAAAAAAAARkQAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"paste",
					null,
					"AgAAAEGQAAAAAAAAUZAAAAAAAAAAAAAAUZAAAAAAAABRkAAAAAAAABMAAAByZWZsZWN0UmVzb3VyY2VUeXBl",
					"AQAAAAAAAAABAAAAQZAAAAAAAABUkAAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"paste",
					null,
					"AgAAAIePAAAAAAAAmI8AAAAAAAAAAAAAmI8AAAAAAACYjwAAAAAAABMAAAByZWZsZWN0UmVzb3VyY2VUeXBl",
					"AQAAAAAAAAABAAAAh48AAAAAAACajwAAAAAAAAAAAAAAAPC/"
				],
				[
					131,
					1,
					"paste",
					null,
					"AgAAAMqOAAAAAAAA3Y4AAAAAAAAAAAAA3Y4AAAAAAADdjgAAAAAAABMAAAByZWZsZWN0UmVzb3VyY2VUeXBl",
					"AQAAAAAAAAABAAAAyo4AAAAAAADdjgAAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAL6OAAAAAAAAv44AAAAAAAAAAAAAv44AAAAAAADAjgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvo4AAAAAAAC+jgAAAAAAAAAAAAAAAPC/"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAH2PAAAAAAAAfo8AAAAAAAAAAAAAfo8AAAAAAAB/jwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfY8AAAAAAAB9jwAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAADeQAAAAAAAAOJAAAAAAAAAAAAAAOJAAAAAAAAA5kAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAN5AAAAAAAAA3kAAAAAAAAAAAAAAAAPC/"
				],
				[
					143,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAPOQAAAAAAAA9JAAAAAAAAAAAAAA9JAAAAAAAAD1kAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA85AAAAAAAADzkAAAAAAAAAAAAAAAAPC/"
				],
				[
					146,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAALmRAAAAAAAAupEAAAAAAAAAAAAAupEAAAAAAAC7kQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuZEAAAAAAAC5kQAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAANySAAAAAAAA3ZIAAAAAAAAAAAAA3ZIAAAAAAADekgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3JIAAAAAAADckgAAAAAAAAAAAAAAAGJA"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAHOTAAAAAAAAdJMAAAAAAAAAAAAAdJMAAAAAAAB1kwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAc5MAAAAAAABzkwAAAAAAAAAAAAAAAGJA"
				]
			]
		},
		{
			"file": "third_party/external/slang/src/Slang/docs/api-users-guide.md",
			"settings":
			{
				"buffer_size": 18702,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EnvMapIntegration.ps.slang",
			"settings":
			{
				"buffer_size": 9114,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAADQHAAAAAAAANQcAAAAAAAAAAAAANQcAAAAAAAA2BwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADQHAAAAAAAANAcAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAADUHAAAAAAAANgcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADUHAAAAAAAANQcAAAAAAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"left_delete",
					null,
					"AQAAADUHAAAAAAAANQcAAAAAAAABAAAAYw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADYHAAAAAAAANgcAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"paste",
					null,
					"AQAAADUHAAAAAAAA2wcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADUHAAAAAAAANQcAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"paste",
					null,
					"AQAAANwHAAAAAAAA8QcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANwHAAAAAAAA3AcAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANwHAAAAAAAA3QcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANwHAAAAAAAA3AcAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABkIAAAAAAAAGggAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABkIAAAAAAAAGQgAAAAAAAAAAAAAAAAAAA"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAD4IAAAAAAAAPwgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD4IAAAAAAAAPggAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"paste",
					null,
					"AQAAAD8IAAAAAAAAVAgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD8IAAAAAAAAPwgAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABkIAAAAAAAAGggAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABkIAAAAAAAAGQgAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"paste",
					null,
					"AQAAABoIAAAAAAAALwgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABoIAAAAAAAAGggAAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					2,
					"left_delete",
					null,
					"AgAAADUHAAAAAAAANQcAAAAAAACnAAAAIFtbdms6OmJpbmRpbmcoMCwgMCldXQogICAzMSAgU2FtcGxlclN0YXRlIGdMdW1pbmFuY2VUZXhTYW1wbGVyIDogcmVnaXN0ZXIoczApOwogICAzMiAgCiAgIDMzOiBbW3ZrOjpiaW5kaW5nKDAsIDEpXV0KICAgMzQgIFNhbXBsZXJTdGF0ZSBnQ29sb3JTYW1wbGVyIDogcmVnaXN0ZXIoczEpOwo0BwAAAAAAADQHAAAAAAAAAQAAAAo",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANwHAAAAAAAANQcAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "src/nvpro_core/nvvk/raytraceKHR_vk.cpp",
			"settings":
			{
				"buffer_size": 20890,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderPass.h",
			"settings":
			{
				"buffer_size": 6850,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					8,
					1,
					"insert",
					{
						"characters": "std::sha"
					},
					"CAAAAHAYAAAAAAAAcRgAAAAAAAAAAAAAcRgAAAAAAAByGAAAAAAAAAAAAAByGAAAAAAAAHMYAAAAAAAAAAAAAHMYAAAAAAAAdBgAAAAAAAAAAAAAdBgAAAAAAAB1GAAAAAAAAAAAAAB1GAAAAAAAAHYYAAAAAAAAAAAAAHYYAAAAAAAAdxgAAAAAAAAAAAAAdxgAAAAAAAB4GAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcBgAAAAAAABwGAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "red_ptr"
					},
					"BwAAAHgYAAAAAAAAeRgAAAAAAAAAAAAAeRgAAAAAAAB6GAAAAAAAAAAAAAB6GAAAAAAAAHsYAAAAAAAAAAAAAHsYAAAAAAAAfBgAAAAAAAAAAAAAfBgAAAAAAAB9GAAAAAAAAAAAAAB9GAAAAAAAAH4YAAAAAAAAAAAAAH4YAAAAAAAAfxgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeBgAAAAAAAB4GAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "<"
					},
					"AQAAAH8YAAAAAAAAgBgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfxgAAAAAAAB/GAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAAIUYAAAAAAAAhhgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhRgAAAAAAACFGAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					11,
					"right_delete",
					null,
					"CwAAAIYYAAAAAAAAhhgAAAAAAAABAAAAOoYYAAAAAAAAhhgAAAAAAAABAAAAOoYYAAAAAAAAhhgAAAAAAAABAAAAU4YYAAAAAAAAhhgAAAAAAAABAAAAaIYYAAAAAAAAhhgAAAAAAAABAAAAYYYYAAAAAAAAhhgAAAAAAAABAAAAcoYYAAAAAAAAhhgAAAAAAAABAAAAZYYYAAAAAAAAhhgAAAAAAAABAAAAZIYYAAAAAAAAhhgAAAAAAAABAAAAUIYYAAAAAAAAhhgAAAAAAAABAAAAdIYYAAAAAAAAhhgAAAAAAAABAAAAcg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhhgAAAAAAACGGAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"left_delete",
					null,
					"AQAAAIQHAAAAAAAAhAcAAAAAAAAhAAAAI2luY2x1ZGUgIkZhbGNvci9TY2VuZS9TY2VuZS5oIiAK",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApQcAAAAAAACEBwAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAALMHAAAAAAAAtAcAAAAAAAAAAAAAtAcAAAAAAAC1BwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAswcAAAAAAACzBwAAAAAAAAAAAAAAAAAA"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "class"
					},
					"BQAAALQHAAAAAAAAtQcAAAAAAAAAAAAAtQcAAAAAAAC2BwAAAAAAAAAAAAC2BwAAAAAAALcHAAAAAAAAAAAAALcHAAAAAAAAuAcAAAAAAAAAAAAAuAcAAAAAAAC5BwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtAcAAAAAAAC0BwAAAAAAAAAAAAAAAAAA"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " Scene;"
					},
					"BwAAALkHAAAAAAAAugcAAAAAAAAAAAAAugcAAAAAAAC7BwAAAAAAAAAAAAC7BwAAAAAAALwHAAAAAAAAAAAAALwHAAAAAAAAvQcAAAAAAAAAAAAAvQcAAAAAAAC+BwAAAAAAAAAAAAC+BwAAAAAAAL8HAAAAAAAAAAAAAL8HAAAAAAAAwAcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuQcAAAAAAAC5BwAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAMHAAAAAAAABAcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAwcAAAAAAAADBwAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "@"
					},
					"AQAAAAMHAAAAAAAABAcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAwcAAAAAAAADBwAAAAAAAAAAAAAAAAAA"
				],
				[
					33,
					1,
					"left_delete",
					null,
					"AQAAAAMHAAAAAAAAAwcAAAAAAAABAAAAQA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABAcAAAAAAAAEBwAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "#include"
					},
					"CAAAAAMHAAAAAAAABAcAAAAAAAAAAAAABAcAAAAAAAAFBwAAAAAAAAAAAAAFBwAAAAAAAAYHAAAAAAAAAAAAAAYHAAAAAAAABwcAAAAAAAAAAAAABwcAAAAAAAAIBwAAAAAAAAAAAAAIBwAAAAAAAAkHAAAAAAAAAAAAAAkHAAAAAAAACgcAAAAAAAAAAAAACgcAAAAAAAALBwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAwcAAAAAAAADBwAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAsHAAAAAAAADAcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACwcAAAAAAAALBwAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"left_delete",
					null,
					"AQAAAAsHAAAAAAAACwcAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADAcAAAAAAAAMBwAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAsHAAAAAAAADAcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACwcAAAAAAAALBwAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert_snippet",
					{
						"contents": "<$0>"
					},
					"AQAAAAwHAAAAAAAADgcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADAcAAAAAAAAMBwAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "mem"
					},
					"AwAAAA0HAAAAAAAADgcAAAAAAAAAAAAADgcAAAAAAAAPBwAAAAAAAAAAAAAPBwAAAAAAABAHAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADQcAAAAAAAANBwAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert_completion",
					{
						"completion": "memory",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "memory"
					},
					"AgAAAA0HAAAAAAAADQcAAAAAAAADAAAAbWVtDQcAAAAAAAATBwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEAcAAAAAAAAQBwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/RenderGraph/BasePasses/RasterScenePass.h",
			"settings":
			{
				"buffer_size": 4098,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "std::shar"
					},
					"CQAAACgKAAAAAAAAKQoAAAAAAAAAAAAAKQoAAAAAAAAqCgAAAAAAAAAAAAAqCgAAAAAAACsKAAAAAAAAAAAAACsKAAAAAAAALAoAAAAAAAAAAAAALAoAAAAAAAAtCgAAAAAAAAAAAAAtCgAAAAAAAC4KAAAAAAAAAAAAAC4KAAAAAAAALwoAAAAAAAAAAAAALwoAAAAAAAAwCgAAAAAAAAAAAAAwCgAAAAAAADEKAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKAoAAAAAAAAoCgAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": "ed_prt"
					},
					"BgAAADEKAAAAAAAAMgoAAAAAAAAAAAAAMgoAAAAAAAAzCgAAAAAAAAAAAAAzCgAAAAAAADQKAAAAAAAAAAAAADQKAAAAAAAANQoAAAAAAAAAAAAANQoAAAAAAAA2CgAAAAAAAAAAAAA2CgAAAAAAADcKAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMQoAAAAAAAAxCgAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					2,
					"left_delete",
					null,
					"AgAAADYKAAAAAAAANgoAAAAAAAABAAAAdDUKAAAAAAAANQoAAAAAAAABAAAAcg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANwoAAAAAAAA3CgAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "tr<"
					},
					"AwAAADUKAAAAAAAANgoAAAAAAAAAAAAANgoAAAAAAAA3CgAAAAAAAAAAAAA3CgAAAAAAADgKAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANQoAAAAAAAA1CgAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAAD0KAAAAAAAAPgoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPQoAAAAAAAA9CgAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					11,
					"right_delete",
					null,
					"CwAAAD4KAAAAAAAAPgoAAAAAAAABAAAAOj4KAAAAAAAAPgoAAAAAAAABAAAAOj4KAAAAAAAAPgoAAAAAAAABAAAAUz4KAAAAAAAAPgoAAAAAAAABAAAAaD4KAAAAAAAAPgoAAAAAAAABAAAAYT4KAAAAAAAAPgoAAAAAAAABAAAAcj4KAAAAAAAAPgoAAAAAAAABAAAAZT4KAAAAAAAAPgoAAAAAAAABAAAAZD4KAAAAAAAAPgoAAAAAAAABAAAAUD4KAAAAAAAAPgoAAAAAAAABAAAAdD4KAAAAAAAAPgoAAAAAAAABAAAAcg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPgoAAAAAAAA+CgAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"paste",
					null,
					"AgAAADQNAAAAAAAASg0AAAAAAAAAAAAASg0AAAAAAABKDQAAAAAAABAAAABTY2VuZTo6U2hhcmVkUHRy",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANA0AAAAAAABEDQAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"paste",
					null,
					"AgAAABEPAAAAAAAAJw8AAAAAAAAAAAAAJw8AAAAAAAAnDwAAAAAAABAAAABTY2VuZTo6U2hhcmVkUHRy",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEQ8AAAAAAAAhDwAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"paste",
					null,
					"AgAAAJUOAAAAAAAAqw4AAAAAAAAAAAAAqw4AAAAAAACrDgAAAAAAABAAAABTY2VuZTo6U2hhcmVkUHRy",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlQ4AAAAAAAClDgAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"paste",
					null,
					"AgAAAIYPAAAAAAAAnA8AAAAAAAAAAAAAnA8AAAAAAACcDwAAAAAAABAAAABTY2VuZTo6U2hhcmVkUHRy",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhg8AAAAAAACWDwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/RenderGraph/BasePasses/RasterScenePass.cpp",
			"settings":
			{
				"buffer_size": 3210,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n№"
					},
					"AgAAAOcGAAAAAAAA6AYAAAAAAAAAAAAA6AYAAAAAAADpBgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5wYAAAAAAADnBgAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"left_delete",
					null,
					"AQAAAOgGAAAAAAAA6AYAAAAAAAADAAAA4oSW",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6QYAAAAAAADpBgAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "#inc"
					},
					"BAAAAOgGAAAAAAAA6QYAAAAAAAAAAAAA6QYAAAAAAADqBgAAAAAAAAAAAADqBgAAAAAAAOsGAAAAAAAAAAAAAOsGAAAAAAAA7AYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6AYAAAAAAADoBgAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "lude"
					},
					"BAAAAOwGAAAAAAAA7QYAAAAAAAAAAAAA7QYAAAAAAADuBgAAAAAAAAAAAADuBgAAAAAAAO8GAAAAAAAAAAAAAO8GAAAAAAAA8AYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7AYAAAAAAADsBgAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPAGAAAAAAAA8QYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8AYAAAAAAADwBgAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAPEGAAAAAAAA8wYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8QYAAAAAAADxBgAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "F"
					},
					"AQAAAPIGAAAAAAAA8wYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8gYAAAAAAADyBgAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert_completion",
					{
						"completion": "Falcor",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Falcor"
					},
					"AgAAAPIGAAAAAAAA8gYAAAAAAAABAAAARvIGAAAAAAAA+AYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8wYAAAAAAADzBgAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "/Sc"
					},
					"AwAAAPgGAAAAAAAA+QYAAAAAAAAAAAAA+QYAAAAAAAD6BgAAAAAAAAAAAAD6BgAAAAAAAPsGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+AYAAAAAAAD4BgAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert_completion",
					{
						"completion": "Scene",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Scene"
					},
					"AgAAAPkGAAAAAAAA+QYAAAAAAAACAAAAU2P5BgAAAAAAAP4GAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+wYAAAAAAAD7BgAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "/Sce"
					},
					"BAAAAP4GAAAAAAAA/wYAAAAAAAAAAAAA/wYAAAAAAAAABwAAAAAAAAAAAAAABwAAAAAAAAEHAAAAAAAAAAAAAAEHAAAAAAAAAgcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/gYAAAAAAAD+BgAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert_completion",
					{
						"completion": "Scene",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Scene"
					},
					"AgAAAP8GAAAAAAAA/wYAAAAAAAADAAAAU2Nl/wYAAAAAAAAEBwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAgcAAAAAAAACBwAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": ".h"
					},
					"AgAAAAQHAAAAAAAABQcAAAAAAAAAAAAABQcAAAAAAAAGBwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABAcAAAAAAAAEBwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/Scene/Animation/AnimatedVertexCache.cpp",
			"settings":
			{
				"buffer_size": 11980,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAPwGAAAAAAAA/QYAAAAAAAAAAAAA/QYAAAAAAAD+BgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/AYAAAAAAAD8BgAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"left_delete",
					null,
					"AQAAAP0GAAAAAAAA/QYAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/gYAAAAAAAD+BgAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "#includ"
					},
					"BwAAAP0GAAAAAAAA/gYAAAAAAAAAAAAA/gYAAAAAAAD/BgAAAAAAAAAAAAD/BgAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAQcAAAAAAAAAAAAAAQcAAAAAAAACBwAAAAAAAAAAAAACBwAAAAAAAAMHAAAAAAAAAAAAAAMHAAAAAAAABAcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/QYAAAAAAAD9BgAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert_completion",
					{
						"completion": "include",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "include"
					},
					"AgAAAP4GAAAAAAAA/gYAAAAAAAAGAAAAaW5jbHVk/gYAAAAAAAAFBwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABAcAAAAAAAAEBwAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAUHAAAAAAAABgcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABQcAAAAAAAAFBwAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAAYHAAAAAAAACAcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABgcAAAAAAAAGBwAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "D"
					},
					"AQAAAAcHAAAAAAAACAcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABwcAAAAAAAAHBwAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"left_delete",
					null,
					"AQAAAAcHAAAAAAAABwcAAAAAAAABAAAARA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACAcAAAAAAAAIBwAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "F"
					},
					"AQAAAAcHAAAAAAAACAcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABwcAAAAAAAAHBwAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert_completion",
					{
						"completion": "Falcor",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Falcor"
					},
					"AgAAAAcHAAAAAAAABwcAAAAAAAABAAAARgcHAAAAAAAADQcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACAcAAAAAAAAIBwAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "/Sce"
					},
					"BAAAAA0HAAAAAAAADgcAAAAAAAAAAAAADgcAAAAAAAAPBwAAAAAAAAAAAAAPBwAAAAAAABAHAAAAAAAAAAAAABAHAAAAAAAAEQcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADQcAAAAAAAANBwAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert_completion",
					{
						"completion": "Scene",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Scene"
					},
					"AgAAAA4HAAAAAAAADgcAAAAAAAADAAAAU2NlDgcAAAAAAAATBwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEQcAAAAAAAARBwAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "/Sce"
					},
					"BAAAABMHAAAAAAAAFAcAAAAAAAAAAAAAFAcAAAAAAAAVBwAAAAAAAAAAAAAVBwAAAAAAABYHAAAAAAAAAAAAABYHAAAAAAAAFwcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEwcAAAAAAAATBwAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "ne."
					},
					"AwAAABcHAAAAAAAAGAcAAAAAAAAAAAAAGAcAAAAAAAAZBwAAAAAAAAAAAAAZBwAAAAAAABoHAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFwcAAAAAAAAXBwAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAABoHAAAAAAAAGwcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGgcAAAAAAAAaBwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/Scene/SceneCache.h",
			"settings":
			{
				"buffer_size": 5085,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					6,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHEHAAAAAAAAcgcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcQcAAAAAAABxBwAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "#include"
					},
					"CAAAAHEHAAAAAAAAcgcAAAAAAAAAAAAAcgcAAAAAAABzBwAAAAAAAAAAAABzBwAAAAAAAHQHAAAAAAAAAAAAAHQHAAAAAAAAdQcAAAAAAAAAAAAAdQcAAAAAAAB2BwAAAAAAAAAAAAB2BwAAAAAAAHcHAAAAAAAAAAAAAHcHAAAAAAAAeAcAAAAAAAAAAAAAeAcAAAAAAAB5BwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcQcAAAAAAABxBwAAAAAAAAAAAAAAAAAA"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHkHAAAAAAAAegcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeQcAAAAAAAB5BwAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAHoHAAAAAAAAfAcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAegcAAAAAAAB6BwAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "Scene"
					},
					"BQAAAHsHAAAAAAAAfAcAAAAAAAAAAAAAfAcAAAAAAAB9BwAAAAAAAAAAAAB9BwAAAAAAAH4HAAAAAAAAAAAAAH4HAAAAAAAAfwcAAAAAAAAAAAAAfwcAAAAAAACABwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAewcAAAAAAAB7BwAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAIAHAAAAAAAAgQcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgAcAAAAAAACABwAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"left_delete",
					null,
					"AQAAAIAHAAAAAAAAgAcAAAAAAAABAAAALw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgQcAAAAAAACBBwAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": ".h"
					},
					"AgAAAIAHAAAAAAAAgQcAAAAAAAAAAAAAgQcAAAAAAACCBwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgAcAAAAAAACABwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/RenderPasses/AccumulatePass/AccumulatePass.h",
			"settings":
			{
				"buffer_size": 5613,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANkGAAAAAAAA2gYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2QYAAAAAAADZBgAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "#include"
					},
					"CAAAANkGAAAAAAAA2gYAAAAAAAAAAAAA2gYAAAAAAADbBgAAAAAAAAAAAADbBgAAAAAAANwGAAAAAAAAAAAAANwGAAAAAAAA3QYAAAAAAAAAAAAA3QYAAAAAAADeBgAAAAAAAAAAAADeBgAAAAAAAN8GAAAAAAAAAAAAAN8GAAAAAAAA4AYAAAAAAAAAAAAA4AYAAAAAAADhBgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2QYAAAAAAADZBgAAAAAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOEGAAAAAAAA4gYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4QYAAAAAAADhBgAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAOIGAAAAAAAA5AYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4gYAAAAAAADiBgAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "GF"
					},
					"AgAAAOMGAAAAAAAA5AYAAAAAAAAAAAAA5AYAAAAAAADlBgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4wYAAAAAAADjBgAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					2,
					"left_delete",
					null,
					"AgAAAOQGAAAAAAAA5AYAAAAAAAABAAAARuMGAAAAAAAA4wYAAAAAAAABAAAARw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5QYAAAAAAADlBgAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "Fa"
					},
					"AgAAAOMGAAAAAAAA5AYAAAAAAAAAAAAA5AYAAAAAAADlBgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4wYAAAAAAADjBgAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert_completion",
					{
						"completion": "Falcor",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Falcor"
					},
					"AgAAAOMGAAAAAAAA4wYAAAAAAAACAAAARmHjBgAAAAAAAOkGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5QYAAAAAAADlBgAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "/Scene"
					},
					"BgAAAOkGAAAAAAAA6gYAAAAAAAAAAAAA6gYAAAAAAADrBgAAAAAAAAAAAADrBgAAAAAAAOwGAAAAAAAAAAAAAOwGAAAAAAAA7QYAAAAAAAAAAAAA7QYAAAAAAADuBgAAAAAAAAAAAADuBgAAAAAAAO8GAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6QYAAAAAAADpBgAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": ".S"
					},
					"AgAAAO8GAAAAAAAA8AYAAAAAAAAAAAAA8AYAAAAAAADxBgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7wYAAAAAAADvBgAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					2,
					"left_delete",
					null,
					"AgAAAPAGAAAAAAAA8AYAAAAAAAABAAAAU+8GAAAAAAAA7wYAAAAAAAABAAAALg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8QYAAAAAAADxBgAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "/Scene.h"
					},
					"CAAAAO8GAAAAAAAA8AYAAAAAAAAAAAAA8AYAAAAAAADxBgAAAAAAAAAAAADxBgAAAAAAAPIGAAAAAAAAAAAAAPIGAAAAAAAA8wYAAAAAAAAAAAAA8wYAAAAAAAD0BgAAAAAAAAAAAAD0BgAAAAAAAPUGAAAAAAAAAAAAAPUGAAAAAAAA9gYAAAAAAAAAAAAA9gYAAAAAAAD3BgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7wYAAAAAAADvBgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/RenderPasses/DepthPass/DepthPass.h",
			"settings":
			{
				"buffer_size": 4506,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"paste",
					null,
					"AQAAAKoHAAAAAAAAygcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqgcAAAAAAACqBwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/RenderPasses/ForwardLightingPass/ForwardLightingPass.h",
			"settings":
			{
				"buffer_size": 5997,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANgHAAAAAAAA2QcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2AcAAAAAAADYBwAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAANkHAAAAAAAA+QcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2QcAAAAAAADZBwAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"left_delete",
					null,
					"AQAAAPgHAAAAAAAA+AcAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+QcAAAAAAAD5BwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/RenderPasses/GBuffer/GBufferBase.h",
			"settings":
			{
				"buffer_size": 4310,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"paste",
					null,
					"AQAAADgHAAAAAAAAWAcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOAcAAAAAAAA4BwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/RenderGraph/RenderPass.cpp",
			"settings":
			{
				"buffer_size": 2631,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"paste",
					null,
					"AQAAAOMGAAAAAAAA/QYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4wYAAAAAAADjBgAAAAAAAAAAAAAA4GlA"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAP0GAAAAAAAA/gYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/QYAAAAAAAD9BgAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "Scebne"
					},
					"BgAAAPQGAAAAAAAA9QYAAAAAAAAAAAAA9QYAAAAAAAD2BgAAAAAAAAAAAAD2BgAAAAAAAPcGAAAAAAAAAAAAAPcGAAAAAAAA+AYAAAAAAAAAAAAA+AYAAAAAAAD5BgAAAAAAAAAAAAD5BgAAAAAAAPoGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9AYAAAAAAAD0BgAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"right_delete",
					null,
					"AQAAAPcGAAAAAAAA9wYAAAAAAAABAAAAYg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9wYAAAAAAAD3BgAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "/Scene"
					},
					"BgAAAPkGAAAAAAAA+gYAAAAAAAAAAAAA+gYAAAAAAAD7BgAAAAAAAAAAAAD7BgAAAAAAAPwGAAAAAAAAAAAAAPwGAAAAAAAA/QYAAAAAAAAAAAAA/QYAAAAAAAD+BgAAAAAAAAAAAAD+BgAAAAAAAP8GAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+QYAAAAAAAD5BgAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					6,
					"right_delete",
					null,
					"BgAAAP8GAAAAAAAA/wYAAAAAAAABAAAAc/8GAAAAAAAA/wYAAAAAAAABAAAAdP8GAAAAAAAA/wYAAAAAAAABAAAAZP8GAAAAAAAA/wYAAAAAAAABAAAAYf8GAAAAAAAA/wYAAAAAAAABAAAAZv8GAAAAAAAA/wYAAAAAAAABAAAAeA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/wYAAAAAAAD/BgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/Falcor.h",
			"settings":
			{
				"buffer_size": 6228,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAABwRAAAAAAAAHREAAAAAAAAAAAAAHREAAAAAAAAeEQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcEQAAAAAAABwRAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMcHAAAAAAAAyAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxwcAAAAAAADHBwAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "\n/*"
					},
					"AwAAAMcHAAAAAAAAyAcAAAAAAAAAAAAAyAcAAAAAAADJBwAAAAAAAAAAAADJBwAAAAAAAMoHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxwcAAAAAAADHBwAAAAAAAAAAAAAAAAAA"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAIoYAAAAAAAAixgAAAAAAAAAAAAAixgAAAAAAACMGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAihgAAAAAAACKGAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "*/"
					},
					"AgAAAIsYAAAAAAAAjBgAAAAAAAAAAAAAjBgAAAAAAACNGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAixgAAAAAAACLGAAAAAAAAAAAAAAAAAAA"
				],
				[
					14,
					1,
					"left_delete",
					null,
					"AQAAANMXAAAAAAAA0xcAAAAAAAC4AAAALy8gI2lmZGVmIEZBTENPUl9EM0QxMgovLyAjaW5jbHVkZSAiRmFsY29yL1JheXRyYWNpbmcvUnRQcm9ncmFtVmFycy5oIgovLyAjaW5jbHVkZSAiRmFsY29yL1JheXRyYWNpbmcvUnRTdGF0ZU9iamVjdC5oIgovLyAjaW5jbHVkZSAiRmFsY29yL1JheXRyYWNpbmcvUnRQcm9ncmFtL1J0UHJvZ3JhbS5oIgovLyAjZW5kaWYKCg",
					"AQAAAAAAAAABAAAA0xcAAAAAAACLGAAAAAAAAAAAAAAAAAAA"
				],
				[
					19,
					3,
					"left_delete",
					null,
					"AwAAANMXAAAAAAAA0xcAAAAAAAACAAAAKi/SFwAAAAAAANIXAAAAAAAAAQAAAArRFwAAAAAAANEXAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAA1RcAAAAAAADTFwAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					3,
					"left_delete",
					null,
					"AwAAAMgHAAAAAAAAyAcAAAAAAAACAAAALyrHBwAAAAAAAMcHAAAAAAAAAQAAAArGBwAAAAAAAMYHAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAygcAAAAAAADIBwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/nvpro_core/nvvk/stagingmemorymanager_vk.hpp",
			"settings":
			{
				"buffer_size": 11011,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/State/GraphicsState.cpp",
			"settings":
			{
				"buffer_size": 8532,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/external/tbb/src/Tbb/cmake/README.rst",
			"settings":
			{
				"buffer_size": 20718,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"revert",
					null,
					"",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+E4AAAAAAAD4TgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "third_party/external/boost/src/Boost/Jamroot",
			"settings":
			{
				"buffer_size": 11934,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKComputeStateObject.cpp",
			"settings":
			{
				"buffer_size": 2823,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKLowLevelContextData.cpp",
			"settings":
			{
				"buffer_size": 5608,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/CopyContext.cpp",
			"settings":
			{
				"buffer_size": 7171,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKTexture.cpp",
			"settings":
			{
				"buffer_size": 25231,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKGpuFence.cpp",
			"settings":
			{
				"buffer_size": 10246,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAL4kAAAAAAAAvyQAAAAAAAAAAAAAvyQAAAAAAADHJAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL4kAAAAAAAAviQAAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEElAAAAAAAAQiUAAAAAAAAAAAAAQiUAAAAAAABKJQAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEElAAAAAAAAQSUAAAAAAAAAAAAAAABSQA"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/D3D12/D3D12Resource.cpp",
			"settings":
			{
				"buffer_size": 6227,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/D3D12/D3D12RenderContext.cpp",
			"settings":
			{
				"buffer_size": 25032,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Device.cpp",
			"settings":
			{
				"buffer_size": 13100,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/GpuTimer.cpp",
			"settings":
			{
				"buffer_size": 4545,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VkQueryHeap.cpp",
			"settings":
			{
				"buffer_size": 3092,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGYIAAAAAAAAZwgAAAAAAAAAAAAAZwgAAAAAAABvCAAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZggAAAAAAABmCAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"left_delete",
					null,
					"AQAAAGsIAAAAAAAAawgAAAAAAAAEAAAAICAgIA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbwgAAAAAAABvCAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "cas"
					},
					"AwAAAGsIAAAAAAAAbAgAAAAAAAAAAAAAbAgAAAAAAABtCAAAAAAAAAAAAABtCAAAAAAAAG4IAAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAawgAAAAAAABrCAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert_completion",
					{
						"completion": "case",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "case"
					},
					"AgAAAGsIAAAAAAAAawgAAAAAAAADAAAAY2FzawgAAAAAAABvCAAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbggAAAAAAABuCAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " QU"
					},
					"AwAAAG8IAAAAAAAAcAgAAAAAAAAAAAAAcAgAAAAAAABxCAAAAAAAAAAAAABxCAAAAAAAAHIIAAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbwgAAAAAAABvCAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert_completion",
					{
						"completion": "QueryHeap",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "QueryHeap"
					},
					"AgAAAHAIAAAAAAAAcAgAAAAAAAACAAAAUVVwCAAAAAAAAHkIAAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcggAAAAAAAByCAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\"\""
					},
					"AgAAAHkIAAAAAAAAeggAAAAAAAAAAAAAeggAAAAAAAB7CAAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeQgAAAAAAAB5CAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					2,
					"left_delete",
					null,
					"AgAAAHoIAAAAAAAAeggAAAAAAAABAAAAInkIAAAAAAAAeQgAAAAAAAABAAAAIg",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAewgAAAAAAAB7CAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "::"
					},
					"AgAAAHkIAAAAAAAAeggAAAAAAAAAAAAAeggAAAAAAAB7CAAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeQgAAAAAAAB5CAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAHsIAAAAAAAAfAgAAAAAAAAAAAAAfAgAAAAAAAB9CAAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAewgAAAAAAAB7CAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "\n\tret"
					},
					"BgAAAH0IAAAAAAAAfggAAAAAAAAAAAAAfggAAAAAAACCCAAAAAAAAAAAAACCCAAAAAAAAIYIAAAAAAAAAAAAAIYIAAAAAAAAhwgAAAAAAAAAAAAAhwgAAAAAAACICAAAAAAAAAAAAACICAAAAAAAAIkIAAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfQgAAAAAAAB9CAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAAIYIAAAAAAAAhggAAAAAAAADAAAAcmV0hggAAAAAAACMCAAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiQgAAAAAAACJCAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIwIAAAAAAAAjQgAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjAgAAAAAAACMCAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"paste",
					null,
					"AQAAAI0IAAAAAAAAxAgAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjQgAAAAAAACNCAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAMQIAAAAAAAAxQgAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxAgAAAAAAADECAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "Acce"
					},
					"BAAAAHsIAAAAAAAAfAgAAAAAAAAAAAAAfAgAAAAAAAB9CAAAAAAAAAAAAAB9CAAAAAAAAH4IAAAAAAAAAAAAAH4IAAAAAAAAfwgAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAewgAAAAAAAB7CAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert_completion",
					{
						"completion": "AccelerationStructure",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "AccelerationStructure"
					},
					"AgAAAHsIAAAAAAAAewgAAAAAAAAEAAAAQWNjZXsIAAAAAAAAkAgAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfwgAAAAAAAB/CAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "Compa"
					},
					"BQAAAJAIAAAAAAAAkQgAAAAAAAAAAAAAkQgAAAAAAACSCAAAAAAAAAAAAACSCAAAAAAAAJMIAAAAAAAAAAAAAJMIAAAAAAAAlAgAAAAAAAAAAAAAlAgAAAAAAACVCAAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkAgAAAAAAACQCAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "ctedSi"
					},
					"BgAAAJUIAAAAAAAAlggAAAAAAAAAAAAAlggAAAAAAACXCAAAAAAAAAAAAACXCAAAAAAAAJgIAAAAAAAAAAAAAJgIAAAAAAAAmQgAAAAAAAAAAAAAmQgAAAAAAACaCAAAAAAAAAAAAACaCAAAAAAAAJsIAAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlQgAAAAAAACVCAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "ze"
					},
					"AgAAAJsIAAAAAAAAnAgAAAAAAAAAAAAAnAgAAAAAAACdCAAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmwgAAAAAAACbCAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOwIAAAAAAAA7QgAAAAAAAAAAAAA7QgAAAAAAADxCAAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7AgAAAAAAADsCAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGsIAAAAAAAAbAgAAAAAAAAAAAAAbAgAAAAAAABwCAAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAawgAAAAAAABrCAAAAAAAAAAAAAAAAEJA"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABAIAAAAAAAAEQgAAAAAAAAAAAAAEQgAAAAAAAAVCAAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEAgAAAAAAAAQCAAAAAAAAAAAAAAAAEJA"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMMHAAAAAAAAxAcAAAAAAAAAAAAAxAcAAAAAAADIBwAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwwcAAAAAAADDBwAAAAAAAAAAAAAAAEJA"
				],
				[
					44,
					1,
					"indent",
					null,
					"DwAAAHIHAAAAAAAAdgcAAAAAAAAAAAAAmwcAAAAAAACfBwAAAAAAAAAAAADHBwAAAAAAAMsHAAAAAAAAAAAAANAHAAAAAAAA1AcAAAAAAAAAAAAA+QcAAAAAAAD9BwAAAAAAAAAAAAAlCAAAAAAAACkIAAAAAAAAAAAAAC4IAAAAAAAAMggAAAAAAAAAAAAAWwgAAAAAAABfCAAAAAAAAAAAAACRCAAAAAAAAJUIAAAAAAAAAAAAAJoIAAAAAAAAnggAAAAAAAAAAAAA1wgAAAAAAADbCAAAAAAAAAAAAAAjCQAAAAAAACcJAAAAAAAAAAAAACwJAAAAAAAAMAkAAAAAAAAAAAAAPQkAAAAAAABBCQAAAAAAAAAAAABgCQAAAAAAAGQJAAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATgkAAAAAAAByBwAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"right_delete",
					null,
					"AQAAANQIAAAAAAAA1AgAAAAAAAABAAAAIA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1AgAAAAAAADUCAAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"left_delete",
					null,
					"AQAAAJUIAAAAAAAAlQgAAAAAAAAEAAAAICAgIA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmQgAAAAAAACZCAAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					2,
					"left_delete",
					null,
					"AgAAAJEIAAAAAAAAkQgAAAAAAAAEAAAAICAgIJAIAAAAAAAAkAgAAAAAAAABAAAACg",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlQgAAAAAAACVCAAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJAIAAAAAAAAkQgAAAAAAAAAAAAAkQgAAAAAAACdCAAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkAgAAAAAAACQCAAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"paste",
					null,
					"AQAAALYIAAAAAAAAvAgAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtggAAAAAAAC2CAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"paste",
					null,
					"AgAAAPMIAAAAAAAAKQkAAAAAAAAAAAAAKQkAAAAAAAApCQAAAAAAADcAAABWS19RVUVSWV9UWVBFX0FDQ0VMRVJBVElPTl9TVFJVQ1RVUkVfQ09NUEFDVEVEX1NJWkVfS0hS",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPMIAAAAAAAAKgkAAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACoJAAAAAAAAKwkAAAAAAAAAAAAAKwkAAAAAAAA3CQAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACoJAAAAAAAAKgkAAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					1,
					"paste",
					null,
					"AQAAADcJAAAAAAAAcwkAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADcJAAAAAAAANwkAAAAAAAAAAAAAAADwvw"
				],
				[
					37,
					1,
					"left_delete",
					null,
					"AQAAAHIJAAAAAAAAcgkAAAAAAAABAAAALg",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHMJAAAAAAAAcwkAAAAAAAAAAAAAAADwvw"
				],
				[
					42,
					1,
					"paste",
					null,
					"AgAAAPMIAAAAAAAAKgkAAAAAAAAAAAAAKgkAAAAAAAAqCQAAAAAAADYAAABWS19RVUVSWV9UWVBFX0FDQ0VMRVJBVElPTl9TVFJVQ1RVUkVfQ09NUEFDVEVEX1NJWkVfTlY",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPMIAAAAAAAAKQkAAAAAAAAAAAAAAADwvw"
				],
				[
					55,
					1,
					"right_delete",
					null,
					"AQAAADgJAAAAAAAAOAkAAAAAAAABAAAAVg",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADgJAAAAAAAAOAkAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"insert",
					{
						"characters": "V"
					},
					"AQAAADgJAAAAAAAAOQkAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA4CQAAAAAAADgJAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAADgJAAAAAAAAOQkAAAAAAAAAAAAAOQkAAAAAAAA6CQAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA4CQAAAAAAADgJAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAOwIAAAAAAAA7QgAAAAAAAAAAAAA7QgAAAAAAADuCAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsCAAAAAAAAOwIAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					2,
					"left_delete",
					null,
					"AgAAADsJAAAAAAAAOwkAAAAAAAABAAAALzoJAAAAAAAAOgkAAAAAAAABAAAALw",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA8CQAAAAAAADwJAAAAAAAAAAAAAACAX0A"
				],
				[
					12,
					1,
					"paste",
					null,
					"AQAAADoJAAAAAAAAQAkAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6CQAAAAAAADoJAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEAJAAAAAAAAQQkAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABACQAAAAAAAEAJAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAHwJAAAAAAAAfQkAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB8CQAAAAAAAHwJAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					2,
					"right_delete",
					null,
					"AgAAAOwIAAAAAAAA7AgAAAAAAAABAAAAL+wIAAAAAAAA7AgAAAAAAAABAAAALw",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsCAAAAAAAAOwIAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAADgJAAAAAAAAOQkAAAAAAAAAAAAAOQkAAAAAAAA6CQAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA4CQAAAAAAADgJAAAAAAAAAAAAAAAAW0A"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "0x00000000"
					},
					"CgAAACQLAAAAAAAAJQsAAAAAAAAAAAAAJQsAAAAAAAAmCwAAAAAAAAAAAAAmCwAAAAAAACcLAAAAAAAAAAAAACcLAAAAAAAAKAsAAAAAAAAAAAAAKAsAAAAAAAApCwAAAAAAAAAAAAApCwAAAAAAACoLAAAAAAAAAAAAACoLAAAAAAAAKwsAAAAAAAAAAAAAKwsAAAAAAAAsCwAAAAAAAAAAAAAsCwAAAAAAAC0LAAAAAAAAAAAAAC0LAAAAAAAALgsAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkCwAAAAAAACQLAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": ";//"
					},
					"AwAAAC4LAAAAAAAALwsAAAAAAAAAAAAALwsAAAAAAAAwCwAAAAAAAAAAAAAwCwAAAAAAADELAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAuCwAAAAAAAC4LAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/QueryHeap.h",
			"settings":
			{
				"buffer_size": 3623,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAG4IAAAAAAAAbwgAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbggAAAAAAABuCAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAG8IAAAAAAAAcAgAAAAAAAAAAAAAcAgAAAAAAAB4CAAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbwgAAAAAAABvCAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAAHgIAAAAAAAAmggAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeAgAAAAAAAB4CAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/ResourceManager.cpp",
			"settings":
			{
				"buffer_size": 13336,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "\nretu"
					},
					"BgAAAMEJAAAAAAAAwgkAAAAAAAAAAAAAwgkAAAAAAADGCQAAAAAAAAAAAADGCQAAAAAAAMcJAAAAAAAAAAAAAMcJAAAAAAAAyAkAAAAAAAAAAAAAyAkAAAAAAADJCQAAAAAAAAAAAADJCQAAAAAAAMoJAAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBCQAAAAAAAMEJAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "rn"
					},
					"AgAAAMoJAAAAAAAAywkAAAAAAAAAAAAAywkAAAAAAADMCQAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKCQAAAAAAAMoJAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": " tru"
					},
					"BAAAAMwJAAAAAAAAzQkAAAAAAAAAAAAAzQkAAAAAAADOCQAAAAAAAAAAAADOCQAAAAAAAM8JAAAAAAAAAAAAAM8JAAAAAAAA0AkAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADMCQAAAAAAAMwJAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"insert_completion",
					{
						"completion": "true",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "true"
					},
					"AgAAAM0JAAAAAAAAzQkAAAAAAAADAAAAdHJ1zQkAAAAAAADRCQAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADQCQAAAAAAANAJAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANEJAAAAAAAA0gkAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADRCQAAAAAAANEJAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANIJAAAAAAAA0wkAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSCQAAAAAAANIJAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "\n/*"
					},
					"BAAAANMJAAAAAAAA1AkAAAAAAAAAAAAA1AkAAAAAAADYCQAAAAAAAAAAAADYCQAAAAAAANkJAAAAAAAAAAAAANkJAAAAAAAA2gkAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADTCQAAAAAAANMJAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"reindent",
					null,
					"AQAAALILAAAAAAAAtgsAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyCwAAAAAAALILAAAAAAAAAAAAAAAAS0A"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "*/"
					},
					"AgAAALYLAAAAAAAAtwsAAAAAAAAAAAAAtwsAAAAAAAC4CwAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC2CwAAAAAAALYLAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"right_delete",
					null,
					"AQAAAMYJAAAAAAAAxgkAAAAAAAASAAAAcmV0dXJuIHRydWU7IAogICAg",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADGCQAAAAAAANgJAAAAAAAAAAAAAAAAQkA"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKDescriptorPool.cpp",
			"settings":
			{
				"buffer_size": 5195,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/MinimalPathTracer/MinimalPathTracer.rt.slang",
			"settings":
			{
				"buffer_size": 17351,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAIg3AAAAAAAAiTcAAAAAAAAAAAAAiTcAAAAAAACKNwAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIg3AAAAAAAAiDcAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"reindent",
					null,
					"AQAAAIk3AAAAAAAAjTcAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIk3AAAAAAAAiTcAAAAAAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "JOPAHU"
					},
					"BgAAAI03AAAAAAAAjjcAAAAAAAAAAAAAjjcAAAAAAACPNwAAAAAAAAAAAACPNwAAAAAAAJA3AAAAAAAAAAAAAJA3AAAAAAAAkTcAAAAAAAAAAAAAkTcAAAAAAACSNwAAAAAAAAAAAACSNwAAAAAAAJM3AAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI03AAAAAAAAjTcAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "Y"
					},
					"AQAAAJM3AAAAAAAAlDcAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJM3AAAAAAAAkzcAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					3,
					"left_delete",
					null,
					"AwAAAI03AAAAAAAAjTcAAAAAAAAHAAAASk9QQUhVWYk3AAAAAAAAiTcAAAAAAAAEAAAAICAgIIg3AAAAAAAAiDcAAAAAAAABAAAACg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI03AAAAAAAAlDcAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "src/RenderPasses/ForwardLightingPass/ForwardLightingPass.slang",
			"settings":
			{
				"buffer_size": 6508,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAEYMAAAAAAAARwwAAAAAAAAAAAAARwwAAAAAAABIDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARgwAAAAAAABGDAAAAAAAAAAAAAAAADJA"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAAEcMAAAAAAAAYw8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARwwAAAAAAABHDAAAAAAAAAAAAAAAAAAA"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAEYMAAAAAAAARwwAAAAAAAAAAAAARwwAAAAAAABIDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARgwAAAAAAABGDAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEcMAAAAAAAASAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARwwAAAAAAABHDAAAAAAAAAAAAAAAAAAA"
				],
				[
					14,
					1,
					"paste",
					null,
					"AQAAAEgMAAAAAAAAkgwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASAwAAAAAAABIDAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"CAAAAF8UAAAAAAAAYBQAAAAAAAAAAAAAYBQAAAAAAABsFAAAAAAAAAAAAABsFAAAAAAAAG0UAAAAAAAAAAAAAG0UAAAAAAAAeRQAAAAAAAAAAAAAYBQAAAAAAABgFAAAAAAAAAwAAAAgICAgICAgICAgICBtFAAAAAAAAG4UAAAAAAAAAAAAAG4UAAAAAAAAehQAAAAAAAAAAAAAYRQAAAAAAABhFAAAAAAAAAwAAAAgICAgICAgICAgICA",
					"AQAAAAAAAAABAAAAXxQAAAAAAABfFAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"reindent",
					null,
					"AQAAAGEUAAAAAAAAbRQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYRQAAAAAAABhFAAAAAAAAAAAAAAAAFtA"
				],
				[
					20,
					1,
					"paste",
					null,
					"AQAAAG0UAAAAAAAA1hQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbRQAAAAAAABtFAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AwAAAJ4UAAAAAAAAohQAAAAAAAAAAAAA2xQAAAAAAADbFAAAAAAAAAwAAAAgICAgICAgICAgICCiFAAAAAAAAKYUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnhQAAAAAAACeFAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"reindent",
					null,
					"AQAAAN8UAAAAAAAA6xQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3xQAAAAAAADfFAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "shadow"
					},
					"BgAAAOsUAAAAAAAA7BQAAAAAAAAAAAAA7BQAAAAAAADtFAAAAAAAAAAAAADtFAAAAAAAAO4UAAAAAAAAAAAAAO4UAAAAAAAA7xQAAAAAAAAAAAAA7xQAAAAAAADwFAAAAAAAAAAAAADwFAAAAAAAAPEUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6xQAAAAAAADrFAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "Fac"
					},
					"AwAAAPEUAAAAAAAA8hQAAAAAAAAAAAAA8hQAAAAAAADzFAAAAAAAAAAAAADzFAAAAAAAAPQUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8RQAAAAAAADxFAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "tor"
					},
					"AwAAAPQUAAAAAAAA9RQAAAAAAAAAAAAA9RQAAAAAAAD2FAAAAAAAAAAAAAD2FAAAAAAAAPcUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9BQAAAAAAAD0FAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAPcUAAAAAAAA+BQAAAAAAAAAAAAA+BQAAAAAAAD5FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9xQAAAAAAAD3FAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPkUAAAAAAAA+hQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+RQAAAAAAAD5FAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"paste",
					null,
					"AQAAAPoUAAAAAAAAQxUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+hQAAAAAAAD6FAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "1.0"
					},
					"BAAAAP4UAAAAAAAA/xQAAAAAAAAAAAAA/xQAAAAAAAD/FAAAAAAAADgAAABnRGF0YS5zdGFuZGFyZE1hdGVyaWFsLmV2YWwoc2QsIGxzLmRpcikgKiBscy5MaSAqIGludlBkZv8UAAAAAAAAABUAAAAAAAAAAAAAABUAAAAAAAABFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/hQAAAAAAAA2FQAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					7,
					"right_delete",
					null,
					"BwAAAAQVAAAAAAAABBUAAAAAAAABAAAAZgQVAAAAAAAABBUAAAAAAAABAAAAbAQVAAAAAAAABBUAAAAAAAABAAAAbwQVAAAAAAAABBUAAAAAAAABAAAAYQQVAAAAAAAABBUAAAAAAAABAAAAdAQVAAAAAAAABBUAAAAAAAABAAAAMwQVAAAAAAAABBUAAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAABBUAAAAAAAAEFQAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"right_delete",
					null,
					"AQAAAAUVAAAAAAAABRUAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAABRUAAAAAAAAFFQAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "..0"
					},
					"AwAAAAUVAAAAAAAABhUAAAAAAAAAAAAABhUAAAAAAAAHFQAAAAAAAAAAAAAHFQAAAAAAAAgVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABRUAAAAAAAAFFQAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"right_delete",
					null,
					"AQAAAAYVAAAAAAAABhUAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAABhUAAAAAAAAGFQAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": ".0"
					},
					"AgAAAMgTAAAAAAAAyRMAAAAAAAAAAAAAyRMAAAAAAADKEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyBMAAAAAAADIEwAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"AwAAAHUVAAAAAAAAdhUAAAAAAAAAAAAAdhUAAAAAAAB3FQAAAAAAAAAAAAB3FQAAAAAAAHgVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdRUAAAAAAAB1FQAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"reindent",
					null,
					"AQAAAHYVAAAAAAAAfhUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdhUAAAAAAAB2FQAAAAAAAAAAAAAAAAAA"
				],
				[
					54,
					1,
					"paste",
					null,
					"AQAAAH4VAAAAAAAAGRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfhUAAAAAAAB+FQAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"right_delete",
					null,
					"AQAAAH4VAAAAAAAAfhUAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAfhUAAAAAAAB+FQAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					4,
					"right_delete",
					null,
					"BAAAALIVAAAAAAAAshUAAAAAAAABAAAAILIVAAAAAAAAshUAAAAAAAABAAAAILIVAAAAAAAAshUAAAAAAAABAAAAILIVAAAAAAAAshUAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAshUAAAAAAACyFQAAAAAAAAAAAAAAAFJA"
				],
				[
					62,
					4,
					"right_delete",
					null,
					"BAAAAPMVAAAAAAAA8xUAAAAAAAABAAAAIPMVAAAAAAAA8xUAAAAAAAABAAAAIPMVAAAAAAAA8xUAAAAAAAABAAAAIPMVAAAAAAAA8xUAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA8xUAAAAAAADzFQAAAAAAAAAAAAAAAFJA"
				],
				[
					71,
					1,
					"left_delete",
					null,
					"AQAAAGsUAAAAAAAAaxQAAAAAAACoAAAAICAgICAvLyBUZXN0IHZpc2liaWxpdHkgYnkgdHJhY2luZyBhIHNoYWRvdyByYXkuCiAgICAgICAgICAgIGJvb2wgViA9IHRyYWNlU2hhZG93UmF5KHJheU9yaWdpbiwgbHMuZGlyLCBscy5kaXN0YW5jZSk7CiAgICAgICAgICAgIHNoYWRvd0ZhY3RvciA9IFYgPyAxLjAgOiAwLjA7CiAgICAgICAg",
					"AQAAAAAAAAABAAAAaxQAAAAAAAATFQAAAAAAAAAAAAAAAFJA"
				],
				[
					73,
					1,
					"left_delete",
					null,
					"AQAAAGEUAAAAAAAAYRQAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAYhQAAAAAAABiFAAAAAAAAAAAAAAAAFJA"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAANQTAAAAAAAA1RMAAAAAAAAAAAAA1RMAAAAAAADWEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1BMAAAAAAADUEwAAAAAAAAAAAAAAAFJA"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAOoTAAAAAAAA6xMAAAAAAAAAAAAA6xMAAAAAAADsEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6hMAAAAAAADqEwAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAG4UAAAAAAAAbxQAAAAAAAAAAAAAbxQAAAAAAABwFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbhQAAAAAAABuFAAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": "\nfloat3"
					},
					"CAAAAAYVAAAAAAAABxUAAAAAAAAAAAAABxUAAAAAAAAPFQAAAAAAAAAAAAAPFQAAAAAAABAVAAAAAAAAAAAAABAVAAAAAAAAERUAAAAAAAAAAAAAERUAAAAAAAASFQAAAAAAAAAAAAASFQAAAAAAABMVAAAAAAAAAAAAABMVAAAAAAAAFBUAAAAAAAAAAAAAFBUAAAAAAAAVFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABhUAAAAAAAAGFQAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": " r"
					},
					"AgAAABUVAAAAAAAAFhUAAAAAAAAAAAAAFhUAAAAAAAAXFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFRUAAAAAAAAVFQAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": "ayOrigin"
					},
					"CAAAABcVAAAAAAAAGBUAAAAAAAAAAAAAGBUAAAAAAAAZFQAAAAAAAAAAAAAZFQAAAAAAABoVAAAAAAAAAAAAABoVAAAAAAAAGxUAAAAAAAAAAAAAGxUAAAAAAAAcFQAAAAAAAAAAAAAcFQAAAAAAAB0VAAAAAAAAAAAAAB0VAAAAAAAAHhUAAAAAAAAAAAAAHhUAAAAAAAAfFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFxUAAAAAAAAXFQAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAB8VAAAAAAAAIBUAAAAAAAAAAAAAIBUAAAAAAAAhFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHxUAAAAAAAAfFQAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACEVAAAAAAAAIhUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIRUAAAAAAAAhFQAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"paste",
					null,
					"AQAAACIVAAAAAAAAKRUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIhUAAAAAAAAiFQAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAACkVAAAAAAAAKhUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKRUAAAAAAAApFQAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAYHAAAAAAAABwcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABgcAAAAAAAAGBwAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"paste",
					null,
					"AQAAAAcHAAAAAAAAHwcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABwcAAAAAAAAHBwAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					3,
					"left_delete",
					null,
					"AwAAAGEMAAAAAAAAYQwAAAAAAABoAwAALyoqIFBheWxvYWQgZm9yIHNoYWRvdyByYXkuCiovCnN0cnVjdCBTaGFkb3dSYXlEYXRhCnsKICAgIGJvb2wgdmlzaWJsZTsKfTsKCi8qKiBUcmFjZXMgYSBzaGFkb3cgcmF5IHRvd2FyZHMgYSBsaWdodCBzb3VyY2UuCiAgICBccGFyYW1baW5dIG9yaWdpbiBSYXkgb3JpZ2luIGZvciB0aGUgc2hhZG93IHJheS4KICAgIFxwYXJhbVtpbl0gZGlyIERpcmVjdGlvbiBmcm9tIHNoYWRpbmcgcG9pbnQgdG93YXJkcyB0aGUgbGlnaHQgc291cmNlIChub3JtYWxpemVkKS4KICAgIFxwYXJhbVtpbl0gZGlzdGFuY2UgRGlzdGFuY2UgdG8gdGhlIGxpZ2h0IHNvdXJjZS4KICAgIFxyZXR1cm4gVHJ1ZSBpZiBsaWdodCBpcyB2aXNpYmxlLCBmYWxzZSBvdGhlcndpc2UuCiovCmJvb2wgdHJhY2VTaGFkb3dSYXkoZmxvYXQzIG9yaWdpbiwgZmxvYXQzIGRpciwgZmxvYXQgZGlzdGFuY2UpCnsKICAgIFJheURlc2MgcmF5OwogICAgcmF5Lk9yaWdpbiA9IG9yaWdpbjsKICAgIHJheS5EaXJlY3Rpb24gPSBkaXI7CiAgICByYXkuVE1pbiA9IDAuZjsKICAgIHJheS5UTWF4ID0gZGlzdGFuY2U7CgogICAgU2hhZG93UmF5RGF0YSByYXlEYXRhOwogICAgcmF5RGF0YS52aXNpYmxlID0gZmFsc2U7ICAgIC8vIFNldCB0byB0cnVlIGJ5IG1pc3Mgc2hhZGVyIGlmIHJheSBpcyBub3QgdGVybWluYXRlZCBiZWZvcmUKICAgIFRyYWNlUmF5KGdTY2VuZS5ydEFjY2VsLCBSQVlfRkxBR19BQ0NFUFRfRklSU1RfSElUX0FORF9FTkRfU0VBUkNILCAweGZmIC8qIGluc3RhbmNlSW5jbHVzaW9uTWFzayAqLywgMSAvKiBoaXRJZHggKi8sIHJheVR5cGVDb3VudCwgMSAvKiBtaXNzSWR4ICovLCByYXksIHJheURhdGEpOwoKICAgIHJldHVybiByYXlEYXRhLnZpc2libGU7Cn1gDAAAAAAAAGAMAAAAAAAAAQAAAApfDAAAAAAAAF8MAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAyQ8AAAAAAABhDAAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": "Inlu"
					},
					"BAAAAB4HAAAAAAAAHwcAAAAAAAAAAAAAHwcAAAAAAAAgBwAAAAAAAAAAAAAgBwAAAAAAACEHAAAAAAAAAAAAACEHAAAAAAAAIgcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgcAAAAAAAAeBwAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"left_delete",
					null,
					"AQAAACEHAAAAAAAAIQcAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAAIgcAAAAAAAAiBwAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": "ine"
					},
					"AwAAACEHAAAAAAAAIgcAAAAAAAAAAAAAIgcAAAAAAAAjBwAAAAAAAAAAAAAjBwAAAAAAACQHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIQcAAAAAAAAhBwAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"CAAAACASAAAAAAAAIRIAAAAAAAAAAAAAIRIAAAAAAAApEgAAAAAAAAAAAAApEgAAAAAAACoSAAAAAAAAAAAAACoSAAAAAAAAMhIAAAAAAAAAAAAAIRIAAAAAAAAhEgAAAAAAAAgAAAAgICAgICAgICoSAAAAAAAAKxIAAAAAAAAAAAAAKxIAAAAAAAAzEgAAAAAAAAAAAAAiEgAAAAAAACISAAAAAAAACAAAACAgICAgICAg",
					"AQAAAAAAAAABAAAAIBIAAAAAAAAgEgAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"reindent",
					null,
					"AQAAACISAAAAAAAAKhIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIhIAAAAAAAAiEgAAAAAAAAAAAAAAAFJA"
				],
				[
					119,
					1,
					"paste",
					null,
					"AQAAACoSAAAAAAAAehIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKhIAAAAAAAAqEgAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": "\n//"
					},
					"BQAAAOgRAAAAAAAA6REAAAAAAAAAAAAA6REAAAAAAADxEQAAAAAAAAAAAACEEgAAAAAAAIQSAAAAAAAACAAAACAgICAgICAg8REAAAAAAADyEQAAAAAAAAAAAADyEQAAAAAAAPMRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6BEAAAAAAADoEQAAAAAAAAAAAAAAAFJA"
				],
				[
					129,
					1,
					"left_delete",
					null,
					"AQAAACsSAAAAAAAAKxIAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAALBIAAAAAAAAsEgAAAAAAAAAAAAAAgFZA"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAADQSAAAAAAAANRIAAAAAAAAAAAAANRIAAAAAAAA2EgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANBIAAAAAAAA0EgAAAAAAAAAAAAAAAPC/"
				],
				[
					135,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAIcSAAAAAAAAiBIAAAAAAAAAAAAAiBIAAAAAAACJEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhxIAAAAAAACHEgAAAAAAAAAAAAAAgFZA"
				],
				[
					137,
					1,
					"reindent",
					null,
					"AQAAAIgSAAAAAAAAkBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiBIAAAAAAACIEgAAAAAAAAAAAAAAAAAA"
				],
				[
					138,
					1,
					"paste",
					null,
					"AQAAAJASAAAAAAAAHhQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkBIAAAAAAACQEgAAAAAAAAAAAAAAAPC/"
				],
				[
					142,
					1,
					"indent",
					null,
					"CQAAAJESAAAAAAAAlRIAAAAAAAAAAAAAphIAAAAAAACqEgAAAAAAAAAAAADMEgAAAAAAANASAAAAAAAAAAAAAPUSAAAAAAAA+RIAAAAAAAAAAAAADRMAAAAAAAAREwAAAAAAAAAAAAAmEwAAAAAAACoTAAAAAAAAAAAAAH4TAAAAAAAAghMAAAAAAAAAAAAAwBMAAAAAAADEEwAAAAAAAAAAAADcEwAAAAAAAOATAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlBIAAAAAAAAeFAAAAAAAAAAAAAAAAPC/"
				],
				[
					151,
					1,
					"paste",
					null,
					"AgAAAOQTAAAAAAAA8BMAAAAAAAAAAAAA8BMAAAAAAADwEwAAAAAAABwAAABnT3V0cHV0W2Rpc3BhdGNoVGhyZWFkSWQueHld",
					"AQAAAAAAAAABAAAA5BMAAAAAAAAAFAAAAAAAAAAAAAAAAPC/"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": ".0"
					},
					"AwAAAC0UAAAAAAAALhQAAAAAAAAAAAAAiBIAAAAAAACIEgAAAAAAAAgAAAAgICAgICAgICYUAAAAAAAAJxQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALRQAAAAAAAAtFAAAAAAAAAAAAAAAAPC/"
				],
				[
					156,
					1,
					"insert",
					{
						"characters": ".0"
					},
					"AgAAACsUAAAAAAAALBQAAAAAAAAAAAAALBQAAAAAAAAtFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKxQAAAAAAAArFAAAAAAAAAAAAAAAAPC/"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAADgUAAAAAAAAORQAAAAAAAAAAAAAORQAAAAAAAA6FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOBQAAAAAAAA4FAAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"paste",
					null,
					"AgAAALMSAAAAAAAAvBIAAAAAAAAAAAAAvBIAAAAAAAC8EgAAAAAAAA8AAABmbG9hdDMoMCwgMCwgMCk",
					"AQAAAAAAAAABAAAAsxIAAAAAAADCEgAAAAAAAAAAAAAAAPC/"
				],
				[
					172,
					1,
					"paste",
					null,
					"AgAAANYSAAAAAAAA3BIAAAAAAAAAAAAA3BIAAAAAAADcEgAAAAAAAA8AAABmbG9hdDMoMSwgMCwgMCk",
					"AQAAAAAAAAABAAAA1hIAAAAAAADlEgAAAAAAAAAAAAAAAPC/"
				],
				[
					175,
					1,
					"insert",
					{
						"characters": "000"
					},
					"AwAAAAoTAAAAAAAACxMAAAAAAAAAAAAACxMAAAAAAAAMEwAAAAAAAAAAAAAMEwAAAAAAAA0TAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAChMAAAAAAAAKEwAAAAAAAAAAAAAAAPC/"
				],
				[
					182,
					1,
					"insert",
					{
						"characters": "Scene."
					},
					"BwAAAIsTAAAAAAAAjBMAAAAAAAAAAAAAjBMAAAAAAACMEwAAAAAAAAQAAABUbGFzjBMAAAAAAACNEwAAAAAAAAAAAACNEwAAAAAAAI4TAAAAAAAAAAAAAI4TAAAAAAAAjxMAAAAAAAAAAAAAjxMAAAAAAACQEwAAAAAAAAAAAACQEwAAAAAAAJETAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAixMAAAAAAACPEwAAAAAAAAAAAAAAAPC/"
				],
				[
					183,
					1,
					"paste",
					null,
					"AQAAAJETAAAAAAAAmBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkRMAAAAAAACREwAAAAAAAAAAAAAAAPC/"
				],
				[
					186,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAAcHAAAAAAAACAcAAAAAAAAAAAAACAcAAAAAAAAJBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABwcAAAAAAAAHBwAAAAAAAAAAAAAAAPC/"
				],
				[
					190,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAANgSAAAAAAAA2RIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2BIAAAAAAADYEgAAAAAAAAAAAAAAAPC/"
				],
				[
					193,
					1,
					"right_delete",
					null,
					"AQAAACQUAAAAAAAAJBQAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAAJBQAAAAAAAAkFAAAAAAAAAAAAAAAAPC/"
				],
				[
					194,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAACQUAAAAAAAAJRQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJBQAAAAAAAAkFAAAAAAAAAAAAAAAAPC/"
				],
				[
					196,
					1,
					"right_delete",
					null,
					"AQAAACoUAAAAAAAAKhQAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAKhQAAAAAAAAqFAAAAAAAAAAAAAAAAPC/"
				],
				[
					197,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAACoUAAAAAAAAKxQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKhQAAAAAAAAqFAAAAAAAAAAAAAAAAPC/"
				],
				[
					200,
					3,
					"right_delete",
					null,
					"AwAAAA0TAAAAAAAADRMAAAAAAAABAAAAMA0TAAAAAAAADRMAAAAAAAABAAAAMA0TAAAAAAAADRMAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAADRMAAAAAAAANEwAAAAAAAAAAAAAAAPC/"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"CAAAAGkTAAAAAAAAahMAAAAAAAAAAAAAahMAAAAAAAByEwAAAAAAAAAAAAByEwAAAAAAAHMTAAAAAAAAAAAAAHMTAAAAAAAAexMAAAAAAAAAAAAAahMAAAAAAABqEwAAAAAAAAgAAAAgICAgICAgIHMTAAAAAAAAdBMAAAAAAAAAAAAAdBMAAAAAAAB8EwAAAAAAAAAAAABrEwAAAAAAAGsTAAAAAAAACAAAACAgICAgICAg",
					"AQAAAAAAAAABAAAAaRMAAAAAAABpEwAAAAAAAAAAAAAAAPC/"
				],
				[
					205,
					1,
					"paste",
					null,
					"AQAAAGsTAAAAAAAAmRQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaxMAAAAAAABrEwAAAAAAAAAAAAAAAFJA"
				],
				[
					207,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AwAAABgTAAAAAAAAGRMAAAAAAAAAAAAAmxQAAAAAAACbFAAAAAAAAAgAAAAgICAgICAgIBkTAAAAAAAAGhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGBMAAAAAAAAYEwAAAAAAAAAAAAAAAEtA"
				],
				[
					214,
					1,
					"insert",
					{
						"characters": "000"
					},
					"AwAAAA0TAAAAAAAADhMAAAAAAAAAAAAADhMAAAAAAAAPEwAAAAAAAAAAAAAPEwAAAAAAABATAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADRMAAAAAAAANEwAAAAAAAAAAAAAAAPC/"
				],
				[
					217,
					1,
					"insert",
					{
						"characters": "float3(1"
					},
					"CAAAANgSAAAAAAAA2RIAAAAAAAAAAAAA2RIAAAAAAADaEgAAAAAAAAAAAADaEgAAAAAAANsSAAAAAAAAAAAAANsSAAAAAAAA3BIAAAAAAAAAAAAA3BIAAAAAAADdEgAAAAAAAAAAAADdEgAAAAAAAN4SAAAAAAAAAAAAAN4SAAAAAAAA3xIAAAAAAAAAAAAA3xIAAAAAAADgEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2BIAAAAAAADYEgAAAAAAAAAAAAAAAPC/"
				],
				[
					218,
					1,
					"insert",
					{
						"characters": ",0,0)"
					},
					"BQAAAOASAAAAAAAA4RIAAAAAAAAAAAAA4RIAAAAAAADiEgAAAAAAAAAAAADiEgAAAAAAAOMSAAAAAAAAAAAAAOMSAAAAAAAA5BIAAAAAAAAAAAAA5BIAAAAAAADlEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4BIAAAAAAADgEgAAAAAAAAAAAAAAAPC/"
				],
				[
					219,
					1,
					"insert",
					{
						"characters": "P"
					},
					"AQAAAOUSAAAAAAAA5hIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5RIAAAAAAADlEgAAAAAAAAAAAAAAAPC/"
				],
				[
					220,
					1,
					"left_delete",
					null,
					"AQAAAOUSAAAAAAAA5RIAAAAAAAABAAAAUA",
					"AQAAAAAAAAABAAAA5hIAAAAAAADmEgAAAAAAAAAAAAAAAPC/"
				],
				[
					221,
					1,
					"insert",
					{
						"characters": ";//"
					},
					"AwAAAOUSAAAAAAAA5hIAAAAAAAAAAAAA5hIAAAAAAADnEgAAAAAAAAAAAADnEgAAAAAAAOgSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5RIAAAAAAADlEgAAAAAAAAAAAAAAAPC/"
				],
				[
					226,
					1,
					"right_delete",
					null,
					"AQAAAIATAAAAAAAAgBMAAAAAAAClAAAAI2lmIElTX1NFVChTQ0VORV9QUklNSVRJVkVfVFlQRV9GTEFHUywgUFJJTUlUSVZFX1RZUEVfUFJPQ0VEVVJBTCkKICAgICAgICBSYXlRdWVyeTxSQVlfRkxBR19GT1JDRV9PUEFRVUUgfCBSQVlfRkxBR19BQ0NFUFRfRklSU1RfSElUX0FORF9FTkRfU0VBUkNIPiByYXlRdWVyeTsKI2Vsc2UK",
					"AQAAAAAAAAABAAAAgBMAAAAAAAAlFAAAAAAAAAAAAAAAAAAA"
				],
				[
					229,
					1,
					"right_delete",
					null,
					"AQAAAAMUAAAAAAAAAxQAAAAAAAAHAAAAI2VuZGlmCg",
					"AQAAAAAAAAABAAAAAxQAAAAAAAAKFAAAAAAAAAAAAAAAAAAA"
				],
				[
					238,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAAMUAAAAAAAABBQAAAAAAAAAAAAABBQAAAAAAAAFFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAxQAAAAAAAADFAAAAAAAAAAAAAAAYG5A"
				],
				[
					240,
					1,
					"reindent",
					null,
					"AQAAAAQUAAAAAAAADBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABBQAAAAAAAAEFAAAAAAAAAAAAAAAAAAA"
				],
				[
					241,
					1,
					"paste",
					null,
					"AQAAAAwUAAAAAAAA5BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADBQAAAAAAAAMFAAAAAAAAAAAAAAAAPC/"
				],
				[
					244,
					2,
					"left_delete",
					null,
					"AgAAADsUAAAAAAAAOxQAAAAAAAANAAAAICAgICAgICAgICAgIDoUAAAAAAAAOhQAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAASBQAAAAAAAA7FAAAAAAAAAAAAAAAAPC/"
				],
				[
					245,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADoUAAAAAAAAOxQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOhQAAAAAAAA6FAAAAAAAAAAAAAAAAPC/"
				],
				[
					251,
					2,
					"left_delete",
					null,
					"AgAAAKEUAAAAAAAAoRQAAAAAAAANAAAAICAgICAgICAgICAgIKAUAAAAAAAAoBQAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAArhQAAAAAAAChFAAAAAAAAAAAAAAAAPC/"
				],
				[
					252,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKAUAAAAAAAAoRQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoBQAAAAAAACgFAAAAAAAAAAAAAAAAPC/"
				],
				[
					255,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAGwUAAAAAAAAcBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbBQAAAAAAABsFAAAAAAAAAAAAAAAAPC/"
				],
				[
					263,
					1,
					"paste",
					null,
					"AgAAAAAVAAAAAAAACBUAAAAAAAAAAAAACBUAAAAAAAAIFQAAAAAAAA0AAABSQVlfRkxBR19OT05F",
					"AQAAAAAAAAABAAAAABUAAAAAAAANFQAAAAAAAAAAAAAAAPC/"
				],
				[
					266,
					1,
					"insert",
					{
						"characters": "01"
					},
					"AgAAAAYTAAAAAAAABxMAAAAAAAAAAAAABxMAAAAAAAAIEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABhMAAAAAAAAGEwAAAAAAAAAAAAAAAPC/"
				],
				[
					269,
					1,
					"paste",
					null,
					"AgAAAB4TAAAAAAAAIxMAAAAAAAAAAAAAIxMAAAAAAAAjEwAAAAAAAAYAAAAxMDAwLmY",
					"AQAAAAAAAAABAAAAHhMAAAAAAAAkEwAAAAAAAAAAAAAAAPC/"
				],
				[
					270,
					1,
					"right_delete",
					null,
					"AQAAACMTAAAAAAAAIxMAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAIxMAAAAAAAAjEwAAAAAAAAAAAAAAAPC/"
				],
				[
					272,
					16,
					"right_delete",
					null,
					"EAAAANgSAAAAAAAA2BIAAAAAAAABAAAAZtgSAAAAAAAA2BIAAAAAAAABAAAAbNgSAAAAAAAA2BIAAAAAAAABAAAAb9gSAAAAAAAA2BIAAAAAAAABAAAAYdgSAAAAAAAA2BIAAAAAAAABAAAAdNgSAAAAAAAA2BIAAAAAAAABAAAAM9gSAAAAAAAA2BIAAAAAAAABAAAAKNgSAAAAAAAA2BIAAAAAAAABAAAAMdgSAAAAAAAA2BIAAAAAAAABAAAALNgSAAAAAAAA2BIAAAAAAAABAAAAMNgSAAAAAAAA2BIAAAAAAAABAAAALNgSAAAAAAAA2BIAAAAAAAABAAAAMNgSAAAAAAAA2BIAAAAAAAABAAAAKdgSAAAAAAAA2BIAAAAAAAABAAAAO9gSAAAAAAAA2BIAAAAAAAABAAAAL9gSAAAAAAAA2BIAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAA2BIAAAAAAADYEgAAAAAAAAAAAAAAAGtA"
				],
				[
					278,
					1,
					"paste",
					null,
					"AQAAACsUAAAAAAAAQxQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKxQAAAAAAAArFAAAAAAAAAAAAAAAAPC/"
				],
				[
					281,
					1,
					"paste",
					null,
					"AQAAAK0UAAAAAAAAxRQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArRQAAAAAAACtFAAAAAAAAAAAAAAAAPC/"
				],
				[
					289,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAABUKAAAAAAAAFgoAAAAAAAAAAAAAFgoAAAAAAAAXCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQoAAAAAAAAVCgAAAAAAAAAAAAAAAPC/"
				],
				[
					291,
					1,
					"paste",
					null,
					"AQAAABYKAAAAAAAANQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgoAAAAAAAAWCgAAAAAAAAAAAAAAAAAA"
				],
				[
					292,
					1,
					"insert",
					{
						"characters": " gTa"
					},
					"BAAAADUKAAAAAAAANgoAAAAAAAAAAAAANgoAAAAAAAA3CgAAAAAAAAAAAAA3CgAAAAAAADgKAAAAAAAAAAAAADgKAAAAAAAAOQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQoAAAAAAAA1CgAAAAAAAAAAAAAAAPC/"
				],
				[
					293,
					1,
					"left_delete",
					null,
					"AQAAADgKAAAAAAAAOAoAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAOQoAAAAAAAA5CgAAAAAAAAAAAAAAAPC/"
				],
				[
					294,
					1,
					"insert",
					{
						"characters": "las;"
					},
					"BAAAADgKAAAAAAAAOQoAAAAAAAAAAAAAOQoAAAAAAAA6CgAAAAAAAAAAAAA6CgAAAAAAADsKAAAAAAAAAAAAADsKAAAAAAAAPAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOAoAAAAAAAA4CgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/RenderPasses/ForwardLightingPass/ForwardLightingPass.cpp",
			"settings":
			{
				"buffer_size": 12782,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHUpAAAAAAAAdikAAAAAAAAAAAAAdikAAAAAAAB6KQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdSkAAAAAAAB1KQAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "mpV"
					},
					"BAAAAHUpAAAAAAAAdikAAAAAAAAAAAAAdykAAAAAAAB3KQAAAAAAAAQAAAAgICAgdikAAAAAAAB3KQAAAAAAAAAAAAB3KQAAAAAAAHgpAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdSkAAAAAAAB1KQAAAAAAAAAAAAAAAEJA"
				],
				[
					6,
					1,
					"insert_completion",
					{
						"completion": "mpVars",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mpVars"
					},
					"AgAAAHUpAAAAAAAAdSkAAAAAAAADAAAAbXBWdSkAAAAAAAB7KQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeCkAAAAAAAB4KQAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAHspAAAAAAAAfSkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeykAAAAAAAB7KQAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAHwpAAAAAAAAfikAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfCkAAAAAAAB8KQAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "gTlas"
					},
					"BQAAAH0pAAAAAAAAfikAAAAAAAAAAAAAfikAAAAAAAB/KQAAAAAAAAAAAAB/KQAAAAAAAIApAAAAAAAAAAAAAIApAAAAAAAAgSkAAAAAAAAAAAAAgSkAAAAAAACCKQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfSkAAAAAAAB9KQAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAIQpAAAAAAAAhSkAAAAAAAAAAAAAhSkAAAAAAACGKQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhCkAAAAAAACEKQAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " mpS"
					},
					"BAAAAIYpAAAAAAAAhykAAAAAAAAAAAAAhykAAAAAAACIKQAAAAAAAAAAAACIKQAAAAAAAIkpAAAAAAAAAAAAAIkpAAAAAAAAiikAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhikAAAAAAACGKQAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert_completion",
					{
						"completion": "mpSampler",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mpSampler"
					},
					"AgAAAIcpAAAAAAAAhykAAAAAAAADAAAAbXBThykAAAAAAACQKQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiikAAAAAAACKKQAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					6,
					"left_delete",
					null,
					"BgAAAI8pAAAAAAAAjykAAAAAAAABAAAAco4pAAAAAAAAjikAAAAAAAABAAAAZY0pAAAAAAAAjSkAAAAAAAABAAAAbIwpAAAAAAAAjCkAAAAAAAABAAAAcIspAAAAAAAAiykAAAAAAAABAAAAbYopAAAAAAAAiikAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAkCkAAAAAAACQKQAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "ce"
					},
					"AgAAAIopAAAAAAAAiykAAAAAAAAAAAAAiykAAAAAAACMKQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiikAAAAAAACKKQAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert_completion",
					{
						"completion": "mpScene",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mpScene"
					},
					"AgAAAIcpAAAAAAAAhykAAAAAAAAFAAAAbXBTY2WHKQAAAAAAAI4pAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjCkAAAAAAACMKQAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "->"
					},
					"AgAAAI4pAAAAAAAAjykAAAAAAAAAAAAAjykAAAAAAACQKQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjikAAAAAAACOKQAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "getTl"
					},
					"BQAAAJApAAAAAAAAkSkAAAAAAAAAAAAAkSkAAAAAAACSKQAAAAAAAAAAAACSKQAAAAAAAJMpAAAAAAAAAAAAAJMpAAAAAAAAlCkAAAAAAAAAAAAAlCkAAAAAAACVKQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkCkAAAAAAACQKQAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"left_delete",
					null,
					"AQAAAJQpAAAAAAAAlCkAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAAlSkAAAAAAACVKQAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "las"
					},
					"AwAAAJQpAAAAAAAAlSkAAAAAAAAAAAAAlSkAAAAAAACWKQAAAAAAAAAAAACWKQAAAAAAAJcpAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlCkAAAAAAACUKQAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJcpAAAAAAAAmSkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlykAAAAAAACXKQAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJkpAAAAAAAAmikAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmSkAAAAAAACZKQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/Scene/Scene.cpp.old.2",
			"settings":
			{
				"buffer_size": 122057,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "\n/*"
					},
					"AwAAAJ9VAQAAAAAAoFUBAAAAAAAAAAAAoFUBAAAAAAChVQEAAAAAAAAAAAChVQEAAAAAAKJVAQAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ9VAQAAAAAAn1UBAAAAAAAAAAAAAAAAAA"
				],
				[
					9,
					2,
					"right_delete",
					null,
					"AgAAAJdRAQAAAAAAl1EBAAAAAAABAAAAL5dRAQAAAAAAl1EBAAAAAAABAAAAKg",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJdRAQAAAAAAl1EBAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"left_delete",
					null,
					"AQAAAJZRAQAAAAAAllEBAAAAAAABAAAACg",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJdRAQAAAAAAl1EBAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					2,
					"left_delete",
					null,
					"AgAAAJ1VAQAAAAAAnVUBAAAAAAACAAAALyqcVQEAAAAAAJxVAQAAAAAAAQAAAAo",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ9VAQAAAAAAnVUBAAAAAAAAAAAAAADwvw"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAABtiAQAAAAAAHGIBAAAAAAAAAAAAHGIBAAAAAAAdYgEAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABtiAQAAAAAAG2IBAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "/*"
					},
					"AgAAABxiAQAAAAAAHWIBAAAAAAAAAAAAHWIBAAAAAAAeYgEAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABxiAQAAAAAAHGIBAAAAAAAAAAAAAAAAAA"
				],
				[
					26,
					4,
					"left_delete",
					null,
					"BAAAAB1iAQAAAAAAHWIBAAAAAAABAAAAKhxiAQAAAAAAHGIBAAAAAAABAAAALxtiAQAAAAAAG2IBAAAAAAABAAAAChpiAQAAAAAAGmIBAAAAAAABAAAACg",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB5iAQAAAAAAHmIBAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "/*"
					},
					"AgAAAJxVAQAAAAAAnVUBAAAAAAAAAAAAnVUBAAAAAACeVQEAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJxVAQAAAAAAnFUBAAAAAAAAAAAAAADwvw"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "run"
					},
					"BAAAAP5RAQAAAAAA/1EBAAAAAAAAAAAA/1EBAAAAAAD/UQEAAAAAAAkAAABleGNlcHRpb27/UQEAAAAAAABSAQAAAAAAAAAAAABSAQAAAAAAAVIBAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP5RAQAAAAAAB1IBAAAAAAAAAAAAAADwvw"
				],
				[
					77,
					1,
					"insert_completion",
					{
						"completion": "runtime_error",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "runtime_error"
					},
					"AgAAAP5RAQAAAAAA/lEBAAAAAAADAAAAcnVu/lEBAAAAAAALUgEAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAFSAQAAAAAAAVIBAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					2,
					"right_delete",
					null,
					"AgAAAKBVAQAAAAAAoFUBAAAAAAABAAAAL6BVAQAAAAAAoFUBAAAAAAABAAAAKg",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoFUBAAAAAACgVQEAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					3,
					"left_delete",
					null,
					"AwAAAFGEAQAAAAAAUYQBAAAAAAACAAAAKi9QhAEAAAAAAFCEAQAAAAAAAQAAAApPhAEAAAAAAE+EAQAAAAAAAQAAAAo",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAU4QBAAAAAABRhAEAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAE+EAQAAAAAAUIQBAAAAAAAAAAAAUIQBAAAAAABUhAEAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAT4QBAAAAAABPhAEAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					4,
					"left_delete",
					null,
					"BQAAAB+CAQAAAAAAH4IBAAAAAAAEAAAAICAgIEyEAQAAAAAATIQBAAAAAAAEAAAAICAgIBuCAQAAAAAAG4IBAAAAAAAEAAAAICAgIBeCAQAAAAAAF4IBAAAAAAAEAAAAICAgIBaCAQAAAAAAFoIBAAAAAAABAAAACg",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAI4IBAAAAAAAjggEAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABaCAQAAAAAAF4IBAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFoIBAAAAAAAWggEAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					4,
					"left_delete",
					null,
					"BAAAACSCAQAAAAAAJIIBAAAAAAAEAAAAICAgICCCAQAAAAAAIIIBAAAAAAAEAAAAICAgIByCAQAAAAAAHIIBAAAAAAAEAAAAICAgIBuCAQAAAAAAG4IBAAAAAAABAAAACg",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKIIBAAAAAAAoggEAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABuCAQAAAAAAHIIBAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAG4IBAAAAAAAbggEAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					3,
					"left_delete",
					null,
					"AwAAACl+AQAAAAAAKX4BAAAAAAAEAAAAICAgICV+AQAAAAAAJX4BAAAAAAAEAAAAICAgICR+AQAAAAAAJH4BAAAAAAABAAAACg",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALX4BAAAAAAAtfgEAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACR+AQAAAAAAJX4BAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJH4BAAAAAAAkfgEAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					3,
					"left_delete",
					null,
					"AwAAAIB7AQAAAAAAgHsBAAAAAAAEAAAAICAgIHx7AQAAAAAAfHsBAAAAAAAEAAAAICAgIHt7AQAAAAAAe3sBAAAAAAABAAAACg",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhHsBAAAAAACEewEAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHt7AQAAAAAAfHsBAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAe3sBAAAAAAB7ewEAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					2,
					"left_delete",
					null,
					"AgAAAN96AQAAAAAA33oBAAAAAAAEAAAAICAgIN56AQAAAAAA3noBAAAAAAABAAAACg",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA43oBAAAAAADjegEAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAN56AQAAAAAA33oBAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3noBAAAAAADeegEAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					4,
					"left_delete",
					null,
					"BAAAAKJ1AQAAAAAAonUBAAAAAAAEAAAAICAgIJ51AQAAAAAAnnUBAAAAAAAEAAAAICAgIJp1AQAAAAAAmnUBAAAAAAAEAAAAICAgIJl1AQAAAAAAmXUBAAAAAAABAAAACg",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApnUBAAAAAACmdQEAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJl1AQAAAAAAmnUBAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmXUBAAAAAACZdQEAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					4,
					"left_delete",
					null,
					"BAAAAI5zAQAAAAAAjnMBAAAAAAAEAAAAICAgIIpzAQAAAAAAinMBAAAAAAAEAAAAICAgIIZzAQAAAAAAhnMBAAAAAAAEAAAAICAgIIVzAQAAAAAAhXMBAAAAAAABAAAACg",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAknMBAAAAAACScwEAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIVzAQAAAAAAhnMBAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhXMBAAAAAACFcwEAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					4,
					"left_delete",
					null,
					"BAAAAH1zAQAAAAAAfXMBAAAAAAAEAAAAICAgIHlzAQAAAAAAeXMBAAAAAAAEAAAAICAgIHVzAQAAAAAAdXMBAAAAAAAEAAAAICAgIHRzAQAAAAAAdHMBAAAAAAABAAAACg",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgXMBAAAAAACBcwEAAAAAAAAAAAAAAFtA"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHRzAQAAAAAAdXMBAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdHMBAAAAAAB0cwEAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					4,
					"left_delete",
					null,
					"BAAAABxuAQAAAAAAHG4BAAAAAAAEAAAAICAgIBhuAQAAAAAAGG4BAAAAAAAEAAAAICAgIBRuAQAAAAAAFG4BAAAAAAAEAAAAICAgIBNuAQAAAAAAE24BAAAAAAABAAAACg",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIG4BAAAAAAAgbgEAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABNuAQAAAAAAFG4BAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAE24BAAAAAAATbgEAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					4,
					"left_delete",
					null,
					"BAAAAKFlAQAAAAAAoWUBAAAAAAAEAAAAICAgIJ1lAQAAAAAAnWUBAAAAAAAEAAAAICAgIJllAQAAAAAAmWUBAAAAAAAEAAAAICAgIJhlAQAAAAAAmGUBAAAAAAABAAAACg",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApWUBAAAAAAClZQEAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJhlAQAAAAAAmWUBAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmGUBAAAAAACYZQEAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					3,
					"left_delete",
					null,
					"AwAAANViAQAAAAAA1WIBAAAAAAAEAAAAICAgINFiAQAAAAAA0WIBAAAAAAAEAAAAICAgINBiAQAAAAAA0GIBAAAAAAABAAAACg",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2WIBAAAAAADZYgEAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANBiAQAAAAAA0WIBAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0GIBAAAAAADQYgEAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					3,
					"left_delete",
					null,
					"AwAAAE1dAQAAAAAATV0BAAAAAAAEAAAAICAgIEldAQAAAAAASV0BAAAAAAAEAAAAICAgIEhdAQAAAAAASF0BAAAAAAABAAAACg",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUV0BAAAAAABRXQEAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEhdAQAAAAAASV0BAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASF0BAAAAAABIXQEAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					3,
					"left_delete",
					null,
					"AwAAABFaAQAAAAAAEVoBAAAAAAAEAAAAICAgIA1aAQAAAAAADVoBAAAAAAAEAAAAICAgIAxaAQAAAAAADFoBAAAAAAABAAAACg",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFVoBAAAAAAAVWgEAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAxaAQAAAAAADVoBAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADFoBAAAAAAAMWgEAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					2,
					"left_delete",
					null,
					"AgAAAB9XAQAAAAAAH1cBAAAAAAAEAAAAICAgIB5XAQAAAAAAHlcBAAAAAAABAAAACg",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAI1cBAAAAAAAjVwEAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAB5XAQAAAAAAH1cBAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHlcBAAAAAAAeVwEAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "mpDevice,"
					},
					"CQAAAGpdAQAAAAAAa10BAAAAAAAAAAAAa10BAAAAAABsXQEAAAAAAAAAAABsXQEAAAAAAG1dAQAAAAAAAAAAAG1dAQAAAAAAbl0BAAAAAAAAAAAAbl0BAAAAAABvXQEAAAAAAAAAAABvXQEAAAAAAHBdAQAAAAAAAAAAAHBdAQAAAAAAcV0BAAAAAAAAAAAAcV0BAAAAAAByXQEAAAAAAAAAAAByXQEAAAAAAHNdAQAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAal0BAAAAAABqXQEAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHNdAQAAAAAAdF0BAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAc10BAAAAAABzXQEAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": "mpDevice,"
					},
					"CQAAAENeAQAAAAAARF4BAAAAAAAAAAAARF4BAAAAAABFXgEAAAAAAAAAAABFXgEAAAAAAEZeAQAAAAAAAAAAAEZeAQAAAAAAR14BAAAAAAAAAAAAR14BAAAAAABIXgEAAAAAAAAAAABIXgEAAAAAAEleAQAAAAAAAAAAAEleAQAAAAAASl4BAAAAAAAAAAAASl4BAAAAAABLXgEAAAAAAAAAAABLXgEAAAAAAExeAQAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQ14BAAAAAABDXgEAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAExeAQAAAAAATV4BAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATF4BAAAAAABMXgEAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "mpDeivec"
					},
					"CAAAAFtgAQAAAAAAXGABAAAAAAAAAAAAXGABAAAAAABdYAEAAAAAAAAAAABdYAEAAAAAAF5gAQAAAAAAAAAAAF5gAQAAAAAAX2ABAAAAAAAAAAAAX2ABAAAAAABgYAEAAAAAAAAAAABgYAEAAAAAAGFgAQAAAAAAAAAAAGFgAQAAAAAAYmABAAAAAAAAAAAAYmABAAAAAABjYAEAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAW2ABAAAAAABbYAEAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					4,
					"left_delete",
					null,
					"BAAAAGJgAQAAAAAAYmABAAAAAAABAAAAY2FgAQAAAAAAYWABAAAAAAABAAAAZWBgAQAAAAAAYGABAAAAAAABAAAAdl9gAQAAAAAAX2ABAAAAAAABAAAAaQ",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAY2ABAAAAAABjYAEAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": "vice,"
					},
					"BQAAAF9gAQAAAAAAYGABAAAAAAAAAAAAYGABAAAAAABhYAEAAAAAAAAAAABhYAEAAAAAAGJgAQAAAAAAAAAAAGJgAQAAAAAAY2ABAAAAAAAAAAAAY2ABAAAAAABkYAEAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAX2ABAAAAAABfYAEAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGRgAQAAAAAAZWABAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZGABAAAAAABkYAEAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"paste",
					null,
					"AQAAAAxhAQAAAAAAFmEBAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADGEBAAAAAAAMYQEAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"paste",
					null,
					"AQAAAJ5yAQAAAAAAqHIBAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnnIBAAAAAACecgEAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					4,
					"left_delete",
					null,
					"BAAAAHFyAQAAAAAAcXIBAAAAAAAEAAAAICAgIG1yAQAAAAAAbXIBAAAAAAAEAAAAICAgIGlyAQAAAAAAaXIBAAAAAAAEAAAAICAgIGhyAQAAAAAAaHIBAAAAAAABAAAACg",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdXIBAAAAAAB1cgEAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGhyAQAAAAAAaXIBAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaHIBAAAAAABocgEAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/LowLevelContextData.h",
			"settings":
			{
				"buffer_size": 4073,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Scene.h",
			"settings":
			{
				"buffer_size": 58676,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					42,
					1,
					"paste",
					null,
					"AgAAADzSAAAAAAAAZNIAAAAAAAAAAAAAZNIAAAAAAABk0gAAAAAAADUAAABEM0QxMl9SQVlUUkFDSU5HX0FDQ0VMRVJBVElPTl9TVFJVQ1RVUkVfUFJFQlVJTERfSU5GTw",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPNIAAAAAAABx0gAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					2,
					"right_delete",
					null,
					"AgAAADrSAAAAAAAAOtIAAAAAAAABAAAALzrSAAAAAAAAOtIAAAAAAAABAAAALw",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOtIAAAAAAAA60gAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAH7QAAAAAAAAf9AAAAAAAAAAAAAAf9AAAAAAAACD0AAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAftAAAAAAAAB+0AAAAAAAAAAAAAAAAEJA"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAH7QAAAAAAAAgtAAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAftAAAAAAAAB+0AAAAAAAAAAAAAAAAEJA"
				],
				[
					51,
					1,
					"paste",
					null,
					"AQAAAILQAAAAAAAAnNAAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgtAAAAAAAACC0AAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": " handels"
					},
					"CAAAAJzQAAAAAAAAndAAAAAAAAAAAAAAndAAAAAAAACe0AAAAAAAAAAAAACe0AAAAAAAAJ/QAAAAAAAAAAAAAJ/QAAAAAAAAoNAAAAAAAAAAAAAAoNAAAAAAAACh0AAAAAAAAAAAAACh0AAAAAAAAKLQAAAAAAAAAAAAAKLQAAAAAAAAo9AAAAAAAAAAAAAAo9AAAAAAAACk0AAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnNAAAAAAAACc0AAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					2,
					"left_delete",
					null,
					"AgAAAKPQAAAAAAAAo9AAAAAAAAABAAAAc6LQAAAAAAAAotAAAAAAAAABAAAAbA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApNAAAAAAAACk0AAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAKLQAAAAAAAAo9AAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAotAAAAAAAACi0AAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					2,
					"left_delete",
					null,
					"AgAAAKLQAAAAAAAAotAAAAAAAAABAAAAbKHQAAAAAAAAodAAAAAAAAABAAAAZQ",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAo9AAAAAAAACj0AAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "ke"
					},
					"AgAAAKHQAAAAAAAAotAAAAAAAAAAAAAAotAAAAAAAACj0AAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAodAAAAAAAACh0AAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					2,
					"left_delete",
					null,
					"AgAAAKLQAAAAAAAAotAAAAAAAAABAAAAZaHQAAAAAAAAodAAAAAAAAABAAAAaw",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAo9AAAAAAAACj0AAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "le;"
					},
					"AwAAAKHQAAAAAAAAotAAAAAAAAAAAAAAotAAAAAAAACj0AAAAAAAAAAAAACj0AAAAAAAAKTQAAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAodAAAAAAAACh0AAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAPnTAAAAAAAA+tMAAAAAAAAAAAAA+tMAAAAAAAD70wAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+dMAAAAAAAD50wAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"reindent",
					null,
					"AQAAAPrTAAAAAAAAAtQAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+tMAAAAAAAD60wAAAAAAAAAAAAAAAAAA"
				],
				[
					77,
					1,
					"paste",
					null,
					"AQAAAALUAAAAAAAAJdQAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAtQAAAAAAAAC1AAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": "\t\t\t\t\t"
					},
					"BQAAAB7UAAAAAAAAItQAAAAAAAAAAAAAItQAAAAAAAAm1AAAAAAAAAAAAAAm1AAAAAAAACrUAAAAAAAAAAAAACrUAAAAAAAALtQAAAAAAAAAAAAALtQAAAAAAAAy1AAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHtQAAAAAAAAe1AAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"right_delete",
					null,
					"AQAAAALUAAAAAAAAAtQAAAAAAAABAAAAIA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAtQAAAAAAAAC1AAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAADnUAAAAAAAAOtQAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOdQAAAAAAAA51AAAAAAAAAAAAAAAAFJA"
				],
				[
					18,
					1,
					"reindent",
					null,
					"AQAAADnUAAAAAAAAQdQAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOdQAAAAAAAA51AAAAAAAAAAAAAAAAAAA"
				],
				[
					19,
					3,
					"left_delete",
					null,
					"AwAAAD3UAAAAAAAAPdQAAAAAAAAEAAAAICAgIDnUAAAAAAAAOdQAAAAAAAAEAAAAICAgIDjUAAAAAAAAONQAAAAAAAABAAAACg",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQdQAAAAAAABB1AAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAPwJAAAAAAAA/QkAAAAAAAAAAAAA/QkAAAAAAAD+CQAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/AkAAAAAAAD8CQAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"paste",
					null,
					"AQAAAP4JAAAAAAAAIQoAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/gkAAAAAAAD+CQAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAFLPAAAAAAAAU88AAAAAAAAAAAAAU88AAAAAAABbzwAAAAAAAAAAAABbzwAAAAAAAFzPAAAAAAAAAAAAAFzPAAAAAAAAZM8AAAAAAAAAAAAAU88AAAAAAABTzwAAAAAAAAgAAAAgICAgICAgIA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUs8AAAAAAABSzwAAAAAAAAAAAAAAAFJA"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "TopL"
					},
					"BAAAAFLPAAAAAAAAU88AAAAAAAAAAAAAU88AAAAAAABUzwAAAAAAAAAAAABUzwAAAAAAAFXPAAAAAAAAAAAAAFXPAAAAAAAAVs8AAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUs8AAAAAAABSzwAAAAAAAAAAAAAAAFJA"
				],
				[
					30,
					1,
					"insert_completion",
					{
						"completion": "TopLevelAccelerationStructure",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "TopLevelAccelerationStructure"
					},
					"AgAAAFLPAAAAAAAAUs8AAAAAAAAEAAAAVG9wTFLPAAAAAAAAb88AAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVs8AAAAAAABWzwAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "::Sh"
					},
					"BAAAAG/PAAAAAAAAcM8AAAAAAAAAAAAAcM8AAAAAAABxzwAAAAAAAAAAAABxzwAAAAAAAHLPAAAAAAAAAAAAAHLPAAAAAAAAc88AAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAb88AAAAAAABvzwAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert_completion",
					{
						"completion": "SharedPtr",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "SharedPtr"
					},
					"AgAAAHHPAAAAAAAAcc8AAAAAAAACAAAAU2hxzwAAAAAAAHrPAAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAc88AAAAAAABzzwAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " p"
					},
					"AgAAAHrPAAAAAAAAe88AAAAAAAAAAAAAe88AAAAAAAB8zwAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAes8AAAAAAAB6zwAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "TLAS"
					},
					"BAAAAHzPAAAAAAAAfc8AAAAAAAAAAAAAfc8AAAAAAAB+zwAAAAAAAAAAAAB+zwAAAAAAAH/PAAAAAAAAAAAAAH/PAAAAAAAAgM8AAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfM8AAAAAAAB8zwAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIDPAAAAAAAAgc8AAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgM8AAAAAAACAzwAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAG/cAAAAAAAAcNwAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAb9wAAAAAAABv3AAAAAAAAAAAAAAAwGhA"
				],
				[
					46,
					1,
					"reindent",
					null,
					"AQAAAHDcAAAAAAAAeNwAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcNwAAAAAAABw3AAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"paste",
					null,
					"AQAAAHjcAAAAAAAAp9wAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeNwAAAAAAAB43AAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAKHcAAAAAAAApNwAAAAAAAAAAAAApNwAAAAAAACo3AAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAodwAAAAAAACh3AAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"right_delete",
					null,
					"AQAAAKncAAAAAAAAqdwAAAAAAAABAAAAVA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqdwAAAAAAACp3AAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "B"
					},
					"AQAAAKncAAAAAAAAqtwAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqdwAAAAAAACp3AAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "Bottom"
					},
					"BgAAAHjcAAAAAAAAedwAAAAAAAAAAAAAedwAAAAAAAB63AAAAAAAAAAAAAB63AAAAAAAAHvcAAAAAAAAAAAAAHvcAAAAAAAAfNwAAAAAAAAAAAAAfNwAAAAAAAB93AAAAAAAAAAAAAB93AAAAAAAAH7cAAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeNwAAAAAAAB43AAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					3,
					"right_delete",
					null,
					"AwAAAH7cAAAAAAAAftwAAAAAAAABAAAAVH7cAAAAAAAAftwAAAAAAAABAAAAb37cAAAAAAAAftwAAAAAAAABAAAAcA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAftwAAAAAAAB+3AAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					3,
					"right_delete",
					null,
					"AwAAAKjcAAAAAAAAqNwAAAAAAAABAAAAIKjcAAAAAAAAqNwAAAAAAAABAAAAIKjcAAAAAAAAqNwAAAAAAAABAAAAIA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqNwAAAAAAACo3AAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAI/UAAAAAAAAkNQAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAj9QAAAAAAACP1AAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJfUAAAAAAAAmNQAAAAAAAAAAAAAmNQAAAAAAACg1AAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAl9QAAAAAAACX1AAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"paste",
					null,
					"AQAAAKDUAAAAAAAA1tQAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoNQAAAAAAACg1AAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJfUAAAAAAAAmNQAAAAAAAAAAAAAmNQAAAAAAACg1AAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJfUAAAAAAAAl9QAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"paste",
					null,
					"AQAAAKDUAAAAAAAA19QAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKDUAAAAAAAAoNQAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "blas_"
					},
					"BQAAANDUAAAAAAAA0dQAAAAAAAAAAAAA0dQAAAAAAADS1AAAAAAAAAAAAADS1AAAAAAAANPUAAAAAAAAAAAAANPUAAAAAAAA1NQAAAAAAAAAAAAA1NQAAAAAAADV1AAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANDUAAAAAAAA0NQAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					2,
					"left_delete",
					null,
					"AgAAANXUAAAAAAAA1dQAAAAAAAABAAAAaNTUAAAAAAAA1NQAAAAAAAABAAAAXw",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANbUAAAAAAAA1tQAAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "H"
					},
					"AQAAANTUAAAAAAAA1dQAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANTUAAAAAAAA1NQAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANvUAAAAAAAA3NQAAAAAAAAAAAAA3NQAAAAAAADk1AAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANvUAAAAAAAA29QAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AwAAAKDUAAAAAAAAodQAAAAAAAAAAAAA3dQAAAAAAADd1AAAAAAAAAgAAAAgICAgICAgIKHUAAAAAAAAotQAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKDUAAAAAAAAoNQAAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGEYAAAAAAAAYhgAAAAAAAAAAAAAYhgAAAAAAABmGAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGEYAAAAAAAAYRgAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"paste",
					null,
					"AQAAAGYYAAAAAAAAmxgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGYYAAAAAAAAZhgAAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"paste",
					null,
					"AgAAAJMYAAAAAAAAmBgAAAAAAAAAAAAAmBgAAAAAAACYGAAAAAAAAAYAAABCdWZmZXI",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMYAAAAAAAAmRgAAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "\nst"
					},
					"BAAAAI/UAAAAAAAAkNQAAAAAAAAAAAAAkNQAAAAAAACY1AAAAAAAAAAAAACY1AAAAAAAAJnUAAAAAAAAAAAAAJnUAAAAAAAAmtQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI/UAAAAAAAAj9QAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "d::"
					},
					"AwAAAJrUAAAAAAAAm9QAAAAAAAAAAAAAm9QAAAAAAACc1AAAAAAAAAAAAACc1AAAAAAAAJ3UAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJrUAAAAAAAAmtQAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "vec"
					},
					"AwAAAJ3UAAAAAAAAntQAAAAAAAAAAAAAntQAAAAAAACf1AAAAAAAAAAAAACf1AAAAAAAAKDUAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ3UAAAAAAAAndQAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"insert_completion",
					{
						"completion": "vector",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "vector"
					},
					"AgAAAJ3UAAAAAAAAndQAAAAAAAADAAAAdmVjndQAAAAAAACj1AAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKDUAAAAAAAAoNQAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "<uint"
					},
					"BQAAAKPUAAAAAAAApNQAAAAAAAAAAAAApNQAAAAAAACl1AAAAAAAAAAAAACl1AAAAAAAAKbUAAAAAAAAAAAAAKbUAAAAAAAAp9QAAAAAAAAAAAAAp9QAAAAAAACo1AAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKPUAAAAAAAAo9QAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"insert_completion",
					{
						"completion": "uint32_t",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "uint32_t"
					},
					"AgAAAKTUAAAAAAAApNQAAAAAAAAEAAAAdWludKTUAAAAAAAArNQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKjUAAAAAAAAqNQAAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": ">\t\t\t\t"
					},
					"BQAAAKzUAAAAAAAArdQAAAAAAAAAAAAArdQAAAAAAACw1AAAAAAAAAAAAACw1AAAAAAAALTUAAAAAAAAAAAAALTUAAAAAAAAuNQAAAAAAAAAAAAAuNQAAAAAAAC81AAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKzUAAAAAAAArNQAAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "\t\t\t"
					},
					"AwAAALzUAAAAAAAAwNQAAAAAAAAAAAAAwNQAAAAAAADE1AAAAAAAAAAAAADE1AAAAAAAAMjUAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALzUAAAAAAAAvNQAAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "maxP"
					},
					"BAAAAMjUAAAAAAAAydQAAAAAAAAAAAAAydQAAAAAAADK1AAAAAAAAAAAAADK1AAAAAAAAMvUAAAAAAAAAAAAAMvUAAAAAAAAzNQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMjUAAAAAAAAyNQAAAAAAAAAAAAAAADwvw"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "rim"
					},
					"AwAAAMzUAAAAAAAAzdQAAAAAAAAAAAAAzdQAAAAAAADO1AAAAAAAAAAAAADO1AAAAAAAAM/UAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMzUAAAAAAAAzNQAAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					1,
					"insert_completion",
					{
						"completion": "maxPrimCounts",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "maxPrimCounts"
					},
					"AgAAAMjUAAAAAAAAyNQAAAAAAAAHAAAAbWF4UHJpbcjUAAAAAAAA1dQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM/UAAAAAAAAz9QAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANXUAAAAAAAA1tQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANXUAAAAAAAA1dQAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "\nstd::"
					},
					"BwAAAI/UAAAAAAAAkNQAAAAAAAAAAAAAkNQAAAAAAACY1AAAAAAAAAAAAACY1AAAAAAAAJnUAAAAAAAAAAAAAJnUAAAAAAAAmtQAAAAAAAAAAAAAmtQAAAAAAACb1AAAAAAAAAAAAACb1AAAAAAAAJzUAAAAAAAAAAAAAJzUAAAAAAAAndQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI/UAAAAAAAAj9QAAAAAAAAAAAAAAADwvw"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AQAAAJ3UAAAAAAAAntQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ3UAAAAAAAAndQAAAAAAAAAAAAAAADwvw"
				],
				[
					45,
					1,
					"insert_completion",
					{
						"completion": "vector",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "vector"
					},
					"AgAAAJ3UAAAAAAAAndQAAAAAAAABAAAAdp3UAAAAAAAAo9QAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ7UAAAAAAAAntQAAAAAAAAAAAAAAADwvw"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "<"
					},
					"AQAAAKPUAAAAAAAApNQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKPUAAAAAAAAo9QAAAAAAAAAAAAAAADwvw"
				],
				[
					47,
					1,
					"paste",
					null,
					"AQAAAKTUAAAAAAAAzNQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKTUAAAAAAAApNQAAAAAAAAAAAAAAADwvw"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAAMzUAAAAAAAAzdQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMzUAAAAAAAAzNQAAAAAAAAAAAAAAADwvw"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": " ranges"
					},
					"BwAAAM3UAAAAAAAAztQAAAAAAAAAAAAAztQAAAAAAADP1AAAAAAAAAAAAADP1AAAAAAAANDUAAAAAAAAAAAAANDUAAAAAAAA0dQAAAAAAAAAAAAA0dQAAAAAAADS1AAAAAAAAAAAAADS1AAAAAAAANPUAAAAAAAAAAAAANPUAAAAAAAA1NQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM3UAAAAAAAAzdQAAAAAAAAAAAAAAADwvw"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANTUAAAAAAAA1dQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANTUAAAAAAAA1NQAAAAAAAAAAAAAAADwvw"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANXUAAAAAAAA1tQAAAAAAAAAAAAA1tQAAAAAAADe1AAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANXUAAAAAAAA1dQAAAAAAAAAAAAAAADwvw"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAFXUAAAAAAAAVtQAAAAAAAAAAAAAVtQAAAAAAABe1AAAAAAAAAAAAADf1AAAAAAAAN/UAAAAAAAACAAAACAgICAgICAg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFXUAAAAAAAAVdQAAAAAAAAAAAAAAABSQA"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAI7UAAAAAAAAktQAAAAAAAAAAAAAktQAAAAAAACW1AAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI7UAAAAAAAAjtQAAAAAAAAAAAAAAADwvw"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAN/UAAAAAAAA4dQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN/UAAAAAAAA39QAAAAAAAAAAAAAAADwvw"
				],
				[
					66,
					1,
					"left_delete",
					null,
					"AQAAAPLUAAAAAAAA8tQAAAAAAABIAAAAc3RkOjp2ZWN0b3I8dWludDMyX3Q+ICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4UHJpbUNvdW50czsKCiAgICAgICAg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPLUAAAAAAAAOtUAAAAAAAAAAAAAAABSQA"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAHnVAAAAAAAAetUAAAAAAAAAAAAAetUAAAAAAAB71QAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAedUAAAAAAAB51QAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAPLUAAAAAAAA89QAAAAAAAAAAAAA89QAAAAAAAD01AAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8tQAAAAAAADy1AAAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAELPAAAAAAAAQ88AAAAAAAAAAAAAQ88AAAAAAABEzwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABCzwAAAAAAAELPAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"reindent",
					null,
					"AQAAAEPPAAAAAAAAR88AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABDzwAAAAAAAEPPAAAAAAAAAAAAAAAAAAA"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AwAAACAKAAAAAAAAIQoAAAAAAAAAAAAARM8AAAAAAABEzwAAAAAAAAQAAAAgICAgIQoAAAAAAAAiCgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgCgAAAAAAACAKAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"paste",
					null,
					"AQAAACIKAAAAAAAARQoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiCgAAAAAAACIKAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"left_delete",
					null,
					"AQAAAEQKAAAAAAAARAoAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABFCgAAAAAAAEUKAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEQKAAAAAAAARQoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABECgAAAAAAAEQKAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"left_delete",
					null,
					"AQAAAEQKAAAAAAAARAoAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABFCgAAAAAAAEUKAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEQKAAAAAAAARQoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABECgAAAAAAAEQKAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"reindent",
					null,
					"AQAAAGjPAAAAAAAAbM8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABozwAAAAAAAGjPAAAAAAAAAAAAAAAAAAA"
				],
				[
					22,
					1,
					"paste",
					null,
					"AQAAAGzPAAAAAAAAqM8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABszwAAAAAAAGzPAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					2,
					"right_delete",
					null,
					"AgAAAJ3PAAAAAAAAnc8AAAAAAAABAAAAX53PAAAAAAAAnc8AAAAAAAABAAAAcg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdzwAAAAAAAJ3PAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "R"
					},
					"AQAAAJ3PAAAAAAAAns8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdzwAAAAAAAJ3PAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGfPAAAAAAAAaM8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABnzwAAAAAAAGfPAAAAAAAAAAAAAAC4gUA"
				],
				[
					31,
					1,
					"reindent",
					null,
					"AQAAAGjPAAAAAAAAbM8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABozwAAAAAAAGjPAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"paste",
					null,
					"AQAAAGzPAAAAAAAAANEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABszwAAAAAAAGzPAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAADRAAAAAAAAAdEAAAAAAAAAAAAAAdEAAAAAAAAD0QAAAAAAAAAAAAAD0QAAAAAAAATRAAAAAAAAAAAAAATRAAAAAAAABtEAAAAAAAAAAAAAAdEAAAAAAAAB0QAAAAAAAAIAAAAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAA0QAAAAAAAADRAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAATRAAAAAAAABtEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAE0QAAAAAAAATRAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"paste",
					null,
					"AQAAAAbRAAAAAAAApdEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAG0QAAAAAAAAbRAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAGbRAAAAAAAAaNEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABm0QAAAAAAAGbRAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "A"
					},
					"AQAAACLRAAAAAAAAI9EAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAi0QAAAAAAACLRAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					2,
					"right_delete",
					null,
					"AgAAACPRAAAAAAAAI9EAAAAAAAABAAAAXyPRAAAAAAAAI9EAAAAAAAABAAAAYQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAj0QAAAAAAACPRAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "D"
					},
					"AQAAAIPRAAAAAAAAhNEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACD0QAAAAAAAIPRAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					2,
					"right_delete",
					null,
					"AgAAAITRAAAAAAAAhNEAAAAAAAABAAAAX4TRAAAAAAAAhNEAAAAAAAABAAAAZA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACE0QAAAAAAAITRAAAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAILRAAAAAAAAg9EAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACC0QAAAAAAAILRAAAAAAAAAAAAAAAA8L8"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAACHRAAAAAAAAItEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAh0QAAAAAAACHRAAAAAAAAAAAAAAAA8L8"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAITRAAAAAAAAiNEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACE0QAAAAAAAITRAAAAAAAAAAAAAAAA8L8"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAACLRAAAAAAAAJtEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAi0QAAAAAAACLRAAAAAAAAAAAAAAAA8L8"
				],
				[
					67,
					7,
					"right_delete",
					null,
					"BwAAANTRAAAAAAAA1NEAAAAAAAABAAAAINTRAAAAAAAA1NEAAAAAAAABAAAAINTRAAAAAAAA1NEAAAAAAAABAAAAINTRAAAAAAAA1NEAAAAAAAABAAAAINTRAAAAAAAA1NEAAAAAAAABAAAAINTRAAAAAAAA1NEAAAAAAAABAAAAINTRAAAAAAAA1NEAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADU0QAAAAAAANTRAAAAAAAAAAAAAABAdEA"
				],
				[
					68,
					8,
					"right_delete",
					null,
					"CAAAANTRAAAAAAAA1NEAAAAAAAABAAAAINTRAAAAAAAA1NEAAAAAAAABAAAAINTRAAAAAAAA1NEAAAAAAAABAAAAINTRAAAAAAAA1NEAAAAAAAABAAAAINTRAAAAAAAA1NEAAAAAAAABAAAAINTRAAAAAAAA1NEAAAAAAAABAAAAINTRAAAAAAAA1NEAAAAAAAABAAAAINTRAAAAAAAA1NEAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADU0QAAAAAAANTRAAAAAAAAAAAAAAAA8L8"
				],
				[
					69,
					2,
					"right_delete",
					null,
					"AgAAANTRAAAAAAAA1NEAAAAAAAABAAAAINTRAAAAAAAA1NEAAAAAAAABAAAAbQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADU0QAAAAAAANTRAAAAAAAAAAAAAAAA8L8"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAANTRAAAAAAAA1dEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADU0QAAAAAAANTRAAAAAAAAAAAAAAAA8L8"
				],
				[
					75,
					3,
					"left_delete",
					null,
					"AwAAAGjPAAAAAAAAaM8AAAAAAACYAQAAICAgIExhdmFSZXNvdXJjZUFsbG9jYXRvclZtYShWa0luc3RhbmNlIGluc3RhbmNlLCBWa0RldmljZSBkZXZpY2UsIFZrUGh5c2ljYWxEZXZpY2UgcGh5c2ljYWxEZXZpY2UsIFZrRGV2aWNlU2l6ZSBzdGFnaW5nQmxvY2tTaXplID0gTlZWS19ERUZBVUxUX1NUQUdJTkdfQkxPQ0tTSVpFLCBWbWFBbGxvY2F0b3Igdm1hID0gbnVsbHB0cik7CiAgdmlydHVhbCB+TGF2YVJlc291cmNlQWxsb2NhdG9yVm1hKCk7CgogIHZvaWQgaW5pdChWa0luc3RhbmNlIGluc3RhbmNlLCBWa0RldmljZSBkZXZpY2UsIFZrUGh5c2ljYWxEZXZpY2UgcGh5c2ljYWxEZXZpY2UsIFZrRGV2aWNlU2l6ZSBzdGFnaW5nQmxvY2tTaXplID0gTlZWS19ERUZBVUxUX1NUQUdJTkdfQkxPQ0tTSVpFLCBWbWFBbGxvY2F0b3Igdm1hID0gbnVsbHB0cik7Z88AAAAAAABnzwAAAAAAAAEAAAAKZs8AAAAAAABmzwAAAAAAAAEAAAAK",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAA0QAAAAAAAGjPAAAAAAAAAAAAAAAA8L8"
				],
				[
					79,
					1,
					"right_delete",
					null,
					"AQAAAGzPAAAAAAAAbM8AAAAAAABmAAAAbnZ2azo6UmVzb3VyY2VBbGxvY2F0b3JEbWEgICAgICBtQWxsb2M7ICAvLyBBbGxvY2F0b3IgZm9yIGJ1ZmZlciwgaW1hZ2VzLCBhY2NlbGVyYXRpb24gc3RydWN0dXJlcwogICAg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABszwAAAAAAANLPAAAAAAAAAAAAAAAAQkA"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "\n\n//*"
					},
					"CAAAAJqiAAAAAAAAm6IAAAAAAAAAAAAAm6IAAAAAAACfogAAAAAAAAAAAACfogAAAAAAAKCiAAAAAAAAAAAAAKCiAAAAAAAApKIAAAAAAAAAAAAAm6IAAAAAAACbogAAAAAAAAQAAAAgICAgoKIAAAAAAAChogAAAAAAAAAAAAChogAAAAAAAKKiAAAAAAAAAAAAAKKiAAAAAAAAo6IAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaogAAAAAAAJqiAAAAAAAAAAAAAAAA8L8"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAAKOiAAAAAAAApKIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjogAAAAAAAKOiAAAAAAAAAAAAAAAA8L8"
				],
				[
					84,
					3,
					"left_delete",
					null,
					"AwAAAKOiAAAAAAAAo6IAAAAAAAABAAAAKqKiAAAAAAAAoqIAAAAAAAABAAAAKqGiAAAAAAAAoaIAAAAAAAABAAAALw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACkogAAAAAAAKSiAAAAAAAAAAAAAAAA8L8"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": "**"
					},
					"AgAAAKGiAAAAAAAAoqIAAAAAAAAAAAAAoqIAAAAAAACjogAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChogAAAAAAAKGiAAAAAAAAAAAAAAAA8L8"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": " Initia"
					},
					"BwAAAKOiAAAAAAAApKIAAAAAAAAAAAAApKIAAAAAAAClogAAAAAAAAAAAAClogAAAAAAAKaiAAAAAAAAAAAAAKaiAAAAAAAAp6IAAAAAAAAAAAAAp6IAAAAAAACoogAAAAAAAAAAAACoogAAAAAAAKmiAAAAAAAAAAAAAKmiAAAAAAAAqqIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjogAAAAAAAKOiAAAAAAAAAAAAAAAA8L8"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": "lize"
					},
					"BAAAAKqiAAAAAAAAq6IAAAAAAAAAAAAAq6IAAAAAAACsogAAAAAAAAAAAACsogAAAAAAAK2iAAAAAAAAAAAAAK2iAAAAAAAArqIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACqogAAAAAAAKqiAAAAAAAAAAAAAAAA8L8"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": " raytra"
					},
					"BwAAAK6iAAAAAAAAr6IAAAAAAAAAAAAAr6IAAAAAAACwogAAAAAAAAAAAACwogAAAAAAALGiAAAAAAAAAAAAALGiAAAAAAAAsqIAAAAAAAAAAAAAsqIAAAAAAACzogAAAAAAAAAAAACzogAAAAAAALSiAAAAAAAAAAAAALSiAAAAAAAAtaIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACuogAAAAAAAK6iAAAAAAAAAAAAAAAA8L8"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "cing\n * "
					},
					"BwAAALWiAAAAAAAAtqIAAAAAAAAAAAAAtqIAAAAAAAC3ogAAAAAAAAAAAAC3ogAAAAAAALiiAAAAAAAAAAAAALiiAAAAAAAAuaIAAAAAAAAAAAAAuaIAAAAAAAC6ogAAAAAAAAAAAAC6ogAAAAAAAL6iAAAAAAAAAAAAAL6iAAAAAAAAwaIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1ogAAAAAAALWiAAAAAAAAAAAAAAAA8L8"
				],
				[
					90,
					3,
					"left_delete",
					null,
					"AwAAAMCiAAAAAAAAwKIAAAAAAAABAAAAIL+iAAAAAAAAv6IAAAAAAAABAAAAKr6iAAAAAAAAvqIAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBogAAAAAAAMGiAAAAAAAAAAAAAAAA8L8"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "*/"
					},
					"AgAAAL6iAAAAAAAAv6IAAAAAAAAAAAAAv6IAAAAAAADAogAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+ogAAAAAAAL6iAAAAAAAAAAAAAAAA8L8"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": "\nvoid"
					},
					"BgAAAMCiAAAAAAAAwaIAAAAAAAAAAAAAwaIAAAAAAADFogAAAAAAAAAAAADFogAAAAAAAMaiAAAAAAAAAAAAAMaiAAAAAAAAx6IAAAAAAAAAAAAAx6IAAAAAAADIogAAAAAAAAAAAADIogAAAAAAAMmiAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADAogAAAAAAAMCiAAAAAAAAAAAAAAAA8L8"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": " init"
					},
					"BQAAAMmiAAAAAAAAyqIAAAAAAAAAAAAAyqIAAAAAAADLogAAAAAAAAAAAADLogAAAAAAAMyiAAAAAAAAAAAAAMyiAAAAAAAAzaIAAAAAAAAAAAAAzaIAAAAAAADOogAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADJogAAAAAAAMmiAAAAAAAAAAAAAAAA8L8"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "Ray"
					},
					"AwAAAM6iAAAAAAAAz6IAAAAAAAAAAAAAz6IAAAAAAADQogAAAAAAAAAAAADQogAAAAAAANGiAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADOogAAAAAAAM6iAAAAAAAAAAAAAAAA8L8"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": "Tracing"
					},
					"BwAAANGiAAAAAAAA0qIAAAAAAAAAAAAA0qIAAAAAAADTogAAAAAAAAAAAADTogAAAAAAANSiAAAAAAAAAAAAANSiAAAAAAAA1aIAAAAAAAAAAAAA1aIAAAAAAADWogAAAAAAAAAAAADWogAAAAAAANeiAAAAAAAAAAAAANeiAAAAAAAA2KIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADRogAAAAAAANGiAAAAAAAAAAAAAAAA8L8"
				],
				[
					96,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANiiAAAAAAAA2qIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADYogAAAAAAANiiAAAAAAAAAAAAAAAA8L8"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANqiAAAAAAAA26IAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADaogAAAAAAANqiAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGfUAAAAAAAAaNQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZ9QAAAAAAABn1AAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"reindent",
					null,
					"AQAAAGfUAAAAAAAAa9QAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZ9QAAAAAAABn1AAAAAAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "bb"
					},
					"AgAAAGvUAAAAAAAAbNQAAAAAAAAAAAAAbNQAAAAAAABt1AAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAa9QAAAAAAABr1AAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"left_delete",
					null,
					"AQAAAGzUAAAAAAAAbNQAAAAAAAABAAAAYg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbdQAAAAAAABt1AAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "ool"
					},
					"AwAAAGzUAAAAAAAAbdQAAAAAAAAAAAAAbdQAAAAAAABu1AAAAAAAAAAAAABu1AAAAAAAAG/UAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbNQAAAAAAABs1AAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " mRa"
					},
					"BAAAAG/UAAAAAAAAcNQAAAAAAAAAAAAAcNQAAAAAAABx1AAAAAAAAAAAAABx1AAAAAAAAHLUAAAAAAAAAAAAAHLUAAAAAAAAc9QAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAb9QAAAAAAABv1AAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert_completion",
					{
						"completion": "mRayTrace",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mRayTrace"
					},
					"AgAAAHDUAAAAAAAAcNQAAAAAAAADAAAAbVJhcNQAAAAAAAB51AAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAc9QAAAAAAABz1AAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "Initiali"
					},
					"CAAAAHnUAAAAAAAAetQAAAAAAAAAAAAAetQAAAAAAAB71AAAAAAAAAAAAAB71AAAAAAAAHzUAAAAAAAAAAAAAHzUAAAAAAAAfdQAAAAAAAAAAAAAfdQAAAAAAAB+1AAAAAAAAAAAAAB+1AAAAAAAAH/UAAAAAAAAAAAAAH/UAAAAAAAAgNQAAAAAAAAAAAAAgNQAAAAAAACB1AAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAedQAAAAAAAB51AAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "zes"
					},
					"AwAAAIHUAAAAAAAAgtQAAAAAAAAAAAAAgtQAAAAAAACD1AAAAAAAAAAAAACD1AAAAAAAAITUAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgdQAAAAAAACB1AAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"left_delete",
					null,
					"AQAAAIPUAAAAAAAAg9QAAAAAAAABAAAAcw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhNQAAAAAAACE1AAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "d;"
					},
					"AgAAAIPUAAAAAAAAhNQAAAAAAAAAAAAAhNQAAAAAAACF1AAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAg9QAAAAAAACD1AAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAITUAAAAAAAAhdQAAAAAAAAAAAAAhdQAAAAAAACG1AAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhNQAAAAAAACE1AAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " f"
					},
					"AgAAAIbUAAAAAAAAh9QAAAAAAAAAAAAAh9QAAAAAAACI1AAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhtQAAAAAAACG1AAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "false"
					},
					"AgAAAIfUAAAAAAAAh9QAAAAAAAABAAAAZofUAAAAAAAAjNQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiNQAAAAAAACI1AAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJqoAAAAAAAAm6gAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmqgAAAAAAACaqAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "    /**"
					},
					"BwAAAJuoAAAAAAAAnKgAAAAAAAAAAAAAnKgAAAAAAACdqAAAAAAAAAAAAACdqAAAAAAAAJ6oAAAAAAAAAAAAAJ6oAAAAAAAAn6gAAAAAAAAAAAAAn6gAAAAAAACgqAAAAAAAAAAAAACgqAAAAAAAAKGoAAAAAAAAAAAAAKGoAAAAAAAAoqgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAm6gAAAAAAACbqAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " BUi"
					},
					"BAAAAKKoAAAAAAAAo6gAAAAAAAAAAAAAo6gAAAAAAACkqAAAAAAAAAAAAACkqAAAAAAAAKWoAAAAAAAAAAAAAKWoAAAAAAAApqgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoqgAAAAAAACiqAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "ld"
					},
					"AgAAAKaoAAAAAAAAp6gAAAAAAAAAAAAAp6gAAAAAAACoqAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApqgAAAAAAACmqAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					4,
					"left_delete",
					null,
					"BAAAAKeoAAAAAAAAp6gAAAAAAAABAAAAZKaoAAAAAAAApqgAAAAAAAABAAAAbKWoAAAAAAAApagAAAAAAAABAAAAaaSoAAAAAAAApKgAAAAAAAABAAAAVQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqKgAAAAAAACoqAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "uild"
					},
					"BAAAAKSoAAAAAAAApagAAAAAAAAAAAAApagAAAAAAACmqAAAAAAAAAAAAACmqAAAAAAAAKeoAAAAAAAAAAAAAKeoAAAAAAAAqKgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApKgAAAAAAACkqAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKioAAAAAAAAqagAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqKgAAAAAAACoqAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "\n * /"
					},
					"BAAAAKmoAAAAAAAAqqgAAAAAAAAAAAAAqqgAAAAAAACuqAAAAAAAAAAAAACuqAAAAAAAALGoAAAAAAAAAAAAALGoAAAAAAAAsqgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqagAAAAAAACpqAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"right_delete",
					null,
					"AQAAALCoAAAAAAAAsKgAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsKgAAAAAAACwqAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"right_delete",
					null,
					"AQAAAK6oAAAAAAAArqgAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArqgAAAAAAACuqAAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAALGoAAAAAAAAsqgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsagAAAAAAACxqAAAAAAAAAAAAAAAAEJA"
				],
				[
					40,
					1,
					"reindent",
					null,
					"AQAAALGoAAAAAAAAtagAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsagAAAAAAACxqAAAAAAAAAAAAAAAAAAA"
				],
				[
					41,
					1,
					"paste",
					null,
					"AQAAALWoAAAAAAAAyqgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtagAAAAAAAC1qAAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMqoAAAAAAAAzKgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyqgAAAAAAADKqAAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": " coi"
					},
					"BAAAAMuoAAAAAAAAzKgAAAAAAAAAAAAAzKgAAAAAAADNqAAAAAAAAAAAAADNqAAAAAAAAM6oAAAAAAAAAAAAAM6oAAAAAAAAz6gAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAy6gAAAAAAADLqAAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					4,
					"left_delete",
					null,
					"BAAAAM6oAAAAAAAAzqgAAAAAAAABAAAAac2oAAAAAAAAzagAAAAAAAABAAAAb8yoAAAAAAAAzKgAAAAAAAABAAAAY8uoAAAAAAAAy6gAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAz6gAAAAAAADPqAAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAMuoAAAAAAAAzKgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAy6gAAAAAAADLqAAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"left_delete",
					null,
					"AQAAAMuoAAAAAAAAy6gAAAAAAAABAAAAcw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzKgAAAAAAADMqAAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "con"
					},
					"AwAAAMuoAAAAAAAAzKgAAAAAAAAAAAAAzKgAAAAAAADNqAAAAAAAAAAAAADNqAAAAAAAAM6oAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAy6gAAAAAAADLqAAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert_completion",
					{
						"completion": "const",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "const"
					},
					"AgAAAMuoAAAAAAAAy6gAAAAAAAADAAAAY29uy6gAAAAAAADQqAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzqgAAAAAAADOqAAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANCoAAAAAAAA0agAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0KgAAAAAAADQqAAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"paste",
					null,
					"AgAAAMuoAAAAAAAA36gAAAAAAAAAAAAA36gAAAAAAADfqAAAAAAAAAUAAABjb25zdA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAy6gAAAAAAADQqAAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"right_delete",
					null,
					"AQAAAN+oAAAAAAAA36gAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA36gAAAAAAADfqAAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					6,
					"left_delete",
					null,
					"BgAAALqoAAAAAAAAuqgAAAAAAAABAAAAdLmoAAAAAAAAuagAAAAAAAABAAAAY7ioAAAAAAAAuKgAAAAAAAABAAAAZbeoAAAAAAAAt6gAAAAAAAABAAAAaraoAAAAAAAAtqgAAAAAAAABAAAAYrWoAAAAAAAAtagAAAAAAAABAAAAbw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAu6gAAAAAAAC7qAAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "nesg"
					},
					"BAAAALWoAAAAAAAAtqgAAAAAAAAAAAAAtqgAAAAAAAC3qAAAAAAAAAAAAAC3qAAAAAAAALioAAAAAAAAAAAAALioAAAAAAAAuagAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtagAAAAAAAC1qAAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					4,
					"left_delete",
					null,
					"BAAAALioAAAAAAAAuKgAAAAAAAABAAAAZ7eoAAAAAAAAt6gAAAAAAAABAAAAc7aoAAAAAAAAtqgAAAAAAAABAAAAZbWoAAAAAAAAtagAAAAAAAABAAAAbg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuagAAAAAAAC5qAAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "mesh"
					},
					"BAAAALWoAAAAAAAAtqgAAAAAAAAAAAAAtqgAAAAAAAC3qAAAAAAAAAAAAAC3qAAAAAAAALioAAAAAAAAAAAAALioAAAAAAAAuagAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtagAAAAAAAC1qAAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAN6oAAAAAAAA36gAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3qgAAAAAAADeqAAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"paste",
					null,
					"AQAAALWoAAAAAAAA2qgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtagAAAAAAAC1qAAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANqoAAAAAAAA26gAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2qgAAAAAAADaqAAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "\n\n.*"
					},
					"BwAAAAWpAAAAAAAABqkAAAAAAAAAAAAABqkAAAAAAAAKqQAAAAAAAAAAAAAKqQAAAAAAAAupAAAAAAAAAAAAAAupAAAAAAAAD6kAAAAAAAAAAAAABqkAAAAAAAAGqQAAAAAAAAQAAAAgICAgC6kAAAAAAAAMqQAAAAAAAAAAAAAMqQAAAAAAAA2pAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABakAAAAAAAAFqQAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAAA2pAAAAAAAADqkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADakAAAAAAAANqQAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAA6pAAAAAAAAD6kAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADqkAAAAAAAAOqQAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					4,
					"left_delete",
					null,
					"BAAAAA6pAAAAAAAADqkAAAAAAAABAAAAIA2pAAAAAAAADakAAAAAAAABAAAAKgypAAAAAAAADKkAAAAAAAABAAAAKgupAAAAAAAAC6kAAAAAAAABAAAALg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAD6kAAAAAAAAPqQAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": "/**"
					},
					"AwAAAAupAAAAAAAADKkAAAAAAAAAAAAADKkAAAAAAAANqQAAAAAAAAAAAAANqQAAAAAAAA6pAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAC6kAAAAAAAALqQAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": " Just"
					},
					"BQAAAA6pAAAAAAAAD6kAAAAAAAAAAAAAD6kAAAAAAAAQqQAAAAAAAAAAAAAQqQAAAAAAABGpAAAAAAAAAAAAABGpAAAAAAAAEqkAAAAAAAAAAAAAEqkAAAAAAAATqQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADqkAAAAAAAAOqQAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": " nvvk"
					},
					"BQAAABOpAAAAAAAAFKkAAAAAAAAAAAAAFKkAAAAAAAAVqQAAAAAAAAAAAAAVqQAAAAAAABapAAAAAAAAAAAAABapAAAAAAAAF6kAAAAAAAAAAAAAF6kAAAAAAAAYqQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAE6kAAAAAAAATqQAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": " related"
					},
					"CAAAABipAAAAAAAAGakAAAAAAAAAAAAAGakAAAAAAAAaqQAAAAAAAAAAAAAaqQAAAAAAABupAAAAAAAAAAAAABupAAAAAAAAHKkAAAAAAAAAAAAAHKkAAAAAAAAdqQAAAAAAAAAAAAAdqQAAAAAAAB6pAAAAAAAAAAAAAB6pAAAAAAAAH6kAAAAAAAAAAAAAH6kAAAAAAAAgqQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGKkAAAAAAAAYqQAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": " testing"
					},
					"CAAAACCpAAAAAAAAIakAAAAAAAAAAAAAIakAAAAAAAAiqQAAAAAAAAAAAAAiqQAAAAAAACOpAAAAAAAAAAAAACOpAAAAAAAAJKkAAAAAAAAAAAAAJKkAAAAAAAAlqQAAAAAAAAAAAAAlqQAAAAAAACapAAAAAAAAAAAAACapAAAAAAAAJ6kAAAAAAAAAAAAAJ6kAAAAAAAAoqQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIKkAAAAAAAAgqQAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": " stuff\n * "
					},
					"CQAAACipAAAAAAAAKakAAAAAAAAAAAAAKakAAAAAAAAqqQAAAAAAAAAAAAAqqQAAAAAAACupAAAAAAAAAAAAACupAAAAAAAALKkAAAAAAAAAAAAALKkAAAAAAAAtqQAAAAAAAAAAAAAtqQAAAAAAAC6pAAAAAAAAAAAAAC6pAAAAAAAAL6kAAAAAAAAAAAAAL6kAAAAAAAAzqQAAAAAAAAAAAAAzqQAAAAAAADapAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKKkAAAAAAAAoqQAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					3,
					"left_delete",
					null,
					"AwAAADWpAAAAAAAANakAAAAAAAABAAAAIDSpAAAAAAAANKkAAAAAAAABAAAAKjOpAAAAAAAAM6kAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANqkAAAAAAAA2qQAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": "*/"
					},
					"AgAAADOpAAAAAAAANKkAAAAAAAAAAAAANKkAAAAAAAA1qQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAM6kAAAAAAAAzqQAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADWpAAAAAAAANqkAAAAAAAAAAAAANqkAAAAAAAA6qQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANakAAAAAAAA1qQAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": " void"
					},
					"BQAAADqpAAAAAAAAO6kAAAAAAAAAAAAAO6kAAAAAAAA8qQAAAAAAAAAAAAA8qQAAAAAAAD2pAAAAAAAAAAAAAD2pAAAAAAAAPqkAAAAAAAAAAAAAPqkAAAAAAAA/qQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOqkAAAAAAAA6qQAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAD+pAAAAAAAAQKkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAP6kAAAAAAAA/qQAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"right_delete",
					null,
					"AQAAADqpAAAAAAAAOqkAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOqkAAAAAAAA6qQAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAD6pAAAAAAAAP6kAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPqkAAAAAAAA+qQAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"paste",
					null,
					"AQAAAD+pAAAAAAAAVakAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAP6kAAAAAAAA/qQAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFWpAAAAAAAAVqkAAAAAAAAAAAAAVqkAAAAAAABaqQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVakAAAAAAABVqQAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"left_delete",
					null,
					"AQAAAFqpAAAAAAAAWqkAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAW6kAAAAAAABbqQAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "void"
					},
					"BAAAAFqpAAAAAAAAW6kAAAAAAAAAAAAAW6kAAAAAAABcqQAAAAAAAAAAAABcqQAAAAAAAF2pAAAAAAAAAAAAAF2pAAAAAAAAXqkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWqkAAAAAAABaqQAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAF6pAAAAAAAAX6kAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXqkAAAAAAABeqQAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"paste",
					null,
					"AQAAAF+pAAAAAAAAc6kAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAX6kAAAAAAABfqQAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"left_delete",
					null,
					"AQAAAHKpAAAAAAAAcqkAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAc6kAAAAAAABzqQAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "\n>"
					},
					"AwAAAF2sAAAAAAAAXqwAAAAAAAAAAAAAXqwAAAAAAABirAAAAAAAAAAAAABirAAAAAAAAGOsAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABdrAAAAAAAAF2sAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"left_delete",
					null,
					"AQAAAGKsAAAAAAAAYqwAAAAAAAABAAAAPg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjrAAAAAAAAGOsAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "~Sce"
					},
					"BAAAAGKsAAAAAAAAY6wAAAAAAAAAAAAAY6wAAAAAAABkrAAAAAAAAAAAAABkrAAAAAAAAGWsAAAAAAAAAAAAAGWsAAAAAAAAZqwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABirAAAAAAAAGKsAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert_completion",
					{
						"completion": "Scene",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Scene"
					},
					"AgAAAGOsAAAAAAAAY6wAAAAAAAADAAAAU2NlY6wAAAAAAABorAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABmrAAAAAAAAGasAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGisAAAAAAAAaqwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABorAAAAAAAAGisAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAGqsAAAAAAAAa6wAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqrAAAAAAAAGqsAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					2,
					"left_delete",
					null,
					"AgAAAF6sAAAAAAAAXqwAAAAAAAANAAAAICAgIH5TY2VuZSgpO12sAAAAAAAAXawAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrrAAAAAAAAF6sAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAGicAAAAAAAAaZwAAAAAAAAAAAAAaZwAAAAAAABqnAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABonAAAAAAAAGicAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"reindent",
					null,
					"AQAAAGmcAAAAAAAAbZwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABpnAAAAAAAAGmcAAAAAAAAAAAAAAAAAAA"
				],
				[
					22,
					1,
					"paste",
					null,
					"AQAAAGmcAAAAAAAAbpwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABtnAAAAAAAAG2cAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "~Scene"
					},
					"BwAAAG2cAAAAAAAAbpwAAAAAAAAAAAAAb5wAAAAAAABvnAAAAAAAAAQAAAAgICAgbpwAAAAAAABvnAAAAAAAAAAAAABvnAAAAAAAAHCcAAAAAAAAAAAAAHCcAAAAAAAAcZwAAAAAAAAAAAAAcZwAAAAAAABynAAAAAAAAAAAAABynAAAAAAAAHOcAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABtnAAAAAAAAG2cAAAAAAAAAAAAAAAAQkA"
				],
				[
					25,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHOcAAAAAAAAdZwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABznAAAAAAAAHOcAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAHWcAAAAAAAAdpwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB1nAAAAAAAAHWcAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAAnRAAAAAAAACtEAAAAAAAAAAAAACtEAAAAAAAAL0QAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJ0QAAAAAAAAnRAAAAAAAAAAAAAABwekA"
				],
				[
					33,
					1,
					"reindent",
					null,
					"AQAAAArRAAAAAAAADtEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAK0QAAAAAAAArRAAAAAAAAAAAAAAAAAAA"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "bool"
					},
					"BAAAAA7RAAAAAAAAD9EAAAAAAAAAAAAAD9EAAAAAAAAQ0QAAAAAAAAAAAAAQ0QAAAAAAABHRAAAAAAAAAAAAABHRAAAAAAAAEtEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAO0QAAAAAAAA7RAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": " m"
					},
					"AgAAABLRAAAAAAAAE9EAAAAAAAAAAAAAE9EAAAAAAAAU0QAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAS0QAAAAAAABLRAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "BlasBui"
					},
					"BwAAABTRAAAAAAAAFdEAAAAAAAAAAAAAFdEAAAAAAAAW0QAAAAAAAAAAAAAW0QAAAAAAABfRAAAAAAAAAAAAABfRAAAAAAAAGNEAAAAAAAAAAAAAGNEAAAAAAAAZ0QAAAAAAAAAAAAAZ0QAAAAAAABrRAAAAAAAAAAAAABrRAAAAAAAAG9EAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAU0QAAAAAAABTRAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "lt"
					},
					"AgAAABvRAAAAAAAAHNEAAAAAAAAAAAAAHNEAAAAAAAAd0QAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAb0QAAAAAAABvRAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAB3RAAAAAAAAHtEAAAAAAAAAAAAAHtEAAAAAAAAf0QAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAd0QAAAAAAAB3RAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAB/RAAAAAAAAINEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAf0QAAAAAAAB/RAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "false"
					},
					"AQAAACDRAAAAAAAAJdEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAg0QAAAAAAACDRAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAACXRAAAAAAAAJtEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAl0QAAAAAAACXRAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "\nboool"
					},
					"BwAAACbRAAAAAAAAJ9EAAAAAAAAAAAAAJ9EAAAAAAAAr0QAAAAAAAAAAAAAr0QAAAAAAACzRAAAAAAAAAAAAACzRAAAAAAAALdEAAAAAAAAAAAAALdEAAAAAAAAu0QAAAAAAAAAAAAAu0QAAAAAAAC/RAAAAAAAAAAAAAC/RAAAAAAAAMNEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAm0QAAAAAAACbRAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": " m"
					},
					"AgAAADDRAAAAAAAAMdEAAAAAAAAAAAAAMdEAAAAAAAAy0QAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAw0QAAAAAAADDRAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					4,
					"left_delete",
					null,
					"BAAAADHRAAAAAAAAMdEAAAAAAAABAAAAbTDRAAAAAAAAMNEAAAAAAAABAAAAIC/RAAAAAAAAL9EAAAAAAAABAAAAbC7RAAAAAAAALtEAAAAAAAABAAAAbw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAy0QAAAAAAADLRAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAC7RAAAAAAAAL9EAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAu0QAAAAAAAC7RAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " mTlas"
					},
					"BgAAAC/RAAAAAAAAMNEAAAAAAAAAAAAAMNEAAAAAAAAx0QAAAAAAAAAAAAAx0QAAAAAAADLRAAAAAAAAAAAAADLRAAAAAAAAM9EAAAAAAAAAAAAAM9EAAAAAAAA00QAAAAAAAAAAAAA00QAAAAAAADXRAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAv0QAAAAAAAC/RAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "Build"
					},
					"BQAAADXRAAAAAAAANtEAAAAAAAAAAAAANtEAAAAAAAA30QAAAAAAAAAAAAA30QAAAAAAADjRAAAAAAAAAAAAADjRAAAAAAAAOdEAAAAAAAAAAAAAOdEAAAAAAAA60QAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA10QAAAAAAADXRAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"left_delete",
					null,
					"AQAAADnRAAAAAAAAOdEAAAAAAAABAAAAZA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA60QAAAAAAADrRAAAAAAAAAAAAAAAA8L8"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAADnRAAAAAAAAOtEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA50QAAAAAAADnRAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAADrRAAAAAAAAO9EAAAAAAAAAAAAAO9EAAAAAAAA80QAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA60QAAAAAAADrRAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": " fa"
					},
					"AwAAADzRAAAAAAAAPdEAAAAAAAAAAAAAPdEAAAAAAAA+0QAAAAAAAAAAAAA+0QAAAAAAAD/RAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA80QAAAAAAADzRAAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "false"
					},
					"AgAAAD3RAAAAAAAAPdEAAAAAAAACAAAAZmE90QAAAAAAAELRAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA/0QAAAAAAAD/RAAAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAELRAAAAAAAAQ9EAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABC0QAAAAAAAELRAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAElvAAAAAAAASm8AAAAAAAAAAAAASm8AAAAAAABLbwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASW8AAAAAAABJbwAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"reindent",
					null,
					"AQAAAEpvAAAAAAAATm8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASm8AAAAAAABKbwAAAAAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAAE5vAAAAAAAAaG8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATm8AAAAAAABObwAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": " getT"
					},
					"BQAAAGhvAAAAAAAAaW8AAAAAAAAAAAAAaW8AAAAAAABqbwAAAAAAAAAAAABqbwAAAAAAAGtvAAAAAAAAAAAAAGtvAAAAAAAAbG8AAAAAAAAAAAAAbG8AAAAAAABtbwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaG8AAAAAAABobwAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "las"
					},
					"AwAAAG1vAAAAAAAAbm8AAAAAAAAAAAAAbm8AAAAAAABvbwAAAAAAAAAAAABvbwAAAAAAAHBvAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbW8AAAAAAABtbwAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHBvAAAAAAAAcm8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcG8AAAAAAABwbwAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHJvAAAAAAAAc28AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcm8AAAAAAABybwAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAHNvAAAAAAAAdW8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAc28AAAAAAABzbwAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " re"
					},
					"AwAAAHRvAAAAAAAAdW8AAAAAAAAAAAAAdW8AAAAAAAB2bwAAAAAAAAAAAAB2bwAAAAAAAHdvAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdG8AAAAAAAB0bwAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAAHVvAAAAAAAAdW8AAAAAAAACAAAAcmV1bwAAAAAAAHtvAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAd28AAAAAAAB3bwAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " mR"
					},
					"AwAAAHtvAAAAAAAAfG8AAAAAAAAAAAAAfG8AAAAAAAB9bwAAAAAAAAAAAAB9bwAAAAAAAH5vAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAe28AAAAAAAB7bwAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAH5vAAAAAAAAf28AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfm8AAAAAAAB+bwAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert_completion",
					{
						"completion": "mRtBuilder",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mRtBuilder"
					},
					"AgAAAHxvAAAAAAAAfG8AAAAAAAADAAAAbVJ0fG8AAAAAAACGbwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAf28AAAAAAAB/bwAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAIZvAAAAAAAAh28AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhm8AAAAAAACGbwAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"paste",
					null,
					"AQAAAIdvAAAAAAAAoW8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAh28AAAAAAACHbwAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKFvAAAAAAAAom8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoW8AAAAAAAChbwAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKJvAAAAAAAAo28AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAom8AAAAAAACibwAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAAHNvAAAAAAAAdG8AAAAAAAAAAAAAdG8AAAAAAAB1bwAAAAAAAAAAAAB1bwAAAAAAAHZvAAAAAAAAAAAAAHZvAAAAAAAAd28AAAAAAAAAAAAAd28AAAAAAAB4bwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAc28AAAAAAABzbwAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHhvAAAAAAAAeW8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeG8AAAAAAAB4bwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/Scene/Scene.cpp.6",
			"settings":
			{
				"buffer_size": 129985,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1690,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIhDAAAAAAAAiUMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIhDAAAAAAAAiEMAAAAAAAAAAAAAAADwvw"
				],
				[
					1696,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJdGAAAAAAAAmEYAAAAAAAAAAAAAmEYAAAAAAACgRgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJdGAAAAAAAAl0YAAAAAAAAAAAAAAADwvw"
				],
				[
					1697,
					2,
					"left_delete",
					null,
					"AgAAAJxGAAAAAAAAnEYAAAAAAAAEAAAAICAgIJhGAAAAAAAAmEYAAAAAAAAEAAAAICAgIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKBGAAAAAAAAoEYAAAAAAAAAAAAAAADwvw"
				],
				[
					1698,
					1,
					"paste",
					null,
					"AQAAAJhGAAAAAAAAfUcAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJhGAAAAAAAAmEYAAAAAAAAAAAAAAADwvw"
				],
				[
					1704,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJVKAAAAAAAAlkoAAAAAAAAAAAAAlkoAAAAAAACeSgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJVKAAAAAAAAlUoAAAAAAAAAAAAAAADwvw"
				],
				[
					1705,
					2,
					"left_delete",
					null,
					"AgAAAJpKAAAAAAAAmkoAAAAAAAAEAAAAICAgIJZKAAAAAAAAlkoAAAAAAAAEAAAAICAgIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ5KAAAAAAAAnkoAAAAAAAAAAAAAAADwvw"
				],
				[
					1706,
					1,
					"paste",
					null,
					"AQAAAJZKAAAAAAAAe0sAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJZKAAAAAAAAlkoAAAAAAAAAAAAAAADwvw"
				],
				[
					1714,
					1,
					"paste",
					null,
					"AgAAAFxLAAAAAAAAf0sAAAAAAAAAAAAAf0sAAAAAAAB/SwAAAAAAAB4AAABWS19TSEFERVJfU1RBR0VfUkFZR0VOX0JJVF9LSFI",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFxLAAAAAAAAeksAAAAAAAAAAAAAAADwvw"
				],
				[
					1722,
					1,
					"paste",
					null,
					"AgAAAF5HAAAAAAAAekcAAAAAAAAAAAAAekcAAAAAAAB6RwAAAAAAAB4AAABWS19TSEFERVJfU1RBR0VfUkFZR0VOX0JJVF9LSFI",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF5HAAAAAAAAfEcAAAAAAAAAAAAAAADwvw"
				],
				[
					1728,
					1,
					"paste",
					null,
					"AQAAAFZHAAAAAAAAW0cAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFZHAAAAAAAAVkcAAAAAAAAAAAAAAADwvw"
				],
				[
					1731,
					1,
					"paste",
					null,
					"AQAAAGJDAAAAAAAAZ0MAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGJDAAAAAAAAYkMAAAAAAAAAAAAAAADwvw"
				],
				[
					1734,
					1,
					"paste",
					null,
					"AQAAAFxLAAAAAAAAYUsAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFxLAAAAAAAAXEsAAAAAAAAAAAAAAADwvw"
				],
				[
					1740,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAI5DAAAAAAAAj0MAAAAAAAAAAAAAj0MAAAAAAACXQwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI5DAAAAAAAAjkMAAAAAAAAAAAAAAADwvw"
				],
				[
					1741,
					1,
					"paste",
					null,
					"AQAAAJdDAAAAAAAArkMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJdDAAAAAAAAl0MAAAAAAAAAAAAAAADwvw"
				],
				[
					1742,
					1,
					"insert",
					{
						"characters": "info"
					},
					"BAAAAK5DAAAAAAAAr0MAAAAAAAAAAAAAr0MAAAAAAACwQwAAAAAAAAAAAACwQwAAAAAAALFDAAAAAAAAAAAAALFDAAAAAAAAskMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK5DAAAAAAAArkMAAAAAAAAAAAAAAADwvw"
				],
				[
					1743,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALJDAAAAAAAAtEMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALJDAAAAAAAAskMAAAAAAAAAAAAAAADwvw"
				],
				[
					1744,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALNDAAAAAAAAtEMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALNDAAAAAAAAs0MAAAAAAAAAAAAAAADwvw"
				],
				[
					1745,
					1,
					"left_delete",
					null,
					"AQAAALNDAAAAAAAAs0MAAAAAAAABAAAAOw",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALRDAAAAAAAAtEMAAAAAAAAAAAAAAADwvw"
				],
				[
					1746,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAALJDAAAAAAAAskMAAAAAAAABAAAAKLJDAAAAAAAAskMAAAAAAAABAAAAKQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALNDAAAAAAAAs0MAAAAAAAAAAAAAAADwvw"
				],
				[
					1747,
					1,
					"insert",
					{
						"characters": ");"
					},
					"AgAAALJDAAAAAAAAs0MAAAAAAAAAAAAAs0MAAAAAAAC0QwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALJDAAAAAAAAskMAAAAAAAAAAAAAAADwvw"
				],
				[
					1753,
					1,
					"insert",
					{
						"characters": "\nv"
					},
					"AwAAAKtHAAAAAAAArEcAAAAAAAAAAAAArEcAAAAAAAC0RwAAAAAAAAAAAAC0RwAAAAAAALVHAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKtHAAAAAAAAq0cAAAAAAAAAAAAAAADwvw"
				],
				[
					1754,
					1,
					"left_delete",
					null,
					"AQAAALRHAAAAAAAAtEcAAAAAAAABAAAAdg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALVHAAAAAAAAtUcAAAAAAAAAAAAAAADwvw"
				],
				[
					1755,
					1,
					"paste",
					null,
					"AQAAALRHAAAAAAAA0UcAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALRHAAAAAAAAtEcAAAAAAAAAAAAAAADwvw"
				],
				[
					1758,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANlLAAAAAAAA2ksAAAAAAAAAAAAA2ksAAAAAAADiSwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANlLAAAAAAAA2UsAAAAAAAAAAAAAAADwvw"
				],
				[
					1759,
					1,
					"paste",
					null,
					"AQAAAOJLAAAAAAAA/0sAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOJLAAAAAAAA4ksAAAAAAAAAAAAAAADwvw"
				],
				[
					1779,
					1,
					"insert",
					{
						"characters": "\ninfo.p"
					},
					"CAAAAIFLAAAAAAAAgksAAAAAAAAAAAAAgksAAAAAAACKSwAAAAAAAAAAAACKSwAAAAAAAItLAAAAAAAAAAAAAItLAAAAAAAAjEsAAAAAAAAAAAAAjEsAAAAAAACNSwAAAAAAAAAAAACNSwAAAAAAAI5LAAAAAAAAAAAAAI5LAAAAAAAAj0sAAAAAAAAAAAAAj0sAAAAAAACQSwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIFLAAAAAAAAgUsAAAAAAAAAAAAAAADwvw"
				],
				[
					1780,
					1,
					"insert",
					{
						"characters": "Name"
					},
					"BAAAAJBLAAAAAAAAkUsAAAAAAAAAAAAAkUsAAAAAAACSSwAAAAAAAAAAAACSSwAAAAAAAJNLAAAAAAAAAAAAAJNLAAAAAAAAlEsAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJBLAAAAAAAAkEsAAAAAAAAAAAAAAADwvw"
				],
				[
					1781,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAJRLAAAAAAAAlUsAAAAAAAAAAAAAlUsAAAAAAACWSwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJRLAAAAAAAAlEsAAAAAAAAAAAAAAADwvw"
				],
				[
					1782,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJZLAAAAAAAAl0sAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJZLAAAAAAAAlksAAAAAAAAAAAAAAADwvw"
				],
				[
					1783,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAJdLAAAAAAAAmUsAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJdLAAAAAAAAl0sAAAAAAAAAAAAAAADwvw"
				],
				[
					1784,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAJdLAAAAAAAAl0sAAAAAAAABAAAAJ5dLAAAAAAAAl0sAAAAAAAABAAAAJw",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJhLAAAAAAAAmEsAAAAAAAAAAAAAAADwvw"
				],
				[
					1785,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAJdLAAAAAAAAmUsAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJdLAAAAAAAAl0sAAAAAAAAAAAAAAADwvw"
				],
				[
					1786,
					1,
					"insert",
					{
						"characters": "main;"
					},
					"BQAAAJhLAAAAAAAAmUsAAAAAAAAAAAAAmUsAAAAAAACaSwAAAAAAAAAAAACaSwAAAAAAAJtLAAAAAAAAAAAAAJtLAAAAAAAAnEsAAAAAAAAAAAAAnEsAAAAAAACdSwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJhLAAAAAAAAmEsAAAAAAAAAAAAAAADwvw"
				],
				[
					1788,
					1,
					"right_delete",
					null,
					"AQAAAJxLAAAAAAAAnEsAAAAAAAABAAAAOw",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJxLAAAAAAAAnEsAAAAAAAAAAAAAAADwvw"
				],
				[
					1790,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJ1LAAAAAAAAnksAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ1LAAAAAAAAnUsAAAAAAAAAAAAAAADwvw"
				],
				[
					1796,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFpHAAAAAAAAW0cAAAAAAAAAAAAAW0cAAAAAAABjRwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFpHAAAAAAAAWkcAAAAAAAAAAAAAAADwvw"
				],
				[
					1797,
					1,
					"paste",
					null,
					"AQAAAGNHAAAAAAAAd0cAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGNHAAAAAAAAY0cAAAAAAAAAAAAAAADwvw"
				],
				[
					1800,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADtDAAAAAAAAPEMAAAAAAAAAAAAAPEMAAAAAAABEQwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADtDAAAAAAAAO0MAAAAAAAAAAAAAAADwvw"
				],
				[
					1801,
					1,
					"paste",
					null,
					"AQAAAERDAAAAAAAAWEMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAERDAAAAAAAAREMAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAPaCAQAAAAAA94IBAAAAAAAAAAAA94IBAAAAAAAHgwEAAAAAAAAAAAAHgwEAAAAAAAiDAQAAAAAAAAAAAAiDAQAAAAAAGIMBAAAAAAAAAAAA94IBAAAAAAD3ggEAAAAAABAAAAAgICAgICAgICAgICAgICAg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2ggEAAAAAAPaCAQAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"reindent",
					null,
					"AQAAAPeCAQAAAAAAC4MBAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3ggEAAAAAAPeCAQAAAAAAAAAAAAAAYkA"
				],
				[
					12,
					1,
					"paste",
					null,
					"AQAAAAuDAQAAAAAAz4MBAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALgwEAAAAAAAuDAQAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAAuDAQAAAAAADIMBAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALgwEAAAAAAAuDAQAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					14,
					"left_delete",
					null,
					"DgAAAM+DAQAAAAAAz4MBAAAAAAABAAAAe86DAQAAAAAAzoMBAAAAAAABAAAAIM2DAQAAAAAAzYMBAAAAAAABAAAAKcyDAQAAAAAAzIMBAAAAAAABAAAAdMuDAQAAAAAAy4MBAAAAAAABAAAAbMqDAQAAAAAAyoMBAAAAAAABAAAAacmDAQAAAAAAyYMBAAAAAAABAAAAdciDAQAAAAAAyIMBAAAAAAABAAAAQseDAQAAAAAAx4MBAAAAAAABAAAAbcaDAQAAAAAAxoMBAAAAAAABAAAAKMWDAQAAAAAAxYMBAAAAAAABAAAAIMSDAQAAAAAAxIMBAAAAAAABAAAAZsODAQAAAAAAw4MBAAAAAAABAAAAab+DAQAAAAAAv4MBAAAAAAAEAAAAICAgIA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADQgwEAAAAAANCDAQAAAAAAAAAAAACgZ0A"
				],
				[
					18,
					1,
					"left_delete",
					null,
					"AQAAAL6DAQAAAAAAvoMBAAAAAAABAAAACg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC/gwEAAAAAAL+DAQAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					2,
					"left_delete",
					null,
					"AgAAAPeCAQAAAAAA94IBAAAAAADIAAAAICAgICAgICAgICAgICAgICAgICBhZGRHZW9tZXRyeShjb25zdCBWa0FjY2VsZXJhdGlvblN0cnVjdHVyZUdlb21ldHJ5RGF0YUtIUiYgZ2VvbWV0cnlfZGF0YSwgVmtHZW9tZXRyeVR5cGVLSFIgdHlwZSwgY29uc3QgVmtBY2NlbGVyYXRpb25TdHJ1Y3R1cmVCdWlsZFJhbmdlSW5mb0tIUiYgcmFuZ2UsIFZrR2VvbWV0cnlGbGFnc0tIUiBmbGFncykgewr2ggEAAAAAAPaCAQAAAAAAAQAAAAo",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3ggEAAAAAAL+DAQAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					4,
					"left_delete",
					null,
					"BAAAAPKCAQAAAAAA8oIBAAAAAAAEAAAAICAgIO6CAQAAAAAA7oIBAAAAAAAEAAAAICAgIOqCAQAAAAAA6oIBAAAAAAAEAAAAICAgIOaCAQAAAAAA5oIBAAAAAAAEAAAAICAgIA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2ggEAAAAAAPaCAQAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAADCxAQAAAAAAMbEBAAAAAAAAAAAAMbEBAAAAAAAysQEAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwsQEAAAAAADCxAQAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": " 5"
					},
					"AgAAADKxAQAAAAAAM7EBAAAAAAAAAAAAM7EBAAAAAAA0sQEAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAysQEAAAAAADKxAQAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAAFqrAQAAAAAAW6sBAAAAAAAAAAAAW6sBAAAAAABcqwEAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABaqwEAAAAAAFqrAQAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": " 4"
					},
					"AgAAAFyrAQAAAAAAXasBAAAAAAAAAAAAXasBAAAAAABeqwEAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABcqwEAAAAAAFyrAQAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"left_delete",
					null,
					"AQAAAF2rAQAAAAAAXasBAAAAAAABAAAANA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeqwEAAAAAAF6rAQAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "5"
					},
					"AQAAAF2rAQAAAAAAXqsBAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABdqwEAAAAAAF2rAQAAAAAAAAAAAAAA8L8"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "Data"
					},
					"BAAAAM47AQAAAAAAzzsBAAAAAAAAAAAAzzsBAAAAAADQOwEAAAAAAAAAAADQOwEAAAAAANE7AQAAAAAAAAAAANE7AQAAAAAA0jsBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzjsBAAAAAADOOwEAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"paste",
					null,
					"AgAAAP07AQAAAAAABTwBAAAAAAAAAAAABTwBAAAAAAAFPAEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/TsBAAAAAAABPAEAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"paste",
					null,
					"AgAAACg8AQAAAAAAMDwBAAAAAAAAAAAAMDwBAAAAAAAwPAEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKDwBAAAAAAAsPAEAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"paste",
					null,
					"AgAAAJU8AQAAAAAAnTwBAAAAAAAAAAAAnTwBAAAAAACdPAEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlTwBAAAAAACZPAEAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"paste",
					null,
					"AgAAAKQ+AQAAAAAArD4BAAAAAAAAAAAArD4BAAAAAACsPgEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApD4BAAAAAACoPgEAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": "Data"
					},
					"BAAAAHhSAQAAAAAAeVIBAAAAAAAAAAAAeVIBAAAAAAB6UgEAAAAAAAAAAAB6UgEAAAAAAHtSAQAAAAAAAAAAAHtSAQAAAAAAfFIBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeFIBAAAAAAB4UgEAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": "Data"
					},
					"BAAAABxgAQAAAAAAHWABAAAAAAAAAAAAHWABAAAAAAAeYAEAAAAAAAAAAAAeYAEAAAAAAB9gAQAAAAAAAAAAAB9gAQAAAAAAIGABAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHGABAAAAAAAcYAEAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"paste",
					null,
					"AgAAAMNhAQAAAAAAy2EBAAAAAAAAAAAAy2EBAAAAAADLYQEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAw2EBAAAAAADHYQEAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"paste",
					null,
					"AgAAAPJhAQAAAAAA+mEBAAAAAAAAAAAA+mEBAAAAAAD6YQEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8mEBAAAAAAD2YQEAAAAAAAAAAAAAAPC/"
				],
				[
					133,
					1,
					"paste",
					null,
					"AgAAAA1iAQAAAAAAFWIBAAAAAAAAAAAAFWIBAAAAAAAVYgEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEWIBAAAAAAANYgEAAAAAAAAAAAAAAPC/"
				],
				[
					137,
					1,
					"paste",
					null,
					"AgAAACliAQAAAAAAMWIBAAAAAAAAAAAAMWIBAAAAAAAxYgEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKWIBAAAAAAAtYgEAAAAAAAAAAAAAAPC/"
				],
				[
					141,
					1,
					"paste",
					null,
					"AgAAAE1iAQAAAAAAVWIBAAAAAAAAAAAAVWIBAAAAAABVYgEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATWIBAAAAAABRYgEAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					1,
					"paste",
					null,
					"AgAAANtiAQAAAAAA42IBAAAAAAAAAAAA42IBAAAAAADjYgEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA22IBAAAAAADfYgEAAAAAAAAAAAAAAPC/"
				],
				[
					149,
					1,
					"paste",
					null,
					"AgAAANhjAQAAAAAA4GMBAAAAAAAAAAAA4GMBAAAAAADgYwEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2GMBAAAAAADcYwEAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					1,
					"paste",
					null,
					"AgAAABBkAQAAAAAAGGQBAAAAAAAAAAAAGGQBAAAAAAAYZAEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEGQBAAAAAAAUZAEAAAAAAAAAAAAAAPC/"
				],
				[
					157,
					1,
					"paste",
					null,
					"AgAAAHZkAQAAAAAAfmQBAAAAAAAAAAAAfmQBAAAAAAB+ZAEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdmQBAAAAAAB6ZAEAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					1,
					"paste",
					null,
					"AgAAAP5kAQAAAAAABmUBAAAAAAAAAAAABmUBAAAAAAAGZQEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/mQBAAAAAAACZQEAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"paste",
					null,
					"AgAAABllAQAAAAAAIWUBAAAAAAAAAAAAIWUBAAAAAAAhZQEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGWUBAAAAAAAdZQEAAAAAAAAAAAAAAPC/"
				],
				[
					169,
					1,
					"paste",
					null,
					"AgAAAD5lAQAAAAAARmUBAAAAAAAAAAAARmUBAAAAAABGZQEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPmUBAAAAAABCZQEAAAAAAAAAAAAAAPC/"
				],
				[
					173,
					1,
					"paste",
					null,
					"AgAAANRmAQAAAAAA3GYBAAAAAAAAAAAA3GYBAAAAAADcZgEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1GYBAAAAAADYZgEAAAAAAAAAAAAAAPC/"
				],
				[
					180,
					1,
					"paste",
					null,
					"AgAAAL1oAQAAAAAAxWgBAAAAAAAAAAAAxWgBAAAAAADFaAEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvWgBAAAAAADBaAEAAAAAAAAAAAAAAPC/"
				],
				[
					184,
					1,
					"paste",
					null,
					"AgAAAOdoAQAAAAAA72gBAAAAAAAAAAAA72gBAAAAAADvaAEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA62gBAAAAAADnaAEAAAAAAAAAAAAAAPC/"
				],
				[
					188,
					1,
					"paste",
					null,
					"AgAAAN9pAQAAAAAA52kBAAAAAAAAAAAA52kBAAAAAADnaQEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA32kBAAAAAADjaQEAAAAAAAAAAAAAAPC/"
				],
				[
					192,
					1,
					"paste",
					null,
					"AgAAAFNqAQAAAAAAW2oBAAAAAAAAAAAAW2oBAAAAAABbagEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAU2oBAAAAAABXagEAAAAAAAAAAAAAAPC/"
				],
				[
					196,
					1,
					"paste",
					null,
					"AgAAACBrAQAAAAAAKGsBAAAAAAAAAAAAKGsBAAAAAAAoawEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIGsBAAAAAAAkawEAAAAAAAAAAAAAAPC/"
				],
				[
					200,
					1,
					"paste",
					null,
					"AgAAADprAQAAAAAAQmsBAAAAAAAAAAAAQmsBAAAAAABCawEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOmsBAAAAAAA+awEAAAAAAAAAAAAAAPC/"
				],
				[
					204,
					1,
					"paste",
					null,
					"AgAAAJhrAQAAAAAAoGsBAAAAAAAAAAAAoGsBAAAAAACgawEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmGsBAAAAAACcawEAAAAAAAAAAAAAAPC/"
				],
				[
					208,
					1,
					"paste",
					null,
					"AgAAAMBrAQAAAAAAyGsBAAAAAAAAAAAAyGsBAAAAAADIawEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwGsBAAAAAADEawEAAAAAAAAAAAAAAPC/"
				],
				[
					212,
					1,
					"paste",
					null,
					"AgAAAGZsAQAAAAAAbmwBAAAAAAAAAAAAbmwBAAAAAABubAEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZmwBAAAAAABqbAEAAAAAAAAAAAAAAPC/"
				],
				[
					215,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAPdpAQAAAAAA+GkBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA92kBAAAAAAD3aQEAAAAAAAAAAAAAAPC/"
				],
				[
					217,
					1,
					"reindent",
					null,
					"AQAAAPdpAQAAAAAA/2kBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA92kBAAAAAAD3aQEAAAAAAAAAAAAAAAAA"
				],
				[
					218,
					1,
					"insert",
					{
						"characters": "\npr"
					},
					"BQAAAP9pAQAAAAAAAGoBAAAAAAAAAAAAAGoBAAAAAAAIagEAAAAAAAAAAAD3aQEAAAAAAPdpAQAAAAAACAAAACAgICAgICAgAGoBAAAAAAABagEAAAAAAAAAAAABagEAAAAAAAJqAQAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/2kBAAAAAAD/aQEAAAAAAAAAAAAAAPC/"
				],
				[
					219,
					1,
					"insert",
					{
						"characters": "int"
					},
					"AwAAAAJqAQAAAAAAA2oBAAAAAAAAAAAAA2oBAAAAAAAEagEAAAAAAAAAAAAEagEAAAAAAAVqAQAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAmoBAAAAAAACagEAAAAAAAAAAAAAAPC/"
				],
				[
					220,
					1,
					"insert_completion",
					{
						"completion": "printf",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "printf"
					},
					"AgAAAABqAQAAAAAAAGoBAAAAAAAFAAAAcHJpbnQAagEAAAAAAAZqAQAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABWoBAAAAAAAFagEAAAAAAAAAAAAAAPC/"
				],
				[
					221,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAZqAQAAAAAACGoBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABmoBAAAAAAAGagEAAAAAAAAAAAAAAPC/"
				],
				[
					222,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAAdqAQAAAAAACWoBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAB2oBAAAAAAAHagEAAAAAAAAAAAAAAPC/"
				],
				[
					223,
					1,
					"insert",
					{
						"characters": "pre"
					},
					"AwAAAAhqAQAAAAAACWoBAAAAAAAAAAAACWoBAAAAAAAKagEAAAAAAAAAAAAKagEAAAAAAAtqAQAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACGoBAAAAAAAIagEAAAAAAAAAAAAAAPC/"
				],
				[
					225,
					1,
					"insert_completion",
					{
						"completion": "prebuildInfo",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "prebuildInfo"
					},
					"AgAAAAhqAQAAAAAACGoBAAAAAAADAAAAcHJlCGoBAAAAAAAUagEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAC2oBAAAAAAALagEAAAAAAAAAAAAAAPC/"
				],
				[
					226,
					1,
					"insert",
					{
						"characters": ".acc"
					},
					"BAAAABRqAQAAAAAAFWoBAAAAAAAAAAAAFWoBAAAAAAAWagEAAAAAAAAAAAAWagEAAAAAABdqAQAAAAAAAAAAABdqAQAAAAAAGGoBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFGoBAAAAAAAUagEAAAAAAAAAAAAAAPC/"
				],
				[
					229,
					1,
					"insert_completion",
					{
						"completion": "accelerationStructureSize",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "accelerationStructureSize"
					},
					"AgAAABVqAQAAAAAAFWoBAAAAAAADAAAAYWNjFWoBAAAAAAAuagEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGGoBAAAAAAAYagEAAAAAAAAAAAAAAPC/"
				],
				[
					230,
					1,
					"insert",
					{
						"characters": " is:"
					},
					"BAAAAC5qAQAAAAAAL2oBAAAAAAAAAAAAL2oBAAAAAAAwagEAAAAAAAAAAAAwagEAAAAAADFqAQAAAAAAAAAAADFqAQAAAAAAMmoBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALmoBAAAAAAAuagEAAAAAAAAAAAAAAPC/"
				],
				[
					231,
					1,
					"insert",
					{
						"characters": " %zu"
					},
					"BAAAADJqAQAAAAAAM2oBAAAAAAAAAAAAM2oBAAAAAAA0agEAAAAAAAAAAAA0agEAAAAAADVqAQAAAAAAAAAAADVqAQAAAAAANmoBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMmoBAAAAAAAyagEAAAAAAAAAAAAAAPC/"
				],
				[
					232,
					1,
					"insert",
					{
						"characters": " bytes\\"
					},
					"BwAAADZqAQAAAAAAN2oBAAAAAAAAAAAAN2oBAAAAAAA4agEAAAAAAAAAAAA4agEAAAAAADlqAQAAAAAAAAAAADlqAQAAAAAAOmoBAAAAAAAAAAAAOmoBAAAAAAA7agEAAAAAAAAAAAA7agEAAAAAADxqAQAAAAAAAAAAADxqAQAAAAAAPWoBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANmoBAAAAAAA2agEAAAAAAAAAAAAAAPC/"
				],
				[
					233,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAD1qAQAAAAAAPmoBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPWoBAAAAAAA9agEAAAAAAAAAAAAAAPC/"
				],
				[
					235,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAD9qAQAAAAAAQGoBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAP2oBAAAAAAA/agEAAAAAAAAAAAAAAPC/"
				],
				[
					236,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEBqAQAAAAAAQWoBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQGoBAAAAAABAagEAAAAAAAAAAAAAAPC/"
				],
				[
					246,
					1,
					"paste",
					null,
					"AQAAAEFqAQAAAAAAcGoBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQWoBAAAAAABBagEAAAAAAAAAAAAAAPC/"
				],
				[
					249,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAHFqAQAAAAAAcmoBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcWoBAAAAAABxagEAAAAAAAAAAAAAAPC/"
				],
				[
					254,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHJqAQAAAAAAc2oBAAAAAAAAAAAAc2oBAAAAAAB7agEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcmoBAAAAAAByagEAAAAAAAAAAAAAAPC/"
				],
				[
					255,
					1,
					"paste",
					null,
					"AQAAAHtqAQAAAAAA7WoBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAe2oBAAAAAAB7agEAAAAAAAAAAAAAAPC/"
				],
				[
					263,
					1,
					"paste",
					null,
					"AgAAANJqAQAAAAAA42oBAAAAAAAAAAAA42oBAAAAAADjagEAAAAAABkAAABhY2NlbGVyYXRpb25TdHJ1Y3R1cmVTaXpl",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0moBAAAAAADragEAAAAAAAAAAAAAAPC/"
				],
				[
					267,
					1,
					"paste",
					null,
					"AgAAAJBqAQAAAAAAoWoBAAAAAAAAAAAAoWoBAAAAAAChagEAAAAAABkAAABhY2NlbGVyYXRpb25TdHJ1Y3R1cmVTaXpl",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkGoBAAAAAACpagEAAAAAAAAAAAAAAPC/"
				],
				[
					272,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAHtqAQAAAAAAfGoBAAAAAAAAAAAAfGoBAAAAAACEagEAAAAAAAAAAABzagEAAAAAAHNqAQAAAAAACAAAACAgICAgICAg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAe2oBAAAAAAB7agEAAAAAAAAAAAAAAPC/"
				],
				[
					274,
					1,
					"paste",
					null,
					"AQAAAHNqAQAAAAAA1WoBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAc2oBAAAAAABzagEAAAAAAAAAAAAAAFJA"
				],
				[
					277,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAHNqAQAAAAAAd2oBAAAAAAAAAAAAd2oBAAAAAAB7agEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAc2oBAAAAAABzagEAAAAAAAAAAAAAAPC/"
				],
				[
					285,
					1,
					"paste",
					null,
					"AgAAAMpqAQAAAAAA2moBAAAAAAAAAAAA2moBAAAAAADaagEAAAAAABEAAAB1cGRhdGVTY3JhdGNoU2l6ZQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA22oBAAAAAADKagEAAAAAAAAAAAAAAPC/"
				],
				[
					292,
					1,
					"paste",
					null,
					"AgAAAJBqAQAAAAAAoGoBAAAAAAAAAAAAoGoBAAAAAACgagEAAAAAABEAAAB1cGRhdGVTY3JhdGNoU2l6ZQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkGoBAAAAAAChagEAAAAAAAAAAAAAAPC/"
				],
				[
					295,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAB5oAQAAAAAAH2gBAAAAAAAAAAAAH2gBAAAAAAAgaAEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHmgBAAAAAAAeaAEAAAAAAAAAAAAAAPC/"
				],
				[
					297,
					1,
					"insert",
					{
						"characters": "/*"
					},
					"AgAAAB9oAQAAAAAAIGgBAAAAAAAAAAAAIGgBAAAAAAAhaAEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAH2gBAAAAAAAfaAEAAAAAAAAAAAAAAAAA"
				],
				[
					298,
					1,
					"insert",
					{
						"characters": "\n\n*/"
					},
					"BAAAACFoAQAAAAAAImgBAAAAAAAAAAAAImgBAAAAAAAjaAEAAAAAAAAAAAAjaAEAAAAAACRoAQAAAAAAAAAAACRoAQAAAAAAJWgBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIWgBAAAAAAAhaAEAAAAAAAAAAAAAAPC/"
				],
				[
					300,
					1,
					"paste",
					null,
					"AQAAACJoAQAAAAAAD2oBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAImgBAAAAAAAiaAEAAAAAAAAAAAAAADJA"
				],
				[
					305,
					1,
					"insert",
					{
						"characters": "/*"
					},
					"AgAAABNqAQAAAAAAFGoBAAAAAAAAAAAAFGoBAAAAAAAVagEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAE2oBAAAAAAATagEAAAAAAAAAAAAAAPC/"
				],
				[
					307,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANVqAQAAAAAA1moBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1WoBAAAAAADVagEAAAAAAAAAAAAAADJA"
				],
				[
					309,
					1,
					"insert",
					{
						"characters": "*/"
					},
					"AgAAANVqAQAAAAAA1moBAAAAAAAAAAAA1moBAAAAAADXagEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1WoBAAAAAADVagEAAAAAAAAAAAAAAAAA"
				],
				[
					314,
					1,
					"right_delete",
					null,
					"AQAAAB9oAQAAAAAAH2gBAAAAAAADAAAALyoK",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAH2gBAAAAAAAiaAEAAAAAAAAAAAAAAAAA"
				],
				[
					317,
					1,
					"cut",
					null,
					"AQAAAA1qAQAAAAAADWoBAAAAAAADAAAAKi8K",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADWoBAAAAAAANagEAAAAAAAAAAAAAAAAA"
				],
				[
					318,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAA1qAQAAAAAADmoBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADWoBAAAAAAANagEAAAAAAAAAAAAAAPC/"
				],
				[
					320,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAB9oAQAAAAAAI2gBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAH2gBAAAAAAAfaAEAAAAAAAAAAAAAAAAA"
				],
				[
					329,
					1,
					"paste",
					null,
					"AgAAAKRoAQAAAAAAsWgBAAAAAAAAAAAAsWgBAAAAAACxaAEAAAAAABAAAABwcmltaXRpdmVfY291bnRz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApGgBAAAAAAC0aAEAAAAAAAAAAAAAAPC/"
				],
				[
					333,
					1,
					"insert",
					{
						"characters": "blas.Da"
					},
					"BwAAALJoAQAAAAAAs2gBAAAAAAAAAAAAs2gBAAAAAAC0aAEAAAAAAAAAAAC0aAEAAAAAALVoAQAAAAAAAAAAALVoAQAAAAAAtmgBAAAAAAAAAAAAtmgBAAAAAAC3aAEAAAAAAAAAAAC3aAEAAAAAALhoAQAAAAAAAAAAALhoAQAAAAAAuWgBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsmgBAAAAAACyaAEAAAAAAAAAAAAAAPC/"
				],
				[
					334,
					3,
					"left_delete",
					null,
					"AwAAALhoAQAAAAAAuGgBAAAAAAABAAAAYbdoAQAAAAAAt2gBAAAAAAABAAAARLZoAQAAAAAAtmgBAAAAAAABAAAALg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuWgBAAAAAAC5aAEAAAAAAAAAAAAAAPC/"
				],
				[
					335,
					1,
					"insert",
					{
						"characters": "Data."
					},
					"BQAAALZoAQAAAAAAt2gBAAAAAAAAAAAAt2gBAAAAAAC4aAEAAAAAAAAAAAC4aAEAAAAAALloAQAAAAAAAAAAALloAQAAAAAAumgBAAAAAAAAAAAAumgBAAAAAAC7aAEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtmgBAAAAAAC2aAEAAAAAAAAAAAAAAPC/"
				],
				[
					342,
					1,
					"paste",
					null,
					"AgAAAORoAQAAAAAA9GgBAAAAAAAAAAAA9GgBAAAAAAD0aAEAAAAAAAcAAABtUmFuZ2Vz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5GgBAAAAAADraAEAAAAAAAAAAAAAAPC/"
				],
				[
					346,
					1,
					"paste",
					null,
					"AgAAAP5oAQAAAAAADmkBAAAAAAAAAAAADmkBAAAAAAAOaQEAAAAAAAcAAABtUmFuZ2Vz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/mgBAAAAAAAFaQEAAAAAAAAAAAAAAPC/"
				],
				[
					354,
					1,
					"paste",
					null,
					"AgAAABZpAQAAAAAAI2kBAAAAAAAAAAAAI2kBAAAAAAAjaQEAAAAAABAAAABwcmltaXRpdmVfY291bnRz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFmkBAAAAAAAmaQEAAAAAAAAAAAAAAPC/"
				],
				[
					358,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAALtoAQAAAAAAvGgBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAu2gBAAAAAAC7aAEAAAAAAAAAAAAAAPC/"
				],
				[
					359,
					2,
					"right_delete",
					null,
					"AgAAALxoAQAAAAAAvGgBAAAAAAABAAAAbbxoAQAAAAAAvGgBAAAAAAABAAAAUg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvGgBAAAAAAC8aAEAAAAAAAAAAAAAAPC/"
				],
				[
					362,
					2,
					"right_delete",
					null,
					"AgAAAOxoAQAAAAAA7GgBAAAAAAABAAAAbexoAQAAAAAA7GgBAAAAAAABAAAAUg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7GgBAAAAAADsaAEAAAAAAAAAAAAAAPC/"
				],
				[
					363,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAOxoAQAAAAAA7WgBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7GgBAAAAAADsaAEAAAAAAAAAAAAAAPC/"
				],
				[
					366,
					2,
					"right_delete",
					null,
					"AgAAAAVpAQAAAAAABWkBAAAAAAABAAAAbQVpAQAAAAAABWkBAAAAAAABAAAAUg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABWkBAAAAAAAFaQEAAAAAAAAAAAAAAPC/"
				],
				[
					367,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAAVpAQAAAAAABmkBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABWkBAAAAAAAFaQEAAAAAAAAAAAAAAPC/"
				],
				[
					375,
					1,
					"paste",
					null,
					"AgAAAMdpAQAAAAAA1GkBAAAAAAAAAAAA1GkBAAAAAADUaQEAAAAAABAAAABwcmltaXRpdmVfY291bnRz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAx2kBAAAAAADXaQEAAAAAAAAAAAAAAPC/"
				],
				[
					379,
					1,
					"paste",
					null,
					"AgAAAARqAQAAAAAAEWoBAAAAAAAAAAAAEWoBAAAAAAARagEAAAAAABAAAABwcmltaXRpdmVfY291bnRz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABGoBAAAAAAAUagEAAAAAAAAAAAAAAPC/"
				],
				[
					389,
					1,
					"paste",
					null,
					"AQAAAJ5pAQAAAAAAuGkBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnmkBAAAAAACeaQEAAAAAAAAAAAAAAPC/"
				],
				[
					390,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALhpAQAAAAAAuWkBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuGkBAAAAAAC4aQEAAAAAAAAAAAAAAPC/"
				],
				[
					398,
					1,
					"paste",
					null,
					"AgAAALlpAQAAAAAAxmkBAAAAAAAAAAAAxmkBAAAAAADGaQEAAAAAABAAAABwcmltaXRpdmVfY291bnRz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuWkBAAAAAADJaQEAAAAAAAAAAAAAAPC/"
				],
				[
					401,
					1,
					"insert",
					{
						"characters": "/*"
					},
					"AgAAAH9pAQAAAAAAgGkBAAAAAAAAAAAAgGkBAAAAAACBaQEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAf2kBAAAAAAB/aQEAAAAAAAAAAAAAAPC/"
				],
				[
					403,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAADdqAQAAAAAAOGoBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAN2oBAAAAAAA3agEAAAAAAAAAAAAAADJA"
				],
				[
					404,
					1,
					"insert",
					{
						"characters": "8"
					},
					"AQAAADhqAQAAAAAAOWoBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOGoBAAAAAAA4agEAAAAAAAAAAAAAAPC/"
				],
				[
					405,
					1,
					"left_delete",
					null,
					"AQAAADhqAQAAAAAAOGoBAAAAAAABAAAAOA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOWoBAAAAAAA5agEAAAAAAAAAAAAAAPC/"
				],
				[
					406,
					1,
					"insert",
					{
						"characters": "*/"
					},
					"AgAAADhqAQAAAAAAOWoBAAAAAAAAAAAAOWoBAAAAAAA6agEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOGoBAAAAAAA4agEAAAAAAAAAAAAAAPC/"
				],
				[
					408,
					1,
					"right_delete",
					null,
					"AQAAADdqAQAAAAAAN2oBAAAAAAABAAAALw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAN2oBAAAAAAA3agEAAAAAAAAAAAAAAPC/"
				],
				[
					410,
					2,
					"right_delete",
					null,
					"AgAAADpqAQAAAAAAOmoBAAAAAAABAAAALzpqAQAAAAAAOmoBAAAAAAABAAAAKg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOmoBAAAAAAA6agEAAAAAAAAAAAAAAAAA"
				],
				[
					412,
					3,
					"right_delete",
					null,
					"AwAAAPpqAQAAAAAA+moBAAAAAAABAAAAKvpqAQAAAAAA+moBAAAAAAABAAAAL/pqAQAAAAAA+moBAAAAAAABAAAACg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+moBAAAAAAD6agEAAAAAAAAAAAAAAAAA"
				],
				[
					415,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAI5oAQAAAAAAj2gBAAAAAAAAAAAAj2gBAAAAAACQaAEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjmgBAAAAAACOaAEAAAAAAAAAAAAAAPC/"
				],
				[
					418,
					2,
					"left_delete",
					null,
					"AgAAAIJpAQAAAAAAgmkBAAAAAAABAAAAKoFpAQAAAAAAgWkBAAAAAAABAAAALw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAg2kBAAAAAACDaQEAAAAAAAAAAAAAAPC/"
				],
				[
					431,
					1,
					"paste",
					null,
					"AgAAAKprAQAAAAAAs2sBAAAAAAAAAAAAs2sBAAAAAACzawEAAAAAAC8AAABWS19BQ0NFTEVSQVRJT05fU1RSVUNUVVJFX0JVSUxEX1RZUEVfREVWSUNFX0tIUg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqmsBAAAAAADZawEAAAAAAAAAAAAAAPC/"
				],
				[
					440,
					2,
					"right_delete",
					null,
					"AgAAAI5oAQAAAAAAjmgBAAAAAAABAAAAL45oAQAAAAAAjmgBAAAAAAABAAAALw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjmgBAAAAAACOaAEAAAAAAAAAAAAAAEJA"
				],
				[
					442,
					2,
					"left_delete",
					null,
					"AgAAAMtoAQAAAAAAy2gBAAAAAAAEAAAAICAgIMpoAQAAAAAAymgBAAAAAAABAAAACg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAz2gBAAAAAADPaAEAAAAAAAAAAAAAAEJA"
				],
				[
					449,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAIpoAQAAAAAAi2gBAAAAAAAAAAAAi2gBAAAAAACMaAEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAimgBAAAAAACKaAEAAAAAAAAAAAAAAPC/"
				],
				[
					451,
					1,
					"insert",
					{
						"characters": "/*"
					},
					"AgAAAItoAQAAAAAAjGgBAAAAAAAAAAAAjGgBAAAAAACNaAEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAi2gBAAAAAACLaAEAAAAAAAAAAAAAAAAA"
				],
				[
					460,
					1,
					"insert",
					{
						"characters": "size"
					},
					"BQAAAGtqAQAAAAAAbGoBAAAAAAAAAAAAbGoBAAAAAABsagEAAAAAAA0AAABnZW9tZXRyeUNvdW50bGoBAAAAAABtagEAAAAAAAAAAABtagEAAAAAAG5qAQAAAAAAAAAAAG5qAQAAAAAAb2oBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAa2oBAAAAAAB4agEAAAAAAAAAAAAAAPC/"
				],
				[
					461,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAG9qAQAAAAAAcWoBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAb2oBAAAAAABvagEAAAAAAAAAAAAAAPC/"
				],
				[
					466,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAAIBqAQAAAAAAgWoBAAAAAAAAAAAAgWoBAAAAAACCagEAAAAAAAAAAACCagEAAAAAAINqAQAAAAAAAAAAAINqAQAAAAAAhGoBAAAAAAAAAAAAhGoBAAAAAACFagEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgGoBAAAAAACAagEAAAAAAAAAAAAAAPC/"
				],
				[
					467,
					1,
					"insert",
					{
						"characters": " auto&"
					},
					"BgAAAIVqAQAAAAAAhmoBAAAAAAAAAAAAhmoBAAAAAACHagEAAAAAAAAAAACHagEAAAAAAIhqAQAAAAAAAAAAAIhqAQAAAAAAiWoBAAAAAAAAAAAAiWoBAAAAAACKagEAAAAAAAAAAACKagEAAAAAAItqAQAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhWoBAAAAAACFagEAAAAAAAAAAAAAAPC/"
				],
				[
					468,
					3,
					"right_delete",
					null,
					"AwAAAItqAQAAAAAAi2oBAAAAAAABAAAAaYtqAQAAAAAAi2oBAAAAAAABAAAAbotqAQAAAAAAi2oBAAAAAAABAAAAdA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAi2oBAAAAAACLagEAAAAAAAAAAAAAAPC/"
				],
				[
					470,
					1,
					"insert",
					{
						"characters": "nput"
					},
					"BAAAAI1qAQAAAAAAjmoBAAAAAAAAAAAAjmoBAAAAAACPagEAAAAAAAAAAACPagEAAAAAAJBqAQAAAAAAAAAAAJBqAQAAAAAAkWoBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjWoBAAAAAACNagEAAAAAAAAAAAAAAPC/"
				],
				[
					475,
					6,
					"left_delete",
					null,
					"BgAAADhqAQAAAAAAOGoBAAAAAADDAAAAICAgICAgICBzdGQ6OnZlY3Rvcjx1aW50MzJfdD4gbWF4UHJpbUNvdW50cyhpbnB1dHMuc2l6ZSgpKTsKICAgICAgICBmb3IoY29uc3QgYXV0byYgaW5wdXQgPSAwOyBpIDwgaW5wdXRzLmdlb21ldHJ5Q291bnQ7IGkrKykgewogICAgICAgICAgICBjb25zdCBhdXRvJiBnZW9tRGVzYyA9IGJsYXNEYXRhLmdlb21EZXNjc1tpXTsKICAgICAgICB9N2oBAAAAAAA3agEAAAAAAAEAAAAKNmoBAAAAAAA2agEAAAAAAAEAAAAKNWoBAAAAAAA1agEAAAAAAAEAAAAvNGoBAAAAAAA0agEAAAAAAAEAAAAqM2oBAAAAAAAzagEAAAAAAAEAAAAK",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+2oBAAAAAAA4agEAAAAAAAAAAAAAAPC/"
				],
				[
					478,
					3,
					"left_delete",
					null,
					"AwAAAIxoAQAAAAAAjGgBAAAAAAABAAAAKotoAQAAAAAAi2gBAAAAAAABAAAAL4poAQAAAAAAimgBAAAAAAABAAAACg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjWgBAAAAAACNaAEAAAAAAAAAAAAAgEZA"
				],
				[
					481,
					1,
					"indent",
					null,
					"CAAAAB9oAQAAAAAAI2gBAAAAAAAAAAAAj2gBAAAAAACTaAEAAAAAAAAAAADUaAEAAAAAANhoAQAAAAAAAAAAAIhpAQAAAAAAjGkBAAAAAAAAAAAAnmkBAAAAAACiaQEAAAAAAAAAAADcaQEAAAAAAOBpAQAAAAAAAAAAABBqAQAAAAAAFGoBAAAAAAAAAAAAR2oBAAAAAABLagEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMWoBAAAAAAAfaAEAAAAAAAAAAAAAAPC/"
				],
				[
					487,
					1,
					"insert",
					{
						"characters": "Data"
					},
					"BAAAAOdvAQAAAAAA6G8BAAAAAAAAAAAA6G8BAAAAAADpbwEAAAAAAAAAAADpbwEAAAAAAOpvAQAAAAAAAAAAAOpvAQAAAAAA628BAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA528BAAAAAADnbwEAAAAAAAAAAAAAAPC/"
				],
				[
					497,
					1,
					"paste",
					null,
					"AgAAABtwAQAAAAAAI3ABAAAAAAAAAAAAI3ABAAAAAAAjcAEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAG3ABAAAAAAAfcAEAAAAAAAAAAAAAAPC/"
				],
				[
					501,
					1,
					"paste",
					null,
					"AgAAADVwAQAAAAAAPXABAAAAAAAAAAAAPXABAAAAAAA9cAEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANXABAAAAAAA5cAEAAAAAAAAAAAAAAPC/"
				],
				[
					505,
					1,
					"paste",
					null,
					"AgAAAPNxAQAAAAAA+3EBAAAAAAAAAAAA+3EBAAAAAAD7cQEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA83EBAAAAAAD3cQEAAAAAAAAAAAAAAPC/"
				],
				[
					509,
					1,
					"paste",
					null,
					"AgAAAGJyAQAAAAAAanIBAAAAAAAAAAAAanIBAAAAAABqcgEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYnIBAAAAAABmcgEAAAAAAAAAAAAAAPC/"
				],
				[
					513,
					1,
					"paste",
					null,
					"AgAAAJxyAQAAAAAApHIBAAAAAAAAAAAApHIBAAAAAACkcgEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoHIBAAAAAACccgEAAAAAAAAAAAAAAPC/"
				],
				[
					517,
					1,
					"paste",
					null,
					"AgAAAPByAQAAAAAA+HIBAAAAAAAAAAAA+HIBAAAAAAD4cgEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8HIBAAAAAAD0cgEAAAAAAAAAAAAAAPC/"
				],
				[
					521,
					1,
					"paste",
					null,
					"AgAAACpzAQAAAAAAMnMBAAAAAAAAAAAAMnMBAAAAAAAycwEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKnMBAAAAAAAucwEAAAAAAAAAAAAAAPC/"
				],
				[
					525,
					1,
					"paste",
					null,
					"AgAAACZ2AQAAAAAALnYBAAAAAAAAAAAALnYBAAAAAAAudgEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJnYBAAAAAAAqdgEAAAAAAAAAAAAAAPC/"
				],
				[
					529,
					1,
					"paste",
					null,
					"AgAAAOp1AQAAAAAA8nUBAAAAAAAAAAAA8nUBAAAAAADydQEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6nUBAAAAAADudQEAAAAAAAAAAAAAAPC/"
				],
				[
					533,
					1,
					"paste",
					null,
					"AgAAAIl1AQAAAAAAkXUBAAAAAAAAAAAAkXUBAAAAAACRdQEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiXUBAAAAAACNdQEAAAAAAAAAAAAAAPC/"
				],
				[
					537,
					1,
					"paste",
					null,
					"AgAAAF92AQAAAAAAZ3YBAAAAAAAAAAAAZ3YBAAAAAABndgEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAX3YBAAAAAABjdgEAAAAAAAAAAAAAAPC/"
				],
				[
					541,
					1,
					"paste",
					null,
					"AgAAAKN2AQAAAAAAq3YBAAAAAAAAAAAAq3YBAAAAAACrdgEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAo3YBAAAAAACndgEAAAAAAAAAAAAAAPC/"
				],
				[
					545,
					1,
					"paste",
					null,
					"AgAAAEF3AQAAAAAASXcBAAAAAAAAAAAASXcBAAAAAABJdwEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQXcBAAAAAABFdwEAAAAAAAAAAAAAAPC/"
				],
				[
					549,
					1,
					"paste",
					null,
					"AgAAAP52AQAAAAAABncBAAAAAAAAAAAABncBAAAAAAAGdwEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/nYBAAAAAAACdwEAAAAAAAAAAAAAAPC/"
				],
				[
					553,
					1,
					"paste",
					null,
					"AgAAANB2AQAAAAAA2HYBAAAAAAAAAAAA2HYBAAAAAADYdgEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0HYBAAAAAADUdgEAAAAAAAAAAAAAAPC/"
				],
				[
					557,
					1,
					"paste",
					null,
					"AgAAAHd3AQAAAAAAf3cBAAAAAAAAAAAAf3cBAAAAAAB/dwEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAd3cBAAAAAAB7dwEAAAAAAAAAAAAAAPC/"
				],
				[
					561,
					1,
					"paste",
					null,
					"AgAAAKl3AQAAAAAAsXcBAAAAAAAAAAAAsXcBAAAAAACxdwEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqXcBAAAAAACtdwEAAAAAAAAAAAAAAPC/"
				],
				[
					564,
					1,
					"insert",
					{
						"characters": "Data"
					},
					"BAAAAP2EAQAAAAAA/oQBAAAAAAAAAAAA/oQBAAAAAAD/hAEAAAAAAAAAAAD/hAEAAAAAAACFAQAAAAAAAAAAAACFAQAAAAAAAYUBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/YQBAAAAAAD9hAEAAAAAAAAAAAAAAPC/"
				],
				[
					577,
					1,
					"paste",
					null,
					"AgAAAD+FAQAAAAAAR4UBAAAAAAAAAAAAR4UBAAAAAABHhQEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAP4UBAAAAAABDhQEAAAAAAAAAAAAAAPC/"
				],
				[
					581,
					1,
					"paste",
					null,
					"AgAAAI2FAQAAAAAAlYUBAAAAAAAAAAAAlYUBAAAAAACVhQEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjYUBAAAAAACRhQEAAAAAAAAAAAAAAPC/"
				],
				[
					585,
					1,
					"paste",
					null,
					"AgAAANWFAQAAAAAA3YUBAAAAAAAAAAAA3YUBAAAAAADdhQEAAAAAAAQAAABibGFz",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1YUBAAAAAADZhQEAAAAAAAAAAAAAAPC/"
				],
				[
					608,
					3,
					"left_delete",
					null,
					"AwAAAFu0AQAAAAAAW7QBAAAAAACSAAAAYXV0byBwU2NyYXRjaEJ1ZmZlciA9IEJ1ZmZlcjo6Y3JlYXRlKG1wRGV2aWNlLCBzY3JhdGNoX2J1ZmZlcl9zaXplICogNSwgQnVmZmVyOjpCaW5kRmxhZ3M6OkFjY2VsZXJhdGlvblN0cnVjdHVyZVNjcmF0Y2gsIEJ1ZmZlcjo6Q3B1QWNjZXNzOjpOb25lKTtatAEAAAAAAFq0AQAAAAAAAQAAAApZtAEAAAAAAFm0AQAAAAAAAQAAAAo",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAW7QBAAAAAADttAEAAAAAAAAAAAAAAPC/"
				],
				[
					611,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMG3AQAAAAAAwrcBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwbcBAAAAAADBtwEAAAAAAAAAAAAAAPC/"
				],
				[
					612,
					1,
					"reindent",
					null,
					"AQAAAMK3AQAAAAAAzrcBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwrcBAAAAAADCtwEAAAAAAAAAAAAAAPC/"
				],
				[
					613,
					1,
					"paste",
					null,
					"AQAAAM63AQAAAAAAYLgBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzrcBAAAAAADOtwEAAAAAAAAAAAAAAPC/"
				],
				[
					619,
					2,
					"right_delete",
					null,
					"AgAAAJa5AQAAAAAAlrkBAAAAAAABAAAAL5a5AQAAAAAAlrkBAAAAAAABAAAALw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlrkBAAAAAACWuQEAAAAAAAAAAAAAAPC/"
				],
				[
					630,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALbGAQAAAAAAt8YBAAAAAAAAAAAAt8YBAAAAAAC7xgEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtsYBAAAAAAC2xgEAAAAAAAAAAAAAAPC/"
				],
				[
					631,
					1,
					"paste",
					null,
					"AQAAALvGAQAAAAAA1MYBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAu8YBAAAAAAC7xgEAAAAAAAAAAAAAAPC/"
				],
				[
					638,
					1,
					"paste",
					null,
					"AgAAAMXGAQAAAAAA1MYBAAAAAAAAAAAA1MYBAAAAAADUxgEAAAAAAAwAAABDT01QQUNUX0JMQVM",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxcYBAAAAAADRxgEAAAAAAAAAAAAAAPC/"
				],
				[
					639,
					1,
					"insert",
					{
						"characters": "q"
					},
					"AQAAANTGAQAAAAAA1cYBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1MYBAAAAAADUxgEAAAAAAAAAAAAAAPC/"
				],
				[
					644,
					1,
					"left_delete",
					null,
					"AQAAANTGAQAAAAAA1MYBAAAAAAABAAAAcQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1cYBAAAAAADVxgEAAAAAAAAAAAAAAPC/"
				],
				[
					652,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAP6WAQAAAAAA/5YBAAAAAAAAAAAA/5YBAAAAAAAHlwEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/pYBAAAAAAD+lgEAAAAAAAAAAAAAAPC/"
				],
				[
					654,
					1,
					"insert",
					{
						"characters": "ass"
					},
					"BAAAAP6WAQAAAAAA/5YBAAAAAAAAAAAAAJcBAAAAAAAAlwEAAAAAAAgAAAAgICAgICAgIP+WAQAAAAAAAJcBAAAAAAAAAAAAAJcBAAAAAAABlwEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/pYBAAAAAAD+lgEAAAAAAAAAAAAAAFJA"
				],
				[
					655,
					1,
					"insert_completion",
					{
						"completion": "assert",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "assert"
					},
					"AgAAAP6WAQAAAAAA/pYBAAAAAAADAAAAYXNz/pYBAAAAAAAElwEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAZcBAAAAAAABlwEAAAAAAAAAAAAAAPC/"
				],
				[
					656,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAASXAQAAAAAABpcBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABJcBAAAAAAAElwEAAAAAAAAAAAAAAPC/"
				],
				[
					657,
					1,
					"insert",
					{
						"characters": "pB"
					},
					"AgAAAAWXAQAAAAAABpcBAAAAAAAAAAAABpcBAAAAAAAHlwEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABZcBAAAAAAAFlwEAAAAAAAAAAAAAAPC/"
				],
				[
					658,
					1,
					"insert_completion",
					{
						"completion": "pBlas",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "pBlas"
					},
					"AgAAAAWXAQAAAAAABZcBAAAAAAACAAAAcEIFlwEAAAAAAAqXAQAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAB5cBAAAAAAAHlwEAAAAAAAAAAAAAAPC/"
				],
				[
					662,
					1,
					"left_delete",
					null,
					"AQAAAP6WAQAAAAAA/pYBAAAAAAAXAAAAYXNzZXJ0KHBCbGFzKQoKICAgICAgICA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/pYBAAAAAAAVlwEAAAAAAAAAAAAAAFJA"
				],
				[
					664,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAA2XAQAAAAAADpcBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADZcBAAAAAAANlwEAAAAAAAAAAAAAAFJA"
				],
				[
					665,
					1,
					"left_delete",
					null,
					"AQAAAA2XAQAAAAAADZcBAAAAAAABAAAACg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADpcBAAAAAAAOlwEAAAAAAAAAAAAAAPC/"
				],
				[
					669,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAESXAQAAAAAARZcBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARJcBAAAAAABElwEAAAAAAAAAAAAAAPC/"
				],
				[
					670,
					1,
					"reindent",
					null,
					"AQAAAEWXAQAAAAAATZcBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARZcBAAAAAABFlwEAAAAAAAAAAAAAAPC/"
				],
				[
					671,
					1,
					"insert",
					{
						"characters": "assert"
					},
					"BgAAAE2XAQAAAAAATpcBAAAAAAAAAAAATpcBAAAAAABPlwEAAAAAAAAAAABPlwEAAAAAAFCXAQAAAAAAAAAAAFCXAQAAAAAAUZcBAAAAAAAAAAAAUZcBAAAAAABSlwEAAAAAAAAAAABSlwEAAAAAAFOXAQAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATZcBAAAAAABNlwEAAAAAAAAAAAAAAPC/"
				],
				[
					672,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFOXAQAAAAAAVZcBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAU5cBAAAAAABTlwEAAAAAAAAAAAAAAPC/"
				],
				[
					673,
					1,
					"insert",
					{
						"characters": "pB"
					},
					"AgAAAFSXAQAAAAAAVZcBAAAAAAAAAAAAVZcBAAAAAABWlwEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVJcBAAAAAABUlwEAAAAAAAAAAAAAAPC/"
				],
				[
					674,
					1,
					"insert_completion",
					{
						"completion": "pBlas",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "pBlas"
					},
					"AgAAAFSXAQAAAAAAVJcBAAAAAAACAAAAcEJUlwEAAAAAAFmXAQAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVpcBAAAAAABWlwEAAAAAAAAAAAAAAPC/"
				],
				[
					675,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAFmXAQAAAAAAWpcBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWZcBAAAAAABZlwEAAAAAAAAAAAAAAPC/"
				],
				[
					676,
					1,
					"left_delete",
					null,
					"AQAAAFmXAQAAAAAAWZcBAAAAAAABAAAAMA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWpcBAAAAAABalwEAAAAAAAAAAAAAAPC/"
				],
				[
					677,
					1,
					"insert",
					{
						"characters": "->"
					},
					"AgAAAFmXAQAAAAAAWpcBAAAAAAAAAAAAWpcBAAAAAABblwEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWZcBAAAAAABZlwEAAAAAAAAAAAAAAPC/"
				],
				[
					678,
					1,
					"paste",
					null,
					"AQAAAFuXAQAAAAAAZpcBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAW5cBAAAAAABblwEAAAAAAAAAAAAAAPC/"
				],
				[
					679,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGaXAQAAAAAAaJcBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZpcBAAAAAABmlwEAAAAAAAAAAAAAAPC/"
				],
				[
					681,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAAGiXAQAAAAAAaZcBAAAAAAAAAAAAaZcBAAAAAABqlwEAAAAAAAAAAABqlwEAAAAAAGuXAQAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaJcBAAAAAABolwEAAAAAAAAAAAAAAPC/"
				],
				[
					682,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGuXAQAAAAAAbJcBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAa5cBAAAAAABrlwEAAAAAAAAAAAAAAPC/"
				],
				[
					683,
					3,
					"left_delete",
					null,
					"AwAAAGuXAQAAAAAAa5cBAAAAAAABAAAAIGqXAQAAAAAAapcBAAAAAAABAAAAPWmXAQAAAAAAaZcBAAAAAAABAAAAPQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbJcBAAAAAABslwEAAAAAAAAAAAAAAPC/"
				],
				[
					684,
					1,
					"insert",
					{
						"characters": "!="
					},
					"AgAAAGmXAQAAAAAAapcBAAAAAAAAAAAAapcBAAAAAABrlwEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaZcBAAAAAABplwEAAAAAAAAAAAAAAPC/"
				],
				[
					685,
					1,
					"insert",
					{
						"characters": " VK"
					},
					"AwAAAGuXAQAAAAAAbJcBAAAAAAAAAAAAbJcBAAAAAABtlwEAAAAAAAAAAABtlwEAAAAAAG6XAQAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAa5cBAAAAAABrlwEAAAAAAAAAAAAAAPC/"
				],
				[
					687,
					1,
					"insert_completion",
					{
						"completion": "VK_NULL_HANDLE",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "VK_NULL_HANDLE"
					},
					"AgAAAGyXAQAAAAAAbJcBAAAAAAACAAAAVktslwEAAAAAAHqXAQAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbpcBAAAAAABulwEAAAAAAAAAAAAAAPC/"
				],
				[
					689,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAHuXAQAAAAAAfJcBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAe5cBAAAAAAB7lwEAAAAAAAAAAAAAAPC/"
				],
				[
					690,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHyXAQAAAAAAfZcBAAAAAAAAAAAAfZcBAAAAAACFlwEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfJcBAAAAAAB8lwEAAAAAAAAAAAAAAPC/"
				],
				[
					691,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAIWXAQAAAAAAhpcBAAAAAAAAAAAAhpcBAAAAAACOlwEAAAAAAAAAAAB9lwEAAAAAAH2XAQAAAAAACAAAACAgICAgICAg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhZcBAAAAAACFlwEAAAAAAAAAAAAAAPC/"
				],
				[
					693,
					1,
					"reindent",
					null,
					"AQAAAH2XAQAAAAAAhZcBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfZcBAAAAAAB9lwEAAAAAAAAAAAAAAFJA"
				],
				[
					694,
					1,
					"insert",
					{
						"characters": "aa"
					},
					"AwAAAIWXAQAAAAAAhpcBAAAAAAAAAAAAh5cBAAAAAACHlwEAAAAAAAgAAAAgICAgICAgIIaXAQAAAAAAh5cBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhZcBAAAAAACFlwEAAAAAAAAAAAAAAPC/"
				],
				[
					695,
					2,
					"left_delete",
					null,
					"AgAAAIaXAQAAAAAAhpcBAAAAAAABAAAAYYWXAQAAAAAAhZcBAAAAAAABAAAAYQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAh5cBAAAAAACHlwEAAAAAAAAAAAAAAPC/"
				],
				[
					696,
					1,
					"insert",
					{
						"characters": "ss"
					},
					"AgAAAIWXAQAAAAAAhpcBAAAAAAAAAAAAhpcBAAAAAACHlwEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhZcBAAAAAACFlwEAAAAAAAAAAAAAAPC/"
				],
				[
					697,
					2,
					"left_delete",
					null,
					"AgAAAIaXAQAAAAAAhpcBAAAAAAABAAAAc4WXAQAAAAAAhZcBAAAAAAABAAAAcw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAh5cBAAAAAACHlwEAAAAAAAAAAAAAAPC/"
				],
				[
					698,
					1,
					"insert",
					{
						"characters": "ass"
					},
					"AwAAAIWXAQAAAAAAhpcBAAAAAAAAAAAAhpcBAAAAAACHlwEAAAAAAAAAAACHlwEAAAAAAIiXAQAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhZcBAAAAAACFlwEAAAAAAAAAAAAAAPC/"
				],
				[
					699,
					1,
					"insert_completion",
					{
						"completion": "assert",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "assert"
					},
					"AgAAAIWXAQAAAAAAhZcBAAAAAAADAAAAYXNzhZcBAAAAAACLlwEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiJcBAAAAAACIlwEAAAAAAAAAAAAAAPC/"
				],
				[
					700,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIuXAQAAAAAAjZcBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAi5cBAAAAAACLlwEAAAAAAAAAAAAAAPC/"
				],
				[
					701,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAAIyXAQAAAAAAjZcBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjJcBAAAAAACMlwEAAAAAAAAAAAAAAPC/"
				],
				[
					702,
					1,
					"insert_completion",
					{
						"completion": "pBlas",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "pBlas"
					},
					"AgAAAIyXAQAAAAAAjJcBAAAAAAABAAAAcIyXAQAAAAAAkZcBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjZcBAAAAAACNlwEAAAAAAAAAAAAAAPC/"
				],
				[
					703,
					1,
					"insert",
					{
						"characters": "->"
					},
					"AgAAAJGXAQAAAAAAkpcBAAAAAAAAAAAAkpcBAAAAAACTlwEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkZcBAAAAAACRlwEAAAAAAAAAAAAAAPC/"
				],
				[
					704,
					1,
					"paste",
					null,
					"AQAAAJOXAQAAAAAAn5cBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAk5cBAAAAAACTlwEAAAAAAAAAAAAAAPC/"
				],
				[
					705,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJ+XAQAAAAAAoZcBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAn5cBAAAAAACflwEAAAAAAAAAAAAAAPC/"
				],
				[
					707,
					1,
					"insert",
					{
						"characters": " !=-"
					},
					"BAAAAKGXAQAAAAAAopcBAAAAAAAAAAAAopcBAAAAAACjlwEAAAAAAAAAAACjlwEAAAAAAKSXAQAAAAAAAAAAAKSXAQAAAAAApZcBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoZcBAAAAAAChlwEAAAAAAAAAAAAAAPC/"
				],
				[
					708,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKWXAQAAAAAAppcBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApZcBAAAAAACllwEAAAAAAAAAAAAAAPC/"
				],
				[
					709,
					2,
					"left_delete",
					null,
					"AgAAAKWXAQAAAAAApZcBAAAAAAABAAAAIKSXAQAAAAAApJcBAAAAAAABAAAALQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAppcBAAAAAACmlwEAAAAAAAAAAAAAAPC/"
				],
				[
					710,
					1,
					"insert",
					{
						"characters": " -"
					},
					"AgAAAKSXAQAAAAAApZcBAAAAAAAAAAAApZcBAAAAAACmlwEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApJcBAAAAAACklwEAAAAAAAAAAAAAAPC/"
				],
				[
					711,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKaXAQAAAAAAp5cBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAppcBAAAAAACmlwEAAAAAAAAAAAAAAPC/"
				],
				[
					712,
					2,
					"left_delete",
					null,
					"AgAAAKaXAQAAAAAAppcBAAAAAAABAAAAIKWXAQAAAAAApZcBAAAAAAABAAAALQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAp5cBAAAAAACnlwEAAAAAAAAAAAAAAPC/"
				],
				[
					713,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAKWXAQAAAAAAppcBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApZcBAAAAAACllwEAAAAAAAAAAAAAAPC/"
				],
				[
					715,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKeXAQAAAAAAqJcBAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAp5cBAAAAAACnlwEAAAAAAAAAAAAAAPC/"
				],
				[
					719,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAPK5AQAAAAAA87kBAAAAAAAAAAAA87kBAAAAAAD0uQEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8rkBAAAAAADyuQEAAAAAAAAAAAAAAFJA"
				],
				[
					720,
					1,
					"insert",
					{
						"characters": "dwd"
					},
					"AwAAAPS5AQAAAAAA9bkBAAAAAAAAAAAA9bkBAAAAAAD2uQEAAAAAAAAAAAD2uQEAAAAAAPe5AQAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9LkBAAAAAAD0uQEAAAAAAAAAAAAAAPC/"
				],
				[
					721,
					3,
					"left_delete",
					null,
					"AwAAAPa5AQAAAAAA9rkBAAAAAAABAAAAZPW5AQAAAAAA9bkBAAAAAAABAAAAd/S5AQAAAAAA9LkBAAAAAAABAAAAZA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA97kBAAAAAAD3uQEAAAAAAAAAAAAAAPC/"
				],
				[
					727,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAE+6AQAAAAAAULoBAAAAAAAAAAAAULoBAAAAAABRugEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAT7oBAAAAAABPugEAAAAAAAAAAAAAAPC/"
				],
				[
					730,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAFa5AQAAAAAAV7kBAAAAAAAAAAAAV7kBAAAAAABYuQEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVrkBAAAAAABWuQEAAAAAAAAAAAAAAPC/"
				],
				[
					733,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAMi4AQAAAAAAybgBAAAAAAAAAAAAybgBAAAAAADKuAEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyLgBAAAAAADIuAEAAAAAAAAAAAAAAPC/"
				],
				[
					736,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAABq5AQAAAAAAG7kBAAAAAAAAAAAAG7kBAAAAAAAcuQEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGrkBAAAAAAAauQEAAAAAAAAAAAAAAPC/"
				],
				[
					739,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAEu5AQAAAAAATLkBAAAAAAAAAAAATLkBAAAAAABNuQEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAS7kBAAAAAABLuQEAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"right_delete",
					null,
					"AQAAAMi4AQAAAAAAyLgBAAAAAAABAAAALw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIuAEAAAAAAMi4AQAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					2,
					"right_delete",
					null,
					"AgAAAMi4AQAAAAAAyLgBAAAAAAABAAAAL8i4AQAAAAAAyLgBAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIuAEAAAAAAMi4AQAAAAAAAAAAAADAWEA"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMi4AQAAAAAAybgBAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIuAEAAAAAAMi4AQAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					2,
					"right_delete",
					null,
					"AgAAABi5AQAAAAAAGLkBAAAAAAABAAAALxi5AQAAAAAAGLkBAAAAAAABAAAALw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAYuQEAAAAAABi5AQAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					2,
					"right_delete",
					null,
					"AgAAAEe5AQAAAAAAR7kBAAAAAAABAAAAL0e5AQAAAAAAR7kBAAAAAAABAAAALw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABHuQEAAAAAAEe5AQAAAAAAAAAAAADAWEA"
				],
				[
					24,
					2,
					"right_delete",
					null,
					"AgAAAFa5AQAAAAAAVrkBAAAAAAABAAAAL1a5AQAAAAAAVrkBAAAAAAABAAAALw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABWuQEAAAAAAFa5AQAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					2,
					"right_delete",
					null,
					"AgAAAPK5AQAAAAAA8rkBAAAAAAABAAAAL/K5AQAAAAAA8rkBAAAAAAABAAAALw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADyuQEAAAAAAPK5AQAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					2,
					"right_delete",
					null,
					"AgAAAE26AQAAAAAATboBAAAAAAABAAAAL026AQAAAAAATboBAAAAAAABAAAALw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNugEAAAAAAE26AQAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "\nin"
					},
					"BAAAAEVnAQAAAAAARmcBAAAAAAAAAAAARmcBAAAAAABSZwEAAAAAAAAAAABSZwEAAAAAAFNnAQAAAAAAAAAAAFNnAQAAAAAAVGcBAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABFZwEAAAAAAEVnAQAAAAAAAAAAAAAA8L8"
				],
				[
					49,
					1,
					"insert_completion",
					{
						"completion": "info",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "info"
					},
					"AgAAAFJnAQAAAAAAUmcBAAAAAAACAAAAaW5SZwEAAAAAAFZnAQAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABUZwEAAAAAAFRnAQAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					2,
					"left_delete",
					null,
					"AgAAAFVnAQAAAAAAVWcBAAAAAAABAAAAb1RnAQAAAAAAVGcBAAAAAAABAAAAZg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABWZwEAAAAAAFZnAQAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAAFRnAQAAAAAAVWcBAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABUZwEAAAAAAFRnAQAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					1,
					"insert_completion",
					{
						"completion": "inPipe",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "inPipe"
					},
					"AgAAAFJnAQAAAAAAUmcBAAAAAAADAAAAaW5wUmcBAAAAAABYZwEAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABVZwEAAAAAAFVnAQAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					4,
					"left_delete",
					null,
					"BAAAAFdnAQAAAAAAV2cBAAAAAAABAAAAZVZnAQAAAAAAVmcBAAAAAAABAAAAcFVnAQAAAAAAVWcBAAAAAAABAAAAaVRnAQAAAAAAVGcBAAAAAAABAAAAUA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABYZwEAAAAAAFhnAQAAAAAAAAAAAAAA8L8"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "pu"
					},
					"AgAAAFRnAQAAAAAAVWcBAAAAAAAAAAAAVWcBAAAAAABWZwEAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABUZwEAAAAAAFRnAQAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					1,
					"insert_completion",
					{
						"completion": "input",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "input"
					},
					"AgAAAFJnAQAAAAAAUmcBAAAAAAAEAAAAaW5wdVJnAQAAAAAAV2cBAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABWZwEAAAAAAFZnAQAAAAAAAAAAAAAA8L8"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "s/"
					},
					"AgAAAFdnAQAAAAAAWGcBAAAAAAAAAAAAWGcBAAAAAABZZwEAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABXZwEAAAAAAFdnAQAAAAAAAAAAAAAA8L8"
				],
				[
					58,
					1,
					"left_delete",
					null,
					"AQAAAFhnAQAAAAAAWGcBAAAAAAABAAAALw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABZZwEAAAAAAFlnAQAAAAAAAAAAAAAA8L8"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": ".f"
					},
					"AgAAAFhnAQAAAAAAWWcBAAAAAAAAAAAAWWcBAAAAAABaZwEAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABYZwEAAAAAAFhnAQAAAAAAAAAAAAAA8L8"
				],
				[
					60,
					1,
					"insert_completion",
					{
						"completion": "flags",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "flags"
					},
					"AgAAAFlnAQAAAAAAWWcBAAAAAAABAAAAZllnAQAAAAAAXmcBAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABaZwEAAAAAAFpnAQAAAAAAAAAAAAAA8L8"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAF5nAQAAAAAAX2cBAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeZwEAAAAAAF5nAQAAAAAAAAAAAAAA8L8"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "!="
					},
					"AgAAAF9nAQAAAAAAYGcBAAAAAAAAAAAAYGcBAAAAAABhZwEAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABfZwEAAAAAAF9nAQAAAAAAAAAAAAAA8L8"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGFnAQAAAAAAYmcBAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABhZwEAAAAAAGFnAQAAAAAAAAAAAAAA8L8"
				],
				[
					64,
					1,
					"paste",
					null,
					"AQAAAGJnAQAAAAAAmmcBAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABiZwEAAAAAAGJnAQAAAAAAAAAAAAAA8L8"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJpnAQAAAAAAm2cBAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaZwEAAAAAAJpnAQAAAAAAAAAAAAAA8L8"
				],
				[
					73,
					1,
					"left_delete",
					null,
					"AQAAAEZnAQAAAAAARmcBAAAAAABWAAAAICAgICAgICAgICAgaW5wdXRzLmZsYWdzICE9IFZLX0JVSUxEX0FDQ0VMRVJBVElPTl9TVFJVQ1RVUkVfQUxMT1dfQ09NUEFDVElPTl9CSVRfS0hSOwo",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABGZwEAAAAAAJxnAQAAAAAAAAAAAAAA8L8"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "\nprin"
					},
					"BwAAAI9kAQAAAAAAkGQBAAAAAAAAAAAAkGQBAAAAAACYZAEAAAAAAAAAAACYZAEAAAAAAJxkAQAAAAAAAAAAAJxkAQAAAAAAnWQBAAAAAAAAAAAAnWQBAAAAAACeZAEAAAAAAAAAAACeZAEAAAAAAJ9kAQAAAAAAAAAAAJ9kAQAAAAAAoGQBAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPZAEAAAAAAI9kAQAAAAAAAAAAAAAA8L8"
				],
				[
					90,
					1,
					"insert_completion",
					{
						"completion": "printf",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "printf"
					},
					"AgAAAJxkAQAAAAAAnGQBAAAAAAAEAAAAcHJpbpxkAQAAAAAAomQBAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACgZAEAAAAAAKBkAQAAAAAAAAAAAAAA8L8"
				],
				[
					91,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKJkAQAAAAAApGQBAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACiZAEAAAAAAKJkAQAAAAAAAAAAAAAA8L8"
				],
				[
					92,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAKNkAQAAAAAApWQBAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjZAEAAAAAAKNkAQAAAAAAAAAAAAAA8L8"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": "Sc"
					},
					"AgAAAKRkAQAAAAAApWQBAAAAAAAAAAAApWQBAAAAAACmZAEAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACkZAEAAAAAAKRkAQAAAAAAAAAAAAAA8L8"
				],
				[
					94,
					1,
					"insert_completion",
					{
						"completion": "Scene",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Scene"
					},
					"AgAAAKRkAQAAAAAApGQBAAAAAAACAAAAU2OkZAEAAAAAAKlkAQAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACmZAEAAAAAAKZkAQAAAAAAAAAAAAAA8L8"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": "::pre"
					},
					"BQAAAKlkAQAAAAAAqmQBAAAAAAAAAAAAqmQBAAAAAACrZAEAAAAAAAAAAACrZAEAAAAAAKxkAQAAAAAAAAAAAKxkAQAAAAAArWQBAAAAAAAAAAAArWQBAAAAAACuZAEAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpZAEAAAAAAKlkAQAAAAAAAAAAAAAA8L8"
				],
				[
					96,
					1,
					"insert_completion",
					{
						"completion": "preparePrebuildInfo",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "preparePrebuildInfo"
					},
					"AgAAAKtkAQAAAAAAq2QBAAAAAAADAAAAcHJlq2QBAAAAAAC+ZAEAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACuZAEAAAAAAK5kAQAAAAAAAAAAAAAA8L8"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": " use"
					},
					"BAAAAL5kAQAAAAAAv2QBAAAAAAAAAAAAv2QBAAAAAADAZAEAAAAAAAAAAADAZAEAAAAAAMFkAQAAAAAAAAAAAMFkAQAAAAAAwmQBAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+ZAEAAAAAAL5kAQAAAAAAAAAAAAAA8L8"
				],
				[
					98,
					3,
					"left_delete",
					null,
					"AwAAAMFkAQAAAAAAwWQBAAAAAAABAAAAZcBkAQAAAAAAwGQBAAAAAAABAAAAc79kAQAAAAAAv2QBAAAAAAABAAAAdQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCZAEAAAAAAMJkAQAAAAAAAAAAAAAA8L8"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": "useCo"
					},
					"BQAAAL9kAQAAAAAAwGQBAAAAAAAAAAAAwGQBAAAAAADBZAEAAAAAAAAAAADBZAEAAAAAAMJkAQAAAAAAAAAAAMJkAQAAAAAAw2QBAAAAAAAAAAAAw2QBAAAAAADEZAEAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC/ZAEAAAAAAL9kAQAAAAAAAAAAAAAA8L8"
				],
				[
					100,
					1,
					"insert_completion",
					{
						"completion": "useCompaction",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "useCompaction"
					},
					"AgAAAL9kAQAAAAAAv2QBAAAAAAAFAAAAdXNlQ2+/ZAEAAAAAAMxkAQAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADEZAEAAAAAAMRkAQAAAAAAAAAAAAAA8L8"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAM5kAQAAAAAAz2QBAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADOZAEAAAAAAM5kAQAAAAAAAAAAAAAA8L8"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": " !\\n"
					},
					"BAAAAMxkAQAAAAAAzWQBAAAAAAAAAAAAzWQBAAAAAADOZAEAAAAAAAAAAADOZAEAAAAAAM9kAQAAAAAAAAAAAM9kAQAAAAAA0GQBAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADMZAEAAAAAAMxkAQAAAAAAAAAAAAAA8L8"
				],
				[
					116,
					2,
					"right_delete",
					null,
					"AgAAAN+IAQAAAAAA34gBAAAAAAABAAAAL9+IAQAAAAAA34gBAAAAAAABAAAALw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfiAEAAAAAAN+IAQAAAAAAAAAAAAAA8L8"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAN+IAQAAAAAA4IgBAAAAAAAAAAAA4IgBAAAAAADhiAEAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfiAEAAAAAAN+IAQAAAAAAAAAAAAAA8L8"
				],
				[
					126,
					1,
					"paste",
					null,
					"AgAAABF8AQAAAAAALHwBAAAAAAAAAAAALHwBAAAAAAAsfAEAAAAAAA4AAABOb25QaXhlbFNoYWRlcg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAARfAEAAAAAAB98AQAAAAAAAAAAAAAA8L8"
				],
				[
					130,
					1,
					"paste",
					null,
					"AgAAAFJ9AQAAAAAAbX0BAAAAAAAAAAAAbX0BAAAAAABtfQEAAAAAAA4AAABOb25QaXhlbFNoYWRlcg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSfQEAAAAAAGB9AQAAAAAAAAAAAAAA8L8"
				],
				[
					134,
					1,
					"paste",
					null,
					"AgAAAMt9AQAAAAAA5n0BAAAAAAAAAAAA5n0BAAAAAADmfQEAAAAAAA4AAABOb25QaXhlbFNoYWRlcg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLfQEAAAAAANl9AQAAAAAAAAAAAAAA8L8"
				],
				[
					147,
					1,
					"paste",
					null,
					"AgAAAOl6AQAAAAAA/noBAAAAAAAAAAAA/noBAAAAAAD+egEAAAAAABsAAABBY2NlbGVyYXRpb25TdHJ1Y3R1cmVTb3VyY2U",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADpegEAAAAAAAR7AQAAAAAAAAAAAAAA8L8"
				],
				[
					151,
					1,
					"paste",
					null,
					"AgAAAGt7AQAAAAAAgHsBAAAAAAAAAAAAgHsBAAAAAACAewEAAAAAABsAAABBY2NlbGVyYXRpb25TdHJ1Y3R1cmVTb3VyY2U",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrewEAAAAAAIZ7AQAAAAAAAAAAAAAA8L8"
				],
				[
					155,
					1,
					"paste",
					null,
					"AgAAAAV8AQAAAAAAGnwBAAAAAAAAAAAAGnwBAAAAAAAafAEAAAAAABsAAABBY2NlbGVyYXRpb25TdHJ1Y3R1cmVTb3VyY2U",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAFfAEAAAAAACB8AQAAAAAAAAAAAAAA8L8"
				],
				[
					159,
					1,
					"paste",
					null,
					"AgAAAEB9AQAAAAAAVX0BAAAAAAAAAAAAVX0BAAAAAABVfQEAAAAAABsAAABBY2NlbGVyYXRpb25TdHJ1Y3R1cmVTb3VyY2U",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABAfQEAAAAAAFt9AQAAAAAAAAAAAAAA8L8"
				],
				[
					163,
					1,
					"paste",
					null,
					"AgAAALN9AQAAAAAAyH0BAAAAAAAAAAAAyH0BAAAAAADIfQEAAAAAABsAAABBY2NlbGVyYXRpb25TdHJ1Y3R1cmVTb3VyY2U",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzfQEAAAAAAM59AQAAAAAAAAAAAAAA8L8"
				],
				[
					166,
					7,
					"right_delete",
					null,
					"BwAAAKI4AQAAAAAAojgBAAAAAAABAAAAZaI4AQAAAAAAojgBAAAAAAABAAAAcqI4AQAAAAAAojgBAAAAAAABAAAAYaI4AQAAAAAAojgBAAAAAAABAAAAdKI4AQAAAAAAojgBAAAAAAABAAAAaaI4AQAAAAAAojgBAAAAAAABAAAAb6I4AQAAAAAAojgBAAAAAAABAAAAbg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACiOAEAAAAAAKI4AQAAAAAAAAAAAAAA8L8"
				],
				[
					168,
					9,
					"right_delete",
					null,
					"CQAAAKg4AQAAAAAAqDgBAAAAAAABAAAAdag4AQAAAAAAqDgBAAAAAAABAAAAcqg4AQAAAAAAqDgBAAAAAAABAAAAZag4AQAAAAAAqDgBAAAAAAABAAAAU6g4AQAAAAAAqDgBAAAAAAABAAAAb6g4AQAAAAAAqDgBAAAAAAABAAAAdag4AQAAAAAAqDgBAAAAAAABAAAAcqg4AQAAAAAAqDgBAAAAAAABAAAAY6g4AQAAAAAAqDgBAAAAAAABAAAAZQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACoOAEAAAAAAKg4AQAAAAAAAAAAAAAA8L8"
				],
				[
					169,
					1,
					"insert",
					{
						"characters": "bUI"
					},
					"AwAAAKg4AQAAAAAAqTgBAAAAAAAAAAAAqTgBAAAAAACqOAEAAAAAAAAAAACqOAEAAAAAAKs4AQAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACoOAEAAAAAAKg4AQAAAAAAAAAAAAAA8L8"
				],
				[
					170,
					1,
					"insert_completion",
					{
						"completion": "AccelStructBuildInput",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "AccelStructBuildInput"
					},
					"AgAAAJ04AQAAAAAAnTgBAAAAAAAOAAAAQWNjZWxTdHJ1Y3RiVUmdOAEAAAAAALI4AQAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACrOAEAAAAAAKs4AQAAAAAAAAAAAAAA8L8"
				],
				[
					191,
					1,
					"insert",
					{
						"characters": "false;//"
					},
					"CAAAAGGEAQAAAAAAYoQBAAAAAAAAAAAAYoQBAAAAAABjhAEAAAAAAAAAAABjhAEAAAAAAGSEAQAAAAAAAAAAAGSEAQAAAAAAZYQBAAAAAAAAAAAAZYQBAAAAAABmhAEAAAAAAAAAAABmhAEAAAAAAGeEAQAAAAAAAAAAAGeEAQAAAAAAaIQBAAAAAAAAAAAAaIQBAAAAAABphAEAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABhhAEAAAAAAGGEAQAAAAAAAAAAAAAA8L8"
				],
				[
					194,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAJZkAQAAAAAAl2QBAAAAAAAAAAAAl2QBAAAAAACYZAEAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWZAEAAAAAAJZkAQAAAAAAAAAAAAAA8L8"
				],
				[
					198,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAANxkAQAAAAAA3WQBAAAAAAAAAAAA3WQBAAAAAADeZAEAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADcZAEAAAAAANxkAQAAAAAAAAAAAAAA8L8"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": "false"
					},
					"BQAAALq7AQAAAAAAu7sBAAAAAAAAAAAAu7sBAAAAAAC8uwEAAAAAAAAAAAC8uwEAAAAAAL27AQAAAAAAAAAAAL27AQAAAAAAvrsBAAAAAAAAAAAAvrsBAAAAAAC/uwEAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC6uwEAAAAAALq7AQAAAAAAAAAAAAAA8L8"
				],
				[
					204,
					1,
					"insert",
					{
						"characters": ";//"
					},
					"AwAAAL+7AQAAAAAAwLsBAAAAAAAAAAAAwLsBAAAAAADBuwEAAAAAAAAAAADBuwEAAAAAAMK7AQAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC/uwEAAAAAAL+7AQAAAAAAAAAAAAAA8L8"
				],
				[
					209,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAEW6AQAAAAAARroBAAAAAAAAAAAARroBAAAAAABHugEAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABFugEAAAAAAEW6AQAAAAAAAAAAAAAA8L8"
				],
				[
					214,
					1,
					"left_delete",
					null,
					"AQAAAL+4AQAAAAAAv7gBAAAAAAAEAAAAICogNQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC/uAEAAAAAAMO4AQAAAAAAAAAAAAAA8L8"
				],
				[
					219,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAH24AQAAAAAAfrgBAAAAAAAAAAAAfrgBAAAAAAB/uAEAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB9uAEAAAAAAH24AQAAAAAAAAAAAAAA8L8"
				],
				[
					222,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAm1AQAAAAAACrUBAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJtQEAAAAAAAm1AQAAAAAAAAAAAACAX0A"
				],
				[
					224,
					1,
					"paste",
					null,
					"AQAAAAm1AQAAAAAAl7UBAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJtQEAAAAAAAm1AQAAAAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/CopyContext.h",
			"settings":
			{
				"buffer_size": 8686,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "(Logger::Level::Info)\tInitiating BLAS build for 1 mesh groups\nScene::preparePrebuildInfo maxPrimCounts\n0 - 146863\nprebuildInfo.accelerationStructureSize is: 10377600 bytes\nprebuildInfo.buildScratchSize is: 3107584 bytes\nprebuildInfo.updateScratchSize is: 0 bytes\n(Logger::Level::Info)\tBLAS build split into 1 groups\n",
			"settings":
			{
				"buffer_size": 316,
				"line_ending": "Unix",
				"name": "(Logger::Level::Info)Initiating BLAS build for 1"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"paste",
					{
						"event":
						{
							"modifier_keys":
							{
							},
							"x": 915.214355469,
							"y": 266.172485352
						}
					},
					"AQAAAAAAAAAAAAAAPAEAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/nvpro_core/nvvk/raytraceKHR_vk.hpp",
			"settings":
			{
				"buffer_size": 11142,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/nvpro_core/nvmath/nvmath.h",
			"settings":
			{
				"buffer_size": 18289,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/nvpro_core/nvmath/nvmath_types.h",
			"settings":
			{
				"buffer_size": 23994,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/nvpro_core/nvvk/raytraceNV_vk.cpp",
			"settings":
			{
				"buffer_size": 15648,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKDevice.cpp",
			"settings":
			{
				"buffer_size": 55255,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1195,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAPIJAAAAAAAA9gkAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADyCQAAAAAAAPIJAAAAAAAAAAAAAAAA8L8"
				],
				[
					1198,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAI4JAAAAAAAAkgkAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACOCQAAAAAAAI4JAAAAAAAAAAAAAAAA8L8"
				],
				[
					1201,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAADkJAAAAAAAAPQkAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5CQAAAAAAADkJAAAAAAAAAAAAAAAA8L8"
				],
				[
					1204,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAANoIAAAAAAAA3ggAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADaCAAAAAAAANoIAAAAAAAAAAAAAAAA8L8"
				],
				[
					1210,
					1,
					"paste",
					null,
					"AQAAAMgNAAAAAAAA0Q0AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIDQAAAAAAAMgNAAAAAAAAAAAAAAAA8L8"
				],
				[
					1213,
					1,
					"paste",
					null,
					"AQAAABEOAAAAAAAAGg4AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAARDgAAAAAAABEOAAAAAAAAAAAAAAAA8L8"
				],
				[
					1216,
					1,
					"insert",
					{
						"characters": "\t\t\t\t\t\t"
					},
					"BgAAAMgNAAAAAAAAyQ0AAAAAAAAAAAAAyQ0AAAAAAADNDQAAAAAAAAAAAADNDQAAAAAAANENAAAAAAAAAAAAANENAAAAAAAA1Q0AAAAAAAAAAAAA1Q0AAAAAAADZDQAAAAAAAAAAAADZDQAAAAAAAN0NAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIDQAAAAAAAMgNAAAAAAAAAAAAAAAA8L8"
				],
				[
					1221,
					1,
					"insert",
					{
						"characters": "\t\t\t\t"
					},
					"BAAAACYOAAAAAAAAKg4AAAAAAAAAAAAAKg4AAAAAAAAuDgAAAAAAAAAAAAAuDgAAAAAAADIOAAAAAAAAAAAAADIOAAAAAAAANg4AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAmDgAAAAAAACYOAAAAAAAAAAAAAAAA8L8"
				],
				[
					1229,
					1,
					"left_delete",
					null,
					"AQAAAAAOAAAAAAAAAA4AAAAAAAABAAAAOw",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABDgAAAAAAAAEOAAAAAAAAAAAAAAAA8L8"
				],
				[
					1230,
					1,
					"paste",
					null,
					"AQAAAAAOAAAAAAAACg4AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAADgAAAAAAAAAOAAAAAAAAAAAAAAAA8L8"
				],
				[
					1233,
					1,
					"right_delete",
					null,
					"AQAAAGcOAAAAAAAAZw4AAAAAAAABAAAAOw",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABnDgAAAAAAAGcOAAAAAAAAAAAAAAAA8L8"
				],
				[
					1234,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGcOAAAAAAAAaA4AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABnDgAAAAAAAGcOAAAAAAAAAAAAAAAA8L8"
				],
				[
					1235,
					1,
					"paste",
					null,
					"AQAAAGgOAAAAAAAAcg4AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoDgAAAAAAAGgOAAAAAAAAAAAAAAAA8L8"
				],
				[
					1238,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAAOAAAAAAAAAQ4AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAADgAAAAAAAAAOAAAAAAAAAAAAAAAA8L8"
				],
				[
					1244,
					1,
					"paste",
					null,
					"AQAAAMKrAAAAAAAAjawAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCqwAAAAAAAMKrAAAAAAAAAAAAAAAA8L8"
				],
				[
					1247,
					1,
					"right_delete",
					null,
					"AQAAAP+rAAAAAAAA/6sAAAAAAAABAAAAdg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/qwAAAAAAAP+rAAAAAAAAAAAAAAAA8L8"
				],
				[
					1249,
					1,
					"right_delete",
					null,
					"AQAAAGGsAAAAAAAAYawAAAAAAAABAAAAdg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABhrAAAAAAAAGGsAAAAAAAAAAAAAAAogUA"
				],
				[
					1254,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAMCrAAAAAAAAwasAAAAAAAAAAAAAwasAAAAAAADCqwAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADAqwAAAAAAAMCrAAAAAAAAAAAAAAAA8L8"
				],
				[
					1256,
					1,
					"paste",
					null,
					"AQAAAMGrAAAAAAAAnawAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBqwAAAAAAAMGrAAAAAAAAAAAAAAAAAAA"
				],
				[
					1258,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAMCrAAAAAAAAwasAAAAAAAAAAAAAwasAAAAAAADCqwAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADAqwAAAAAAAMCrAAAAAAAAAAAAAAAIgEA"
				],
				[
					1260,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAKCsAAAAAAAAoawAAAAAAAAAAAAAoawAAAAAAACirAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACgrAAAAAAAAKCsAAAAAAAAAAAAAAAAAAA"
				],
				[
					1262,
					1,
					"paste",
					null,
					"AQAAAKGsAAAAAAAAfa0AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChrAAAAAAAAKGsAAAAAAAAAAAAAAAAAAA"
				],
				[
					1270,
					1,
					"paste",
					null,
					"AgAAAPyrAAAAAAAAGqwAAAAAAAAAAAAAGqwAAAAAAAAarAAAAAAAACUAAABQRk5fdmtDbWRDb3B5QWNjZWxlcmF0aW9uU3RydWN0dXJlS0hS",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD8qwAAAAAAACGsAAAAAAAAAAAAAAAA8L8"
				],
				[
					1278,
					1,
					"paste",
					null,
					"AgAAANOsAAAAAAAA9qwAAAAAAAAAAAAA9qwAAAAAAAD2rAAAAAAAACUAAABQRk5fdmtDbWRDb3B5QWNjZWxlcmF0aW9uU3RydWN0dXJlS0hS",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADTrAAAAAAAAPisAAAAAAAAAAAAAAAA8L8"
				],
				[
					1286,
					1,
					"paste",
					null,
					"AgAAAMerAAAAAAAA4asAAAAAAAAAAAAA4asAAAAAAADhqwAAAAAAACEAAAB2a0NtZENvcHlBY2NlbGVyYXRpb25TdHJ1Y3R1cmVLSFI",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADHqwAAAAAAAOirAAAAAAAAAAAAAAAA8L8"
				],
				[
					1290,
					1,
					"paste",
					null,
					"AgAAAGOsAAAAAAAAfawAAAAAAAAAAAAAfawAAAAAAAB9rAAAAAAAACEAAAB2a0NtZENvcHlBY2NlbGVyYXRpb25TdHJ1Y3R1cmVLSFI",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjrAAAAAAAAISsAAAAAAAAAAAAAAAA8L8"
				],
				[
					1294,
					1,
					"paste",
					null,
					"AgAAADKsAAAAAAAATKwAAAAAAAAAAAAATKwAAAAAAABMrAAAAAAAACEAAAB2a0NtZENvcHlBY2NlbGVyYXRpb25TdHJ1Y3R1cmVLSFI",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAyrAAAAAAAAFOsAAAAAAAAAAAAAAAA8L8"
				],
				[
					1302,
					1,
					"paste",
					null,
					"AgAAAImsAAAAAAAAqKwAAAAAAAAAAAAAqKwAAAAAAACorAAAAAAAACEAAAB2a0NtZENvcHlBY2NlbGVyYXRpb25TdHJ1Y3R1cmVLSFI",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJrAAAAAAAAKqsAAAAAAAAAAAAAAAA8L8"
				],
				[
					1306,
					1,
					"paste",
					null,
					"AgAAAC+tAAAAAAAATq0AAAAAAAAAAAAATq0AAAAAAABOrQAAAAAAACEAAAB2a0NtZENvcHlBY2NlbGVyYXRpb25TdHJ1Y3R1cmVLSFI",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAvrQAAAAAAAFCtAAAAAAAAAAAAAAAA8L8"
				],
				[
					1310,
					1,
					"paste",
					null,
					"AgAAAP6sAAAAAAAAHa0AAAAAAAAAAAAAHa0AAAAAAAAdrQAAAAAAACEAAAB2a0NtZENvcHlBY2NlbGVyYXRpb25TdHJ1Y3R1cmVLSFI",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD+rAAAAAAAAB+tAAAAAAAAAAAAAAAA8L8"
				],
				[
					1313,
					2,
					"left_delete",
					null,
					"AgAAAFutAAAAAAAAW60AAAAAAADKAAAAClBGTl92a0RlZmVycmVkT3BlcmF0aW9uSm9pbktIUiAgICAgICAgICAgICAgICAgICAgICBGYWxjb3I6OnZrRGVmZXJyZWRPcGVyYXRpb25Kb2luS0hSID0gbnVsbHB0cjsKUEZOX3ZrR2V0RGVmZXJyZWRPcGVyYXRpb25SZXN1bHRLSFIgICAgICAgICAgICAgICAgIEZhbGNvcjo6dmtHZXREZWZlcnJlZE9wZXJhdGlvblJlc3VsdEtIUiA9IG51bGxwdHI7ClqtAAAAAAAAWq0AAAAAAAABAAAACg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAlrgAAAAAAAFutAAAAAAAAAAAAAAAA8L8"
				],
				[
					1315,
					2,
					"left_delete",
					null,
					"AgAAAMGrAAAAAAAAwasAAAAAAAABAAAACsCrAAAAAAAAwKsAAAAAAAABAAAACg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCqwAAAAAAAMKrAAAAAAAAAAAAAAAAAAA"
				],
				[
					1318,
					1,
					"right_delete",
					null,
					"AQAAAOYNAAAAAAAA5g0AAAAAAAABAAAAdg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmDQAAAAAAAOYNAAAAAAAAAAAAAAAA8L8"
				],
				[
					1320,
					1,
					"right_delete",
					null,
					"AQAAAEgOAAAAAAAASA4AAAAAAAABAAAAdg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABIDgAAAAAAAEgOAAAAAAAAAAAAAAAogUA"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAPyLAAAAAAAA/YsAAAAAAAAAAAAA/YsAAAAAAAD+iwAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/IsAAAAAAAD8iwAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"right_delete",
					null,
					"AQAAAPyLAAAAAAAA/IsAAAAAAAACAAAALy8",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/IsAAAAAAAD+iwAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAPyLAAAAAAAA/YsAAAAAAAAAAAAA/YsAAAAAAAD+iwAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/IsAAAAAAAD8iwAAAAAAAAAAAAAAAFJA"
				],
				[
					40,
					1,
					"paste",
					null,
					"AgAAAPTLAAAAAAAA+csAAAAAAAAAAAAA+csAAAAAAAD5ywAAAAAAAAEAAAAx",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9MsAAAAAAAD1ywAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAO/KAAAAAAAA8MoAAAAAAAAAAAAA8MoAAAAAAADxygAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO/KAAAAAAAA78oAAAAAAAAAAAAAAADwvw"
				],
				[
					20,
					1,
					"reindent",
					null,
					"AQAAAPDKAAAAAAAA9MoAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPDKAAAAAAAA8MoAAAAAAAAAAAAAAAAAAA"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "VkR"
					},
					"AwAAAPTKAAAAAAAA9coAAAAAAAAAAAAA9coAAAAAAAD2ygAAAAAAAAAAAAD2ygAAAAAAAPfKAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPTKAAAAAAAA9MoAAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					1,
					"insert_completion",
					{
						"completion": "VkResult",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "VkResult"
					},
					"AgAAAPTKAAAAAAAA9MoAAAAAAAADAAAAVmtS9MoAAAAAAAD8ygAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPfKAAAAAAAA98oAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " re"
					},
					"AwAAAPzKAAAAAAAA/coAAAAAAAAAAAAA/coAAAAAAAD+ygAAAAAAAAAAAAD+ygAAAAAAAP/KAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPzKAAAAAAAA/MoAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"insert_completion",
					{
						"completion": "result",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "result"
					},
					"AgAAAP3KAAAAAAAA/coAAAAAAAACAAAAcmX9ygAAAAAAAAPLAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP/KAAAAAAAA/8oAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAAPLAAAAAAAABMsAAAAAAAAAAAAABMsAAAAAAAAFywAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAPLAAAAAAAAA8sAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAXLAAAAAAAABssAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAXLAAAAAAAABcsAAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					1,
					"paste",
					null,
					"AQAAAAbLAAAAAAAAMcsAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAbLAAAAAAAABssAAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADHLAAAAAAAAMssAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADHLAAAAAAAAMcsAAAAAAAAAAAAAAADwvw"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "su"
					},
					"AgAAAP3KAAAAAAAA/soAAAAAAAAAAAAA/soAAAAAAAD/ygAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP3KAAAAAAAA/coAAAAAAAAAAAAAAADwvw"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "bmit_"
					},
					"BQAAAP/KAAAAAAAAAMsAAAAAAAAAAAAAAMsAAAAAAAABywAAAAAAAAAAAAABywAAAAAAAALLAAAAAAAAAAAAAALLAAAAAAAAA8sAAAAAAAAAAAAAA8sAAAAAAAAEywAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP/KAAAAAAAA/8oAAAAAAAAAAAAAAADwvw"
				],
				[
					55,
					1,
					"paste",
					null,
					"AgAAAEPLAAAAAAAAUMsAAAAAAAAAAAAAUMsAAAAAAABQywAAAAAAADYAAABWS19GQUlMRUQodmtRdWV1ZVN1Ym1pdChxdWV1ZSwgMSwgJnN1Ym1pdEluZm8sIGZlbmNlKSk",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEPLAAAAAAAAecsAAAAAAAAAAAAAAADwvw"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": " !="
					},
					"AwAAAFDLAAAAAAAAUcsAAAAAAAAAAAAAUcsAAAAAAABSywAAAAAAAAAAAABSywAAAAAAAFPLAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFDLAAAAAAAAUMsAAAAAAAAAAAAAAADwvw"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": " VK"
					},
					"AwAAAFPLAAAAAAAAVMsAAAAAAAAAAAAAVMsAAAAAAABVywAAAAAAAAAAAABVywAAAAAAAFbLAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFPLAAAAAAAAU8sAAAAAAAAAAAAAAADwvw"
				],
				[
					59,
					1,
					"insert_completion",
					{
						"completion": "VK_SUCCESS",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "VK_SUCCESS"
					},
					"AgAAAFTLAAAAAAAAVMsAAAAAAAACAAAAVktUywAAAAAAAF7LAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFbLAAAAAAAAVssAAAAAAAAAAAAAAADwvw"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEDNAAAAAAAAQc0AAAAAAAAAAAAAQc0AAAAAAABFzQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEDNAAAAAAAAQM0AAAAAAAAAAAAAAADwvw"
				],
				[
					109,
					1,
					"paste",
					null,
					"AQAAAEDNAAAAAAAAis0AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEDNAAAAAAAAQM0AAAAAAAAAAAAAAABCQA"
				],
				[
					116,
					1,
					"paste",
					null,
					"AgAAAFHNAAAAAAAAWc0AAAAAAAAAAAAAWc0AAAAAAABZzQAAAAAAADcAAAAKICAgIFZrRGV2aWNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV2aWNl",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIjNAAAAAAAAUc0AAAAAAAAAAAAAAADwvw"
				],
				[
					122,
					3,
					"left_delete",
					null,
					"AwAAAEDNAAAAAAAAQM0AAAAAAAAbAAAAdmtEZXZpY2VXYWl0SWRsZSh2a0RldmljZSk7PM0AAAAAAAA8zQAAAAAAAAQAAAAgICAgO80AAAAAAAA7zQAAAAAAAAEAAAAK",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEDNAAAAAAAAW80AAAAAAAAAAAAAAADwvw"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAN/LAAAAAAAA4MsAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN/LAAAAAAAA38sAAAAAAAAAAAAAAFB5QA"
				],
				[
					125,
					1,
					"reindent",
					null,
					"AQAAAODLAAAAAAAA5MsAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAODLAAAAAAAA4MsAAAAAAAAAAAAAAADwvw"
				],
				[
					126,
					1,
					"paste",
					null,
					"AQAAAOTLAAAAAAAA/8sAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOTLAAAAAAAA5MsAAAAAAAAAAAAAAADwvw"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": "/*"
					},
					"AgAAACnJAAAAAAAAKskAAAAAAAAAAAAAKskAAAAAAAAryQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACnJAAAAAAAAKckAAAAAAAAAAAAAAADwvw"
				],
				[
					138,
					2,
					"left_delete",
					null,
					"AgAAACrJAAAAAAAAKskAAAAAAAABAAAAKinJAAAAAAAAKckAAAAAAAABAAAALw",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACvJAAAAAAAAK8kAAAAAAAAAAAAAAADwvw"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAE7JAAAAAAAAT8kAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE7JAAAAAAAATskAAAAAAAAAAAAAAAAAAA"
				],
				[
					142,
					1,
					"insert",
					{
						"characters": "/*"
					},
					"AgAAAE7JAAAAAAAAT8kAAAAAAAAAAAAAT8kAAAAAAABQyQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE7JAAAAAAAATskAAAAAAAAAAAAAAAAAAA"
				],
				[
					147,
					1,
					"insert",
					{
						"characters": "*/"
					},
					"AgAAAEfKAAAAAAAASMoAAAAAAAAAAAAASMoAAAAAAABJygAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEfKAAAAAAAAR8oAAAAAAAAAAAAAAIBGQA"
				],
				[
					149,
					1,
					"insert",
					{
						"characters": "/*"
					},
					"AgAAAD/LAAAAAAAAQMsAAAAAAAAAAAAAQMsAAAAAAABBywAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD/LAAAAAAAAP8sAAAAAAAAAAAAAAAAyQA"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": "*/"
					},
					"AgAAAJrNAAAAAAAAm80AAAAAAAAAAAAAm80AAAAAAACczQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJrNAAAAAAAAms0AAAAAAAAAAAAAAAAyQA"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAJzNAAAAAAAAnc0AAAAAAAAAAAAAnc0AAAAAAAChzQAAAAAAAAAAAAChzQAAAAAAAKLNAAAAAAAAAAAAAKLNAAAAAAAAps0AAAAAAAAAAAAAnc0AAAAAAACdzQAAAAAAAAQAAAAgICAg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJzNAAAAAAAAnM0AAAAAAAAAAAAAAADwvw"
				],
				[
					156,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJ3NAAAAAAAAns0AAAAAAAAAAAAAn80AAAAAAACfzQAAAAAAAAQAAAAgICAg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ3NAAAAAAAAnc0AAAAAAAAAAAAAAADwvw"
				],
				[
					157,
					1,
					"reindent",
					null,
					"AQAAAJ7NAAAAAAAAos0AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ7NAAAAAAAAns0AAAAAAAAAAAAAAADwvw"
				],
				[
					158,
					1,
					"paste",
					null,
					"AQAAAKLNAAAAAAAAXc4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKLNAAAAAAAAos0AAAAAAAAAAAAAAADwvw"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAM7NAAAAAAAA0M0AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM7NAAAAAAAAzs0AAAAAAAAAAAAAAADwvw"
				],
				[
					164,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAATOAAAAAAAABs4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAATOAAAAAAAABM4AAAAAAAAAAAAAAADwvw"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAABjOAAAAAAAAGs4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABjOAAAAAAAAGM4AAAAAAAAAAAAAAADwvw"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAB7OAAAAAAAAIM4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB7OAAAAAAAAHs4AAAAAAAAAAAAAAADwvw"
				],
				[
					178,
					1,
					"paste",
					null,
					"AgAAADXOAAAAAAAAPc4AAAAAAAAAAAAAPc4AAAAAAAA9zgAAAAAAAAgAAABtX2RldmljZQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADXOAAAAAAAAPc4AAAAAAAAAAAAAAADwvw"
				],
				[
					188,
					1,
					"paste",
					null,
					"AgAAANPNAAAAAAAA2c0AAAAAAAAAAAAA2c0AAAAAAADZzQAAAAAAAC0AAABudnZrOjpjaGVja1Jlc3VsdChyZXN1bHQsIF9fRklMRV9fLCBfX0xJTkVfXyk",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANPNAAAAAAAAAM4AAAAAAAAAAAAAAADwvw"
				],
				[
					189,
					1,
					"insert",
					{
						"characters": " !="
					},
					"AwAAANnNAAAAAAAA2s0AAAAAAAAAAAAA2s0AAAAAAADbzQAAAAAAAAAAAADbzQAAAAAAANzNAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANnNAAAAAAAA2c0AAAAAAAAAAAAAAADwvw"
				],
				[
					190,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANzNAAAAAAAA3c0AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANzNAAAAAAAA3M0AAAAAAAAAAAAAAADwvw"
				],
				[
					195,
					1,
					"insert_completion",
					{
						"completion": "VK_SUCCESS",
						"format": "text",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "VK_SUCCESS"
					},
					"AQAAAN3NAAAAAAAA580AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN3NAAAAAAAA3c0AAAAAAAAAAAAAAADwvw"
				],
				[
					197,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAALOAAAAAAAAA84AAAAAAAAAAAAAA84AAAAAAAAHzgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAALOAAAAAAAAAs4AAAAAAAAAAAAAAGBuQA"
				],
				[
					205,
					1,
					"paste",
					null,
					"AgAAACvOAAAAAAAAL84AAAAAAAAAAAAAL84AAAAAAAAvzgAAAAAAAA0AAABtX2NvbW1hbmRQb29s",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACvOAAAAAAAAOM4AAAAAAAAAAAAAAADwvw"
				],
				[
					208,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AwAAADHOAAAAAAAAMs4AAAAAAAAAAAAAMs4AAAAAAAAyzgAAAAAAAA8AAAAodWludDMyX3QpY291bnQDzgAAAAAAAAPOAAAAAAAABAAAACAgICA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADHOAAAAAAAAQM4AAAAAAAAAAAAAAADwvw"
				],
				[
					216,
					1,
					"paste",
					null,
					"AgAAADDOAAAAAAAAN84AAAAAAAAAAAAAN84AAAAAAAA3zgAAAAAAAAQAAABjbWRz",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADDOAAAAAAAANM4AAAAAAAAAAAAAAADwvw"
				],
				[
					222,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AgAAAPPNAAAAAAAA980AAAAAAAAAAAAA980AAAAAAAD3zQAAAAAAAAkAAABleGl0KC0xKTs",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPPNAAAAAAAA/M0AAAAAAAAAAAAAAADwvw"
				],
				[
					223,
					1,
					"paste",
					null,
					"AQAAAPfNAAAAAAAAHc4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPfNAAAAAAAA980AAAAAAAAAAAAAAADwvw"
				],
				[
					235,
					1,
					"paste",
					null,
					"AgAAAAbOAAAAAAAAHM4AAAAAAAAAAAAAHM4AAAAAAAAczgAAAAAAABAAAABzdWJtaXR0aW5nIHF1ZXVl",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAbOAAAAAAAAFs4AAAAAAAAAAAAAAADwvw"
				],
				[
					241,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAFfOAAAAAAAAWM4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFfOAAAAAAAAV84AAAAAAAAAAAAAAADwvw"
				],
				[
					290,
					1,
					"paste",
					null,
					"AQAAAAzJAAAAAAAAGskAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAzJAAAAAAAADMkAAAAAAAAAAAAAAADwvw"
				],
				[
					293,
					1,
					"left_delete",
					null,
					"AQAAADXJAAAAAAAANckAAAAAAAABAAAAOw",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADbJAAAAAAAANskAAAAAAAAAAAAAAADwvw"
				],
				[
					294,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAADXJAAAAAAAANskAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADXJAAAAAAAANckAAAAAAAAAAAAAAADwvw"
				],
				[
					295,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAADbJAAAAAAAAN8kAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADbJAAAAAAAANskAAAAAAAAAAAAAAADwvw"
				],
				[
					296,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADfJAAAAAAAAOMkAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADfJAAAAAAAAN8kAAAAAAAAAAAAAAADwvw"
				],
				[
					297,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAADjJAAAAAAAAOskAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADjJAAAAAAAAOMkAAAAAAAAAAAAAAADwvw"
				],
				[
					298,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAADnJAAAAAAAAOskAAAAAAAAAAAAAOskAAAAAAAA+yQAAAAAAAAAAAAA+yQAAAAAAAD/JAAAAAAAAAAAAAD/JAAAAAAAAQ8kAAAAAAAAAAAAAOskAAAAAAAA6yQAAAAAAAAQAAAAgICAgOskAAAAAAABCyQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADnJAAAAAAAAOckAAAAAAAAAAAAAAADwvw"
				],
				[
					304,
					1,
					"paste",
					null,
					"AQAAAELJAAAAAAAAfskAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAELJAAAAAAAAQskAAAAAAAAAAAAAAADwvw"
				],
				[
					308,
					1,
					"insert",
					{
						"characters": "end"
					},
					"BAAAAFHJAAAAAAAAUskAAAAAAAAAAAAAUskAAAAAAABSyQAAAAAAAAUAAABiZWdpblLJAAAAAAAAU8kAAAAAAAAAAAAAU8kAAAAAAABUyQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFHJAAAAAAAAVskAAAAAAAAAAAAAAADwvw"
				],
				[
					334,
					1,
					"insert",
					{
						"characters": "Index"
					},
					"BQAAAFJaAAAAAAAAU1oAAAAAAAAAAAAAU1oAAAAAAABUWgAAAAAAAAAAAABUWgAAAAAAAFVaAAAAAAAAAAAAAFVaAAAAAAAAVloAAAAAAAAAAAAAVloAAAAAAABXWgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFJaAAAAAAAAUloAAAAAAAAAAAAAAADwvw"
				],
				[
					342,
					1,
					"paste",
					null,
					"AgAAAHxcAAAAAAAAjlwAAAAAAAAAAAAAjlwAAAAAAACOXAAAAAAAAA0AAAB0cmFuc2ZlclF1ZXVl",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHxcAAAAAAAAiVwAAAAAAAAAAAAAAADwvw"
				],
				[
					346,
					1,
					"paste",
					null,
					"AgAAAK5cAAAAAAAAwFwAAAAAAAAAAAAAwFwAAAAAAADAXAAAAAAAAA0AAAB0cmFuc2ZlclF1ZXVl",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK5cAAAAAAAAu1wAAAAAAAAAAAAAAADwvw"
				],
				[
					365,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAAvOAAAAAAAADM4AAAAAAAAAAAAADM4AAAAAAAANzgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAvOAAAAAAAAC84AAAAAAAAAAAAAAADwvw"
				],
				[
					368,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAADvOAAAAAAAAPM4AAAAAAAAAAAAAPM4AAAAAAAA9zgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADvOAAAAAAAAO84AAAAAAAAAAAAAAADwvw"
				],
				[
					371,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAFnOAAAAAAAAWs4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFnOAAAAAAAAWc4AAAAAAAAAAAAAAADwvw"
				],
				[
					372,
					1,
					"right_delete",
					null,
					"AQAAAFrOAAAAAAAAWs4AAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFrOAAAAAAAAWs4AAAAAAAAAAAAAAADwvw"
				],
				[
					374,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAFnOAAAAAAAAWs4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFnOAAAAAAAAWc4AAAAAAAAAAAAAAADwvw"
				],
				[
					377,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAGDOAAAAAAAAYc4AAAAAAAAAAAAAYc4AAAAAAABizgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGDOAAAAAAAAYM4AAAAAAAAAAAAAAADwvw"
				],
				[
					380,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAJfOAAAAAAAAmM4AAAAAAAAAAAAAmM4AAAAAAACZzgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJfOAAAAAAAAl84AAAAAAAAAAAAAAADwvw"
				],
				[
					384,
					1,
					"right_delete",
					null,
					"AQAAAAPOAAAAAAAAA84AAAAAAAADAAAAKi8K",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAPOAAAAAAAABs4AAAAAAAAAAAAAAAAAAA"
				],
				[
					387,
					1,
					"right_delete",
					null,
					"AQAAAKjLAAAAAAAAqMsAAAAAAAADAAAALyoK",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKjLAAAAAAAAq8sAAAAAAAAAAAAAAAAAAA"
				],
				[
					388,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAKjLAAAAAAAAqcsAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKjLAAAAAAAAqMsAAAAAAAAAAAAAAADwvw"
				],
				[
					392,
					1,
					"right_delete",
					null,
					"AQAAALDKAAAAAAAAsMoAAAAAAAADAAAAKi8K",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALDKAAAAAAAAs8oAAAAAAAAAAAAAAAAAAA"
				],
				[
					393,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAALDKAAAAAAAAscoAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALDKAAAAAAAAsMoAAAAAAAAAAAAAAADwvw"
				],
				[
					397,
					1,
					"right_delete",
					null,
					"AQAAALfJAAAAAAAAt8kAAAAAAAADAAAALyoK",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALfJAAAAAAAAuskAAAAAAAAAAAAAAAAAAA"
				],
				[
					398,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAALfJAAAAAAAAuMkAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALfJAAAAAAAAt8kAAAAAAAAAAAAAAADwvw"
				],
				[
					401,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAJjOAAAAAAAAmc4AAAAAAAAAAAAAmc4AAAAAAACazgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJjOAAAAAAAAmM4AAAAAAAAAAAAAAADwvw"
				],
				[
					404,
					1,
					"right_delete",
					null,
					"AQAAAJDOAAAAAAAAkM4AAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJDOAAAAAAAAkM4AAAAAAAAAAAAAAADwvw"
				],
				[
					406,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAI7OAAAAAAAAj84AAAAAAAAAAAAAj84AAAAAAACQzgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI7OAAAAAAAAjs4AAAAAAAAAAAAAAADwvw"
				],
				[
					408,
					1,
					"right_delete",
					null,
					"AQAAAI/OAAAAAAAAj84AAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI/OAAAAAAAAj84AAAAAAAAAAAAAAADwvw"
				],
				[
					411,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFfOAAAAAAAAWM4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFfOAAAAAAAAV84AAAAAAAAAAAAAAADwvw"
				],
				[
					414,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFDOAAAAAAAAUc4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFDOAAAAAAAAUM4AAAAAAAAAAAAAAAA7QA"
				],
				[
					427,
					2,
					"right_delete",
					null,
					"AgAAAPQTAAAAAAAA9BMAAAAAAAABAAAAL/QTAAAAAAAA9BMAAAAAAAABAAAALw",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPQTAAAAAAAA9BMAAAAAAAAAAAAAAADwvw"
				],
				[
					441,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJXNAAAAAAAAls0AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJXNAAAAAAAAlc0AAAAAAAAAAAAAAIBGQA"
				],
				[
					442,
					1,
					"reindent",
					null,
					"AQAAAJbNAAAAAAAAms0AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJbNAAAAAAAAls0AAAAAAAAAAAAAAADwvw"
				],
				[
					443,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAJrNAAAAAAAAm80AAAAAAAAAAAAAm80AAAAAAACczQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJrNAAAAAAAAms0AAAAAAAAAAAAAAADwvw"
				],
				[
					444,
					1,
					"insert",
					{
						"characters": " r"
					},
					"AgAAAJzNAAAAAAAAnc0AAAAAAAAAAAAAnc0AAAAAAACezQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJzNAAAAAAAAnM0AAAAAAAAAAAAAAADwvw"
				],
				[
					445,
					2,
					"left_delete",
					null,
					"AgAAAJ3NAAAAAAAAnc0AAAAAAAABAAAAcpzNAAAAAAAAnM0AAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ7NAAAAAAAAns0AAAAAAAAAAAAAAADwvw"
				],
				[
					446,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJzNAAAAAAAAns0AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJzNAAAAAAAAnM0AAAAAAAAAAAAAAADwvw"
				],
				[
					447,
					1,
					"insert",
					{
						"characters": "re"
					},
					"AgAAAJ3NAAAAAAAAns0AAAAAAAAAAAAAns0AAAAAAACfzQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ3NAAAAAAAAnc0AAAAAAAAAAAAAAADwvw"
				],
				[
					448,
					1,
					"insert_completion",
					{
						"completion": "result",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "result"
					},
					"AgAAAJ3NAAAAAAAAnc0AAAAAAAACAAAAcmWdzQAAAAAAAKPNAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ/NAAAAAAAAn80AAAAAAAAAAAAAAADwvw"
				],
				[
					449,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAAKPNAAAAAAAApM0AAAAAAAAAAAAApM0AAAAAAAClzQAAAAAAAAAAAAClzQAAAAAAAKbNAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKPNAAAAAAAAo80AAAAAAAAAAAAAAADwvw"
				],
				[
					450,
					1,
					"insert",
					{
						"characters": " VK_"
					},
					"BAAAAKbNAAAAAAAAp80AAAAAAAAAAAAAp80AAAAAAACozQAAAAAAAAAAAACozQAAAAAAAKnNAAAAAAAAAAAAAKnNAAAAAAAAqs0AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKbNAAAAAAAAps0AAAAAAAAAAAAAAADwvw"
				],
				[
					451,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AQAAAKrNAAAAAAAAq80AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKrNAAAAAAAAqs0AAAAAAAAAAAAAAADwvw"
				],
				[
					452,
					1,
					"insert_completion",
					{
						"completion": "VK_SUCCESS",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "VK_SUCCESS"
					},
					"AgAAAKfNAAAAAAAAp80AAAAAAAAEAAAAVktfU6fNAAAAAAAAsc0AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKvNAAAAAAAAq80AAAAAAAAAAAAAAADwvw"
				],
				[
					454,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALLNAAAAAAAAs80AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALLNAAAAAAAAss0AAAAAAAAAAAAAAADwvw"
				],
				[
					455,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAALPNAAAAAAAAtc0AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALPNAAAAAAAAs80AAAAAAAAAAAAAAADwvw"
				],
				[
					456,
					1,
					"right_delete",
					null,
					"AQAAALTNAAAAAAAAtM0AAAAAAAABAAAAfQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALTNAAAAAAAAtM0AAAAAAAAAAAAAAADwvw"
				],
				[
					458,
					1,
					"reindent",
					null,
					"AQAAABrOAAAAAAAAHs4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABrOAAAAAAAAGs4AAAAAAAAAAAAAAOBwQA"
				],
				[
					459,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AwAAAB7OAAAAAAAAH84AAAAAAAAAAAAAGs4AAAAAAAAazgAAAAAAAAQAAAAgICAgGs4AAAAAAAAazgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB7OAAAAAAAAHs4AAAAAAAAAAAAAAADwvw"
				],
				[
					461,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAABrOAAAAAAAAHs4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABrOAAAAAAAAGs4AAAAAAAAAAAAAAADwvw"
				],
				[
					463,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAOfNAAAAAAAA680AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOfNAAAAAAAA580AAAAAAAAAAAAAAABCQA"
				],
				[
					466,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAALnNAAAAAAAAvc0AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALnNAAAAAAAAuc0AAAAAAAAAAAAAAADwvw"
				],
				[
					470,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABjNAAAAAAAAGc0AAAAAAAAAAAAAGc0AAAAAAAAdzQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABjNAAAAAAAAGM0AAAAAAAAAAAAAAADwvw"
				],
				[
					472,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAABjNAAAAAAAAHM0AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABjNAAAAAAAAGM0AAAAAAAAAAAAAAABCQA"
				],
				[
					473,
					1,
					"insert",
					{
						"characters": "ret"
					},
					"AwAAABzNAAAAAAAAHc0AAAAAAAAAAAAAHc0AAAAAAAAezQAAAAAAAAAAAAAezQAAAAAAAB/NAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABzNAAAAAAAAHM0AAAAAAAAAAAAAAADwvw"
				],
				[
					474,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAABzNAAAAAAAAHM0AAAAAAAADAAAAcmV0HM0AAAAAAAAizQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB/NAAAAAAAAH80AAAAAAAAAAAAAAADwvw"
				],
				[
					475,
					1,
					"insert",
					{
						"characters": " f"
					},
					"AgAAACLNAAAAAAAAI80AAAAAAAAAAAAAI80AAAAAAAAkzQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACLNAAAAAAAAIs0AAAAAAAAAAAAAAADwvw"
				],
				[
					476,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "false"
					},
					"AgAAACPNAAAAAAAAI80AAAAAAAABAAAAZiPNAAAAAAAAKM0AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACTNAAAAAAAAJM0AAAAAAAAAAAAAAADwvw"
				],
				[
					477,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAACjNAAAAAAAAKc0AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACjNAAAAAAAAKM0AAAAAAAAAAAAAAADwvw"
				],
				[
					480,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKnNAAAAAAAAqs0AAAAAAAAAAAAAqs0AAAAAAACuzQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKnNAAAAAAAAqc0AAAAAAAAAAAAAAADwvw"
				],
				[
					482,
					1,
					"insert",
					{
						"characters": "\tret"
					},
					"BAAAAKnNAAAAAAAArc0AAAAAAAAAAAAArc0AAAAAAACuzQAAAAAAAAAAAACuzQAAAAAAAK/NAAAAAAAAAAAAAK/NAAAAAAAAsM0AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKnNAAAAAAAAqc0AAAAAAAAAAAAAAABCQA"
				],
				[
					483,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAAK3NAAAAAAAArc0AAAAAAAADAAAAcmV0rc0AAAAAAACzzQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALDNAAAAAAAAsM0AAAAAAAAAAAAAAADwvw"
				],
				[
					484,
					1,
					"insert",
					{
						"characters": " df"
					},
					"AwAAALPNAAAAAAAAtM0AAAAAAAAAAAAAtM0AAAAAAAC1zQAAAAAAAAAAAAC1zQAAAAAAALbNAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALPNAAAAAAAAs80AAAAAAAAAAAAAAADwvw"
				],
				[
					485,
					2,
					"left_delete",
					null,
					"AgAAALXNAAAAAAAAtc0AAAAAAAABAAAAZrTNAAAAAAAAtM0AAAAAAAABAAAAZA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALbNAAAAAAAAts0AAAAAAAAAAAAAAADwvw"
				],
				[
					486,
					1,
					"insert",
					{
						"characters": "fa"
					},
					"AgAAALTNAAAAAAAAtc0AAAAAAAAAAAAAtc0AAAAAAAC2zQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALTNAAAAAAAAtM0AAAAAAAAAAAAAAADwvw"
				],
				[
					487,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "false"
					},
					"AgAAALTNAAAAAAAAtM0AAAAAAAACAAAAZmG0zQAAAAAAALnNAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALbNAAAAAAAAts0AAAAAAAAAAAAAAADwvw"
				],
				[
					488,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALnNAAAAAAAAus0AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALnNAAAAAAAAuc0AAAAAAAAAAAAAAADwvw"
				],
				[
					492,
					2,
					"left_delete",
					null,
					"AgAAAHQOAAAAAAAAdA4AAAAAAAABAAAAL3MOAAAAAAAAcw4AAAAAAAABAAAALw",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHUOAAAAAAAAdQ4AAAAAAAAAAAAAAADwvw"
				],
				[
					495,
					1,
					"left_delete",
					null,
					"AQAAAMwOAAAAAAAAzA4AAAAAAAABAAAAMA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM0OAAAAAAAAzQ4AAAAAAAAAAAAAAADwvw"
				],
				[
					496,
					1,
					"insert",
					{
						"characters": "nu"
					},
					"AgAAAMwOAAAAAAAAzQ4AAAAAAAAAAAAAzQ4AAAAAAADODgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMwOAAAAAAAAzA4AAAAAAAAAAAAAAADwvw"
				],
				[
					497,
					1,
					"insert_completion",
					{
						"completion": "nullptr",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "nullptr"
					},
					"AgAAAMwOAAAAAAAAzA4AAAAAAAACAAAAbnXMDgAAAAAAANMOAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM4OAAAAAAAAzg4AAAAAAAAAAAAAAADwvw"
				],
				[
					500,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAKMOAAAAAAAApw4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKMOAAAAAAAAow4AAAAAAAAAAAAAAADwvw"
				],
				[
					510,
					36,
					"right_delete",
					null,
					"JAAAAHOtAAAAAAAAc60AAAAAAAABAAAAL3OtAAAAAAAAc60AAAAAAAABAAAAL3OtAAAAAAAAc60AAAAAAAABAAAAUHOtAAAAAAAAc60AAAAAAAABAAAARnOtAAAAAAAAc60AAAAAAAABAAAATnOtAAAAAAAAc60AAAAAAAABAAAAX3OtAAAAAAAAc60AAAAAAAABAAAAdnOtAAAAAAAAc60AAAAAAAABAAAAa3OtAAAAAAAAc60AAAAAAAABAAAAQ3OtAAAAAAAAc60AAAAAAAABAAAAcnOtAAAAAAAAc60AAAAAAAABAAAAZXOtAAAAAAAAc60AAAAAAAABAAAAYXOtAAAAAAAAc60AAAAAAAABAAAAdHOtAAAAAAAAc60AAAAAAAABAAAAZXOtAAAAAAAAc60AAAAAAAABAAAAUnOtAAAAAAAAc60AAAAAAAABAAAAYXOtAAAAAAAAc60AAAAAAAABAAAAeXOtAAAAAAAAc60AAAAAAAABAAAAVHOtAAAAAAAAc60AAAAAAAABAAAAcnOtAAAAAAAAc60AAAAAAAABAAAAYXOtAAAAAAAAc60AAAAAAAABAAAAY3OtAAAAAAAAc60AAAAAAAABAAAAaXOtAAAAAAAAc60AAAAAAAABAAAAbnOtAAAAAAAAc60AAAAAAAABAAAAZ3OtAAAAAAAAc60AAAAAAAABAAAAUHOtAAAAAAAAc60AAAAAAAABAAAAaXOtAAAAAAAAc60AAAAAAAABAAAAcHOtAAAAAAAAc60AAAAAAAABAAAAZXOtAAAAAAAAc60AAAAAAAABAAAAbHOtAAAAAAAAc60AAAAAAAABAAAAaXOtAAAAAAAAc60AAAAAAAABAAAAbnOtAAAAAAAAc60AAAAAAAABAAAAZXOtAAAAAAAAc60AAAAAAAABAAAAc3OtAAAAAAAAc60AAAAAAAABAAAAS3OtAAAAAAAAc60AAAAAAAABAAAASHOtAAAAAAAAc60AAAAAAAABAAAAUg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHOtAAAAAAAAc60AAAAAAAAAAAAAAADwvw"
				],
				[
					511,
					9,
					"right_delete",
					null,
					"CQAAAHOtAAAAAAAAc60AAAAAAAABAAAAIHOtAAAAAAAAc60AAAAAAAABAAAARnOtAAAAAAAAc60AAAAAAAABAAAAYXOtAAAAAAAAc60AAAAAAAABAAAAbHOtAAAAAAAAc60AAAAAAAABAAAAY3OtAAAAAAAAc60AAAAAAAABAAAAb3OtAAAAAAAAc60AAAAAAAABAAAAcnOtAAAAAAAAc60AAAAAAAABAAAAOnOtAAAAAAAAc60AAAAAAAABAAAAOg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHOtAAAAAAAAc60AAAAAAAAAAAAAAADwvw"
				],
				[
					514,
					8,
					"left_delete",
					null,
					"CAAAAJ2tAAAAAAAAna0AAAAAAAABAAAAIJytAAAAAAAAnK0AAAAAAAABAAAAIJutAAAAAAAAm60AAAAAAAABAAAAIJqtAAAAAAAAmq0AAAAAAAABAAAAIJmtAAAAAAAAma0AAAAAAAABAAAAL5itAAAAAAAAmK0AAAAAAAABAAAAL5StAAAAAAAAlK0AAAAAAAAEAAAAICAgIJOtAAAAAAAAk60AAAAAAAABAAAACg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ6tAAAAAAAAnq0AAAAAAAAAAAAAAADwvw"
				],
				[
					515,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJOtAAAAAAAAlK0AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJOtAAAAAAAAk60AAAAAAAAAAAAAAADwvw"
				],
				[
					521,
					1,
					"reindent",
					null,
					"AQAAAAmuAAAAAAAADa4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAmuAAAAAAAACa4AAAAAAAAAAAAAAADwvw"
				],
				[
					522,
					1,
					"paste",
					null,
					"AQAAAA2uAAAAAAAAQK4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA2uAAAAAAAADa4AAAAAAAAAAAAAAADwvw"
				],
				[
					530,
					1,
					"paste",
					null,
					"AgAAABSuAAAAAAAAMq4AAAAAAAAAAAAAMq4AAAAAAAAyrgAAAAAAAB8AAAB2a0dldERlZmVycmVkT3BlcmF0aW9uUmVzdWx0S0hS",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABSuAAAAAAAAM64AAAAAAAAAAAAAAADwvw"
				],
				[
					535,
					1,
					"left_delete",
					null,
					"AQAAAG2tAAAAAAAAba0AAAAAAAABAAAACg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG6tAAAAAAAAbq0AAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIFGAAAAAAAAgkYAAAAAAAAAAAAAgkYAAAAAAACKRgAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBRgAAAAAAAIFGAAAAAAAAAAAAAAAAUkA"
				],
				[
					8,
					1,
					"paste",
					null,
					"AQAAAIFGAAAAAAAA3kYAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBRgAAAAAAAIFGAAAAAAAAAAAAAAAAUkA"
				],
				[
					12,
					1,
					"paste",
					null,
					"AgAAAJdGAAAAAAAAu0YAAAAAAAAAAAAAu0YAAAAAAAC7RgAAAAAAACMAAABWS19MQVlFUl9MVU5BUkdfc3RhbmRhcmRfdmFsaWRhdGlvbg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACXRgAAAAAAALpGAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAN9GAAAAAAAA4EYAAAAAAAAAAAAA4EYAAAAAAADoRgAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfRgAAAAAAAN9GAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"paste",
					null,
					"AQAAAOhGAAAAAAAARkcAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADoRgAAAAAAAOhGAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "co"
					},
					"AwAAAA5HAAAAAAAAD0cAAAAAAAAAAAAAD0cAAAAAAAAPRwAAAAAAAAgAAABwYXJhbWV0ZQ9HAAAAAAAAEEcAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAORwAAAAAAABZHAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAABFHAAAAAAAAEkcAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAARRwAAAAAAABFHAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"left_delete",
					null,
					"AQAAABFHAAAAAAAAEUcAAAAAAAABAAAAcg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASRwAAAAAAABJHAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAABFHAAAAAAAAEkcAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAARRwAAAAAAABFHAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "\nena"
					},
					"BQAAAHhGAAAAAAAAeUYAAAAAAAAAAAAAeUYAAAAAAACBRgAAAAAAAAAAAACBRgAAAAAAAIJGAAAAAAAAAAAAAIJGAAAAAAAAg0YAAAAAAAAAAAAAg0YAAAAAAACERgAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4RgAAAAAAAHhGAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert_completion",
					{
						"completion": "enableLayerIfPresent",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "enableLayerIfPresent"
					},
					"AgAAAIFGAAAAAAAAgUYAAAAAAAADAAAAZW5hgUYAAAAAAACVRgAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACERgAAAAAAAIRGAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJVGAAAAAAAAl0YAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACVRgAAAAAAAJVGAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAJZGAAAAAAAAmEYAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWRgAAAAAAAJZGAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"paste",
					null,
					"AQAAAJdGAAAAAAAAuEYAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACXRgAAAAAAAJdGAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALlGAAAAAAAAukYAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5RgAAAAAAALlGAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALpGAAAAAAAAu0YAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC6RgAAAAAAALpGAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					1,
					"paste",
					null,
					"AgAAALtGAAAAAAAA3EYAAAAAAAAAAAAA3EYAAAAAAADcRgAAAAAAAAEAAAAp",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7RgAAAAAAALxGAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "\nen"
					},
					"BAAAANxGAAAAAAAA3UYAAAAAAAAAAAAA3UYAAAAAAADlRgAAAAAAAAAAAADlRgAAAAAAAOZGAAAAAAAAAAAAAOZGAAAAAAAA50YAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADcRgAAAAAAANxGAAAAAAAAAAAAAAAA8L8"
				],
				[
					49,
					1,
					"insert_completion",
					{
						"completion": "enableLayerIfPresent",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "enableLayerIfPresent"
					},
					"AgAAAOVGAAAAAAAA5UYAAAAAAAACAAAAZW7lRgAAAAAAAPlGAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnRgAAAAAAAOdGAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPlGAAAAAAAA+0YAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5RgAAAAAAAPlGAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAPpGAAAAAAAA/EYAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6RgAAAAAAAPpGAAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					1,
					"paste",
					null,
					"AQAAAPtGAAAAAAAAEkcAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD7RgAAAAAAAPtGAAAAAAAAAAAAAAAA8L8"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAABNHAAAAAAAAFEcAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATRwAAAAAAABNHAAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": " la"
					},
					"AwAAABRHAAAAAAAAFUcAAAAAAAAAAAAAFUcAAAAAAAAWRwAAAAAAAAAAAAAWRwAAAAAAABdHAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAURwAAAAAAABRHAAAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					1,
					"insert_completion",
					{
						"completion": "layerProperties",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "layerProperties"
					},
					"AgAAABVHAAAAAAAAFUcAAAAAAAACAAAAbGEVRwAAAAAAACRHAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAXRwAAAAAAABdHAAAAAAAAAAAAAAAA8L8"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACRHAAAAAAAAJUcAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkRwAAAAAAACRHAAAAAAAAAAAAAAAA8L8"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": " re"
					},
					"AwAAACVHAAAAAAAAJkcAAAAAAAAAAAAAJkcAAAAAAAAnRwAAAAAAAAAAAAAnRwAAAAAAAChHAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAlRwAAAAAAACVHAAAAAAAAAAAAAAAA8L8"
				],
				[
					59,
					1,
					"insert_completion",
					{
						"completion": "requiredLayers",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "requiredLayers"
					},
					"AgAAACZHAAAAAAAAJkcAAAAAAAACAAAAcmUmRwAAAAAAADRHAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAoRwAAAAAAAChHAAAAAAAAAAAAAAAA8L8"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADVHAAAAAAAANkcAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA1RwAAAAAAADVHAAAAAAAAAAAAAAAA8L8"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAPwTAAAAAAAA/RMAAAAAAAAAAAAA/RMAAAAAAAD+EwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD8EwAAAAAAAPwTAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAINGAAAAAAAAhEYAAAAAAAAAAAAAhEYAAAAAAACFRgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAg0YAAAAAAACDRgAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAOlGAAAAAAAA6kYAAAAAAAAAAAAA6kYAAAAAAADrRgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6UYAAAAAAADpRgAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAEVHAAAAAAAARkcAAAAAAAAAAAAARkcAAAAAAABHRwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARUcAAAAAAABFRwAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAK5HAAAAAAAAr0cAAAAAAAAAAAAAr0cAAAAAAACwRwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArkcAAAAAAACuRwAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAABJIAAAAAAAAE0gAAAAAAAAAAAAAE0gAAAAAAAAUSAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEkgAAAAAAAASSAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAACVGAAAAAAAAJkYAAAAAAAAAAAAAJkYAAAAAAAAnRgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJUYAAAAAAAAlRgAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "q"
					},
					"AQAAACdGAAAAAAAAKEYAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJ0YAAAAAAAAnRgAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"right_delete",
					null,
					"AQAAACdGAAAAAAAAJ0YAAAAAAAABAAAAcQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJ0YAAAAAAAAnRgAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					2,
					"right_delete",
					null,
					"AgAAABRIAAAAAAAAFEgAAAAAAAABAAAALxRIAAAAAAAAFEgAAAAAAAABAAAALw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFEgAAAAAAAAUSAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					2,
					"right_delete",
					null,
					"AgAAALBHAAAAAAAAsEcAAAAAAAABAAAAL7BHAAAAAAAAsEcAAAAAAAABAAAALw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsEcAAAAAAACwRwAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					2,
					"right_delete",
					null,
					"AgAAAEdHAAAAAAAAR0cAAAAAAAABAAAAL0dHAAAAAAAAR0cAAAAAAAABAAAALw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAR0cAAAAAAABHRwAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAAe+AAAAAAAACL4AAAAAAAAAAAAACL4AAAAAAAAMvgAAAAAAAAAAAAAMvgAAAAAAAA2+AAAAAAAAAAAAAA2+AAAAAAAAEb4AAAAAAAAAAAAACL4AAAAAAAAIvgAAAAAAAAQAAAAgICAg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAHvgAAAAAAAAe+AAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"paste",
					null,
					"AQAAAA2+AAAAAAAAI74AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAANvgAAAAAAAA2+AAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": ".init"
					},
					"BQAAACO+AAAAAAAAJL4AAAAAAAAAAAAAJL4AAAAAAAAlvgAAAAAAAAAAAAAlvgAAAAAAACa+AAAAAAAAAAAAACa+AAAAAAAAJ74AAAAAAAAAAAAAJ74AAAAAAAAovgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjvgAAAAAAACO+AAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACi+AAAAAAAAKr4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAovgAAAAAAACi+AAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "in"
					},
					"AgAAACm+AAAAAAAAKr4AAAAAAAAAAAAAKr4AAAAAAAArvgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAApvgAAAAAAACm+AAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert_completion",
					{
						"completion": "instance",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "instance"
					},
					"AgAAACm+AAAAAAAAKb4AAAAAAAACAAAAaW4pvgAAAAAAADG+AAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAArvgAAAAAAACu+AAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAADG+AAAAAAAAMr4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAxvgAAAAAAADG+AAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADK+AAAAAAAAM74AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAyvgAAAAAAADK+AAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "nA"
					},
					"AgAAADO+AAAAAAAANL4AAAAAAAAAAAAANL4AAAAAAAA1vgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAzvgAAAAAAADO+AAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					2,
					"left_delete",
					null,
					"AgAAADS+AAAAAAAANL4AAAAAAAABAAAAQTO+AAAAAAAAM74AAAAAAAABAAAAbg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA1vgAAAAAAADW+AAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "mAp"
					},
					"AwAAADO+AAAAAAAANL4AAAAAAAAAAAAANL4AAAAAAAA1vgAAAAAAAAAAAAA1vgAAAAAAADa+AAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAzvgAAAAAAADO+AAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"insert_completion",
					{
						"completion": "mApiHandle",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mApiHandle"
					},
					"AgAAADO+AAAAAAAAM74AAAAAAAADAAAAbUFwM74AAAAAAAA9vgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2vgAAAAAAADa+AAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAD2+AAAAAAAAPr4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA9vgAAAAAAAD2+AAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " p"
					},
					"AgAAAD6+AAAAAAAAP74AAAAAAAAAAAAAP74AAAAAAABAvgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA+vgAAAAAAAD6+AAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert_completion",
					{
						"completion": "physicalDevice",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "physicalDevice"
					},
					"AgAAAD++AAAAAAAAP74AAAAAAAABAAAAcD++AAAAAAAATb4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABAvgAAAAAAAEC+AAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAE2+AAAAAAAATr4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNvgAAAAAAAE2+AAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAE6+AAAAAAAAT74AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABOvgAAAAAAAE6+AAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "0,"
					},
					"AgAAAE++AAAAAAAAUL4AAAAAAAAAAAAAUL4AAAAAAABRvgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABPvgAAAAAAAE++AAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " mA"
					},
					"AwAAAFG+AAAAAAAAUr4AAAAAAAAAAAAAUr4AAAAAAABTvgAAAAAAAAAAAABTvgAAAAAAAFS+AAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABRvgAAAAAAAFG+AAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert_completion",
					{
						"completion": "mAllocator",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mAllocator"
					},
					"AgAAAFK+AAAAAAAAUr4AAAAAAAACAAAAbUFSvgAAAAAAAFy+AAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABUvgAAAAAAAFS+AAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAF2+AAAAAAAAXr4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABdvgAAAAAAAF2+AAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAKgIAAAAAAAAqQgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACoCAAAAAAAAKgIAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"paste",
					null,
					"AQAAAKkIAAAAAAAA8QgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpCAAAAAAAAKkIAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					3,
					"left_delete",
					null,
					"AwAAAKkIAAAAAAAAqQgAAAAAAABHAAAAI2RlZmluZSBOVlZLX0RFRkFVTFRfU1RBR0lOR19CTE9DS1NJWkUgKFZrRGV2aWNlU2l6ZSg2NCkgKiAxMDI0ICogMTAyNCmoCAAAAAAAAKgIAAAAAAAAAQAAAAqnCAAAAAAAAKcIAAAAAAAAAQAAAAo",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwCAAAAAAAAKkIAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAO0OAAAAAAAA7g4AAAAAAAAAAAAA7g4AAAAAAADvDgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtDgAAAAAAAO0OAAAAAAAAAAAAAADwhUA"
				],
				[
					39,
					1,
					"paste",
					null,
					"AQAAAO4OAAAAAAAANQ8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuDgAAAAAAAO4OAAAAAAAAAAAAAAAAAAA"
				],
				[
					46,
					1,
					"paste",
					null,
					"AgAAAJi+AAAAAAAAtr4AAAAAAAAAAAAAtr4AAAAAAAC2vgAAAAAAAAEAAAAw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACYvgAAAAAAAJm+AAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAABewAAAAAAAAGLAAAAAAAAAAAAAAGLAAAAAAAAAZsAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABewAAAAAAAAF7AAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"reindent",
					null,
					"AQAAABiwAAAAAAAAHLAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABiwAAAAAAAAGLAAAAAAAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAABywAAAAAAAArrAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABywAAAAAAAAHLAAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAK6wAAAAAAAAr7AAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK6wAAAAAAAArrAAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "nvvk::"
					},
					"BgAAABywAAAAAAAAHbAAAAAAAAAAAAAAHbAAAAAAAAAesAAAAAAAAAAAAAAesAAAAAAAAB+wAAAAAAAAAAAAAB+wAAAAAAAAILAAAAAAAAAAAAAAILAAAAAAAAAhsAAAAAAAAAAAAAAhsAAAAAAAACKwAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABywAAAAAAAAHLAAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAPUHAAAAAAAA9gcAAAAAAAAAAAAA9gcAAAAAAAD3BwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPUHAAAAAAAA9QcAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "#inc"
					},
					"BAAAAPYHAAAAAAAA9wcAAAAAAAAAAAAA9wcAAAAAAAD4BwAAAAAAAAAAAAD4BwAAAAAAAPkHAAAAAAAAAAAAAPkHAAAAAAAA+gcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPYHAAAAAAAA9gcAAAAAAAAAAAAAAAAAAA"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "lude"
					},
					"BAAAAPoHAAAAAAAA+wcAAAAAAAAAAAAA+wcAAAAAAAD8BwAAAAAAAAAAAAD8BwAAAAAAAP0HAAAAAAAAAAAAAP0HAAAAAAAA/gcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPoHAAAAAAAA+gcAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAP4HAAAAAAAA/wcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP4HAAAAAAAA/gcAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAP8HAAAAAAAAAQgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP8HAAAAAAAA/wcAAAAAAAAAAAAAAADwvw"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "nvvk/"
					},
					"BQAAAAAIAAAAAAAAAQgAAAAAAAAAAAAAAQgAAAAAAAACCAAAAAAAAAAAAAACCAAAAAAAAAMIAAAAAAAAAAAAAAMIAAAAAAAABAgAAAAAAAAAAAAABAgAAAAAAAAFCAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAIAAAAAAAAAAgAAAAAAAAAAAAAAADwvw"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "exten"
					},
					"BQAAAAUIAAAAAAAABggAAAAAAAAAAAAABggAAAAAAAAHCAAAAAAAAAAAAAAHCAAAAAAAAAgIAAAAAAAAAAAAAAgIAAAAAAAACQgAAAAAAAAAAAAACQgAAAAAAAAKCAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAUIAAAAAAAABQgAAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					1,
					"insert_completion",
					{
						"completion": "extension",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "extension"
					},
					"AgAAAAUIAAAAAAAABQgAAAAAAAAFAAAAZXh0ZW4FCAAAAAAAAA4IAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAoIAAAAAAAACggAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "s_v"
					},
					"AwAAAA4IAAAAAAAADwgAAAAAAAAAAAAADwgAAAAAAAAQCAAAAAAAAAAAAAAQCAAAAAAAABEIAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA4IAAAAAAAADggAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "k.hpp"
					},
					"BQAAABEIAAAAAAAAEggAAAAAAAAAAAAAEggAAAAAAAATCAAAAAAAAAAAAAATCAAAAAAAABQIAAAAAAAAAAAAABQIAAAAAAAAFQgAAAAAAAAAAAAAFQgAAAAAAAAWCAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABEIAAAAAAAAEQgAAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "\n\nnvv"
					},
					"CAAAANC6AAAAAAAA0boAAAAAAAAAAAAA0boAAAAAAADVugAAAAAAAAAAAADVugAAAAAAANa6AAAAAAAAAAAAANa6AAAAAAAA2roAAAAAAAAAAAAA0boAAAAAAADRugAAAAAAAAQAAAAgICAg1roAAAAAAADXugAAAAAAAAAAAADXugAAAAAAANi6AAAAAAAAAAAAANi6AAAAAAAA2boAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANC6AAAAAAAA0LoAAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"insert_completion",
					{
						"completion": "nvvk",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "nvvk"
					},
					"AgAAANa6AAAAAAAA1roAAAAAAAADAAAAbnZ21roAAAAAAADaugAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANm6AAAAAAAA2boAAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "LL"
					},
					"AgAAANq6AAAAAAAA27oAAAAAAAAAAAAA27oAAAAAAADcugAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANq6AAAAAAAA2roAAAAAAAAAAAAAAADwvw"
				],
				[
					37,
					2,
					"left_delete",
					null,
					"AgAAANu6AAAAAAAA27oAAAAAAAABAAAATNq6AAAAAAAA2roAAAAAAAABAAAATA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANy6AAAAAAAA3LoAAAAAAAAAAAAAAADwvw"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "LL"
					},
					"AgAAANq6AAAAAAAA27oAAAAAAAAAAAAA27oAAAAAAADcugAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANq6AAAAAAAA2roAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					2,
					"left_delete",
					null,
					"AgAAANu6AAAAAAAA27oAAAAAAAABAAAATNq6AAAAAAAA2roAAAAAAAABAAAATA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANy6AAAAAAAA3LoAAAAAAAAAAAAAAADwvw"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "::"
					},
					"AgAAANq6AAAAAAAA27oAAAAAAAAAAAAA27oAAAAAAADcugAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANq6AAAAAAAA2roAAAAAAAAAAAAAAADwvw"
				],
				[
					41,
					1,
					"insert_completion",
					{
						"completion": "load_VK_EXTENSIONS",
						"format": "text",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "load_VK_EXTENSIONS"
					},
					"AQAAANy6AAAAAAAA7roAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANy6AAAAAAAA3LoAAAAAAAAAAAAAAADwvw"
				],
				[
					42,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAO66AAAAAAAA8LoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO66AAAAAAAA7roAAAAAAAAAAAAAAADwvw"
				],
				[
					51,
					2,
					"left_delete",
					null,
					"AgAAADuwAAAAAAAAO7AAAAAAAACeAAAAICAgIG52dms6OmxvYWRfVktfRVhURU5TSU9OUyhWa0luc3RhbmNlIGluc3RhbmNlLCBQRk5fdmtHZXRJbnN0YW5jZVByb2NBZGRyIGdldEluc3RhbmNlUHJvY0FkZHIsIFZrRGV2aWNlIGRldmljZSwgUEZOX3ZrR2V0RGV2aWNlUHJvY0FkZHIgZ2V0RGV2aWNlUHJvY0FkZHIpOwo6sAAAAAAAADqwAAAAAAAAAQAAAAo",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADuwAAAAAAAA2bAAAAAAAAAAAAAAAADwvw"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFG6AAAAAAAAUroAAAAAAAAAAAAAUroAAAAAAABWugAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFG6AAAAAAAAUboAAAAAAAAAAAAAAADwvw"
				],
				[
					56,
					1,
					"paste",
					null,
					"AQAAAFa6AAAAAAAA9LoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFa6AAAAAAAAVroAAAAAAAAAAAAAAADwvw"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "in"
					},
					"AgAAAFC6AAAAAAAAUboAAAAAAAAAAAAAUboAAAAAAABSugAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFC6AAAAAAAAULoAAAAAAAAAAAAAAADwvw"
				],
				[
					62,
					1,
					"insert_completion",
					{
						"completion": "instance",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "instance"
					},
					"AgAAAFC6AAAAAAAAULoAAAAAAAACAAAAaW5QugAAAAAAAFi6AAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFK6AAAAAAAAUroAAAAAAAAAAAAAAADwvw"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAFi6AAAAAAAAWboAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFi6AAAAAAAAWLoAAAAAAAAAAAAAAADwvw"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFm6AAAAAAAAWroAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFm6AAAAAAAAWboAAAAAAAAAAAAAAADwvw"
				],
				[
					75,
					1,
					"paste",
					null,
					"AQAAAFq6AAAAAAAAbboAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFq6AAAAAAAAWroAAAAAAAAAAAAAAADwvw"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAG26AAAAAAAAbroAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG26AAAAAAAAbboAAAAAAAAAAAAAAADwvw"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": " dev"
					},
					"BAAAAG66AAAAAAAAb7oAAAAAAAAAAAAAb7oAAAAAAABwugAAAAAAAAAAAABwugAAAAAAAHG6AAAAAAAAAAAAAHG6AAAAAAAAcroAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG66AAAAAAAAbroAAAAAAAAAAAAAAADwvw"
				],
				[
					79,
					1,
					"insert_completion",
					{
						"completion": "device",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "device"
					},
					"AgAAAG+6AAAAAAAAb7oAAAAAAAADAAAAZGV2b7oAAAAAAAB1ugAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHK6AAAAAAAAcroAAAAAAAAAAAAAAADwvw"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAHW6AAAAAAAAdroAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHW6AAAAAAAAdboAAAAAAAAAAAAAAADwvw"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": " get"
					},
					"BAAAAHa6AAAAAAAAd7oAAAAAAAAAAAAAd7oAAAAAAAB4ugAAAAAAAAAAAAB4ugAAAAAAAHm6AAAAAAAAAAAAAHm6AAAAAAAAeroAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHa6AAAAAAAAdroAAAAAAAAAAAAAAADwvw"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "De"
					},
					"AgAAAHq6AAAAAAAAe7oAAAAAAAAAAAAAe7oAAAAAAAB8ugAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHq6AAAAAAAAeroAAAAAAAAAAAAAAADwvw"
				],
				[
					85,
					1,
					"insert_completion",
					{
						"completion": "getDeviceProcAddr",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "getDeviceProcAddr"
					},
					"AgAAAHe6AAAAAAAAd7oAAAAAAAAFAAAAZ2V0RGV3ugAAAAAAAIi6AAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHy6AAAAAAAAfLoAAAAAAAAAAAAAAADwvw"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIm6AAAAAAAAiroAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIm6AAAAAAAAiboAAAAAAAAAAAAAAADwvw"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AwAAAI+6AAAAAAAAkLoAAAAAAAAAAAAAkLoAAAAAAACQugAAAAAAAAQAAAAgICAgkLoAAAAAAACRugAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJO6AAAAAAAAj7oAAAAAAAAAAAAAAADwvw"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": "ckG"
					},
					"AwAAAFq6AAAAAAAAW7oAAAAAAAAAAAAAW7oAAAAAAABcugAAAAAAAAAAAABcugAAAAAAAF26AAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFq6AAAAAAAAWroAAAAAAAAAAAAAAADwvw"
				],
				[
					94,
					1,
					"right_delete",
					null,
					"AQAAAF26AAAAAAAAXboAAAAAAAABAAAAZw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF26AAAAAAAAXboAAAAAAAAAAAAAAADwvw"
				],
				[
					97,
					1,
					"right_delete",
					null,
					"AQAAAFq6AAAAAAAAWroAAAAAAAABAAAAYw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFq6AAAAAAAAWroAAAAAAAAAAAAAAADwvw"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AQAAAFq6AAAAAAAAW7oAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFq6AAAAAAAAWroAAAAAAAAAAAAAAADwvw"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "vkG"
					},
					"AwAAAHm6AAAAAAAAeroAAAAAAAAAAAAAeroAAAAAAAB7ugAAAAAAAAAAAAB7ugAAAAAAAHy6AAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHm6AAAAAAAAeboAAAAAAAAAAAAAAADwvw"
				],
				[
					101,
					1,
					"right_delete",
					null,
					"AQAAAHy6AAAAAAAAfLoAAAAAAAABAAAAZw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHy6AAAAAAAAfLoAAAAAAAAAAAAAAADwvw"
				],
				[
					109,
					3,
					"right_delete",
					null,
					"AwAAADe6AAAAAAAAN7oAAAAAAAAEAAAAbnZ2aze6AAAAAAAAN7oAAAAAAAABAAAAOje6AAAAAAAAN7oAAAAAAAABAAAAOg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADe6AAAAAAAAO7oAAAAAAAAAAAAAAADwvw"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAADK6AAAAAAAAM7oAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADK6AAAAAAAAMroAAAAAAAAAAAAAAABCQA"
				],
				[
					112,
					1,
					"reindent",
					null,
					"AQAAADO6AAAAAAAAN7oAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADO6AAAAAAAAM7oAAAAAAAAAAAAAAADwvw"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": "ass"
					},
					"AwAAADe6AAAAAAAAOLoAAAAAAAAAAAAAOLoAAAAAAAA5ugAAAAAAAAAAAAA5ugAAAAAAADq6AAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADe6AAAAAAAAN7oAAAAAAAAAAAAAAADwvw"
				],
				[
					114,
					1,
					"insert_completion",
					{
						"completion": "assert",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "assert"
					},
					"AgAAADe6AAAAAAAAN7oAAAAAAAADAAAAYXNzN7oAAAAAAAA9ugAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADq6AAAAAAAAOroAAAAAAAAAAAAAAADwvw"
				],
				[
					115,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAD26AAAAAAAAP7oAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD26AAAAAAAAPboAAAAAAAAAAAAAAADwvw"
				],
				[
					122,
					1,
					"paste",
					null,
					"AQAAAD66AAAAAAAAU7oAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD66AAAAAAAAProAAAAAAAAAAAAAAADwvw"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFS6AAAAAAAAVboAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFS6AAAAAAAAVLoAAAAAAAAAAAAAAADwvw"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFW6AAAAAAAAVroAAAAAAAAAAAAAVroAAAAAAABaugAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFW6AAAAAAAAVboAAAAAAAAAAAAAAADwvw"
				],
				[
					130,
					1,
					"paste",
					null,
					"AQAAAFq6AAAAAAAAeLoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFq6AAAAAAAAWroAAAAAAAAAAAAAAADwvw"
				],
				[
					138,
					1,
					"paste",
					null,
					"AgAAAGG6AAAAAAAAdLoAAAAAAAAAAAAAdLoAAAAAAAB0ugAAAAAAABUAAAB2a0dldEluc3RhbmNlUHJvY0FkZHI",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGG6AAAAAAAAdroAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/nvvk_memallocator_vma_vk.inl",
			"settings":
			{
				"buffer_size": 1640,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					6,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAALMTAAAAAAAAtBMAAAAAAAAAAAAAtBMAAAAAAAC0EwAAAAAAAHUAAAAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzEwAAAAAAACgUAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "Lava"
					},
					"BAAAALQTAAAAAAAAtRMAAAAAAAAAAAAAtRMAAAAAAAC2EwAAAAAAAAAAAAC2EwAAAAAAALcTAAAAAAAAAAAAALcTAAAAAAAAuBMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC0EwAAAAAAALQTAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": " version"
					},
					"CAAAALgTAAAAAAAAuRMAAAAAAAAAAAAAuRMAAAAAAAC6EwAAAAAAAAAAAAC6EwAAAAAAALsTAAAAAAAAAAAAALsTAAAAAAAAvBMAAAAAAAAAAAAAvBMAAAAAAAC9EwAAAAAAAAAAAAC9EwAAAAAAAL4TAAAAAAAAAAAAAL4TAAAAAAAAvxMAAAAAAAAAAAAAvxMAAAAAAADAEwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4EwAAAAAAALgTAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAAMATAAAAAAAAwRMAAAAAAAAAAAAAwRMAAAAAAADCEwAAAAAAAAAAAADCEwAAAAAAAMMTAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADAEwAAAAAAAMATAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": " NV"
					},
					"AwAAAMMTAAAAAAAAxBMAAAAAAAAAAAAAxBMAAAAAAADFEwAAAAAAAAAAAADFEwAAAAAAAMYTAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDEwAAAAAAAMMTAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "VK"
					},
					"AgAAAMYTAAAAAAAAxxMAAAAAAAAAAAAAxxMAAAAAAADIEwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADGEwAAAAAAAMYTAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " Reso"
					},
					"BQAAAMgTAAAAAAAAyRMAAAAAAAAAAAAAyRMAAAAAAADKEwAAAAAAAAAAAADKEwAAAAAAAMsTAAAAAAAAAAAAAMsTAAAAAAAAzBMAAAAAAAAAAAAAzBMAAAAAAADNEwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIEwAAAAAAAMgTAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "urceAllo"
					},
					"CAAAAM0TAAAAAAAAzhMAAAAAAAAAAAAAzhMAAAAAAADPEwAAAAAAAAAAAADPEwAAAAAAANATAAAAAAAAAAAAANATAAAAAAAA0RMAAAAAAAAAAAAA0RMAAAAAAADSEwAAAAAAAAAAAADSEwAAAAAAANMTAAAAAAAAAAAAANMTAAAAAAAA1BMAAAAAAAAAAAAA1BMAAAAAAADVEwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNEwAAAAAAAM0TAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "catorVma"
					},
					"CAAAANUTAAAAAAAA1hMAAAAAAAAAAAAA1hMAAAAAAADXEwAAAAAAAAAAAADXEwAAAAAAANgTAAAAAAAAAAAAANgTAAAAAAAA2RMAAAAAAAAAAAAA2RMAAAAAAADaEwAAAAAAAAAAAADaEwAAAAAAANsTAAAAAAAAAAAAANsTAAAAAAAA3BMAAAAAAAAAAAAA3BMAAAAAAADdEwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADVEwAAAAAAANUTAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAN0TAAAAAAAA3hMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADdEwAAAAAAAN0TAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAN4TAAAAAAAA3xMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADeEwAAAAAAAN4TAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					2,
					"left_delete",
					null,
					"AgAAADEDAAAAAAAAMQMAAAAAAAAHEAAALy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQovLyBDb252ZXJ0ZXIgdXRpbGl0eSBmcm9tIFZ1bGthbiBtZW1vcnkgcHJvcGVydHkgdG8gVk1BCi8vCnN0YXRpYyBpbmxpbmUgVm1hTWVtb3J5VXNhZ2UgdmtUb1ZtYU1lbW9yeVVzYWdlKFZrTWVtb3J5UHJvcGVydHlGbGFncyBmbGFncykKCnsKICBpZigoZmxhZ3MgJiBWS19NRU1PUllfUFJPUEVSVFlfREVWSUNFX0xPQ0FMX0JJVCkgPT0gVktfTUVNT1JZX1BST1BFUlRZX0RFVklDRV9MT0NBTF9CSVQpCiAgICByZXR1cm4gVk1BX01FTU9SWV9VU0FHRV9HUFVfT05MWTsKICBlbHNlIGlmKChmbGFncyAmIFZLX01FTU9SWV9QUk9QRVJUWV9IT1NUX0NPSEVSRU5UX0JJVCkgPT0gVktfTUVNT1JZX1BST1BFUlRZX0hPU1RfQ09IRVJFTlRfQklUKQogICAgcmV0dXJuIFZNQV9NRU1PUllfVVNBR0VfQ1BVX09OTFk7CiAgZWxzZSBpZigoZmxhZ3MgJiBWS19NRU1PUllfUFJPUEVSVFlfSE9TVF9WSVNJQkxFX0JJVCkgPT0gVktfTUVNT1JZX1BST1BFUlRZX0hPU1RfVklTSUJMRV9CSVQpCiAgICByZXR1cm4gVk1BX01FTU9SWV9VU0FHRV9DUFVfVE9fR1BVOwogIHJldHVybiBWTUFfTUVNT1JZX1VTQUdFX1VOS05PV047Cn0KCmNsYXNzIFZNQU1lbW9yeUhhbmRsZSA6IHB1YmxpYyBNZW1IYW5kbGVCYXNlCnsKcHVibGljOgogIFZNQU1lbW9yeUhhbmRsZSgpICAgICAgICAgICAgICAgICAgICAgICA9IGRlZmF1bHQ7CiAgVk1BTWVtb3J5SGFuZGxlKGNvbnN0IFZNQU1lbW9yeUhhbmRsZSYpID0gZGVmYXVsdDsKICBWTUFNZW1vcnlIYW5kbGUoVk1BTWVtb3J5SGFuZGxlJiYpICAgICAgPSBkZWZhdWx0OwoKICBWbWFBbGxvY2F0aW9uIGdldEFsbG9jYXRpb24oKSBjb25zdCB7IHJldHVybiBtX2FsbG9jYXRpb247IH0KCnByaXZhdGU6CiAgZnJpZW5kIGNsYXNzIFZNQU1lbW9yeUFsbG9jYXRvcjsKICBWTUFNZW1vcnlIYW5kbGUoVm1hQWxsb2NhdGlvbiBhbGxvY2F0aW9uKQogICAgICA6IG1fYWxsb2NhdGlvbihhbGxvY2F0aW9uKQogIHsKICB9CgogIFZtYUFsbG9jYXRpb24gbV9hbGxvY2F0aW9uOwp9OwoKaW5saW5lIFZNQU1lbW9yeUhhbmRsZSogY2FzdFZNQU1lbW9yeUhhbmRsZShNZW1IYW5kbGUgbWVtSGFuZGxlKQp7CiAgaWYoIW1lbUhhbmRsZSkKICAgIHJldHVybiBudWxscHRyOwojaWZuZGVmIE5ERUJVRwogIGF1dG8gdm1hTWVtSGFuZGxlID0gc3RhdGljX2Nhc3Q8Vk1BTWVtb3J5SGFuZGxlKj4obWVtSGFuZGxlKTsKI2Vsc2UKICBhdXRvIHZtYU1lbUhhbmRsZSA9IGR5bmFtaWNfY2FzdDxWTUFNZW1vcnlIYW5kbGUqPihtZW1IYW5kbGUpOwogIGFzc2VydCh2bWFNZW1IYW5kbGUpOwojZW5kaWYKCiAgcmV0dXJuIHZtYU1lbUhhbmRsZTsKfQoKaW5saW5lIFZNQU1lbW9yeUFsbG9jYXRvcjo6Vk1BTWVtb3J5QWxsb2NhdG9yKFZrRGV2aWNlIGRldmljZSwgVmtQaHlzaWNhbERldmljZSBwaHlzaWNhbERldmljZSwgVm1hQWxsb2NhdG9yIHZtYSkKewogIGluaXQoZGV2aWNlLCBwaHlzaWNhbERldmljZSwgdm1hKTsKfQoKCmlubGluZSBWTUFNZW1vcnlBbGxvY2F0b3I6On5WTUFNZW1vcnlBbGxvY2F0b3IoKQp7CiAgZGVpbml0KCk7Cn0KCmlubGluZSBib29sIFZNQU1lbW9yeUFsbG9jYXRvcjo6aW5pdChWa0RldmljZSBkZXZpY2UsIFZrUGh5c2ljYWxEZXZpY2UgcGh5c2ljYWxEZXZpY2UsIFZtYUFsbG9jYXRvciB2bWEpCnsKICBtX2RldmljZSAgICAgICAgID0gZGV2aWNlOwogIG1fcGh5c2ljYWxEZXZpY2UgPSBwaHlzaWNhbERldmljZTsKICBtX3ZtYSAgICAgICAgICAgID0gdm1hOwogIHJldHVybiB0cnVlOwp9CgppbmxpbmUgdm9pZCBWTUFNZW1vcnlBbGxvY2F0b3I6OmRlaW5pdCgpCnsKICBtX3ZtYSA9IDA7Cn0KCmlubGluZSBNZW1IYW5kbGUgVk1BTWVtb3J5QWxsb2NhdG9yOjphbGxvY01lbW9yeShjb25zdCBNZW1BbGxvY2F0ZUluZm8mIGFsbG9jSW5mbywgVmtSZXN1bHQqIHBSZXN1bHQpCnsKICBWbWFBbGxvY2F0aW9uQ3JlYXRlSW5mbyB2bWFBbGxvY0luZm8gPSB7fTsKICB2bWFBbGxvY0luZm8udXNhZ2UgICAgICAgICAgICAgICAgICAgPSB2a1RvVm1hTWVtb3J5VXNhZ2UoYWxsb2NJbmZvLmdldE1lbW9yeVByb3BlcnRpZXMoKSk7CiAgaWYoYWxsb2NJbmZvLmdldERlZGljYXRlZEJ1ZmZlcigpIHx8IGFsbG9jSW5mby5nZXREZWRpY2F0ZWRJbWFnZSgpKQogIHsKICAgIHZtYUFsbG9jSW5mby5mbGFncyB8PSBWTUFfQUxMT0NBVElPTl9DUkVBVEVfREVESUNBVEVEX01FTU9SWV9CSVQ7CiAgfQogIHZtYUFsbG9jSW5mby5wcmlvcml0eSA9IGFsbG9jSW5mby5nZXRQcmlvcml0eSgpOwoKICAvLyBOb3Qgc3VwcG9ydGVkIGJ5IFZNQQogIGFzc2VydCghYWxsb2NJbmZvLmdldEV4cG9ydGFibGUoKSk7CiAgYXNzZXJ0KCFhbGxvY0luZm8uZ2V0RGV2aWNlTWFzaygpKTsKCiAgVm1hQWxsb2NhdGlvbkluZm8gYWxsb2NhdGlvbkRldGFpbDsKICBWbWFBbGxvY2F0aW9uICAgICBhbGxvY2F0aW9uID0gbnVsbHB0cjsKCiAgVmtSZXN1bHQgcmVzdWx0ID0gdm1hQWxsb2NhdGVNZW1vcnkobV92bWEsICZhbGxvY0luZm8uZ2V0TWVtb3J5UmVxdWlyZW1lbnRzKCksICZ2bWFBbGxvY0luZm8sICZhbGxvY2F0aW9uLCAmYWxsb2NhdGlvbkRldGFpbCk7CiAgTlZWS19DSEVDSyhyZXN1bHQpOwogIGlmKHBSZXN1bHQpCiAgewogICAgKnBSZXN1bHQgPSByZXN1bHQ7CiAgfQoKICByZXR1cm4gbmV3IFZNQU1lbW9yeUhhbmRsZShhbGxvY2F0aW9uKTsKfQoKaW5saW5lIHZvaWQgVk1BTWVtb3J5QWxsb2NhdG9yOjpmcmVlTWVtb3J5KE1lbUhhbmRsZSBtZW1IYW5kbGUpCnsKICBpZighbWVtSGFuZGxlKQogICAgcmV0dXJuOwoKICBhdXRvIHZtYUhhbmRsZSA9IGNhc3RWTUFNZW1vcnlIYW5kbGUobWVtSGFuZGxlKTsKICB2bWFGcmVlTWVtb3J5KG1fdm1hLCB2bWFIYW5kbGUtPmdldEFsbG9jYXRpb24oKSk7Cn0KCmlubGluZSBNZW1BbGxvY2F0b3I6Ok1lbUluZm8gVk1BTWVtb3J5QWxsb2NhdG9yOjpnZXRNZW1vcnlJbmZvKE1lbUhhbmRsZSBtZW1IYW5kbGUpIGNvbnN0CnsKICBhdXRvIHZtYUhhbmRsZSA9IGNhc3RWTUFNZW1vcnlIYW5kbGUobWVtSGFuZGxlKTsKCiAgVm1hQWxsb2NhdGlvbkluZm8gYWxsb2NJbmZvOwogIHZtYUdldEFsbG9jYXRpb25JbmZvKG1fdm1hLCB2bWFIYW5kbGUtPmdldEFsbG9jYXRpb24oKSwgJmFsbG9jSW5mbyk7CgogIE1lbUluZm8gbWVtSW5mbzsKICBtZW1JbmZvLm1lbW9yeSA9IGFsbG9jSW5mby5kZXZpY2VNZW1vcnk7CiAgbWVtSW5mby5vZmZzZXQgPSBhbGxvY0luZm8ub2Zmc2V0OwogIG1lbUluZm8uc2l6ZSAgID0gYWxsb2NJbmZvLnNpemU7CgogIHJldHVybiBtZW1JbmZvOwp9CgppbmxpbmUgdm9pZCogVk1BTWVtb3J5QWxsb2NhdG9yOjptYXAoTWVtSGFuZGxlIG1lbUhhbmRsZSwgVmtEZXZpY2VTaXplIG9mZnNldCwgVmtEZXZpY2VTaXplIHNpemUsIFZrUmVzdWx0KiBwUmVzdWx0KQp7CiAgYXV0byB2bWFIYW5kbGUgPSBjYXN0Vk1BTWVtb3J5SGFuZGxlKG1lbUhhbmRsZSk7CgogIHZvaWQqICAgIHB0cjsKICBWa1Jlc3VsdCByZXN1bHQgPSB2bWFNYXBNZW1vcnkobV92bWEsIHZtYUhhbmRsZS0+Z2V0QWxsb2NhdGlvbigpLCAmcHRyKTsKICBOVlZLX0NIRUNLKHJlc3VsdCk7CiAgaWYocFJlc3VsdCkKICB7CiAgICAqcFJlc3VsdCA9IHJlc3VsdDsKICB9CgogIHJldHVybiBwdHI7Cn0KCmlubGluZSB2b2lkIFZNQU1lbW9yeUFsbG9jYXRvcjo6dW5tYXAoTWVtSGFuZGxlIG1lbUhhbmRsZSkKewogIGF1dG8gdm1hSGFuZGxlID0gY2FzdFZNQU1lbW9yeUhhbmRsZShtZW1IYW5kbGUpOwoKICB2bWFVbm1hcE1lbW9yeShtX3ZtYSwgdm1hSGFuZGxlLT5nZXRBbGxvY2F0aW9uKCkpOwp9CgoKaW5saW5lIFZrRGV2aWNlIFZNQU1lbW9yeUFsbG9jYXRvcjo6Z2V0RGV2aWNlKCkgY29uc3QKewogIHJldHVybiBtX2RldmljZTsKfQoKaW5saW5lIFZrUGh5c2ljYWxEZXZpY2UgVk1BTWVtb3J5QWxsb2NhdG9yOjpnZXRQaHlzaWNhbERldmljZSgpIGNvbnN0CnsKICByZXR1cm4gbV9waHlzaWNhbERldmljZTsKfQowAwAAAAAAADADAAAAAAAAAQAAAAo",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA4EwAAAAAAADEDAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAADqAgAALyoKICogQ29weXJpZ2h0IChjKSAyMDE5LTIwMjEsIE5WSURJQSBDT1JQT1JBVElPTi4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiAqCiAqIFNQRFgtRmlsZUNvcHlyaWdodFRleHQ6IENvcHlyaWdodCAoYykgMjAxOS0yMDIxIE5WSURJQSBDT1JQT1JBVElPTgogKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMAogKi8",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADqAgAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					2,
					"left_delete",
					null,
					"AgAAAAEAAAAAAAAAAQAAAAAAAAABAAAACgAAAAAAAAAAAAAAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAA"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPwCAAAAAAAA/QIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD8AgAAAAAAAPwCAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " V"
					},
					"AgAAAP0CAAAAAAAA/gIAAAAAAAAAAAAA/gIAAAAAAAD/AgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD9AgAAAAAAAP0CAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"left_delete",
					null,
					"AQAAAP4CAAAAAAAA/gIAAAAAAAABAAAAVg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/AgAAAAAAAP8CAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"paste",
					null,
					"AQAAAP4CAAAAAAAACgMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD+AgAAAAAAAP4CAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " vma"
					},
					"BAAAAAoDAAAAAAAACwMAAAAAAAAAAAAACwMAAAAAAAAMAwAAAAAAAAAAAAAMAwAAAAAAAA0DAAAAAAAAAAAAAA0DAAAAAAAADgMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAKAwAAAAAAAAoDAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAA8DAAAAAAAAEAMAAAAAAAAAAAAAEAMAAAAAAAARAwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPAwAAAAAAAA8DAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					2,
					"left_delete",
					null,
					"AgAAABADAAAAAAAAEAMAAAAAAAABAAAACg8DAAAAAAAADwMAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAARAwAAAAAAABEDAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "\n\nass"
					},
					"CAAAABEDAAAAAAAAEgMAAAAAAAAAAAAAEgMAAAAAAAAUAwAAAAAAAAAAAAAUAwAAAAAAABUDAAAAAAAAAAAAABUDAAAAAAAAFwMAAAAAAAAAAAAAEgMAAAAAAAASAwAAAAAAAAIAAAAgIBUDAAAAAAAAFgMAAAAAAAAAAAAAFgMAAAAAAAAXAwAAAAAAAAAAAAAXAwAAAAAAABgDAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAARAwAAAAAAABEDAAAAAAAAAAAAAAA4lkA"
				],
				[
					42,
					1,
					"insert_completion",
					{
						"completion": "assert",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "assert"
					},
					"AgAAABUDAAAAAAAAFQMAAAAAAAADAAAAYXNzFQMAAAAAAAAbAwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAYAwAAAAAAABgDAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABsDAAAAAAAAHQMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbAwAAAAAAABsDAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "vma"
					},
					"AwAAABwDAAAAAAAAHQMAAAAAAAAAAAAAHQMAAAAAAAAeAwAAAAAAAAAAAAAeAwAAAAAAAB8DAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcAwAAAAAAABwDAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACADAAAAAAAAIQMAAAAAAAAAAAAAIQMAAAAAAAAjAwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgAwAAAAAAACADAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AgAAACADAAAAAAAAIQMAAAAAAAAAAAAAIgMAAAAAAAAiAwAAAAAAAAIAAAAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgAwAAAAAAACADAAAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHQEAAAAAAAAdQQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB0BAAAAAAAAHQEAAAAAAAAAAAAAADgYEA"
				],
				[
					55,
					1,
					"reindent",
					null,
					"AQAAAHQEAAAAAAAAdgQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB0BAAAAAAAAHQEAAAAAAAAAAAAAAAAAAA"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "m_V"
					},
					"AwAAAHYEAAAAAAAAdwQAAAAAAAAAAAAAdwQAAAAAAAB4BAAAAAAAAAAAAAB4BAAAAAAAAHkEAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB2BAAAAAAAAHYEAAAAAAAAAAAAAAAA8L8"
				],
				[
					57,
					1,
					"insert_completion",
					{
						"completion": "m_vma",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "m_vma"
					},
					"AgAAAHYEAAAAAAAAdgQAAAAAAAADAAAAbV9WdgQAAAAAAAB7BAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB5BAAAAAAAAHkEAAAAAAAAAAAAAAAA8L8"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAHsEAAAAAAAAfAQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB7BAAAAAAAAHsEAAAAAAAAAAAAAAAA8L8"
				],
				[
					59,
					1,
					"left_delete",
					null,
					"AQAAAHsEAAAAAAAAewQAAAAAAAABAAAAPQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB8BAAAAAAAAHwEAAAAAAAAAAAAAAAA8L8"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAHsEAAAAAAAAfAQAAAAAAAAAAAAAfAQAAAAAAAB9BAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB7BAAAAAAAAHsEAAAAAAAAAAAAAAAA8L8"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": " vm"
					},
					"AwAAAH0EAAAAAAAAfgQAAAAAAAAAAAAAfgQAAAAAAAB/BAAAAAAAAAAAAAB/BAAAAAAAAIAEAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB9BAAAAAAAAH0EAAAAAAAAAAAAAAAA8L8"
				],
				[
					62,
					1,
					"insert_completion",
					{
						"completion": "vma",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "vma"
					},
					"AgAAAH4EAAAAAAAAfgQAAAAAAAACAAAAdm1+BAAAAAAAAIEEAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACABAAAAAAAAIAEAAAAAAAAAAAAAAAA8L8"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIEEAAAAAAAAggQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBBAAAAAAAAIEEAAAAAAAAAAAAAAAA8L8"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAACUDAAAAAAAAJgMAAAAAAAAAAAAAJgMAAAAAAAAnAwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAlAwAAAAAAACUDAAAAAAAAAAAAAAAA8L8"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAFQDAAAAAAAAVQMAAAAAAAAAAAAAVQMAAAAAAABWAwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABUAwAAAAAAAFQDAAAAAAAAAAAAAAAA8L8"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAI8DAAAAAAAAkAMAAAAAAAAAAAAAkAMAAAAAAACRAwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPAwAAAAAAAI8DAAAAAAAAAAAAAAAA8L8"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAMIDAAAAAAAAwwMAAAAAAAAAAAAAwwMAAAAAAADEAwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCAwAAAAAAAMIDAAAAAAAAAAAAAAAA8L8"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAPcDAAAAAAAA+AMAAAAAAAAAAAAA+AMAAAAAAAD5AwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3AwAAAAAAAPcDAAAAAAAAAAAAAAAA8L8"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAFIEAAAAAAAAUwQAAAAAAAAAAAAAUwQAAAAAAABUBAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSBAAAAAAAAFIEAAAAAAAAAAAAAAAA8L8"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAJoFAAAAAAAAmwUAAAAAAAAAAAAAmwUAAAAAAACcBQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaBQAAAAAAAJoFAAAAAAAAAAAAAAAA8L8"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": "nvvk"
					},
					"BAAAACQAAAAAAAAAJQAAAAAAAAAAAAAAJQAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAACcAAAAAAAAAAAAAACcAAAAAAAAAKAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkAAAAAAAAACQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAACgAAAAAAAAAKQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAoAAAAAAAAACgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					90,
					1,
					"left_delete",
					null,
					"AQAAACgAAAAAAAAAKAAAAAAAAAABAAAALg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAApAAAAAAAAACkAAAAAAAAAAAAAAAAA8L8"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAACgAAAAAAAAAKQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAoAAAAAAAAACgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": "Lava"
					},
					"BAAAAHABAAAAAAAAcQEAAAAAAAAAAAAAcQEAAAAAAAByAQAAAAAAAAAAAAByAQAAAAAAAHMBAAAAAAAAAAAAAHMBAAAAAAAAdAEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABwAQAAAAAAAHABAAAAAAAAAAAAAAAA8L8"
				],
				[
					106,
					1,
					"paste",
					null,
					"AgAAAIoBAAAAAAAAogEAAAAAAAAAAAAAogEAAAAAAACiAQAAAAAAABQAAABSZXNvdXJjZUFsbG9jYXRvclZtYQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACKAQAAAAAAAJ4BAAAAAAAAAAAAAAAA8L8"
				],
				[
					110,
					1,
					"paste",
					null,
					"AgAAAD8CAAAAAAAAVwIAAAAAAAAAAAAAVwIAAAAAAABXAgAAAAAAABQAAABSZXNvdXJjZUFsbG9jYXRvclZtYQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA/AgAAAAAAAFMCAAAAAAAAAAAAAAAA8L8"
				],
				[
					114,
					1,
					"paste",
					null,
					"AgAAAFoCAAAAAAAAcgIAAAAAAAAAAAAAcgIAAAAAAAByAgAAAAAAABQAAABSZXNvdXJjZUFsbG9jYXRvclZtYQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABaAgAAAAAAAG4CAAAAAAAAAAAAAAAA8L8"
				],
				[
					118,
					1,
					"paste",
					null,
					"AgAAAJICAAAAAAAAqgIAAAAAAAAAAAAAqgIAAAAAAACqAgAAAAAAABQAAABSZXNvdXJjZUFsbG9jYXRvclZtYQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACSAgAAAAAAAKYCAAAAAAAAAAAAAAAA8L8"
				],
				[
					122,
					1,
					"paste",
					null,
					"AgAAAFoFAAAAAAAAcgUAAAAAAAAAAAAAcgUAAAAAAAByBQAAAAAAABQAAABSZXNvdXJjZUFsbG9jYXRvclZtYQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABaBQAAAAAAAG4FAAAAAAAAAAAAAAAA8L8"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAAcCAAAAAAAACAIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAHAgAAAAAAAAcCAAAAAAAAAAAAAAAA8L8"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAgCAAAAAAAACQIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAIAgAAAAAAAAgCAAAAAAAAAAAAAAAA8L8"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAgCAAAAAAAACQIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAIAgAAAAAAAAgCAAAAAAAAAAAAAAAA8L8"
				],
				[
					138,
					1,
					"paste",
					null,
					"AQAAAAkCAAAAAAAAGQIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJAgAAAAAAAAkCAAAAAAAAAAAAAAAA8L8"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAkCAAAAAAAACgIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJAgAAAAAAAAkCAAAAAAAAAAAAAAAA8L8"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": "\nm"
					},
					"AwAAAB4CAAAAAAAAHwIAAAAAAAAAAAAAHwIAAAAAAAAhAgAAAAAAAAAAAAAhAgAAAAAAACICAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAeAgAAAAAAAB4CAAAAAAAAAAAAAADwdUA"
				],
				[
					146,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAACICAAAAAAAAIwIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiAgAAAAAAACICAAAAAAAAAAAAAAAA8L8"
				],
				[
					147,
					1,
					"insert_completion",
					{
						"completion": "m_vma",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "m_vma"
					},
					"AgAAACECAAAAAAAAIQIAAAAAAAACAAAAbV8hAgAAAAAAACYCAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjAgAAAAAAACMCAAAAAAAAAAAAAAAA8L8"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAACYCAAAAAAAAJwIAAAAAAAAAAAAAJwIAAAAAAAAoAgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAmAgAAAAAAACYCAAAAAAAAAAAAAAAA8L8"
				],
				[
					149,
					1,
					"insert",
					{
						"characters": " c"
					},
					"AgAAACgCAAAAAAAAKQIAAAAAAAAAAAAAKQIAAAAAAAAqAgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAoAgAAAAAAACgCAAAAAAAAAAAAAAAA8L8"
				],
				[
					150,
					1,
					"left_delete",
					null,
					"AQAAACkCAAAAAAAAKQIAAAAAAAABAAAAYw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAqAgAAAAAAACoCAAAAAAAAAAAAAAAA8L8"
				],
				[
					151,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AQAAACkCAAAAAAAAKgIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAApAgAAAAAAACkCAAAAAAAAAAAAAAAA8L8"
				],
				[
					152,
					1,
					"insert_completion",
					{
						"completion": "vma",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "vma"
					},
					"AgAAACkCAAAAAAAAKQIAAAAAAAABAAAAdikCAAAAAAAALAIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAqAgAAAAAAACoCAAAAAAAAAAAAAAAA8L8"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAACwCAAAAAAAALQIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAsAgAAAAAAACwCAAAAAAAAAAAAAAAA8L8"
				],
				[
					164,
					1,
					"right_delete",
					null,
					"AQAAACECAAAAAAAAIQIAAAAAAAAPAAAAbV92bWEgPSB2bWE7CiAg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhAgAAAAAAADACAAAAAAAAAAAAAAAAMkA"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEYCAAAAAAAARwIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABGAgAAAAAAAEYCAAAAAAAAAAAAAAAA8L8"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": " vma"
					},
					"BAAAAEcCAAAAAAAASAIAAAAAAAAAAAAASAIAAAAAAABJAgAAAAAAAAAAAABJAgAAAAAAAEoCAAAAAAAAAAAAAEoCAAAAAAAASwIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABHAgAAAAAAAEcCAAAAAAAAAAAAAAAA8L8"
				],
				[
					174,
					1,
					"paste",
					null,
					"AQAAAAoAAAAAAAAAIAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAKAAAAAAAAAAoAAAAAAAAAAAAAAAAA8L8"
				],
				[
					181,
					1,
					"paste",
					null,
					"AQAAAF4CAAAAAAAAbwIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeAgAAAAAAAF4CAAAAAAAAAAAAAAAA8L8"
				],
				[
					182,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAG8CAAAAAAAAcAIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABvAgAAAAAAAG8CAAAAAAAAAAAAAAAA8L8"
				],
				[
					183,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHACAAAAAAAAcQIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABwAgAAAAAAAHACAAAAAAAAAAAAAAAA8L8"
				],
				[
					186,
					1,
					"right_delete",
					null,
					"AQAAAB0CAAAAAAAAHQIAAAAAAAABAAAAbQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAdAgAAAAAAAB0CAAAAAAAAAAAAAAAA8L8"
				],
				[
					197,
					1,
					"paste",
					null,
					"AgAAAF0CAAAAAAAAbQIAAAAAAAAAAAAAbQIAAAAAAABtAgAAAAAAABEAAABzdGFnaW5nQmxvY2tTaXplbQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABuAgAAAAAAAF0CAAAAAAAAAAAAAAAA8L8"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAADAAAAAAAAAAMQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwAAAAAAAAADAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					205,
					1,
					"paste",
					null,
					"AQAAADAAAAAAAAAATAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwAAAAAAAAADAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					207,
					5,
					"left_delete",
					null,
					"BQAAAEMAAAAAAAAAQwAAAAAAAAABAAAAckIAAAAAAAAAQgAAAAAAAAABAAAAb0EAAAAAAAAAQQAAAAAAAAABAAAAckAAAAAAAAAAQAAAAAAAAAABAAAAcj8AAAAAAAAAPwAAAAAAAAABAAAAZQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABEAAAAAAAAAEQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					208,
					1,
					"insert",
					{
						"characters": "memallocat"
					},
					"CgAAAD8AAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABBAAAAAAAAAAAAAABBAAAAAAAAAEIAAAAAAAAAAAAAAEIAAAAAAAAAQwAAAAAAAAAAAAAAQwAAAAAAAABEAAAAAAAAAAAAAABEAAAAAAAAAEUAAAAAAAAAAAAAAEUAAAAAAAAARgAAAAAAAAAAAAAARgAAAAAAAABHAAAAAAAAAAAAAABHAAAAAAAAAEgAAAAAAAAAAAAAAEgAAAAAAAAASQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA/AAAAAAAAAD8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					209,
					1,
					"insert",
					{
						"characters": "or"
					},
					"AgAAAEkAAAAAAAAASgAAAAAAAAAAAAAASgAAAAAAAABLAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABJAAAAAAAAAEkAAAAAAAAAAAAAAAAA8L8"
				],
				[
					210,
					1,
					"insert",
					{
						"characters": "_vma"
					},
					"BAAAAEsAAAAAAAAATAAAAAAAAAAAAAAATAAAAAAAAABNAAAAAAAAAAAAAABNAAAAAAAAAE4AAAAAAAAAAAAAAE4AAAAAAAAATwAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABLAAAAAAAAAEsAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/nvvk_memallocator_vma_vk.hpp",
			"settings":
			{
				"buffer_size": 2227,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "NVVK_"
					},
					"BQAAAA8DAAAAAAAAEAMAAAAAAAAAAAAAEAMAAAAAAAARAwAAAAAAAAAAAAARAwAAAAAAABIDAAAAAAAAAAAAABIDAAAAAAAAEwMAAAAAAAAAAAAAEwMAAAAAAAAUAwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPAwAAAAAAAA8DAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"paste",
					null,
					"AgAAADgDAAAAAAAAWAMAAAAAAAAAAAAAWAMAAAAAAABYAwAAAAAAABsAAABNRU1BTExPQ0FUT1JfVk1BX0hfSU5DTFVERUQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA4AwAAAAAAAFMDAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "  //"
					},
					"BAAAAFYOAAAAAAAAVw4AAAAAAAAAAAAAVw4AAAAAAABYDgAAAAAAAAAAAABYDgAAAAAAAFkOAAAAAAAAAAAAAFkOAAAAAAAAWg4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABWDgAAAAAAAFYOAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFoOAAAAAAAAWw4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABaDgAAAAAAAFoOAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"paste",
					null,
					"AQAAAFsOAAAAAAAAew4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABbDgAAAAAAAFsOAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"paste",
					null,
					"AgAAALQJAAAAAAAA0woAAAAAAAAAAAAA0woAAAAAAADTCgAAAAAAAGgBAAAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwo",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC0CQAAAAAAABwLAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"left_delete",
					null,
					"AQAAAK8DAAAAAAAArwMAAAAAAAACBgAALyoqCiBcY2xhc3MgbnZ2azo6Vk1BTWVtb3J5QWxsb2NhdG9yCiBudnZrOjpWTUFNZW1vcnlBbGxvY2F0b3IgdXNpbmcgdGhlIEdQVU9wZW4gW1Z1bGthbiBNZW1vcnkgQWxsb2NhdG9yXShodHRwczovL2dpdGh1Yi5jb20vR1BVT3Blbi1MaWJyYXJpZXNBbmRTREtzL1Z1bGthbk1lbW9yeUFsbG9jYXRvcikgdW5kZXJuZWF0aC4KIEFzIFZNQSBjb21lcyBhcyBhIGhlYWRlci1vbmx5IGxpYnJhcnksIHdoZW4gdXNpbmcgaXQgeW91J2xsIGhhdmUgdG86CiAgMSkgcHJvdmlkZSBfYWRkX3BhY2thZ2VfVk1BKCkgaW4geW91ciBDTWFrZUxpc3RzLnR4dAogIDIpIHB1dCB0aGVzZSBsaW5lcyBpbnRvIG9uZSBvZiB5b3VyIGNvbXBpbGF0aW9uIHVuaXRzOgogIFxjb2Rley5jcHB9CiAgICAgICAjZGVmaW5lIFZNQV9JTVBMRU1FTlRBVElPTgogICAgICAgI2luY2x1ZGUgInZrX21lbV9hbGxvYy5oIgogIFxlbmRjb2RlCiovCmNsYXNzIFZNQU1lbW9yeUFsbG9jYXRvciA6IHB1YmxpYyBNZW1BbGxvY2F0b3IKewpwdWJsaWM6CiAgVk1BTWVtb3J5QWxsb2NhdG9yKCkgPSBkZWZhdWx0OwogIGlubGluZSBleHBsaWNpdCBWTUFNZW1vcnlBbGxvY2F0b3IoVmtEZXZpY2UgZGV2aWNlLCBWa1BoeXNpY2FsRGV2aWNlIHBoeXNpY2FsRGV2aWNlLCBWbWFBbGxvY2F0b3Igdm1hKTsKICBpbmxpbmUgdmlydHVhbCB+Vk1BTWVtb3J5QWxsb2NhdG9yKCk7CgogIGlubGluZSBib29sIGluaXQoVmtEZXZpY2UgZGV2aWNlLCBWa1BoeXNpY2FsRGV2aWNlIHBoeXNpY2FsRGV2aWNlLCBWbWFBbGxvY2F0b3Igdm1hKTsKICBpbmxpbmUgdm9pZCBkZWluaXQoKTsKCiAgaW5saW5lIHZpcnR1YWwgTWVtSGFuZGxlIGFsbG9jTWVtb3J5KGNvbnN0IE1lbUFsbG9jYXRlSW5mbyYgYWxsb2NJbmZvLCBWa1Jlc3VsdCogcFJlc3VsdCA9IG51bGxwdHIpIG92ZXJyaWRlOwogIGlubGluZSB2aXJ0dWFsIHZvaWQgICAgICBmcmVlTWVtb3J5KE1lbUhhbmRsZSBtZW1IYW5kbGUpIG92ZXJyaWRlOwogIGlubGluZSB2aXJ0dWFsIE1lbUluZm8gICBnZXRNZW1vcnlJbmZvKE1lbUhhbmRsZSBtZW1IYW5kbGUpIGNvbnN0IG92ZXJyaWRlOwogIGlubGluZSB2aXJ0dWFsIHZvaWQqIG1hcChNZW1IYW5kbGUgbWVtSGFuZGxlLCBWa0RldmljZVNpemUgb2Zmc2V0ID0gMCwgVmtEZXZpY2VTaXplIHNpemUgPSBWS19XSE9MRV9TSVpFLCBWa1Jlc3VsdCogcFJlc3VsdCA9IG51bGxwdHIpIG92ZXJyaWRlOwogIGlubGluZSB2aXJ0dWFsIHZvaWQgIHVubWFwKE1lbUhhbmRsZSBtZW1IYW5kbGUpIG92ZXJyaWRlOwoKICBpbmxpbmUgdmlydHVhbCBWa0RldmljZSAgICAgICAgIGdldERldmljZSgpIGNvbnN0IG92ZXJyaWRlOwogIGlubGluZSB2aXJ0dWFsIFZrUGh5c2ljYWxEZXZpY2UgZ2V0UGh5c2ljYWxEZXZpY2UoKSBjb25zdCBvdmVycmlkZTsKCnByaXZhdGU6CiAgVm1hQWxsb2NhdG9yICAgICBtX3ZtYXswfTsKICBWa0RldmljZSAgICAgICAgIG1fZGV2aWNle251bGxwdHJ9OwogIFZrUGh5c2ljYWxEZXZpY2UgbV9waHlzaWNhbERldmljZXtudWxscHRyfTsKfTs",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxCQAAAAAAAK8DAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					2,
					"left_delete",
					null,
					"AgAAAK8DAAAAAAAArwMAAAAAAAABAAAACq4DAAAAAAAArgMAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwAwAAAAAAALADAAAAAAAAAAAAAAAAAAA"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "nvvk/"
					},
					"BQAAAIMDAAAAAAAAhAMAAAAAAAAAAAAAhAMAAAAAAACFAwAAAAAAAAAAAACFAwAAAAAAAIYDAAAAAAAAAAAAAIYDAAAAAAAAhwMAAAAAAAAAAAAAhwMAAAAAAACIAwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACDAwAAAAAAAIMDAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "nvv."
					},
					"BAAAAGQDAAAAAAAAZQMAAAAAAAAAAAAAZQMAAAAAAABmAwAAAAAAAAAAAABmAwAAAAAAAGcDAAAAAAAAAAAAAGcDAAAAAAAAaAMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABkAwAAAAAAAGQDAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"left_delete",
					null,
					"AQAAAGcDAAAAAAAAZwMAAAAAAAABAAAALg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoAwAAAAAAAGgDAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "k/"
					},
					"AgAAAGcDAAAAAAAAaAMAAAAAAAAAAAAAaAMAAAAAAABpAwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABnAwAAAAAAAGcDAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "Falcor/"
					},
					"BwAAAPMHAAAAAAAA9AcAAAAAAAAAAAAA9AcAAAAAAAD1BwAAAAAAAAAAAAD1BwAAAAAAAPYHAAAAAAAAAAAAAPYHAAAAAAAA9wcAAAAAAAAAAAAA9wcAAAAAAAD4BwAAAAAAAAAAAAD4BwAAAAAAAPkHAAAAAAAAAAAAAPkHAAAAAAAA+gcAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADzBwAAAAAAAPMHAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "Core/API"
					},
					"CAAAAPoHAAAAAAAA+wcAAAAAAAAAAAAA+wcAAAAAAAD8BwAAAAAAAAAAAAD8BwAAAAAAAP0HAAAAAAAAAAAAAP0HAAAAAAAA/gcAAAAAAAAAAAAA/gcAAAAAAAD/BwAAAAAAAAAAAAD/BwAAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAQgAAAAAAAAAAAAAAQgAAAAAAAACCAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6BwAAAAAAAPoHAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "/Vulka"
					},
					"BgAAAAIIAAAAAAAAAwgAAAAAAAAAAAAAAwgAAAAAAAAECAAAAAAAAAAAAAAECAAAAAAAAAUIAAAAAAAAAAAAAAUIAAAAAAAABggAAAAAAAAAAAAABggAAAAAAAAHCAAAAAAAAAAAAAAHCAAAAAAAAAgIAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACCAAAAAAAAAIIAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "n/"
					},
					"AgAAAAgIAAAAAAAACQgAAAAAAAAAAAAACQgAAAAAAAAKCAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAICAAAAAAAAAgIAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "nvvk_"
					},
					"BQAAAAoIAAAAAAAACwgAAAAAAAAAAAAACwgAAAAAAAAMCAAAAAAAAAAAAAAMCAAAAAAAAA0IAAAAAAAAAAAAAA0IAAAAAAAADggAAAAAAAAAAAAADggAAAAAAAAPCAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAKCAAAAAAAAAoIAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"paste",
					null,
					"AgAAAKEFAAAAAAAAuQUAAAAAAAAAAAAAuQUAAAAAAAC5BQAAAAAAABQAAABSZXNvdXJjZUFsbG9jYXRvclZtYQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChBQAAAAAAALUFAAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					1,
					"paste",
					null,
					"AgAAAOEFAAAAAAAA+QUAAAAAAAAAAAAA+QUAAAAAAAD5BQAAAAAAABQAAABSZXNvdXJjZUFsbG9jYXRvclZtYQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhBQAAAAAAAPUFAAAAAAAAAAAAAAAA8L8"
				],
				[
					59,
					1,
					"paste",
					null,
					"AgAAAAkGAAAAAAAAIQYAAAAAAAAAAAAAIQYAAAAAAAAhBgAAAAAAABQAAABSZXNvdXJjZUFsbG9jYXRvclZtYQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJBgAAAAAAAB0GAAAAAAAAAAAAAAAA8L8"
				],
				[
					63,
					1,
					"paste",
					null,
					"AgAAALUGAAAAAAAAzQYAAAAAAAAAAAAAzQYAAAAAAADNBgAAAAAAABQAAABSZXNvdXJjZUFsbG9jYXRvclZtYQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1BgAAAAAAAMkGAAAAAAAAAAAAAAAA8L8"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAGMHAAAAAAAAZAcAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjBwAAAAAAAGMHAAAAAAAAAAAAAAAA8L8"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGQHAAAAAAAAZQcAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABkBwAAAAAAAGQHAAAAAAAAAAAAAAAA8L8"
				],
				[
					68,
					1,
					"paste",
					null,
					"AQAAAGUHAAAAAAAAdwcAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABlBwAAAAAAAGUHAAAAAAAAAAAAAAAA8L8"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAHcHAAAAAAAAeAcAAAAAAAAAAAAAeAcAAAAAAAB5BwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB3BwAAAAAAAHcHAAAAAAAAAAAAAAAA8L8"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": " nu"
					},
					"AwAAAHkHAAAAAAAAegcAAAAAAAAAAAAAegcAAAAAAAB7BwAAAAAAAAAAAAB7BwAAAAAAAHwHAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB5BwAAAAAAAHkHAAAAAAAAAAAAAAAA8L8"
				],
				[
					71,
					1,
					"insert_completion",
					{
						"completion": "nullptr",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "nullptr"
					},
					"AgAAAHoHAAAAAAAAegcAAAAAAAACAAAAbnV6BwAAAAAAAIEHAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB8BwAAAAAAAHwHAAAAAAAAAAAAAAAA8L8"
				],
				[
					74,
					2,
					"right_delete",
					null,
					"AgAAAGUHAAAAAAAAZQcAAAAAAAABAAAALGUHAAAAAAAAZQcAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABlBwAAAAAAAGUHAAAAAAAAAAAAAAAA8L8"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAKcGAAAAAAAAqAYAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACnBgAAAAAAAKcGAAAAAAAAAAAAAAAA8L8"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKgGAAAAAAAAqQYAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACoBgAAAAAAAKgGAAAAAAAAAAAAAAAA8L8"
				],
				[
					82,
					1,
					"paste",
					null,
					"AQAAAKkGAAAAAAAAwwYAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpBgAAAAAAAKkGAAAAAAAAAAAAAAAA8L8"
				],
				[
					93,
					1,
					"paste",
					null,
					"AQAAAPYCAAAAAAAADAMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2AgAAAAAAAPYCAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/nvpro_core/nvvk/memallocator_vma_vk.inl",
			"settings":
			{
				"buffer_size": 6368,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/nvpro_core/nvvk/memallocator_vma_vk.hpp",
			"settings":
			{
				"buffer_size": 3661,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/AccelerationStructure.h",
			"settings":
			{
				"buffer_size": 8150,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "#pragma once"
			},
			"undo_stack":
			[
				[
					866,
					1,
					"paste",
					null,
					"AQAAABUBAAAAAAAAzQEAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFQEAAAAAAAAVAQAAAAAAAAAAAAAAAAAA"
				],
				[
					869,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAABQBAAAAAAAAFQEAAAAAAAAAAAAAFQEAAAAAAAAWAQAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFAEAAAAAAAAUAQAAAAAAAAAAAAAAAPC/"
				],
				[
					871,
					1,
					"paste",
					null,
					"AQAAABUBAAAAAAAAhAEAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFQEAAAAAAAAVAQAAAAAAAAAAAAAAAAAA"
				],
				[
					8,
					1,
					"",
					null,
					"AgAAAKMQAAAAAAAAqRAAAAAAAAAFAAAAYnVpbHRWDAAAAAAAAFwMAAAAAAAABQAAAGJ1aWx0",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKMQAAAAAAAAqBAAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAPcSAAAAAAAA+BIAAAAAAAAAAAAA+BIAAAAAAAD5EgAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPcSAAAAAAAA9xIAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"reindent",
					null,
					"AQAAAPgSAAAAAAAA/BIAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPgSAAAAAAAA+BIAAAAAAAAAAAAAAAAAAA"
				],
				[
					18,
					1,
					"paste",
					null,
					"AQAAAPwSAAAAAAAAHBMAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPwSAAAAAAAA/BIAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"paste",
					null,
					"AgAAAPwSAAAAAAAAHBMAAAAAAAAAAAAAHBMAAAAAAAAcEwAAAAAAAB0AAABUb3BMZXZlbEFjY2VsZXJhdGlvblN0cnVjdHVyZQ",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPwSAAAAAAAAGRMAAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFQNAAAAAAAAVQ0AAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFQNAAAAAAAAVA0AAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					1,
					"reindent",
					null,
					"AQAAAFUNAAAAAAAAWQ0AAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFUNAAAAAAAAVQ0AAAAAAAAAAAAAAADwvw"
				],
				[
					37,
					1,
					"paste",
					null,
					"AQAAAFkNAAAAAAAAlA0AAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFkNAAAAAAAAWQ0AAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					6,
					"right_delete",
					null,
					"BgAAAHgNAAAAAAAAeA0AAAAAAAABAAAAY3gNAAAAAAAAeA0AAAAAAAABAAAAb3gNAAAAAAAAeA0AAAAAAAABAAAAbngNAAAAAAAAeA0AAAAAAAABAAAAc3gNAAAAAAAAeA0AAAAAAAABAAAAdHgNAAAAAAAAeA0AAAAAAAABAAAAIA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHgNAAAAAAAAeA0AAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "Acc"
					},
					"AwAAAHITAAAAAAAAcxMAAAAAAAAAAAAAcxMAAAAAAAB0EwAAAAAAAAAAAAB0EwAAAAAAAHUTAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHITAAAAAAAAchMAAAAAAAAAAAAAAADwvw"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "elerat"
					},
					"BgAAAHUTAAAAAAAAdhMAAAAAAAAAAAAAdhMAAAAAAAB3EwAAAAAAAAAAAAB3EwAAAAAAAHgTAAAAAAAAAAAAAHgTAAAAAAAAeRMAAAAAAAAAAAAAeRMAAAAAAAB6EwAAAAAAAAAAAAB6EwAAAAAAAHsTAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHUTAAAAAAAAdRMAAAAAAAAAAAAAAADwvw"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "ionStruc"
					},
					"CAAAAHsTAAAAAAAAfBMAAAAAAAAAAAAAfBMAAAAAAAB9EwAAAAAAAAAAAAB9EwAAAAAAAH4TAAAAAAAAAAAAAH4TAAAAAAAAfxMAAAAAAAAAAAAAfxMAAAAAAACAEwAAAAAAAAAAAACAEwAAAAAAAIETAAAAAAAAAAAAAIETAAAAAAAAghMAAAAAAAAAAAAAghMAAAAAAACDEwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHsTAAAAAAAAexMAAAAAAAAAAAAAAADwvw"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "ture"
					},
					"BAAAAIMTAAAAAAAAhBMAAAAAAAAAAAAAhBMAAAAAAACFEwAAAAAAAAAAAACFEwAAAAAAAIYTAAAAAAAAAAAAAIYTAAAAAAAAhxMAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIMTAAAAAAAAgxMAAAAAAAAAAAAAAADwvw"
				],
				[
					54,
					1,
					"paste",
					null,
					"AgAAANgXAAAAAAAA8xcAAAAAAAAAAAAA8xcAAAAAAADzFwAAAAAAAAYAAABjcmVhdGU",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANgXAAAAAAAA3hcAAAAAAAAAAAAAAADwvw"
				],
				[
					57,
					1,
					"left_delete",
					null,
					"AQAAAPQXAAAAAAAA9BcAAAAAAAAbAAAARGV2aWNlOjpTaGFyZWRQdHIgcERldmljZSwg",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA8YAAAAAAAA9BcAAAAAAAAAAAAAAADwvw"
				],
				[
					60,
					1,
					"left_delete",
					null,
					"AQAAAIgTAAAAAAAAiBMAAAAAAAAbAAAARGV2aWNlOjpTaGFyZWRQdHIgcERldmljZSwg",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKMTAAAAAAAAiBMAAAAAAAAAAAAAAADwvw"
				],
				[
					63,
					3,
					"left_delete",
					null,
					"AwAAAK0bAAAAAAAArRsAAAAAAAA1AQAAaW5saW5lIEJvdHRvbUxldmVsQWNjZWxlcmF0aW9uU3RydWN0dXJlOjpTaGFyZWRQdHIgbWFrZUJvdHRvbUxldmVsQWNjZWxlcmF0aW9uU3RydWN0dXJlKCkgewogICAgcmV0dXJuIHN0ZDo6bWFrZV9zaGFyZWQ8Qm90dG9tTGV2ZWxBY2NlbGVyYXRpb25TdHJ1Y3R1cmU+KCk7Cn0KCmlubGluZSBUb3BMZXZlbEFjY2VsZXJhdGlvblN0cnVjdHVyZTo6U2hhcmVkUHRyIG1ha2VUb3BMZXZlbEFjY2VsZXJhdGlvblN0cnVjdHVyZSgpIHsKICAgIHJldHVybiBzdGQ6Om1ha2Vfc2hhcmVkPFRvcExldmVsQWNjZWxlcmF0aW9uU3RydWN0dXJlPigpOwp9rBsAAAAAAACsGwAAAAAAAAEAAAAKqxsAAAAAAACrGwAAAAAAAAEAAAAK",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOIcAAAAAAAArRsAAAAAAAAAAAAAAADwvw"
				],
				[
					67,
					1,
					"paste",
					null,
					"AgAAAM8KAAAAAAAA6goAAAAAAAAAAAAA6goAAAAAAADqCgAAAAAAAAYAAABjcmVhdGU",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM8KAAAAAAAA1QoAAAAAAAAAAAAAAADwvw"
				],
				[
					70,
					9,
					"right_delete",
					null,
					"CQAAAOsKAAAAAAAA6woAAAAAAAABAAAAROsKAAAAAAAA6woAAAAAAAABAAAAZesKAAAAAAAA6woAAAAAAAABAAAAdusKAAAAAAAA6woAAAAAAAABAAAAaesKAAAAAAAA6woAAAAAAAABAAAAY+sKAAAAAAAA6woAAAAAAAABAAAAZesKAAAAAAAA6woAAAAAAAABAAAAOusKAAAAAAAA6woAAAAAAAABAAAAOusKAAAAAAAA6woAAAAAAAABAAAAUw",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOsKAAAAAAAA6woAAAAAAAAAAAAAAADwvw"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "Sha"
					},
					"AwAAAAAKAAAAAAAAAQoAAAAAAAAAAAAAAQoAAAAAAAACCgAAAAAAAAAAAAACCgAAAAAAAAMKAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAKAAAAAAAAAAoAAAAAAAAAAAAAAADwvw"
				],
				[
					79,
					3,
					"left_delete",
					null,
					"AwAAAAIKAAAAAAAAAgoAAAAAAAABAAAAYQEKAAAAAAAAAQoAAAAAAAABAAAAaAAKAAAAAAAAAAoAAAAAAAABAAAAUw",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAMKAAAAAAAAAwoAAAAAAAAAAAAAAADwvw"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": "Dev"
					},
					"AwAAAAAKAAAAAAAAAQoAAAAAAAAAAAAAAQoAAAAAAAACCgAAAAAAAAAAAAACCgAAAAAAAAMKAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAKAAAAAAAAAAoAAAAAAAAAAAAAAADwvw"
				],
				[
					81,
					1,
					"insert_completion",
					{
						"completion": "Device",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Device"
					},
					"AgAAAAAKAAAAAAAAAAoAAAAAAAADAAAARGV2AAoAAAAAAAAGCgAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAMKAAAAAAAAAwoAAAAAAAAAAAAAAADwvw"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "::S"
					},
					"AwAAAAYKAAAAAAAABwoAAAAAAAAAAAAABwoAAAAAAAAICgAAAAAAAAAAAAAICgAAAAAAAAkKAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAYKAAAAAAAABgoAAAAAAAAAAAAAAADwvw"
				],
				[
					83,
					1,
					"insert_completion",
					{
						"completion": "SharedPtr",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "SharedPtr"
					},
					"AgAAAAgKAAAAAAAACAoAAAAAAAABAAAAUwgKAAAAAAAAEQoAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAkKAAAAAAAACQoAAAAAAAAAAAAAAADwvw"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": " pDwevice"
					},
					"CQAAABEKAAAAAAAAEgoAAAAAAAAAAAAAEgoAAAAAAAATCgAAAAAAAAAAAAATCgAAAAAAABQKAAAAAAAAAAAAABQKAAAAAAAAFQoAAAAAAAAAAAAAFQoAAAAAAAAWCgAAAAAAAAAAAAAWCgAAAAAAABcKAAAAAAAAAAAAABcKAAAAAAAAGAoAAAAAAAAAAAAAGAoAAAAAAAAZCgAAAAAAAAAAAAAZCgAAAAAAABoKAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABEKAAAAAAAAEQoAAAAAAAAAAAAAAADwvw"
				],
				[
					85,
					6,
					"left_delete",
					null,
					"BgAAABkKAAAAAAAAGQoAAAAAAAABAAAAZRgKAAAAAAAAGAoAAAAAAAABAAAAYxcKAAAAAAAAFwoAAAAAAAABAAAAaRYKAAAAAAAAFgoAAAAAAAABAAAAdhUKAAAAAAAAFQoAAAAAAAABAAAAZRQKAAAAAAAAFAoAAAAAAAABAAAAdw",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABoKAAAAAAAAGgoAAAAAAAAAAAAAAADwvw"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAABQKAAAAAAAAFQoAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABQKAAAAAAAAFAoAAAAAAAAAAAAAAADwvw"
				],
				[
					87,
					1,
					"insert_completion",
					{
						"completion": "pDevice",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "pDevice"
					},
					"AgAAABIKAAAAAAAAEgoAAAAAAAADAAAAcERlEgoAAAAAAAAZCgAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABUKAAAAAAAAFQoAAAAAAAAAAAAAAADwvw"
				],
				[
					94,
					11,
					"right_delete",
					null,
					"CwAAAAQLAAAAAAAABAsAAAAAAAAIAAAAaGFyZWRQdHIECwAAAAAAAAQLAAAAAAAAAQAAACAECwAAAAAAAAQLAAAAAAAAAQAAAHAECwAAAAAAAAQLAAAAAAAAAQAAAEQECwAAAAAAAAQLAAAAAAAAAQAAAGUECwAAAAAAAAQLAAAAAAAAAQAAAHYECwAAAAAAAAQLAAAAAAAAAQAAAGkECwAAAAAAAAQLAAAAAAAAAQAAAGMECwAAAAAAAAQLAAAAAAAAAQAAAGUECwAAAAAAAAQLAAAAAAAAAQAAACwECwAAAAAAAAQLAAAAAAAAAQAAACA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAQLAAAAAAAADAsAAAAAAAAAAAAAAADwvw"
				],
				[
					97,
					1,
					"paste",
					null,
					"AQAAAGoTAAAAAAAAgxMAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGoTAAAAAAAAahMAAAAAAAAAAAAAAADwvw"
				],
				[
					100,
					1,
					"paste",
					null,
					"AQAAANQXAAAAAAAA7RcAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANQXAAAAAAAA1BcAAAAAAAAAAAAAAADwvw"
				],
				[
					104,
					3,
					"left_delete",
					null,
					"AwAAALYXAAAAAAAAthcAAAAAAAA5AAAAVG9wTGV2ZWxBY2NlbGVyYXRpb25TdHJ1Y3R1cmUoRGV2aWNlOjpTaGFyZWRQdHIgcERldmljZSk7shcAAAAAAACyFwAAAAAAAAQAAAAgICAgsRcAAAAAAACxFwAAAAAAAAEAAAAK",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO8XAAAAAAAAthcAAAAAAAAAAAAAAADwvw"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAP4aAAAAAAAA/xoAAAAAAAAAAAAA/xoAAAAAAAADGwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP4aAAAAAAAA/hoAAAAAAAAAAAAAAADwvw"
				],
				[
					108,
					1,
					"paste",
					null,
					"AQAAAAMbAAAAAAAAPBsAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAMbAAAAAAAAAxsAAAAAAAAAAAAAAADwvw"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADwbAAAAAAAAPRsAAAAAAAAAAAAAPRsAAAAAAABBGwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADwbAAAAAAAAPBsAAAAAAAAAAAAAAADwvw"
				],
				[
					113,
					4,
					"left_delete",
					null,
					"BQAAAEkTAAAAAAAASRMAAAAAAAA8AAAAQm90dG9tTGV2ZWxBY2NlbGVyYXRpb25TdHJ1Y3R1cmUoRGV2aWNlOjpTaGFyZWRQdHIgcERldmljZSk7ARsAAAAAAAABGwAAAAAAAAQAAAAgICAgRRMAAAAAAABFEwAAAAAAAAQAAAAgICAgRBMAAAAAAABEEwAAAAAAAAEAAAAKQxMAAAAAAABDEwAAAAAAAAEAAAAK",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEkTAAAAAAAAhRMAAAAAAAAAAAAAAADwvw"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAI0WAAAAAAAAjhYAAAAAAAAAAAAAjhYAAAAAAACSFgAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI0WAAAAAAAAjRYAAAAAAAAAAAAAAIB2QA"
				],
				[
					116,
					1,
					"left_delete",
					null,
					"AQAAAI4WAAAAAAAAjhYAAAAAAAAEAAAAICAgIA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJIWAAAAAAAAkhYAAAAAAAAAAAAAAADwvw"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": "private:"
					},
					"CAAAAI4WAAAAAAAAjxYAAAAAAAAAAAAAjxYAAAAAAACQFgAAAAAAAAAAAACQFgAAAAAAAJEWAAAAAAAAAAAAAJEWAAAAAAAAkhYAAAAAAAAAAAAAkhYAAAAAAACTFgAAAAAAAAAAAACTFgAAAAAAAJQWAAAAAAAAAAAAAJQWAAAAAAAAlRYAAAAAAAAAAAAAlRYAAAAAAACWFgAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI4WAAAAAAAAjhYAAAAAAAAAAAAAAADwvw"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJYWAAAAAAAAlxYAAAAAAAAAAAAAlxYAAAAAAACbFgAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJYWAAAAAAAAlhYAAAAAAAAAAAAAAADwvw"
				],
				[
					119,
					1,
					"paste",
					null,
					"AQAAAJsWAAAAAAAA1xYAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJsWAAAAAAAAmxYAAAAAAAAAAAAAAADwvw"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAI4WAAAAAAAAjxYAAAAAAAAAAAAAjxYAAAAAAACQFgAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI4WAAAAAAAAjhYAAAAAAAAAAAAAAADwvw"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAI4WAAAAAAAAjxYAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI4WAAAAAAAAjhYAAAAAAAAAAAAAAADwvw"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAAEbAAAAAAAAAhsAAAAAAAAAAAAAAhsAAAAAAAADGwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAEbAAAAAAAAARsAAAAAAAAAAAAAAAAAAA"
				],
				[
					131,
					4,
					"left_delete",
					null,
					"BAAAAOoJAAAAAAAA6gkAAAAAAAAxAAAAQWNjZWxlcmF0aW9uU3RydWN0dXJlKERldmljZTo6U2hhcmVkUHRyIHBEZXZpY2UpO+YJAAAAAAAA5gkAAAAAAAAEAAAAICAgIOUJAAAAAAAA5QkAAAAAAAABAAAACuQJAAAAAAAA5AkAAAAAAAABAAAACg",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOoJAAAAAAAAGwoAAAAAAAAAAAAAAADwvw"
				],
				[
					135,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAANgNAAAAAAAA2Q0AAAAAAAAAAAAA2Q0AAAAAAADaDQAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANgNAAAAAAAA2A0AAAAAAAAAAAAAACiBQA"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": "  private"
					},
					"CQAAANkNAAAAAAAA2g0AAAAAAAAAAAAA2g0AAAAAAADbDQAAAAAAAAAAAADbDQAAAAAAANwNAAAAAAAAAAAAANwNAAAAAAAA3Q0AAAAAAAAAAAAA3Q0AAAAAAADeDQAAAAAAAAAAAADeDQAAAAAAAN8NAAAAAAAAAAAAAN8NAAAAAAAA4A0AAAAAAAAAAAAA4A0AAAAAAADhDQAAAAAAAAAAAADhDQAAAAAAAOINAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANkNAAAAAAAA2Q0AAAAAAAAAAAAAAAAAAA"
				],
				[
					138,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAOINAAAAAAAA4w0AAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOINAAAAAAAA4g0AAAAAAAAAAAAAAADwvw"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAOMNAAAAAAAA5A0AAAAAAAAAAAAA5A0AAAAAAADmDQAAAAAAAAAAAADmDQAAAAAAAOgNAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOMNAAAAAAAA4w0AAAAAAAAAAAAAAADwvw"
				],
				[
					140,
					1,
					"paste",
					null,
					"AQAAAOgNAAAAAAAAGQ4AAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOgNAAAAAAAA6A0AAAAAAAAAAAAAAADwvw"
				],
				[
					147,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAE8TAAAAAAAAUBMAAAAAAAAAAAAAUBMAAAAAAABREwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE8TAAAAAAAATxMAAAAAAAAAAAAAAADwvw"
				],
				[
					149,
					1,
					"reindent",
					null,
					"AQAAAFATAAAAAAAAVBMAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFATAAAAAAAAUBMAAAAAAAAAAAAAAAAAAA"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": "Sh"
					},
					"AgAAAFQTAAAAAAAAVRMAAAAAAAAAAAAAVRMAAAAAAABWEwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFQTAAAAAAAAVBMAAAAAAAAAAAAAAADwvw"
				],
				[
					151,
					1,
					"insert_completion",
					{
						"completion": "SharedPtr",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "SharedPtr"
					},
					"AgAAAFQTAAAAAAAAVBMAAAAAAAACAAAAU2hUEwAAAAAAAF0TAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFYTAAAAAAAAVhMAAAAAAAAAAAAAAADwvw"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": " c"
					},
					"AgAAAF0TAAAAAAAAXhMAAAAAAAAAAAAAXhMAAAAAAABfEwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF0TAAAAAAAAXRMAAAAAAAAAAAAAAADwvw"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": "rea"
					},
					"AwAAAF8TAAAAAAAAYBMAAAAAAAAAAAAAYBMAAAAAAABhEwAAAAAAAAAAAABhEwAAAAAAAGITAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF8TAAAAAAAAXxMAAAAAAAAAAAAAAADwvw"
				],
				[
					154,
					1,
					"insert_completion",
					{
						"completion": "create",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "create"
					},
					"AgAAAF4TAAAAAAAAXhMAAAAAAAAEAAAAY3JlYV4TAAAAAAAAZBMAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGITAAAAAAAAYhMAAAAAAAAAAAAAAADwvw"
				],
				[
					155,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGQTAAAAAAAAZhMAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGQTAAAAAAAAZBMAAAAAAAAAAAAAAADwvw"
				],
				[
					156,
					1,
					"insert",
					{
						"characters": "De"
					},
					"AgAAAGUTAAAAAAAAZhMAAAAAAAAAAAAAZhMAAAAAAABnEwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGUTAAAAAAAAZRMAAAAAAAAAAAAAAADwvw"
				],
				[
					157,
					1,
					"insert_completion",
					{
						"completion": "Device",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Device"
					},
					"AgAAAGUTAAAAAAAAZRMAAAAAAAACAAAARGVlEwAAAAAAAGsTAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGcTAAAAAAAAZxMAAAAAAAAAAAAAAADwvw"
				],
				[
					158,
					1,
					"insert",
					{
						"characters": "::"
					},
					"AgAAAGsTAAAAAAAAbBMAAAAAAAAAAAAAbBMAAAAAAABtEwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGsTAAAAAAAAaxMAAAAAAAAAAAAAAADwvw"
				],
				[
					159,
					1,
					"insert_completion",
					{
						"completion": "SharedPtr",
						"format": "text",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "SharedPtr"
					},
					"AQAAAG0TAAAAAAAAdhMAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG0TAAAAAAAAbRMAAAAAAAAAAAAAAADwvw"
				],
				[
					160,
					1,
					"insert",
					{
						"characters": " p"
					},
					"AgAAAHYTAAAAAAAAdxMAAAAAAAAAAAAAdxMAAAAAAAB4EwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHYTAAAAAAAAdhMAAAAAAAAAAAAAAADwvw"
				],
				[
					161,
					1,
					"insert_completion",
					{
						"completion": "pDevice",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "pDevice"
					},
					"AgAAAHcTAAAAAAAAdxMAAAAAAAABAAAAcHcTAAAAAAAAfhMAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHgTAAAAAAAAeBMAAAAAAAAAAAAAAADwvw"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAH8TAAAAAAAAgBMAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH8TAAAAAAAAfxMAAAAAAAAAAAAAAADwvw"
				],
				[
					169,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAPkXAAAAAAAA+hcAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPkXAAAAAAAA+RcAAAAAAAAAAAAAAADwvw"
				],
				[
					170,
					1,
					"reindent",
					null,
					"AQAAAPoXAAAAAAAA/hcAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPoXAAAAAAAA+hcAAAAAAAAAAAAAAADwvw"
				],
				[
					171,
					1,
					"paste",
					null,
					"AQAAAP4XAAAAAAAAKhgAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP4XAAAAAAAA/hcAAAAAAAAAAAAAAADwvw"
				],
				[
					174,
					1,
					"paste",
					null,
					"AQAAAFQTAAAAAAAAWhMAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFQTAAAAAAAAVBMAAAAAAAAAAAAAAADwvw"
				],
				[
					175,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFoTAAAAAAAAWxMAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFoTAAAAAAAAWhMAAAAAAAAAAAAAAADwvw"
				],
				[
					178,
					1,
					"paste",
					null,
					"AQAAAAUYAAAAAAAACxgAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAUYAAAAAAAABRgAAAAAAAAAAAAAAADwvw"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAsYAAAAAAAADBgAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAsYAAAAAAAACxgAAAAAAAAAAAAAAADwvw"
				],
				[
					189,
					1,
					"paste",
					null,
					"AgAAANsNAAAAAAAA5A0AAAAAAAAAAAAA5A0AAAAAAADkDQAAAAAAAAcAAABwcml2YXRl",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANsNAAAAAAAA4g0AAAAAAAAAAAAAAADwvw"
				],
				[
					193,
					2,
					"left_delete",
					null,
					"AgAAAB4OAAAAAAAAHg4AAAAAAAANAAAAIHByb3RlY3RlZDoKIB0OAAAAAAAAHQ4AAAAAAAABAAAAIA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB4OAAAAAAAAKw4AAAAAAAAAAAAAAAAiQA"
				],
				[
					194,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAB0OAAAAAAAAHg4AAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB0OAAAAAAAAHQ4AAAAAAAAAAAAAAADwvw"
				],
				[
					198,
					1,
					"paste",
					null,
					"AgAAAMoWAAAAAAAA0xYAAAAAAAAAAAAA0xYAAAAAAADTFgAAAAAAAAcAAABwcml2YXRl",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMoWAAAAAAAA0RYAAAAAAAAAAAAAAADwvw"
				],
				[
					201,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAL0bAAAAAAAAvhsAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL0bAAAAAAAAvRsAAAAAAAAAAAAAAADwvw"
				],
				[
					202,
					1,
					"insert",
					{
						"characters": "  private"
					},
					"CQAAAL4bAAAAAAAAvxsAAAAAAAAAAAAAvxsAAAAAAADAGwAAAAAAAAAAAADAGwAAAAAAAMEbAAAAAAAAAAAAAMEbAAAAAAAAwhsAAAAAAAAAAAAAwhsAAAAAAADDGwAAAAAAAAAAAADDGwAAAAAAAMQbAAAAAAAAAAAAAMQbAAAAAAAAxRsAAAAAAAAAAAAAxRsAAAAAAADGGwAAAAAAAAAAAADGGwAAAAAAAMcbAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL4bAAAAAAAAvhsAAAAAAAAAAAAAAADwvw"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAMcbAAAAAAAAyBsAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMcbAAAAAAAAxxsAAAAAAAAAAAAAAADwvw"
				],
				[
					206,
					7,
					"left_delete",
					null,
					"BwAAAHwbAAAAAAAAfBsAAAAAAAABAAAAZXsbAAAAAAAAexsAAAAAAAABAAAAdHobAAAAAAAAehsAAAAAAAABAAAAYXkbAAAAAAAAeRsAAAAAAAABAAAAdngbAAAAAAAAeBsAAAAAAAABAAAAaXcbAAAAAAAAdxsAAAAAAAABAAAAcnYbAAAAAAAAdhsAAAAAAAABAAAAcA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH0bAAAAAAAAfRsAAAAAAAAAAAAAAADwvw"
				],
				[
					207,
					1,
					"paste",
					null,
					"AQAAAHYbAAAAAAAAfxsAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHYbAAAAAAAAdhsAAAAAAAAAAAAAAADwvw"
				],
				[
					210,
					2,
					"right_delete",
					null,
					"AgAAABoRAAAAAAAAGhEAAAAAAAAWAAAARGV2aWNlOjpTaGFyZWRQdHIgZGV2LBoRAAAAAAAAGhEAAAAAAAABAAAAIA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABoRAAAAAAAAMBEAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAL0UAAAAAAAAvhQAAAAAAAAAAAAAvhQAAAAAAADGFAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9FAAAAAAAAL0UAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "auto"
					},
					"BAAAAL0UAAAAAAAAvhQAAAAAAAAAAAAAvhQAAAAAAAC/FAAAAAAAAAAAAAC/FAAAAAAAAMAUAAAAAAAAAAAAAMAUAAAAAAAAwRQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9FAAAAAAAAL0UAAAAAAAAAAAAAAAAUkA"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMEUAAAAAAAAwhQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBFAAAAAAAAMEUAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"paste",
					null,
					"AQAAAMIUAAAAAAAA6BQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCFAAAAAAAAMIUAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					5,
					"right_delete",
					null,
					"BQAAAL0UAAAAAAAAvRQAAAAAAAABAAAAYb0UAAAAAAAAvRQAAAAAAAABAAAAdb0UAAAAAAAAvRQAAAAAAAABAAAAdL0UAAAAAAAAvRQAAAAAAAABAAAAb70UAAAAAAAAvRQAAAAAAAABAAAAIA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9FAAAAAAAAL0UAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " ge"
					},
					"AwAAAOMUAAAAAAAA5BQAAAAAAAAAAAAA5BQAAAAAAADlFAAAAAAAAAAAAADlFAAAAAAAAOYUAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADjFAAAAAAAAOMUAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert_completion",
					{
						"completion": "geometry",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "geometry"
					},
					"AgAAAOQUAAAAAAAA5BQAAAAAAAACAAAAZ2XkFAAAAAAAAOwUAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmFAAAAAAAAOYUAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "Data"
					},
					"BAAAAOwUAAAAAAAA7RQAAAAAAAAAAAAA7RQAAAAAAADuFAAAAAAAAAAAAADuFAAAAAAAAO8UAAAAAAAAAAAAAO8UAAAAAAAA8BQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsFAAAAAAAAOwUAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAPAUAAAAAAAA8RQAAAAAAAAAAAAA8RQAAAAAAADyFAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwFAAAAAAAAPAUAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPIUAAAAAAAA8xQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADyFAAAAAAAAPIUAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAPMUAAAAAAAA9RQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADzFAAAAAAAAPMUAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAPUUAAAAAAAA9xQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD1FAAAAAAAAPUUAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAPUUAAAAAAAA9RQAAAAAAAABAAAAJ/UUAAAAAAAA9RQAAAAAAAABAAAAJw",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2FAAAAAAAAPYUAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAPUUAAAAAAAA9hQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD1FAAAAAAAAPUUAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "\nge"
					},
					"BAAAAPYUAAAAAAAA9xQAAAAAAAAAAAAA9xQAAAAAAAD/FAAAAAAAAAAAAAD/FAAAAAAAAAAVAAAAAAAAAAAAAAAVAAAAAAAAARUAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2FAAAAAAAAPYUAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert_completion",
					{
						"completion": "geometryData",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "geometryData"
					},
					"AgAAAP8UAAAAAAAA/xQAAAAAAAACAAAAZ2X/FAAAAAAAAAsVAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABFQAAAAAAAAEVAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": ".tr"
					},
					"AwAAAAsVAAAAAAAADBUAAAAAAAAAAAAADBUAAAAAAAANFQAAAAAAAAAAAAANFQAAAAAAAA4VAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALFQAAAAAAAAsVAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert_completion",
					{
						"completion": "triangles",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "triangles"
					},
					"AgAAAAwVAAAAAAAADBUAAAAAAAACAAAAdHIMFQAAAAAAABUVAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOFQAAAAAAAA4VAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAABUVAAAAAAAAFhUAAAAAAAAAAAAAFhUAAAAAAAAXFQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAVFQAAAAAAABUVAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABcVAAAAAAAAGBUAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAXFQAAAAAAABcVAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					1,
					"paste",
					null,
					"AQAAABgVAAAAAAAAIRUAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAYFQAAAAAAABgVAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAACEVAAAAAAAAIhUAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhFQAAAAAAACEVAAAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					1,
					"paste",
					null,
					"AgAAAE4VAAAAAAAAWhUAAAAAAAAAAAAAWhUAAAAAAABaFQAAAAAAAEAAAABWa0FjY2VsZXJhdGlvblN0cnVjdHVyZUdlb21ldHJ5RGF0YUtIUnsgLnRyaWFuZ2xlcyA9IHRyaWFuZ2xlcyB9",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABOFQAAAAAAAI4VAAAAAAAAAAAAAAAA8L8"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAKEcAAAAAAAAohwAAAAAAAAAAAAAohwAAAAAAACjHAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChHAAAAAAAAKEcAAAAAAAAAAAAAAAA8L8"
				],
				[
					60,
					1,
					"paste",
					null,
					"AQAAAKMcAAAAAAAAah0AAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjHAAAAAAAAKMcAAAAAAAAAAAAAAAA8L8"
				],
				[
					66,
					1,
					"paste",
					null,
					"AgAAAMAcAAAAAAAA4hwAAAAAAAAAAAAA4hwAAAAAAADiHAAAAAAAAAYAAABCdWZmZXI",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADAHAAAAAAAAMYcAAAAAAAAAAAAAAAA8L8"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": " &"
					},
					"AgAAAOIcAAAAAAAA4xwAAAAAAAAAAAAA4xwAAAAAAADkHAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADiHAAAAAAAAOIcAAAAAAAAAAAAAAAA8L8"
				],
				[
					68,
					6,
					"right_delete",
					null,
					"BgAAAOQcAAAAAAAA5BwAAAAAAAABAAAAIOQcAAAAAAAA5BwAAAAAAAABAAAAKuQcAAAAAAAA5BwAAAAAAAABAAAAYuQcAAAAAAAA5BwAAAAAAAABAAAAdeQcAAAAAAAA5BwAAAAAAAABAAAAZuQcAAAAAAAA5BwAAAAAAAABAAAAZg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADkHAAAAAAAAOQcAAAAAAAAAAAAAAAA8L8"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": "geo"
					},
					"AwAAAOQcAAAAAAAA5RwAAAAAAAAAAAAA5RwAAAAAAADmHAAAAAAAAAAAAADmHAAAAAAAAOccAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADkHAAAAAAAAOQcAAAAAAAAAAAAAAAA8L8"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": "metry"
					},
					"BQAAAOccAAAAAAAA6BwAAAAAAAAAAAAA6BwAAAAAAADpHAAAAAAAAAAAAADpHAAAAAAAAOocAAAAAAAAAAAAAOocAAAAAAAA6xwAAAAAAAAAAAAA6xwAAAAAAADsHAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnHAAAAAAAAOccAAAAAAAAAAAAAAAA8L8"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAAMAcAAAAAAAAwRwAAAAAAAAAAAAAwRwAAAAAAADCHAAAAAAAAAAAAADCHAAAAAAAAMMcAAAAAAAAAAAAAMMcAAAAAAAAxBwAAAAAAAAAAAAAxBwAAAAAAADFHAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADAHAAAAAAAAMAcAAAAAAAAAAAAAAAA8L8"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMUcAAAAAAAAxhwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADFHAAAAAAAAMUcAAAAAAAAAAAAAAAA8L8"
				],
				[
					83,
					1,
					"paste",
					null,
					"AgAAAAsdAAAAAAAALR0AAAAAAAAAAAAALR0AAAAAAAAtHQAAAAAAAAYAAABCdWZmZXI",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALHQAAAAAAABEdAAAAAAAAAAAAAAAA8L8"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAKIcAAAAAAAAoxwAAAAAAAAAAAAAoxwAAAAAAACkHAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACiHAAAAAAAAKIcAAAAAAAAAAAAAAAA8L8"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": "inli"
					},
					"BAAAAKMcAAAAAAAApBwAAAAAAAAAAAAApBwAAAAAAAClHAAAAAAAAAAAAAClHAAAAAAAAKYcAAAAAAAAAAAAAKYcAAAAAAAApxwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjHAAAAAAAAKMcAAAAAAAAAAAAAAAAAAA"
				],
				[
					89,
					1,
					"insert_completion",
					{
						"completion": "inline",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "inline"
					},
					"AgAAAKMcAAAAAAAAoxwAAAAAAAAEAAAAaW5saaMcAAAAAAAAqRwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACnHAAAAAAAAKccAAAAAAAAAAAAAAAA8L8"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": " std::s"
					},
					"BwAAAKkcAAAAAAAAqhwAAAAAAAAAAAAAqhwAAAAAAACrHAAAAAAAAAAAAACrHAAAAAAAAKwcAAAAAAAAAAAAAKwcAAAAAAAArRwAAAAAAAAAAAAArRwAAAAAAACuHAAAAAAAAAAAAACuHAAAAAAAAK8cAAAAAAAAAAAAAK8cAAAAAAAAsBwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpHAAAAAAAAKkcAAAAAAAAAAAAAAAA8L8"
				],
				[
					91,
					1,
					"insert_completion",
					{
						"completion": "string",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "string"
					},
					"AgAAAK8cAAAAAAAArxwAAAAAAAABAAAAc68cAAAAAAAAtRwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwHAAAAAAAALAcAAAAAAAAAAAAAAAA8L8"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAALUcAAAAAAAAthwAAAAAAAAAAAAAthwAAAAAAAC3HAAAAAAAAAAAAAC3HAAAAAAAALgcAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1HAAAAAAAALUcAAAAAAAAAAAAAAAA8L8"
				],
				[
					93,
					1,
					"insert_completion",
					{
						"completion": "to_string",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "to_string"
					},
					"AgAAALYcAAAAAAAAthwAAAAAAAACAAAAdG+2HAAAAAAAAL8cAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4HAAAAAAAALgcAAAAAAAAAAAAAAAA8L8"
				],
				[
					94,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAL8cAAAAAAAAwRwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC/HAAAAAAAAL8cAAAAAAAAAAAAAAAA8L8"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAAMAcAAAAAAAAwRwAAAAAAAAAAAAAwRwAAAAAAADCHAAAAAAAAAAAAADCHAAAAAAAAMMcAAAAAAAAAAAAAMMcAAAAAAAAxBwAAAAAAAAAAAAAxBwAAAAAAADFHAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADAHAAAAAAAAMAcAAAAAAAAAAAAAAAA8L8"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMUcAAAAAAAAxhwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADFHAAAAAAAAMUcAAAAAAAAAAAAAAAA8L8"
				],
				[
					100,
					1,
					"paste",
					null,
					"AgAAAMAcAAAAAAAAzxwAAAAAAAAAAAAAzxwAAAAAAADPHAAAAAAAAAUAAABjb25zdA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADAHAAAAAAAAMUcAAAAAAAAAAAAAAAA8L8"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": " type"
					},
					"BQAAAM8cAAAAAAAA0BwAAAAAAAAAAAAA0BwAAAAAAADRHAAAAAAAAAAAAADRHAAAAAAAANIcAAAAAAAAAAAAANIcAAAAAAAA0xwAAAAAAAAAAAAA0xwAAAAAAADUHAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADPHAAAAAAAAM8cAAAAAAAAAAAAAAAA8L8"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "vk"
					},
					"AgAAANAcAAAAAAAA0RwAAAAAAAAAAAAA0RwAAAAAAADSHAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADQHAAAAAAAANAcAAAAAAAAAAAAAAAA8L8"
				],
				[
					104,
					1,
					"right_delete",
					null,
					"AQAAANIcAAAAAAAA0hwAAAAAAAABAAAAdA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSHAAAAAAAANIcAAAAAAAAAAAAAAAA8L8"
				],
				[
					105,
					1,
					"insert",
					{
						"characters": "T"
					},
					"AQAAANIcAAAAAAAA0xwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSHAAAAAAAANIcAAAAAAAAAAAAAAAA8L8"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANgcAAAAAAAA2RwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADYHAAAAAAAANgcAAAAAAAAAAAAAAAA8L8"
				],
				[
					108,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAANkcAAAAAAAA2xwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADZHAAAAAAAANkcAAAAAAAAAAAAAAAA8L8"
				],
				[
					109,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAANocAAAAAAAA2xwAAAAAAAAAAAAA2xwAAAAAAADcHAAAAAAAAAAAAADbHAAAAAAAAN8cAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADaHAAAAAAAANocAAAAAAAAAAAAAAAA8L8"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": "str"
					},
					"AwAAAN8cAAAAAAAA4BwAAAAAAAAAAAAA4BwAAAAAAADhHAAAAAAAAAAAAADhHAAAAAAAAOIcAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfHAAAAAAAAN8cAAAAAAAAAAAAAAAA8L8"
				],
				[
					111,
					1,
					"left_delete",
					null,
					"AQAAAOEcAAAAAAAA4RwAAAAAAAABAAAAcg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADiHAAAAAAAAOIcAAAAAAAAAAAAAAAA8L8"
				],
				[
					112,
					1,
					"insert_completion",
					{
						"completion": "std",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "std"
					},
					"AgAAAN8cAAAAAAAA3xwAAAAAAAACAAAAc3TfHAAAAAAAAOIcAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhHAAAAAAAAOEcAAAAAAAAAAAAAAAA8L8"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": "::str"
					},
					"BQAAAOIcAAAAAAAA4xwAAAAAAAAAAAAA4xwAAAAAAADkHAAAAAAAAAAAAADkHAAAAAAAAOUcAAAAAAAAAAAAAOUcAAAAAAAA5hwAAAAAAAAAAAAA5hwAAAAAAADnHAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADiHAAAAAAAAOIcAAAAAAAAAAAAAAAA8L8"
				],
				[
					114,
					1,
					"insert_completion",
					{
						"completion": "string",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "string"
					},
					"AgAAAOQcAAAAAAAA5BwAAAAAAAADAAAAc3Ry5BwAAAAAAADqHAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnHAAAAAAAAOccAAAAAAAAAAAAAAAA8L8"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": " s"
					},
					"AgAAAOocAAAAAAAA6xwAAAAAAAAAAAAA6xwAAAAAAADsHAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADqHAAAAAAAAOocAAAAAAAAAAAAAAAA8L8"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAOwcAAAAAAAA7RwAAAAAAAAAAAAA7RwAAAAAAADuHAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsHAAAAAAAAOwcAAAAAAAAAAAAAAAA8L8"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAO4cAAAAAAAA7xwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuHAAAAAAAAO4cAAAAAAAAAAAAAAAA8L8"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": "VkS"
					},
					"AwAAAO8cAAAAAAAA8BwAAAAAAAAAAAAA8BwAAAAAAADxHAAAAAAAAAAAAADxHAAAAAAAAPIcAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvHAAAAAAAAO8cAAAAAAAAAAAAAAAA8L8"
				],
				[
					119,
					1,
					"insert_completion",
					{
						"completion": "VkStructureType",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "VkStructureType"
					},
					"AgAAAO8cAAAAAAAA7xwAAAAAAAADAAAAVmtT7xwAAAAAAAD+HAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADyHAAAAAAAAPIcAAAAAAAAAAAAAAAA8L8"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAP4cAAAAAAAA/xwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD+HAAAAAAAAP4cAAAAAAAAAAAAAAAA8L8"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAP8cAAAAAAAAAB0AAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/HAAAAAAAAP8cAAAAAAAAAAAAAAAA8L8"
				],
				[
					122,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAAAdAAAAAAAAAh0AAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAHQAAAAAAAAAdAAAAAAAAAAAAAAAA8L8"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "\""
					},
					"AQAAAO8cAAAAAAAA8BwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvHAAAAAAAAO8cAAAAAAAAAAAAAAAA8L8"
				],
				[
					126,
					1,
					"right_delete",
					null,
					"AQAAAAEdAAAAAAAAAR0AAAAAAAABAAAAIg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABHQAAAAAAAAEdAAAAAAAAAAAAAAAA8L8"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAAIdAAAAAAAAAx0AAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACHQAAAAAAAAIdAAAAAAAAAAAAAAAA8L8"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "\ncas"
					},
					"BQAAAAMdAAAAAAAABB0AAAAAAAAAAAAABB0AAAAAAAAIHQAAAAAAAAAAAAAIHQAAAAAAAAkdAAAAAAAAAAAAAAkdAAAAAAAACh0AAAAAAAAAAAAACh0AAAAAAAALHQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAADHQAAAAAAAAMdAAAAAAAAAAAAAAAA8L8"
				],
				[
					130,
					3,
					"left_delete",
					null,
					"AwAAAAodAAAAAAAACh0AAAAAAAABAAAAcwkdAAAAAAAACR0AAAAAAAABAAAAYQgdAAAAAAAACB0AAAAAAAABAAAAYw",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALHQAAAAAAAAsdAAAAAAAAAAAAAAAA8L8"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": "sw"
					},
					"AgAAAAgdAAAAAAAACR0AAAAAAAAAAAAACR0AAAAAAAAKHQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAIHQAAAAAAAAgdAAAAAAAAAAAAAAAA8L8"
				],
				[
					132,
					1,
					"insert_completion",
					{
						"completion": "switch",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "switch"
					},
					"AgAAAAgdAAAAAAAACB0AAAAAAAACAAAAc3cIHQAAAAAAAA4dAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAKHQAAAAAAAAodAAAAAAAAAAAAAAAA8L8"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAA4dAAAAAAAADx0AAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOHQAAAAAAAA4dAAAAAAAAAAAAAAAA8L8"
				],
				[
					134,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAA8dAAAAAAAAER0AAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPHQAAAAAAAA8dAAAAAAAAAAAAAAAA8L8"
				],
				[
					135,
					1,
					"insert",
					{
						"characters": "vk"
					},
					"AgAAABAdAAAAAAAAER0AAAAAAAAAAAAAER0AAAAAAAASHQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQHQAAAAAAABAdAAAAAAAAAAAAAAAA8L8"
				],
				[
					137,
					1,
					"insert_completion",
					{
						"completion": "vkType",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "vkType"
					},
					"AgAAABAdAAAAAAAAEB0AAAAAAAACAAAAdmsQHQAAAAAAABYdAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASHQAAAAAAABIdAAAAAAAAAAAAAAAA8L8"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABcdAAAAAAAAGB0AAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAXHQAAAAAAABcdAAAAAAAAAAAAAAAA8L8"
				],
				[
					140,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAABgdAAAAAAAAGh0AAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAYHQAAAAAAABgdAAAAAAAAAAAAAAAA8L8"
				],
				[
					141,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAABkdAAAAAAAAGh0AAAAAAAAAAAAAGh0AAAAAAAAeHQAAAAAAAAAAAAAeHQAAAAAAAB8dAAAAAAAAAAAAAB8dAAAAAAAAIx0AAAAAAAAAAAAAGh0AAAAAAAAaHQAAAAAAAAQAAAAgICAgGh0AAAAAAAAiHQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAZHQAAAAAAABkdAAAAAAAAAAAAAAAA8L8"
				],
				[
					142,
					1,
					"insert",
					{
						"characters": "case:"
					},
					"BQAAACIdAAAAAAAAIx0AAAAAAAAAAAAAIx0AAAAAAAAkHQAAAAAAAAAAAAAkHQAAAAAAACUdAAAAAAAAAAAAACUdAAAAAAAAJh0AAAAAAAAAAAAAJh0AAAAAAAAnHQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiHQAAAAAAACIdAAAAAAAAAAAAAAAA8L8"
				],
				[
					143,
					1,
					"left_delete",
					null,
					"AQAAACYdAAAAAAAAJh0AAAAAAAABAAAAOg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAnHQAAAAAAACcdAAAAAAAAAAAAAAAA8L8"
				],
				[
					144,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACYdAAAAAAAAJx0AAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAmHQAAAAAAACYdAAAAAAAAAAAAAAAA8L8"
				],
				[
					147,
					1,
					"paste",
					null,
					"AQAAACcdAAAAAAAAXB0AAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAnHQAAAAAAACcdAAAAAAAAAAAAAAAA8L8"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAFwdAAAAAAAAXR0AAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABcHQAAAAAAAFwdAAAAAAAAAAAAAAAA8L8"
				],
				[
					149,
					1,
					"insert",
					{
						"characters": "\n\t"
					},
					"AwAAAF0dAAAAAAAAXh0AAAAAAAAAAAAAXh0AAAAAAABmHQAAAAAAAAAAAABmHQAAAAAAAGodAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABdHQAAAAAAAF0dAAAAAAAAAAAAAAAA8L8"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAGodAAAAAAAAax0AAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqHQAAAAAAAGodAAAAAAAAAAAAAAAA8L8"
				],
				[
					151,
					1,
					"insert",
					{
						"characters": " +="
					},
					"AwAAAGsdAAAAAAAAbB0AAAAAAAAAAAAAbB0AAAAAAABtHQAAAAAAAAAAAABtHQAAAAAAAG4dAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrHQAAAAAAAGsdAAAAAAAAAAAAAAAA8L8"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAG4dAAAAAAAAbx0AAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABuHQAAAAAAAG4dAAAAAAAAAAAAAAAA8L8"
				],
				[
					153,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAG8dAAAAAAAAcR0AAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABvHQAAAAAAAG8dAAAAAAAAAAAAAAAA8L8"
				],
				[
					156,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAMdAAAAAAAABB0AAAAAAAAAAAAABB0AAAAAAAAIHQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAADHQAAAAAAAAMdAAAAAAAAAAAAAAAA8L8"
				],
				[
					157,
					1,
					"paste",
					null,
					"AQAAAAgdAAAAAAAAzh4AAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAIHQAAAAAAAAgdAAAAAAAAAAAAAAAA8L8"
				],
				[
					158,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAM4eAAAAAAAAzx4AAAAAAAAAAAAAzx4AAAAAAADXHgAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADOHgAAAAAAAM4eAAAAAAAAAAAAAAAA8L8"
				],
				[
					161,
					1,
					"left_delete",
					null,
					"AgAAAAwdAAAAAAAADB0AAAAAAAAEAAAAICAgIMseAAAAAAAAyx4AAAAAAAAIAAAAICAgICAgICA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQHQAAAAAAABAdAAAAAAAAAAAAAAAA8L8"
				],
				[
					164,
					1,
					"unindent",
					null,
					"DgAAAAQdAAAAAAAABB0AAAAAAAAEAAAAICAgIEAdAAAAAAAAQB0AAAAAAAAEAAAAICAgIFMdAAAAAAAAUx0AAAAAAAAEAAAAICAgIHMdAAAAAAAAcx0AAAAAAAAEAAAAICAgIJEdAAAAAAAAkR0AAAAAAAAEAAAAICAgIK8dAAAAAAAArx0AAAAAAAAEAAAAICAgINEdAAAAAAAA0R0AAAAAAAAEAAAAICAgIO8dAAAAAAAA7x0AAAAAAAAEAAAAICAgIAweAAAAAAAADB4AAAAAAAAEAAAAICAgICkeAAAAAAAAKR4AAAAAAAAEAAAAICAgIDoeAAAAAAAAOh4AAAAAAAAEAAAAICAgIF0eAAAAAAAAXR4AAAAAAAAEAAAAICAgIHQeAAAAAAAAdB4AAAAAAAAEAAAAICAgIHoeAAAAAAAAeh4AAAAAAAAEAAAAICAgIA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKHgAAAAAAAAQdAAAAAAAAAAAAAAAA8L8"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": "tye"
					},
					"BAAAAEsdAAAAAAAATB0AAAAAAAAAAAAATB0AAAAAAABMHQAAAAAAAAQAAABUeXBlTB0AAAAAAABNHQAAAAAAAAAAAABNHQAAAAAAAE4dAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABLHQAAAAAAAE8dAAAAAAAAAAAAAAAA8L8"
				],
				[
					171,
					1,
					"insert_completion",
					{
						"completion": "type",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "type"
					},
					"AgAAAEsdAAAAAAAASx0AAAAAAAADAAAAdHllSx0AAAAAAABPHQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABOHQAAAAAAAE4dAAAAAAAAAAAAAAAA8L8"
				],
				[
					179,
					1,
					"paste",
					null,
					"AgAAAEsdAAAAAAAAUR0AAAAAAAAAAAAAUR0AAAAAAABRHQAAAAAAAAQAAAB0eXBl",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABLHQAAAAAAAE8dAAAAAAAAAAAAAAAA8L8"
				],
				[
					187,
					1,
					"paste",
					null,
					"AgAAAGsdAAAAAAAAoB0AAAAAAAAAAAAAoB0AAAAAAACgHQAAAAAAAAcAAABVbmtub3du",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrHQAAAAAAAHIdAAAAAAAAAAAAAAAA8L8"
				],
				[
					192,
					3,
					"right_delete",
					null,
					"AwAAACYdAAAAAAAAJh0AAAAAAAAKAAAARm9ybWF0VHlwZSYdAAAAAAAAJh0AAAAAAAABAAAAOiYdAAAAAAAAJh0AAAAAAAABAAAAOg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAmHQAAAAAAADAdAAAAAAAAAAAAAAAA8L8"
				],
				[
					195,
					1,
					"insert",
					{
						"characters": "std::s"
					},
					"BgAAADAdAAAAAAAAMR0AAAAAAAAAAAAAMR0AAAAAAAAyHQAAAAAAAAAAAAAyHQAAAAAAADMdAAAAAAAAAAAAADMdAAAAAAAANB0AAAAAAAAAAAAANB0AAAAAAAA1HQAAAAAAAAAAAAA1HQAAAAAAADYdAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwHQAAAAAAADAdAAAAAAAAAAAAAAAA8L8"
				],
				[
					196,
					1,
					"insert",
					{
						"characters": "tring("
					},
					"BgAAADYdAAAAAAAANx0AAAAAAAAAAAAANx0AAAAAAAA4HQAAAAAAAAAAAAA4HQAAAAAAADkdAAAAAAAAAAAAADkdAAAAAAAAOh0AAAAAAAAAAAAAOh0AAAAAAAA7HQAAAAAAAAAAAAA7HQAAAAAAADwdAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2HQAAAAAAADYdAAAAAAAAAAAAAAAA8L8"
				],
				[
					197,
					1,
					"insert",
					{
						"characters": "\"C"
					},
					"AgAAADwdAAAAAAAAPR0AAAAAAAAAAAAAPR0AAAAAAAA+HQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA8HQAAAAAAADwdAAAAAAAAAAAAAAAA8L8"
				],
				[
					198,
					1,
					"left_delete",
					null,
					"AQAAAD0dAAAAAAAAPR0AAAAAAAABAAAAQw",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA+HQAAAAAAAD4dAAAAAAAAAAAAAAAA8L8"
				],
				[
					199,
					1,
					"insert",
					{
						"characters": "Vk"
					},
					"AgAAAD0dAAAAAAAAPh0AAAAAAAAAAAAAPh0AAAAAAAA/HQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA9HQAAAAAAAD0dAAAAAAAAAAAAAAAA8L8"
				],
				[
					201,
					1,
					"insert_completion",
					{
						"completion": "VkStructureType",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "VkStructureType"
					},
					"AgAAAD0dAAAAAAAAPR0AAAAAAAACAAAAVms9HQAAAAAAAEwdAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA/HQAAAAAAAD8dAAAAAAAAAAAAAAAA8L8"
				],
				[
					202,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAEwdAAAAAAAATR0AAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMHQAAAAAAAEwdAAAAAAAAAAAAAAAA8L8"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": " \""
					},
					"AgAAAE0dAAAAAAAATh0AAAAAAAAAAAAATh0AAAAAAABPHQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNHQAAAAAAAE0dAAAAAAAAAAAAAAAA8L8"
				],
				[
					204,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAE8dAAAAAAAAUB0AAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABPHQAAAAAAAE8dAAAAAAAAAAAAAAAA8L8"
				],
				[
					205,
					1,
					"insert",
					{
						"characters": " _"
					},
					"AgAAAFAdAAAAAAAAUR0AAAAAAAAAAAAAUR0AAAAAAABSHQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABQHQAAAAAAAFAdAAAAAAAAAAAAAAAA8L8"
				],
				[
					206,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFIdAAAAAAAAUx0AAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSHQAAAAAAAFIdAAAAAAAAAAAAAAAA8L8"
				],
				[
					207,
					2,
					"left_delete",
					null,
					"AgAAAFIdAAAAAAAAUh0AAAAAAAABAAAAIFEdAAAAAAAAUR0AAAAAAAABAAAAXw",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABTHQAAAAAAAFMdAAAAAAAAAAAAAAAA8L8"
				],
				[
					208,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAAFEdAAAAAAAAUh0AAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABRHQAAAAAAAFEdAAAAAAAAAAAAAAAA8L8"
				],
				[
					209,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFIdAAAAAAAAUx0AAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSHQAAAAAAAFIdAAAAAAAAAAAAAAAA8L8"
				],
				[
					216,
					2,
					"left_delete",
					null,
					"AgAAALodAAAAAAAAuh0AAAAAAAC1AAAAICAgICAgICB0eXBlXzJfc3RyaW5nKEZsb2F0KTsKICAgICAgICB0eXBlXzJfc3RyaW5nKFVub3JtKTsKICAgICAgICB0eXBlXzJfc3RyaW5nKFVub3JtU3JnYik7CiAgICAgICAgdHlwZV8yX3N0cmluZyhTbm9ybSk7CiAgICAgICAgdHlwZV8yX3N0cmluZyhVaW50KTsKICAgICAgICB0eXBlXzJfc3RyaW5nKFNpbnQpO7kdAAAAAAAAuR0AAAAAAAABAAAACg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABvHgAAAAAAALodAAAAAAAAAAAAAAAA8L8"
				],
				[
					219,
					2,
					"left_delete",
					null,
					"AgAAACQeAAAAAAAAJB4AAAAAAAB0AAAACiAgICBzd2l0Y2ggKHZrVHlwZSkgewogICAgICAgIGNhc2UgVktfU1RSVUNUVVJFX1RZUEVfQUNDRUxFUkFUSU9OX1NUUlVDVFVSRV9HRU9NRVRSWV9LSFI6CiAgICAgICAgICAgIHMgKz0gIiIKICAgIH0jHgAAAAAAACMeAAAAAAAAAQAAAAo",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACYHgAAAAAAACQeAAAAAAAAAAAAAAAA8L8"
				],
				[
					227,
					1,
					"paste",
					null,
					"AQAAAAIeAAAAAAAAEx4AAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACHgAAAAAAAAIeAAAAAAAAAAAAAAAA8L8"
				],
				[
					228,
					1,
					"insert",
					{
						"characters": "UNK"
					},
					"AwAAABMeAAAAAAAAFB4AAAAAAAAAAAAAFB4AAAAAAAAVHgAAAAAAAAAAAAAVHgAAAAAAABYeAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATHgAAAAAAABMeAAAAAAAAAAAAAAAA8L8"
				],
				[
					229,
					1,
					"insert",
					{
						"characters": "NOWN"
					},
					"BAAAABYeAAAAAAAAFx4AAAAAAAAAAAAAFx4AAAAAAAAYHgAAAAAAAAAAAAAYHgAAAAAAABkeAAAAAAAAAAAAABkeAAAAAAAAGh4AAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAWHgAAAAAAABYeAAAAAAAAAAAAAAAA8L8"
				],
				[
					232,
					1,
					"left_delete",
					null,
					"AQAAAMoeAAAAAAAAyh4AAAAAAAABAAAAIA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLHgAAAAAAAMseAAAAAAAAAAAAAAAA8L8"
				],
				[
					233,
					1,
					"insert",
					{
						"characters": "\\n"
					},
					"AgAAAMoeAAAAAAAAyx4AAAAAAAAAAAAAyx4AAAAAAADMHgAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKHgAAAAAAAMoeAAAAAAAAAAAAAAAA8L8"
				],
				[
					243,
					1,
					"paste",
					null,
					"AgAAANkeAAAAAAAA3h4AAAAAAAAAAAAA3h4AAAAAAADeHgAAAAAAAAMAAABjcHU",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADZHgAAAAAAANweAAAAAAAAAAAAAAAA8L8"
				],
				[
					251,
					1,
					"paste",
					null,
					"AgAAAPQeAAAAAAAA/B4AAAAAAAAAAAAA/B4AAAAAAAD8HgAAAAAAAAQAAABidWZm",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD0HgAAAAAAAPgeAAAAAAAAAAAAAAAA8L8"
				],
				[
					252,
					2,
					"right_delete",
					null,
					"AgAAAPweAAAAAAAA/B4AAAAAAAABAAAALfweAAAAAAAA/B4AAAAAAAABAAAAPg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD8HgAAAAAAAPweAAAAAAAAAAAAAAAA8L8"
				],
				[
					253,
					1,
					"insert",
					{
						"characters": ".sTyoe"
					},
					"BgAAAPweAAAAAAAA/R4AAAAAAAAAAAAA/R4AAAAAAAD+HgAAAAAAAAAAAAD+HgAAAAAAAP8eAAAAAAAAAAAAAP8eAAAAAAAAAB8AAAAAAAAAAAAAAB8AAAAAAAABHwAAAAAAAAAAAAABHwAAAAAAAAIfAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD8HgAAAAAAAPweAAAAAAAAAAAAAAAA8L8"
				],
				[
					255,
					7,
					"right_delete",
					null,
					"BwAAAAAfAAAAAAAAAB8AAAAAAAABAAAAbwAfAAAAAAAAAB8AAAAAAAABAAAAZQAfAAAAAAAAAB8AAAAAAAABAAAAZwAfAAAAAAAAAB8AAAAAAAABAAAAZQAfAAAAAAAAAB8AAAAAAAABAAAAdAAfAAAAAAAAAB8AAAAAAAABAAAAVAAfAAAAAAAAAB8AAAAAAAABAAAAeQ",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAHwAAAAAAAAAfAAAAAAAAAAAAAAAA8L8"
				],
				[
					257,
					2,
					"right_delete",
					null,
					"AgAAAAIfAAAAAAAAAh8AAAAAAAABAAAAKAIfAAAAAAAAAh8AAAAAAAABAAAAKQ",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACHwAAAAAAAAIfAAAAAAAAAAAAAAAA8L8"
				],
				[
					260,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AgAAAN4eAAAAAAAA3x4AAAAAAAAAAAAA3x4AAAAAAADfHgAAAAAAAAcAAAAgYWNjZXNz",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADeHgAAAAAAAOUeAAAAAAAAAAAAAAAA8L8"
				],
				[
					263,
					1,
					"insert",
					{
						"characters": "\\n"
					},
					"AgAAANkeAAAAAAAA2h4AAAAAAAAAAAAA2h4AAAAAAADbHgAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADZHgAAAAAAANkeAAAAAAAAAAAAAAAA8L8"
				],
				[
					266,
					2,
					"right_delete",
					null,
					"AgAAAMoeAAAAAAAAyh4AAAAAAAABAAAAXMoeAAAAAAAAyh4AAAAAAAABAAAAbg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKHgAAAAAAAMoeAAAAAAAAAAAAAAAA8L8"
				],
				[
					272,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANkeAAAAAAAA2h4AAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADZHgAAAAAAANkeAAAAAAAAAAAAAAAA8L8"
				],
				[
					279,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAP8eAAAAAAAAAB8AAAAAAAAAAAAAAB8AAAAAAAAEHwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/HgAAAAAAAP8eAAAAAAAAAAAAAAAA8L8"
				],
				[
					280,
					1,
					"paste",
					null,
					"AQAAAAQfAAAAAAAAMh8AAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAEHwAAAAAAAAQfAAAAAAAAAAAAAAAA8L8"
				],
				[
					283,
					1,
					"insert",
					{
						"characters": "pNext"
					},
					"BQAAAA0fAAAAAAAADh8AAAAAAAAAAAAADh8AAAAAAAAPHwAAAAAAAAAAAAAPHwAAAAAAABAfAAAAAAAAAAAAABAfAAAAAAAAER8AAAAAAAAAAAAAER8AAAAAAAASHwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAANHwAAAAAAAA0fAAAAAAAAAAAAAAAA8L8"
				],
				[
					284,
					5,
					"right_delete",
					null,
					"BQAAABIfAAAAAAAAEh8AAAAAAAABAAAAcxIfAAAAAAAAEh8AAAAAAAABAAAAVBIfAAAAAAAAEh8AAAAAAAABAAAAeRIfAAAAAAAAEh8AAAAAAAABAAAAcBIfAAAAAAAAEh8AAAAAAAABAAAAZQ",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASHwAAAAAAABIfAAAAAAAAAAAAAAAA8L8"
				],
				[
					286,
					1,
					"insert",
					{
						"characters": "std::for"
					},
					"CAAAAAkfAAAAAAAACh8AAAAAAAAAAAAACh8AAAAAAAALHwAAAAAAAAAAAAALHwAAAAAAAAwfAAAAAAAAAAAAAAwfAAAAAAAADR8AAAAAAAAAAAAADR8AAAAAAAAOHwAAAAAAAAAAAAAOHwAAAAAAAA8fAAAAAAAAAAAAAA8fAAAAAAAAEB8AAAAAAAAAAAAAEB8AAAAAAAARHwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJHwAAAAAAAAkfAAAAAAAAAAAAAAAA8L8"
				],
				[
					287,
					1,
					"insert",
					{
						"characters": "mat(*"
					},
					"BQAAABEfAAAAAAAAEh8AAAAAAAAAAAAAEh8AAAAAAAATHwAAAAAAAAAAAAATHwAAAAAAABQfAAAAAAAAAAAAABQfAAAAAAAAFR8AAAAAAAAAAAAAFR8AAAAAAAAWHwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAARHwAAAAAAABEfAAAAAAAAAAAAAAAA8L8"
				],
				[
					288,
					1,
					"left_delete",
					null,
					"AQAAABUfAAAAAAAAFR8AAAAAAAABAAAAKg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAWHwAAAAAAABYfAAAAAAAAAAAAAAAA8L8"
				],
				[
					290,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AQAAABkfAAAAAAAAGh8AAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAZHwAAAAAAABkfAAAAAAAAAAAAAAAA8L8"
				],
				[
					291,
					1,
					"left_delete",
					null,
					"AQAAABkfAAAAAAAAGR8AAAAAAAABAAAAew",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAaHwAAAAAAABofAAAAAAAAAAAAAAAA8L8"
				],
				[
					293,
					1,
					"insert",
					{
						"characters": "{}"
					},
					"AgAAACAfAAAAAAAAIR8AAAAAAAAAAAAAIR8AAAAAAAAiHwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgHwAAAAAAACAfAAAAAAAAAAAAAAAA8L8"
				],
				[
					295,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACMfAAAAAAAAJB8AAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjHwAAAAAAACMfAAAAAAAAAAAAAAAA8L8"
				],
				[
					296,
					3,
					"right_delete",
					null,
					"AwAAACQfAAAAAAAAJB8AAAAAAAABAAAAICQfAAAAAAAAJB8AAAAAAAABAAAAKyQfAAAAAAAAJB8AAAAAAAABAAAAIA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkHwAAAAAAACQfAAAAAAAAAAAAAAAA8L8"
				],
				[
					301,
					10,
					"left_delete",
					null,
					"CgAAAC0fAAAAAAAALR8AAAAAAAABAAAAKCwfAAAAAAAALB8AAAAAAAABAAAAZysfAAAAAAAAKx8AAAAAAAABAAAAbiofAAAAAAAAKh8AAAAAAAABAAAAaSkfAAAAAAAAKR8AAAAAAAABAAAAcigfAAAAAAAAKB8AAAAAAAABAAAAdCcfAAAAAAAAJx8AAAAAAAABAAAAcyYfAAAAAAAAJh8AAAAAAAABAAAAXyUfAAAAAAAAJR8AAAAAAAABAAAAbyQfAAAAAAAAJB8AAAAAAAABAAAAdA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAuHwAAAAAAAC4fAAAAAAAAAAAAAAAA8L8"
				],
				[
					302,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACQfAAAAAAAAJR8AAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkHwAAAAAAACQfAAAAAAAAAAAAAAAA8L8"
				],
				[
					304,
					1,
					"insert",
					{
						"characters": "pNext"
					},
					"BQAAAC4fAAAAAAAALx8AAAAAAAAAAAAALx8AAAAAAAAwHwAAAAAAAAAAAAAwHwAAAAAAADEfAAAAAAAAAAAAADEfAAAAAAAAMh8AAAAAAAAAAAAAMh8AAAAAAAAzHwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAuHwAAAAAAAC4fAAAAAAAAAAAAAAAA8L8"
				],
				[
					305,
					5,
					"right_delete",
					null,
					"BQAAADMfAAAAAAAAMx8AAAAAAAABAAAAczMfAAAAAAAAMx8AAAAAAAABAAAAVDMfAAAAAAAAMx8AAAAAAAABAAAAeTMfAAAAAAAAMx8AAAAAAAABAAAAcDMfAAAAAAAAMx8AAAAAAAABAAAAZQ",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAzHwAAAAAAADMfAAAAAAAAAAAAAAAA8L8"
				],
				[
					308,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJ0AAAAAAAAAngAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdAAAAAAAAAJ0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					310,
					1,
					"insert",
					{
						"characters": "#include"
					},
					"CAAAAJ0AAAAAAAAAngAAAAAAAAAAAAAAngAAAAAAAACfAAAAAAAAAAAAAACfAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAAoQAAAAAAAAAAAAAAoQAAAAAAAACiAAAAAAAAAAAAAACiAAAAAAAAAKMAAAAAAAAAAAAAAKMAAAAAAAAApAAAAAAAAAAAAAAApAAAAAAAAAClAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdAAAAAAAAAJ0AAAAAAAAAAAAAAAAAAAA"
				],
				[
					311,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKUAAAAAAAAApgAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClAAAAAAAAAKUAAAAAAAAAAAAAAAAA8L8"
				],
				[
					312,
					1,
					"insert_snippet",
					{
						"contents": "<$0>"
					},
					"AQAAAKYAAAAAAAAAqAAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACmAAAAAAAAAKYAAAAAAAAAAAAAAAAA8L8"
				],
				[
					313,
					1,
					"insert",
					{
						"characters": "format"
					},
					"BgAAAKcAAAAAAAAAqAAAAAAAAAAAAAAAqAAAAAAAAACpAAAAAAAAAAAAAACpAAAAAAAAAKoAAAAAAAAAAAAAAKoAAAAAAAAAqwAAAAAAAAAAAAAAqwAAAAAAAACsAAAAAAAAAAAAAACsAAAAAAAAAK0AAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACnAAAAAAAAAKcAAAAAAAAAAAAAAAAA8L8"
				],
				[
					321,
					1,
					"paste",
					null,
					"AgAAABsfAAAAAAAAKh8AAAAAAAAAAAAAKh8AAAAAAAAqHwAAAAAAABwAAABzdGQ6OmZvcm1hdCgiXG4gcE5leHQ6IHt9Iiwg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbHwAAAAAAADcfAAAAAAAAAAAAAAAA8L8"
				],
				[
					323,
					1,
					"right_delete",
					null,
					"AQAAADgfAAAAAAAAOB8AAAAAAAABAAAAKQ",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA4HwAAAAAAADgfAAAAAAAAAAAAAAAA8L8"
				],
				[
					326,
					1,
					"insert",
					{
						"characters": "pNext"
					},
					"BQAAAB8fAAAAAAAAIB8AAAAAAAAAAAAAIB8AAAAAAAAhHwAAAAAAAAAAAAAhHwAAAAAAACIfAAAAAAAAAAAAACIfAAAAAAAAIx8AAAAAAAAAAAAAIx8AAAAAAAAkHwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfHwAAAAAAAB8fAAAAAAAAAAAAAAAA8L8"
				],
				[
					327,
					5,
					"right_delete",
					null,
					"BQAAACQfAAAAAAAAJB8AAAAAAAABAAAAcyQfAAAAAAAAJB8AAAAAAAABAAAAVCQfAAAAAAAAJB8AAAAAAAABAAAAeSQfAAAAAAAAJB8AAAAAAAABAAAAcCQfAAAAAAAAJB8AAAAAAAABAAAAZQ",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkHwAAAAAAACQfAAAAAAAAAAAAAAAA8L8"
				],
				[
					336,
					1,
					"left_delete",
					null,
					"AQAAAJ0AAAAAAAAAnQAAAAAAAAASAAAAI2luY2x1ZGUgPGZvcm1hdD4K",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdAAAAAAAAAK8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					339,
					1,
					"paste",
					null,
					"AQAAABgfAAAAAAAANh8AAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAYHwAAAAAAABgfAAAAAAAAAAAAAAAA8L8"
				],
				[
					341,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAEQfAAAAAAAARR8AAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABEHwAAAAAAAEQfAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/Falcor/Scene/AccelerationStructure.cpp",
			"settings":
			{
				"buffer_size": 19748,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "#include <algorithm>"
			},
			"undo_stack":
			[
				[
					1020,
					1,
					"insert",
					{
						"characters": "bui"
					},
					"AwAAAHUoAAAAAAAAdigAAAAAAAAAAAAAdigAAAAAAAB3KAAAAAAAAAAAAAB3KAAAAAAAAHgoAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHUoAAAAAAAAdSgAAAAAAAAAAAAAAADwvw"
				],
				[
					1021,
					1,
					"insert_completion",
					{
						"completion": "buildInfo",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "buildInfo"
					},
					"AgAAAHUoAAAAAAAAdSgAAAAAAAADAAAAYnVpdSgAAAAAAAB+KAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHgoAAAAAAAAeCgAAAAAAAAAAAAAAADwvw"
				],
				[
					1022,
					1,
					"insert",
					{
						"characters": ".s"
					},
					"AgAAAH4oAAAAAAAAfygAAAAAAAAAAAAAfygAAAAAAACAKAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH4oAAAAAAAAfigAAAAAAAAAAAAAAADwvw"
				],
				[
					1023,
					1,
					"insert_completion",
					{
						"completion": "srcAccelerationStructure",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "srcAccelerationStructure"
					},
					"AgAAAH8oAAAAAAAAfygAAAAAAAABAAAAc38oAAAAAAAAlygAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIAoAAAAAAAAgCgAAAAAAAAAAAAAAADwvw"
				],
				[
					1024,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAJcoAAAAAAAAmCgAAAAAAAAAAAAAmCgAAAAAAACZKAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcoAAAAAAAAlygAAAAAAAAAAAAAAADwvw"
				],
				[
					1025,
					1,
					"insert",
					{
						"characters": " mH"
					},
					"AwAAAJkoAAAAAAAAmigAAAAAAAAAAAAAmigAAAAAAACbKAAAAAAAAAAAAACbKAAAAAAAAJwoAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJkoAAAAAAAAmSgAAAAAAAAAAAAAAADwvw"
				],
				[
					1026,
					1,
					"insert_completion",
					{
						"completion": "mHandle",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mHandle"
					},
					"AgAAAJooAAAAAAAAmigAAAAAAAACAAAAbUiaKAAAAAAAAKEoAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJwoAAAAAAAAnCgAAAAAAAAAAAAAAADwvw"
				],
				[
					1027,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKEoAAAAAAAAoigAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKEoAAAAAAAAoSgAAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMAnAAAAAAAAwScAAAAAAAAAAAAAwScAAAAAAADFJwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADAJwAAAAAAAMAnAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "ass"
					},
					"AwAAAMAnAAAAAAAAwScAAAAAAAAAAAAAwScAAAAAAADCJwAAAAAAAAAAAADCJwAAAAAAAMMnAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADAJwAAAAAAAMAnAAAAAAAAAAAAAAAAQkA"
				],
				[
					6,
					1,
					"insert_completion",
					{
						"completion": "assert",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "assert"
					},
					"AgAAAMAnAAAAAAAAwCcAAAAAAAADAAAAYXNzwCcAAAAAAADGJwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDJwAAAAAAAMMnAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMYnAAAAAAAAyCcAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADGJwAAAAAAAMYnAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAMcnAAAAAAAAyCcAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADHJwAAAAAAAMcnAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert_completion",
					{
						"completion": "mGeometries",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mGeometries"
					},
					"AgAAAMcnAAAAAAAAxycAAAAAAAABAAAAbccnAAAAAAAA0icAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIJwAAAAAAAMgnAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAANInAAAAAAAA0ycAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSJwAAAAAAANInAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert_completion",
					{
						"completion": "size",
						"format": "text",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "size"
					},
					"AQAAANMnAAAAAAAA1ycAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADTJwAAAAAAANMnAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANcnAAAAAAAA2ScAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXJwAAAAAAANcnAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " <"
					},
					"AgAAANknAAAAAAAA2icAAAAAAAAAAAAA2icAAAAAAADbJwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADZJwAAAAAAANknAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANsnAAAAAAAA3CcAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADbJwAAAAAAANsnAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					2,
					"left_delete",
					null,
					"AgAAANsnAAAAAAAA2ycAAAAAAAABAAAAINonAAAAAAAA2icAAAAAAAABAAAAPA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADcJwAAAAAAANwnAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAANonAAAAAAAA2ycAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADaJwAAAAAAANonAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAANsnAAAAAAAA3CcAAAAAAAAAAAAA3CcAAAAAAADdJwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADbJwAAAAAAANsnAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAN4nAAAAAAAA3ycAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADeJwAAAAAAAN4nAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "\nLOF"
					},
					"BgAAACImAAAAAAAAIyYAAAAAAAAAAAAAIyYAAAAAAAAnJgAAAAAAAAAAAAAnJgAAAAAAACsmAAAAAAAAAAAAACsmAAAAAAAALCYAAAAAAAAAAAAALCYAAAAAAAAtJgAAAAAAAAAAAAAtJgAAAAAAAC4mAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiJgAAAAAAACImAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"left_delete",
					null,
					"AQAAAC0mAAAAAAAALSYAAAAAAAABAAAARg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAuJgAAAAAAAC4mAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert_completion",
					{
						"completion": "LOG_ERR",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "LOG_ERR"
					},
					"AgAAACsmAAAAAAAAKyYAAAAAAAACAAAATE8rJgAAAAAAADImAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAtJgAAAAAAAC0mAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADImAAAAAAAANCYAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAyJgAAAAAAADImAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAADMmAAAAAAAANSYAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAzJgAAAAAAADMmAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "Attemp"
					},
					"BgAAADQmAAAAAAAANSYAAAAAAAAAAAAANSYAAAAAAAA2JgAAAAAAAAAAAAA2JgAAAAAAADcmAAAAAAAAAAAAADcmAAAAAAAAOCYAAAAAAAAAAAAAOCYAAAAAAAA5JgAAAAAAAAAAAAA5JgAAAAAAADomAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA0JgAAAAAAADQmAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert_completion",
					{
						"completion": "Attempting",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Attempting"
					},
					"AgAAADQmAAAAAAAANCYAAAAAAAAGAAAAQXR0ZW1wNCYAAAAAAAA+JgAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6JgAAAAAAADomAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAAD4mAAAAAAAAPyYAAAAAAAAAAAAAPyYAAAAAAABAJgAAAAAAAAAAAABAJgAAAAAAAEEmAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA+JgAAAAAAAD4mAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " add"
					},
					"BAAAAEEmAAAAAAAAQiYAAAAAAAAAAAAAQiYAAAAAAABDJgAAAAAAAAAAAABDJgAAAAAAAEQmAAAAAAAAAAAAAEQmAAAAAAAARSYAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABBJgAAAAAAAEEmAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": " geo"
					},
					"BAAAAEUmAAAAAAAARiYAAAAAAAAAAAAARiYAAAAAAABHJgAAAAAAAAAAAABHJgAAAAAAAEgmAAAAAAAAAAAAAEgmAAAAAAAASSYAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABFJgAAAAAAAEUmAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert_completion",
					{
						"completion": "geometry",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "geometry"
					},
					"AgAAAEYmAAAAAAAARiYAAAAAAAADAAAAZ2VvRiYAAAAAAABOJgAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABJJgAAAAAAAEkmAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAAE4mAAAAAAAATyYAAAAAAAAAAAAATyYAAAAAAABQJgAAAAAAAAAAAABQJgAAAAAAAFEmAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABOJgAAAAAAAE4mAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": " acc"
					},
					"BAAAAFEmAAAAAAAAUiYAAAAAAAAAAAAAUiYAAAAAAABTJgAAAAAAAAAAAABTJgAAAAAAAFQmAAAAAAAAAAAAAFQmAAAAAAAAVSYAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABRJgAAAAAAAFEmAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"insert_completion",
					{
						"completion": "acceleration",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "acceleration"
					},
					"AgAAAFImAAAAAAAAUiYAAAAAAAADAAAAYWNjUiYAAAAAAABeJgAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABVJgAAAAAAAFUmAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": " s"
					},
					"AgAAAF4mAAAAAAAAXyYAAAAAAAAAAAAAXyYAAAAAAABgJgAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeJgAAAAAAAF4mAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					1,
					"insert_completion",
					{
						"completion": "structure",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "structure"
					},
					"AgAAAF8mAAAAAAAAXyYAAAAAAAABAAAAc18mAAAAAAAAaCYAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABgJgAAAAAAAGAmAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "already"
					},
					"BwAAAFImAAAAAAAAUyYAAAAAAAAAAAAAUyYAAAAAAABUJgAAAAAAAAAAAABUJgAAAAAAAFUmAAAAAAAAAAAAAFUmAAAAAAAAViYAAAAAAAAAAAAAViYAAAAAAABXJgAAAAAAAAAAAABXJgAAAAAAAFgmAAAAAAAAAAAAAFgmAAAAAAAAWSYAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSJgAAAAAAAFImAAAAAAAAAAAAAAAA8L8"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": " byui"
					},
					"BQAAAFkmAAAAAAAAWiYAAAAAAAAAAAAAWiYAAAAAAABbJgAAAAAAAAAAAABbJgAAAAAAAFwmAAAAAAAAAAAAAFwmAAAAAAAAXSYAAAAAAAAAAAAAXSYAAAAAAABeJgAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABZJgAAAAAAAFkmAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					3,
					"left_delete",
					null,
					"AwAAAF0mAAAAAAAAXSYAAAAAAAABAAAAaVwmAAAAAAAAXCYAAAAAAAABAAAAdVsmAAAAAAAAWyYAAAAAAAABAAAAeQ",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeJgAAAAAAAF4mAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "uilt"
					},
					"BAAAAFsmAAAAAAAAXCYAAAAAAAAAAAAAXCYAAAAAAABdJgAAAAAAAAAAAABdJgAAAAAAAF4mAAAAAAAAAAAAAF4mAAAAAAAAXyYAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABbJgAAAAAAAFsmAAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAF8mAAAAAAAAYCYAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABfJgAAAAAAAF8mAAAAAAAAAAAAAAAA8L8"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "!!!"
					},
					"AwAAAHYmAAAAAAAAdyYAAAAAAAAAAAAAdyYAAAAAAAB4JgAAAAAAAAAAAAB4JgAAAAAAAHkmAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB2JgAAAAAAAHYmAAAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAHsmAAAAAAAAfCYAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB7JgAAAAAAAHsmAAAAAAAAAAAAAAAA8L8"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "\ngeo"
					},
					"BQAAABUnAAAAAAAAFicAAAAAAAAAAAAAFicAAAAAAAAaJwAAAAAAAAAAAAAaJwAAAAAAABsnAAAAAAAAAAAAABsnAAAAAAAAHCcAAAAAAAAAAAAAHCcAAAAAAAAdJwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAVJwAAAAAAABUnAAAAAAAAAAAAAAAA8L8"
				],
				[
					68,
					1,
					"insert_completion",
					{
						"completion": "geometry",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "geometry"
					},
					"AgAAABonAAAAAAAAGicAAAAAAAADAAAAZ2VvGicAAAAAAAAiJwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAdJwAAAAAAAB0nAAAAAAAAAAAAAAAA8L8"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": ",o"
					},
					"AgAAACInAAAAAAAAIycAAAAAAAAAAAAAIycAAAAAAAAkJwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiJwAAAAAAACInAAAAAAAAAAAAAAAA8L8"
				],
				[
					70,
					2,
					"left_delete",
					null,
					"AgAAACMnAAAAAAAAIycAAAAAAAABAAAAbyInAAAAAAAAIicAAAAAAAABAAAALA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkJwAAAAAAACQnAAAAAAAAAAAAAAAA8L8"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": ".pN"
					},
					"AwAAACInAAAAAAAAIycAAAAAAAAAAAAAIycAAAAAAAAkJwAAAAAAAAAAAAAkJwAAAAAAACUnAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiJwAAAAAAACInAAAAAAAAAAAAAAAA8L8"
				],
				[
					72,
					1,
					"insert_completion",
					{
						"completion": "pNext",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "pNext"
					},
					"AgAAACMnAAAAAAAAIycAAAAAAAACAAAAcE4jJwAAAAAAACgnAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAlJwAAAAAAACUnAAAAAAAAAAAAAAAA8L8"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAACgnAAAAAAAAKScAAAAAAAAAAAAAKScAAAAAAAAqJwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAoJwAAAAAAACgnAAAAAAAAAAAAAAAA8L8"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": " N"
					},
					"AgAAAConAAAAAAAAKycAAAAAAAAAAAAAKycAAAAAAAAsJwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAqJwAAAAAAAConAAAAAAAAAAAAAAAA8L8"
				],
				[
					75,
					1,
					"insert_completion",
					{
						"completion": "NULL",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "NULL"
					},
					"AgAAACsnAAAAAAAAKycAAAAAAAABAAAATisnAAAAAAAALycAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAsJwAAAAAAACwnAAAAAAAAAAAAAAAA8L8"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAC8nAAAAAAAAMCcAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAvJwAAAAAAAC8nAAAAAAAAAAAAAAAA8L8"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPgoAAAAAAAA+SgAAAAAAAAAAAAA+SgAAAAAAAABKQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD4KAAAAAAAAPgoAAAAAAAAAAAAAAAA8L8"
				],
				[
					94,
					1,
					"paste",
					null,
					"AQAAAAEpAAAAAAAANSkAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABKQAAAAAAAAEpAAAAAAAAAAAAAAAA8L8"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAAAspAAAAAAAADCkAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALKQAAAAAAAAspAAAAAAAAAAAAAAAA8L8"
				],
				[
					99,
					2,
					"right_delete",
					null,
					"AgAAAA0pAAAAAAAADSkAAAAAAAABAAAAcg0pAAAAAAAADSkAAAAAAAABAAAAYw",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAANKQAAAAAAAA0pAAAAAAAAAAAAAAAA8L8"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAA0pAAAAAAAADikAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAANKQAAAAAAAA0pAAAAAAAAAAAAAAAA8L8"
				],
				[
					120,
					1,
					"right_delete",
					null,
					"AQAAAJ8lAAAAAAAAnyUAAAAAAAAFAAAAX2RhdGE",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACfJQAAAAAAAKQlAAAAAAAAAAAAAAAA8L8"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": "пущьуекн"
					},
					"CAAAALMlAAAAAAAAtCUAAAAAAAAAAAAAtCUAAAAAAAC1JQAAAAAAAAAAAAC1JQAAAAAAALYlAAAAAAAAAAAAALYlAAAAAAAAtyUAAAAAAAAAAAAAtyUAAAAAAAC4JQAAAAAAAAAAAAC4JQAAAAAAALklAAAAAAAAAAAAALklAAAAAAAAuiUAAAAAAAAAAAAAuiUAAAAAAAC7JQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzJQAAAAAAALMlAAAAAAAAAAAAAAAA8L8"
				],
				[
					123,
					8,
					"left_delete",
					null,
					"CAAAALolAAAAAAAAuiUAAAAAAAACAAAA0L25JQAAAAAAALklAAAAAAAAAgAAANC6uCUAAAAAAAC4JQAAAAAAAAIAAADQtbclAAAAAAAAtyUAAAAAAAACAAAA0YO2JQAAAAAAALYlAAAAAAAAAgAAANGMtSUAAAAAAAC1JQAAAAAAAAIAAADRibQlAAAAAAAAtCUAAAAAAAACAAAA0YOzJQAAAAAAALMlAAAAAAAAAgAAANC/",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7JQAAAAAAALslAAAAAAAAAAAAAAAA8L8"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "geometryT"
					},
					"CQAAALMlAAAAAAAAtCUAAAAAAAAAAAAAtCUAAAAAAAC1JQAAAAAAAAAAAAC1JQAAAAAAALYlAAAAAAAAAAAAALYlAAAAAAAAtyUAAAAAAAAAAAAAtyUAAAAAAAC4JQAAAAAAAAAAAAC4JQAAAAAAALklAAAAAAAAAAAAALklAAAAAAAAuiUAAAAAAAAAAAAAuiUAAAAAAAC7JQAAAAAAAAAAAAC7JQAAAAAAALwlAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzJQAAAAAAALMlAAAAAAAAAAAAAAAA8L8"
				],
				[
					125,
					1,
					"right_delete",
					null,
					"AQAAALwlAAAAAAAAvCUAAAAAAAABAAAAdA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8JQAAAAAAALwlAAAAAAAAAAAAAAAA8L8"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": "Data"
					},
					"BAAAAJ8lAAAAAAAAoCUAAAAAAAAAAAAAoCUAAAAAAAChJQAAAAAAAAAAAAChJQAAAAAAAKIlAAAAAAAAAAAAAKIlAAAAAAAAoyUAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACfJQAAAAAAAJ8lAAAAAAAAAAAAAAAA8L8"
				],
				[
					138,
					1,
					"paste",
					null,
					"AgAAAHInAAAAAAAAficAAAAAAAAAAAAAficAAAAAAAB+JwAAAAAAAA0AAABnZW9tZXRyeV9kYXRh",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAByJwAAAAAAAH8nAAAAAAAAAAAAAAAA8L8"
				],
				[
					146,
					1,
					"paste",
					null,
					"AgAAAFQnAAAAAAAAYCcAAAAAAAAAAAAAYCcAAAAAAABgJwAAAAAAAAQAAAB0eXBl",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABUJwAAAAAAAFgnAAAAAAAAAAAAAAAA8L8"
				],
				[
					149,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAKUnAAAAAAAApicAAAAAAAAAAAAApicAAAAAAACnJwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClJwAAAAAAAKUnAAAAAAAAAAAAAAAA8L8"
				],
				[
					151,
					1,
					"reindent",
					null,
					"AQAAAKYnAAAAAAAAqicAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACmJwAAAAAAAKYnAAAAAAAAAAAAAAAAAAA"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": "std::c"
					},
					"BgAAAKonAAAAAAAAqycAAAAAAAAAAAAAqycAAAAAAACsJwAAAAAAAAAAAACsJwAAAAAAAK0nAAAAAAAAAAAAAK0nAAAAAAAAricAAAAAAAAAAAAAricAAAAAAACvJwAAAAAAAAAAAACvJwAAAAAAALAnAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACqJwAAAAAAAKonAAAAAAAAAAAAAAAA8L8"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAALAnAAAAAAAAsScAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwJwAAAAAAALAnAAAAAAAAAAAAAAAA8L8"
				],
				[
					154,
					1,
					"insert_completion",
					{
						"completion": "cout",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "cout"
					},
					"AgAAAK8nAAAAAAAArycAAAAAAAACAAAAY2+vJwAAAAAAALMnAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxJwAAAAAAALEnAAAAAAAAAAAAAAAA8L8"
				],
				[
					155,
					1,
					"insert",
					{
						"characters": " <<"
					},
					"AwAAALMnAAAAAAAAtCcAAAAAAAAAAAAAtCcAAAAAAAC1JwAAAAAAAAAAAAC1JwAAAAAAALYnAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzJwAAAAAAALMnAAAAAAAAAAAAAAAA8L8"
				],
				[
					156,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALYnAAAAAAAAtycAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC2JwAAAAAAALYnAAAAAAAAAAAAAAAA8L8"
				],
				[
					157,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAALcnAAAAAAAAuScAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3JwAAAAAAALcnAAAAAAAAAAAAAAAA8L8"
				],
				[
					158,
					1,
					"insert",
					{
						"characters": "ge"
					},
					"AgAAALgnAAAAAAAAuScAAAAAAAAAAAAAuScAAAAAAAC6JwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4JwAAAAAAALgnAAAAAAAAAAAAAAAA8L8"
				],
				[
					159,
					2,
					"left_delete",
					null,
					"AgAAALknAAAAAAAAuScAAAAAAAABAAAAZbgnAAAAAAAAuCcAAAAAAAABAAAAZw",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC6JwAAAAAAALonAAAAAAAAAAAAAAAA8L8"
				],
				[
					160,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAALcnAAAAAAAAtycAAAAAAAABAAAAIrcnAAAAAAAAtycAAAAAAAABAAAAIg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4JwAAAAAAALgnAAAAAAAAAAAAAAAA8L8"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": "to_"
					},
					"AwAAALcnAAAAAAAAuCcAAAAAAAAAAAAAuCcAAAAAAAC5JwAAAAAAAAAAAAC5JwAAAAAAALonAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3JwAAAAAAALcnAAAAAAAAAAAAAAAA8L8"
				],
				[
					162,
					1,
					"insert_completion",
					{
						"completion": "to_string",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "to_string"
					},
					"AgAAALcnAAAAAAAAtycAAAAAAAADAAAAdG9ftycAAAAAAADAJwAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC6JwAAAAAAALonAAAAAAAAAAAAAAAA8L8"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAAMAnAAAAAAAAwScAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADAJwAAAAAAAMAnAAAAAAAAAAAAAAAA8L8"
				],
				[
					164,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMEnAAAAAAAAwycAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBJwAAAAAAAMEnAAAAAAAAAAAAAAAA8L8"
				],
				[
					165,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAMEnAAAAAAAAwScAAAAAAAABAAAAKMEnAAAAAAAAwScAAAAAAAABAAAAKQ",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCJwAAAAAAAMInAAAAAAAAAAAAAAAA8L8"
				],
				[
					166,
					1,
					"left_delete",
					null,
					"AQAAAMAnAAAAAAAAwCcAAAAAAAABAAAAKg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBJwAAAAAAAMEnAAAAAAAAAAAAAAAA8L8"
				],
				[
					167,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMAnAAAAAAAAwicAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADAJwAAAAAAAMAnAAAAAAAAAAAAAAAA8L8"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": "geom"
					},
					"BAAAAMEnAAAAAAAAwicAAAAAAAAAAAAAwicAAAAAAADDJwAAAAAAAAAAAADDJwAAAAAAAMQnAAAAAAAAAAAAAMQnAAAAAAAAxScAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBJwAAAAAAAMEnAAAAAAAAAAAAAAAA8L8"
				],
				[
					169,
					1,
					"insert_completion",
					{
						"completion": "geometry",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "geometry"
					},
					"AgAAAMEnAAAAAAAAwScAAAAAAAAEAAAAZ2VvbcEnAAAAAAAAyScAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADFJwAAAAAAAMUnAAAAAAAAAAAAAAAA8L8"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": " <<"
					},
					"AwAAAMonAAAAAAAAyycAAAAAAAAAAAAAyycAAAAAAADMJwAAAAAAAAAAAADMJwAAAAAAAM0nAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKJwAAAAAAAMonAAAAAAAAAAAAAAAA8L8"
				],
				[
					172,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAM0nAAAAAAAAzicAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNJwAAAAAAAM0nAAAAAAAAAAAAAAAA8L8"
				],
				[
					173,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAM4nAAAAAAAA0CcAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADOJwAAAAAAAM4nAAAAAAAAAAAAAAAA8L8"
				],
				[
					174,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAM4nAAAAAAAAzicAAAAAAAABAAAAIs4nAAAAAAAAzicAAAAAAAABAAAAIg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADPJwAAAAAAAM8nAAAAAAAAAAAAAAAA8L8"
				],
				[
					175,
					1,
					"insert",
					{
						"characters": "std::en"
					},
					"BwAAAM4nAAAAAAAAzycAAAAAAAAAAAAAzycAAAAAAADQJwAAAAAAAAAAAADQJwAAAAAAANEnAAAAAAAAAAAAANEnAAAAAAAA0icAAAAAAAAAAAAA0icAAAAAAADTJwAAAAAAAAAAAADTJwAAAAAAANQnAAAAAAAAAAAAANQnAAAAAAAA1ScAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADOJwAAAAAAAM4nAAAAAAAAAAAAAAAA8L8"
				],
				[
					176,
					1,
					"insert_completion",
					{
						"completion": "endl",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "endl"
					},
					"AgAAANMnAAAAAAAA0ycAAAAAAAACAAAAZW7TJwAAAAAAANcnAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADVJwAAAAAAANUnAAAAAAAAAAAAAAAA8L8"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANcnAAAAAAAA2CcAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXJwAAAAAAANcnAAAAAAAAAAAAAAAA8L8"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAKUnAAAAAAAApicAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClJwAAAAAAAKUnAAAAAAAAAAAAAAAgfEA"
				],
				[
					180,
					1,
					"reindent",
					null,
					"AQAAAKYnAAAAAAAAqicAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACmJwAAAAAAAKYnAAAAAAAAAAAAAAAA8L8"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": "LOG"
					},
					"AwAAAKonAAAAAAAAqycAAAAAAAAAAAAAqycAAAAAAACsJwAAAAAAAAAAAACsJwAAAAAAAK0nAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACqJwAAAAAAAKonAAAAAAAAAAAAAAAA8L8"
				],
				[
					182,
					3,
					"left_delete",
					null,
					"AwAAAKwnAAAAAAAArCcAAAAAAAABAAAAR6snAAAAAAAAqycAAAAAAAABAAAAT6onAAAAAAAAqicAAAAAAAABAAAATA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtJwAAAAAAAK0nAAAAAAAAAAAAAAAA8L8"
				],
				[
					183,
					2,
					"left_delete",
					null,
					"AgAAAKYnAAAAAAAApicAAAAAAAAEAAAAICAgIKUnAAAAAAAApScAAAAAAAABAAAACg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACqJwAAAAAAAKonAAAAAAAAAAAAAAAA8L8"
				],
				[
					185,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABgmAAAAAAAAGSYAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAYJgAAAAAAABgmAAAAAAAAAAAAAAAAAAA"
				],
				[
					187,
					1,
					"reindent",
					null,
					"AQAAABgmAAAAAAAAHCYAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAYJgAAAAAAABgmAAAAAAAAAAAAAAAAAAA"
				],
				[
					188,
					1,
					"insert",
					{
						"characters": "LOG_D"
					},
					"BQAAABwmAAAAAAAAHSYAAAAAAAAAAAAAHSYAAAAAAAAeJgAAAAAAAAAAAAAeJgAAAAAAAB8mAAAAAAAAAAAAAB8mAAAAAAAAICYAAAAAAAAAAAAAICYAAAAAAAAhJgAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcJgAAAAAAABwmAAAAAAAAAAAAAAAA8L8"
				],
				[
					189,
					1,
					"insert",
					{
						"characters": "B"
					},
					"AQAAACEmAAAAAAAAIiYAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhJgAAAAAAACEmAAAAAAAAAAAAAAAA8L8"
				],
				[
					190,
					1,
					"insert_completion",
					{
						"completion": "LOG_DBG",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "LOG_DBG"
					},
					"AgAAABwmAAAAAAAAHCYAAAAAAAAGAAAATE9HX0RCHCYAAAAAAAAjJgAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiJgAAAAAAACImAAAAAAAAAAAAAAAA8L8"
				],
				[
					191,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACMmAAAAAAAAJSYAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjJgAAAAAAACMmAAAAAAAAAAAAAAAA8L8"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAACQmAAAAAAAAJSYAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkJgAAAAAAACQmAAAAAAAAAAAAAAAA8L8"
				],
				[
					193,
					1,
					"left_delete",
					null,
					"AQAAACQmAAAAAAAAJCYAAAAAAAABAAAAOg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAlJgAAAAAAACUmAAAAAAAAAAAAAAAA8L8"
				],
				[
					194,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAACQmAAAAAAAAJiYAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkJgAAAAAAACQmAAAAAAAAAAAAAAAA8L8"
				],
				[
					200,
					1,
					"paste",
					null,
					"AQAAACUmAAAAAAAARyYAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAlJgAAAAAAACUmAAAAAAAAAAAAAAAA8L8"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEkmAAAAAAAASiYAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABJJgAAAAAAAEkmAAAAAAAAAAAAAAAA8L8"
				],
				[
					238,
					1,
					"paste",
					null,
					"AgAAAGs1AAAAAAAAhTUAAAAAAAAAAAAAhTUAAAAAAACFNQAAAAAAAEUAAABBY2NlbGVyYXRpb25TdHJ1Y3R1cmUgfCBCdWZmZXI6OkJpbmRGbGFnczo6QWNjZWxlcmF0aW9uU3RydWN0dXJlSW5wdXQ",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwNQAAAAAAAGs1AAAAAAAAAAAAAAAA8L8"
				],
				[
					243,
					1,
					"paste",
					null,
					"AgAAAJo1AAAAAAAAnzUAAAAAAAAAAAAAnzUAAAAAAACfNQAAAAAAAAQAAABOb25l",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaNQAAAAAAAJ41AAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHgwAAAAAAAAeTAAAAAAAAAAAAAAeTAAAAAAAAB9MAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeDAAAAAAAAB4MAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"paste",
					null,
					"AQAAAHgwAAAAAAAAoTAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeDAAAAAAAAB4MAAAAAAAAAAAAAAAAEJA"
				],
				[
					21,
					1,
					"paste",
					null,
					"AgAAAIIwAAAAAAAAvzAAAAAAAAAAAAAAvzAAAAAAAAC/MAAAAAAAABwAAABHZXR0aW5nIGJ1aWxkIHNpemVzIGZvciBCTEFT",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgjAAAAAAAACeMAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHUHAAAAAAAAdgcAAAAAAAAAAAAAdgcAAAAAAAB6BwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdQcAAAAAAAB1BwAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"paste",
					null,
					"AQAAAHoHAAAAAAAAxAcAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAegcAAAAAAAB6BwAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMQHAAAAAAAAxQcAAAAAAAAAAAAAxQcAAAAAAADJBwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxAcAAAAAAADEBwAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"paste",
					null,
					"AgAAAKYHAAAAAAAAtAcAAAAAAAAAAAAAtAcAAAAAAAC0BwAAAAAAABsAAABjcmVhdGVBY2NlbGVyYXRpb25TdHJ1Y3R1cmU",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwQcAAAAAAACmBwAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANUQAAAAAAAA1hAAAAAAAAAAAAAAuAcAAAAAAAC4BwAAAAAAAAQAAAAgICAg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1RAAAAAAAADVEAAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"reindent",
					null,
					"AQAAANIQAAAAAAAA1hAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0hAAAAAAAADSEAAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"paste",
					null,
					"AQAAANYQAAAAAAAAExEAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1hAAAAAAAADWEAAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": " done!"
					},
					"BgAAABARAAAAAAAAEREAAAAAAAAAAAAAEREAAAAAAAASEQAAAAAAAAAAAAASEQAAAAAAABMRAAAAAAAAAAAAABMRAAAAAAAAFBEAAAAAAAAAAAAAFBEAAAAAAAAVEQAAAAAAAAAAAAAVEQAAAAAAABYRAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEBEAAAAAAAAQEQAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"paste",
					null,
					"AgAAAIQHAAAAAAAAmQcAAAAAAAAAAAAAmQcAAAAAAACZBwAAAAAAACAAAABCb3R0b21MZXZlbEFjY2VsZXJhdGlvblN0cnVjdHVyZQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApAcAAAAAAACEBwAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"paste",
					null,
					"AgAAANUQAAAAAAAA6hAAAAAAAAAAAAAA6hAAAAAAAADqEAAAAAAAACAAAABCb3R0b21MZXZlbEFjY2VsZXJhdGlvblN0cnVjdHVyZQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1RAAAAAAAAD1EAAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAMQoAAAAAAAAxSgAAAAAAAAAAAAAxSgAAAAAAADJKAAAAAAAAAAAAADJKAAAAAAAAMooAAAAAAAAAAAAAMooAAAAAAAAzigAAAAAAAAAAAAAxSgAAAAAAADFKAAAAAAAAAQAAAAgICAg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxCgAAAAAAADEKAAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"paste",
					null,
					"AQAAAMooAAAAAAAA+CgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyigAAAAAAADKKAAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": " done"
					},
					"BQAAAPUoAAAAAAAA9igAAAAAAAAAAAAA9igAAAAAAAD3KAAAAAAAAAAAAAD3KAAAAAAAAPgoAAAAAAAAAAAAAPgoAAAAAAAA+SgAAAAAAAAAAAAA+SgAAAAAAAD6KAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9SgAAAAAAAD1KAAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": "!"
					},
					"AQAAAPooAAAAAAAA+ygAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+igAAAAAAAD6KAAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": "!"
					},
					"AQAAAJUlAAAAAAAAliUAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlSUAAAAAAACVJQAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAALoxAAAAAAAAuzEAAAAAAAAAAAAAuzEAAAAAAAC/MQAAAAAAAAAAAAC/MQAAAAAAAMAxAAAAAAAAAAAAAMAxAAAAAAAAxDEAAAAAAAAAAAAAuzEAAAAAAAC7MQAAAAAAAAQAAAAgICAg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAujEAAAAAAAC6MQAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALsxAAAAAAAAvDEAAAAAAAAAAAAAvTEAAAAAAAC9MQAAAAAAAAQAAAAgICAg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuzEAAAAAAAC7MQAAAAAAAAAAAAAAAEJA"
				],
				[
					86,
					1,
					"reindent",
					null,
					"AQAAALwxAAAAAAAAwDEAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvDEAAAAAAAC8MQAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": "bool"
					},
					"BAAAAMAxAAAAAAAAwTEAAAAAAAAAAAAAwTEAAAAAAADCMQAAAAAAAAAAAADCMQAAAAAAAMMxAAAAAAAAAAAAAMMxAAAAAAAAxDEAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwDEAAAAAAADAMQAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": " res"
					},
					"BAAAAMQxAAAAAAAAxTEAAAAAAAAAAAAAxTEAAAAAAADGMQAAAAAAAAAAAADGMQAAAAAAAMcxAAAAAAAAAAAAAMcxAAAAAAAAyDEAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxDEAAAAAAADEMQAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert_completion",
					{
						"completion": "result",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "result"
					},
					"AgAAAMUxAAAAAAAAxTEAAAAAAAADAAAAcmVzxTEAAAAAAADLMQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyDEAAAAAAADIMQAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAMsxAAAAAAAAzDEAAAAAAAAAAAAAzDEAAAAAAADNMQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyzEAAAAAAADLMQAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAM0xAAAAAAAAzjEAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzTEAAAAAAADNMQAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"paste",
					null,
					"AQAAAM4xAAAAAAAA5DEAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzjEAAAAAAADOMQAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"paste",
					null,
					"AgAAAPExAAAAAAAA9zEAAAAAAAAAAAAA9zEAAAAAAAD3MQAAAAAAABUAAABjcmVhdGVJbnRlcm5hbChmbGFncyk",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8TEAAAAAAAAGMgAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAOUxAAAAAAAA5jEAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5TEAAAAAAADlMQAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"reindent",
					null,
					"AQAAAOYxAAAAAAAA6jEAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5jEAAAAAAADmMQAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"paste",
					null,
					"AQAAAOoxAAAAAAAANDIAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6jEAAAAAAADqMQAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": " done"
					},
					"BQAAADEyAAAAAAAAMjIAAAAAAAAAAAAAMjIAAAAAAAAzMgAAAAAAAAAAAAAzMgAAAAAAADQyAAAAAAAAAAAAADQyAAAAAAAANTIAAAAAAAAAAAAANTIAAAAAAAA2MgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMTIAAAAAAAAxMgAAAAAAAAAAAAAAAPC/"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": " !"
					},
					"AgAAADYyAAAAAAAANzIAAAAAAAAAAAAANzIAAAAAAAA4MgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANjIAAAAAAAA2MgAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFUpAAAAAAAAVikAAAAAAAAAAAAAVikAAAAAAABaKQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVSkAAAAAAABVKQAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"paste",
					null,
					"AQAAAFopAAAAAAAAjikAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWikAAAAAAABaKQAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAI4pAAAAAAAAjykAAAAAAAAAAAAAjykAAAAAAACTKQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjikAAAAAAACOKQAAAAAAAAAAAAAAAPC/"
				],
				[
					137,
					1,
					"paste",
					null,
					"AgAAAHopAAAAAAAAgikAAAAAAAAAAAAAgikAAAAAAACCKQAAAAAAAAsAAABhZGRHZW9tZXRyeQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeikAAAAAAACFKQAAAAAAAAAAAAAAAPC/"
				],
				[
					138,
					6,
					"right_delete",
					null,
					"BwAAAIIpAAAAAAAAgikAAAAAAAABAAAAIIspAAAAAAAAiykAAAAAAAAEAAAAICAgIIIpAAAAAAAAgikAAAAAAAABAAAAZIIpAAAAAAAAgikAAAAAAAABAAAAb4IpAAAAAAAAgikAAAAAAAABAAAAboIpAAAAAAAAgikAAAAAAAABAAAAZYIpAAAAAAAAgikAAAAAAAABAAAAIQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgikAAAAAAACCKQAAAAAAAAAAAAAAAPC/"
				],
				[
					144,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADMvAAAAAAAANC8AAAAAAAAAAAAANC8AAAAAAAA4LwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMy8AAAAAAAAzLwAAAAAAAAAAAAAAAPC/"
				],
				[
					146,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADMvAAAAAAAANC8AAAAAAAAAAAAANC8AAAAAAAA4LwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMy8AAAAAAAAzLwAAAAAAAAAAAAAAAEJA"
				],
				[
					147,
					1,
					"paste",
					null,
					"AQAAADgvAAAAAAAAYy8AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOC8AAAAAAAA4LwAAAAAAAAAAAAAAAPC/"
				],
				[
					149,
					1,
					"insert",
					{
						"characters": " done"
					},
					"BQAAAGAvAAAAAAAAYS8AAAAAAAAAAAAAYS8AAAAAAABiLwAAAAAAAAAAAABiLwAAAAAAAGMvAAAAAAAAAAAAAGMvAAAAAAAAZC8AAAAAAAAAAAAAZC8AAAAAAABlLwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYC8AAAAAAABgLwAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": " !"
					},
					"AgAAAGUvAAAAAAAAZi8AAAAAAAAAAAAAZi8AAAAAAABnLwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZS8AAAAAAABlLwAAAAAAAAAAAAAAAPC/"
				],
				[
					160,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAPs9AAAAAAAA/D0AAAAAAAAAAAAA/D0AAAAAAAD9PQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+z0AAAAAAAD7PQAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"reindent",
					null,
					"AQAAAPw9AAAAAAAAAD4AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/D0AAAAAAAD8PQAAAAAAAAAAAAAAAAAA"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": "fi"
					},
					"AgAAAAA+AAAAAAAAAT4AAAAAAAAAAAAAAT4AAAAAAAACPgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAD4AAAAAAAAAPgAAAAAAAAAAAAAAAPC/"
				],
				[
					164,
					1,
					"left_delete",
					null,
					"AQAAAAE+AAAAAAAAAT4AAAAAAAABAAAAaQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAj4AAAAAAAACPgAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": "or"
					},
					"AgAAAAE+AAAAAAAAAj4AAAAAAAAAAAAAAj4AAAAAAAADPgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAT4AAAAAAAABPgAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAM+AAAAAAAABT4AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAz4AAAAAAAADPgAAAAAAAAAAAAAAAPC/"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAAQ+AAAAAAAABT4AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABD4AAAAAAAAEPgAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"insert_completion",
					{
						"completion": "auto",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "auto"
					},
					"AgAAAAQ+AAAAAAAABD4AAAAAAAABAAAAYQQ+AAAAAAAACD4AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABT4AAAAAAAAFPgAAAAAAAAAAAAAAAPC/"
				],
				[
					169,
					1,
					"insert",
					{
						"characters": " &insta"
					},
					"BwAAAAg+AAAAAAAACT4AAAAAAAAAAAAACT4AAAAAAAAKPgAAAAAAAAAAAAAKPgAAAAAAAAs+AAAAAAAAAAAAAAs+AAAAAAAADD4AAAAAAAAAAAAADD4AAAAAAAANPgAAAAAAAAAAAAANPgAAAAAAAA4+AAAAAAAAAAAAAA4+AAAAAAAADz4AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACD4AAAAAAAAIPgAAAAAAAAAAAAAAAPC/"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": "nce"
					},
					"AwAAAA8+AAAAAAAAED4AAAAAAAAAAAAAED4AAAAAAAARPgAAAAAAAAAAAAARPgAAAAAAABI+AAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADz4AAAAAAAAPPgAAAAAAAAAAAAAAAPC/"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": " in"
					},
					"AwAAABI+AAAAAAAAEz4AAAAAAAAAAAAAEz4AAAAAAAAUPgAAAAAAAAAAAAAUPgAAAAAAABU+AAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEj4AAAAAAAASPgAAAAAAAAAAAAAAAPC/"
				],
				[
					172,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABU+AAAAAAAAFj4AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFT4AAAAAAAAVPgAAAAAAAAAAAAAAAPC/"
				],
				[
					173,
					3,
					"left_delete",
					null,
					"AwAAABU+AAAAAAAAFT4AAAAAAAABAAAAIBQ+AAAAAAAAFD4AAAAAAAABAAAAbhM+AAAAAAAAEz4AAAAAAAABAAAAaQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFj4AAAAAAAAWPgAAAAAAAAAAAAAAAPC/"
				],
				[
					174,
					1,
					"left_delete",
					null,
					"AQAAABI+AAAAAAAAEj4AAAAAAAABAAAAIA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEz4AAAAAAAATPgAAAAAAAAAAAAAAAPC/"
				],
				[
					175,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAABI+AAAAAAAAEz4AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEj4AAAAAAAASPgAAAAAAAAAAAAAAAPC/"
				],
				[
					176,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABM+AAAAAAAAFD4AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEz4AAAAAAAATPgAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					2,
					"left_delete",
					null,
					"AgAAABM+AAAAAAAAEz4AAAAAAAABAAAAIBI+AAAAAAAAEj4AAAAAAAABAAAAOg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFD4AAAAAAAAUPgAAAAAAAAAAAAAAAPC/"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAABI+AAAAAAAAEz4AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEj4AAAAAAAASPgAAAAAAAAAAAAAAAPC/"
				],
				[
					179,
					1,
					"left_delete",
					null,
					"AQAAABI+AAAAAAAAEj4AAAAAAAABAAAAbA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEz4AAAAAAAATPgAAAAAAAAAAAAAAAPC/"
				],
				[
					180,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABI+AAAAAAAAEz4AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEj4AAAAAAAASPgAAAAAAAAAAAAAAAPC/"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABM+AAAAAAAAFD4AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEz4AAAAAAAATPgAAAAAAAAAAAAAAAPC/"
				],
				[
					182,
					3,
					"left_delete",
					null,
					"AwAAABM+AAAAAAAAEz4AAAAAAAABAAAAIBI+AAAAAAAAEj4AAAAAAAABAAAAOxE+AAAAAAAAET4AAAAAAAABAAAAZQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFD4AAAAAAAAUPgAAAAAAAAAAAAAAAPC/"
				],
				[
					183,
					1,
					"insert",
					{
						"characters": "e,"
					},
					"AgAAABE+AAAAAAAAEj4AAAAAAAAAAAAAEj4AAAAAAAATPgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAET4AAAAAAAARPgAAAAAAAAAAAAAAAPC/"
				],
				[
					184,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABM+AAAAAAAAFD4AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEz4AAAAAAAATPgAAAAAAAAAAAAAAAPC/"
				],
				[
					185,
					2,
					"left_delete",
					null,
					"AgAAABM+AAAAAAAAEz4AAAAAAAABAAAAIBI+AAAAAAAAEj4AAAAAAAABAAAALA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFD4AAAAAAAAUPgAAAAAAAAAAAAAAAPC/"
				],
				[
					186,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABI+AAAAAAAAEz4AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEj4AAAAAAAASPgAAAAAAAAAAAAAAAPC/"
				],
				[
					187,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABM+AAAAAAAAFD4AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEz4AAAAAAAATPgAAAAAAAAAAAAAAAPC/"
				],
				[
					188,
					1,
					"insert",
					{
						"characters": "in"
					},
					"AgAAABQ+AAAAAAAAFT4AAAAAAAAAAAAAFT4AAAAAAAAWPgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFD4AAAAAAAAUPgAAAAAAAAAAAAAAAPC/"
				],
				[
					189,
					1,
					"insert_completion",
					{
						"completion": "instances",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "instances"
					},
					"AgAAABQ+AAAAAAAAFD4AAAAAAAACAAAAaW4UPgAAAAAAAB0+AAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFj4AAAAAAAAWPgAAAAAAAAAAAAAAAPC/"
				],
				[
					191,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAB4+AAAAAAAAHz4AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHj4AAAAAAAAePgAAAAAAAAAAAAAAAPC/"
				],
				[
					192,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAB8+AAAAAAAAIT4AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHz4AAAAAAAAfPgAAAAAAAAAAAAAAAPC/"
				],
				[
					193,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAACA+AAAAAAAAIT4AAAAAAAAAAAAAIT4AAAAAAAAlPgAAAAAAAAAAAAAlPgAAAAAAACY+AAAAAAAAAAAAACY+AAAAAAAAKj4AAAAAAAAAAAAAIT4AAAAAAAAhPgAAAAAAAAQAAAAgICAgIT4AAAAAAAApPgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAID4AAAAAAAAgPgAAAAAAAAAAAAAAAPC/"
				],
				[
					197,
					1,
					"right_delete",
					null,
					"AgAAABI+AAAAAAAAEj4AAAAAAAABAAAAOyA+AAAAAAAAID4AAAAAAAAIAAAAICAgICAgICA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEj4AAAAAAAASPgAAAAAAAAAAAAAAAPC/"
				],
				[
					198,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAABI+AAAAAAAAEz4AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEj4AAAAAAAASPgAAAAAAAAAAAAAAAPC/"
				],
				[
					200,
					1,
					"reindent",
					null,
					"AQAAACE+AAAAAAAAKT4AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIT4AAAAAAAAhPgAAAAAAAAAAAAAA4GlA"
				],
				[
					201,
					1,
					"insert",
					{
						"characters": "mI"
					},
					"AgAAACk+AAAAAAAAKj4AAAAAAAAAAAAAKj4AAAAAAAArPgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKT4AAAAAAAApPgAAAAAAAAAAAAAAAPC/"
				],
				[
					202,
					1,
					"insert_completion",
					{
						"completion": "mInstances",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mInstances"
					},
					"AgAAACk+AAAAAAAAKT4AAAAAAAACAAAAbUkpPgAAAAAAADM+AAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKz4AAAAAAAArPgAAAAAAAAAAAAAAAPC/"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": ".p"
					},
					"AgAAADM+AAAAAAAAND4AAAAAAAAAAAAAND4AAAAAAAA1PgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMz4AAAAAAAAzPgAAAAAAAAAAAAAAAPC/"
				],
				[
					204,
					1,
					"insert_completion",
					{
						"completion": "push_back",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "push_back"
					},
					"AgAAADQ+AAAAAAAAND4AAAAAAAABAAAAcDQ+AAAAAAAAPT4AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANT4AAAAAAAA1PgAAAAAAAAAAAAAAAPC/"
				],
				[
					205,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAD0+AAAAAAAAPz4AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPT4AAAAAAAA9PgAAAAAAAAAAAAAAAPC/"
				],
				[
					206,
					1,
					"insert",
					{
						"characters": "in"
					},
					"AgAAAD4+AAAAAAAAPz4AAAAAAAAAAAAAPz4AAAAAAABAPgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPj4AAAAAAAA+PgAAAAAAAAAAAAAAAPC/"
				],
				[
					207,
					1,
					"insert_completion",
					{
						"completion": "instance",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "instance"
					},
					"AgAAAD4+AAAAAAAAPj4AAAAAAAACAAAAaW4+PgAAAAAAAEY+AAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQD4AAAAAAABAPgAAAAAAAAAAAAAAAPC/"
				],
				[
					209,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEc+AAAAAAAASD4AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARz4AAAAAAABHPgAAAAAAAAAAAAAAAPC/"
				],
				[
					212,
					1,
					"right_delete",
					null,
					"AQAAAG4+AAAAAAAAbj4AAAAAAAABAAAAbg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbj4AAAAAAABuPgAAAAAAAAAAAAAAAPC/"
				],
				[
					216,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAALA9AAAAAAAAsT0AAAAAAAAAAAAAsT0AAAAAAACyPQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsD0AAAAAAACwPQAAAAAAAAAAAAAAAPC/"
				],
				[
					223,
					1,
					"insert",
					{
						"characters": "\n\nass"
					},
					"CAAAAHUNAAAAAAAAdg0AAAAAAAAAAAAAdg0AAAAAAAB6DQAAAAAAAAAAAAB6DQAAAAAAAHsNAAAAAAAAAAAAAHsNAAAAAAAAfw0AAAAAAAAAAAAAdg0AAAAAAAB2DQAAAAAAAAQAAAAgICAgew0AAAAAAAB8DQAAAAAAAAAAAAB8DQAAAAAAAH0NAAAAAAAAAAAAAH0NAAAAAAAAfg0AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdQ0AAAAAAAB1DQAAAAAAAAAAAAAAAPC/"
				],
				[
					224,
					1,
					"insert_completion",
					{
						"completion": "assert",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "assert"
					},
					"AgAAAHsNAAAAAAAAew0AAAAAAAADAAAAYXNzew0AAAAAAACBDQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfg0AAAAAAAB+DQAAAAAAAAAAAAAAAPC/"
				],
				[
					225,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIENAAAAAAAAgw0AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgQ0AAAAAAACBDQAAAAAAAAAAAAAAAPC/"
				],
				[
					226,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAIINAAAAAAAAgw0AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgg0AAAAAAACCDQAAAAAAAAAAAAAAAPC/"
				],
				[
					227,
					1,
					"insert_completion",
					{
						"completion": "mHandle",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mHandle"
					},
					"AgAAAIINAAAAAAAAgg0AAAAAAAABAAAAbYINAAAAAAAAiQ0AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgw0AAAAAAACDDQAAAAAAAAAAAAAAAPC/"
				],
				[
					228,
					1,
					"insert",
					{
						"characters": " !="
					},
					"AwAAAIkNAAAAAAAAig0AAAAAAAAAAAAAig0AAAAAAACLDQAAAAAAAAAAAACLDQAAAAAAAIwNAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiQ0AAAAAAACJDQAAAAAAAAAAAAAAAPC/"
				],
				[
					229,
					1,
					"insert",
					{
						"characters": " VK"
					},
					"AwAAAIwNAAAAAAAAjQ0AAAAAAAAAAAAAjQ0AAAAAAACODQAAAAAAAAAAAACODQAAAAAAAI8NAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjA0AAAAAAACMDQAAAAAAAAAAAAAAAPC/"
				],
				[
					230,
					1,
					"insert_completion",
					{
						"completion": "VK_NULL_HANDLE",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "VK_NULL_HANDLE"
					},
					"AgAAAI0NAAAAAAAAjQ0AAAAAAAACAAAAVkuNDQAAAAAAAJsNAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjw0AAAAAAACPDQAAAAAAAAAAAAAAAPC/"
				],
				[
					232,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJwNAAAAAAAAnQ0AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnA0AAAAAAACcDQAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAFsvAAAAAAAAXC8AAAAAAAAAAAAAXC8AAAAAAABgLwAAAAAAAAAAAABgLwAAAAAAAGEvAAAAAAAAAAAAAGEvAAAAAAAAZS8AAAAAAAAAAAAAXC8AAAAAAABcLwAAAAAAAAQAAAAgICAg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABbLwAAAAAAAFsvAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"reindent",
					null,
					"AQAAAFwvAAAAAAAAYC8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABcLwAAAAAAAFwvAAAAAAAAAAAAAAAAQkA"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "pin"
					},
					"BAAAAGAvAAAAAAAAYS8AAAAAAAAAAAAAYi8AAAAAAABiLwAAAAAAAAQAAAAgICAgYS8AAAAAAABiLwAAAAAAAAAAAABiLwAAAAAAAGMvAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABgLwAAAAAAAGAvAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					2,
					"left_delete",
					null,
					"AgAAAGIvAAAAAAAAYi8AAAAAAAABAAAAbmEvAAAAAAAAYS8AAAAAAAABAAAAaQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjLwAAAAAAAGMvAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "rint"
					},
					"BAAAAGEvAAAAAAAAYi8AAAAAAAAAAAAAYi8AAAAAAABjLwAAAAAAAAAAAABjLwAAAAAAAGQvAAAAAAAAAAAAAGQvAAAAAAAAZS8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABhLwAAAAAAAGEvAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"insert_completion",
					{
						"completion": "printf",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "printf"
					},
					"AgAAAGAvAAAAAAAAYC8AAAAAAAAFAAAAcHJpbnRgLwAAAAAAAGYvAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABlLwAAAAAAAGUvAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGYvAAAAAAAAaC8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABmLwAAAAAAAGYvAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAGcvAAAAAAAAaS8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABnLwAAAAAAAGcvAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"paste",
					null,
					"AQAAAGgvAAAAAAAAgS8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoLwAAAAAAAGgvAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAIEvAAAAAAAAgi8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBLwAAAAAAAIEvAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " %zu"
					},
					"BAAAAIIvAAAAAAAAgy8AAAAAAAAAAAAAgy8AAAAAAACELwAAAAAAAAAAAACELwAAAAAAAIUvAAAAAAAAAAAAAIUvAAAAAAAAhi8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCLwAAAAAAAIIvAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAIcvAAAAAAAAiC8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACHLwAAAAAAAIcvAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIgvAAAAAAAAiS8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACILwAAAAAAAIgvAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " \\n"
					},
					"AwAAAIYvAAAAAAAAhy8AAAAAAAAAAAAAhy8AAAAAAACILwAAAAAAAAAAAACILwAAAAAAAIkvAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACGLwAAAAAAAIYvAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAI0vAAAAAAAAji8AAAAAAAAAAAAAji8AAAAAAACSLwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNLwAAAAAAAI0vAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"paste",
					null,
					"AQAAAJIvAAAAAAAAvy8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACSLwAAAAAAAJIvAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line.sublime-macro"
					},
					"AgAAAL8vAAAAAAAAwC8AAAAAAAAAAAAAwC8AAAAAAADELwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC/LwAAAAAAAL8vAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"paste",
					null,
					"AQAAAMQvAAAAAAAA8S8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADELwAAAAAAAMQvAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"paste",
					null,
					"AQAAAIwvAAAAAAAAlS8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMLwAAAAAAAIwvAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"paste",
					null,
					"AQAAAMcvAAAAAAAA0C8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADHLwAAAAAAAMcvAAAAAAAAAAAAAAAA8L8"
				],
				[
					49,
					1,
					"paste",
					null,
					"AQAAAAIwAAAAAAAACzAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACMAAAAAAAAAIwAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAAswAAAAAAAADDAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALMAAAAAAAAAswAAAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAANAvAAAAAAAA0S8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADQLwAAAAAAANAvAAAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAJUvAAAAAAAAli8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACVLwAAAAAAAJUvAAAAAAAAAAAAAAAA8L8"
				],
				[
					59,
					1,
					"paste",
					null,
					"AQAAAJYvAAAAAAAAry8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWLwAAAAAAAJYvAAAAAAAAAAAAAAAA8L8"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALAvAAAAAAAAsS8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwLwAAAAAAALAvAAAAAAAAAAAAAAAA8L8"
				],
				[
					65,
					1,
					"paste",
					null,
					"AQAAAOwvAAAAAAAA/S8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsLwAAAAAAAOwvAAAAAAAAAAAAAAAA8L8"
				],
				[
					68,
					1,
					"paste",
					null,
					"AQAAADkwAAAAAAAASTAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5MAAAAAAAADkwAAAAAAAAAAAAAAAA8L8"
				],
				[
					72,
					1,
					"paste",
					null,
					"AgAAAAswAAAAAAAAGzAAAAAAAAAAAAAAGzAAAAAAAAAbMAAAAAAAABkAAABhY2NlbGVyYXRpb25TdHJ1Y3R1cmVTaXpl",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALMAAAAAAAACQwAAAAAAAAAAAAAAAA8L8"
				],
				[
					80,
					1,
					"paste",
					null,
					"AgAAAL4vAAAAAAAAzy8AAAAAAAAAAAAAzy8AAAAAAADPLwAAAAAAABkAAABhY2NlbGVyYXRpb25TdHJ1Y3R1cmVTaXpl",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+LwAAAAAAANcvAAAAAAAAAAAAAAAA8L8"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAPYvAAAAAAAA9y8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2LwAAAAAAAPYvAAAAAAAAAAAAAAAA8L8"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADowAAAAAAAAOzAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6MAAAAAAAADowAAAAAAAAAAAAAAAA8L8"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAM0UAAAAAAAAzhQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNFAAAAAAAAM0UAAAAAAAAAAAAAAAA8L8"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAM0UAAAAAAAAzhQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNFAAAAAAAAM0UAAAAAAAAAAAAAAAAAAA"
				],
				[
					104,
					1,
					"reindent",
					null,
					"AQAAAM4UAAAAAAAA0hQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADOFAAAAAAAAM4UAAAAAAAAAAAAAAAA8L8"
				],
				[
					105,
					1,
					"insert",
					{
						"characters": "ass"
					},
					"AwAAANIUAAAAAAAA0xQAAAAAAAAAAAAA0xQAAAAAAADUFAAAAAAAAAAAAADUFAAAAAAAANUUAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSFAAAAAAAANIUAAAAAAAAAAAAAAAA8L8"
				],
				[
					106,
					1,
					"insert_completion",
					{
						"completion": "assert",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "assert"
					},
					"AgAAANIUAAAAAAAA0hQAAAAAAAADAAAAYXNz0hQAAAAAAADYFAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADVFAAAAAAAANUUAAAAAAAAAAAAAAAA8L8"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": ")s"
					},
					"AgAAANgUAAAAAAAA2RQAAAAAAAAAAAAA2RQAAAAAAADaFAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADYFAAAAAAAANgUAAAAAAAAAAAAAAAA8L8"
				],
				[
					108,
					2,
					"left_delete",
					null,
					"AgAAANkUAAAAAAAA2RQAAAAAAAABAAAAc9gUAAAAAAAA2BQAAAAAAAABAAAAKQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADaFAAAAAAAANoUAAAAAAAAAAAAAAAA8L8"
				],
				[
					109,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANgUAAAAAAAA2hQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADYFAAAAAAAANgUAAAAAAAAAAAAAAAA8L8"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": "sc"
					},
					"AgAAANkUAAAAAAAA2hQAAAAAAAAAAAAA2hQAAAAAAADbFAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADZFAAAAAAAANkUAAAAAAAAAAAAAAAA8L8"
				],
				[
					113,
					1,
					"insert_completion",
					{
						"completion": "scratch_buffer",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "scratch_buffer"
					},
					"AgAAANkUAAAAAAAA2RQAAAAAAAACAAAAc2PZFAAAAAAAAOcUAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADbFAAAAAAAANsUAAAAAAAAAAAAAAAA8L8"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOgUAAAAAAAA6RQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADoFAAAAAAAAOgUAAAAAAAAAAAAAAAA8L8"
				],
				[
					144,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAPcWAAAAAAAA+BYAAAAAAAAAAAAA+BYAAAAAAAD5FgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3FgAAAAAAAPcWAAAAAAAAAAAAAAAA8L8"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAB4YAAAAAAAAHxgAAAAAAAAAAAAAHxgAAAAAAAAgGAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAeGAAAAAAAAB4YAAAAAAAAAAAAAABAfUA"
				],
				[
					152,
					1,
					"reindent",
					null,
					"AQAAAB8YAAAAAAAAIxgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfGAAAAAAAAB8YAAAAAAAAAAAAAAAAAAA"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAACMYAAAAAAAAJBgAAAAAAAAAAAAAJBgAAAAAAAAlGAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjGAAAAAAAACMYAAAAAAAAAAAAAAAA8L8"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": " mB"
					},
					"AwAAACUYAAAAAAAAJhgAAAAAAAAAAAAAJhgAAAAAAAAnGAAAAAAAAAAAAAAnGAAAAAAAACgYAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAlGAAAAAAAACUYAAAAAAAAAAAAAAAA8L8"
				],
				[
					155,
					1,
					"insert_completion",
					{
						"completion": "mBuildInfo",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mBuildInfo"
					},
					"AgAAACYYAAAAAAAAJhgAAAAAAAACAAAAbUImGAAAAAAAADAYAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAoGAAAAAAAACgYAAAAAAAAAAAAAAAA8L8"
				],
				[
					156,
					5,
					"left_delete",
					null,
					"BQAAAC8YAAAAAAAALxgAAAAAAAABAAAAby4YAAAAAAAALhgAAAAAAAABAAAAZi0YAAAAAAAALRgAAAAAAAABAAAAbiwYAAAAAAAALBgAAAAAAAABAAAASSsYAAAAAAAAKxgAAAAAAAABAAAAZA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwGAAAAAAAADAYAAAAAAAAAAAAAAAA8L8"
				],
				[
					157,
					1,
					"insert",
					{
						"characters": "t)"
					},
					"AgAAACsYAAAAAAAALBgAAAAAAAAAAAAALBgAAAAAAAAtGAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAArGAAAAAAAACsYAAAAAAAAAAAAAAAA8L8"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAACYYAAAAAAAAJxgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAmGAAAAAAAACYYAAAAAAAAAAAAAAAA8L8"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAC4YAAAAAAAALxgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAuGAAAAAAAAC4YAAAAAAAAAAAAAAAA8L8"
				],
				[
					163,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAC8YAAAAAAAAMRgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAvGAAAAAAAAC8YAAAAAAAAAAAAAAAA8L8"
				],
				[
					164,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAADAYAAAAAAAAMRgAAAAAAAAAAAAAMRgAAAAAAAA1GAAAAAAAAAAAAAA1GAAAAAAAADYYAAAAAAAAAAAAADYYAAAAAAAAOhgAAAAAAAAAAAAAMRgAAAAAAAAxGAAAAAAAAAQAAAAgICAgMRgAAAAAAAA5GAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwGAAAAAAAADAYAAAAAAAAAAAAAAAA8L8"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": "mB"
					},
					"AgAAADkYAAAAAAAAOhgAAAAAAAAAAAAAOhgAAAAAAAA7GAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5GAAAAAAAADkYAAAAAAAAAAAAAAAA8L8"
				],
				[
					166,
					1,
					"insert_completion",
					{
						"completion": "mBuildInfo",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mBuildInfo"
					},
					"AgAAADkYAAAAAAAAORgAAAAAAAACAAAAbUI5GAAAAAAAAEMYAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7GAAAAAAAADsYAAAAAAAAAAAAAAAA8L8"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": ".m"
					},
					"AgAAAEMYAAAAAAAARBgAAAAAAAAAAAAARBgAAAAAAABFGAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABDGAAAAAAAAEMYAAAAAAAAAAAAAAAA8L8"
				],
				[
					168,
					1,
					"insert_completion",
					{
						"completion": "mode",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mode"
					},
					"AgAAAEQYAAAAAAAARBgAAAAAAAABAAAAbUQYAAAAAAAASBgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABFGAAAAAAAAEUYAAAAAAAAAAAAAAAA8L8"
				],
				[
					169,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAEgYAAAAAAAASRgAAAAAAAAAAAAASRgAAAAAAABKGAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABIGAAAAAAAAEgYAAAAAAAAAAAAAAAA8L8"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEoYAAAAAAAASxgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABKGAAAAAAAAEoYAAAAAAAAAAAAAAAA8L8"
				],
				[
					177,
					1,
					"paste",
					null,
					"AQAAAEsYAAAAAAAAehgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABLGAAAAAAAAEsYAAAAAAAAAAAAAAAA8L8"
				],
				[
					181,
					4,
					"right_delete",
					null,
					"BAAAAJEWAAAAAAAAkRYAAAAAAAAvAAAAVktfQlVJTERfQUNDRUxFUkFUSU9OX1NUUlVDVFVSRV9NT0RFX1VQREFURV9LSFKRFgAAAAAAAJEWAAAAAAAAAQAAACCRFgAAAAAAAJEWAAAAAAAAAQAAADqRFgAAAAAAAJEWAAAAAAAAAQAAACA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACRFgAAAAAAAMAWAAAAAAAAAAAAAAAA8L8"
				],
				[
					182,
					9,
					"left_delete",
					null,
					"CQAAAJAWAAAAAAAAkBYAAAAAAAABAAAAII8WAAAAAAAAjxYAAAAAAAABAAAAP44WAAAAAAAAjhYAAAAAAAABAAAAII0WAAAAAAAAjRYAAAAAAAABAAAAdIwWAAAAAAAAjBYAAAAAAAABAAAAbIsWAAAAAAAAixYAAAAAAAABAAAAaYoWAAAAAAAAihYAAAAAAAABAAAAdYkWAAAAAAAAiRYAAAAAAAABAAAAQogWAAAAAAAAiBYAAAAAAAABAAAAbQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACRFgAAAAAAAJEWAAAAAAAAAAAAAAAA8L8"
				],
				[
					188,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAD8YAAAAAAAAQBgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA/GAAAAAAAAD8YAAAAAAAAAAAAAAAA8L8"
				],
				[
					189,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEAYAAAAAAAAQRgAAAAAAAAAAAAAQRgAAAAAAABJGAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABAGAAAAAAAAEAYAAAAAAAAAAAAAAAA8L8"
				],
				[
					190,
					1,
					"paste",
					null,
					"AQAAAEkYAAAAAAAAfxgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABJGAAAAAAAAEkYAAAAAAAAAAAAAAAA8L8"
				],
				[
					192,
					8,
					"right_delete",
					null,
					"CAAAAG8YAAAAAAAAbxgAAAAAAAABAAAAbW8YAAAAAAAAbxgAAAAAAAABAAAAQm8YAAAAAAAAbxgAAAAAAAABAAAAdW8YAAAAAAAAbxgAAAAAAAABAAAAaW8YAAAAAAAAbxgAAAAAAAABAAAAbG8YAAAAAAAAbxgAAAAAAAABAAAAdG8YAAAAAAAAbxgAAAAAAAABAAAAIG8YAAAAAAAAbxgAAAAAAAABAAAAPw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABvGAAAAAAAAG8YAAAAAAAAAAAAAAAA8L8"
				],
				[
					195,
					1,
					"right_delete",
					null,
					"AQAAAG8YAAAAAAAAbxgAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABvGAAAAAAAAG8YAAAAAAAAAAAAAAAA8L8"
				],
				[
					197,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAHYYAAAAAAAAdxgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB2GAAAAAAAAHYYAAAAAAAAAAAAAAAA8L8"
				],
				[
					200,
					19,
					"left_delete",
					null,
					"EwAAAPYWAAAAAAAA9hYAAAAAAAABAAAAIPUWAAAAAAAA9RYAAAAAAAABAAAAOvQWAAAAAAAA9BYAAAAAAAABAAAAIPMWAAAAAAAA8xYAAAAAAAABAAAAZfIWAAAAAAAA8hYAAAAAAAABAAAAbPEWAAAAAAAA8RYAAAAAAAABAAAAZPAWAAAAAAAA8BYAAAAAAAABAAAAbu8WAAAAAAAA7xYAAAAAAAABAAAAYe4WAAAAAAAA7hYAAAAAAAABAAAASO0WAAAAAAAA7RYAAAAAAAABAAAAbewWAAAAAAAA7BYAAAAAAAABAAAAIOsWAAAAAAAA6xYAAAAAAAABAAAAP+oWAAAAAAAA6hYAAAAAAAABAAAAIOkWAAAAAAAA6RYAAAAAAAABAAAAdOgWAAAAAAAA6BYAAAAAAAABAAAAbOcWAAAAAAAA5xYAAAAAAAABAAAAaeYWAAAAAAAA5hYAAAAAAAABAAAAdeUWAAAAAAAA5RYAAAAAAAABAAAAQuQWAAAAAAAA5BYAAAAAAAABAAAAbQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3FgAAAAAAAPcWAAAAAAAAAAAAAAAA8L8"
				],
				[
					203,
					2,
					"right_delete",
					null,
					"AgAAALwWAAAAAAAAvBYAAAAAAAABAAAAL7wWAAAAAAAAvBYAAAAAAAABAAAALw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8FgAAAAAAALwWAAAAAAAAAAAAAAAA8L8"
				],
				[
					209,
					1,
					"insert",
					{
						"characters": "\n\n//"
					},
					"BwAAALsYAAAAAAAAvBgAAAAAAAAAAAAAvBgAAAAAAADAGAAAAAAAAAAAAADAGAAAAAAAAMEYAAAAAAAAAAAAAMEYAAAAAAAAxRgAAAAAAAAAAAAAvBgAAAAAAAC8GAAAAAAAAAQAAAAgICAgwRgAAAAAAADCGAAAAAAAAAAAAADCGAAAAAAAAMMYAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7GAAAAAAAALsYAAAAAAAAAAAAAAAA8L8"
				],
				[
					210,
					1,
					"insert",
					{
						"characters": "\n\n\n//"
					},
					"CgAAAMMYAAAAAAAAxBgAAAAAAAAAAAAAxBgAAAAAAADIGAAAAAAAAAAAAADIGAAAAAAAAMkYAAAAAAAAAAAAAMkYAAAAAAAAzRgAAAAAAAAAAAAAxBgAAAAAAADEGAAAAAAAAAQAAAAgICAgyRgAAAAAAADKGAAAAAAAAAAAAADKGAAAAAAAAM4YAAAAAAAAAAAAAMUYAAAAAAAAxRgAAAAAAAAEAAAAICAgIMoYAAAAAAAAyxgAAAAAAAAAAAAAyxgAAAAAAADMGAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDGAAAAAAAAMMYAAAAAAAAAAAAAAAA8L8"
				],
				[
					212,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMQYAAAAAAAAxRgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADEGAAAAAAAAMQYAAAAAAAAAAAAAAAAS0A"
				],
				[
					213,
					1,
					"reindent",
					null,
					"AQAAAMUYAAAAAAAAyRgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADFGAAAAAAAAMUYAAAAAAAAAAAAAAAA8L8"
				],
				[
					214,
					1,
					"paste",
					null,
					"AQAAAMkYAAAAAAAAWBwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADJGAAAAAAAAMkYAAAAAAAAAAAAAAAA8L8"
				],
				[
					217,
					1,
					"unindent",
					null,
					"DwAAACIZAAAAAAAAIhkAAAAAAAAEAAAAICAgIHAZAAAAAAAAcBkAAAAAAAAEAAAAICAgIJgZAAAAAAAAmBkAAAAAAAAEAAAAICAgIMQZAAAAAAAAxBkAAAAAAAAEAAAAICAgIAUaAAAAAAAABRoAAAAAAAAEAAAAICAgIE8aAAAAAAAATxoAAAAAAAAEAAAAICAgIIgaAAAAAAAAiBoAAAAAAAAEAAAAICAgILoaAAAAAAAAuhoAAAAAAAAEAAAAICAgIPMaAAAAAAAA8xoAAAAAAAAEAAAAICAgIB8bAAAAAAAAHxsAAAAAAAAEAAAAICAgIKQbAAAAAAAApBsAAAAAAAAEAAAAICAgIM8bAAAAAAAAzxsAAAAAAAAEAAAAICAgIPAbAAAAAAAA8BsAAAAAAAAEAAAAICAgIAUcAAAAAAAABRwAAAAAAAAEAAAAICAgIAscAAAAAAAACxwAAAAAAAAEAAAAICAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABYHAAAAAAAACIZAAAAAAAAAAAAAAAA8L8"
				],
				[
					223,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAKEaAAAAAAAAohoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChGgAAAAAAAKEaAAAAAAAAAAAAAAAA8L8"
				],
				[
					225,
					1,
					"insert",
					{
						"characters": "AS"
					},
					"AgAAAKMaAAAAAAAApBoAAAAAAAAAAAAApBoAAAAAAAClGgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjGgAAAAAAAKMaAAAAAAAAAAAAAAAA8L8"
				],
				[
					233,
					1,
					"paste",
					null,
					"AgAAANYaAAAAAAAA4BoAAAAAAAAAAAAA4BoAAAAAAADgGgAAAAAAAAcAAABwQnVmZmVy",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADWGgAAAAAAAN0aAAAAAAAAAAAAAAAA8L8"
				],
				[
					237,
					1,
					"paste",
					null,
					"AgAAABAbAAAAAAAAGhsAAAAAAAAAAAAAGhsAAAAAAAAaGwAAAAAAAAcAAABwQnVmZmVy",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQGwAAAAAAABcbAAAAAAAAAAAAAAAA8L8"
				],
				[
					241,
					1,
					"paste",
					null,
					"AgAAADMaAAAAAAAAPRoAAAAAAAAAAAAAPRoAAAAAAAA9GgAAAAAAAAcAAABwQnVmZmVy",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAzGgAAAAAAADoaAAAAAAAAAAAAAAAA8L8"
				],
				[
					245,
					1,
					"paste",
					null,
					"AgAAAAAZAAAAAAAAChkAAAAAAAAAAAAAChkAAAAAAAAKGQAAAAAAAAcAAABwQnVmZmVy",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAGQAAAAAAAAcZAAAAAAAAAAAAAAAA8L8"
				],
				[
					249,
					1,
					"paste",
					null,
					"AgAAALsbAAAAAAAAxRsAAAAAAAAAAAAAxRsAAAAAAADFGwAAAAAAAAcAAABwQnVmZmVy",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7GwAAAAAAAMIbAAAAAAAAAAAAAAAA8L8"
				],
				[
					256,
					1,
					"paste",
					null,
					"AgAAAEsbAAAAAAAAUhsAAAAAAAAAAAAAUhsAAAAAAABSGwAAAAAAACAAAABtcExvd0xldmVsRGF0YS0+Z2V0Q29tbWFuZExpc3QoKQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrGwAAAAAAAEsbAAAAAAAAAAAAAAAA8L8"
				],
				[
					260,
					1,
					"insert",
					{
						"characters": "Res"
					},
					"BAAAAGAZAAAAAAAAYRkAAAAAAAAAAAAAYRkAAAAAAABhGQAAAAAAAAgAAABuZXdTdGF0ZWEZAAAAAAAAYhkAAAAAAAAAAAAAYhkAAAAAAABjGQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoGQAAAAAAAGAZAAAAAAAAAAAAAAAA8L8"
				],
				[
					261,
					1,
					"insert_completion",
					{
						"completion": "Resource",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Resource"
					},
					"AgAAAGAZAAAAAAAAYBkAAAAAAAADAAAAUmVzYBkAAAAAAABoGQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjGQAAAAAAAGMZAAAAAAAAAAAAAAAA8L8"
				],
				[
					262,
					1,
					"insert",
					{
						"characters": "::S"
					},
					"AwAAAGgZAAAAAAAAaRkAAAAAAAAAAAAAaRkAAAAAAABqGQAAAAAAAAAAAABqGQAAAAAAAGsZAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoGQAAAAAAAGgZAAAAAAAAAAAAAAAA8L8"
				],
				[
					263,
					1,
					"insert_completion",
					{
						"completion": "State",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "State"
					},
					"AgAAAGoZAAAAAAAAahkAAAAAAAABAAAAU2oZAAAAAAAAbxkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrGQAAAAAAAGsZAAAAAAAAAAAAAAAA8L8"
				],
				[
					264,
					1,
					"insert",
					{
						"characters": "::"
					},
					"AgAAAG8ZAAAAAAAAcBkAAAAAAAAAAAAAcBkAAAAAAABxGQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABvGQAAAAAAAG8ZAAAAAAAAAAAAAAAA8L8"
				],
				[
					265,
					1,
					"paste",
					null,
					"AQAAAHEZAAAAAAAAgRkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABxGQAAAAAAAHEZAAAAAAAAAAAAAAAA8L8"
				],
				[
					272,
					1,
					"paste",
					null,
					"AgAAAJwaAAAAAAAAvRoAAAAAAAAAAAAAvRoAAAAAAAC9GgAAAAAAAAgAAABuZXdTdGF0ZQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACcGgAAAAAAAKQaAAAAAAAAAAAAAAAA8L8"
				],
				[
					276,
					1,
					"paste",
					null,
					"AgAAAO8bAAAAAAAAEBwAAAAAAAAAAAAAEBwAAAAAAAAQHAAAAAAAAAgAAABuZXdTdGF0ZQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvGwAAAAAAAPcbAAAAAAAAAAAAAAAA8L8"
				],
				[
					280,
					1,
					"right_delete",
					null,
					"AQAAABscAAAAAAAAGxwAAAAAAAAhAAAAbUNvbW1hbmRzUGVuZGluZyA9IHRydWU7CiAgICAgICAg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbHAAAAAAAADwcAAAAAAAAAAAAAAAAUkA"
				],
				[
					281,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAABscAAAAAAAAHBwAAAAAAAAAAAAAHBwAAAAAAAAdHAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbHAAAAAAAABscAAAAAAAAAAAAAAAA8L8"
				],
				[
					287,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAADQcAAAAAAAANRwAAAAAAAAAAAAANRwAAAAAAAA2HAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA0HAAAAAAAADQcAAAAAAAAAAAAAAAAQkA"
				],
				[
					291,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAANQbAAAAAAAA1RsAAAAAAAAAAAAA1RsAAAAAAADWGwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADUGwAAAAAAANQbAAAAAAAAAAAAAAAA8L8"
				],
				[
					295,
					1,
					"paste",
					null,
					"AgAAAE0ZAAAAAAAAgxkAAAAAAAAAAAAAgxkAAAAAAACDGQAAAAAAADwAAABnZXRTaGFkZXJTdGFnZU1hc2soUmVzb3VyY2U6OlN0YXRlOjpBY2NlbFN0cnVjdFdyaXRlLCBmYWxzZSk",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNGQAAAAAAAIkZAAAAAAAAAAAAAAAA8L8"
				],
				[
					298,
					1,
					"paste",
					null,
					"AgAAAIgaAAAAAAAAthoAAAAAAAAAAAAAthoAAAAAAAC2GgAAAAAAADAAAABnZXRBY2Nlc3NNYXNrKFJlc291cmNlOjpTdGF0ZTo6QWNjZWxTdHJ1Y3RXcml0ZSk",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACIGgAAAAAAALgaAAAAAAAAAAAAAAAA8L8"
				],
				[
					308,
					1,
					"paste",
					null,
					"AgAAADsaAAAAAAAAThoAAAAAAAAAAAAAThoAAAAAAABOGgAAAAAAACsAAABnZXRBY2Nlc3NNYXNrKG1wQVNCdWZmZXItPmdldEdsb2JhbFN0YXRlKCkp",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7GgAAAAAAAGYaAAAAAAAAAAAAAAAA8L8"
				],
				[
					311,
					1,
					"paste",
					null,
					"AgAAAO0YAAAAAAAADhkAAAAAAAAAAAAADhkAAAAAAAAOGQAAAAAAADYAAABnZXRTaGFkZXJTdGFnZU1hc2sobXBBU0J1ZmZlci0+Z2V0R2xvYmFsU3RhdGUoKSwgdHJ1ZSk",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtGAAAAAAAACMZAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKCopyContext.cpp",
			"settings":
			{
				"buffer_size": 28574,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACkdAAAAAAAAKh0AAAAAAAAAAAAAKh0AAAAAAAAyHQAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAApHQAAAAAAACkdAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALMdAAAAAAAAtB0AAAAAAAAAAAAAtB0AAAAAAAC8HQAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzHQAAAAAAALMdAAAAAAAAAAAAAAAAUkA"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAACkdAAAAAAAAKh0AAAAAAAAAAAAAKh0AAAAAAAAyHQAAAAAAAAAAAAAyHQAAAAAAADMdAAAAAAAAAAAAADMdAAAAAAAAOx0AAAAAAAAAAAAAKh0AAAAAAAAqHQAAAAAAAAgAAAAgICAgICAgIA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAApHQAAAAAAACkdAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"reindent",
					null,
					"AQAAACodAAAAAAAANh0AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAqHQAAAAAAACodAAAAAAAAAAAAAAAAUkA"
				],
				[
					12,
					1,
					"left_delete",
					null,
					"AgAAADIdAAAAAAAAMh0AAAAAAAAEAAAAICAgIDMdAAAAAAAAMx0AAAAAAAAIAAAAICAgICAgICA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2HQAAAAAAADYdAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "case"
					},
					"BAAAADIdAAAAAAAAMx0AAAAAAAAAAAAAMx0AAAAAAAA0HQAAAAAAAAAAAAA0HQAAAAAAADUdAAAAAAAAAAAAADUdAAAAAAAANh0AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAyHQAAAAAAADIdAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " Res"
					},
					"BAAAADYdAAAAAAAANx0AAAAAAAAAAAAANx0AAAAAAAA4HQAAAAAAAAAAAAA4HQAAAAAAADkdAAAAAAAAAAAAADkdAAAAAAAAOh0AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2HQAAAAAAADYdAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"insert_completion",
					{
						"completion": "Resource",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Resource"
					},
					"AgAAADcdAAAAAAAANx0AAAAAAAADAAAAUmVzNx0AAAAAAAA/HQAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6HQAAAAAAADodAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "::S"
					},
					"AwAAAD8dAAAAAAAAQB0AAAAAAAAAAAAAQB0AAAAAAABBHQAAAAAAAAAAAABBHQAAAAAAAEIdAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA/HQAAAAAAAD8dAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"insert_completion",
					{
						"completion": "State",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "State"
					},
					"AgAAAEEdAAAAAAAAQR0AAAAAAAABAAAAU0EdAAAAAAAARh0AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABCHQAAAAAAAEIdAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "::"
					},
					"AgAAAEYdAAAAAAAARx0AAAAAAAAAAAAARx0AAAAAAABIHQAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABGHQAAAAAAAEYdAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "Accele"
					},
					"BgAAAEgdAAAAAAAASR0AAAAAAAAAAAAASR0AAAAAAABKHQAAAAAAAAAAAABKHQAAAAAAAEsdAAAAAAAAAAAAAEsdAAAAAAAATB0AAAAAAAAAAAAATB0AAAAAAABNHQAAAAAAAAAAAABNHQAAAAAAAE4dAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABIHQAAAAAAAEgdAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert_completion",
					{
						"completion": "AccelerationStructure",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "AccelerationStructure"
					},
					"AgAAAEgdAAAAAAAASB0AAAAAAAAGAAAAQWNjZWxlSB0AAAAAAABdHQAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABOHQAAAAAAAE4dAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "Inpu"
					},
					"BAAAAF0dAAAAAAAAXh0AAAAAAAAAAAAAXh0AAAAAAABfHQAAAAAAAAAAAABfHQAAAAAAAGAdAAAAAAAAAAAAAGAdAAAAAAAAYR0AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABdHQAAAAAAAF0dAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert_completion",
					{
						"completion": "AccelerationStructureInput",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "AccelerationStructureInput"
					},
					"AgAAAEgdAAAAAAAASB0AAAAAAAAZAAAAQWNjZWxlcmF0aW9uU3RydWN0dXJlSW5wdUgdAAAAAAAAYh0AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABhHQAAAAAAAGEdAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAGIdAAAAAAAAYx0AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABiHQAAAAAAAGIdAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "\n\tretu"
					},
					"BwAAAGMdAAAAAAAAZB0AAAAAAAAAAAAAZB0AAAAAAABsHQAAAAAAAAAAAABsHQAAAAAAAHAdAAAAAAAAAAAAAHAdAAAAAAAAcR0AAAAAAAAAAAAAcR0AAAAAAAByHQAAAAAAAAAAAAByHQAAAAAAAHMdAAAAAAAAAAAAAHMdAAAAAAAAdB0AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjHQAAAAAAAGMdAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "rn"
					},
					"AgAAAHQdAAAAAAAAdR0AAAAAAAAAAAAAdR0AAAAAAAB2HQAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB0HQAAAAAAAHQdAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHYdAAAAAAAAdx0AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB2HQAAAAAAAHYdAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"paste",
					null,
					"AQAAAHcdAAAAAAAAux0AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB3HQAAAAAAAHcdAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALsdAAAAAAAAvB0AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7HQAAAAAAALsdAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"paste",
					null,
					"AgAAANwdAAAAAAAA9h0AAAAAAAAAAAAA9h0AAAAAAAD2HQAAAAAAAA4AAABOb25QaXhlbFNoYWRlcg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADcHQAAAAAAAOodAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					5,
					"left_delete",
					null,
					"BQAAAPUdAAAAAAAA9R0AAAAAAAABAAAAdPQdAAAAAAAA9B0AAAAAAAABAAAAdfMdAAAAAAAA8x0AAAAAAAABAAAAcPIdAAAAAAAA8h0AAAAAAAABAAAAbvEdAAAAAAAA8R0AAAAAAAABAAAASQ",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2HQAAAAAAAPYdAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "Build"
					},
					"BQAAAPEdAAAAAAAA8h0AAAAAAAAAAAAA8h0AAAAAAADzHQAAAAAAAAAAAADzHQAAAAAAAPQdAAAAAAAAAAAAAPQdAAAAAAAA9R0AAAAAAAAAAAAA9R0AAAAAAAD2HQAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADxHQAAAAAAAPEdAAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANsVAAAAAAAA3BUAAAAAAAAAAAAA3BUAAAAAAADoFQAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADbFQAAAAAAANsVAAAAAAAAAAAAAAAA8L8"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BgAAAKwWAAAAAAAArRYAAAAAAAAAAAAArRYAAAAAAAC1FgAAAAAAAAAAAADcFQAAAAAAANwVAAAAAAAADAAAACAgICAgICAgICAgIKkWAAAAAAAAqhYAAAAAAAAAAAAAqhYAAAAAAACyFgAAAAAAAAAAAAChFgAAAAAAAKEWAAAAAAAACAAAACAgICAgICAg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsFgAAAAAAAKwWAAAAAAAAAAAAAAAA8L8"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAKEWAAAAAAAAohYAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChFgAAAAAAAKEWAAAAAAAAAAAAAAAAUkA"
				],
				[
					62,
					1,
					"reindent",
					null,
					"AQAAAKEWAAAAAAAArRYAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChFgAAAAAAAKEWAAAAAAAAAAAAAAAAAAA"
				],
				[
					63,
					1,
					"left_delete",
					null,
					"AQAAAKkWAAAAAAAAqRYAAAAAAAAEAAAAICAgIA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtFgAAAAAAAK0WAAAAAAAAAAAAAAAA8L8"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "caswe"
					},
					"BQAAAKkWAAAAAAAAqhYAAAAAAAAAAAAAqhYAAAAAAACrFgAAAAAAAAAAAACrFgAAAAAAAKwWAAAAAAAAAAAAAKwWAAAAAAAArRYAAAAAAAAAAAAArRYAAAAAAACuFgAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpFgAAAAAAAKkWAAAAAAAAAAAAAAAA8L8"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAK4WAAAAAAAArxYAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACuFgAAAAAAAK4WAAAAAAAAAAAAAAAA8L8"
				],
				[
					66,
					3,
					"left_delete",
					null,
					"AwAAAK4WAAAAAAAArhYAAAAAAAABAAAAIK0WAAAAAAAArRYAAAAAAAABAAAAZawWAAAAAAAArBYAAAAAAAABAAAAdw",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvFgAAAAAAAK8WAAAAAAAAAAAAAAAA8L8"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAKwWAAAAAAAArRYAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsFgAAAAAAAKwWAAAAAAAAAAAAAAAA8L8"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": " Re"
					},
					"AwAAAK0WAAAAAAAArhYAAAAAAAAAAAAArhYAAAAAAACvFgAAAAAAAAAAAACvFgAAAAAAALAWAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtFgAAAAAAAK0WAAAAAAAAAAAAAAAA8L8"
				],
				[
					69,
					1,
					"insert_completion",
					{
						"completion": "Resource",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Resource"
					},
					"AgAAAK4WAAAAAAAArhYAAAAAAAACAAAAUmWuFgAAAAAAALYWAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwFgAAAAAAALAWAAAAAAAAAAAAAAAA8L8"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": "::S"
					},
					"AwAAALYWAAAAAAAAtxYAAAAAAAAAAAAAtxYAAAAAAAC4FgAAAAAAAAAAAAC4FgAAAAAAALkWAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC2FgAAAAAAALYWAAAAAAAAAAAAAAAA8L8"
				],
				[
					71,
					1,
					"insert_completion",
					{
						"completion": "State",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "State"
					},
					"AgAAALgWAAAAAAAAuBYAAAAAAAABAAAAU7gWAAAAAAAAvRYAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5FgAAAAAAALkWAAAAAAAAAAAAAAAA8L8"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "::A"
					},
					"AwAAAL0WAAAAAAAAvhYAAAAAAAAAAAAAvhYAAAAAAAC/FgAAAAAAAAAAAAC/FgAAAAAAAMAWAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9FgAAAAAAAL0WAAAAAAAAAAAAAAAA8L8"
				],
				[
					74,
					1,
					"insert_completion",
					{
						"completion": "AccelerationStructureInput",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "AccelerationStructureInput"
					},
					"AgAAAL8WAAAAAAAAvxYAAAAAAAABAAAAQb8WAAAAAAAA2RYAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADAFgAAAAAAAMAWAAAAAAAAAAAAAAAA8L8"
				],
				[
					75,
					5,
					"left_delete",
					null,
					"BQAAANgWAAAAAAAA2BYAAAAAAAABAAAAdNcWAAAAAAAA1xYAAAAAAAABAAAAddYWAAAAAAAA1hYAAAAAAAABAAAAcNUWAAAAAAAA1RYAAAAAAAABAAAAbtQWAAAAAAAA1BYAAAAAAAABAAAASQ",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADZFgAAAAAAANkWAAAAAAAAAAAAAAAA8L8"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "Copy"
					},
					"BAAAANQWAAAAAAAA1RYAAAAAAAAAAAAA1RYAAAAAAADWFgAAAAAAAAAAAADWFgAAAAAAANcWAAAAAAAAAAAAANcWAAAAAAAA2BYAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADUFgAAAAAAANQWAAAAAAAAAAAAAAAA8L8"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAANgWAAAAAAAA2RYAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADYFgAAAAAAANgWAAAAAAAAAAAAAAAA8L8"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "\n\tretu"
					},
					"BwAAANkWAAAAAAAA2hYAAAAAAAAAAAAA2hYAAAAAAADiFgAAAAAAAAAAAADiFgAAAAAAAOYWAAAAAAAAAAAAAOYWAAAAAAAA5xYAAAAAAAAAAAAA5xYAAAAAAADoFgAAAAAAAAAAAADoFgAAAAAAAOkWAAAAAAAAAAAAAOkWAAAAAAAA6hYAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADZFgAAAAAAANkWAAAAAAAAAAAAAAAA8L8"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": "nr"
					},
					"AgAAAOoWAAAAAAAA6xYAAAAAAAAAAAAA6xYAAAAAAADsFgAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADqFgAAAAAAAOoWAAAAAAAAAAAAAAAA8L8"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": " VkA"
					},
					"BAAAAOwWAAAAAAAA7RYAAAAAAAAAAAAA7RYAAAAAAADuFgAAAAAAAAAAAADuFgAAAAAAAO8WAAAAAAAAAAAAAO8WAAAAAAAA8BYAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsFgAAAAAAAOwWAAAAAAAAAAAAAAAA8L8"
				],
				[
					81,
					1,
					"insert_completion",
					{
						"completion": "VkAccessFlagBits",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "VkAccessFlagBits"
					},
					"AgAAAO0WAAAAAAAA7RYAAAAAAAADAAAAVmtB7RYAAAAAAAD9FgAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwFgAAAAAAAPAWAAAAAAAAAAAAAAAA8L8"
				],
				[
					82,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAP0WAAAAAAAA/xYAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD9FgAAAAAAAP0WAAAAAAAAAAAAAAAA8L8"
				],
				[
					85,
					1,
					"paste",
					null,
					"AQAAAP4WAAAAAAAAORcAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD+FgAAAAAAAP4WAAAAAAAAAAAAAAAA8L8"
				],
				[
					88,
					2,
					"left_delete",
					null,
					"AgAAABsXAAAAAAAAGxcAAAAAAAABAAAAchoXAAAAAAAAGhcAAAAAAAABAAAAbw",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcFwAAAAAAABwXAAAAAAAAAAAAAAAA8L8"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "|"
					},
					"AQAAABoXAAAAAAAAGxcAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAaFwAAAAAAABoXAAAAAAAAAAAAAAAA8L8"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADkXAAAAAAAAOhcAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5FwAAAAAAADkXAAAAAAAAAAAAAAAA8L8"
				],
				[
					100,
					1,
					"paste",
					null,
					"AgAAAOYWAAAAAAAA7BYAAAAAAAAAAAAA7BYAAAAAAADsFgAAAAAAAAYAAAByZXR1bnI",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmFgAAAAAAAOwWAAAAAAAAAAAAAAAA8L8"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAO8eAAAAAAAA8B4AAAAAAAAAAAAA8B4AAAAAAAD8HgAAAAAAAAAAAAD8HgAAAAAAAP0eAAAAAAAAAAAAAP0eAAAAAAAACR8AAAAAAAAAAAAA8B4AAAAAAADwHgAAAAAAAAwAAAAgICAgICAgICAgICA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvHgAAAAAAAO8eAAAAAAAAAAAAAAAA8L8"
				],
				[
					107,
					1,
					"paste",
					null,
					"AQAAAP0eAAAAAAAALR8AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD9HgAAAAAAAP0eAAAAAAAAAAAAAAAA8L8"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": "\nre"
					},
					"BAAAAC0fAAAAAAAALh8AAAAAAAAAAAAALh8AAAAAAAA6HwAAAAAAAAAAAAA6HwAAAAAAADsfAAAAAAAAAAAAADsfAAAAAAAAPB8AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAtHwAAAAAAAC0fAAAAAAAAAAAAAAAA8L8"
				],
				[
					109,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAADofAAAAAAAAOh8AAAAAAAACAAAAcmU6HwAAAAAAAEAfAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA8HwAAAAAAADwfAAAAAAAAAAAAAAAA8L8"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEAfAAAAAAAAQR8AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABAHwAAAAAAAEAfAAAAAAAAAAAAAAAA8L8"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGIeAAAAAAAAYx4AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABiHgAAAAAAAGIeAAAAAAAAAAAAAAAAAAA"
				],
				[
					116,
					1,
					"reindent",
					null,
					"AQAAAGMeAAAAAAAAbx4AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjHgAAAAAAAGMeAAAAAAAAAAAAAAAA8L8"
				],
				[
					117,
					1,
					"left_delete",
					null,
					"AQAAAGseAAAAAAAAax4AAAAAAAAEAAAAICAgIA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABvHgAAAAAAAG8eAAAAAAAAAAAAAAAA8L8"
				],
				[
					118,
					1,
					"paste",
					null,
					"AQAAAGseAAAAAAAAmx4AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrHgAAAAAAAGseAAAAAAAAAAAAAAAA8L8"
				],
				[
					121,
					3,
					"left_delete",
					null,
					"AwAAACofAAAAAAAAKh8AAAAAAABQAAAAICAgICAgICAgICAgY2FzZSBSZXNvdXJjZTo6U3RhdGU6OkFjY2VsZXJhdGlvblN0cnVjdHVyZUNvcHk6CiAgICAgICAgICAgIHJldHVybiApHwAAAAAAACkfAAAAAAAAAQAAAAooHwAAAAAAACgfAAAAAAAAAQAAAAo",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB6HwAAAAAAACofAAAAAAAAAAAAAAAA8L8"
				],
				[
					128,
					1,
					"left_delete",
					null,
					"AQAAACAfAAAAAAAAIB8AAAAAAAAIAAAAIC8vID8/Pz8",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgHwAAAAAAACgfAAAAAAAAAAAAAAAA8L8"
				],
				[
					143,
					1,
					"paste",
					null,
					"AgAAAPsVAAAAAAAAFBYAAAAAAAAAAAAAFBYAAAAAAAAUFgAAAAAAAA4AAABOb25QaXhlbFNoYWRlcg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD7FQAAAAAAAAkWAAAAAAAAAAAAAAAA8L8"
				],
				[
					144,
					4,
					"left_delete",
					null,
					"BAAAABMWAAAAAAAAExYAAAAAAAABAAAAeRIWAAAAAAAAEhYAAAAAAAABAAAAcBEWAAAAAAAAERYAAAAAAAABAAAAbxAWAAAAAAAAEBYAAAAAAAABAAAAQw",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAUFgAAAAAAABQWAAAAAAAAAAAAAAAA8L8"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": "ReadWr"
					},
					"BgAAABAWAAAAAAAAERYAAAAAAAAAAAAAERYAAAAAAAASFgAAAAAAAAAAAAASFgAAAAAAABMWAAAAAAAAAAAAABMWAAAAAAAAFBYAAAAAAAAAAAAAFBYAAAAAAAAVFgAAAAAAAAAAAAAVFgAAAAAAABYWAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQFgAAAAAAABAWAAAAAAAAAAAAAAAA8L8"
				],
				[
					146,
					1,
					"insert",
					{
						"characters": "ite"
					},
					"AwAAABYWAAAAAAAAFxYAAAAAAAAAAAAAFxYAAAAAAAAYFgAAAAAAAAAAAAAYFgAAAAAAABkWAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAWFgAAAAAAABYWAAAAAAAAAAAAAAAA8L8"
				],
				[
					155,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAF0VAAAAAAAAXhUAAAAAAAAAAAAAXhUAAAAAAABmFQAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABdFQAAAAAAAF0VAAAAAAAAAAAAAAAA8L8"
				],
				[
					157,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANkUAAAAAAAA2hQAAAAAAAAAAAAA2hQAAAAAAADiFAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADZFAAAAAAAANkUAAAAAAAAAAAAAAAAUkA"
				],
				[
					161,
					4,
					"right_delete",
					null,
					"BAAAACIWAAAAAAAAIhYAAAAAAAABAAAAUiIWAAAAAAAAIhYAAAAAAAABAAAAZSIWAAAAAAAAIhYAAAAAAAABAAAAYSIWAAAAAAAAIhYAAAAAAAABAAAAZA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiFgAAAAAAACIWAAAAAAAAAAAAAAAA8L8"
				],
				[
					162,
					5,
					"right_delete",
					null,
					"BQAAACIWAAAAAAAAIhYAAAAAAAABAAAAVyIWAAAAAAAAIhYAAAAAAAABAAAAciIWAAAAAAAAIhYAAAAAAAABAAAAaSIWAAAAAAAAIhYAAAAAAAABAAAAdCIWAAAAAAAAIhYAAAAAAAABAAAAZQ",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiFgAAAAAAACIWAAAAAAAAAAAAAAAA8L8"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": "Dest"
					},
					"BAAAACIWAAAAAAAAIxYAAAAAAAAAAAAAIxYAAAAAAAAkFgAAAAAAAAAAAAAkFgAAAAAAACUWAAAAAAAAAAAAACUWAAAAAAAAJhYAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiFgAAAAAAACIWAAAAAAAAAAAAAAAA8L8"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACcWAAAAAAAAKBYAAAAAAAAAAAAAKBYAAAAAAAAwFgAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAnFgAAAAAAACcWAAAAAAAAAAAAAAAA8L8"
				],
				[
					169,
					1,
					"paste",
					null,
					"AQAAADAWAAAAAAAAYBYAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwFgAAAAAAADAWAAAAAAAAAAAAAAAA8L8"
				],
				[
					172,
					1,
					"insert",
					{
						"characters": "Source"
					},
					"BwAAAFsWAAAAAAAAXBYAAAAAAAAAAAAAXBYAAAAAAABcFgAAAAAAAAQAAABEZXN0XBYAAAAAAABdFgAAAAAAAAAAAABdFgAAAAAAAF4WAAAAAAAAAAAAAF4WAAAAAAAAXxYAAAAAAAAAAAAAXxYAAAAAAABgFgAAAAAAAAAAAABgFgAAAAAAAGEWAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABbFgAAAAAAAF8WAAAAAAAAAAAAAAAA8L8"
				],
				[
					175,
					1,
					"insert",
					{
						"characters": "\n\treturn"
					},
					"CQAAACcWAAAAAAAAKBYAAAAAAAAAAAAAKBYAAAAAAAAwFgAAAAAAAAAAAAAwFgAAAAAAADQWAAAAAAAAAAAAADQWAAAAAAAANRYAAAAAAAAAAAAANRYAAAAAAAA2FgAAAAAAAAAAAAA2FgAAAAAAADcWAAAAAAAAAAAAADcWAAAAAAAAOBYAAAAAAAAAAAAAOBYAAAAAAAA5FgAAAAAAAAAAAAA5FgAAAAAAADoWAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAnFgAAAAAAACcWAAAAAAAAAAAAAAAA8L8"
				],
				[
					176,
					1,
					"insert",
					{
						"characters": " Vk"
					},
					"AwAAADoWAAAAAAAAOxYAAAAAAAAAAAAAOxYAAAAAAAA8FgAAAAAAAAAAAAA8FgAAAAAAAD0WAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6FgAAAAAAADoWAAAAAAAAAAAAAAAA8L8"
				],
				[
					177,
					1,
					"insert_completion",
					{
						"completion": "VkAccessFlagBits",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "VkAccessFlagBits"
					},
					"AgAAADsWAAAAAAAAOxYAAAAAAAACAAAAVms7FgAAAAAAAEsWAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA9FgAAAAAAAD0WAAAAAAAAAAAAAAAA8L8"
				],
				[
					178,
					15,
					"left_delete",
					null,
					"DwAAAEoWAAAAAAAAShYAAAAAAAABAAAAc0kWAAAAAAAASRYAAAAAAAABAAAAdEgWAAAAAAAASBYAAAAAAAABAAAAaUcWAAAAAAAARxYAAAAAAAABAAAAQkYWAAAAAAAARhYAAAAAAAABAAAAZ0UWAAAAAAAARRYAAAAAAAABAAAAYUQWAAAAAAAARBYAAAAAAAABAAAAbEMWAAAAAAAAQxYAAAAAAAABAAAARkIWAAAAAAAAQhYAAAAAAAABAAAAc0EWAAAAAAAAQRYAAAAAAAABAAAAc0AWAAAAAAAAQBYAAAAAAAABAAAAZT8WAAAAAAAAPxYAAAAAAAABAAAAYz4WAAAAAAAAPhYAAAAAAAABAAAAYz0WAAAAAAAAPRYAAAAAAAABAAAAQTwWAAAAAAAAPBYAAAAAAAABAAAAaw",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABLFgAAAAAAAEsWAAAAAAAAAAAAAAAA8L8"
				],
				[
					179,
					1,
					"left_delete",
					null,
					"AQAAADsWAAAAAAAAOxYAAAAAAAABAAAAVg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA8FgAAAAAAADwWAAAAAAAAAAAAAAAA8L8"
				],
				[
					186,
					1,
					"paste",
					null,
					"AQAAADsWAAAAAAAAaRYAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7FgAAAAAAADsWAAAAAAAAAAAAAAAA8L8"
				],
				[
					187,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAGkWAAAAAAAAahYAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABpFgAAAAAAAGkWAAAAAAAAAAAAAAAA8L8"
				],
				[
					194,
					1,
					"paste",
					null,
					"AgAAALkWAAAAAAAA5hYAAAAAAAAAAAAA5hYAAAAAAADmFgAAAAAAAHAAAABWa0FjY2Vzc0ZsYWdCaXRzKFZLX0FDQ0VTU19BQ0NFTEVSQVRJT05fU1RSVUNUVVJFX1dSSVRFX0JJVF9LSFIgfCBWS19BQ0NFU1NfQUNDRUxFUkFUSU9OX1NUUlVDVFVSRV9SRUFEX0JJVF9LSFIp",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5FgAAAAAAACkXAAAAAAAAAAAAAAAA8L8"
				],
				[
					197,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGoWAAAAAAAAaxYAAAAAAAAAAAAAaxYAAAAAAAB3FgAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqFgAAAAAAAGoWAAAAAAAAAAAAAAAA8L8"
				],
				[
					200,
					1,
					"left_delete",
					null,
					"AgAAAA4XAAAAAAAADhcAAAAAAACbAAAAY2FzZSBSZXNvdXJjZTo6U3RhdGU6OkFjY2VsZXJhdGlvblN0cnVjdHVyZUNvcHk6CiAgICAgICAgICAgIHJldHVybiBWa0FjY2Vzc0ZsYWdCaXRzKFZLX0FDQ0VTU19UUkFOU0ZFUl9SRUFEX0JJVCB8IFZLX0FDQ0VTU19UUkFOU0ZFUl9XUklURV9CSVQpOwoKICAgICAgICBrFgAAAAAAAGsWAAAAAAAADAAAACAgICAgICAgICAgIA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOFwAAAAAAAKkXAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"left_delete",
					null,
					"AQAAAM8dAAAAAAAAzx0AAAAAAABaAAAAICAgIHJldHVybiBWS19CVUZGRVJfVVNBR0VfQUNDRUxFUkFUSU9OX1NUUlVDVFVSRV9CVUlMRF9JTlBVVF9SRUFEX09OTFlfQklUX0tIUjsKCiAgICAgICAg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM8dAAAAAAAAKR4AAAAAAAAAAAAAAABSQA"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "\ncase"
					},
					"BgAAADkeAAAAAAAAOh4AAAAAAAAAAAAAOh4AAAAAAABCHgAAAAAAAAAAAABCHgAAAAAAAEMeAAAAAAAAAAAAAEMeAAAAAAAARB4AAAAAAAAAAAAARB4AAAAAAABFHgAAAAAAAAAAAABFHgAAAAAAAEYeAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADkeAAAAAAAAOR4AAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": " R"
					},
					"AgAAAEYeAAAAAAAARx4AAAAAAAAAAAAARx4AAAAAAABIHgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEYeAAAAAAAARh4AAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					1,
					"insert_completion",
					{
						"completion": "Resource",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Resource"
					},
					"AgAAAEceAAAAAAAARx4AAAAAAAABAAAAUkceAAAAAAAATx4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEgeAAAAAAAASB4AAAAAAAAAAAAAAADwvw"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "::S"
					},
					"AwAAAE8eAAAAAAAAUB4AAAAAAAAAAAAAUB4AAAAAAABRHgAAAAAAAAAAAABRHgAAAAAAAFIeAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE8eAAAAAAAATx4AAAAAAAAAAAAAAADwvw"
				],
				[
					38,
					1,
					"insert_completion",
					{
						"completion": "State",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "State"
					},
					"AgAAAFEeAAAAAAAAUR4AAAAAAAABAAAAU1EeAAAAAAAAVh4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFIeAAAAAAAAUh4AAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "::"
					},
					"AgAAAFYeAAAAAAAAVx4AAAAAAAAAAAAAVx4AAAAAAABYHgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFYeAAAAAAAAVh4AAAAAAAAAAAAAAADwvw"
				],
				[
					40,
					1,
					"paste",
					null,
					"AQAAAFgeAAAAAAAAcx4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFgeAAAAAAAAWB4AAAAAAAAAAAAAAADwvw"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAHMeAAAAAAAAdB4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHMeAAAAAAAAcx4AAAAAAAAAAAAAAADwvw"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "\ncase"
					},
					"BgAAADkeAAAAAAAAOh4AAAAAAAAAAAAAOh4AAAAAAABCHgAAAAAAAAAAAABCHgAAAAAAAEMeAAAAAAAAAAAAAEMeAAAAAAAARB4AAAAAAAAAAAAARB4AAAAAAABFHgAAAAAAAAAAAABFHgAAAAAAAEYeAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADkeAAAAAAAAOR4AAAAAAAAAAAAAAADwvw"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEYeAAAAAAAARx4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEYeAAAAAAAARh4AAAAAAAAAAAAAAADwvw"
				],
				[
					54,
					1,
					"paste",
					null,
					"AQAAAEceAAAAAAAAch4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEceAAAAAAAARx4AAAAAAAAAAAAAAADwvw"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": " |"
					},
					"AgAAAGkWAAAAAAAAahYAAAAAAAAAAAAAahYAAAAAAABrFgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGkWAAAAAAAAaRYAAAAAAAAAAAAAAADwvw"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": " VK_A"
					},
					"BQAAAGsWAAAAAAAAbBYAAAAAAAAAAAAAbBYAAAAAAABtFgAAAAAAAAAAAABtFgAAAAAAAG4WAAAAAAAAAAAAAG4WAAAAAAAAbxYAAAAAAAAAAAAAbxYAAAAAAABwFgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGsWAAAAAAAAaxYAAAAAAAAAAAAAAADwvw"
				],
				[
					63,
					1,
					"insert_completion",
					{
						"completion": "VK_ACCESS_SHADER_WRITE_BIT",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "VK_ACCESS_SHADER_WRITE_BIT"
					},
					"AgAAAGwWAAAAAAAAbBYAAAAAAAAEAAAAVktfQWwWAAAAAAAAhhYAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHAWAAAAAAAAcBYAAAAAAAAAAAAAAADwvw"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "READ"
					},
					"BQAAAH0WAAAAAAAAfhYAAAAAAAAAAAAAfhYAAAAAAAB+FgAAAAAAAAUAAABXUklURX4WAAAAAAAAfxYAAAAAAAAAAAAAfxYAAAAAAACAFgAAAAAAAAAAAACAFgAAAAAAAIEWAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH0WAAAAAAAAghYAAAAAAAAAAAAAAADwvw"
				],
				[
					79,
					4,
					"left_delete",
					null,
					"BAAAAGwWAAAAAAAAbBYAAAAAAAAZAAAAVktfQUNDRVNTX1NIQURFUl9SRUFEX0JJVGsWAAAAAAAAaxYAAAAAAAABAAAAIGoWAAAAAAAAahYAAAAAAAABAAAAfGkWAAAAAAAAaRYAAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGwWAAAAAAAAhRYAAAAAAAAAAAAAAADwvw"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": "VkAccess"
					},
					"CAAAALoWAAAAAAAAuxYAAAAAAAAAAAAAuxYAAAAAAAC8FgAAAAAAAAAAAAC8FgAAAAAAAL0WAAAAAAAAAAAAAL0WAAAAAAAAvhYAAAAAAAAAAAAAvhYAAAAAAAC/FgAAAAAAAAAAAAC/FgAAAAAAAMAWAAAAAAAAAAAAAMAWAAAAAAAAwRYAAAAAAAAAAAAAwRYAAAAAAADCFgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALoWAAAAAAAAuhYAAAAAAAAAAAAAAADwvw"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "FlagB"
					},
					"BQAAAMIWAAAAAAAAwxYAAAAAAAAAAAAAwxYAAAAAAADEFgAAAAAAAAAAAADEFgAAAAAAAMUWAAAAAAAAAAAAAMUWAAAAAAAAxhYAAAAAAAAAAAAAxhYAAAAAAADHFgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMIWAAAAAAAAwhYAAAAAAAAAAAAAAADwvw"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": "its("
					},
					"BAAAAMcWAAAAAAAAyBYAAAAAAAAAAAAAyBYAAAAAAADJFgAAAAAAAAAAAADJFgAAAAAAAMoWAAAAAAAAAAAAAMoWAAAAAAAAyxYAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMcWAAAAAAAAxxYAAAAAAAAAAAAAAADwvw"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": " |"
					},
					"AgAAAPgWAAAAAAAA+RYAAAAAAAAAAAAA+RYAAAAAAAD6FgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPgWAAAAAAAA+BYAAAAAAAAAAAAAAADwvw"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPoWAAAAAAAA+xYAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPoWAAAAAAAA+hYAAAAAAAAAAAAAAADwvw"
				],
				[
					92,
					1,
					"paste",
					null,
					"AQAAAPsWAAAAAAAAFBcAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPsWAAAAAAAA+xYAAAAAAAAAAAAAAADwvw"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAABQXAAAAAAAAFRcAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABQXAAAAAAAAFBcAAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAALodAAAAAAAAux0AAAAAAAAAAAAAux0AAAAAAADDHQAAAAAAAAAAAADDHQAAAAAAAMQdAAAAAAAAAAAAAMQdAAAAAAAAzB0AAAAAAAAAAAAAux0AAAAAAAC7HQAAAAAAAAgAAAAgICAgICAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC6HQAAAAAAALodAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"reindent",
					null,
					"AQAAALsdAAAAAAAAxx0AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7HQAAAAAAALsdAAAAAAAAAAAAAAAAUkA"
				],
				[
					17,
					1,
					"left_delete",
					null,
					"AgAAAMMdAAAAAAAAwx0AAAAAAAAEAAAAICAgIMQdAAAAAAAAxB0AAAAAAAAIAAAAICAgICAgICA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADHHQAAAAAAAMcdAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"paste",
					null,
					"AQAAAMMdAAAAAAAAMh4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDHQAAAAAAAMMdAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"paste",
					null,
					"AgAAAMMdAAAAAAAA2R0AAAAAAAAAAAAA2R0AAAAAAADZHQAAAAAAAAgAAAAgICAgICAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLHQAAAAAAAMMdAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"paste",
					null,
					"AQAAAPIdAAAAAAAACB4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADyHQAAAAAAAPIdAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"paste",
					null,
					"AQAAACIeAAAAAAAAOB4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiHgAAAAAAACIeAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"paste",
					null,
					"AQAAAFceAAAAAAAAbR4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABXHgAAAAAAAFceAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"left_delete",
					null,
					"AQAAAIEeAAAAAAAAgR4AAAAAAAABAAAALA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCHgAAAAAAAIIeAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAIEeAAAAAAAAgh4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBHgAAAAAAAIEeAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"right_delete",
					null,
					"AQAAAE0eAAAAAAAATR4AAAAAAAABAAAALA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNHgAAAAAAAE0eAAAAAAAAAAAAAACwfEA"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAE0eAAAAAAAATh4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNHgAAAAAAAE0eAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"left_delete",
					null,
					"AQAAABgeAAAAAAAAGB4AAAAAAAABAAAALA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAZHgAAAAAAABkeAAAAAAAAAAAAAABAfUA"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAABgeAAAAAAAAGR4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAYHgAAAAAAABgeAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					1,
					"left_delete",
					null,
					"AQAAAOgdAAAAAAAA6B0AAAAAAAABAAAALA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADpHQAAAAAAAOkdAAAAAAAAAAAAAABwekA"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAOgdAAAAAAAA6R0AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADoHQAAAAAAAOgdAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "\n\te"
					},
					"BAAAAOkdAAAAAAAA6h0AAAAAAAAAAAAA6h0AAAAAAADyHQAAAAAAAAAAAADyHQAAAAAAAPYdAAAAAAAAAAAAAPYdAAAAAAAA9x0AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADpHQAAAAAAAOkdAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"left_delete",
					null,
					"AQAAAPYdAAAAAAAA9h0AAAAAAAABAAAAZQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3HQAAAAAAAPcdAAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "re"
					},
					"AgAAAPYdAAAAAAAA9x0AAAAAAAAAAAAA9x0AAAAAAAD4HQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2HQAAAAAAAPYdAAAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAAPYdAAAAAAAA9h0AAAAAAAACAAAAcmX2HQAAAAAAAPwdAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD4HQAAAAAAAPgdAAAAAAAAAAAAAAAA8L8"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPwdAAAAAAAA/R0AAAAAAAAAAAAA/R0AAAAAAAAJHgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD8HQAAAAAAAPwdAAAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKMeAAAAAAAApB4AAAAAAAAAAAAA/R0AAAAAAAD9HQAAAAAAAAwAAAAgICAgICAgICAgICA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjHgAAAAAAAKMeAAAAAAAAAAAAAAAAW0A"
				],
				[
					58,
					1,
					"reindent",
					null,
					"AQAAAJceAAAAAAAAnx4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACXHgAAAAAAAJceAAAAAAAAAAAAAAAAAAA"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "\tret"
					},
					"BAAAAJ8eAAAAAAAAox4AAAAAAAAAAAAAox4AAAAAAACkHgAAAAAAAAAAAACkHgAAAAAAAKUeAAAAAAAAAAAAAKUeAAAAAAAAph4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACfHgAAAAAAAJ8eAAAAAAAAAAAAAAAA8L8"
				],
				[
					60,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAAKMeAAAAAAAAox4AAAAAAAADAAAAcmV0ox4AAAAAAACpHgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACmHgAAAAAAAKYeAAAAAAAAAAAAAAAA8L8"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAALMeAAAAAAAAtB4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzHgAAAAAAALMeAAAAAAAAAAAAAAAA8L8"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAALQeAAAAAAAAtR4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC0HgAAAAAAALQeAAAAAAAAAAAAAAAA8L8"
				],
				[
					69,
					2,
					"right_delete",
					null,
					"AgAAALMeAAAAAAAAsx4AAAAAAAABAAAAI7MeAAAAAAAAsx4AAAAAAAABAAAAIw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzHgAAAAAAALMeAAAAAAAAAAAAAAAA8L8"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAALMeAAAAAAAAtB4AAAAAAAAAAAAAtB4AAAAAAAC1HgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzHgAAAAAAALMeAAAAAAAAAAAAAAAA8L8"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAO8eAAAAAAAA8B4AAAAAAAAAAAAA8B4AAAAAAADxHgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvHgAAAAAAAO8eAAAAAAAAAAAAAAAA8L8"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAACofAAAAAAAAKx8AAAAAAAAAAAAAKx8AAAAAAAAsHwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAqHwAAAAAAACofAAAAAAAAAAAAAAAA8L8"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAGYfAAAAAAAAZx8AAAAAAAAAAAAAZx8AAAAAAABoHwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABmHwAAAAAAAGYfAAAAAAAAAAAAAAAA8L8"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAKEfAAAAAAAAoh8AAAAAAAAAAAAAoh8AAAAAAACjHwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChHwAAAAAAAKEfAAAAAAAAAAAAAAAA8L8"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAN4fAAAAAAAA3x8AAAAAAAAAAAAA3x8AAAAAAADgHwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADeHwAAAAAAAN4fAAAAAAAAAAAAAAAA8L8"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": " ;"
					},
					"AgAAAPwdAAAAAAAA/R0AAAAAAAAAAAAA/R0AAAAAAAD+HQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD8HQAAAAAAAPwdAAAAAAAAAAAAAAAA8L8"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": " ;"
					},
					"AgAAAKseAAAAAAAArB4AAAAAAAAAAAAArB4AAAAAAACtHgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACrHgAAAAAAAKseAAAAAAAAAAAAAACAZkA"
				],
				[
					94,
					1,
					"paste",
					null,
					"AQAAAP0dAAAAAAAAFB4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD9HQAAAAAAAP0dAAAAAAAAAAAAAAAA8L8"
				],
				[
					95,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABQeAAAAAAAAFh4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAUHgAAAAAAABQeAAAAAAAAAAAAAAAA8L8"
				],
				[
					98,
					1,
					"paste",
					null,
					"AQAAAMUeAAAAAAAA+x4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADFHgAAAAAAAMUeAAAAAAAAAAAAAAAA8L8"
				],
				[
					101,
					1,
					"paste",
					null,
					"AQAAABUeAAAAAAAAQR4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAVHgAAAAAAABUeAAAAAAAAAAAAAAAA8L8"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": " |"
					},
					"AgAAAEEeAAAAAAAAQh4AAAAAAAAAAAAAQh4AAAAAAABDHgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABBHgAAAAAAAEEeAAAAAAAAAAAAAAAA8L8"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEMeAAAAAAAARB4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABDHgAAAAAAAEMeAAAAAAAAAAAAAAAA8L8"
				],
				[
					106,
					1,
					"paste",
					null,
					"AQAAAEQeAAAAAAAAaB4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABEHgAAAAAAAEQeAAAAAAAAAAAAAAAA8L8"
				],
				[
					114,
					1,
					"paste",
					null,
					"AgAAAA0WAAAAAAAAHBYAAAAAAAAAAAAAHBYAAAAAAAAcFgAAAAAAABkAAABBY2NlbGVyYXRpb25TdHJ1Y3R1cmVEZXN0",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAANFgAAAAAAACYWAAAAAAAAAAAAAAAA8L8"
				],
				[
					118,
					1,
					"paste",
					null,
					"AgAAADEWAAAAAAAAXhYAAAAAAAAAAAAAXhYAAAAAAABeFgAAAAAAAC4AAABWS19BQ0NFU1NfQUNDRUxFUkFUSU9OX1NUUlVDVFVSRV9XUklURV9CSVRfS0hS",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAxFgAAAAAAAF8WAAAAAAAAAAAAAAAA8L8"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAGAWAAAAAAAAYRYAAAAAAAAAAAAAYRYAAAAAAABiFgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABgFgAAAAAAAGAWAAAAAAAAAAAAAAAA8L8"
				],
				[
					125,
					1,
					"paste",
					null,
					"AQAAAGEWAAAAAAAA0RYAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABhFgAAAAAAAGEWAAAAAAAAAAAAAAAAAAA"
				],
				[
					133,
					1,
					"paste",
					null,
					"AgAAAH8WAAAAAAAAjxYAAAAAAAAAAAAAjxYAAAAAAACPFgAAAAAAAA8AAABBY2NlbFN0cnVjdFJlYWQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB/FgAAAAAAAI4WAAAAAAAAAAAAAAAA8L8"
				],
				[
					137,
					1,
					"paste",
					null,
					"AgAAAKQWAAAAAAAA0hYAAAAAAAAAAAAA0hYAAAAAAADSFgAAAAAAAC0AAABWS19BQ0NFU1NfQUNDRUxFUkFUSU9OX1NUUlVDVFVSRV9SRUFEX0JJVF9LSFI",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACkFgAAAAAAANEWAAAAAAAAAAAAAAAA8L8"
				],
				[
					143,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAN0WAAAAAAAA3hYAAAAAAAAAAAAA3hYAAAAAAADfFgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADdFgAAAAAAAN0WAAAAAAAAAAAAAAAA8L8"
				],
				[
					146,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAABoXAAAAAAAAGxcAAAAAAAAAAAAAGxcAAAAAAAAcFwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAaFwAAAAAAABoXAAAAAAAAAAAAAAAA8L8"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAANQWAAAAAAAA1RYAAAAAAAAAAAAA1RYAAAAAAADWFgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADUFgAAAAAAANQWAAAAAAAAAAAAAACAVkA"
				],
				[
					150,
					1,
					"reindent",
					null,
					"AQAAANUWAAAAAAAA4RYAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADVFgAAAAAAANUWAAAAAAAAAAAAAAAAAAA"
				],
				[
					151,
					1,
					"left_delete",
					null,
					"AQAAAN0WAAAAAAAA3RYAAAAAAAAEAAAAICAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhFgAAAAAAAOEWAAAAAAAAAAAAAAAA8L8"
				],
				[
					152,
					1,
					"paste",
					null,
					"AQAAAN0WAAAAAAAAPRcAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADdFgAAAAAAAN0WAAAAAAAAAAAAAAAA8L8"
				],
				[
					155,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAkXAAAAAAAAChcAAAAAAAAAAAAAChcAAAAAAAASFwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJFwAAAAAAAAkXAAAAAAAAAAAAAAAA8L8"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAABIXAAAAAAAAExcAAAAAAAAAAAAAExcAAAAAAAAbFwAAAAAAAAAAAAAKFwAAAAAAAAoXAAAAAAAACAAAACAgICAgICAg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASFwAAAAAAABIXAAAAAAAAAAAAAABQeUA"
				],
				[
					165,
					1,
					"reindent",
					null,
					"AQAAAAoXAAAAAAAAEhcAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAKFwAAAAAAAAoXAAAAAAAAAAAAAAAAUkA"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": "`"
					},
					"AgAAABIXAAAAAAAAExcAAAAAAAAAAAAAFBcAAAAAAAAUFwAAAAAAAAgAAAAgICAgICAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASFwAAAAAAABIXAAAAAAAAAAAAAAAA8L8"
				],
				[
					167,
					1,
					"left_delete",
					null,
					"AQAAABIXAAAAAAAAEhcAAAAAAAABAAAAYA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATFwAAAAAAABMXAAAAAAAAAAAAAAAA8L8"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAABIXAAAAAAAAFhcAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASFwAAAAAAABIXAAAAAAAAAAAAAAAA8L8"
				],
				[
					169,
					1,
					"paste",
					null,
					"AQAAABYXAAAAAAAASxcAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAWFwAAAAAAABYXAAAAAAAAAAAAAAAA8L8"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAIEXAAAAAAAAghcAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBFwAAAAAAAIEXAAAAAAAAAAAAAABIgkA"
				],
				[
					173,
					1,
					"reindent",
					null,
					"AQAAAIEXAAAAAAAAiRcAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBFwAAAAAAAIEXAAAAAAAAAAAAAAAAAAA"
				],
				[
					174,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAIkXAAAAAAAAjRcAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJFwAAAAAAAIkXAAAAAAAAAAAAAAAA8L8"
				],
				[
					175,
					1,
					"paste",
					null,
					"AQAAAI0XAAAAAAAAwhcAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNFwAAAAAAAI0XAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/VAO.h",
			"settings":
			{
				"buffer_size": 5144,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/GpuMemoryHeap.cpp",
			"settings":
			{
				"buffer_size": 5126,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Framework.h",
			"settings":
			{
				"buffer_size": 13035,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKState.cpp",
			"settings":
			{
				"buffer_size": 27439,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"CAAAAD0KAAAAAAAAPgoAAAAAAAAAAAAAPgoAAAAAAABOCgAAAAAAAAAAAABOCgAAAAAAAE8KAAAAAAAAAAAAAE8KAAAAAAAAXwoAAAAAAAAAAAAAPgoAAAAAAAA+CgAAAAAAABAAAAAgICAgICAgICAgICAgICAgTwoAAAAAAABQCgAAAAAAAAAAAABQCgAAAAAAAGAKAAAAAAAAAAAAAD8KAAAAAAAAPwoAAAAAAAAQAAAAICAgICAgICAgICAgICAgIA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPQoAAAAAAAA9CgAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAD8KAAAAAAAAQAoAAAAAAAAAAAAAQQoAAAAAAABBCgAAAAAAABAAAAAgICAgICAgICAgICAgICAg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPwoAAAAAAAA/CgAAAAAAAAAAAAAAAGJA"
				],
				[
					7,
					1,
					"reindent",
					null,
					"AQAAAD8KAAAAAAAATwoAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPwoAAAAAAAA/CgAAAAAAAAAAAAAAAAAA"
				],
				[
					8,
					1,
					"left_delete",
					null,
					"AQAAAEsKAAAAAAAASwoAAAAAAAAEAAAAICAgIA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATwoAAAAAAABPCgAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"paste",
					null,
					"AQAAAEsKAAAAAAAASAsAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASwoAAAAAAABLCgAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"paste",
					null,
					"AgAAAEsKAAAAAAAAXAoAAAAAAAAAAAAAXAoAAAAAAABcCgAAAAAAAAQAAAAgICAg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATwoAAAAAAABLCgAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"paste",
					null,
					"AgAAAIcKAAAAAAAAmAoAAAAAAAAAAAAAmAoAAAAAAACYCgAAAAAAAAQAAAAgICAg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiwoAAAAAAACHCgAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"paste",
					null,
					"AgAAAMEKAAAAAAAA0goAAAAAAAAAAAAA0goAAAAAAADSCgAAAAAAAAQAAAAgICAg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxQoAAAAAAADBCgAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"paste",
					null,
					"AgAAAPYKAAAAAAAABwsAAAAAAAAAAAAABwsAAAAAAAAHCwAAAAAAAAQAAAAgICAg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+goAAAAAAAD2CgAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"paste",
					null,
					"AgAAAC8LAAAAAAAAQAsAAAAAAAAAAAAAQAsAAAAAAABACwAAAAAAAAQAAAAgICAg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMwsAAAAAAAAvCwAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"paste",
					null,
					"AgAAAGELAAAAAAAAcgsAAAAAAAAAAAAAcgsAAAAAAAByCwAAAAAAAAQAAAAgICAg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZQsAAAAAAABhCwAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					3,
					"unindent",
					null,
					"AwAAAD8KAAAAAAAAPwoAAAAAAAAEAAAAICAgID8KAAAAAAAAPwoAAAAAAAAEAAAAICAgID8KAAAAAAAAPwoAAAAAAAAEAAAAICAgIA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlwsAAAAAAAA/CgAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					3,
					"indent",
					null,
					"EgAAAD8KAAAAAAAAQwoAAAAAAAAAAAAAfwoAAAAAAACDCgAAAAAAAAAAAAC9CgAAAAAAAMEKAAAAAAAAAAAAAPYKAAAAAAAA+goAAAAAAAAAAAAAMwsAAAAAAAA3CwAAAAAAAAAAAABpCwAAAAAAAG0LAAAAAAAAAAAAAD8KAAAAAAAAQwoAAAAAAAAAAAAAgwoAAAAAAACHCgAAAAAAAAAAAADFCgAAAAAAAMkKAAAAAAAAAAAAAAILAAAAAAAABgsAAAAAAAAAAAAAQwsAAAAAAABHCwAAAAAAAAAAAAB9CwAAAAAAAIELAAAAAAAAAAAAAD8KAAAAAAAAQwoAAAAAAAAAAAAAhwoAAAAAAACLCgAAAAAAAAAAAADNCgAAAAAAANEKAAAAAAAAAAAAAA4LAAAAAAAAEgsAAAAAAAAAAAAAUwsAAAAAAABXCwAAAAAAAAAAAACRCwAAAAAAAJULAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiwsAAAAAAAA/CgAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AgAAAGkKAAAAAAAAagoAAAAAAAAAAAAAagoAAAAAAABqCgAAAAAAAB0AAAAsICAvLy88IFJheSBnZW5lcmF0aW9uIHNoYWRlcg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaQoAAAAAAACGCgAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AgAAAJQKAAAAAAAAlQoAAAAAAAAAAAAAlQoAAAAAAACVCgAAAAAAABwAAAAsICAgLy8vPCBJbnRlcnNlY3Rpb24gc2hhZGVy",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsAoAAAAAAACUCgAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AgAAALkKAAAAAAAAugoAAAAAAAAAAAAAugoAAAAAAAC6CgAAAAAAAB0AAAAsICAgICAgICAgLy8vPCBBbnkgaGl0IHNoYWRlcg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuQoAAAAAAADWCgAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AgAAAOIKAAAAAAAA4woAAAAAAAAAAAAA4woAAAAAAADjCgAAAAAAAB0AAAAsICAgICAvLy88IENsb3Nlc3QgaGl0IHNoYWRlcg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4goAAAAAAAD/CgAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AgAAAAULAAAAAAAABgsAAAAAAAAAAAAABgsAAAAAAAAGCwAAAAAAABwAAAAsICAgICAgICAgICAvLy88IE1pc3Mgc2hhZGVy",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABQsAAAAAAAAhCwAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AgAAACwLAAAAAAAALQsAAAAAAAAAAAAALQsAAAAAAAAtCwAAAAAAABwAAAAsICAgICAgIC8vLzwgQ2FsbGFibGUgc2hhZGVy",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALAsAAAAAAABICwAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGoKAAAAAAAAawoAAAAAAAAAAAAAawoAAAAAAAB3CgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAagoAAAAAAABqCgAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAK8KAAAAAAAAsAoAAAAAAAAAAAAAsAoAAAAAAAC8CgAAAAAAAAAAAABrCgAAAAAAAGsKAAAAAAAADAAAACAgICAgICAgICAgIA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArwoAAAAAAACvCgAAAAAAAAAAAAAAAFtA"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANUKAAAAAAAA1goAAAAAAAAAAAAA1goAAAAAAADiCgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1QoAAAAAAADVCgAAAAAAAAAAAAAAAFtA"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAsLAAAAAAAADAsAAAAAAAAAAAAADAsAAAAAAAAYCwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACwsAAAAAAAALCwAAAAAAAAAAAAAAAFtA"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADsLAAAAAAAAPAsAAAAAAAAAAAAAPAsAAAAAAABICwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOwsAAAAAAAA7CwAAAAAAAAAAAAAAAFtA"
				],
				[
					75,
					1,
					"reindent",
					null,
					"AQAAAGsKAAAAAAAAdwoAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAawoAAAAAAABrCgAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAHcKAAAAAAAAewoAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdwoAAAAAAAB3CgAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"paste",
					null,
					"AQAAAHsKAAAAAAAAgQoAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAewoAAAAAAAB7CgAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAALkKAAAAAAAAvQoAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuQoAAAAAAAC5CgAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"paste",
					null,
					"AQAAAL0KAAAAAAAAwwoAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvQoAAAAAAAC9CgAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAPUKAAAAAAAA+QoAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9QoAAAAAAAD1CgAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"paste",
					null,
					"AQAAAPkKAAAAAAAA/woAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+QoAAAAAAAD5CgAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAADULAAAAAAAAOQsAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANQsAAAAAAAA1CwAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"paste",
					null,
					"AQAAADkLAAAAAAAAPwsAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOQsAAAAAAAA5CwAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAG8LAAAAAAAAcwsAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbwsAAAAAAABvCwAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"paste",
					null,
					"AQAAAHMLAAAAAAAAeQsAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcwsAAAAAAABzCwAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIEKAAAAAAAAggoAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgQoAAAAAAACBCgAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"paste",
					null,
					"AQAAAIIKAAAAAAAAoAoAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAggoAAAAAAACCCgAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKAKAAAAAAAAoQoAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoAoAAAAAAACgCgAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAB8LAAAAAAAAIAsAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHwsAAAAAAAAfCwAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"paste",
					null,
					"AQAAACALAAAAAAAAPwsAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIAsAAAAAAAAgCwAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAD8LAAAAAAAAQAsAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPwsAAAAAAAA/CwAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIALAAAAAAAAgQsAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgAsAAAAAAACACwAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"paste",
					null,
					"AQAAAIELAAAAAAAApAsAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgQsAAAAAAACBCwAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKQLAAAAAAAApQsAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApAsAAAAAAACkCwAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAN8LAAAAAAAA4AsAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3wsAAAAAAADfCwAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"paste",
					null,
					"AQAAAOALAAAAAAAA/AsAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4AsAAAAAAADgCwAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAPwLAAAAAAAA/QsAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/AsAAAAAAAD8CwAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOMKAAAAAAAA5AoAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4woAAAAAAADjCgAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"paste",
					null,
					"AQAAAOQKAAAAAAAACAsAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5AoAAAAAAADkCgAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAAgLAAAAAAAACQsAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACAsAAAAAAAAICwAAAAAAAAAAAAAAAPC/"
				],
				[
					121,
					1,
					"reindent",
					null,
					"AQAAAEsMAAAAAAAAVwwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASwwAAAAAAABLDAAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": "\treturn"
					},
					"BwAAAFcMAAAAAAAAWwwAAAAAAAAAAAAAWwwAAAAAAABcDAAAAAAAAAAAAABcDAAAAAAAAF0MAAAAAAAAAAAAAF0MAAAAAAAAXgwAAAAAAAAAAAAAXgwAAAAAAABfDAAAAAAAAAAAAABfDAAAAAAAAGAMAAAAAAAAAAAAAGAMAAAAAAAAYQwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVwwAAAAAAABXDAAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGEMAAAAAAAAYgwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYQwAAAAAAABhDAAAAAAAAAAAAAAAAPC/"
				],
				[
					124,
					1,
					"paste",
					null,
					"AQAAAGIMAAAAAAAAggwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYgwAAAAAAABiDAAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIIMAAAAAAAAgwwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAggwAAAAAAACCDAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/ResourceViews.h",
			"settings":
			{
				"buffer_size": 10217,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Buffer.h",
			"settings":
			{
				"buffer_size": 19315,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					20,
					1,
					"paste",
					null,
					"AQAAAFMHAAAAAAAAbQcAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFMHAAAAAAAAUwcAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"left_delete",
					null,
					"AQAAAFMHAAAAAAAAUwcAAAAAAAAbAAAAI2luY2x1ZGUgPHZ1bGthbi92dWxrYW4uaD4K",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFMHAAAAAAAAbgcAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACEHAAAAAAAAIgcAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACEHAAAAAAAAIQcAAAAAAAAAAAAAAAAAAA"
				],
				[
					30,
					1,
					"paste",
					null,
					"AQAAACIHAAAAAAAAPQcAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACIHAAAAAAAAIgcAAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAOEPAAAAAAAA4g8AAAAAAAAAAAAA4g8AAAAAAADjDwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOEPAAAAAAAA4Q8AAAAAAAAAAAAAAADwvw"
				],
				[
					37,
					1,
					"paste",
					null,
					"AQAAAOIPAAAAAAAAEREAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOIPAAAAAAAA4g8AAAAAAAAAAAAAAAAAAA"
				],
				[
					40,
					1,
					"paste",
					null,
					"AgAAAEUQAAAAAAAAWhAAAAAAAAAAAAAAWhAAAAAAAABaEAAAAAAAABMAAABSZXNvdXJjZTo6QmluZEZsYWdz",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEUQAAAAAAAAWBAAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"paste",
					null,
					"AgAAAGcQAAAAAAAAcRAAAAAAAAAAAAAAcRAAAAAAAABxEAAAAAAAAEoAAABSZXNvdXJjZTo6QmluZEZsYWdzOjpTaGFkZXJSZXNvdXJjZSB8IFJlc291cmNlOjpCaW5kRmxhZ3M6OlVub3JkZXJlZEFjY2Vzcw",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGcQAAAAAAAAsRAAAAAAAAAAAAAAAADwvw"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AgAAAG0QAAAAAAAAbhAAAAAAAAAAAAAAbhAAAAAAAABuEAAAAAAAAAEAAAA0",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG0QAAAAAAAAbhAAAAAAAAAAAAAAAADwvw"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AgAAAFsQAAAAAAAAXBAAAAAAAAAAAAAAXBAAAAAAAABcEAAAAAAAAAQAAABiaW5k",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFsQAAAAAAAAXxAAAAAAAAAAAAAAAADwvw"
				],
				[
					50,
					1,
					"left_delete",
					null,
					"AQAAAFsQAAAAAAAAWxAAAAAAAAABAAAAcw",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFwQAAAAAAAAXBAAAAAAAAAAAAAAAADwvw"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "usage"
					},
					"BQAAAFsQAAAAAAAAXBAAAAAAAAAAAAAAXBAAAAAAAABdEAAAAAAAAAAAAABdEAAAAAAAAF4QAAAAAAAAAAAAAF4QAAAAAAAAXxAAAAAAAAAAAAAAXxAAAAAAAABgEAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFsQAAAAAAAAWxAAAAAAAAAAAAAAAADwvw"
				],
				[
					56,
					1,
					"left_delete",
					null,
					"AQAAAGkQAAAAAAAAaRAAAAAAAAAJAAAAeDAwMDAwMDAw",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGkQAAAAAAAAchAAAAAAAAAAAAAAAADwvw"
				],
				[
					71,
					1,
					"left_delete",
					null,
					"AQAAAGUQAAAAAAAAZRAAAAAAAAAEAAAAID0gMA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGUQAAAAAAAAaRAAAAAAAAAAAAAAAADwvw"
				],
				[
					75,
					3,
					"left_delete",
					null,
					"AwAAAEEQAAAAAAAAQRAAAAAAAAAEAAAAICAgID0QAAAAAAAAPRAAAAAAAAAEAAAAICAgIDwQAAAAAAAAPBAAAAAAAAABAAAACg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEUQAAAAAAAARRAAAAAAAAAAAAAAAABSQA"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADwQAAAAAAAAPRAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADwQAAAAAAAAPBAAAAAAAAAAAAAAAADwvw"
				],
				[
					79,
					3,
					"left_delete",
					null,
					"AwAAACwQAAAAAAAALBAAAAAAAAAEAAAAICAgICgQAAAAAAAAKBAAAAAAAAAEAAAAICAgICcQAAAAAAAAJxAAAAAAAAABAAAACg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADAQAAAAAAAAMBAAAAAAAAAAAAAAAADwvw"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACcQAAAAAAAAKBAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACcQAAAAAAAAJxAAAAAAAAAAAAAAAADwvw"
				],
				[
					83,
					3,
					"left_delete",
					null,
					"AwAAAAMQAAAAAAAAAxAAAAAAAAAEAAAAICAgIP8PAAAAAAAA/w8AAAAAAAAEAAAAICAgIP4PAAAAAAAA/g8AAAAAAAABAAAACg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAcQAAAAAAAABxAAAAAAAAAAAAAAAADwvw"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAP4PAAAAAAAA/w8AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP4PAAAAAAAA/g8AAAAAAAAAAAAAAADwvw"
				],
				[
					88,
					2,
					"left_delete",
					null,
					"AgAAAOIPAAAAAAAA4g8AAAAAAADOAAAAICAgIHN0YXRpYyBTaGFyZWRQdHIgY3JlYXRlKCBzdGQ6OnNoYXJlZF9wdHI8RGV2aWNlPiBwRGV2aWNlLCBzaXplX3Qgc2l6ZSwgVmtCdWZmZXJVc2FnZUZsYWdCaXRzIHVzYWdlRmxhZ3MsCiAgICAgICAgQ3B1QWNjZXNzIGNwdUFjY2VzcyA9IEJ1ZmZlcjo6Q3B1QWNjZXNzOjpOb25lLAogICAgICAgIGNvbnN0IHZvaWQqIHBJbml0RGF0YSA9IG51bGxwdHIpOwrhDwAAAAAAAOEPAAAAAAAAAQAAAAo",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALAQAAAAAAAA4g8AAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/Buffer.cpp",
			"settings":
			{
				"buffer_size": 12692,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"AwAAAMgNAAAAAAAAyQ0AAAAAAAAAAAAAyQ0AAAAAAADKDQAAAAAAAAAAAADKDQAAAAAAAMsNAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMgNAAAAAAAAyA0AAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"paste",
					null,
					"AQAAAMoNAAAAAAAAmA4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMoNAAAAAAAAyg0AAAAAAAAAAAAAAAAAAA"
				],
				[
					11,
					1,
					"paste",
					null,
					"AgAAAMoNAAAAAAAA5A0AAAAAAAAAAAAA5A0AAAAAAADkDQAAAAAAABUAAAAgICAgc3RhdGljIFNoYXJlZFB0ciA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8NAAAAAAAAyg0AAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					2,
					"left_delete",
					null,
					"AgAAAFgOAAAAAAAAWA4AAAAAAAAZAAAAPSBCdWZmZXI6OkNwdUFjY2Vzczo6Tm9uZVcOAAAAAAAAVw4AAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFgOAAAAAAAAcQ4AAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					3,
					"left_delete",
					null,
					"AwAAAEAOAAAAAAAAQA4AAAAAAAAEAAAAICAgIDwOAAAAAAAAPA4AAAAAAAAEAAAAICAgIDsOAAAAAAAAOw4AAAAAAAABAAAACg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEQOAAAAAAAARA4AAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADsOAAAAAAAAPA4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADsOAAAAAAAAOw4AAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					10,
					"right_delete",
					null,
					"CgAAAG4OAAAAAAAAbg4AAAAAAAABAAAAIG4OAAAAAAAAbg4AAAAAAAABAAAAPW4OAAAAAAAAbg4AAAAAAAABAAAAIG4OAAAAAAAAbg4AAAAAAAABAAAAbm4OAAAAAAAAbg4AAAAAAAABAAAAdW4OAAAAAAAAbg4AAAAAAAABAAAAbG4OAAAAAAAAbg4AAAAAAAABAAAAbG4OAAAAAAAAbg4AAAAAAAABAAAAcG4OAAAAAAAAbg4AAAAAAAABAAAAdG4OAAAAAAAAbg4AAAAAAAABAAAAcg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG4OAAAAAAAAbg4AAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"right_delete",
					null,
					"AQAAAG8OAAAAAAAAbw4AAAAAAAABAAAAOw",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG8OAAAAAAAAbw4AAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAG8OAAAAAAAAcA4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG8OAAAAAAAAbw4AAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAHAOAAAAAAAAcg4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHAOAAAAAAAAcA4AAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"CAAAAHEOAAAAAAAAcg4AAAAAAAAAAAAAcg4AAAAAAAB6DgAAAAAAAAAAAAB6DgAAAAAAAHsOAAAAAAAAAAAAAHsOAAAAAAAAgw4AAAAAAAAAAAAAcg4AAAAAAAByDgAAAAAAAAgAAAAgICAgICAgIHMOAAAAAAAAcw4AAAAAAAAIAAAAICAgICAgICBzDgAAAAAAAHMOAAAAAAAAAAAAAHIOAAAAAAAAdg4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHEOAAAAAAAAcQ4AAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					3,
					"left_delete",
					null,
					"BAAAAFUOAAAAAAAAVQ4AAAAAAAAEAAAAICAgIG4OAAAAAAAAbg4AAAAAAAAEAAAAICAgIFEOAAAAAAAAUQ4AAAAAAAAEAAAAICAgIFAOAAAAAAAAUA4AAAAAAAABAAAACg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFkOAAAAAAAAWQ4AAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFAOAAAAAAAAUQ4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFAOAAAAAAAAUA4AAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"left_delete",
					null,
					"AQAAAMoNAAAAAAAAyg0AAAAAAACjAAAAQnVmZmVyOjpTaGFyZWRQdHIgQnVmZmVyOjpjcmVhdGUoIHN0ZDo6c2hhcmVkX3B0cjxEZXZpY2U+IHBEZXZpY2UsIHNpemVfdCBzaXplLCBWa0J1ZmZlclVzYWdlRmxhZ0JpdHMgdXNhZ2VGbGFncywgQ3B1QWNjZXNzIGNwdUFjY2VzcywgY29uc3Qgdm9pZCogcEluaXREYXRhKSB7Cgp9Cg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG0OAAAAAAAAyg0AAAAAAAAAAAAAAADwvw"
				],
				[
					37,
					3,
					"left_delete",
					null,
					"AwAAAMoNAAAAAAAAyg0AAAAAAAABAAAACskNAAAAAAAAyQ0AAAAAAAABAAAACsgNAAAAAAAAyA0AAAAAAAABAAAACg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMsNAAAAAAAAyw0AAAAAAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "/usr/include/vulkan/vulkan.h",
			"settings":
			{
				"buffer_size": 1477,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/usr/include/vulkan/vulkan_xlib.h",
			"settings":
			{
				"buffer_size": 1784,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/usr/include/vulkan/vulkan_core.h",
			"settings":
			{
				"buffer_size": 669211,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Resource.h",
			"settings":
			{
				"buffer_size": 7888,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAO4NAAAAAAAA7w0AAAAAAAAAAAAA7w0AAAAAAAD3DQAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuDQAAAAAAAO4NAAAAAAAAAAAAAAAA8L8"
				],
				[
					4,
					1,
					"paste",
					null,
					"AQAAAPcNAAAAAAAAEQ4AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3DQAAAAAAAPcNAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAABEOAAAAAAAAEg4AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAARDgAAAAAAABEOAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABIOAAAAAAAAEw4AAAAAAAAAAAAAEw4AAAAAAAAbDgAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASDgAAAAAAABIOAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"paste",
					null,
					"AQAAABsOAAAAAAAANQ4AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbDgAAAAAAABsOAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					5,
					"left_delete",
					null,
					"BQAAADQOAAAAAAAANA4AAAAAAAABAAAAdDMOAAAAAAAAMw4AAAAAAAABAAAAdTIOAAAAAAAAMg4AAAAAAAABAAAAcDEOAAAAAAAAMQ4AAAAAAAABAAAAbjAOAAAAAAAAMA4AAAAAAAABAAAASQ",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA1DgAAAAAAADUOAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "Build,"
					},
					"BgAAADAOAAAAAAAAMQ4AAAAAAAAAAAAAMQ4AAAAAAAAyDgAAAAAAAAAAAAAyDgAAAAAAADMOAAAAAAAAAAAAADMOAAAAAAAANA4AAAAAAAAAAAAANA4AAAAAAAA1DgAAAAAAAAAAAAA1DgAAAAAAADYOAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwDgAAAAAAADAOAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADYOAAAAAAAANw4AAAAAAAAAAAAANw4AAAAAAAA/DgAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2DgAAAAAAADYOAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"paste",
					null,
					"AQAAAD8OAAAAAAAAWQ4AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA/DgAAAAAAAD8OAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					5,
					"left_delete",
					null,
					"BQAAAFgOAAAAAAAAWA4AAAAAAAABAAAAdFcOAAAAAAAAVw4AAAAAAAABAAAAdVYOAAAAAAAAVg4AAAAAAAABAAAAcFUOAAAAAAAAVQ4AAAAAAAABAAAAblQOAAAAAAAAVA4AAAAAAAABAAAASQ",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABZDgAAAAAAAFkOAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "Copy,"
					},
					"BQAAAFQOAAAAAAAAVQ4AAAAAAAAAAAAAVQ4AAAAAAABWDgAAAAAAAAAAAABWDgAAAAAAAFcOAAAAAAAAAAAAAFcOAAAAAAAAWA4AAAAAAAAAAAAAWA4AAAAAAABZDgAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABUDgAAAAAAAFQOAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAANgNAAAAAAAA2Q0AAAAAAAAAAAAA2Q0AAAAAAADaDQAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADYDQAAAAAAANgNAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPkNAAAAAAAA+g0AAAAAAAAAAAAA+g0AAAAAAAACDgAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5DQAAAAAAAPkNAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"paste",
					null,
					"AQAAAPkNAAAAAAAAEg4AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5DQAAAAAAAPkNAAAAAAAAAAAAAAAAUkA"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPANAAAAAAAA8Q0AAAAAAAAAAAAA8Q0AAAAAAAD5DQAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwDQAAAAAAAPANAAAAAAAAAAAAAACQckA"
				],
				[
					31,
					1,
					"paste",
					null,
					"AQAAAPkNAAAAAAAAEg4AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5DQAAAAAAAPkNAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					4,
					"left_delete",
					null,
					"BAAAABEOAAAAAAAAEQ4AAAAAAAABAAAAdBAOAAAAAAAAEA4AAAAAAAABAAAAcw8OAAAAAAAADw4AAAAAAAABAAAAZQ4OAAAAAAAADg4AAAAAAAABAAAARA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASDgAAAAAAABIOAAAAAAAAAAAAAACQckA"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "Source,"
					},
					"BwAAAA4OAAAAAAAADw4AAAAAAAAAAAAADw4AAAAAAAAQDgAAAAAAAAAAAAAQDgAAAAAAABEOAAAAAAAAAAAAABEOAAAAAAAAEg4AAAAAAAAAAAAAEg4AAAAAAAATDgAAAAAAAAAAAAATDgAAAAAAABQOAAAAAAAAAAAAABQOAAAAAAAAFQ4AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAODgAAAAAAAA4OAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAADcOAAAAAAAAOA4AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3DgAAAAAAADcOAAAAAAAAAAAAAABAdEA"
				],
				[
					5,
					7,
					"right_delete",
					null,
					"BwAAAP4NAAAAAAAA/g0AAAAAAAABAAAAZf4NAAAAAAAA/g0AAAAAAAABAAAAcv4NAAAAAAAA/g0AAAAAAAABAAAAYf4NAAAAAAAA/g0AAAAAAAABAAAAdP4NAAAAAAAA/g0AAAAAAAABAAAAaf4NAAAAAAAA/g0AAAAAAAABAAAAb/4NAAAAAAAA/g0AAAAAAAABAAAAbg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD+DQAAAAAAAP4NAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					7,
					"right_delete",
					null,
					"BwAAABwOAAAAAAAAHA4AAAAAAAABAAAAZRwOAAAAAAAAHA4AAAAAAAABAAAAchwOAAAAAAAAHA4AAAAAAAABAAAAYRwOAAAAAAAAHA4AAAAAAAABAAAAdBwOAAAAAAAAHA4AAAAAAAABAAAAaRwOAAAAAAAAHA4AAAAAAAABAAAAbxwOAAAAAAAAHA4AAAAAAAABAAAAbg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcDgAAAAAAABwOAAAAAAAAAAAAAABAXUA"
				],
				[
					9,
					7,
					"right_delete",
					null,
					"BwAAADgOAAAAAAAAOA4AAAAAAAABAAAAZTgOAAAAAAAAOA4AAAAAAAABAAAAcjgOAAAAAAAAOA4AAAAAAAABAAAAYTgOAAAAAAAAOA4AAAAAAAABAAAAdDgOAAAAAAAAOA4AAAAAAAABAAAAaTgOAAAAAAAAOA4AAAAAAAABAAAAbzgOAAAAAAAAOA4AAAAAAAABAAAAbg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA4DgAAAAAAADgOAAAAAAAAAAAAAABAXUA"
				],
				[
					11,
					7,
					"right_delete",
					null,
					"BwAAAFUOAAAAAAAAVQ4AAAAAAAABAAAAZVUOAAAAAAAAVQ4AAAAAAAABAAAAclUOAAAAAAAAVQ4AAAAAAAABAAAAYVUOAAAAAAAAVQ4AAAAAAAABAAAAdFUOAAAAAAAAVQ4AAAAAAAABAAAAaVUOAAAAAAAAVQ4AAAAAAAABAAAAb1UOAAAAAAAAVQ4AAAAAAAABAAAAbg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABVDgAAAAAAAFUOAAAAAAAAAAAAAABAXUA"
				],
				[
					13,
					7,
					"right_delete",
					null,
					"BwAAAHIOAAAAAAAAcg4AAAAAAAABAAAAZXIOAAAAAAAAcg4AAAAAAAABAAAAcnIOAAAAAAAAcg4AAAAAAAABAAAAYXIOAAAAAAAAcg4AAAAAAAABAAAAdHIOAAAAAAAAcg4AAAAAAAABAAAAaXIOAAAAAAAAcg4AAAAAAAABAAAAb3IOAAAAAAAAcg4AAAAAAAABAAAAbg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAByDgAAAAAAAHIOAAAAAAAAAAAAAABAXUA"
				],
				[
					15,
					3,
					"right_delete",
					null,
					"AwAAAHgOAAAAAAAAeA4AAAAAAAABAAAAdXgOAAAAAAAAeA4AAAAAAAABAAAAcngOAAAAAAAAeA4AAAAAAAABAAAAZQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4DgAAAAAAAHgOAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					3,
					"right_delete",
					null,
					"AwAAAFsOAAAAAAAAWw4AAAAAAAABAAAAdVsOAAAAAAAAWw4AAAAAAAABAAAAclsOAAAAAAAAWw4AAAAAAAABAAAAZQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABbDgAAAAAAAFsOAAAAAAAAAAAAAABgZUA"
				],
				[
					19,
					3,
					"right_delete",
					null,
					"AwAAAD4OAAAAAAAAPg4AAAAAAAABAAAAdT4OAAAAAAAAPg4AAAAAAAABAAAAcj4OAAAAAAAAPg4AAAAAAAABAAAAZQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA+DgAAAAAAAD4OAAAAAAAAAAAAAABgZUA"
				],
				[
					21,
					3,
					"right_delete",
					null,
					"AwAAACIOAAAAAAAAIg4AAAAAAAABAAAAdSIOAAAAAAAAIg4AAAAAAAABAAAAciIOAAAAAAAAIg4AAAAAAAABAAAAZQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiDgAAAAAAACIOAAAAAAAAAAAAAABgZUA"
				],
				[
					23,
					3,
					"right_delete",
					null,
					"AwAAAAQOAAAAAAAABA4AAAAAAAABAAAAdQQOAAAAAAAABA4AAAAAAAABAAAAcgQOAAAAAAAABA4AAAAAAAABAAAAZQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAEDgAAAAAAAAQOAAAAAAAAAAAAAABgZUA"
				],
				[
					24,
					6,
					"right_delete",
					null,
					"BgAAAAQOAAAAAAAABA4AAAAAAAABAAAAUwQOAAAAAAAABA4AAAAAAAABAAAAbwQOAAAAAAAABA4AAAAAAAABAAAAdQQOAAAAAAAABA4AAAAAAAABAAAAcgQOAAAAAAAABA4AAAAAAAABAAAAYwQOAAAAAAAABA4AAAAAAAABAAAAZQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAEDgAAAAAAAAQOAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "Read"
					},
					"BAAAAAQOAAAAAAAABQ4AAAAAAAAAAAAABQ4AAAAAAAAGDgAAAAAAAAAAAAAGDgAAAAAAAAcOAAAAAAAAAAAAAAcOAAAAAAAACA4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAEDgAAAAAAAAQOAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					4,
					"left_delete",
					null,
					"BAAAACAOAAAAAAAAIA4AAAAAAAABAAAAdB8OAAAAAAAAHw4AAAAAAAABAAAAcx4OAAAAAAAAHg4AAAAAAAABAAAAZR0OAAAAAAAAHQ4AAAAAAAABAAAARA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhDgAAAAAAACEOAAAAAAAAAAAAAADgaUA"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "Qrite"
					},
					"BQAAAB0OAAAAAAAAHg4AAAAAAAAAAAAAHg4AAAAAAAAfDgAAAAAAAAAAAAAfDgAAAAAAACAOAAAAAAAAAAAAACAOAAAAAAAAIQ4AAAAAAAAAAAAAIQ4AAAAAAAAiDgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAdDgAAAAAAAB0OAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"left_delete",
					null,
					"AQAAAB0OAAAAAAAAHQ4AAAAAAAABAAAAUQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAeDgAAAAAAAB4OAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "W"
					},
					"AQAAAB0OAAAAAAAAHg4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAdDgAAAAAAAB0OAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "Build"
					},
					"BQAAADcOAAAAAAAAOA4AAAAAAAAAAAAAOA4AAAAAAAA5DgAAAAAAAAAAAAA5DgAAAAAAADoOAAAAAAAAAAAAADoOAAAAAAAAOw4AAAAAAAAAAAAAOw4AAAAAAAA8DgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3DgAAAAAAADcOAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "Blas"
					},
					"BAAAAFsOAAAAAAAAXA4AAAAAAAAAAAAAXA4AAAAAAABdDgAAAAAAAAAAAABdDgAAAAAAAF4OAAAAAAAAAAAAAF4OAAAAAAAAXw4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABbDgAAAAAAAFsOAAAAAAAAAAAAAAAAa0A"
				],
				[
					38,
					1,
					"left_delete",
					null,
					"AQAAAHgOAAAAAAAAeA4AAAAAAAABAAAALA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB5DgAAAAAAAHkOAAAAAAAAAAAAAACAb0A"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAGkOAAAAAAAAag4AAAAAAAAAAAAAag4AAAAAAABrDgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABpDgAAAAAAAGkOAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/Resource.cpp",
			"settings":
			{
				"buffer_size": 5611,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"CAAAAJsMAAAAAAAAnAwAAAAAAAAAAAAAnAwAAAAAAACgDAAAAAAAAAAAAACgDAAAAAAAAKEMAAAAAAAAAAAAAKEMAAAAAAAApQwAAAAAAAAAAAAAnAwAAAAAAACcDAAAAAAAAAQAAAAgICAgoQwAAAAAAACiDAAAAAAAAAAAAACiDAAAAAAAAKYMAAAAAAAAAAAAAJ0MAAAAAAAAnQwAAAAAAAAEAAAAICAgIA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACbDAAAAAAAAJsMAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"reindent",
					null,
					"AQAAAJ0MAAAAAAAAoQwAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdDAAAAAAAAJ0MAAAAAAAAAAAAAAAAQkA"
				],
				[
					10,
					1,
					"paste",
					null,
					"AQAAAKEMAAAAAAAAuwwAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChDAAAAAAAAKEMAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAALsMAAAAAAAAvAwAAAAAAAAAAAAAvAwAAAAAAADADAAAAAAAAAAAAADBDAAAAAAAAMEMAAAAAAAABAAAACAgICA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7DAAAAAAAALsMAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"paste",
					null,
					"AQAAAMAMAAAAAAAA2gwAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADADAAAAAAAAMAMAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANoMAAAAAAAA2wwAAAAAAAAAAAAA2wwAAAAAAADfDAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADaDAAAAAAAANoMAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"paste",
					null,
					"AQAAAN8MAAAAAAAA+QwAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfDAAAAAAAAN8MAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPkMAAAAAAAA+gwAAAAAAAAAAAAA+gwAAAAAAAD+DAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5DAAAAAAAAPkMAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"paste",
					null,
					"AQAAAP4MAAAAAAAAGA0AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD+DAAAAAAAAP4MAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABgNAAAAAAAAGQ0AAAAAAAAAAAAAGQ0AAAAAAAAdDQAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAYDQAAAAAAABgNAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"paste",
					null,
					"AQAAAB0NAAAAAAAANw0AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAdDQAAAAAAAB0NAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAJwMAAAAAAAAnQwAAAAAAAAAAAAAnQwAAAAAAACeDAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACcDAAAAAAAAJwMAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"paste",
					null,
					"AQAAAJ0MAAAAAAAATw0AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdDAAAAAAAAJ0MAAAAAAAAAAAAAAAAAAA"
				],
				[
					31,
					1,
					"paste",
					null,
					"AgAAAGINAAAAAAAAfQ0AAAAAAAAAAAAAfQ0AAAAAAAB9DQAAAAAAAAsAAABQcmVkaWNhdGlvbg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABtDQAAAAAAAGINAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"paste",
					null,
					"AgAAAJENAAAAAAAAqg0AAAAAAAAAAAAAqg0AAAAAAACqDQAAAAAAAAsAAABQcmVkaWNhdGlvbg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACRDQAAAAAAAJwNAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"paste",
					null,
					"AgAAAL4NAAAAAAAA2A0AAAAAAAAAAAAA2A0AAAAAAADYDQAAAAAAAAsAAABQcmVkaWNhdGlvbg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+DQAAAAAAAMkNAAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					1,
					"paste",
					null,
					"AgAAAOwNAAAAAAAABg4AAAAAAAAAAAAABg4AAAAAAAAGDgAAAAAAAAsAAABQcmVkaWNhdGlvbg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsDQAAAAAAAPcNAAAAAAAAAAAAAAAA8L8"
				],
				[
					63,
					1,
					"paste",
					null,
					"AgAAABoOAAAAAAAAMw4AAAAAAAAAAAAAMw4AAAAAAAAzDgAAAAAAAAsAAABQcmVkaWNhdGlvbg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAaDgAAAAAAACUOAAAAAAAAAAAAAAAA8L8"
				],
				[
					66,
					3,
					"left_delete",
					null,
					"AwAAAJ0MAAAAAAAAnQwAAAAAAACzAAAAICAgICAgICBBY2NlbGVyYXRpb25TdHJ1Y3R1cmVTb3VyY2UsCiAgICAgICAgQWNjZWxlcmF0aW9uU3RydWN0dXJlRGVzdCwKICAgICAgICBBY2NlbGVyYXRpb25TdHJ1Y3R1cmVJbnB1dCwKICAgICAgICBBY2NlbGVyYXRpb25TdHJ1Y3R1cmVCdWlsZCwKICAgICAgICBBY2NlbGVyYXRpb25TdHJ1Y3R1cmVDb3B5LAqcDAAAAAAAAJwMAAAAAAAAAQAAAAqbDAAAAAAAAJsMAAAAAAAAAQAAAAo",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABQDQAAAAAAAJ0MAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAIENAAAAAAAAgg0AAAAAAAAAAAAAgg0AAAAAAACDDQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBDQAAAAAAAIENAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"paste",
					null,
					"AQAAAIINAAAAAAAA8Q0AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCDQAAAAAAAIINAAAAAAAAAAAAAAAAAAA"
				],
				[
					13,
					1,
					"paste",
					null,
					"AgAAAK0MAAAAAAAAvAwAAAAAAAAAAAAAvAwAAAAAAAC8DAAAAAAAABsAAABBY2NlbGVyYXRpb25TdHJ1Y3R1cmVTb3VyY2U",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtDAAAAAAAAMgMAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"paste",
					null,
					"AgAAANAMAAAAAAAA4AwAAAAAAAAAAAAA4AwAAAAAAADgDAAAAAAAABkAAABBY2NlbGVyYXRpb25TdHJ1Y3R1cmVEZXN0",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADQDAAAAAAAAOkMAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"paste",
					null,
					"AgAAAPQMAAAAAAAACQ0AAAAAAAAAAAAACQ0AAAAAAAAJDQAAAAAAABoAAABBY2NlbGVyYXRpb25TdHJ1Y3R1cmVJbnB1dA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD0DAAAAAAAAA4NAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"paste",
					null,
					"AgAAAB0NAAAAAAAAMQ0AAAAAAAAAAAAAMQ0AAAAAAAAxDQAAAAAAABoAAABBY2NlbGVyYXRpb25TdHJ1Y3R1cmVCdWlsZA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAdDQAAAAAAADcNAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					2,
					"left_delete",
					null,
					"AgAAADQNAAAAAAAANA0AAAAAAACdAAAAICAgIHN0YXRlX3RvX3N0cihBY2NlbGVyYXRpb25TdHJ1Y3R1cmVDb3B5KTsKCiAgICAgICAgQWNjZWxTdHJ1Y3RSZWFkLAogICAgICAgIEFjY2VsU3RydWN0V3JpdGUsCiAgICAgICAgQWNjZWxTdHJ1Y3RCdWlsZElucHV0LAogICAgICAgIEFjY2VsU3RydWN0QnVpbGRCbGFzLDMNAAAAAAAAMw0AAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADRDQAAAAAAADQNAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/Formats.h",
			"settings":
			{
				"buffer_size": 14146,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					8,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGEMAAAAAAAAYgwAAAAAAAAAAAAAYgwAAAAAAABqDAAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYQwAAAAAAABhDAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"paste",
					null,
					"AQAAAGEMAAAAAAAAwgwAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYQwAAAAAAABhDAAAAAAAAAAAAAAAAFJA"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "Build"
					},
					"BQAAAHYMAAAAAAAAdwwAAAAAAAAAAAAAdwwAAAAAAAB4DAAAAAAAAAAAAAB4DAAAAAAAAHkMAAAAAAAAAAAAAHkMAAAAAAAAegwAAAAAAAAAAAAAegwAAAAAAAB7DAAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdgwAAAAAAAB2DAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "4"
					},
					"AgAAAIAMAAAAAAAAgQwAAAAAAAAAAAAAgQwAAAAAAACBDAAAAAAAAAYAAAA4MDAwMDA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgAwAAAAAAACGDAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					3,
					"left_delete",
					null,
					"AwAAAIYMAAAAAAAAhgwAAAAAAAA8AAAALy8vPCBUaGUgcmVzb3VyY2Ugd2lsbCBiZSBib3VuZCBhcyBhbiBhY2NlbGVyYXRpb24gc3RydWN0dXJlhQwAAAAAAACFDAAAAAAAAAEAAAAghAwAAAAAAACEDAAAAAAAAAEAAAAg",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhgwAAAAAAADCDAAAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIQMAAAAAAAAhQwAAAAAAAAAAAAAhQwAAAAAAACNDAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIQMAAAAAAAAhAwAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"paste",
					null,
					"AQAAAI0MAAAAAAAApwwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI0MAAAAAAAAjQwAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAKcMAAAAAAAAqAwAAAAAAAAAAAAAqAwAAAAAAACpDAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKcMAAAAAAAApwwAAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": " 0x80"
					},
					"BQAAAKkMAAAAAAAAqgwAAAAAAAAAAAAAqgwAAAAAAACrDAAAAAAAAAAAAACrDAAAAAAAAKwMAAAAAAAAAAAAAKwMAAAAAAAArQwAAAAAAAAAAAAArQwAAAAAAACuDAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKkMAAAAAAAAqQwAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "0,"
					},
					"AgAAAK4MAAAAAAAArwwAAAAAAAAAAAAArwwAAAAAAACwDAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK4MAAAAAAAArgwAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALAMAAAAAAAAsQwAAAAAAAAAAAAAsQwAAAAAAAC5DAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALAMAAAAAAAAsAwAAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"paste",
					null,
					"AQAAALkMAAAAAAAA1QwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALkMAAAAAAAAuQwAAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAANUMAAAAAAAA1gwAAAAAAAAAAAAA1gwAAAAAAADXDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANUMAAAAAAAA1QwAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAANcMAAAAAAAA2AwAAAAAAAAAAAAA2AwAAAAAAADZDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANcMAAAAAAAA1wwAAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "x"
					},
					"AQAAANkMAAAAAAAA2gwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANkMAAAAAAAA2QwAAAAAAAAAAAAAAADwvw"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "1000"
					},
					"BAAAANoMAAAAAAAA2wwAAAAAAAAAAAAA2wwAAAAAAADcDAAAAAAAAAAAAADcDAAAAAAAAN0MAAAAAAAAAAAAAN0MAAAAAAAA3gwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANoMAAAAAAAA2gwAAAAAAAAAAAAAAADwvw"
				],
				[
					20,
					1,
					"left_delete",
					null,
					"AQAAAN0MAAAAAAAA3QwAAAAAAAABAAAAMA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN4MAAAAAAAA3gwAAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAN0MAAAAAAAA3gwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN0MAAAAAAAA3QwAAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAN4MAAAAAAAA3wwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN4MAAAAAAAA3gwAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "src/Falcor/Scene/Scene.cpp.5",
			"settings":
			{
				"buffer_size": 135008,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					640,
					1,
					"insert",
					{
						"characters": "ont-time"
					},
					"CAAAAD9rAQAAAAAAQGsBAAAAAAAAAAAAQGsBAAAAAABBawEAAAAAAAAAAABBawEAAAAAAEJrAQAAAAAAAAAAAEJrAQAAAAAAQ2sBAAAAAAAAAAAAQ2sBAAAAAABEawEAAAAAAAAAAABEawEAAAAAAEVrAQAAAAAAAAAAAEVrAQAAAAAARmsBAAAAAAAAAAAARmsBAAAAAABHawEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA/awEAAAAAAD9rAQAAAAAAAAAAAAAA8L8"
				],
				[
					641,
					1,
					"insert",
					{
						"characters": " command"
					},
					"CAAAAEdrAQAAAAAASGsBAAAAAAAAAAAASGsBAAAAAABJawEAAAAAAAAAAABJawEAAAAAAEprAQAAAAAAAAAAAEprAQAAAAAAS2sBAAAAAAAAAAAAS2sBAAAAAABMawEAAAAAAAAAAABMawEAAAAAAE1rAQAAAAAAAAAAAE1rAQAAAAAATmsBAAAAAAAAAAAATmsBAAAAAABPawEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABHawEAAAAAAEdrAQAAAAAAAAAAAAAA8L8"
				],
				[
					642,
					1,
					"insert",
					{
						"characters": " oo"
					},
					"AwAAAE9rAQAAAAAAUGsBAAAAAAAAAAAAUGsBAAAAAABRawEAAAAAAAAAAABRawEAAAAAAFJrAQAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABPawEAAAAAAE9rAQAAAAAAAAAAAAAA8L8"
				],
				[
					643,
					2,
					"left_delete",
					null,
					"AgAAAFFrAQAAAAAAUWsBAAAAAAABAAAAb1BrAQAAAAAAUGsBAAAAAAABAAAAbw",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSawEAAAAAAFJrAQAAAAAAAAAAAAAA8L8"
				],
				[
					644,
					1,
					"insert",
					{
						"characters": "ppol"
					},
					"BAAAAFBrAQAAAAAAUWsBAAAAAAAAAAAAUWsBAAAAAABSawEAAAAAAAAAAABSawEAAAAAAFNrAQAAAAAAAAAAAFNrAQAAAAAAVGsBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABQawEAAAAAAFBrAQAAAAAAAAAAAAAA8L8"
				],
				[
					645,
					3,
					"left_delete",
					null,
					"AwAAAFNrAQAAAAAAU2sBAAAAAAABAAAAbFJrAQAAAAAAUmsBAAAAAAABAAAAb1FrAQAAAAAAUWsBAAAAAAABAAAAcA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABUawEAAAAAAFRrAQAAAAAAAAAAAAAA8L8"
				],
				[
					646,
					1,
					"insert",
					{
						"characters": "ol"
					},
					"AgAAAFFrAQAAAAAAUmsBAAAAAAAAAAAAUmsBAAAAAABTawEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABRawEAAAAAAFFrAQAAAAAAAAAAAAAA8L8"
				],
				[
					647,
					1,
					"left_delete",
					null,
					"AQAAAFJrAQAAAAAAUmsBAAAAAAABAAAAbA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABTawEAAAAAAFNrAQAAAAAAAAAAAAAA8L8"
				],
				[
					648,
					1,
					"insert",
					{
						"characters": "ol"
					},
					"AgAAAFJrAQAAAAAAU2sBAAAAAAAAAAAAU2sBAAAAAABUawEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSawEAAAAAAFJrAQAAAAAAAAAAAAAA8L8"
				],
				[
					649,
					1,
					"insert",
					{
						"characters": " !!!"
					},
					"BAAAAFRrAQAAAAAAVWsBAAAAAAAAAAAAVWsBAAAAAABWawEAAAAAAAAAAABWawEAAAAAAFdrAQAAAAAAAAAAAFdrAQAAAAAAWGsBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABUawEAAAAAAFRrAQAAAAAAAAAAAAAA8L8"
				],
				[
					651,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFprAQAAAAAAW2sBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABaawEAAAAAAFprAQAAAAAAAAAAAAAA8L8"
				],
				[
					655,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAGVpAQAAAAAAZmkBAAAAAAAAAAAAZmkBAAAAAABnaQEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABlaQEAAAAAAGVpAQAAAAAAAAAAAAAA8L8"
				],
				[
					657,
					1,
					"reindent",
					null,
					"AQAAAGZpAQAAAAAAcmkBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABmaQEAAAAAAGZpAQAAAAAAAAAAAAAAAAA"
				],
				[
					658,
					1,
					"insert",
					{
						"characters": "aut"
					},
					"AwAAAHJpAQAAAAAAc2kBAAAAAAAAAAAAc2kBAAAAAAB0aQEAAAAAAAAAAAB0aQEAAAAAAHVpAQAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAByaQEAAAAAAHJpAQAAAAAAAAAAAAAA8L8"
				],
				[
					659,
					3,
					"left_delete",
					null,
					"AwAAAHRpAQAAAAAAdGkBAAAAAAABAAAAdHNpAQAAAAAAc2kBAAAAAAABAAAAdXJpAQAAAAAAcmkBAAAAAAABAAAAYQ",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB1aQEAAAAAAHVpAQAAAAAAAAAAAAAA8L8"
				],
				[
					660,
					1,
					"insert",
					{
						"characters": "uin"
					},
					"AwAAAHJpAQAAAAAAc2kBAAAAAAAAAAAAc2kBAAAAAAB0aQEAAAAAAAAAAAB0aQEAAAAAAHVpAQAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAByaQEAAAAAAHJpAQAAAAAAAAAAAAAA8L8"
				],
				[
					661,
					1,
					"insert_completion",
					{
						"completion": "uint32_t",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "uint32_t"
					},
					"AgAAAHJpAQAAAAAAcmkBAAAAAAADAAAAdWlucmkBAAAAAAB6aQEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB1aQEAAAAAAHVpAQAAAAAAAAAAAAAA8L8"
				],
				[
					662,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHppAQAAAAAAe2kBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB6aQEAAAAAAHppAQAAAAAAAAAAAAAA8L8"
				],
				[
					663,
					1,
					"insert",
					{
						"characters": "quie"
					},
					"BAAAAHtpAQAAAAAAfGkBAAAAAAAAAAAAfGkBAAAAAAB9aQEAAAAAAAAAAAB9aQEAAAAAAH5pAQAAAAAAAAAAAH5pAQAAAAAAf2kBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB7aQEAAAAAAHtpAQAAAAAAAAAAAAAA8L8"
				],
				[
					664,
					2,
					"left_delete",
					null,
					"AgAAAH5pAQAAAAAAfmkBAAAAAAABAAAAZX1pAQAAAAAAfWkBAAAAAAABAAAAaQ",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB/aQEAAAAAAH9pAQAAAAAAAAAAAAAA8L8"
				],
				[
					665,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAH1pAQAAAAAAfmkBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB9aQEAAAAAAH1pAQAAAAAAAAAAAAAA8L8"
				],
				[
					666,
					1,
					"insert_completion",
					{
						"completion": "queue",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "queue"
					},
					"AgAAAHtpAQAAAAAAe2kBAAAAAAADAAAAcXVle2kBAAAAAACAaQEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB+aQEAAAAAAH5pAQAAAAAAAAAAAAAA8L8"
				],
				[
					667,
					1,
					"insert",
					{
						"characters": "Fa"
					},
					"AgAAAIBpAQAAAAAAgWkBAAAAAAAAAAAAgWkBAAAAAACCaQEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACAaQEAAAAAAIBpAQAAAAAAAAAAAAAA8L8"
				],
				[
					668,
					1,
					"insert_completion",
					{
						"completion": "queueFamilyIndex",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "queueFamilyIndex"
					},
					"AgAAAHtpAQAAAAAAe2kBAAAAAAAHAAAAcXVldWVGYXtpAQAAAAAAi2kBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCaQEAAAAAAIJpAQAAAAAAAAAAAAAA8L8"
				],
				[
					669,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAItpAQAAAAAAjGkBAAAAAAAAAAAAjGkBAAAAAACNaQEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACLaQEAAAAAAItpAQAAAAAAAAAAAAAA8L8"
				],
				[
					670,
					1,
					"insert",
					{
						"characters": " mpDe"
					},
					"BQAAAI1pAQAAAAAAjmkBAAAAAAAAAAAAjmkBAAAAAACPaQEAAAAAAAAAAACPaQEAAAAAAJBpAQAAAAAAAAAAAJBpAQAAAAAAkWkBAAAAAAAAAAAAkWkBAAAAAACSaQEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNaQEAAAAAAI1pAQAAAAAAAAAAAAAA8L8"
				],
				[
					671,
					1,
					"insert_completion",
					{
						"completion": "mpDevice",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mpDevice"
					},
					"AgAAAI5pAQAAAAAAjmkBAAAAAAAEAAAAbXBEZY5pAQAAAAAAlmkBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACSaQEAAAAAAJJpAQAAAAAAAAAAAAAA8L8"
				],
				[
					672,
					1,
					"insert",
					{
						"characters": "->getQ"
					},
					"BgAAAJZpAQAAAAAAl2kBAAAAAAAAAAAAl2kBAAAAAACYaQEAAAAAAAAAAACYaQEAAAAAAJlpAQAAAAAAAAAAAJlpAQAAAAAAmmkBAAAAAAAAAAAAmmkBAAAAAACbaQEAAAAAAAAAAACbaQEAAAAAAJxpAQAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWaQEAAAAAAJZpAQAAAAAAAAAAAAAA8L8"
				],
				[
					673,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AQAAAJxpAQAAAAAAnWkBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACcaQEAAAAAAJxpAQAAAAAAAAAAAAAA8L8"
				],
				[
					674,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAJ1pAQAAAAAAnmkBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdaQEAAAAAAJ1pAQAAAAAAAAAAAAAA8L8"
				],
				[
					675,
					1,
					"insert",
					{
						"characters": "te"
					},
					"AgAAAJ5pAQAAAAAAn2kBAAAAAAAAAAAAn2kBAAAAAACgaQEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACeaQEAAAAAAJ5pAQAAAAAAAAAAAAAA8L8"
				],
				[
					676,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKBpAQAAAAAAomkBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACgaQEAAAAAAKBpAQAAAAAAAAAAAAAA8L8"
				],
				[
					677,
					1,
					"paste",
					null,
					"AQAAAKFpAQAAAAAAzmkBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChaQEAAAAAAKFpAQAAAAAAAAAAAAAA8L8"
				],
				[
					678,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAM5pAQAAAAAAz2kBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADOaQEAAAAAAM5pAQAAAAAAAAAAAAAA8L8"
				],
				[
					679,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAAM9pAQAAAAAA0GkBAAAAAAAAAAAA0GkBAAAAAADRaQEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADPaQEAAAAAAM9pAQAAAAAAAAAAAAAA8L8"
				],
				[
					681,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANJpAQAAAAAA02kBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSaQEAAAAAANJpAQAAAAAAAAAAAAAA8L8"
				],
				[
					685,
					1,
					"paste",
					null,
					"AgAAAJhpAQAAAAAArmkBAAAAAAAAAAAArmkBAAAAAACuaQEAAAAAAAgAAABnZXRRdWV0ZQ",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACYaQEAAAAAAKBpAQAAAAAAAAAAAAAA8L8"
				],
				[
					688,
					1,
					"right_delete",
					null,
					"AQAAANxpAQAAAAAA3GkBAAAAAAADAAAALCAw",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADcaQEAAAAAAN9pAQAAAAAAAAAAAAAA8L8"
				],
				[
					695,
					1,
					"paste",
					null,
					"AgAAAPVqAQAAAAAABWsBAAAAAAAAAAAABWsBAAAAAAAFawEAAAAAAAwAAABxdWV1ZS5mYW1pbHk",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD1agEAAAAAAAFrAQAAAAAAAAAAAAAA8L8"
				],
				[
					702,
					1,
					"paste",
					null,
					"AgAAAJ1/AQAAAAAApH8BAAAAAAAAAAAApH8BAAAAAACkfwEAAAAAAC4AAABwQ29udGV4dC0+Z2V0TG93TGV2ZWxEYXRhKCktPmdldENvbW1hbmRRdWV1ZSgp",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdfwEAAAAAAMt/AQAAAAAAAAAAAAAA8L8"
				],
				[
					705,
					1,
					"insert",
					{
						"characters": "oneTime"
					},
					"BwAAAJ1/AQAAAAAAnn8BAAAAAAAAAAAAnn8BAAAAAACffwEAAAAAAAAAAACffwEAAAAAAKB/AQAAAAAAAAAAAKB/AQAAAAAAoX8BAAAAAAAAAAAAoX8BAAAAAACifwEAAAAAAAAAAACifwEAAAAAAKN/AQAAAAAAAAAAAKN/AQAAAAAApH8BAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdfwEAAAAAAJ1/AQAAAAAAAAAAAAAA8L8"
				],
				[
					706,
					1,
					"insert",
					{
						"characters": "C"
					},
					"AQAAAKR/AQAAAAAApX8BAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACkfwEAAAAAAKR/AQAAAAAAAAAAAAAA8L8"
				],
				[
					707,
					1,
					"right_delete",
					null,
					"AQAAAKV/AQAAAAAApX8BAAAAAAABAAAAYw",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClfwEAAAAAAKV/AQAAAAAAAAAAAAAA8L8"
				],
				[
					715,
					1,
					"paste",
					null,
					"AgAAAFxpAQAAAAAAamkBAAAAAAAAAAAAamkBAAAAAABqaQEAAAAAAAcAAABjbWRQb29s",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABcaQEAAAAAAGNpAQAAAAAAAAAAAAAA8L8"
				],
				[
					719,
					1,
					"paste",
					null,
					"AgAAAH5rAQAAAAAAjGsBAAAAAAAAAAAAjGsBAAAAAACMawEAAAAAAAcAAABjbWRQb29s",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB+awEAAAAAAIVrAQAAAAAAAAAAAAAA8L8"
				],
				[
					722,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAIF/AQAAAAAAgn8BAAAAAAAAAAAAgn8BAAAAAACSfwEAAAAAAAAAAACSfwEAAAAAAJN/AQAAAAAAAAAAAJN/AQAAAAAAo38BAAAAAAAAAAAAgn8BAAAAAACCfwEAAAAAABAAAAAgICAgICAgICAgICAgICAg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBfwEAAAAAAIF/AQAAAAAAAAAAAAAA8L8"
				],
				[
					724,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AwAAAIJ/AQAAAAAAg38BAAAAAAAAAAAAhH8BAAAAAACEfwEAAAAAABAAAAAgICAgICAgICAgICAgICAgg38BAAAAAACEfwEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCfwEAAAAAAIJ/AQAAAAAAAAAAAAAAYkA"
				],
				[
					725,
					1,
					"paste",
					null,
					"AQAAAIR/AQAAAAAADIABAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACEfwEAAAAAAIR/AQAAAAAAAAAAAAAA8L8"
				],
				[
					733,
					1,
					"paste",
					null,
					"AgAAAC2AAQAAAAAAO4ABAAAAAAAAAAAAO4ABAAAAAAA7gAEAAAAAAAgAAABjbWRBbGxvYw",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAtgAEAAAAAADWAAQAAAAAAAAAAAAAA8L8"
				],
				[
					737,
					1,
					"insert",
					{
						"characters": "mpD"
					},
					"BAAAAD2AAQAAAAAAPoABAAAAAAAAAAAAPoABAAAAAAA+gAEAAAAAAA4AAABvbmVUaW1lQ21kUG9vbD6AAQAAAAAAP4ABAAAAAAAAAAAAP4ABAAAAAABAgAEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA9gAEAAAAAAEuAAQAAAAAAAAAAAAAA8L8"
				],
				[
					738,
					1,
					"insert_completion",
					{
						"completion": "mpDevice",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mpDevice"
					},
					"AgAAAD2AAQAAAAAAPYABAAAAAAADAAAAbXBEPYABAAAAAABFgAEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABAgAEAAAAAAECAAQAAAAAAAAAAAAAA8L8"
				],
				[
					739,
					1,
					"insert",
					{
						"characters": "->"
					},
					"AgAAAEWAAQAAAAAARoABAAAAAAAAAAAARoABAAAAAABHgAEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABFgAEAAAAAAEWAAQAAAAAAAAAAAAAA8L8"
				],
				[
					740,
					1,
					"paste",
					null,
					"AQAAAEeAAQAAAAAAmIABAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABHgAEAAAAAAEeAAQAAAAAAAAAAAAAA8L8"
				],
				[
					746,
					1,
					"paste",
					null,
					"AgAAAF2AAQAAAAAAioABAAAAAAAAAAAAioABAAAAAACKgAEAAAAAACoAAABMb3dMZXZlbENvbnRleHREYXRhOjpDb21tYW5kUXVldWVUeXBlIHR5cGU",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACHgAEAAAAAAF2AAQAAAAAAAAAAAAAA8L8"
				],
				[
					749,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AgAAAIyAAQAAAAAAjYABAAAAAAAAAAAAjYABAAAAAACNgAEAAAAAAA4AAAB1aW50MzJfdCBpbmRleA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMgAEAAAAAAJqAAQAAAAAAAAAAAAAA8L8"
				],
				[
					755,
					2,
					"left_delete",
					null,
					"AgAAAAR/AQAAAAAABH8BAAAAAABtAAAAICAgICAgICAgICAgICAgIGNvbnN0IENvbW1hbmRBbGxvY2F0b3JIYW5kbGUmIGNtZEFsbG9jID0gcENvbnRleHQtPmdldExvd0xldmVsRGF0YSgpLT5nZXRDb21tYW5kQWxsb2NhdG9yKCk7CgN/AQAAAAAAA38BAAAAAAABAAAACg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAEfwEAAAAAAHF/AQAAAAAAAAAAAAAA8L8"
				],
				[
					761,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEWFAQAAAAAARoUBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABFhQEAAAAAAEWFAQAAAAAAAAAAAAAA8L8"
				],
				[
					762,
					1,
					"reindent",
					null,
					"AQAAAEaFAQAAAAAAVoUBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABGhQEAAAAAAEaFAQAAAAAAAAAAAAAA8L8"
				],
				[
					763,
					1,
					"paste",
					null,
					"AQAAAFaFAQAAAAAAfoUBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABWhQEAAAAAAFaFAQAAAAAAAAAAAAAA8L8"
				],
				[
					765,
					1,
					"reindent",
					null,
					"AQAAABqGAQAAAAAAKoYBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAahgEAAAAAABqGAQAAAAAAAAAAAACAf0A"
				],
				[
					766,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAACqGAQAAAAAALoYBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAqhgEAAAAAACqGAQAAAAAAAAAAAAAA8L8"
				],
				[
					768,
					1,
					"paste",
					null,
					"AQAAACqGAQAAAAAAUoYBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAqhgEAAAAAACqGAQAAAAAAAAAAAAAA8L8"
				],
				[
					770,
					1,
					"insert",
					{
						"characters": " done"
					},
					"BQAAAE2GAQAAAAAAToYBAAAAAAAAAAAAToYBAAAAAABPhgEAAAAAAAAAAABPhgEAAAAAAFCGAQAAAAAAAAAAAFCGAQAAAAAAUYYBAAAAAAAAAAAAUYYBAAAAAABShgEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNhgEAAAAAAE2GAQAAAAAAAAAAAAAA8L8"
				],
				[
					773,
					1,
					"insert",
					{
						"characters": "Resetting"
					},
					"CgAAAJ+EAQAAAAAAoIQBAAAAAAAAAAAAoIQBAAAAAACghAEAAAAAABsAAABHZXR0aW5nIGJsYXMgY29tcGFjdGVkIHNpemWghAEAAAAAAKGEAQAAAAAAAAAAAKGEAQAAAAAAooQBAAAAAAAAAAAAooQBAAAAAACjhAEAAAAAAAAAAACjhAEAAAAAAKSEAQAAAAAAAAAAAKSEAQAAAAAApYQBAAAAAAAAAAAApYQBAAAAAACmhAEAAAAAAAAAAACmhAEAAAAAAKeEAQAAAAAAAAAAAKeEAQAAAAAAqIQBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACfhAEAAAAAALqEAQAAAAAAAAAAAAAA8L8"
				],
				[
					774,
					1,
					"insert",
					{
						"characters": " query"
					},
					"BgAAAKiEAQAAAAAAqYQBAAAAAAAAAAAAqYQBAAAAAACqhAEAAAAAAAAAAACqhAEAAAAAAKuEAQAAAAAAAAAAAKuEAQAAAAAArIQBAAAAAAAAAAAArIQBAAAAAACthAEAAAAAAAAAAACthAEAAAAAAK6EAQAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACohAEAAAAAAKiEAQAAAAAAAAAAAAAA8L8"
				],
				[
					775,
					1,
					"insert",
					{
						"characters": " pool"
					},
					"BQAAAK6EAQAAAAAAr4QBAAAAAAAAAAAAr4QBAAAAAACwhAEAAAAAAAAAAACwhAEAAAAAALGEAQAAAAAAAAAAALGEAQAAAAAAsoQBAAAAAAAAAAAAsoQBAAAAAACzhAEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACuhAEAAAAAAK6EAQAAAAAAAAAAAAAA8L8"
				],
				[
					781,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAJ9/AQAAAAAAoH8BAAAAAAAAAAAAoH8BAAAAAAChfwEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACffwEAAAAAAJ9/AQAAAAAAAAAAAAAA8L8"
				],
				[
					783,
					1,
					"paste",
					null,
					"AQAAAKB/AQAAAAAA7H8BAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACgfwEAAAAAAKB/AQAAAAAAAAAAAAAAAAA"
				],
				[
					786,
					6,
					"left_delete",
					null,
					"BgAAANV/AQAAAAAA1X8BAAAAAAABAAAAL9R/AQAAAAAA1H8BAAAAAAABAAAAL9B/AQAAAAAA0H8BAAAAAAAEAAAAICAgIMx/AQAAAAAAzH8BAAAAAAAEAAAAICAgIMh/AQAAAAAAyH8BAAAAAAAEAAAAICAgIMR/AQAAAAAAxH8BAAAAAAAEAAAAICAgIA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADWfwEAAAAAANZ/AQAAAAAAAAAAAAAA8L8"
				],
				[
					789,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAMSFAQAAAAAAxYUBAAAAAAAAAAAAxYUBAAAAAADGhQEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADEhQEAAAAAAMSFAQAAAAAAAAAAAAAA8L8"
				],
				[
					793,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAAaFAQAAAAAAB4UBAAAAAAAAAAAAB4UBAAAAAAAIhQEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAGhQEAAAAAAAaFAQAAAAAAAAAAAAAAYkA"
				],
				[
					795,
					2,
					"left_delete",
					null,
					"AgAAAEOFAQAAAAAAQ4UBAAAAAAABAAAAL0KFAQAAAAAAQoUBAAAAAAABAAAALw",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABEhQEAAAAAAESFAQAAAAAAAAAAAABAZEA"
				],
				[
					803,
					1,
					"insert",
					{
						"characters": "\n\n//"
					},
					"BAAAANp/AQAAAAAA238BAAAAAAAAAAAA238BAAAAAADcfwEAAAAAAAAAAADcfwEAAAAAAN1/AQAAAAAAAAAAAN1/AQAAAAAA3n8BAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADafwEAAAAAANp/AQAAAAAAAAAAAAAA8L8"
				],
				[
					804,
					1,
					"paste",
					null,
					"AQAAAN5/AQAAAAAAFYABAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADefwEAAAAAAN5/AQAAAAAAAAAAAAAA8L8"
				],
				[
					810,
					1,
					"right_delete",
					null,
					"AQAAAH2FAQAAAAAAfYUBAAAAAAA4AAAAdmtSZXNldFF1ZXJ5UG9vbChtcERldmljZS0+Z2V0QXBpSGFuZGxlKCksIHBvb2wsIDAsIDEpOwo",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB9hQEAAAAAALWFAQAAAAAAAAAAAAAAYkA"
				],
				[
					814,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOSCAQAAAAAA5YIBAAAAAAAAAAAA5YIBAAAAAAD1ggEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADkggEAAAAAAOSCAQAAAAAAAAAAAAAA8L8"
				],
				[
					815,
					1,
					"insert",
					{
						"characters": ".."
					},
					"AgAAAPWCAQAAAAAA9oIBAAAAAAAAAAAA9oIBAAAAAAD3ggEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD1ggEAAAAAAPWCAQAAAAAAAAAAAAAA8L8"
				],
				[
					819,
					2,
					"right_delete",
					null,
					"AgAAAPWCAQAAAAAA9YIBAAAAAAABAAAALvWCAQAAAAAA9YIBAAAAAAABAAAALg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD1ggEAAAAAAPWCAQAAAAAAAAAAAAAAYkA"
				],
				[
					820,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAPWCAQAAAAAA9oIBAAAAAAAAAAAA9oIBAAAAAAD3ggEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD1ggEAAAAAAPWCAQAAAAAAAAAAAAAA8L8"
				],
				[
					823,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAF2DAQAAAAAAXoMBAAAAAAAAAAAAXoMBAAAAAABfgwEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABdgwEAAAAAAF2DAQAAAAAAAAAAAAAA8L8"
				],
				[
					826,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAPyAAQAAAAAA/YABAAAAAAAAAAAA/YABAAAAAAD+gAEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD8gAEAAAAAAPyAAQAAAAAAAAAAAAAA8L8"
				],
				[
					829,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAADyBAQAAAAAAPYEBAAAAAAAAAAAAPYEBAAAAAAA+gQEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA8gQEAAAAAADyBAQAAAAAAAAAAAAAA8L8"
				],
				[
					832,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAFWBAQAAAAAAVoEBAAAAAAAAAAAAVoEBAAAAAABXgQEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABVgQEAAAAAAFWBAQAAAAAAAAAAAAAA8L8"
				],
				[
					835,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAIuBAQAAAAAAjIEBAAAAAAAAAAAAjIEBAAAAAACNgQEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACLgQEAAAAAAIuBAQAAAAAAAAAAAAAA8L8"
				],
				[
					838,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAM2BAQAAAAAAzoEBAAAAAAAAAAAAzoEBAAAAAADPgQEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNgQEAAAAAAM2BAQAAAAAAAAAAAAAA8L8"
				],
				[
					842,
					2,
					"right_delete",
					null,
					"AgAAAPyAAQAAAAAA/IABAAAAAAABAAAAL/yAAQAAAAAA/IABAAAAAAABAAAALw",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD8gAEAAAAAAPyAAQAAAAAAAAAAAAAAYkA"
				],
				[
					844,
					2,
					"right_delete",
					null,
					"AgAAADqBAQAAAAAAOoEBAAAAAAABAAAALzqBAQAAAAAAOoEBAAAAAAABAAAALw",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6gQEAAAAAADqBAQAAAAAAAAAAAAAAYkA"
				],
				[
					846,
					3,
					"right_delete",
					null,
					"AwAAAFGBAQAAAAAAUYEBAAAAAAABAAAAL1GBAQAAAAAAUYEBAAAAAAABAAAAL1GBAQAAAAAAUYEBAAAAAAABAAAAIA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABRgQEAAAAAAFGBAQAAAAAAAAAAAAAAYkA"
				],
				[
					848,
					2,
					"right_delete",
					null,
					"AgAAAISBAQAAAAAAhIEBAAAAAAABAAAAL4SBAQAAAAAAhIEBAAAAAAABAAAALw",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACEgQEAAAAAAISBAQAAAAAAAAAAAAAAYkA"
				],
				[
					850,
					2,
					"right_delete",
					null,
					"AgAAAMSBAQAAAAAAxIEBAAAAAAABAAAAL8SBAQAAAAAAxIEBAAAAAAABAAAALw",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADEgQEAAAAAAMSBAQAAAAAAAAAAAAAAYkA"
				],
				[
					852,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFGBAQAAAAAAUoEBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABRgQEAAAAAAFGBAQAAAAAAAAAAAAAAYkA"
				],
				[
					866,
					1,
					"paste",
					null,
					"AgAAABtDAQAAAAAAMEMBAAAAAAAAAAAAMEMBAAAAAAAwQwEAAAAAAAoAAAAodWludDMyX3Qp",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAlQwEAAAAAABtDAQAAAAAAAAAAAAAA8L8"
				],
				[
					869,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAADBDAQAAAAAAMUMBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwQwEAAAAAADBDAQAAAAAAAAAAAAAA8L8"
				],
				[
					871,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAEZDAQAAAAAAR0MBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABGQwEAAAAAAEZDAQAAAAAAAAAAAAAA8L8"
				],
				[
					882,
					1,
					"insert",
					{
						"characters": "\nin"
					},
					"BAAAAKJCAQAAAAAAo0IBAAAAAAAAAAAAo0IBAAAAAACrQgEAAAAAAAAAAACrQgEAAAAAAKxCAQAAAAAAAAAAAKxCAQAAAAAArUIBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACiQgEAAAAAAKJCAQAAAAAAAAAAAAAA8L8"
				],
				[
					883,
					1,
					"insert_completion",
					{
						"completion": "inputs",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "inputs"
					},
					"AgAAAKtCAQAAAAAAq0IBAAAAAAACAAAAaW6rQgEAAAAAALFCAQAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtQgEAAAAAAK1CAQAAAAAAAAAAAAAA8L8"
				],
				[
					884,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAALFCAQAAAAAAskIBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxQgEAAAAAALFCAQAAAAAAAAAAAAAA8L8"
				],
				[
					885,
					1,
					"paste",
					null,
					"AQAAALJCAQAAAAAA6EIBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyQgEAAAAAALJCAQAAAAAAAAAAAAAA8L8"
				],
				[
					903,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAOJ0AQAAAAAA43QBAAAAAAAAAAAA43QBAAAAAADkdAEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADidAEAAAAAAOJ0AQAAAAAAAAAAAAAA8L8"
				],
				[
					905,
					1,
					"reindent",
					null,
					"AQAAAON0AQAAAAAA83QBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADjdAEAAAAAAON0AQAAAAAAAAAAAAAAAAA"
				],
				[
					906,
					1,
					"paste",
					null,
					"AQAAAPN0AQAAAAAAgXUBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADzdAEAAAAAAPN0AQAAAAAAAAAAAAAA8L8"
				],
				[
					910,
					5,
					"left_delete",
					null,
					"BQAAAEB1AQAAAAAAQHUBAAAAAAAtAAAAICAgICAgICAgICAgICAgIGFjY2VsZXJhdGlvbkJ1aWxkR2VvbWV0cnlJbmZvP3UBAAAAAAA/dQEAAAAAAAEAAAAKPnUBAAAAAAA+dQEAAAAAAAEAAAA7PXUBAAAAAAA9dQEAAAAAAAEAAAB9PHUBAAAAAAA8dQEAAAAAAAEAAAB7",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABtdQEAAAAAAEB1AQAAAAAAAAAAAAAA8L8"
				],
				[
					913,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAB51AQAAAAAAH3UBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAedQEAAAAAAB51AQAAAAAAAAAAAAAA8L8"
				],
				[
					918,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAFJ0AQAAAAAAU3QBAAAAAAAAAAAAU3QBAAAAAABUdAEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSdAEAAAAAAFJ0AQAAAAAAAAAAAAAA8L8"
				],
				[
					921,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAALF0AQAAAAAAsnQBAAAAAAAAAAAAsnQBAAAAAACzdAEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxdAEAAAAAALF0AQAAAAAAAAAAAAAA8L8"
				],
				[
					931,
					1,
					"paste",
					null,
					"AgAAAER1AQAAAAAAVXUBAAAAAAAAAAAAVXUBAAAAAABVdQEAAAAAAAQAAABibGFz",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABEdQEAAAAAAEh1AQAAAAAAAAAAAAAA8L8"
				],
				[
					951,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFBXAQAAAAAAUVcBAAAAAAAAAAAAUVcBAAAAAABVVwEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABQVwEAAAAAAFBXAQAAAAAAAAAAAAAA8L8"
				],
				[
					953,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKBXAQAAAAAAoVcBAAAAAAAAAAAAoVcBAAAAAAClVwEAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACgVwEAAAAAAKBXAQAAAAAAAAAAAAAAQkA"
				],
				[
					957,
					1,
					"insert",
					{
						"characters": "Acce"
					},
					"BQAAAItXAQAAAAAAjFcBAAAAAAAAAAAAjFcBAAAAAACMVwEAAAAAAA4AAABOb25QaXhlbFNoYWRlcoxXAQAAAAAAjVcBAAAAAAAAAAAAjVcBAAAAAACOVwEAAAAAAAAAAACOVwEAAAAAAI9XAQAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACLVwEAAAAAAJlXAQAAAAAAAAAAAAAA8L8"
				],
				[
					961,
					1,
					"insert_completion",
					{
						"completion": "AccelerationStructureInput",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "AccelerationStructureInput"
					},
					"AgAAAItXAQAAAAAAi1cBAAAAAAAEAAAAQWNjZYtXAQAAAAAApVcBAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPVwEAAAAAAI9XAQAAAAAAAAAAAAAA8L8"
				],
				[
					969,
					1,
					"paste",
					null,
					"AgAAAPBXAQAAAAAAClgBAAAAAAAAAAAAClgBAAAAAAAKWAEAAAAAAA4AAABOb25QaXhlbFNoYWRlcg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwVwEAAAAAAP5XAQAAAAAAAAAAAAAA8L8"
				],
				[
					973,
					1,
					"paste",
					null,
					"AgAAAGZYAQAAAAAAgFgBAAAAAAAAAAAAgFgBAAAAAACAWAEAAAAAAA4AAABOb25QaXhlbFNoYWRlcg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABmWAEAAAAAAHRYAQAAAAAAAAAAAAAA8L8"
				],
				[
					977,
					1,
					"paste",
					null,
					"AgAAAIhZAQAAAAAAolkBAAAAAAAAAAAAolkBAAAAAACiWQEAAAAAAA4AAABOb25QaXhlbFNoYWRlcg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACIWQEAAAAAAJZZAQAAAAAAAAAAAAAA8L8"
				],
				[
					981,
					1,
					"paste",
					null,
					"AgAAAOhZAQAAAAAAAloBAAAAAAAAAAAAAloBAAAAAAACWgEAAAAAAA4AAABOb25QaXhlbFNoYWRlcg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADoWQEAAAAAAPZZAQAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AQAAALpXAQAAAAAAu1cBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAulcBAAAAAAC6VwEAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAALtXAQAAAAAAvFcBAAAAAAAAAAAAvFcBAAAAAADAVwEAAAAAAAAAAAC8VwEAAAAAALxXAQAAAAAABAAAACAgICC8VwEAAAAAAMRXAQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAu1cBAAAAAAC7VwEAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABtYAQAAAAAAHFgBAAAAAAAAAAAAHFgBAAAAAAAgWAEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAG1gBAAAAAAAbWAEAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAABtYAQAAAAAAHFgBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAG1gBAAAAAAAbWAEAAAAAAAAAAAAAAEJA"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABxYAQAAAAAAHVgBAAAAAAAAAAAAHVgBAAAAAAAhWAEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHFgBAAAAAAAcWAEAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AgAAADpYAQAAAAAAO1gBAAAAAAAAAAAAHVgBAAAAAAAdWAEAAAAAAAQAAAAgICAg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOlgBAAAAAAA6WAEAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAADdYAQAAAAAAOFgBAAAAAAAAAAAAOFgBAAAAAAA8WAEAAAAAAAAAAAA4WAEAAAAAADhYAQAAAAAABAAAACAgICA4WAEAAAAAAEBYAQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAN1gBAAAAAAA3WAEAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJ5YAQAAAAAAn1gBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnlgBAAAAAACeWAEAAAAAAAAAAAAAAFJA"
				],
				[
					21,
					1,
					"reindent",
					null,
					"AQAAAJ5YAQAAAAAAplgBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnlgBAAAAAACeWAEAAAAAAAAAAAAAAAAA"
				],
				[
					22,
					1,
					"left_delete",
					null,
					"AQAAAKJYAQAAAAAAolgBAAAAAAAEAAAAICAgIA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAplgBAAAAAACmWAEAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAKJYAQAAAAAAo1gBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAolgBAAAAAACiWAEAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMBXAQAAAAAAwVcBAAAAAAAAAAAAwVcBAAAAAADFVwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwFcBAAAAAADAVwEAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "\tprin"
					},
					"BQAAAMBXAQAAAAAAxFcBAAAAAAAAAAAAxFcBAAAAAADFVwEAAAAAAAAAAADFVwEAAAAAAMZXAQAAAAAAAAAAAMZXAQAAAAAAx1cBAAAAAAAAAAAAx1cBAAAAAADIVwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwFcBAAAAAADAVwEAAAAAAAAAAAAAAEJA"
				],
				[
					29,
					1,
					"insert_completion",
					{
						"completion": "printf",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "printf"
					},
					"AgAAAMRXAQAAAAAAxFcBAAAAAAAEAAAAcHJpbsRXAQAAAAAAylcBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyFcBAAAAAADIVwEAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMpXAQAAAAAAzFcBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAylcBAAAAAADKVwEAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAMtXAQAAAAAAzVcBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAy1cBAAAAAADLVwEAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "1a\\n"
					},
					"BAAAAMxXAQAAAAAAzVcBAAAAAAAAAAAAzVcBAAAAAADOVwEAAAAAAAAAAADOVwEAAAAAAM9XAQAAAAAAAAAAAM9XAQAAAAAA0FcBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzFcBAAAAAADMVwEAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANJXAQAAAAAA01cBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0lcBAAAAAADSVwEAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFBXAQAAAAAAUVcBAAAAAAAAAAAAUVcBAAAAAABVVwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUFcBAAAAAABQVwEAAAAAAAAAAAAAAFJA"
				],
				[
					41,
					1,
					"paste",
					null,
					"AQAAAFVXAQAAAAAAZFcBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVVcBAAAAAABVVwEAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"right_delete",
					null,
					"AQAAAOFXAQAAAAAA4VcBAAAAAAABAAAAYQ",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4VcBAAAAAADhVwEAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AQAAAOFXAQAAAAAA4lcBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4VcBAAAAAADhVwEAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAGNYAQAAAAAAZFgBAAAAAAAAAAAAZFgBAAAAAABoWAEAAAAAAAAAAABoWAEAAAAAAGxYAQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAY1gBAAAAAABjWAEAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"paste",
					null,
					"AQAAAGxYAQAAAAAAe1gBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbFgBAAAAAABsWAEAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"right_delete",
					null,
					"AQAAAHVYAQAAAAAAdVgBAAAAAAABAAAAYQ",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdVgBAAAAAAB1WAEAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAAHVYAQAAAAAAdlgBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdVgBAAAAAAB1WAEAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAP5YAQAAAAAA/1gBAAAAAAAAAAAA/1gBAAAAAAADWQEAAAAAAAAAAAADWQEAAAAAAAdZAQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/lgBAAAAAAD+WAEAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"paste",
					null,
					"AQAAAAdZAQAAAAAAFlkBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAB1kBAAAAAAAHWQEAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"right_delete",
					null,
					"AQAAABBZAQAAAAAAEFkBAAAAAAABAAAAYQ",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEFkBAAAAAAAQWQEAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAABBZAQAAAAAAEVkBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEFkBAAAAAAAQWQEAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAGhXAQAAAAAAaVcBAAAAAAAAAAAAaVcBAAAAAABqVwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaFcBAAAAAABoVwEAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAPJXAQAAAAAA81cBAAAAAAAAAAAA81cBAAAAAAD0VwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8lcBAAAAAADyVwEAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAIhYAQAAAAAAiVgBAAAAAAAAAAAAiVgBAAAAAACKWAEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiFgBAAAAAACIWAEAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAANBZAQAAAAAA0VkBAAAAAAAAAAAA0VkBAAAAAADSWQEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0FkBAAAAAADQWQEAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAADJaAQAAAAAAM1oBAAAAAAAAAAAAM1oBAAAAAAA0WgEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMloBAAAAAAAyWgEAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAALeBAQAAAAAAuIEBAAAAAAAAAAAAuIEBAAAAAAC5gQEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAt4EBAAAAAAC3gQEAAAAAAAAAAAAACIBA"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": "auto"
					},
					"BAAAALiBAQAAAAAAuYEBAAAAAAAAAAAAuYEBAAAAAAC6gQEAAAAAAAAAAAC6gQEAAAAAALuBAQAAAAAAAAAAALuBAQAAAAAAvIEBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuIEBAAAAAAC4gQEAAAAAAAAAAAAAAAAA"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": " cmd"
					},
					"BAAAALyBAQAAAAAAvYEBAAAAAAAAAAAAvYEBAAAAAAC+gQEAAAAAAAAAAAC+gQEAAAAAAL+BAQAAAAAAAAAAAL+BAQAAAAAAwIEBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvIEBAAAAAAC8gQEAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": "Pool"
					},
					"BAAAAMCBAQAAAAAAwYEBAAAAAAAAAAAAwYEBAAAAAADCgQEAAAAAAAAAAADCgQEAAAAAAMOBAQAAAAAAAAAAAMOBAQAAAAAAxIEBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwIEBAAAAAADAgQEAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAMSBAQAAAAAAxYEBAAAAAAAAAAAAxYEBAAAAAADGgQEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxIEBAAAAAADEgQEAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMaBAQAAAAAAx4EBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxoEBAAAAAADGgQEAAAAAAAAAAAAAAPC/"
				],
				[
					130,
					1,
					"insert",
					{
						"characters": "pC"
					},
					"AgAAAMeBAQAAAAAAyIEBAAAAAAAAAAAAyIEBAAAAAADJgQEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAx4EBAAAAAADHgQEAAAAAAAAAAAAAAPC/"
				],
				[
					131,
					1,
					"insert_completion",
					{
						"completion": "pContext",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "pContext"
					},
					"AgAAAMeBAQAAAAAAx4EBAAAAAAACAAAAcEPHgQEAAAAAAM+BAQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyYEBAAAAAADJgQEAAAAAAAAAAAAAAPC/"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": "->get"
					},
					"BQAAAM+BAQAAAAAA0IEBAAAAAAAAAAAA0IEBAAAAAADRgQEAAAAAAAAAAADRgQEAAAAAANKBAQAAAAAAAAAAANKBAQAAAAAA04EBAAAAAAAAAAAA04EBAAAAAADUgQEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAz4EBAAAAAADPgQEAAAAAAAAAAAAAAPC/"
				],
				[
					133,
					1,
					"insert_completion",
					{
						"completion": "getLowLevelData",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "getLowLevelData"
					},
					"AgAAANGBAQAAAAAA0YEBAAAAAAADAAAAZ2V00YEBAAAAAADggQEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1IEBAAAAAADUgQEAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOCBAQAAAAAA4oEBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4IEBAAAAAADggQEAAAAAAAAAAAAAAPC/"
				],
				[
					136,
					1,
					"insert",
					{
						"characters": "->"
					},
					"AgAAAOKBAQAAAAAA44EBAAAAAAAAAAAA44EBAAAAAADkgQEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4oEBAAAAAADigQEAAAAAAAAAAAAAAPC/"
				],
				[
					137,
					1,
					"paste",
					null,
					"AQAAAOSBAQAAAAAA94EBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5IEBAAAAAADkgQEAAAAAAAAAAAAAAPC/"
				],
				[
					138,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPeBAQAAAAAA+YEBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA94EBAAAAAAD3gQEAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAPmBAQAAAAAA+oEBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+YEBAAAAAAD5gQEAAAAAAAAAAAAAAPC/"
				],
				[
					157,
					1,
					"paste",
					null,
					"AgAAABuCAQAAAAAAIoIBAAAAAAAAAAAAIoIBAAAAAAAiggEAAAAAAA4AAABvbmVUaW1lQ21kUG9vbA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAG4IBAAAAAAApggEAAAAAAAAAAAAAAPC/"
				],
				[
					169,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKRuAQAAAAAApW4BAAAAAAAAAAAApW4BAAAAAACxbgEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApG4BAAAAAACkbgEAAAAAAAAAAAAAAPC/"
				],
				[
					172,
					1,
					"insert",
					{
						"characters": "queryP"
					},
					"BgAAAL1uAQAAAAAAvm4BAAAAAAAAAAAAvm4BAAAAAAC/bgEAAAAAAAAAAAC/bgEAAAAAAMBuAQAAAAAAAAAAAMBuAQAAAAAAwW4BAAAAAAAAAAAAwW4BAAAAAADCbgEAAAAAAAAAAADCbgEAAAAAAMNuAQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvW4BAAAAAAC9bgEAAAAAAAAAAAAAAPC/"
				],
				[
					173,
					1,
					"right_delete",
					null,
					"AQAAAMNuAQAAAAAAw24BAAAAAAABAAAAcA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAw24BAAAAAADDbgEAAAAAAAAAAAAAAPC/"
				],
				[
					181,
					1,
					"paste",
					null,
					"AgAAABlvAQAAAAAAIm8BAAAAAAAAAAAAIm8BAAAAAAAibwEAAAAAAAQAAABwb29s",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGW8BAAAAAAAdbwEAAAAAAAAAAAAAAPC/"
				],
				[
					185,
					1,
					"paste",
					null,
					"AgAAABiKAQAAAAAAIYoBAAAAAAAAAAAAIYoBAAAAAAAhigEAAAAAAAQAAABwb29s",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGIoBAAAAAAAcigEAAAAAAAAAAAAAAPC/"
				],
				[
					201,
					1,
					"paste",
					null,
					"AgAAAFSIAQAAAAAAW4gBAAAAAAAAAAAAW4gBAAAAAABbiAEAAAAAAAQAAABwb29s",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWIgBAAAAAABUiAEAAAAAAAAAAAAAAPC/"
				],
				[
					204,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAPGCAQAAAAAA8oIBAAAAAAAAAAAA8oIBAAAAAADzggEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8YIBAAAAAADxggEAAAAAAAAAAAAAAPC/"
				],
				[
					207,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAADGDAQAAAAAAMoMBAAAAAAAAAAAAMoMBAAAAAAAzgwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMYMBAAAAAAAxgwEAAAAAAAAAAAAAAPC/"
				],
				[
					210,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAEqDAQAAAAAAS4MBAAAAAAAAAAAAS4MBAAAAAABMgwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASoMBAAAAAABKgwEAAAAAAAAAAAAAAPC/"
				],
				[
					213,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAICDAQAAAAAAgYMBAAAAAAAAAAAAgYMBAAAAAACCgwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgIMBAAAAAACAgwEAAAAAAAAAAAAAAPC/"
				],
				[
					216,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAMKDAQAAAAAAw4MBAAAAAAAAAAAAw4MBAAAAAADEgwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwoMBAAAAAADCgwEAAAAAAAAAAAAAAPC/"
				],
				[
					219,
					2,
					"right_delete",
					null,
					"AgAAANuHAQAAAAAA24cBAAAAAAABAAAAL9uHAQAAAAAA24cBAAAAAAABAAAALw",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA24cBAAAAAADbhwEAAAAAAAAAAAAAAPC/"
				],
				[
					225,
					1,
					"insert",
					{
						"characters": "query"
					},
					"BgAAAFyIAQAAAAAAXYgBAAAAAAAAAAAAXYgBAAAAAABdiAEAAAAAAAcAAABjbWRQb29sXYgBAAAAAABeiAEAAAAAAAAAAABeiAEAAAAAAF+IAQAAAAAAAAAAAF+IAQAAAAAAYIgBAAAAAAAAAAAAYIgBAAAAAABhiAEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXIgBAAAAAABjiAEAAAAAAAAAAAAAAPC/"
				],
				[
					226,
					1,
					"insert_completion",
					{
						"completion": "queryPool",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "queryPool"
					},
					"AgAAAFyIAQAAAAAAXIgBAAAAAAAFAAAAcXVlcnlciAEAAAAAAGWIAQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYYgBAAAAAABhiAEAAAAAAAAAAAAAAPC/"
				],
				[
					232,
					2,
					"right_delete",
					null,
					"AgAAAPGCAQAAAAAA8YIBAAAAAAABAAAAL/GCAQAAAAAA8YIBAAAAAAABAAAALw",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8YIBAAAAAADxggEAAAAAAAAAAAAAAPC/"
				],
				[
					234,
					2,
					"right_delete",
					null,
					"AgAAAC+DAQAAAAAAL4MBAAAAAAABAAAALy+DAQAAAAAAL4MBAAAAAAABAAAALw",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAL4MBAAAAAAAvgwEAAAAAAAAAAAAAAGJA"
				],
				[
					236,
					2,
					"right_delete",
					null,
					"AgAAAEaDAQAAAAAARoMBAAAAAAABAAAAL0aDAQAAAAAARoMBAAAAAAABAAAALw",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARoMBAAAAAABGgwEAAAAAAAAAAAAAAGJA"
				],
				[
					238,
					2,
					"right_delete",
					null,
					"AgAAAHqDAQAAAAAAeoMBAAAAAAABAAAAL3qDAQAAAAAAeoMBAAAAAAABAAAALw",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeoMBAAAAAAB6gwEAAAAAAAAAAAAAAGJA"
				],
				[
					240,
					2,
					"right_delete",
					null,
					"AgAAALqDAQAAAAAAuoMBAAAAAAABAAAAL7qDAQAAAAAAuoMBAAAAAAABAAAALw",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuoMBAAAAAAC6gwEAAAAAAAAAAAAAAGJA"
				],
				[
					247,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAH6DAQAAAAAAf4MBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfoMBAAAAAAB+gwEAAAAAAAAAAAAAAPC/"
				],
				[
					248,
					1,
					"paste_and_indent",
					null,
					"AQAAAH+DAQAAAAAAo4MBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAf4MBAAAAAAB/gwEAAAAAAAAAAAAAAPC/"
				],
				[
					249,
					1,
					"insert",
					{
						"characters": " //"
					},
					"AwAAAKODAQAAAAAApIMBAAAAAAAAAAAApIMBAAAAAAClgwEAAAAAAAAAAAClgwEAAAAAAKaDAQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAo4MBAAAAAACjgwEAAAAAAAAAAAAAAPC/"
				],
				[
					259,
					1,
					"paste",
					null,
					"AgAAAH+DAQAAAAAAooMBAAAAAAAAAAAAooMBAAAAAACigwEAAAAAACQAAABhY2NlbGVyYXRpb25CdWlsZFN0cnVjdHVyZVJhbmdlSW5mb3M",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAf4MBAAAAAACjgwEAAAAAAAAAAAAAAPC/"
				],
				[
					271,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIp3AQAAAAAAi3cBAAAAAAAAAAAAi3cBAAAAAACbdwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAincBAAAAAACKdwEAAAAAAAAAAAAAAPC/"
				],
				[
					272,
					1,
					"paste",
					null,
					"AQAAAJt3AQAAAAAA2HcBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAm3cBAAAAAACbdwEAAAAAAAAAAAAAAPC/"
				],
				[
					278,
					1,
					"paste",
					null,
					"AQAAAJt3AQAAAAAAuXcBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAm3cBAAAAAACbdwEAAAAAAAAAAAAAAPC/"
				],
				[
					285,
					1,
					"paste",
					null,
					"AQAAANN3AQAAAAAA4XcBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA03cBAAAAAADTdwEAAAAAAAAAAAAAAPC/"
				],
				[
					286,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOF3AQAAAAAA4ncBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4XcBAAAAAADhdwEAAAAAAAAAAAAAAPC/"
				],
				[
					289,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANN3AQAAAAAA1HcBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA03cBAAAAAADTdwEAAAAAAAAAAAAAAPC/"
				],
				[
					292,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAOR3AQAAAAAA5XcBAAAAAAAAAAAA5XcBAAAAAADmdwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5HcBAAAAAADkdwEAAAAAAAAAAAAAAPC/"
				],
				[
					298,
					1,
					"right_delete",
					null,
					"AQAAAAZ2AQAAAAAABnYBAAAAAAABAAAAJg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABnYBAAAAAAAGdgEAAAAAAAAAAAAAAPC/"
				],
				[
					301,
					1,
					"left_delete",
					null,
					"AQAAAPuDAQAAAAAA+4MBAAAAAAAnAAAAJmFjY2VsZXJhdGlvblN0cnVjdHVyZUJ1aWxkUmFuZ2VJbmZvIC8v",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIoQBAAAAAAD7gwEAAAAAAAAAAAAAAPC/"
				],
				[
					304,
					1,
					"right_delete",
					null,
					"AQAAABGCAQAAAAAAEYIBAAAAAAACAAAALy8",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEYIBAAAAAAATggEAAAAAAAAAAAAAAPC/"
				],
				[
					308,
					1,
					"insert",
					{
						"characters": "queryPool"
					},
					"CgAAADyCAQAAAAAAPYIBAAAAAAAAAAAAPYIBAAAAAAA9ggEAAAAAAAQAAABwb29sPYIBAAAAAAA+ggEAAAAAAAAAAAA+ggEAAAAAAD+CAQAAAAAAAAAAAD+CAQAAAAAAQIIBAAAAAAAAAAAAQIIBAAAAAABBggEAAAAAAAAAAABBggEAAAAAAEKCAQAAAAAAAAAAAEKCAQAAAAAAQ4IBAAAAAAAAAAAAQ4IBAAAAAABEggEAAAAAAAAAAABEggEAAAAAAEWCAQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPIIBAAAAAABAggEAAAAAAAAAAAAAAPC/"
				],
				[
					309,
					1,
					"insert_completion",
					{
						"completion": "VkQueryPool",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "VkQueryPool"
					},
					"AgAAADyCAQAAAAAAPIIBAAAAAAAJAAAAcXVlcnlQb29sPIIBAAAAAABHggEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARYIBAAAAAABFggEAAAAAAAAAAAAAAPC/"
				],
				[
					313,
					1,
					"insert",
					{
						"characters": "quer"
					},
					"BQAAADyCAQAAAAAAPYIBAAAAAAAAAAAAPYIBAAAAAAA9ggEAAAAAAAsAAABWa1F1ZXJ5UG9vbD2CAQAAAAAAPoIBAAAAAAAAAAAAPoIBAAAAAAA/ggEAAAAAAAAAAAA/ggEAAAAAAECCAQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPIIBAAAAAABHggEAAAAAAAAAAAAAAPC/"
				],
				[
					314,
					1,
					"insert_completion",
					{
						"completion": "queryPool",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "queryPool"
					},
					"AgAAADyCAQAAAAAAPIIBAAAAAAAEAAAAcXVlcjyCAQAAAAAARYIBAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQIIBAAAAAABAggEAAAAAAAAAAAAAAPC/"
				],
				[
					328,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BgAAALE/AQAAAAAAsj8BAAAAAAAAAAAAsj8BAAAAAAC2PwEAAAAAAAAAAAC2PwEAAAAAALo/AQAAAAAAAAAAALo/AQAAAAAAuz8BAAAAAAAAAAAAuz8BAAAAAADDPwEAAAAAAAAAAACyPwEAAAAAALI/AQAAAAAACAAAACAgICAgICAg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsT8BAAAAAACxPwEAAAAAAAAAAAAAAPC/"
				],
				[
					330,
					1,
					"reindent",
					null,
					"AQAAALI/AQAAAAAAuj8BAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsj8BAAAAAACyPwEAAAAAAAAAAAAAAFJA"
				],
				[
					331,
					1,
					"insert",
					{
						"characters": "print"
					},
					"BgAAALo/AQAAAAAAuz8BAAAAAAAAAAAAvD8BAAAAAAC8PwEAAAAAAAgAAAAgICAgICAgILs/AQAAAAAAvD8BAAAAAAAAAAAAvD8BAAAAAAC9PwEAAAAAAAAAAAC9PwEAAAAAAL4/AQAAAAAAAAAAAL4/AQAAAAAAvz8BAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuj8BAAAAAAC6PwEAAAAAAAAAAAAAAPC/"
				],
				[
					332,
					1,
					"insert_completion",
					{
						"completion": "printf",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "printf"
					},
					"AgAAALo/AQAAAAAAuj8BAAAAAAAFAAAAcHJpbnS6PwEAAAAAAMA/AQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvz8BAAAAAAC/PwEAAAAAAAAAAAAAAPC/"
				],
				[
					333,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMA/AQAAAAAAwj8BAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwD8BAAAAAADAPwEAAAAAAAAAAAAAAPC/"
				],
				[
					334,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAME/AQAAAAAAwz8BAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwT8BAAAAAADBPwEAAAAAAAAAAAAAAPC/"
				],
				[
					335,
					1,
					"insert",
					{
						"characters": "Prebuild"
					},
					"CAAAAMI/AQAAAAAAwz8BAAAAAAAAAAAAwz8BAAAAAADEPwEAAAAAAAAAAADEPwEAAAAAAMU/AQAAAAAAAAAAAMU/AQAAAAAAxj8BAAAAAAAAAAAAxj8BAAAAAADHPwEAAAAAAAAAAADHPwEAAAAAAMg/AQAAAAAAAAAAAMg/AQAAAAAAyT8BAAAAAAAAAAAAyT8BAAAAAADKPwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwj8BAAAAAADCPwEAAAAAAAAAAAAAAPC/"
				],
				[
					336,
					1,
					"insert",
					{
						"characters": " info"
					},
					"BQAAAMo/AQAAAAAAyz8BAAAAAAAAAAAAyz8BAAAAAADMPwEAAAAAAAAAAADMPwEAAAAAAM0/AQAAAAAAAAAAAM0/AQAAAAAAzj8BAAAAAAAAAAAAzj8BAAAAAADPPwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyj8BAAAAAADKPwEAAAAAAAAAAAAAAPC/"
				],
				[
					337,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAM8/AQAAAAAA0D8BAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzz8BAAAAAADPPwEAAAAAAAAAAAAAAPC/"
				],
				[
					338,
					1,
					"insert",
					{
						"characters": "bl"
					},
					"AgAAANA/AQAAAAAA0T8BAAAAAAAAAAAA0T8BAAAAAADSPwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0D8BAAAAAADQPwEAAAAAAAAAAAAAAPC/"
				],
				[
					339,
					1,
					"insert_completion",
					{
						"completion": "blas",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "blas"
					},
					"AgAAANA/AQAAAAAA0D8BAAAAAAACAAAAYmzQPwEAAAAAANQ/AQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0j8BAAAAAADSPwEAAAAAAAAAAAAAAPC/"
				],
				[
					340,
					1,
					"insert",
					{
						"characters": " gem"
					},
					"BAAAANQ/AQAAAAAA1T8BAAAAAAAAAAAA1T8BAAAAAADWPwEAAAAAAAAAAADWPwEAAAAAANc/AQAAAAAAAAAAANc/AQAAAAAA2D8BAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1D8BAAAAAADUPwEAAAAAAAAAAAAAAPC/"
				],
				[
					341,
					1,
					"left_delete",
					null,
					"AQAAANc/AQAAAAAA1z8BAAAAAAABAAAAbQ",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2D8BAAAAAADYPwEAAAAAAAAAAAAAAPC/"
				],
				[
					342,
					1,
					"insert",
					{
						"characters": "om"
					},
					"AgAAANc/AQAAAAAA2D8BAAAAAAAAAAAA2D8BAAAAAADZPwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1z8BAAAAAADXPwEAAAAAAAAAAAAAAPC/"
				],
				[
					345,
					1,
					"insert_completion",
					{
						"completion": "geomDescs",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "geomDescs"
					},
					"AgAAANU/AQAAAAAA1T8BAAAAAAAEAAAAZ2VvbdU/AQAAAAAA3j8BAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2T8BAAAAAADZPwEAAAAAAAAAAAAAAPC/"
				],
				[
					346,
					1,
					"insert",
					{
						"characters": " zi"
					},
					"AwAAAN4/AQAAAAAA3z8BAAAAAAAAAAAA3z8BAAAAAADgPwEAAAAAAAAAAADgPwEAAAAAAOE/AQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3j8BAAAAAADePwEAAAAAAAAAAAAAAPC/"
				],
				[
					347,
					2,
					"left_delete",
					null,
					"AgAAAOA/AQAAAAAA4D8BAAAAAAABAAAAad8/AQAAAAAA3z8BAAAAAAABAAAAeg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4T8BAAAAAADhPwEAAAAAAAAAAAAAAPC/"
				],
				[
					348,
					1,
					"insert",
					{
						"characters": "size"
					},
					"BAAAAN8/AQAAAAAA4D8BAAAAAAAAAAAA4D8BAAAAAADhPwEAAAAAAAAAAADhPwEAAAAAAOI/AQAAAAAAAAAAAOI/AQAAAAAA4z8BAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3z8BAAAAAADfPwEAAAAAAAAAAAAAAPC/"
				],
				[
					349,
					1,
					"insert",
					{
						"characters": " if"
					},
					"AwAAAOM/AQAAAAAA5D8BAAAAAAAAAAAA5D8BAAAAAADlPwEAAAAAAAAAAADlPwEAAAAAAOY/AQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4z8BAAAAAADjPwEAAAAAAAAAAAAAAPC/"
				],
				[
					350,
					1,
					"left_delete",
					null,
					"AQAAAOU/AQAAAAAA5T8BAAAAAAABAAAAZg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5j8BAAAAAADmPwEAAAAAAAAAAAAAAPC/"
				],
				[
					351,
					1,
					"insert",
					{
						"characters": "s:"
					},
					"AgAAAOU/AQAAAAAA5j8BAAAAAAAAAAAA5j8BAAAAAADnPwEAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5T8BAAAAAADlPwEAAAAAAAAAAAAAAPC/"
				],
				[
					352,
					1,
					"insert",
					{
						"characters": " %u"
					},
					"AwAAAOc/AQAAAAAA6D8BAAAAAAAAAAAA6D8BAAAAAADpPwEAAAAAAAAAAADpPwEAAAAAAOo/AQAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5z8BAAAAAADnPwEAAAAAAAAAAAAAAPC/"
				],
				[
					354,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOs/AQAAAAAA7D8BAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6z8BAAAAAADrPwEAAAAAAAAAAAAAAPC/"
				],
				[
					355,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOw/AQAAAAAA7T8BAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7D8BAAAAAADsPwEAAAAAAAAAAAAAAPC/"
				],
				[
					363,
					1,
					"paste",
					null,
					"AQAAAO0/AQAAAAAAAkABAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7T8BAAAAAADtPwEAAAAAAAAAAAAAAPC/"
				],
				[
					366,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAANAAQAAAAAABEABAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAA0ABAAAAAAADQAEAAAAAAAAAAAAAAPC/"
				],
				[
					369,
					1,
					"insert",
					{
						"characters": "z"
					},
					"AQAAAOk/AQAAAAAA6j8BAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6T8BAAAAAADpPwEAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKBuffer.cpp",
			"settings":
			{
				"buffer_size": 8057,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAN8NAAAAAAAA4A0AAAAAAAAAAAAA4A0AAAAAAADhDQAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3w0AAAAAAADfDQAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"reindent",
					null,
					"AQAAAOANAAAAAAAA5A0AAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4A0AAAAAAADgDQAAAAAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "set"
					},
					"AwAAAOQNAAAAAAAA5Q0AAAAAAAAAAAAA5Q0AAAAAAADmDQAAAAAAAAAAAADmDQAAAAAAAOcNAAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5A0AAAAAAADkDQAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert_completion",
					{
						"completion": "setBit",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "setBit"
					},
					"AgAAAOQNAAAAAAAA5A0AAAAAAAADAAAAc2V05A0AAAAAAADqDQAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5w0AAAAAAADnDQAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOoNAAAAAAAA7A0AAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6g0AAAAAAADqDQAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "Bu"
					},
					"AgAAAOsNAAAAAAAA7A0AAAAAAAAAAAAA7A0AAAAAAADtDQAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6w0AAAAAAADrDQAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert_completion",
					{
						"completion": "Buffer",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Buffer"
					},
					"AgAAAOsNAAAAAAAA6w0AAAAAAAACAAAAQnXrDQAAAAAAAPENAAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7Q0AAAAAAADtDQAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "::B"
					},
					"AwAAAPENAAAAAAAA8g0AAAAAAAAAAAAA8g0AAAAAAADzDQAAAAAAAAAAAADzDQAAAAAAAPQNAAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8Q0AAAAAAADxDQAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert_completion",
					{
						"completion": "BindFlags",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "BindFlags"
					},
					"AgAAAPMNAAAAAAAA8w0AAAAAAAABAAAAQvMNAAAAAAAA/A0AAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9A0AAAAAAAD0DQAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "::"
					},
					"AgAAAPwNAAAAAAAA/Q0AAAAAAAAAAAAA/Q0AAAAAAAD+DQAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/A0AAAAAAAD8DQAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"paste",
					null,
					"AQAAAP4NAAAAAAAAGA4AAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/g0AAAAAAAD+DQAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAABgOAAAAAAAAGQ4AAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGA4AAAAAAAAYDgAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABkOAAAAAAAAGg4AAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGQ4AAAAAAAAZDgAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"paste",
					null,
					"AQAAABoOAAAAAAAAiw4AAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGg4AAAAAAAAaDgAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"right_delete",
					null,
					"AQAAAIoOAAAAAAAAig4AAAAAAAABAAAALA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAig4AAAAAAACKDgAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIoOAAAAAAAAiw4AAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAig4AAAAAAACKDgAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIwOAAAAAAAAjQ4AAAAAAAAAAAAAjQ4AAAAAAACRDgAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjA4AAAAAAACMDgAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AgAAAIwOAAAAAAAAjQ4AAAAAAAAAAAAAjg4AAAAAAACODgAAAAAAAAQAAAAgICAg",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjA4AAAAAAACMDgAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAIsOAAAAAAAAjA4AAAAAAAAAAAAAjA4AAAAAAACQDgAAAAAAAAAAAACMDgAAAAAAAIwOAAAAAAAABAAAACAgICCMDgAAAAAAAJQOAAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiw4AAAAAAACLDgAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"left_delete",
					null,
					"AQAAAJAOAAAAAAAAkA4AAAAAAAAEAAAAICAgIA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlA4AAAAAAACUDgAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAJAOAAAAAAAAkQ4AAAAAAAAAAAAAkQ4AAAAAAACVDgAAAAAAAAAAAACMDgAAAAAAAIwOAAAAAAAABAAAACAgICA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkA4AAAAAAACQDgAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					4,
					"left_delete",
					null,
					"BAAAAI0OAAAAAAAAjQ4AAAAAAAAEAAAAICAgIIwOAAAAAAAAjA4AAAAAAAABAAAACosOAAAAAAAAiw4AAAAAAAABAAAACooOAAAAAAAAig4AAAAAAAABAAAAIA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkQ4AAAAAAACRDgAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAJsXAAAAAAAAnBcAAAAAAAAAAAAAnBcAAAAAAACdFwAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACbFwAAAAAAAJsXAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"reindent",
					null,
					"AQAAAJwXAAAAAAAAoBcAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACcFwAAAAAAAJwXAAAAAAAAAAAAAAAAAAA"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "VkD"
					},
					"AwAAAKAXAAAAAAAAoRcAAAAAAAAAAAAAoRcAAAAAAACiFwAAAAAAAAAAAACiFwAAAAAAAKMXAAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACgFwAAAAAAAKAXAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAKMXAAAAAAAApBcAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjFwAAAAAAAKMXAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "viceA"
					},
					"BQAAAKQXAAAAAAAApRcAAAAAAAAAAAAApRcAAAAAAACmFwAAAAAAAAAAAACmFwAAAAAAAKcXAAAAAAAAAAAAAKcXAAAAAAAAqBcAAAAAAAAAAAAAqBcAAAAAAACpFwAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACkFwAAAAAAAKQXAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAAKkXAAAAAAAAqhcAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpFwAAAAAAAKkXAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"insert_completion",
					{
						"completion": "VkDeviceAddress",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "VkDeviceAddress"
					},
					"AgAAAKAXAAAAAAAAoBcAAAAAAAAKAAAAVmtEZXZpY2VBZKAXAAAAAAAArxcAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACqFwAAAAAAAKoXAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": " a"
					},
					"AgAAAK8XAAAAAAAAsBcAAAAAAAAAAAAAsBcAAAAAAACxFwAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvFwAAAAAAAK8XAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "ddress"
					},
					"BgAAALEXAAAAAAAAshcAAAAAAAAAAAAAshcAAAAAAACzFwAAAAAAAAAAAACzFwAAAAAAALQXAAAAAAAAAAAAALQXAAAAAAAAtRcAAAAAAAAAAAAAtRcAAAAAAAC2FwAAAAAAAAAAAAC2FwAAAAAAALcXAAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxFwAAAAAAALEXAAAAAAAAAAAAAAAA8L8"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAALcXAAAAAAAAuBcAAAAAAAAAAAAAuBcAAAAAAAC5FwAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3FwAAAAAAALcXAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					2,
					"left_delete",
					null,
					"AgAAALgXAAAAAAAAuBcAAAAAAAABAAAAPbcXAAAAAAAAtxcAAAAAAAABAAAAIA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5FwAAAAAAALkXAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALcXAAAAAAAAuBcAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3FwAAAAAAALcXAAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAALgXAAAAAAAAuRcAAAAAAAAAAAAAuRcAAAAAAAC9FwAAAAAAAAAAAAC9FwAAAAAAAL4XAAAAAAAAAAAAAL4XAAAAAAAAwhcAAAAAAAAAAAAAuRcAAAAAAAC5FwAAAAAAAAQAAAAgICAg",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4FwAAAAAAALgXAAAAAAAAAAAAAAAA8L8"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": " |"
					},
					"AwAAAO0KAAAAAAAA7goAAAAAAAAAAAAAuxcAAAAAAAC7FwAAAAAAAAQAAAAgICAg7goAAAAAAADvCgAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtCgAAAAAAAO0KAAAAAAAAAAAAAAAA8L8"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAO8KAAAAAAAA8AoAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvCgAAAAAAAO8KAAAAAAAAAAAAAAAA8L8"
				],
				[
					61,
					1,
					"paste",
					null,
					"AQAAAPAKAAAAAAAAGQsAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwCgAAAAAAAPAKAAAAAAAAAAAAAAAA8L8"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": " |"
					},
					"AgAAAGwLAAAAAAAAbQsAAAAAAAAAAAAAbQsAAAAAAABuCwAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABsCwAAAAAAAGwLAAAAAAAAAAAAAAAA8L8"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAG4LAAAAAAAAbwsAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABuCwAAAAAAAG4LAAAAAAAAAAAAAAAA8L8"
				],
				[
					66,
					1,
					"paste",
					null,
					"AQAAAG8LAAAAAAAAmAsAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABvCwAAAAAAAG8LAAAAAAAAAAAAAAAA8L8"
				],
				[
					72,
					1,
					"left_delete",
					null,
					"AQAAAPgXAAAAAAAA+BcAAAAAAAAgAAAAVmtEZXZpY2VBZGRyZXNzIGFkZHJlc3M7CgoKCiAgICA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD4FwAAAAAAABgYAAAAAAAAAAAAAAAAQkA"
				],
				[
					3,
					1,
					"paste",
					null,
					"AQAAAOUOAAAAAAAARw8AAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5Q4AAAAAAADlDgAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
					},
					"EwAAAOUOAAAAAAAA6Q4AAAAAAAAAAAAA6Q4AAAAAAADtDgAAAAAAAAAAAADtDgAAAAAAAPEOAAAAAAAAAAAAAPEOAAAAAAAA9Q4AAAAAAAAAAAAA9Q4AAAAAAAD5DgAAAAAAAAAAAAD5DgAAAAAAAP0OAAAAAAAAAAAAAP0OAAAAAAAAAQ8AAAAAAAAAAAAAAQ8AAAAAAAAFDwAAAAAAAAAAAAAFDwAAAAAAAAkPAAAAAAAAAAAAAAkPAAAAAAAADQ8AAAAAAAAAAAAADQ8AAAAAAAARDwAAAAAAAAAAAAARDwAAAAAAABUPAAAAAAAAAAAAABUPAAAAAAAAGQ8AAAAAAAAAAAAAGQ8AAAAAAAAdDwAAAAAAAAAAAAAdDwAAAAAAACEPAAAAAAAAAAAAACEPAAAAAAAAJQ8AAAAAAAAAAAAAJQ8AAAAAAAApDwAAAAAAAAAAAAApDwAAAAAAAC0PAAAAAAAAAAAAAC0PAAAAAAAAMQ8AAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5Q4AAAAAAADlDgAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					6,
					"left_delete",
					null,
					"BgAAAC0PAAAAAAAALQ8AAAAAAAAEAAAAICAgICkPAAAAAAAAKQ8AAAAAAAAEAAAAICAgICUPAAAAAAAAJQ8AAAAAAAAEAAAAICAgICEPAAAAAAAAIQ8AAAAAAAAEAAAAICAgIB0PAAAAAAAAHQ8AAAAAAAAEAAAAICAgIBkPAAAAAAAAGQ8AAAAAAAAEAAAAICAgIA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMQ8AAAAAAAAxDwAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"left_delete",
					null,
					"AQAAAOUOAAAAAAAA5Q4AAAAAAACXAAAAICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZLX0JVRkZFUl9VU0FHRV9BQ0NFTEVSQVRJT05fU1RSVUNUVVJFX1NUT1JBR0VfQklUX0tIUiB8IFZLX0JVRkZFUl9VU0FHRV9TSEFERVJfREVWSUNFX0FERFJFU1NfQklUCg",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfA8AAAAAAADlDgAAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAOUOAAAAAAAA5g4AAAAAAAAAAAAA5g4AAAAAAADnDgAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOUOAAAAAAAA5Q4AAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"reindent",
					null,
					"AQAAAOYOAAAAAAAA6g4AAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOYOAAAAAAAA5g4AAAAAAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "sew"
					},
					"AwAAAOoOAAAAAAAA6w4AAAAAAAAAAAAA6w4AAAAAAADsDgAAAAAAAAAAAADsDgAAAAAAAO0OAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOoOAAAAAAAA6g4AAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"left_delete",
					null,
					"AQAAAOwOAAAAAAAA7A4AAAAAAAABAAAAdw",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO0OAAAAAAAA7Q4AAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "et"
					},
					"AgAAAOwOAAAAAAAA7Q4AAAAAAAAAAAAA7Q4AAAAAAADuDgAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOwOAAAAAAAA7A4AAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					2,
					"left_delete",
					null,
					"AgAAAO0OAAAAAAAA7Q4AAAAAAAABAAAAdOwOAAAAAAAA7A4AAAAAAAABAAAAZQ",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO4OAAAAAAAA7g4AAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAOwOAAAAAAAA7Q4AAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOwOAAAAAAAA7A4AAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"insert_completion",
					{
						"completion": "setBit",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "setBit"
					},
					"AgAAAOoOAAAAAAAA6g4AAAAAAAADAAAAc2V06g4AAAAAAADwDgAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO0OAAAAAAAA7Q4AAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPAOAAAAAAAA8g4AAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPAOAAAAAAAA8A4AAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "BI"
					},
					"AgAAAPEOAAAAAAAA8g4AAAAAAAAAAAAA8g4AAAAAAADzDgAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPEOAAAAAAAA8Q4AAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					1,
					"left_delete",
					null,
					"AQAAAPIOAAAAAAAA8g4AAAAAAAABAAAASQ",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPMOAAAAAAAA8w4AAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AQAAAPIOAAAAAAAA8w4AAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPIOAAAAAAAA8g4AAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"insert_completion",
					{
						"completion": "Buffer",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Buffer"
					},
					"AgAAAPEOAAAAAAAA8Q4AAAAAAAACAAAAQnXxDgAAAAAAAPcOAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPMOAAAAAAAA8w4AAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "::Bi"
					},
					"BAAAAPcOAAAAAAAA+A4AAAAAAAAAAAAA+A4AAAAAAAD5DgAAAAAAAAAAAAD5DgAAAAAAAPoOAAAAAAAAAAAAAPoOAAAAAAAA+w4AAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPcOAAAAAAAA9w4AAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"insert_completion",
					{
						"completion": "BindFlags",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "BindFlags"
					},
					"AgAAAPkOAAAAAAAA+Q4AAAAAAAACAAAAQmn5DgAAAAAAAAIPAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPsOAAAAAAAA+w4AAAAAAAAAAAAAAADwvw"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "::A"
					},
					"AwAAAAIPAAAAAAAAAw8AAAAAAAAAAAAAAw8AAAAAAAAEDwAAAAAAAAAAAAAEDwAAAAAAAAUPAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAIPAAAAAAAAAg8AAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					1,
					"insert_completion",
					{
						"completion": "AccelerationStructure",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "AccelerationStructure"
					},
					"AgAAAAQPAAAAAAAABA8AAAAAAAABAAAAQQQPAAAAAAAAGQ8AAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAUPAAAAAAAABQ8AAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "INput"
					},
					"BQAAABkPAAAAAAAAGg8AAAAAAAAAAAAAGg8AAAAAAAAbDwAAAAAAAAAAAAAbDwAAAAAAABwPAAAAAAAAAAAAABwPAAAAAAAAHQ8AAAAAAAAAAAAAHQ8AAAAAAAAeDwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABkPAAAAAAAAGQ8AAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"left_delete",
					null,
					"AQAAABoPAAAAAAAAGg8AAAAAAAABAAAATg",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABsPAAAAAAAAGw8AAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAABoPAAAAAAAAGw8AAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABoPAAAAAAAAGg8AAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAB4PAAAAAAAAHw8AAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB4PAAAAAAAAHg8AAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAB8PAAAAAAAAIA8AAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB8PAAAAAAAAHw8AAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"paste",
					null,
					"AQAAACAPAAAAAAAAZQ8AAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACAPAAAAAAAAIA8AAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					1,
					"left_delete",
					null,
					"AQAAAGQPAAAAAAAAZA8AAAAAAAABAAAALg",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGUPAAAAAAAAZQ8AAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAGUPAAAAAAAAZg8AAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGUPAAAAAAAAZQ8AAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": " |"
					},
					"AgAAABkLAAAAAAAAGgsAAAAAAAAAAAAAGgsAAAAAAAAbCwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABkLAAAAAAAAGQsAAAAAAAAAAAAAAADwvw"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABsLAAAAAAAAHAsAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABsLAAAAAAAAGwsAAAAAAAAAAAAAAADwvw"
				],
				[
					45,
					1,
					"paste",
					null,
					"AQAAABwLAAAAAAAAYAsAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABwLAAAAAAAAHAsAAAAAAAAAAAAAAADwvw"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": " |"
					},
					"AgAAAN8LAAAAAAAA4AsAAAAAAAAAAAAA4AsAAAAAAADhCwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8LAAAAAAAA3wsAAAAAAAAAAAAAAADwvw"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOELAAAAAAAA4gsAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOELAAAAAAAA4QsAAAAAAAAAAAAAAADwvw"
				],
				[
					50,
					1,
					"paste",
					null,
					"AQAAAOILAAAAAAAAJgwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOILAAAAAAAA4gsAAAAAAAAAAAAAAADwvw"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": " |"
					},
					"AgAAANIMAAAAAAAA0wwAAAAAAAAAAAAA0wwAAAAAAADUDAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANIMAAAAAAAA0gwAAAAAAAAAAAAAAADwvw"
				],
				[
					58,
					1,
					"paste",
					null,
					"AQAAANQMAAAAAAAA/QwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANQMAAAAAAAA1AwAAAAAAAAAAAAAAADwvw"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANQMAAAAAAAA1QwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANQMAAAAAAAA1AwAAAAAAAAAAAAAAADwvw"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "\nin"
					},
					"BAAAAAMZAAAAAAAABBkAAAAAAAAAAAAABBkAAAAAAAAIGQAAAAAAAAAAAAAIGQAAAAAAAAkZAAAAAAAAAAAAAAkZAAAAAAAAChkAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAMZAAAAAAAAAxkAAAAAAAAAAAAAAADwvw"
				],
				[
					65,
					1,
					"insert_completion",
					{
						"completion": "info",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "info"
					},
					"AgAAAAgZAAAAAAAACBkAAAAAAAACAAAAaW4IGQAAAAAAAAwZAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAoZAAAAAAAAChkAAAAAAAAAAAAAAADwvw"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": ".s"
					},
					"AgAAAAwZAAAAAAAADRkAAAAAAAAAAAAADRkAAAAAAAAOGQAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAwZAAAAAAAADBkAAAAAAAAAAAAAAADwvw"
				],
				[
					67,
					1,
					"insert_completion",
					{
						"completion": "sType",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "sType"
					},
					"AgAAAA0ZAAAAAAAADRkAAAAAAAABAAAAcw0ZAAAAAAAAEhkAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA4ZAAAAAAAADhkAAAAAAAAAAAAAAADwvw"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAABIZAAAAAAAAExkAAAAAAAAAAAAAExkAAAAAAAAUGQAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABIZAAAAAAAAEhkAAAAAAAAAAAAAAADwvw"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABQZAAAAAAAAFRkAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABQZAAAAAAAAFBkAAAAAAAAAAAAAAADwvw"
				],
				[
					70,
					1,
					"paste",
					null,
					"AQAAABUZAAAAAAAAQhkAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABUZAAAAAAAAFRkAAAAAAAAAAAAAAADwvw"
				],
				[
					71,
					1,
					"left_delete",
					null,
					"AQAAAEEZAAAAAAAAQRkAAAAAAAABAAAALg",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEIZAAAAAAAAQhkAAAAAAAAAAAAAAADwvw"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEEZAAAAAAAAQhkAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEEZAAAAAAAAQRkAAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAADYQAAAAAAAANxAAAAAAAAAAAAAANxAAAAAAAAA4EAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANhAAAAAAAAA2EAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAADcQAAAAAAAAOBAAAAAAAAAAAAAAOBAAAAAAAAA5EAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANxAAAAAAAAA3EAAAAAAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADkQAAAAAAAAOhAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAORAAAAAAAAA5EAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"paste",
					null,
					"AQAAADoQAAAAAAAA8xAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOhAAAAAAAAA6EAAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					4,
					"left_delete",
					null,
					"BAAAANUMAAAAAAAA1QwAAAAAAAApAAAAVktfQlVGRkVSX1VTQUdFX1NIQURFUl9ERVZJQ0VfQUREUkVTU19CSVTUDAAAAAAAANQMAAAAAAAAAQAAACDTDAAAAAAAANMMAAAAAAAAAQAAAHzSDAAAAAAAANIMAAAAAAAAAQAAACA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1QwAAAAAAAD+DAAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": " |"
					},
					"AgAAANIMAAAAAAAA0wwAAAAAAAAAAAAA0wwAAAAAAADUDAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0gwAAAAAAADSDAAAAAAAAAAAAAAAAPC/"
				],
				[
					141,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANQMAAAAAAAA1QwAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1AwAAAAAAADUDAAAAAAAAAAAAAAAAPC/"
				],
				[
					142,
					1,
					"paste",
					null,
					"AQAAANUMAAAAAAAA/gwAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1QwAAAAAAADVDAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPAOAAAAAAAA8Q4AAAAAAAAAAAAA8Q4AAAAAAAD1DgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPAOAAAAAAAA8A4AAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"paste",
					null,
					"AQAAAPUOAAAAAAAAig8AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPUOAAAAAAAA9Q4AAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "Scratch"
					},
					"BwAAACQPAAAAAAAAJQ8AAAAAAAAAAAAAJQ8AAAAAAAAmDwAAAAAAAAAAAAAmDwAAAAAAACcPAAAAAAAAAAAAACcPAAAAAAAAKA8AAAAAAAAAAAAAKA8AAAAAAAApDwAAAAAAAAAAAAApDwAAAAAAACoPAAAAAAAAAAAAACoPAAAAAAAAKw8AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACQPAAAAAAAAJA8AAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"paste",
					null,
					"AgAAAC0PAAAAAAAAfw8AAAAAAAAAAAAAfw8AAAAAAAB/DwAAAAAAAGIAAABWS19CVUZGRVJfVVNBR0VfQUNDRUxFUkFUSU9OX1NUUlVDVFVSRV9TVE9SQUdFX0JJVF9LSFIgfCBWS19CVUZGRVJfVVNBR0VfU0hBREVSX0RFVklDRV9BRERSRVNTX0JJVA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC0PAAAAAAAAjw8AAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAACkMAAAAAAAAKgwAAAAAAAAAAAAAKgwAAAAAAAArDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACkMAAAAAAAAKQwAAAAAAAAAAAAAAADwvw"
				],
				[
					38,
					1,
					"reindent",
					null,
					"AQAAACoMAAAAAAAALgwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACoMAAAAAAAAKgwAAAAAAAAAAAAAAAAAAA"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "set"
					},
					"AwAAAC4MAAAAAAAALwwAAAAAAAAAAAAALwwAAAAAAAAwDAAAAAAAAAAAAAAwDAAAAAAAADEMAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC4MAAAAAAAALgwAAAAAAAAAAAAAAADwvw"
				],
				[
					40,
					1,
					"insert_completion",
					{
						"completion": "setBit",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "setBit"
					},
					"AgAAAC4MAAAAAAAALgwAAAAAAAADAAAAc2V0LgwAAAAAAAA0DAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADEMAAAAAAAAMQwAAAAAAAAAAAAAAADwvw"
				],
				[
					41,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADQMAAAAAAAANgwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADQMAAAAAAAANAwAAAAAAAAAAAAAAADwvw"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "Bu"
					},
					"AgAAADUMAAAAAAAANgwAAAAAAAAAAAAANgwAAAAAAAA3DAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADUMAAAAAAAANQwAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"insert_completion",
					{
						"completion": "Buffer",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Buffer"
					},
					"AgAAADUMAAAAAAAANQwAAAAAAAACAAAAQnU1DAAAAAAAADsMAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADcMAAAAAAAANwwAAAAAAAAAAAAAAADwvw"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "\""
					},
					"AQAAADsMAAAAAAAAPAwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADsMAAAAAAAAOwwAAAAAAAAAAAAAAADwvw"
				],
				[
					45,
					1,
					"left_delete",
					null,
					"AQAAADsMAAAAAAAAOwwAAAAAAAABAAAAIg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADwMAAAAAAAAPAwAAAAAAAAAAAAAAADwvw"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "::Bi"
					},
					"BAAAADsMAAAAAAAAPAwAAAAAAAAAAAAAPAwAAAAAAAA9DAAAAAAAAAAAAAA9DAAAAAAAAD4MAAAAAAAAAAAAAD4MAAAAAAAAPwwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADsMAAAAAAAAOwwAAAAAAAAAAAAAAADwvw"
				],
				[
					47,
					1,
					"insert_completion",
					{
						"completion": "BindFlags",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "BindFlags"
					},
					"AgAAAD0MAAAAAAAAPQwAAAAAAAACAAAAQmk9DAAAAAAAAEYMAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD8MAAAAAAAAPwwAAAAAAAAAAAAAAADwvw"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "::I"
					},
					"AwAAAEYMAAAAAAAARwwAAAAAAAAAAAAARwwAAAAAAABIDAAAAAAAAAAAAABIDAAAAAAAAEkMAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEYMAAAAAAAARgwAAAAAAAAAAAAAAADwvw"
				],
				[
					50,
					1,
					"insert_completion",
					{
						"completion": "Index",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Index"
					},
					"AgAAAEgMAAAAAAAASAwAAAAAAAABAAAASUgMAAAAAAAATQwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEkMAAAAAAAASQwAAAAAAAAAAAAAAADwvw"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAE0MAAAAAAAATgwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE0MAAAAAAAATQwAAAAAAAAAAAAAAADwvw"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAE4MAAAAAAAATwwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE4MAAAAAAAATgwAAAAAAAAAAAAAAADwvw"
				],
				[
					53,
					1,
					"paste",
					null,
					"AQAAAE8MAAAAAAAA5AwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE8MAAAAAAAATwwAAAAAAAAAAAAAAADwvw"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOUMAAAAAAAA5gwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOUMAAAAAAAA5QwAAAAAAAAAAAAAAADwvw"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAGYLAAAAAAAAZwsAAAAAAAAAAAAAZwsAAAAAAABoCwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGYLAAAAAAAAZgsAAAAAAAAAAAAAAADwvw"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACsMAAAAAAAALAwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACsMAAAAAAAAKwwAAAAAAAAAAAAAAAAAAA"
				],
				[
					67,
					1,
					"reindent",
					null,
					"AQAAACwMAAAAAAAAMAwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACwMAAAAAAAALAwAAAAAAAAAAAAAAADwvw"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "set"
					},
					"AwAAADAMAAAAAAAAMQwAAAAAAAAAAAAAMQwAAAAAAAAyDAAAAAAAAAAAAAAyDAAAAAAAADMMAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADAMAAAAAAAAMAwAAAAAAAAAAAAAAADwvw"
				],
				[
					69,
					1,
					"insert_completion",
					{
						"completion": "setBit",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "setBit"
					},
					"AgAAADAMAAAAAAAAMAwAAAAAAAADAAAAc2V0MAwAAAAAAAA2DAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADMMAAAAAAAAMwwAAAAAAAAAAAAAAADwvw"
				],
				[
					70,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADYMAAAAAAAAOAwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADYMAAAAAAAANgwAAAAAAAAAAAAAAADwvw"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "Bu"
					},
					"AgAAADcMAAAAAAAAOAwAAAAAAAAAAAAAOAwAAAAAAAA5DAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADcMAAAAAAAANwwAAAAAAAAAAAAAAADwvw"
				],
				[
					72,
					1,
					"insert_completion",
					{
						"completion": "Buffer",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Buffer"
					},
					"AgAAADcMAAAAAAAANwwAAAAAAAACAAAAQnU3DAAAAAAAAD0MAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADkMAAAAAAAAOQwAAAAAAAAAAAAAAADwvw"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "\"\"Bi"
					},
					"BAAAAD0MAAAAAAAAPgwAAAAAAAAAAAAAPgwAAAAAAAA/DAAAAAAAAAAAAAA/DAAAAAAAAEAMAAAAAAAAAAAAAEAMAAAAAAAAQQwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD0MAAAAAAAAPQwAAAAAAAAAAAAAAADwvw"
				],
				[
					74,
					1,
					"insert_completion",
					{
						"completion": "bIu",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "bIu"
					},
					"AgAAAD8MAAAAAAAAPwwAAAAAAAACAAAAQmk/DAAAAAAAAEIMAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEEMAAAAAAAAQQwAAAAAAAAAAAAAAADwvw"
				],
				[
					75,
					5,
					"left_delete",
					null,
					"BQAAAEEMAAAAAAAAQQwAAAAAAAABAAAAdUAMAAAAAAAAQAwAAAAAAAABAAAAST8MAAAAAAAAPwwAAAAAAAABAAAAYj4MAAAAAAAAPgwAAAAAAAABAAAAIj0MAAAAAAAAPQwAAAAAAAABAAAAIg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEIMAAAAAAAAQgwAAAAAAAAAAAAAAADwvw"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "::Bi"
					},
					"BAAAAD0MAAAAAAAAPgwAAAAAAAAAAAAAPgwAAAAAAAA/DAAAAAAAAAAAAAA/DAAAAAAAAEAMAAAAAAAAAAAAAEAMAAAAAAAAQQwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD0MAAAAAAAAPQwAAAAAAAAAAAAAAADwvw"
				],
				[
					77,
					1,
					"insert_completion",
					{
						"completion": "BindFlags",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "BindFlags"
					},
					"AgAAAD8MAAAAAAAAPwwAAAAAAAACAAAAQmk/DAAAAAAAAEgMAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEEMAAAAAAAAQQwAAAAAAAAAAAAAAADwvw"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "::Ver"
					},
					"BQAAAEgMAAAAAAAASQwAAAAAAAAAAAAASQwAAAAAAABKDAAAAAAAAAAAAABKDAAAAAAAAEsMAAAAAAAAAAAAAEsMAAAAAAAATAwAAAAAAAAAAAAATAwAAAAAAABNDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEgMAAAAAAAASAwAAAAAAAAAAAAAAADwvw"
				],
				[
					79,
					1,
					"insert_completion",
					{
						"completion": "Vertex",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Vertex"
					},
					"AgAAAEoMAAAAAAAASgwAAAAAAAADAAAAVmVySgwAAAAAAABQDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE0MAAAAAAAATQwAAAAAAAAAAAAAAADwvw"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAFAMAAAAAAAAUQwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFAMAAAAAAAAUAwAAAAAAAAAAAAAAADwvw"
				],
				[
					81,
					1,
					"paste",
					null,
					"AQAAAFEMAAAAAAAA5gwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFEMAAAAAAAAUQwAAAAAAAAAAAAAAADwvw"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOcMAAAAAAAA6AwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOcMAAAAAAAA5wwAAAAAAAAAAAAAAADwvw"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAJ8KAAAAAAAAoAoAAAAAAAAAAAAAoAoAAAAAAAChCgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ8KAAAAAAAAnwoAAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAADESAAAAAAAAMhIAAAAAAAAAAAAAMhIAAAAAAAAzEgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAxEgAAAAAAADESAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"reindent",
					null,
					"AQAAADISAAAAAAAANhIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAyEgAAAAAAADISAAAAAAAAAAAAAAAAAAA"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "set"
					},
					"AwAAADYSAAAAAAAANxIAAAAAAAAAAAAANxIAAAAAAAA4EgAAAAAAAAAAAAA4EgAAAAAAADkSAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2EgAAAAAAADYSAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert_completion",
					{
						"completion": "setBit",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "setBit"
					},
					"AgAAADYSAAAAAAAANhIAAAAAAAADAAAAc2V0NhIAAAAAAAA8EgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5EgAAAAAAADkSAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAADwSAAAAAAAAPRIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA8EgAAAAAAADwSAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"left_delete",
					null,
					"AQAAADwSAAAAAAAAPBIAAAAAAAABAAAAKQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA9EgAAAAAAAD0SAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADwSAAAAAAAAPhIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA8EgAAAAAAADwSAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "B"
					},
					"AQAAAD0SAAAAAAAAPhIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA9EgAAAAAAAD0SAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"insert_completion",
					{
						"completion": "Buffer",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Buffer"
					},
					"AgAAAD0SAAAAAAAAPRIAAAAAAAABAAAAQj0SAAAAAAAAQxIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA+EgAAAAAAAD4SAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "\"\""
					},
					"AgAAAEMSAAAAAAAARBIAAAAAAAAAAAAARBIAAAAAAABFEgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABDEgAAAAAAAEMSAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					2,
					"left_delete",
					null,
					"AgAAAEQSAAAAAAAARBIAAAAAAAABAAAAIkMSAAAAAAAAQxIAAAAAAAABAAAAIg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABFEgAAAAAAAEUSAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "::B"
					},
					"AwAAAEMSAAAAAAAARBIAAAAAAAAAAAAARBIAAAAAAABFEgAAAAAAAAAAAABFEgAAAAAAAEYSAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABDEgAAAAAAAEMSAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"insert_completion",
					{
						"completion": "BindFlags",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "BindFlags"
					},
					"AgAAAEUSAAAAAAAARRIAAAAAAAABAAAAQkUSAAAAAAAAThIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABGEgAAAAAAAEYSAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "::"
					},
					"AgAAAE4SAAAAAAAATxIAAAAAAAAAAAAATxIAAAAAAABQEgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABOEgAAAAAAAE4SAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "Sha"
					},
					"AwAAAFASAAAAAAAAURIAAAAAAAAAAAAAURIAAAAAAABSEgAAAAAAAAAAAABSEgAAAAAAAFMSAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABQEgAAAAAAAFASAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "der"
					},
					"AwAAAFMSAAAAAAAAVBIAAAAAAAAAAAAAVBIAAAAAAABVEgAAAAAAAAAAAABVEgAAAAAAAFYSAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABTEgAAAAAAAFMSAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "BindingT"
					},
					"CAAAAFYSAAAAAAAAVxIAAAAAAAAAAAAAVxIAAAAAAABYEgAAAAAAAAAAAABYEgAAAAAAAFkSAAAAAAAAAAAAAFkSAAAAAAAAWhIAAAAAAAAAAAAAWhIAAAAAAABbEgAAAAAAAAAAAABbEgAAAAAAAFwSAAAAAAAAAAAAAFwSAAAAAAAAXRIAAAAAAAAAAAAAXRIAAAAAAABeEgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABWEgAAAAAAAFYSAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "abel"
					},
					"BAAAAF4SAAAAAAAAXxIAAAAAAAAAAAAAXxIAAAAAAABgEgAAAAAAAAAAAABgEgAAAAAAAGESAAAAAAAAAAAAAGESAAAAAAAAYhIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeEgAAAAAAAF4SAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					2,
					"left_delete",
					null,
					"AgAAAGESAAAAAAAAYRIAAAAAAAABAAAAbGASAAAAAAAAYBIAAAAAAAABAAAAZQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABiEgAAAAAAAGISAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "le,"
					},
					"AwAAAGASAAAAAAAAYRIAAAAAAAAAAAAAYRIAAAAAAABiEgAAAAAAAAAAAABiEgAAAAAAAGMSAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABgEgAAAAAAAGASAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGMSAAAAAAAAZBIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjEgAAAAAAAGMSAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"paste",
					null,
					"AQAAAGQSAAAAAAAAkBIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABkEgAAAAAAAGQSAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJESAAAAAAAAkhIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACREgAAAAAAAJESAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAADYSAAAAAAAANxIAAAAAAAAAAAAANxIAAAAAAAA4EgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2EgAAAAAAADYSAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKResourceViews.cpp",
			"settings":
			{
				"buffer_size": 15456,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					9,
					4,
					"right_delete",
					null,
					"BAAAAM8sAAAAAAAAzywAAAAAAAABAAAAO88sAAAAAAAAzywAAAAAAAABAAAAL88sAAAAAAAAzywAAAAAAAABAAAAL88sAAAAAAAAzywAAAAAAAABAAAAIA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzywAAAAAAADPLAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAM8sAAAAAAAA0CwAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzywAAAAAAADPLAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": ";//"
					},
					"AwAAAM8sAAAAAAAA0CwAAAAAAAAAAAAA0CwAAAAAAADRLAAAAAAAAAAAAADRLAAAAAAAANIsAAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzywAAAAAAADPLAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/DescriptorSet.cpp",
			"settings":
			{
				"buffer_size": 2808,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Device.h",
			"settings":
			{
				"buffer_size": 14936,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					14,
					1,
					"paste",
					null,
					"AQAAAAE1AAAAAAAATTUAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABNQAAAAAAAAE1AAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"right_delete",
					null,
					"AQAAAAA1AAAAAAAAADUAAAAAAAABAAAAew",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAANQAAAAAAAAA1AAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAA1AAAAAAAAATUAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAANQAAAAAAAAA1AAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"left_delete",
					null,
					"AQAAAE01AAAAAAAATTUAAAAAAAACAAAAfTs",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNNQAAAAAAAE81AAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAEE0AAAAAAAAQjQAAAAAAAAAAAAAQjQAAAAAAABCNAAAAAAAAAMAAAB7fTs",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABBNAAAAAAAAEQ0AAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"paste",
					null,
					"AQAAAEI0AAAAAAAAjTQAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABCNAAAAAAAAEI0AAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADEzAAAAAAAAMjMAAAAAAAAAAAAAMjMAAAAAAAA2MwAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAxMwAAAAAAADEzAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"paste",
					null,
					"AQAAADYzAAAAAAAAmjMAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2MwAAAAAAADYzAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "\t\t\t\t\t\t\t"
					},
					"BwAAAFAzAAAAAAAAUjMAAAAAAAAAAAAAUjMAAAAAAABWMwAAAAAAAAAAAABWMwAAAAAAAFozAAAAAAAAAAAAAFozAAAAAAAAXjMAAAAAAAAAAAAAXjMAAAAAAABiMwAAAAAAAAAAAABiMwAAAAAAAGYzAAAAAAAAAAAAAGYzAAAAAAAAajMAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABQMwAAAAAAAFAzAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "mP"
					},
					"AgAAAGozAAAAAAAAazMAAAAAAAAAAAAAazMAAAAAAABsMwAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqMwAAAAAAAGozAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"right_delete",
					null,
					"AQAAAGwzAAAAAAAAbDMAAAAAAAABAAAAcA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABsMwAAAAAAAGwzAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGo0AAAAAAAAazQAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqNAAAAAAAAGo0AAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"reindent",
					null,
					"AQAAAGs0AAAAAAAAbzQAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrNAAAAAAAAGs0AAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"paste",
					null,
					"AQAAAG80AAAAAAAAAzUAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABvNAAAAAAAAG80AAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "\t\t\tm"
					},
					"BAAAAJk0AAAAAAAAmzQAAAAAAAAAAAAAmzQAAAAAAACfNAAAAAAAAAAAAACfNAAAAAAAAKM0AAAAAAAAAAAAAKM0AAAAAAAApDQAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZNAAAAAAAAJk0AAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "Enabled"
					},
					"BwAAAKQ0AAAAAAAApTQAAAAAAAAAAAAApTQAAAAAAACmNAAAAAAAAAAAAACmNAAAAAAAAKc0AAAAAAAAAAAAAKc0AAAAAAAAqDQAAAAAAAAAAAAAqDQAAAAAAACpNAAAAAAAAAAAAACpNAAAAAAAAKo0AAAAAAAAAAAAAKo0AAAAAAAAqzQAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACkNAAAAAAAAKQ0AAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "P"
					},
					"AQAAAKs0AAAAAAAArDQAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACrNAAAAAAAAKs0AAAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					1,
					"right_delete",
					null,
					"AQAAAKw0AAAAAAAArDQAAAAAAAABAAAAcA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsNAAAAAAAAKw0AAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					8,
					"right_delete",
					null,
					"CAAAAKs0AAAAAAAAqzQAAAAAAAABAAAAUKs0AAAAAAAAqzQAAAAAAAABAAAAaKs0AAAAAAAAqzQAAAAAAAABAAAAeas0AAAAAAAAqzQAAAAAAAABAAAAc6s0AAAAAAAAqzQAAAAAAAABAAAAaas0AAAAAAAAqzQAAAAAAAABAAAAY6s0AAAAAAAAqzQAAAAAAAABAAAAYas0AAAAAAAAqzQAAAAAAAABAAAAbA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACrNAAAAAAAAKs0AAAAAAAAAAAAAAAA8L8"
				],
				[
					67,
					1,
					"left_delete",
					null,
					"AQAAAA80AAAAAAAADzQAAAAAAABbAAAAICAgIFZrUGh5c2ljYWxEZXZpY2VBY2NlbGVyYXRpb25TdHJ1Y3R1cmVGZWF0dXJlc0tIUiAgICBtQWFjY2VsZXJhdGlvblN0cnVjdHVyZUZlYXR1cmVze307Cg",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPNAAAAAAAAGo0AAAAAAAAAAAAAAAA8L8"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALc1AAAAAAAAuDUAAAAAAAAAAAAAuDUAAAAAAAC8NQAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3NQAAAAAAALc1AAAAAAAAAAAAAAAA8L8"
				],
				[
					90,
					1,
					"paste",
					null,
					"AQAAALw1AAAAAAAAUDYAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8NQAAAAAAALw1AAAAAAAAAAAAAAAA8L8"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": "\t\t\tmE"
					},
					"BQAAAOY1AAAAAAAA6DUAAAAAAAAAAAAA6DUAAAAAAADsNQAAAAAAAAAAAADsNQAAAAAAAPA1AAAAAAAAAAAAAPA1AAAAAAAA8TUAAAAAAAAAAAAA8TUAAAAAAADyNQAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmNQAAAAAAAOY1AAAAAAAAAAAAAAAA8L8"
				],
				[
					94,
					12,
					"right_delete",
					null,
					"DAAAAPI1AAAAAAAA8jUAAAAAAAABAAAAcPI1AAAAAAAA8jUAAAAAAAABAAAAaPI1AAAAAAAA8jUAAAAAAAABAAAAefI1AAAAAAAA8jUAAAAAAAABAAAAc/I1AAAAAAAA8jUAAAAAAAABAAAAafI1AAAAAAAA8jUAAAAAAAABAAAAY/I1AAAAAAAA8jUAAAAAAAABAAAAYfI1AAAAAAAA8jUAAAAAAAABAAAAbPI1AAAAAAAA8jUAAAAAAAABAAAARPI1AAAAAAAA8jUAAAAAAAABAAAAZfI1AAAAAAAA8jUAAAAAAAABAAAAdvI1AAAAAAAA8jUAAAAAAAABAAAAaQ",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADyNQAAAAAAAPI1AAAAAAAAAAAAAAAA8L8"
				],
				[
					95,
					2,
					"right_delete",
					null,
					"AgAAAPI1AAAAAAAA8jUAAAAAAAABAAAAY/I1AAAAAAAA8jUAAAAAAAABAAAAZQ",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADyNQAAAAAAAPI1AAAAAAAAAAAAAAAA8L8"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": "nabled"
					},
					"BgAAAPI1AAAAAAAA8zUAAAAAAAAAAAAA8zUAAAAAAAD0NQAAAAAAAAAAAAD0NQAAAAAAAPU1AAAAAAAAAAAAAPU1AAAAAAAA9jUAAAAAAAAAAAAA9jUAAAAAAAD3NQAAAAAAAAAAAAD3NQAAAAAAAPg1AAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADyNQAAAAAAAPI1AAAAAAAAAAAAAAAA8L8"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAALQ1AAAAAAAAtTUAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC0NQAAAAAAALQ1AAAAAAAAAAAAAAAA8L8"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALU1AAAAAAAAtjUAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1NQAAAAAAALU1AAAAAAAAAAAAAAAA8L8"
				],
				[
					112,
					1,
					"paste",
					null,
					"AQAAALc1AAAAAAAA+jUAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3NQAAAAAAALc1AAAAAAAAAAAAAAAA8L8"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPo1AAAAAAAA+zUAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6NQAAAAAAAPo1AAAAAAAAAAAAAAAA8L8"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALc1AAAAAAAAuDUAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3NQAAAAAAALc1AAAAAAAAAAAAAAAA8L8"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALQ1AAAAAAAAtTUAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC0NQAAAAAAALQ1AAAAAAAAAAAAAAAA8L8"
				],
				[
					136,
					3,
					"left_delete",
					null,
					"AwAAAOkyAAAAAAAA6TIAAAAAAABeBAAAICAgIFZrUGh5c2ljYWxEZXZpY2VGZWF0dXJlcyAgICAgICAgICAgICAgICAgICAgICAgICAgICBtRGV2aWNlRmVhdHVyZXM7CiAgICBWa1BoeXNpY2FsRGV2aWNlRmVhdHVyZXMyICAgICAgICAgICAgICAgICAgICAgICAgICAgbVBoeXNpY2FsRGV2aWNlRmVhdHVyZXMgPSB7IFZLX1NUUlVDVFVSRV9UWVBFX1BIWVNJQ0FMX0RFVklDRV9GRUFUVVJFU18yIH07CiAgICBWa1BoeXNpY2FsRGV2aWNlUmF5VHJhY2luZ1BpcGVsaW5lUHJvcGVydGllc0tIUiAgICAgbVJheVRyYWNpbmdQaXBlbGluZVByb3BlcnRpZXN7fTsKCiAgICBWa1BoeXNpY2FsRGV2aWNlQ29oZXJlbnRNZW1vcnlGZWF0dXJlc0FNRCAgICAgICAgICAgbUVuYWJsZWREZXZpY2VDb2hlcmVudE1lbW9yeUZlYXR1cmVzID0geyBWS19TVFJVQ1RVUkVfVFlQRV9QSFlTSUNBTF9ERVZJQ0VfQ09IRVJFTlRfTUVNT1JZX0ZFQVRVUkVTX0FNRCB9OwogICAgVmtQaHlzaWNhbERldmljZUJ1ZmZlckRldmljZUFkZHJlc3NGZWF0dXJlcyAgICAgICAgIG1FbmFibGVkQnVmZmVyRGV2aWNlQWRkcmVzRmVhdHVyZXMgPSB7IFZLX1NUUlVDVFVSRV9UWVBFX1BIWVNJQ0FMX0RFVklDRV9CVUZGRVJfREVWSUNFX0FERFJFU1NfRkVBVFVSRVNfS0hSIH07CiAgICBWa1BoeXNpY2FsRGV2aWNlUmF5VHJhY2luZ1BpcGVsaW5lRmVhdHVyZXNLSFIgICAgICAgbUVuYWJsZWRSYXlUcmFjaW5nUGlwZWxpbmVGZWF0dXJlcyA9IHsgVktfU1RSVUNUVVJFX1RZUEVfUEhZU0lDQUxfREVWSUNFX1JBWV9UUkFDSU5HX1BJUEVMSU5FX0ZFQVRVUkVTX0tIUiB9OwogICAgVmtQaHlzaWNhbERldmljZU1lbW9yeVByaW9yaXR5RmVhdHVyZXNFWFQgICAgICAgICAgIG1FbmFibGVkTWVtb3J5UHJpb3JpdHlGZWF0dXJlcyA9IHsgVktfU1RSVUNUVVJFX1RZUEVfUEhZU0lDQUxfREVWSUNFX01FTU9SWV9QUklPUklUWV9GRUFUVVJFU19FWFQgfTsKICAgIFZrUGh5c2ljYWxEZXZpY2VBY2NlbGVyYXRpb25TdHJ1Y3R1cmVGZWF0dXJlc0tIUiAgICBtRW5hYmxlZEFjY2VsZXJhdGlvblN0cnVjdHVyZUZlYXR1cmVzID0geyBWS19TVFJVQ1RVUkVfVFlQRV9QSFlTSUNBTF9ERVZJQ0VfQUNDRUxFUkFUSU9OX1NUUlVDVFVSRV9GRUFUVVJFU19LSFIgfTvoMgAAAAAAAOgyAAAAAAAAAQAAAArnMgAAAAAAAOcyAAAAAAAAAQAAAAo",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABHNwAAAAAAAOkyAAAAAAAAAAAAAAAA8L8"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAEszAAAAAAAATDMAAAAAAAAAAAAATDMAAAAAAABNMwAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABLMwAAAAAAAEszAAAAAAAAAAAAAAAA8L8"
				],
				[
					141,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEwzAAAAAAAATTMAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMMwAAAAAAAEwzAAAAAAAAAAAAAAAAAAA"
				],
				[
					143,
					1,
					"insert",
					{
						"characters": " publ"
					},
					"BQAAAEwzAAAAAAAATTMAAAAAAAAAAAAATTMAAAAAAABOMwAAAAAAAAAAAABOMwAAAAAAAE8zAAAAAAAAAAAAAE8zAAAAAAAAUDMAAAAAAAAAAAAAUDMAAAAAAABRMwAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMMwAAAAAAAEwzAAAAAAAAAAAAAAAAAAA"
				],
				[
					144,
					1,
					"insert_completion",
					{
						"completion": "public",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "public"
					},
					"AgAAAE0zAAAAAAAATTMAAAAAAAAEAAAAcHVibE0zAAAAAAAAUzMAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABRMwAAAAAAAFEzAAAAAAAAAAAAAAAA8L8"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFMzAAAAAAAAVDMAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABTMwAAAAAAAFMzAAAAAAAAAAAAAAAA8L8"
				],
				[
					146,
					1,
					"left_delete",
					null,
					"AQAAAFMzAAAAAAAAUzMAAAAAAAABAAAAOw",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABUMwAAAAAAAFQzAAAAAAAAAAAAAAAA8L8"
				],
				[
					147,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAFMzAAAAAAAAVDMAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABTMwAAAAAAAFMzAAAAAAAAAAAAAAAA8L8"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAFQzAAAAAAAAVTMAAAAAAAAAAAAAVTMAAAAAAABWMwAAAAAAAAAAAABWMwAAAAAAAFkzAAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABUMwAAAAAAAFQzAAAAAAAAAAAAAAAA8L8"
				],
				[
					149,
					1,
					"paste",
					null,
					"AQAAAFkzAAAAAAAAtzcAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABZMwAAAAAAAFkzAAAAAAAAAAAAAAAA8L8"
				],
				[
					152,
					1,
					"left_delete",
					null,
					"AQAAAFkzAAAAAAAAWTMAAAAAAAAEAAAAICAgIA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABdMwAAAAAAAF0zAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"reindent",
					null,
					"AQAAALQ3AAAAAAAAuDcAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALQ3AAAAAAAAtDcAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"paste",
					null,
					"AQAAALg3AAAAAAAA4zcAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALg3AAAAAAAAuDcAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "          "
					},
					"CgAAAOM3AAAAAAAA5DcAAAAAAAAAAAAA5DcAAAAAAADlNwAAAAAAAAAAAADlNwAAAAAAAOY3AAAAAAAAAAAAAOY3AAAAAAAA5zcAAAAAAAAAAAAA5zcAAAAAAADoNwAAAAAAAAAAAADoNwAAAAAAAOk3AAAAAAAAAAAAAOk3AAAAAAAA6jcAAAAAAAAAAAAA6jcAAAAAAADrNwAAAAAAAAAAAADrNwAAAAAAAOw3AAAAAAAAAAAAAOw3AAAAAAAA7TcAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOM3AAAAAAAA4zcAAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"left_delete",
					null,
					"AQAAAOw3AAAAAAAA7DcAAAAAAAABAAAAIA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO03AAAAAAAA7TcAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "mEn"
					},
					"AwAAAOw3AAAAAAAA7TcAAAAAAAAAAAAA7TcAAAAAAADuNwAAAAAAAAAAAADuNwAAAAAAAO83AAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOw3AAAAAAAA7DcAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "abled"
					},
					"BQAAAO83AAAAAAAA8DcAAAAAAAAAAAAA8DcAAAAAAADxNwAAAAAAAAAAAADxNwAAAAAAAPI3AAAAAAAAAAAAAPI3AAAAAAAA8zcAAAAAAAAAAAAA8zcAAAAAAAD0NwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO83AAAAAAAA7zcAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "Synchroni"
					},
					"CQAAAPQ3AAAAAAAA9TcAAAAAAAAAAAAA9TcAAAAAAAD2NwAAAAAAAAAAAAD2NwAAAAAAAPc3AAAAAAAAAAAAAPc3AAAAAAAA+DcAAAAAAAAAAAAA+DcAAAAAAAD5NwAAAAAAAAAAAAD5NwAAAAAAAPo3AAAAAAAAAAAAAPo3AAAAAAAA+zcAAAAAAAAAAAAA+zcAAAAAAAD8NwAAAAAAAAAAAAD8NwAAAAAAAP03AAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPQ3AAAAAAAA9DcAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "zation2"
					},
					"BwAAAP03AAAAAAAA/jcAAAAAAAAAAAAA/jcAAAAAAAD/NwAAAAAAAAAAAAD/NwAAAAAAAAA4AAAAAAAAAAAAAAA4AAAAAAAAATgAAAAAAAAAAAAAATgAAAAAAAACOAAAAAAAAAAAAAACOAAAAAAAAAM4AAAAAAAAAAAAAAM4AAAAAAAABDgAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP03AAAAAAAA/TcAAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "Featurtes"
					},
					"CQAAAAQ4AAAAAAAABTgAAAAAAAAAAAAABTgAAAAAAAAGOAAAAAAAAAAAAAAGOAAAAAAAAAc4AAAAAAAAAAAAAAc4AAAAAAAACDgAAAAAAAAAAAAACDgAAAAAAAAJOAAAAAAAAAAAAAAJOAAAAAAAAAo4AAAAAAAAAAAAAAo4AAAAAAAACzgAAAAAAAAAAAAACzgAAAAAAAAMOAAAAAAAAAAAAAAMOAAAAAAAAA04AAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAQ4AAAAAAAABDgAAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAA04AAAAAAAADjgAAAAAAAAAAAAADjgAAAAAAAAPOAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA04AAAAAAAADTgAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAA84AAAAAAAAEDgAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA84AAAAAAAADzgAAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAABA4AAAAAAAAEjgAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABA4AAAAAAAAEDgAAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAABI4AAAAAAAAFDgAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABI4AAAAAAAAEjgAAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					2,
					"left_delete",
					null,
					"AgAAABM4AAAAAAAAEzgAAAAAAAABAAAAJxI4AAAAAAAAEjgAAAAAAAABAAAAJw",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABQ4AAAAAAAAFDgAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABI4AAAAAAAAEzgAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABI4AAAAAAAAEjgAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABE4AAAAAAAAEjgAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABE4AAAAAAAAETgAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"paste",
					null,
					"AQAAABI4AAAAAAAAUjgAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABI4AAAAAAAAEjgAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFI4AAAAAAAAUzgAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFI4AAAAAAAAUjgAAAAAAAAAAAAAAADwvw"
				],
				[
					33,
					1,
					"right_delete",
					null,
					"AQAAAAo4AAAAAAAACjgAAAAAAAABAAAAdA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAo4AAAAAAAACjgAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFU4AAAAAAAAVjgAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABVOAAAAAAAAFU4AAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"reindent",
					null,
					"AQAAAFU4AAAAAAAAWTgAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABVOAAAAAAAAFU4AAAAAAAAAAAAAAAAAAA"
				],
				[
					26,
					1,
					"paste",
					null,
					"AQAAAFk4AAAAAAAAfzgAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABZOAAAAAAAAFk4AAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAH84AAAAAAAAgDgAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB/OAAAAAAAAH84AAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert_completion",
					{
						"completion": "kQueueTypeCount",
						"format": "text",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "kQueueTypeCount"
					},
					"AQAAAIA4AAAAAAAAjzgAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACAOAAAAAAAAIA4AAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					15,
					"left_delete",
					null,
					"DwAAAI44AAAAAAAAjjgAAAAAAAABAAAAdI04AAAAAAAAjTgAAAAAAAABAAAAbow4AAAAAAAAjDgAAAAAAAABAAAAdYs4AAAAAAAAizgAAAAAAAABAAAAb4o4AAAAAAAAijgAAAAAAAABAAAAQ4k4AAAAAAAAiTgAAAAAAAABAAAAZYg4AAAAAAAAiDgAAAAAAAABAAAAcIc4AAAAAAAAhzgAAAAAAAABAAAAeYY4AAAAAAAAhjgAAAAAAAABAAAAVIU4AAAAAAAAhTgAAAAAAAABAAAAZYQ4AAAAAAAAhDgAAAAAAAABAAAAdYM4AAAAAAAAgzgAAAAAAAABAAAAZYI4AAAAAAAAgjgAAAAAAAABAAAAdYE4AAAAAAAAgTgAAAAAAAABAAAAUYA4AAAAAAAAgDgAAAAAAAABAAAAaw",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPOAAAAAAAAI84AAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "             "
					},
					"DQAAAIA4AAAAAAAAgTgAAAAAAAAAAAAAgTgAAAAAAACCOAAAAAAAAAAAAACCOAAAAAAAAIM4AAAAAAAAAAAAAIM4AAAAAAAAhDgAAAAAAAAAAAAAhDgAAAAAAACFOAAAAAAAAAAAAACFOAAAAAAAAIY4AAAAAAAAAAAAAIY4AAAAAAAAhzgAAAAAAAAAAAAAhzgAAAAAAACIOAAAAAAAAAAAAACIOAAAAAAAAIk4AAAAAAAAAAAAAIk4AAAAAAAAijgAAAAAAAAAAAAAijgAAAAAAACLOAAAAAAAAAAAAACLOAAAAAAAAIw4AAAAAAAAAAAAAIw4AAAAAAAAjTgAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACAOAAAAAAAAIA4AAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "mEna"
					},
					"BAAAAI04AAAAAAAAjjgAAAAAAAAAAAAAjjgAAAAAAACPOAAAAAAAAAAAAACPOAAAAAAAAJA4AAAAAAAAAAAAAJA4AAAAAAAAkTgAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNOAAAAAAAAI04AAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "bled"
					},
					"BAAAAJE4AAAAAAAAkjgAAAAAAAAAAAAAkjgAAAAAAACTOAAAAAAAAAAAAACTOAAAAAAAAJQ4AAAAAAAAAAAAAJQ4AAAAAAAAlTgAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACROAAAAAAAAJE4AAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "Host"
					},
					"BAAAAJU4AAAAAAAAljgAAAAAAAAAAAAAljgAAAAAAACXOAAAAAAAAAAAAACXOAAAAAAAAJg4AAAAAAAAAAAAAJg4AAAAAAAAmTgAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACVOAAAAAAAAJU4AAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "Query"
					},
					"BQAAAJk4AAAAAAAAmjgAAAAAAAAAAAAAmjgAAAAAAACbOAAAAAAAAAAAAACbOAAAAAAAAJw4AAAAAAAAAAAAAJw4AAAAAAAAnTgAAAAAAAAAAAAAnTgAAAAAAACeOAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZOAAAAAAAAJk4AAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "ResetFe"
					},
					"BwAAAJ44AAAAAAAAnzgAAAAAAAAAAAAAnzgAAAAAAACgOAAAAAAAAAAAAACgOAAAAAAAAKE4AAAAAAAAAAAAAKE4AAAAAAAAojgAAAAAAAAAAAAAojgAAAAAAACjOAAAAAAAAAAAAACjOAAAAAAAAKQ4AAAAAAAAAAAAAKQ4AAAAAAAApTgAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACeOAAAAAAAAJ44AAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "atures"
					},
					"BgAAAKU4AAAAAAAApjgAAAAAAAAAAAAApjgAAAAAAACnOAAAAAAAAAAAAACnOAAAAAAAAKg4AAAAAAAAAAAAAKg4AAAAAAAAqTgAAAAAAAAAAAAAqTgAAAAAAACqOAAAAAAAAAAAAACqOAAAAAAAAKs4AAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClOAAAAAAAAKU4AAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAKs4AAAAAAAArDgAAAAAAAAAAAAArDgAAAAAAACtOAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACrOAAAAAAAAKs4AAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAK04AAAAAAAArjgAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtOAAAAAAAAK04AAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAK44AAAAAAAAsDgAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACuOAAAAAAAAK44AAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAALA4AAAAAAAAsjgAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwOAAAAAAAALA4AAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAALA4AAAAAAAAsDgAAAAAAAABAAAAJ7A4AAAAAAAAsDgAAAAAAAABAAAAJw",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxOAAAAAAAALE4AAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALA4AAAAAAAAsTgAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwOAAAAAAAALA4AAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAK84AAAAAAAAsDgAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvOAAAAAAAAK84AAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"paste",
					null,
					"AQAAALA4AAAAAAAA6zgAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwOAAAAAAAALA4AAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOs4AAAAAAAA7DgAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADrOAAAAAAAAOs4AAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"right_delete",
					null,
					"AQAAAPoPAAAAAAAA+g8AAAAAAAABAAAAMQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPoPAAAAAAAA+g8AAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAPoPAAAAAAAA+w8AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPoPAAAAAAAA+g8AAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAgzAAAAAAAACTMAAAAAAAAAAAAACTMAAAAAAAANMwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAIMwAAAAAAAAgzAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOEIAAAAAAAA4ggAAAAAAAAAAAAACjMAAAAAAAAKMwAAAAAAAAQAAAAgICAg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhCAAAAAAAAOEIAAAAAAAAAAAAAAAAAAA"
				],
				[
					22,
					1,
					"paste",
					null,
					"AQAAAOEIAAAAAAAABQkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhCAAAAAAAAOEIAAAAAAAAAAAAAAAAAAA"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "Vulkan/"
					},
					"BwAAAPsIAAAAAAAA/AgAAAAAAAAAAAAA/AgAAAAAAAD9CAAAAAAAAAAAAAD9CAAAAAAAAP4IAAAAAAAAAAAAAP4IAAAAAAAA/wgAAAAAAAAAAAAA/wgAAAAAAAAACQAAAAAAAAAAAAAACQAAAAAAAAEJAAAAAAAAAAAAAAEJAAAAAAAAAgkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD7CAAAAAAAAPsIAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "nvvk_"
					},
					"BQAAAAIJAAAAAAAAAwkAAAAAAAAAAAAAAwkAAAAAAAAECQAAAAAAAAAAAAAECQAAAAAAAAUJAAAAAAAAAAAAAAUJAAAAAAAABgkAAAAAAAAAAAAABgkAAAAAAAAHCQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACCQAAAAAAAAIJAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					7,
					"right_delete",
					null,
					"BwAAAAcJAAAAAAAABwkAAAAAAAABAAAAUwcJAAAAAAAABwkAAAAAAAABAAAAYQcJAAAAAAAABwkAAAAAAAABAAAAbQcJAAAAAAAABwkAAAAAAAABAAAAcAcJAAAAAAAABwkAAAAAAAABAAAAbAcJAAAAAAAABwkAAAAAAAABAAAAZQcJAAAAAAAABwkAAAAAAAABAAAAcg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAHCQAAAAAAAAcJAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "memall"
					},
					"BgAAAAcJAAAAAAAACAkAAAAAAAAAAAAACAkAAAAAAAAJCQAAAAAAAAAAAAAJCQAAAAAAAAoJAAAAAAAAAAAAAAoJAAAAAAAACwkAAAAAAAAAAAAACwkAAAAAAAAMCQAAAAAAAAAAAAAMCQAAAAAAAA0JAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAHCQAAAAAAAAcJAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"insert_completion",
					{
						"completion": "nvvk_memallocator_vma_vk",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "nvvk_memallocator_vma_vk"
					},
					"AgAAAAIJAAAAAAAAAgkAAAAAAAALAAAAbnZ2a19tZW1hbGwCCQAAAAAAABoJAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAANCQAAAAAAAA0JAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "pp"
					},
					"AgAAABwJAAAAAAAAHQkAAAAAAAAAAAAAHQkAAAAAAAAeCQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcCQAAAAAAABwJAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEczAAAAAAAASDMAAAAAAAAAAAAASDMAAAAAAABMMwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABHMwAAAAAAAEczAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"paste",
					null,
					"AQAAAEwzAAAAAAAAZDMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMMwAAAAAAAEwzAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "nkk"
					},
					"AwAAAEwzAAAAAAAATTMAAAAAAAAAAAAATTMAAAAAAABOMwAAAAAAAAAAAABOMwAAAAAAAE8zAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMMwAAAAAAAEwzAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					2,
					"left_delete",
					null,
					"AgAAAE4zAAAAAAAATjMAAAAAAAABAAAAa00zAAAAAAAATTMAAAAAAAABAAAAaw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABPMwAAAAAAAE8zAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "vvk::"
					},
					"BQAAAE0zAAAAAAAATjMAAAAAAAAAAAAATjMAAAAAAABPMwAAAAAAAAAAAABPMwAAAAAAAFAzAAAAAAAAAAAAAFAzAAAAAAAAUTMAAAAAAAAAAAAAUTMAAAAAAABSMwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNMwAAAAAAAE0zAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": " m"
					},
					"AgAAAGozAAAAAAAAazMAAAAAAAAAAAAAazMAAAAAAABsMwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqMwAAAAAAAGozAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "Resourc"
					},
					"BwAAAGwzAAAAAAAAbTMAAAAAAAAAAAAAbTMAAAAAAABuMwAAAAAAAAAAAABuMwAAAAAAAG8zAAAAAAAAAAAAAG8zAAAAAAAAcDMAAAAAAAAAAAAAcDMAAAAAAABxMwAAAAAAAAAAAABxMwAAAAAAAHIzAAAAAAAAAAAAAHIzAAAAAAAAczMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABsMwAAAAAAAGwzAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "eAllocat"
					},
					"CAAAAHMzAAAAAAAAdDMAAAAAAAAAAAAAdDMAAAAAAAB1MwAAAAAAAAAAAAB1MwAAAAAAAHYzAAAAAAAAAAAAAHYzAAAAAAAAdzMAAAAAAAAAAAAAdzMAAAAAAAB4MwAAAAAAAAAAAAB4MwAAAAAAAHkzAAAAAAAAAAAAAHkzAAAAAAAAejMAAAAAAAAAAAAAejMAAAAAAAB7MwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABzMwAAAAAAAHMzAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "orVMA"
					},
					"BQAAAHszAAAAAAAAfDMAAAAAAAAAAAAAfDMAAAAAAAB9MwAAAAAAAAAAAAB9MwAAAAAAAH4zAAAAAAAAAAAAAH4zAAAAAAAAfzMAAAAAAAAAAAAAfzMAAAAAAACAMwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB7MwAAAAAAAHszAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "Nvvk"
					},
					"BAAAAGwzAAAAAAAAbTMAAAAAAAAAAAAAbTMAAAAAAABuMwAAAAAAAAAAAABuMwAAAAAAAG8zAAAAAAAAAAAAAG8zAAAAAAAAcDMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABsMwAAAAAAAGwzAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					3,
					"left_delete",
					null,
					"AwAAAIMzAAAAAAAAgzMAAAAAAAABAAAAQYIzAAAAAAAAgjMAAAAAAAABAAAATYEzAAAAAAAAgTMAAAAAAAABAAAAVg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACEMwAAAAAAAIQzAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIEzAAAAAAAAgjMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBMwAAAAAAAIEzAAAAAAAAAAAAAAAA8L8"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAABEZAAAAAAAAEhkAAAAAAAAAAAAAEhkAAAAAAAATGQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAARGQAAAAAAABEZAAAAAAAAAAAAAAAA8L8"
				],
				[
					71,
					1,
					"reindent",
					null,
					"AQAAABIZAAAAAAAAFhkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASGQAAAAAAABIZAAAAAAAAAAAAAAAAAAA"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "/**"
					},
					"AwAAABYZAAAAAAAAFxkAAAAAAAAAAAAAFxkAAAAAAAAYGQAAAAAAAAAAAAAYGQAAAAAAABkZAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAWGQAAAAAAABYZAAAAAAAAAAAAAAAA8L8"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": " NVVK"
					},
					"BQAAABkZAAAAAAAAGhkAAAAAAAAAAAAAGhkAAAAAAAAbGQAAAAAAAAAAAAAbGQAAAAAAABwZAAAAAAAAAAAAABwZAAAAAAAAHRkAAAAAAAAAAAAAHRkAAAAAAAAeGQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAZGQAAAAAAABkZAAAAAAAAAAAAAAAA8L8"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": " akki"
					},
					"BQAAAB4ZAAAAAAAAHxkAAAAAAAAAAAAAHxkAAAAAAAAgGQAAAAAAAAAAAAAgGQAAAAAAACEZAAAAAAAAAAAAACEZAAAAAAAAIhkAAAAAAAAAAAAAIhkAAAAAAAAjGQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAeGQAAAAAAAB4ZAAAAAAAAAAAAAAAA8L8"
				],
				[
					75,
					3,
					"left_delete",
					null,
					"AwAAACIZAAAAAAAAIhkAAAAAAAABAAAAaSEZAAAAAAAAIRkAAAAAAAABAAAAayAZAAAAAAAAIBkAAAAAAAABAAAAaw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjGQAAAAAAACMZAAAAAAAAAAAAAAAA8L8"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "llocator\n * "
					},
					"CwAAACAZAAAAAAAAIRkAAAAAAAAAAAAAIRkAAAAAAAAiGQAAAAAAAAAAAAAiGQAAAAAAACMZAAAAAAAAAAAAACMZAAAAAAAAJBkAAAAAAAAAAAAAJBkAAAAAAAAlGQAAAAAAAAAAAAAlGQAAAAAAACYZAAAAAAAAAAAAACYZAAAAAAAAJxkAAAAAAAAAAAAAJxkAAAAAAAAoGQAAAAAAAAAAAAAoGQAAAAAAACkZAAAAAAAAAAAAACkZAAAAAAAALRkAAAAAAAAAAAAALRkAAAAAAAAwGQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgGQAAAAAAACAZAAAAAAAAAAAAAAAA8L8"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": "/\n* "
					},
					"BAAAADAZAAAAAAAAMRkAAAAAAAAAAAAAMRkAAAAAAAAyGQAAAAAAAAAAAAAyGQAAAAAAADcZAAAAAAAAAAAAADcZAAAAAAAAORkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwGQAAAAAAADAZAAAAAAAAAAAAAAAA8L8"
				],
				[
					78,
					3,
					"left_delete",
					null,
					"AwAAADgZAAAAAAAAOBkAAAAAAAABAAAAIDcZAAAAAAAANxkAAAAAAAABAAAAKjYZAAAAAAAANhkAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5GQAAAAAAADkZAAAAAAAAAAAAAAAA8L8"
				],
				[
					80,
					1,
					"right_delete",
					null,
					"AgAAAC0ZAAAAAAAALRkAAAAAAAABAAAAIDEZAAAAAAAAMRkAAAAAAAAEAAAAICAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAtGQAAAAAAAC0ZAAAAAAAAAAAAAAAAQkA"
				],
				[
					82,
					1,
					"right_delete",
					null,
					"AQAAAC4ZAAAAAAAALhkAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAuGQAAAAAAAC4ZAAAAAAAAAAAAAAAA8L8"
				],
				[
					84,
					1,
					"reindent",
					null,
					"AQAAADAZAAAAAAAANBkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwGQAAAAAAADAZAAAAAAAAAAAAAACARkA"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": "La"
					},
					"AgAAADQZAAAAAAAANRkAAAAAAAAAAAAANRkAAAAAAAA2GQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA0GQAAAAAAADQZAAAAAAAAAAAAAAAA8L8"
				],
				[
					89,
					1,
					"insert_completion",
					{
						"completion": "LavaResourceAllocatorVma",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "LavaResourceAllocatorVma"
					},
					"AgAAADQZAAAAAAAANBkAAAAAAAACAAAATGE0GQAAAAAAAEwZAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2GQAAAAAAADYZAAAAAAAAAAAAAAAA8L8"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAAEwZAAAAAAAATRkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMGQAAAAAAAEwZAAAAAAAAAAAAAAAA8L8"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": " vnn"
					},
					"BAAAAE0ZAAAAAAAAThkAAAAAAAAAAAAAThkAAAAAAABPGQAAAAAAAAAAAABPGQAAAAAAAFAZAAAAAAAAAAAAAFAZAAAAAAAAURkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNGQAAAAAAAE0ZAAAAAAAAAAAAAAAA8L8"
				],
				[
					92,
					3,
					"left_delete",
					null,
					"AwAAAFAZAAAAAAAAUBkAAAAAAAABAAAAbk8ZAAAAAAAATxkAAAAAAAABAAAAbk4ZAAAAAAAAThkAAAAAAAABAAAAdg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABRGQAAAAAAAFEZAAAAAAAAAAAAAAAA8L8"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": "nvvkAllo"
					},
					"CAAAAE4ZAAAAAAAATxkAAAAAAAAAAAAATxkAAAAAAABQGQAAAAAAAAAAAABQGQAAAAAAAFEZAAAAAAAAAAAAAFEZAAAAAAAAUhkAAAAAAAAAAAAAUhkAAAAAAABTGQAAAAAAAAAAAABTGQAAAAAAAFQZAAAAAAAAAAAAAFQZAAAAAAAAVRkAAAAAAAAAAAAAVRkAAAAAAABWGQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABOGQAAAAAAAE4ZAAAAAAAAAAAAAAAA8L8"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "cator"
					},
					"BQAAAFYZAAAAAAAAVxkAAAAAAAAAAAAAVxkAAAAAAABYGQAAAAAAAAAAAABYGQAAAAAAAFkZAAAAAAAAAAAAAFkZAAAAAAAAWhkAAAAAAAAAAAAAWhkAAAAAAABbGQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABWGQAAAAAAAFYZAAAAAAAAAAAAAAAA8L8"
				],
				[
					95,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFsZAAAAAAAAXRkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABbGQAAAAAAAFsZAAAAAAAAAAAAAAAA8L8"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": " const"
					},
					"BgAAAF0ZAAAAAAAAXhkAAAAAAAAAAAAAXhkAAAAAAABfGQAAAAAAAAAAAABfGQAAAAAAAGAZAAAAAAAAAAAAAGAZAAAAAAAAYRkAAAAAAAAAAAAAYRkAAAAAAABiGQAAAAAAAAAAAABiGQAAAAAAAGMZAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABdGQAAAAAAAF0ZAAAAAAAAAAAAAAAA8L8"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": " P"
					},
					"AgAAAGMZAAAAAAAAZBkAAAAAAAAAAAAAZBkAAAAAAABlGQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjGQAAAAAAAGMZAAAAAAAAAAAAAAAA8L8"
				],
				[
					99,
					1,
					"left_delete",
					null,
					"AQAAAGQZAAAAAAAAZBkAAAAAAAABAAAAUA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABlGQAAAAAAAGUZAAAAAAAAAAAAAAAA8L8"
				],
				[
					100,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAGQZAAAAAAAAZhkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABkGQAAAAAAAGQZAAAAAAAAAAAAAAAA8L8"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": " re"
					},
					"AwAAAGUZAAAAAAAAZhkAAAAAAAAAAAAAZhkAAAAAAABnGQAAAAAAAAAAAABnGQAAAAAAAGgZAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABlGQAAAAAAAGUZAAAAAAAAAAAAAAAA8L8"
				],
				[
					102,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAAGYZAAAAAAAAZhkAAAAAAAACAAAAcmVmGQAAAAAAAGwZAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoGQAAAAAAAGgZAAAAAAAAAAAAAAAA8L8"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": " m"
					},
					"AgAAAGwZAAAAAAAAbRkAAAAAAAAAAAAAbRkAAAAAAABuGQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABsGQAAAAAAAGwZAAAAAAAAAAAAAAAA8L8"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": "LA"
					},
					"AgAAAG4ZAAAAAAAAbxkAAAAAAAAAAAAAbxkAAAAAAABwGQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABuGQAAAAAAAG4ZAAAAAAAAAAAAAAAA8L8"
				],
				[
					105,
					1,
					"left_delete",
					null,
					"AQAAAG8ZAAAAAAAAbxkAAAAAAAABAAAAQQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABwGQAAAAAAAHAZAAAAAAAAAAAAAAAA8L8"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAG8ZAAAAAAAAcBkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABvGQAAAAAAAG8ZAAAAAAAAAAAAAAAA8L8"
				],
				[
					107,
					1,
					"left_delete",
					null,
					"AQAAAG8ZAAAAAAAAbxkAAAAAAAABAAAAYQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABwGQAAAAAAAHAZAAAAAAAAAAAAAAAA8L8"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAG0ZAAAAAAAAbhkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABtGQAAAAAAAG0ZAAAAAAAAAAAAAAAA8L8"
				],
				[
					115,
					2,
					"right_delete",
					null,
					"AgAAAG4ZAAAAAAAAbhkAAAAAAAABAAAAbW4ZAAAAAAAAbhkAAAAAAAABAAAATA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABuGQAAAAAAAG4ZAAAAAAAAAAAAAAAA8L8"
				],
				[
					116,
					1,
					"paste",
					null,
					"AQAAAG4ZAAAAAAAAhBkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABuGQAAAAAAAG4ZAAAAAAAAAAAAAAAA8L8"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIQZAAAAAAAAhRkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACEGQAAAAAAAIQZAAAAAAAAAAAAAAAA8L8"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIUZAAAAAAAAhhkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACFGQAAAAAAAIUZAAAAAAAAAAAAAAAA8L8"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAADQZAAAAAAAANRkAAAAAAAAAAAAANRkAAAAAAAA2GQAAAAAAAAAAAAA2GQAAAAAAADcZAAAAAAAAAAAAADcZAAAAAAAAOBkAAAAAAAAAAAAAOBkAAAAAAAA5GQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA0GQAAAAAAADQZAAAAAAAAAAAAAAAA8L8"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADkZAAAAAAAAOhkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5GQAAAAAAADkZAAAAAAAAAAAAAAAA8L8"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": "nvvk::"
					},
					"BgAAADoZAAAAAAAAOxkAAAAAAAAAAAAAOxkAAAAAAAA8GQAAAAAAAAAAAAA8GQAAAAAAAD0ZAAAAAAAAAAAAAD0ZAAAAAAAAPhkAAAAAAAAAAAAAPhkAAAAAAAA/GQAAAAAAAAAAAAA/GQAAAAAAAEAZAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6GQAAAAAAADoZAAAAAAAAAAAAAAAA8L8"
				],
				[
					132,
					2,
					"right_delete",
					null,
					"AgAAADQZAAAAAAAANBkAAAAAAAAFAAAAY29uc3Q0GQAAAAAAADQZAAAAAAAAAQAAACA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5GQAAAAAAADQZAAAAAAAAAAAAAAAA8L8"
				],
				[
					136,
					2,
					"right_delete",
					null,
					"AgAAAGQZAAAAAAAAZBkAAAAAAAAFAAAAY29uc3RkGQAAAAAAAGQZAAAAAAAAAQAAACA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABkGQAAAAAAAGkZAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKDevice.h",
			"settings":
			{
				"buffer_size": 3368,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAALgLAAAAAAAAuQsAAAAAAAAAAAAAuQsAAAAAAAC6CwAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4CwAAAAAAALgLAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"paste",
					null,
					"AQAAALkLAAAAAAAAdwwAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5CwAAAAAAALkLAAAAAAAAAAAAAAAAAAA"
				],
				[
					10,
					1,
					"left_delete",
					null,
					"AQAAAP0LAAAAAAAA/QsAAAAAAAAEAAAAICAgIA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABDAAAAAAAAAEMAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "O"
					},
					"AQAAAL8LAAAAAAAAwAsAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC/CwAAAAAAAL8LAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"right_delete",
					null,
					"AQAAAMALAAAAAAAAwAsAAAAAAAABAAAAbw",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADACwAAAAAAAMALAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "T"
					},
					"AQAAAMILAAAAAAAAwwsAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCCwAAAAAAAMILAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					2,
					"right_delete",
					null,
					"AgAAAMMLAAAAAAAAwwsAAAAAAAABAAAAX8MLAAAAAAAAwwsAAAAAAAABAAAAdA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDCwAAAAAAAMMLAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					2,
					"right_delete",
					null,
					"AgAAAMYLAAAAAAAAxgsAAAAAAAABAAAAX8YLAAAAAAAAxgsAAAAAAAABAAAAYw",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADGCwAAAAAAAMYLAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "C"
					},
					"AQAAAMYLAAAAAAAAxwsAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADGCwAAAAAAAMYLAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					2,
					"right_delete",
					null,
					"AgAAAM0LAAAAAAAAzQsAAAAAAAABAAAAX80LAAAAAAAAzQsAAAAAAAABAAAAZg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNCwAAAAAAAM0LAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "F"
					},
					"AQAAAM0LAAAAAAAAzgsAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNCwAAAAAAAM0LAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"paste",
					null,
					"AgAAAFAMAAAAAAAAYgwAAAAAAAAAAAAAYgwAAAAAAABiDAAAAAAAABUAAABvbmVfdGltZV9jb21tYW5kX2Z1bmM",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABQDAAAAAAAAGUMAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "Device::"
					},
					"CQAAABcMAAAAAAAAGAwAAAAAAAAAAAAAGAwAAAAAAAAYDAAAAAAAAAoAAABkZXZpY2VfcHRyGAwAAAAAAAAZDAAAAAAAAAAAAAAZDAAAAAAAABoMAAAAAAAAAAAAABoMAAAAAAAAGwwAAAAAAAAAAAAAGwwAAAAAAAAcDAAAAAAAAAAAAAAcDAAAAAAAAB0MAAAAAAAAAAAAAB0MAAAAAAAAHgwAAAAAAAAAAAAAHgwAAAAAAAAfDAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAXDAAAAAAAACEMAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "Sh"
					},
					"AgAAAB8MAAAAAAAAIAwAAAAAAAAAAAAAIAwAAAAAAAAhDAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfDAAAAAAAAB8MAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert_completion",
					{
						"completion": "SharedPtr",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "SharedPtr"
					},
					"AgAAAB8MAAAAAAAAHwwAAAAAAAACAAAAU2gfDAAAAAAAACgMAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhDAAAAAAAACEMAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "pD"
					},
					"AgAAACkMAAAAAAAAKgwAAAAAAAAAAAAAKgwAAAAAAAArDAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAApDAAAAAAAACkMAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"right_delete",
					null,
					"AQAAACsMAAAAAAAAKwwAAAAAAAABAAAAZA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAArDAAAAAAAACsMAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"paste",
					null,
					"AgAAABcMAAAAAAAAggwAAAAAAAAAAAAAggwAAAAAAACCDAAAAAAAAFwAAABEZXZpY2U6OlNoYXJlZFB0ciBwRGV2aWNlLCBWa0NvbW1hbmRQb29sIHBvb2wsIHF1ZXVlOjpyZWYgcXVldWUsIE9uZVRpbWVDb21tYW5kRnVuYyBjYWxsYmFjaw",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAXDAAAAAAAAHMMAAAAAAAAAAAAAAAA8L8"
				],
				[
					54,
					1,
					"paste",
					null,
					"AgAAAP8LAAAAAAAAEwwAAAAAAAAAAAAAEwwAAAAAAAATDAAAAAAAABcAAABvbmVfdGltZV9jb21tYW5kX2J1ZmZlcg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/CwAAAAAAABYMAAAAAAAAAAAAAAAA8L8"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAIIMAAAAAAAAgwwAAAAAAAAAAAAAgwwAAAAAAACEDAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCDAAAAAAAAIIMAAAAAAAAAAAAAADAaEA"
				],
				[
					60,
					1,
					"paste",
					null,
					"AQAAAIMMAAAAAAAAwAwAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACDDAAAAAAAAIMMAAAAAAAAAAAAAAAAAAA"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAL8MAAAAAAAAwAwAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC/DAAAAAAAAL8MAAAAAAAAAAAAAAAA8L8"
				],
				[
					65,
					1,
					"left_delete",
					null,
					"AQAAAIwMAAAAAAAAjAwAAAAAAAABAAAARg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNDAAAAAAAAI0MAAAAAAAAAAAAAAAA8L8"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAIwMAAAAAAAAjQwAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMDAAAAAAAAIwMAAAAAAAAAAAAAAAA8L8"
				],
				[
					69,
					1,
					"paste",
					null,
					"AQAAAKQMAAAAAAAAvwwAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACkDAAAAAAAAKQMAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "third_party/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 16722,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "master"
					},
					"BwAAABwsAAAAAAAAHSwAAAAAAAAAAAAAHSwAAAAAAAAdLAAAAAAAAAUAAAAyLjMuMB0sAAAAAAAAHiwAAAAAAAAAAAAAHiwAAAAAAAAfLAAAAAAAAAAAAAAfLAAAAAAAACAsAAAAAAAAAAAAACAsAAAAAAAAISwAAAAAAAAAAAAAISwAAAAAAAAiLAAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcLAAAAAAAACEsAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAACIsAAAAAAAAIywAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIiwAAAAAAAAiLAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"right_delete",
					null,
					"AQAAACUBAAAAAAAAJQEAAAAAAAA/AAAAI3NldChFWFRFUk5BTFNfQlVJTERfRElSICR7Q01BS0VfQ1VSUkVOVF9CSU5BUllfRElSfS9leHRlcm5hbCkK",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJQEAAAAAAABkAQAAAAAAAAAAAAAAAAAA"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAGYBAAAAAAAAZwEAAAAAAAAAAAAAZwEAAAAAAABoAQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZgEAAAAAAABmAQAAAAAAAAAAAAAAAAAA"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGYBAAAAAAAAZwEAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZgEAAAAAAABmAQAAAAAAAAAAAAAAAAAA"
				],
				[
					30,
					1,
					"",
					null,
					"IgAAAHY5AAAAAAAAizkAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUiYxAAAAAAAAOzEAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUlwuAAAAAAAAcS4AAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUlQtAAAAAAAAaS0AAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUgorAAAAAAAAHysAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUqEqAAAAAAAAtioAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUmoqAAAAAAAAfyoAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUjQqAAAAAAAASSoAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUgIqAAAAAAAAFyoAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUvgmAAAAAAAADScAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUt8lAAAAAAAA9CUAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUpYlAAAAAAAAqyUAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUlAlAAAAAAAAZSUAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUhMlAAAAAAAAKCUAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUtwkAAAAAAAA8SQAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUqMkAAAAAAAAuCQAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUsYfAAAAAAAA2x8AAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUhQfAAAAAAAAKR8AAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUoIbAAAAAAAAlxsAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUh4aAAAAAAAAMxoAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUjUXAAAAAAAAShcAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUoEWAAAAAAAAlhYAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUlcUAAAAAAAAbBQAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUukTAAAAAAAA/hMAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUgEPAAAAAAAAFg8AAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUtoNAAAAAAAA7w0AAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUuMLAAAAAAAA+AsAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUmUKAAAAAAAAegoAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUqgHAAAAAAAAvQcAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUtkGAAAAAAAA7gYAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUhgGAAAAAAAALQYAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUuQFAAAAAAAA+QUAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUgMDAAAAAAAAGAMAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUikBAAAAAAAAPgEAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKQEAAAAAAAA8AQAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACQBAAAAAAAAJQEAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJAEAAAAAAAAkAQAAAAAAAAAAAAAAAAAA"
				],
				[
					39,
					1,
					"paste",
					null,
					"AQAAACUBAAAAAAAAZwEAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJQEAAAAAAAAlAQAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "BUILD"
					},
					"BQAAADMBAAAAAAAANAEAAAAAAAAAAAAANAEAAAAAAAA1AQAAAAAAAAAAAAA1AQAAAAAAADYBAAAAAAAAAAAAADYBAAAAAAAANwEAAAAAAAAAAAAANwEAAAAAAAA4AQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMwEAAAAAAAAzAQAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					7,
					"right_delete",
					null,
					"BwAAADgBAAAAAAAAOAEAAAAAAAABAAAASTgBAAAAAAAAOAEAAAAAAAABAAAATjgBAAAAAAAAOAEAAAAAAAABAAAAUzgBAAAAAAAAOAEAAAAAAAABAAAAVDgBAAAAAAAAOAEAAAAAAAABAAAAQTgBAAAAAAAAOAEAAAAAAAABAAAATDgBAAAAAAAAOAEAAAAAAAABAAAATA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOAEAAAAAAAA4AQAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAFsBAAAAAAAAXAEAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWwEAAAAAAABbAQAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"right_delete",
					null,
					"AQAAAFwBAAAAAAAAXAEAAAAAAAABAAAAXw",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXAEAAAAAAABcAQAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAEcFAAAAAAAASAUAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARwUAAAAAAABHBQAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEcFAAAAAAAASAUAAAAAAAAAAAAASAUAAAAAAABMBQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARwUAAAAAAABHBQAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "BUILD_D"
					},
					"BwAAAEcFAAAAAAAASAUAAAAAAAAAAAAASAUAAAAAAABJBQAAAAAAAAAAAABJBQAAAAAAAEoFAAAAAAAAAAAAAEoFAAAAAAAASwUAAAAAAAAAAAAASwUAAAAAAABMBQAAAAAAAAAAAABMBQAAAAAAAE0FAAAAAAAAAAAAAE0FAAAAAAAATgUAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARwUAAAAAAABHBQAAAAAAAAAAAAAAAEJA"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "IR"
					},
					"AgAAAE4FAAAAAAAATwUAAAAAAAAAAAAATwUAAAAAAABQBQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATgUAAAAAAABOBQAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": " $"
					},
					"AgAAAFAFAAAAAAAAUQUAAAAAAAAAAAAAUQUAAAAAAABSBQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUAUAAAAAAABQBQAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAFIFAAAAAAAAVAUAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUgUAAAAAAABSBQAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"paste",
					null,
					"AQAAAFMFAAAAAAAAZgUAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUwUAAAAAAABTBQAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKkKAAAAAAAAqgoAAAAAAAAAAAAAqgoAAAAAAACuCgAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqQoAAAAAAACpCgAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"paste",
					null,
					"AQAAAK4KAAAAAAAAzgoAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArgoAAAAAAACuCgAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACMPAAAAAAAAJA8AAAAAAAAAAAAAJA8AAAAAAAAoDwAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIw8AAAAAAAAjDwAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"paste",
					null,
					"AQAAACgPAAAAAAAASA8AAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKA8AAAAAAAAoDwAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAHMUAAAAAAAAdBQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcxQAAAAAAABzFAAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIoUAAAAAAAAixQAAAAAAAAAAAAAixQAAAAAAACPFAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAihQAAAAAAACKFAAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"paste",
					null,
					"AQAAAIoUAAAAAAAAqhQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAihQAAAAAAACKFAAAAAAAAAAAAAAAAEJA"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANkbAAAAAAAA2hsAAAAAAAAAAAAA2hsAAAAAAADeGwAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2RsAAAAAAADZGwAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"paste",
					null,
					"AQAAAN4bAAAAAAAA/hsAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3hsAAAAAAADeGwAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGIgAAAAAAAAYyAAAAAAAAAAAAAAYyAAAAAAAABnIAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYiAAAAAAAABiIAAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"paste",
					null,
					"AQAAAGcgAAAAAAAAhyAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZyAAAAAAAABnIAAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "/assimp"
					},
					"BwAAAIcgAAAAAAAAiCAAAAAAAAAAAAAAiCAAAAAAAACJIAAAAAAAAAAAAACJIAAAAAAAAIogAAAAAAAAAAAAAIogAAAAAAAAiyAAAAAAAAAAAAAAiyAAAAAAAACMIAAAAAAAAAAAAACMIAAAAAAAAI0gAAAAAAAAAAAAAI0gAAAAAAAAjiAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhyAAAAAAAACHIAAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGcnAAAAAAAAaCcAAAAAAAAAAAAAaCcAAAAAAABsJwAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZycAAAAAAABnJwAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"paste",
					null,
					"AQAAAGwnAAAAAAAAjCcAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbCcAAAAAAABsJwAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"insert",
					{
						"characters": "/openvdb"
					},
					"CAAAAIwnAAAAAAAAjScAAAAAAAAAAAAAjScAAAAAAACOJwAAAAAAAAAAAACOJwAAAAAAAI8nAAAAAAAAAAAAAI8nAAAAAAAAkCcAAAAAAAAAAAAAkCcAAAAAAACRJwAAAAAAAAAAAACRJwAAAAAAAJInAAAAAAAAAAAAAJInAAAAAAAAkycAAAAAAAAAAAAAkycAAAAAAACUJwAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjCcAAAAAAACMJwAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMssAAAAAAAAzCwAAAAAAAAAAAAAzCwAAAAAAADQLAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyywAAAAAAADLLAAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"paste",
					null,
					"AQAAANAsAAAAAAAA8CwAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0CwAAAAAAADQLAAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": "/iooi"
					},
					"BQAAAPAsAAAAAAAA8SwAAAAAAAAAAAAA8SwAAAAAAADyLAAAAAAAAAAAAADyLAAAAAAAAPMsAAAAAAAAAAAAAPMsAAAAAAAA9CwAAAAAAAAAAAAA9CwAAAAAAAD1LAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8CwAAAAAAADwLAAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					4,
					"left_delete",
					null,
					"BAAAAPQsAAAAAAAA9CwAAAAAAAABAAAAafMsAAAAAAAA8ywAAAAAAAABAAAAb/IsAAAAAAAA8iwAAAAAAAABAAAAb/EsAAAAAAAA8SwAAAAAAAABAAAAaQ",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9SwAAAAAAAD1LAAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": "oiio"
					},
					"BAAAAPEsAAAAAAAA8iwAAAAAAAAAAAAA8iwAAAAAAADzLAAAAAAAAAAAAADzLAAAAAAAAPQsAAAAAAAAAAAAAPQsAAAAAAAA9SwAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8SwAAAAAAADxLAAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": "/tbb"
					},
					"BAAAAGcFAAAAAAAAaAUAAAAAAAAAAAAAaAUAAAAAAABpBQAAAAAAAAAAAABpBQAAAAAAAGoFAAAAAAAAAAAAAGoFAAAAAAAAawUAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZwUAAAAAAABnBQAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": "/blosc"
					},
					"BgAAANIKAAAAAAAA0woAAAAAAAAAAAAA0woAAAAAAADUCgAAAAAAAAAAAADUCgAAAAAAANUKAAAAAAAAAAAAANUKAAAAAAAA1goAAAAAAAAAAAAA1goAAAAAAADXCgAAAAAAAAAAAADXCgAAAAAAANgKAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0goAAAAAAADSCgAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": "/pybinfd"
					},
					"CAAAAFIPAAAAAAAAUw8AAAAAAAAAAAAAUw8AAAAAAABUDwAAAAAAAAAAAABUDwAAAAAAAFUPAAAAAAAAAAAAAFUPAAAAAAAAVg8AAAAAAAAAAAAAVg8AAAAAAABXDwAAAAAAAAAAAABXDwAAAAAAAFgPAAAAAAAAAAAAAFgPAAAAAAAAWQ8AAAAAAAAAAAAAWQ8AAAAAAABaDwAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUg8AAAAAAABSDwAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					2,
					"left_delete",
					null,
					"AgAAAFkPAAAAAAAAWQ8AAAAAAAABAAAAZFgPAAAAAAAAWA8AAAAAAAABAAAAZg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWg8AAAAAAABaDwAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAAFgPAAAAAAAAWQ8AAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWA8AAAAAAABYDwAAAAAAAAAAAAAAAPC/"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": "/boost"
					},
					"BgAAALsUAAAAAAAAvBQAAAAAAAAAAAAAvBQAAAAAAAC9FAAAAAAAAAAAAAC9FAAAAAAAAL4UAAAAAAAAAAAAAL4UAAAAAAAAvxQAAAAAAAAAAAAAvxQAAAAAAADAFAAAAAAAAAAAAADAFAAAAAAAAMEUAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuxQAAAAAAAC7FAAAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"insert",
					{
						"characters": "/openexr"
					},
					"CAAAABUcAAAAAAAAFhwAAAAAAAAAAAAAFhwAAAAAAAAXHAAAAAAAAAAAAAAXHAAAAAAAABgcAAAAAAAAAAAAABgcAAAAAAAAGRwAAAAAAAAAAAAAGRwAAAAAAAAaHAAAAAAAAAAAAAAaHAAAAAAAABscAAAAAAAAAAAAABscAAAAAAAAHBwAAAAAAAAAAAAAHBwAAAAAAAAdHAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFRwAAAAAAAAVHAAAAAAAAAAAAAAAAPC/"
				],
				[
					142,
					1,
					"",
					null,
					"EQAAAAUtAAAAAAAADy0AAAAAAAAJAAAAQlVJTERfRElS7ywAAAAAAAD5LAAAAAAAAAkAAABCVUlMRF9ESVKhJwAAAAAAAKsnAAAAAAAACQAAAEJVSUxEX0RJUosnAAAAAAAAlScAAAAAAAAJAAAAQlVJTERfRElSnCAAAAAAAACmIAAAAAAAAAkAAABCVUlMRF9ESVKGIAAAAAAAAJAgAAAAAAAACQAAAEJVSUxEX0RJUgscAAAAAAAAFRwAAAAAAAAJAAAAQlVJTERfRElS9RsAAAAAAAD/GwAAAAAAAAkAAABCVUlMRF9ESVKxFAAAAAAAALsUAAAAAAAACQAAAEJVSUxEX0RJUpsUAAAAAAAApRQAAAAAAAAJAAAAQlVJTERfRElSSA8AAAAAAABSDwAAAAAAAAkAAABCVUlMRF9ESVIyDwAAAAAAADwPAAAAAAAACQAAAEJVSUxEX0RJUsgKAAAAAAAA0goAAAAAAAAJAAAAQlVJTERfRElSsgoAAAAAAAC8CgAAAAAAAAkAAABCVUlMRF9ESVJdBQAAAAAAAGcFAAAAAAAACQAAAEJVSUxEX0RJUkcFAAAAAAAAUQUAAAAAAAAJAAAAQlVJTERfRElSMwEAAAAAAAA9AQAAAAAAAAkAAABCVUlMRF9ESVI",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARwUAAAAAAABQBQAAAAAAAAAAAAAAAPC/"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAA0UAAAAAAAADhQAAAAAAAAAAAAADhQAAAAAAAAUFAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADRQAAAAAAAANFAAAAAAAAAAAAAAAAPC/"
				],
				[
					155,
					1,
					"paste",
					null,
					"AQAAABQUAAAAAAAAIxQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFBQAAAAAAAAUFAAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"paste",
					null,
					"AgAAACAUAAAAAAAAPRQAAAAAAAAAAAAAPRQAAAAAAAA9FAAAAAAAAAMAAABESVI",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIBQAAAAAAAAjFAAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"right_delete",
					null,
					"AQAAALsUAAAAAAAAuxQAAAAAAAABAAAAIw",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuxQAAAAAAAC7FAAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"right_delete",
					null,
					"AQAAANEUAAAAAAAA0RQAAAAAAAAtAAAAQklOQVJZX0RJUiAke0VYVEVSTkFMU19CSU5BUllfRElSfS9ib29zdAogICAg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0RQAAAAAAAD+FAAAAAAAAAAAAAAAAEJA"
				],
				[
					174,
					1,
					"paste",
					null,
					"AQAAAFUUAAAAAAAAfhQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVRQAAAAAAABVFAAAAAAAAAAAAAAAAPC/"
				],
				[
					175,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAH4UAAAAAAAAfxQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfhQAAAAAAAB+FAAAAAAAAAAAAAAAAPC/"
				],
				[
					181,
					1,
					"left_delete",
					null,
					"AQAAAA4UAAAAAAAADhQAAAAAAAAwAAAAICAgICAgLS1idWlsZC1kaXI9JHtFWFRFUk5BTFNfQklOQVJZX0RJUn0vYm9vc3QK",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADhQAAAAAAAA+FAAAAAAAAAAAAAAAAPC/"
				],
				[
					190,
					1,
					"right_delete",
					null,
					"AQAAAHMFAAAAAAAAcwUAAAAAAAABAAAAIw",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcwUAAAAAAABzBQAAAAAAAAAAAAAAAEJA"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAEgFAAAAAAAASQUAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASAUAAAAAAABIBQAAAAAAAAAAAAAAAEJA"
				],
				[
					195,
					1,
					"insert",
					{
						"characters": "tbb+"
					},
					"BAAAANgFAAAAAAAA2QUAAAAAAAAAAAAA2QUAAAAAAADaBQAAAAAAAAAAAADaBQAAAAAAANsFAAAAAAAAAAAAANsFAAAAAAAA3AUAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2AUAAAAAAADYBQAAAAAAAAAAAAAAAPC/"
				],
				[
					196,
					1,
					"left_delete",
					null,
					"AQAAANsFAAAAAAAA2wUAAAAAAAABAAAAKw",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3AUAAAAAAADcBQAAAAAAAAAAAAAAAPC/"
				],
				[
					197,
					1,
					"insert",
					{
						"characters": "_root="
					},
					"BgAAANsFAAAAAAAA3AUAAAAAAAAAAAAA3AUAAAAAAADdBQAAAAAAAAAAAADdBQAAAAAAAN4FAAAAAAAAAAAAAN4FAAAAAAAA3wUAAAAAAAAAAAAA3wUAAAAAAADgBQAAAAAAAAAAAADgBQAAAAAAAOEFAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2wUAAAAAAADbBQAAAAAAAAAAAAAAAPC/"
				],
				[
					203,
					1,
					"paste",
					null,
					"AQAAAOEFAAAAAAAA/AUAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4QUAAAAAAADhBQAAAAAAAAAAAAAAAPC/"
				],
				[
					204,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPwFAAAAAAAA/QUAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/AUAAAAAAAD8BQAAAAAAAAAAAAAAAPC/"
				],
				[
					212,
					1,
					"insert",
					{
						"characters": "/build"
					},
					"BgAAAPwFAAAAAAAA/QUAAAAAAAAAAAAA/QUAAAAAAAD+BQAAAAAAAAAAAAD+BQAAAAAAAP8FAAAAAAAAAAAAAP8FAAAAAAAAAAYAAAAAAAAAAAAAAAYAAAAAAAABBgAAAAAAAAAAAAABBgAAAAAAAAIGAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/AUAAAAAAAD8BQAAAAAAAAAAAAAAAPC/"
				],
				[
					218,
					1,
					"paste",
					null,
					"AgAAAA4HAAAAAAAALwcAAAAAAAAAAAAALwcAAAAAAAAvBwAAAAAAABIAAAA8U09VUkNFX0RJUj4vYnVpbGQ",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIAcAAAAAAAAOBwAAAAAAAAAAAAAAAPC/"
				],
				[
					223,
					1,
					"insert",
					{
						"characters": "builf"
					},
					"BgAAANwFAAAAAAAA3QUAAAAAAAAAAAAA3QUAAAAAAADdBQAAAAAAAAQAAAByb2903QUAAAAAAADeBQAAAAAAAAAAAADeBQAAAAAAAN8FAAAAAAAAAAAAAN8FAAAAAAAA4AUAAAAAAAAAAAAA4AUAAAAAAADhBQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3AUAAAAAAADgBQAAAAAAAAAAAAAAAPC/"
				],
				[
					224,
					1,
					"left_delete",
					null,
					"AQAAAOAFAAAAAAAA4AUAAAAAAAABAAAAZg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4QUAAAAAAADhBQAAAAAAAAAAAAAAAPC/"
				],
				[
					225,
					1,
					"insert",
					{
						"characters": "d_dir"
					},
					"BQAAAOAFAAAAAAAA4QUAAAAAAAAAAAAA4QUAAAAAAADiBQAAAAAAAAAAAADiBQAAAAAAAOMFAAAAAAAAAAAAAOMFAAAAAAAA5AUAAAAAAAAAAAAA5AUAAAAAAADlBQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4AUAAAAAAADgBQAAAAAAAAAAAAAAAPC/"
				],
				[
					245,
					1,
					"insert",
					{
						"characters": "deps"
					},
					"BQAAAJoBAAAAAAAAmwEAAAAAAAAAAAAAmwEAAAAAAACbAQAAAAAAAA4AAABidWlsZF9leHRlcm5hbJsBAAAAAAAAnAEAAAAAAAAAAAAAnAEAAAAAAACdAQAAAAAAAAAAAACdAQAAAAAAAJ4BAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmgEAAAAAAACoAQAAAAAAAAAAAAAAAPC/"
				],
				[
					265,
					1,
					"right_delete",
					null,
					"AQAAAAIuAAAAAAAAAi4AAAAAAAABAAAAbQ",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAi4AAAAAAAACLgAAAAAAAAAAAAAAAPC/"
				],
				[
					268,
					1,
					"right_delete",
					null,
					"AQAAANguAAAAAAAA2C4AAAAAAAABAAAAdg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2C4AAAAAAADYLgAAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAJktAAAAAAAAmi0AAAAAAAAAAAAAmi0AAAAAAACbLQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZLQAAAAAAAJktAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "№№№№№№№№№"
					},
					"CQAAAJotAAAAAAAAmy0AAAAAAAAAAAAAmy0AAAAAAACcLQAAAAAAAAAAAACcLQAAAAAAAJ0tAAAAAAAAAAAAAJ0tAAAAAAAAni0AAAAAAAAAAAAAni0AAAAAAACfLQAAAAAAAAAAAACfLQAAAAAAAKAtAAAAAAAAAAAAAKAtAAAAAAAAoS0AAAAAAAAAAAAAoS0AAAAAAACiLQAAAAAAAAAAAACiLQAAAAAAAKMtAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaLQAAAAAAAJotAAAAAAAAAAAAAAAAAAA"
				],
				[
					6,
					9,
					"left_delete",
					null,
					"CQAAAKItAAAAAAAAoi0AAAAAAAADAAAA4oSWoS0AAAAAAAChLQAAAAAAAAMAAADihJagLQAAAAAAAKAtAAAAAAAAAwAAAOKElp8tAAAAAAAAny0AAAAAAAADAAAA4oSWni0AAAAAAACeLQAAAAAAAAMAAADihJadLQAAAAAAAJ0tAAAAAAAAAwAAAOKElpwtAAAAAAAAnC0AAAAAAAADAAAA4oSWmy0AAAAAAACbLQAAAAAAAAMAAADihJaaLQAAAAAAAJotAAAAAAAAAwAAAOKElg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjLQAAAAAAAKMtAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "#######################"
					},
					"FwAAAJotAAAAAAAAmy0AAAAAAAAAAAAAmy0AAAAAAACcLQAAAAAAAAAAAACcLQAAAAAAAJ0tAAAAAAAAAAAAAJ0tAAAAAAAAni0AAAAAAAAAAAAAni0AAAAAAACfLQAAAAAAAAAAAACfLQAAAAAAAKAtAAAAAAAAAAAAAKAtAAAAAAAAoS0AAAAAAAAAAAAAoS0AAAAAAACiLQAAAAAAAAAAAACiLQAAAAAAAKMtAAAAAAAAAAAAAKMtAAAAAAAApC0AAAAAAAAAAAAApC0AAAAAAAClLQAAAAAAAAAAAAClLQAAAAAAAKYtAAAAAAAAAAAAAKYtAAAAAAAApy0AAAAAAAAAAAAApy0AAAAAAACoLQAAAAAAAAAAAACoLQAAAAAAAKktAAAAAAAAAAAAAKktAAAAAAAAqi0AAAAAAAAAAAAAqi0AAAAAAACrLQAAAAAAAAAAAACrLQAAAAAAAKwtAAAAAAAAAAAAAKwtAAAAAAAArS0AAAAAAAAAAAAArS0AAAAAAACuLQAAAAAAAAAAAACuLQAAAAAAAK8tAAAAAAAAAAAAAK8tAAAAAAAAsC0AAAAAAAAAAAAAsC0AAAAAAACxLQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaLQAAAAAAAJotAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "\n#"
					},
					"AgAAALEtAAAAAAAAsi0AAAAAAAAAAAAAsi0AAAAAAACzLQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxLQAAAAAAALEtAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "\n########################"
					},
					"GQAAALMtAAAAAAAAtC0AAAAAAAAAAAAAtC0AAAAAAAC1LQAAAAAAAAAAAAC1LQAAAAAAALYtAAAAAAAAAAAAALYtAAAAAAAAty0AAAAAAAAAAAAAty0AAAAAAAC4LQAAAAAAAAAAAAC4LQAAAAAAALktAAAAAAAAAAAAALktAAAAAAAAui0AAAAAAAAAAAAAui0AAAAAAAC7LQAAAAAAAAAAAAC7LQAAAAAAALwtAAAAAAAAAAAAALwtAAAAAAAAvS0AAAAAAAAAAAAAvS0AAAAAAAC+LQAAAAAAAAAAAAC+LQAAAAAAAL8tAAAAAAAAAAAAAL8tAAAAAAAAwC0AAAAAAAAAAAAAwC0AAAAAAADBLQAAAAAAAAAAAADBLQAAAAAAAMItAAAAAAAAAAAAAMItAAAAAAAAwy0AAAAAAAAAAAAAwy0AAAAAAADELQAAAAAAAAAAAADELQAAAAAAAMUtAAAAAAAAAAAAAMUtAAAAAAAAxi0AAAAAAAAAAAAAxi0AAAAAAADHLQAAAAAAAAAAAADHLQAAAAAAAMgtAAAAAAAAAAAAAMgtAAAAAAAAyS0AAAAAAAAAAAAAyS0AAAAAAADKLQAAAAAAAAAAAADKLQAAAAAAAMstAAAAAAAAAAAAAMstAAAAAAAAzC0AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzLQAAAAAAALMtAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"left_delete",
					null,
					"AQAAAMstAAAAAAAAyy0AAAAAAAABAAAAIw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADMLQAAAAAAAMwtAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMstAAAAAAAAzC0AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLLQAAAAAAAMstAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " NV"
					},
					"AwAAALMtAAAAAAAAtC0AAAAAAAAAAAAAtC0AAAAAAAC1LQAAAAAAAAAAAAC1LQAAAAAAALYtAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzLQAAAAAAALMtAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "PRO_CORE"
					},
					"CAAAALYtAAAAAAAAty0AAAAAAAAAAAAAty0AAAAAAAC4LQAAAAAAAAAAAAC4LQAAAAAAALktAAAAAAAAAAAAALktAAAAAAAAui0AAAAAAAAAAAAAui0AAAAAAAC7LQAAAAAAAAAAAAC7LQAAAAAAALwtAAAAAAAAAAAAALwtAAAAAAAAvS0AAAAAAAAAAAAAvS0AAAAAAAC+LQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC2LQAAAAAAALYtAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANctAAAAAAAA2C0AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXLQAAAAAAANctAAAAAAAAAAAAAAAAW0A"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "External"
					},
					"CAAAANgtAAAAAAAA2S0AAAAAAAAAAAAA2S0AAAAAAADaLQAAAAAAAAAAAADaLQAAAAAAANstAAAAAAAAAAAAANstAAAAAAAA3C0AAAAAAAAAAAAA3C0AAAAAAADdLQAAAAAAAAAAAADdLQAAAAAAAN4tAAAAAAAAAAAAAN4tAAAAAAAA3y0AAAAAAAAAAAAA3y0AAAAAAADgLQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADYLQAAAAAAANgtAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "Project"
					},
					"BwAAAOAtAAAAAAAA4S0AAAAAAAAAAAAA4S0AAAAAAADiLQAAAAAAAAAAAADiLQAAAAAAAOMtAAAAAAAAAAAAAOMtAAAAAAAA5C0AAAAAAAAAAAAA5C0AAAAAAADlLQAAAAAAAAAAAADlLQAAAAAAAOYtAAAAAAAAAAAAAOYtAAAAAAAA5y0AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADgLQAAAAAAAOAtAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "_ADD"
					},
					"BAAAAOctAAAAAAAA6C0AAAAAAAAAAAAA6C0AAAAAAADpLQAAAAAAAAAAAADpLQAAAAAAAOotAAAAAAAAAAAAAOotAAAAAAAA6y0AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnLQAAAAAAAOctAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					2,
					"left_delete",
					null,
					"AgAAAOotAAAAAAAA6i0AAAAAAAABAAAAROktAAAAAAAA6S0AAAAAAAABAAAARA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADrLQAAAAAAAOstAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "dd"
					},
					"AgAAAOktAAAAAAAA6i0AAAAAAAAAAAAA6i0AAAAAAADrLQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADpLQAAAAAAAOktAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": " )"
					},
					"AgAAAOstAAAAAAAA7C0AAAAAAAAAAAAA7C0AAAAAAADtLQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADrLQAAAAAAAOstAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"left_delete",
					null,
					"AQAAAOwtAAAAAAAA7C0AAAAAAAABAAAAKQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtLQAAAAAAAO0tAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOwtAAAAAAAA7i0AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsLQAAAAAAAOwtAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAO0tAAAAAAAA7i0AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtLQAAAAAAAO0tAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "VNPROC"
					},
					"BgAAAO4tAAAAAAAA7y0AAAAAAAAAAAAA7y0AAAAAAADwLQAAAAAAAAAAAADwLQAAAAAAAPEtAAAAAAAAAAAAAPEtAAAAAAAA8i0AAAAAAAAAAAAA8i0AAAAAAADzLQAAAAAAAAAAAADzLQAAAAAAAPQtAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuLQAAAAAAAO4tAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					3,
					"left_delete",
					null,
					"AwAAAPMtAAAAAAAA8y0AAAAAAAABAAAAQ/ItAAAAAAAA8i0AAAAAAAABAAAAT/EtAAAAAAAA8S0AAAAAAAABAAAAUg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD0LQAAAAAAAPQtAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "OR"
					},
					"AgAAAPEtAAAAAAAA8i0AAAAAAAAAAAAA8i0AAAAAAADzLQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADxLQAAAAAAAPEtAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					2,
					"left_delete",
					null,
					"AgAAAPItAAAAAAAA8i0AAAAAAAABAAAAUvEtAAAAAAAA8S0AAAAAAAABAAAATw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADzLQAAAAAAAPMtAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "RO_"
					},
					"AwAAAPEtAAAAAAAA8i0AAAAAAAAAAAAA8i0AAAAAAADzLQAAAAAAAAAAAADzLQAAAAAAAPQtAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADxLQAAAAAAAPEtAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "Core"
					},
					"BAAAAPQtAAAAAAAA9S0AAAAAAAAAAAAA9S0AAAAAAAD2LQAAAAAAAAAAAAD2LQAAAAAAAPctAAAAAAAAAAAAAPctAAAAAAAA+C0AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD0LQAAAAAAAPQtAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					2,
					"right_delete",
					null,
					"AgAAAPEtAAAAAAAA8S0AAAAAAAABAAAAUvEtAAAAAAAA8S0AAAAAAAABAAAATw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADxLQAAAAAAAPEtAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "por"
					},
					"AwAAAPEtAAAAAAAA8i0AAAAAAAAAAAAA8i0AAAAAAADzLQAAAAAAAAAAAADzLQAAAAAAAPQtAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADxLQAAAAAAAPEtAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"right_delete",
					null,
					"AQAAAPEtAAAAAAAA8S0AAAAAAAABAAAAcA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADxLQAAAAAAAPEtAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"right_delete",
					null,
					"AQAAAPEtAAAAAAAA8S0AAAAAAAABAAAAbw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADxLQAAAAAAAPEtAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAAPItAAAAAAAA8y0AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADyLQAAAAAAAPItAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					1,
					"right_delete",
					null,
					"AQAAAO4tAAAAAAAA7i0AAAAAAAABAAAAVg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuLQAAAAAAAO4tAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "V"
					},
					"AQAAAO8tAAAAAAAA8C0AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvLQAAAAAAAO8tAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAPgtAAAAAAAA+S0AAAAAAAAAAAAA+S0AAAAAAAD6LQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD4LQAAAAAAAPgtAAAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "ro"
					},
					"AgAAALctAAAAAAAAuC0AAAAAAAAAAAAAuC0AAAAAAAC5LQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3LQAAAAAAALctAAAAAAAAAAAAAAAA8L8"
				],
				[
					54,
					2,
					"right_delete",
					null,
					"AgAAALktAAAAAAAAuS0AAAAAAAABAAAAUrktAAAAAAAAuS0AAAAAAAABAAAATw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5LQAAAAAAALktAAAAAAAAAAAAAAAA8L8"
				],
				[
					57,
					3,
					"right_delete",
					null,
					"AwAAALstAAAAAAAAuy0AAAAAAAABAAAAT7stAAAAAAAAuy0AAAAAAAABAAAAUrstAAAAAAAAuy0AAAAAAAABAAAARQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7LQAAAAAAALstAAAAAAAAAAAAAAAA8L8"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "ore"
					},
					"AwAAALstAAAAAAAAvC0AAAAAAAAAAAAAvC0AAAAAAAC9LQAAAAAAAAAAAAC9LQAAAAAAAL4tAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7LQAAAAAAALstAAAAAAAAAAAAAAAA8L8"
				],
				[
					60,
					1,
					"reindent",
					null,
					"AQAAAPktAAAAAAAA+y0AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5LQAAAAAAAPktAAAAAAAAAAAAAAAAW0A"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "PREFIX"
					},
					"BgAAAPstAAAAAAAA/C0AAAAAAAAAAAAA/C0AAAAAAAD9LQAAAAAAAAAAAAD9LQAAAAAAAP4tAAAAAAAAAAAAAP4tAAAAAAAA/y0AAAAAAAAAAAAA/y0AAAAAAAAALgAAAAAAAAAAAAAALgAAAAAAAAEuAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD7LQAAAAAAAPstAAAAAAAAAAAAAAAA8L8"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "\nGIT_"
					},
					"BgAAAAEuAAAAAAAAAi4AAAAAAAAAAAAAAi4AAAAAAAAELgAAAAAAAAAAAAAELgAAAAAAAAUuAAAAAAAAAAAAAAUuAAAAAAAABi4AAAAAAAAAAAAABi4AAAAAAAAHLgAAAAAAAAAAAAAHLgAAAAAAAAguAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABLgAAAAAAAAEuAAAAAAAAAAAAAAAA8L8"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": "Re"
					},
					"AgAAAAguAAAAAAAACS4AAAAAAAAAAAAACS4AAAAAAAAKLgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAILgAAAAAAAAguAAAAAAAAAAAAAAAA8L8"
				],
				[
					66,
					1,
					"left_delete",
					null,
					"AQAAAAkuAAAAAAAACS4AAAAAAAABAAAAZQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAKLgAAAAAAAAouAAAAAAAAAAAAAAAA8L8"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "E"
					},
					"AQAAAAkuAAAAAAAACi4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJLgAAAAAAAAkuAAAAAAAAAAAAAAAA8L8"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "P"
					},
					"AQAAAAouAAAAAAAACy4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAKLgAAAAAAAAouAAAAAAAAAAAAAAAA8L8"
				],
				[
					69,
					7,
					"left_delete",
					null,
					"BwAAAAouAAAAAAAACi4AAAAAAAABAAAAUAkuAAAAAAAACS4AAAAAAAABAAAARQguAAAAAAAACC4AAAAAAAABAAAAUgcuAAAAAAAABy4AAAAAAAABAAAAXwYuAAAAAAAABi4AAAAAAAABAAAAVAUuAAAAAAAABS4AAAAAAAABAAAASQQuAAAAAAAABC4AAAAAAAABAAAARw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALLgAAAAAAAAsuAAAAAAAAAAAAAAAA8L8"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": "GIT"
					},
					"AwAAAAQuAAAAAAAABS4AAAAAAAAAAAAABS4AAAAAAAAGLgAAAAAAAAAAAAAGLgAAAAAAAAcuAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAELgAAAAAAAAQuAAAAAAAAAAAAAAAA8L8"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAcuAAAAAAAACC4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAHLgAAAAAAAAcuAAAAAAAAAAAAAAAA8L8"
				],
				[
					72,
					1,
					"paste",
					null,
					"AQAAAAguAAAAAAAANy4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAILgAAAAAAAAguAAAAAAAAAAAAAAAA8L8"
				],
				[
					80,
					1,
					"paste",
					null,
					"AgAAAAQuAAAAAAAAEi4AAAAAAAAAAAAAEi4AAAAAAAASLgAAAAAAAAMAAABHSVQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAELgAAAAAAAAcuAAAAAAAAAAAAAAAA8L8"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEMuAAAAAAAARC4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABDLgAAAAAAAEMuAAAAAAAAAAAAAAAA8L8"
				],
				[
					91,
					1,
					"reindent",
					null,
					"AQAAAEMuAAAAAAAARS4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABDLgAAAAAAAEMuAAAAAAAAAAAAAAAAAAA"
				],
				[
					92,
					1,
					"paste_and_indent",
					null,
					"AQAAAEUuAAAAAAAATC4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABFLgAAAAAAAEUuAAAAAAAAAAAAAAAA8L8"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": " master"
					},
					"BwAAAEwuAAAAAAAATS4AAAAAAAAAAAAATS4AAAAAAABOLgAAAAAAAAAAAABOLgAAAAAAAE8uAAAAAAAAAAAAAE8uAAAAAAAAUC4AAAAAAAAAAAAAUC4AAAAAAABRLgAAAAAAAAAAAABRLgAAAAAAAFIuAAAAAAAAAAAAAFIuAAAAAAAAUy4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMLgAAAAAAAEwuAAAAAAAAAAAAAAAA8L8"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFMuAAAAAAAAVC4AAAAAAAAAAAAAVC4AAAAAAABWLgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABTLgAAAAAAAFMuAAAAAAAAAAAAAAAA8L8"
				],
				[
					100,
					1,
					"paste",
					null,
					"AQAAAFYuAAAAAAAAmC4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABWLgAAAAAAAFYuAAAAAAAAAAAAAAAA8L8"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAANctAAAAAAAA2C0AAAAAAAAAAAAA2C0AAAAAAADZLQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXLQAAAAAAANctAAAAAAAAAAAAAAAAAAA"
				],
				[
					108,
					1,
					"paste",
					null,
					"AQAAANgtAAAAAAAA/y0AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADYLQAAAAAAANgtAAAAAAAAAAAAAAAAAAA"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAANctAAAAAAAA2C0AAAAAAAAAAAAA2C0AAAAAAADZLQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXLQAAAAAAANctAAAAAAAAAAAAAAAAAAA"
				],
				[
					117,
					1,
					"paste",
					null,
					"AQAAANgtAAAAAAAA+C0AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADYLQAAAAAAANgtAAAAAAAAAAAAAAAAAAA"
				],
				[
					128,
					1,
					"paste",
					null,
					"AgAAAOUtAAAAAAAA7y0AAAAAAAAAAAAA7y0AAAAAAADvLQAAAAAAAAMAAABWTUE",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADlLQAAAAAAAOgtAAAAAAAAAAAAAAAA8L8"
				],
				[
					136,
					1,
					"insert",
					{
						"characters": "$"
					},
					"AgAAAJ8uAAAAAAAAoC4AAAAAAAAAAAAAoC4AAAAAAACgLgAAAAAAAAYAAABtYXN0ZXI",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACfLgAAAAAAAKUuAAAAAAAAAAAAAAAA8L8"
				],
				[
					137,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAKAuAAAAAAAAoi4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACgLgAAAAAAAKAuAAAAAAAAAAAAAAAA8L8"
				],
				[
					138,
					1,
					"paste",
					null,
					"AQAAAKEuAAAAAAAAvC4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChLgAAAAAAAKEuAAAAAAAAAAAAAAAA8L8"
				],
				[
					144,
					1,
					"paste",
					null,
					"AQAAAFMuAAAAAAAAeC4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABTLgAAAAAAAFMuAAAAAAAAAAAAAAAA8L8"
				],
				[
					150,
					1,
					"paste",
					null,
					"AgAAAAUuAAAAAAAADy4AAAAAAAAAAAAADy4AAAAAAAAPLgAAAAAAAAMAAABWTUE",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAFLgAAAAAAAAguAAAAAAAAAAAAAAAA8L8"
				],
				[
					158,
					1,
					"paste",
					null,
					"AgAAABcuAAAAAAAAIS4AAAAAAAAAAAAAIS4AAAAAAAAhLgAAAAAAABcAAAB2dWxrYW5fbWVtb3J5X2FsbG9jYXRvcg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAXLgAAAAAAAC4uAAAAAAAAAAAAAAAA8L8"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAE0uAAAAAAAATi4AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNLgAAAAAAAE0uAAAAAAAAAAAAAAAA8L8"
				],
				[
					169,
					1,
					"paste",
					null,
					"AgAAAGguAAAAAAAAeS4AAAAAAAAAAAAAeS4AAAAAAAB5LgAAAAAAAAoAAABWTUFfUFJFRklY",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoLgAAAAAAAHIuAAAAAAAAAAAAAAAA8L8"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACkvAAAAAAAAKi8AAAAAAAAAAAAAKi8AAAAAAAAsLwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAApLwAAAAAAACkvAAAAAAAAAAAAAAAA8L8"
				],
				[
					178,
					1,
					"paste",
					null,
					"AQAAACwvAAAAAAAATC8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAsLwAAAAAAACwvAAAAAAAAAAAAAAAA8L8"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": "\n\t"
					},
					"AwAAAEwvAAAAAAAATS8AAAAAAAAAAAAATS8AAAAAAABPLwAAAAAAAAAAAABPLwAAAAAAAFEvAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMLwAAAAAAAEwvAAAAAAAAAAAAAAAA8L8"
				],
				[
					180,
					1,
					"paste",
					null,
					"AQAAAFEvAAAAAAAAii8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABRLwAAAAAAAFEvAAAAAAAAAAAAAAAA8L8"
				],
				[
					186,
					1,
					"paste",
					null,
					"AgAAAGMvAAAAAAAAby8AAAAAAAAAAAAAby8AAAAAAABvLwAAAAAAAA8AAAAke1RCQl9JTkNMX0RJUn0",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjLwAAAAAAAHIvAAAAAAAAAAAAAAAA8L8"
				],
				[
					187,
					1,
					"insert",
					{
						"characters": "/nvvk"
					},
					"BQAAAG8vAAAAAAAAcC8AAAAAAAAAAAAAcC8AAAAAAABxLwAAAAAAAAAAAABxLwAAAAAAAHIvAAAAAAAAAAAAAHIvAAAAAAAAcy8AAAAAAAAAAAAAcy8AAAAAAAB0LwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABvLwAAAAAAAG8vAAAAAAAAAAAAAAAA8L8"
				],
				[
					195,
					1,
					"paste",
					null,
					"AgAAAHcvAAAAAAAAjC8AAAAAAAAAAAAAjC8AAAAAAACMLwAAAAAAAAgAAABERVNUX0RJUg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB3LwAAAAAAAH8vAAAAAAAAAAAAAAAA8L8"
				],
				[
					198,
					1,
					"insert",
					{
						"characters": "nvvk"
					},
					"BQAAAI4vAAAAAAAAjy8AAAAAAAAAAAAAjy8AAAAAAACPLwAAAAAAAAsAAABpbmNsdWRlL3RiYo8vAAAAAAAAkC8AAAAAAAAAAAAAkC8AAAAAAACRLwAAAAAAAAAAAACRLwAAAAAAAJIvAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACOLwAAAAAAAJkvAAAAAAAAAAAAAAAA8L8"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJIvAAAAAAAAky8AAAAAAAAAAAAAky8AAAAAAACXLwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACSLwAAAAAAAJIvAAAAAAAAAAAAAAAA8L8"
				],
				[
					204,
					1,
					"paste",
					null,
					"AQAAAJcvAAAAAAAA2C8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACXLwAAAAAAAJcvAAAAAAAAAAAAAAAA8L8"
				],
				[
					205,
					2,
					"left_delete",
					null,
					"AgAAANcvAAAAAAAA1y8AAAAAAAABAAAAa9YvAAAAAAAA1i8AAAAAAAABAAAAdg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADYLwAAAAAAANgvAAAAAAAAAAAAAAAA8L8"
				],
				[
					206,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAANYvAAAAAAAA1y8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADWLwAAAAAAANYvAAAAAAAAAAAAAAAA8L8"
				],
				[
					208,
					2,
					"right_delete",
					null,
					"AgAAALgvAAAAAAAAuC8AAAAAAAABAAAAdrgvAAAAAAAAuC8AAAAAAAABAAAAaw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4LwAAAAAAALgvAAAAAAAAAAAAAAAA8L8"
				],
				[
					209,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAALgvAAAAAAAAuS8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4LwAAAAAAALgvAAAAAAAAAAAAAAAA8L8"
				],
				[
					212,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANcvAAAAAAAA2C8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXLwAAAAAAANcvAAAAAAAAAAAAAAAA8L8"
				],
				[
					214,
					1,
					"reindent",
					null,
					"AQAAANcvAAAAAAAA2y8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXLwAAAAAAANcvAAAAAAAAAAAAAAAAAAA"
				],
				[
					215,
					1,
					"paste",
					null,
					"AQAAANsvAAAAAAAAHDAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADbLwAAAAAAANsvAAAAAAAAAAAAAAAA8L8"
				],
				[
					216,
					2,
					"left_delete",
					null,
					"AgAAABswAAAAAAAAGzAAAAAAAAABAAAAaxowAAAAAAAAGjAAAAAAAAABAAAAdg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcMAAAAAAAABwwAAAAAAAAAAAAAAAA8L8"
				],
				[
					217,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAABowAAAAAAAAGzAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAaMAAAAAAAABowAAAAAAAAAAAAAAAA8L8"
				],
				[
					220,
					2,
					"right_delete",
					null,
					"AgAAAPwvAAAAAAAA/C8AAAAAAAABAAAAdvwvAAAAAAAA/C8AAAAAAAABAAAAaw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD8LwAAAAAAAPwvAAAAAAAAAAAAAAAA8L8"
				],
				[
					221,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAAPwvAAAAAAAA/S8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD8LwAAAAAAAPwvAAAAAAAAAAAAAAAA8L8"
				],
				[
					224,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABswAAAAAAAAHDAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbMAAAAAAAABswAAAAAAAAAAAAAAAA8L8"
				],
				[
					226,
					1,
					"reindent",
					null,
					"AQAAABswAAAAAAAAHzAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbMAAAAAAAABswAAAAAAAAAAAAAAAAAAA"
				],
				[
					227,
					1,
					"paste",
					null,
					"AQAAAB8wAAAAAAAAYDAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfMAAAAAAAAB8wAAAAAAAAAAAAAAAA8L8"
				],
				[
					228,
					2,
					"left_delete",
					null,
					"AgAAAF8wAAAAAAAAXzAAAAAAAAABAAAAa14wAAAAAAAAXjAAAAAAAAABAAAAdg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABgMAAAAAAAAGAwAAAAAAAAAAAAAAAA8L8"
				],
				[
					229,
					1,
					"insert",
					{
						"characters": "math"
					},
					"BAAAAF4wAAAAAAAAXzAAAAAAAAAAAAAAXzAAAAAAAABgMAAAAAAAAAAAAABgMAAAAAAAAGEwAAAAAAAAAAAAAGEwAAAAAAAAYjAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeMAAAAAAAAF4wAAAAAAAAAAAAAAAA8L8"
				],
				[
					237,
					1,
					"paste",
					null,
					"AgAAAD4wAAAAAAAARDAAAAAAAAAAAAAARDAAAAAAAABEMAAAAAAAAAQAAABudnZr",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABCMAAAAAAAAD4wAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "CMakeLists.txt",
			"settings":
			{
				"buffer_size": 5288,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "deps"
					},
					"BQAAAO0SAAAAAAAA7hIAAAAAAAAAAAAA7hIAAAAAAADuEgAAAAAAAA4AAABidWlsZF9leHRlcm5hbO4SAAAAAAAA7xIAAAAAAAAAAAAA7xIAAAAAAADwEgAAAAAAAAAAAADwEgAAAAAAAPESAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7RIAAAAAAAD7EgAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAB0DAAAAAAAAHgMAAAAAAAAAAAAAHgMAAAAAAAAfAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHQMAAAAAAAAdAwAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"paste",
					null,
					"AQAAAB8DAAAAAAAAmAMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHwMAAAAAAAAfAwAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\n#"
					},
					"AgAAAB4DAAAAAAAAHwMAAAAAAAAAAAAAHwMAAAAAAAAgAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHgMAAAAAAAAeAwAAAAAAAAAAAAAAACJA"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " ccache"
					},
					"BwAAACADAAAAAAAAIQMAAAAAAAAAAAAAIQMAAAAAAAAiAwAAAAAAAAAAAAAiAwAAAAAAACMDAAAAAAAAAAAAACMDAAAAAAAAJAMAAAAAAAAAAAAAJAMAAAAAAAAlAwAAAAAAAAAAAAAlAwAAAAAAACYDAAAAAAAAAAAAACYDAAAAAAAAJwMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIAMAAAAAAAAgAwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 6555,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "deps"
					},
					"BQAAAC4AAAAAAAAALwAAAAAAAAAAAAAALwAAAAAAAAAvAAAAAAAAAA4AAABidWlsZF9leHRlcm5hbC8AAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAAAxAAAAAAAAAAAAAAAxAAAAAAAAADIAAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALgAAAAAAAAA8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"",
					null,
					"CQAAAC4UAAAAAAAAPRQAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUlAPAAAAAAAAXw8AAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUtwOAAAAAAAA6w4AAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUuYNAAAAAAAA9Q0AAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUj0IAAAAAAAATAgAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUtwHAAAAAAAA6wcAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUmMFAAAAAAAAcgUAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUnIEAAAAAAAAgQQAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUgQAAAAAAAAAEwAAAAAAAAATAAAARVhURVJOQUxTX0JVSUxEX0RJUg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABAAAAAAAAAAXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAABkEAAAAAAAAGgQAAAAAAAAAAAAAGgQAAAAAAAAeBAAAAAAAAAAAAAAeBAAAAAAAAB8EAAAAAAAAAAAAAB8EAAAAAAAAIwQAAAAAAAAAAAAAGgQAAAAAAAAaBAAAAAAAAAQAAAAgICAg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAZBAAAAAAAABkEAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"paste",
					null,
					"AQAAAB8EAAAAAAAAOgQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfBAAAAAAAAB8EAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "nvvk/"
					},
					"BQAAADoEAAAAAAAAOwQAAAAAAAAAAAAAOwQAAAAAAAA8BAAAAAAAAAAAAAA8BAAAAAAAAD0EAAAAAAAAAAAAAD0EAAAAAAAAPgQAAAAAAAAAAAAAPgQAAAAAAAA/BAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6BAAAAAAAADoEAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"paste",
					null,
					"AQAAAD8EAAAAAAAAUQQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA/BAAAAAAAAD8EAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAADEAAAAAAAAAMgAAAAAAAAAAAAAAMgAAAAAAAAAzAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAxAAAAAAAAADEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"paste",
					null,
					"AQAAADIAAAAAAAAAYgAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAyAAAAAAAAADIAAAAAAAAAAAAAAAAAAAA"
				],
				[
					29,
					1,
					"paste",
					null,
					"AgAAAEcAAAAAAAAAZgAAAAAAAAAAAAAAZgAAAAAAAABmAAAAAAAAABkAAAAke0ZSRUVJTUFHRV9JTkNMVURFX0RJUlN9",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABHAAAAAAAAAGAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGYAAAAAAAAAZwAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABmAAAAAAAAAGYAAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"right_delete",
					null,
					"AQAAAGcAAAAAAAAAZwAAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABnAAAAAAAAAGcAAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGcAAAAAAAAAaAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABnAAAAAAAAAGcAAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "\n\t"
					},
					"AgAAAEcAAAAAAAAASAAAAAAAAAAAAAAASAAAAAAAAABMAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABHAAAAAAAAAEcAAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"reindent",
					null,
					"AQAAAGwAAAAAAAAAcAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABsAAAAAAAAAGwAAAAAAAAAAAAAAAAAQkA"
				],
				[
					43,
					1,
					"paste",
					null,
					"AQAAAHAAAAAAAAAAjwAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABwAAAAAAAAAHAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					2,
					"left_delete",
					null,
					"AgAAAI4AAAAAAAAAjgAAAAAAAAABAAAAa40AAAAAAAAAjQAAAAAAAAABAAAAdg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPAAAAAAAAAI8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAAI0AAAAAAAAAjgAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNAAAAAAAAAI0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEwAAAAAAAAATQAAAAAAAAAAAAAATQAAAAAAAABRAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMAAAAAAAAAEwAAAAAAAAAAAAAAAAAQkA"
				],
				[
					54,
					1,
					"paste",
					null,
					"AQAAAEwAAAAAAAAAYQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMAAAAAAAAAEwAAAAAAAAAAAAAAAAAQkA"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "/deps"
					},
					"BQAAAGEAAAAAAAAAYgAAAAAAAAAAAAAAYgAAAAAAAABjAAAAAAAAAAAAAABjAAAAAAAAAGQAAAAAAAAAAAAAAGQAAAAAAAAAZQAAAAAAAAAAAAAAZQAAAAAAAABmAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABhAAAAAAAAAGEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAK0AAAAAAAAArgAAAAAAAAAAAAAArgAAAAAAAACyAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtAAAAAAAAAK0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					62,
					1,
					"paste",
					null,
					"AQAAALIAAAAAAAAA0AAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyAAAAAAAAALIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					63,
					1,
					"left_delete",
					null,
					"AQAAAM8AAAAAAAAAzwAAAAAAAAABAAAAcA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADQAAAAAAAAANAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAAM8AAAAAAAAA0AAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADPAAAAAAAAAM8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPMEAAAAAAAA9AQAAAAAAAAAAAAA9AQAAAAAAAD4BAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADzBAAAAAAAAPMEAAAAAAAAAAAAAAAA8L8"
				],
				[
					72,
					1,
					"paste",
					null,
					"AQAAAPgEAAAAAAAAKgUAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD4BAAAAAAAAPgEAAAAAAAAAAAAAAAA8L8"
				],
				[
					78,
					1,
					"paste",
					null,
					"AgAAABgFAAAAAAAAMAUAAAAAAAAAAAAAMAUAAAAAAAAwBQAAAAAAAA4AAAByYXl0cmFjZUtIUl92aw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAYBQAAAAAAACYFAAAAAAAAAAAAAAAA8L8"
				],
				[
					79,
					4,
					"right_delete",
					null,
					"BAAAADAFAAAAAAAAMAUAAAAAAAABAAAALjAFAAAAAAAAMAUAAAAAAAABAAAAYzAFAAAAAAAAMAUAAAAAAAABAAAAcDAFAAAAAAAAMAUAAAAAAAABAAAAcA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwBQAAAAAAADAFAAAAAAAAAAAAAAAA8L8"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADAFAAAAAAAAMQUAAAAAAAAAAAAAMQUAAAAAAAA1BQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwBQAAAAAAADAFAAAAAAAAAAAAAAAA8L8"
				],
				[
					85,
					1,
					"paste",
					null,
					"AQAAADUFAAAAAAAARAUAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA1BQAAAAAAADUFAAAAAAAAAAAAAAAA8L8"
				],
				[
					91,
					1,
					"paste",
					null,
					"AQAAADUFAAAAAAAAVQUAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA1BQAAAAAAADUFAAAAAAAAAAAAAAAAQkA"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGQFAAAAAAAAZQUAAAAAAAAAAAAAZQUAAAAAAABpBQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABkBQAAAAAAAGQFAAAAAAAAAAAAAAAA8L8"
				],
				[
					97,
					1,
					"paste",
					null,
					"AQAAAGkFAAAAAAAAggUAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABpBQAAAAAAAGkFAAAAAAAAAAAAAAAA8L8"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIIFAAAAAAAAgwUAAAAAAAAAAAAAgwUAAAAAAACHBQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCBQAAAAAAAIIFAAAAAAAAAAAAAAAA8L8"
				],
				[
					103,
					1,
					"paste",
					null,
					"AQAAAIcFAAAAAAAAmAUAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACHBQAAAAAAAIcFAAAAAAAAAAAAAAAA8L8"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJgFAAAAAAAAmQUAAAAAAAAAAAAAmQUAAAAAAACdBQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACYBQAAAAAAAJgFAAAAAAAAAAAAAAAA8L8"
				],
				[
					109,
					1,
					"paste",
					null,
					"AQAAAJ0FAAAAAAAAsgUAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdBQAAAAAAAJ0FAAAAAAAAAAAAAAAA8L8"
				],
				[
					110,
					21,
					"left_delete",
					null,
					"FQAAALEFAAAAAAAAsQUAAAAAAAABAAAAcLAFAAAAAAAAsAUAAAAAAAABAAAAcK8FAAAAAAAArwUAAAAAAAABAAAAY64FAAAAAAAArgUAAAAAAAABAAAALq0FAAAAAAAArQUAAAAAAAABAAAAa6wFAAAAAAAArAUAAAAAAAABAAAAdqsFAAAAAAAAqwUAAAAAAAABAAAAX6oFAAAAAAAAqgUAAAAAAAABAAAAc6kFAAAAAAAAqQUAAAAAAAABAAAAdKgFAAAAAAAAqAUAAAAAAAABAAAAZacFAAAAAAAApwUAAAAAAAABAAAAc6YFAAAAAAAApgUAAAAAAAABAAAAcqUFAAAAAAAApQUAAAAAAAABAAAAb6QFAAAAAAAApAUAAAAAAAABAAAAdKMFAAAAAAAAowUAAAAAAAABAAAAcKIFAAAAAAAAogUAAAAAAAABAAAAaaEFAAAAAAAAoQUAAAAAAAABAAAAcqAFAAAAAAAAoAUAAAAAAAABAAAAY58FAAAAAAAAnwUAAAAAAAABAAAAc54FAAAAAAAAngUAAAAAAAABAAAAZZ0FAAAAAAAAnQUAAAAAAAABAAAAZA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyBQAAAAAAALIFAAAAAAAAAAAAAAAA8L8"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AwAAAIcFAAAAAAAAiAUAAAAAAAAAAAAAmgUAAAAAAACaBQAAAAAAAAQAAAAgICAgiAUAAAAAAACJBQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACHBQAAAAAAAIcFAAAAAAAAAAAAAAAAQkA"
				],
				[
					113,
					2,
					"left_delete",
					null,
					"AgAAAIgFAAAAAAAAiAUAAAAAAAABAAAAL4cFAAAAAAAAhwUAAAAAAAABAAAALw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJBQAAAAAAAIkFAAAAAAAAAAAAAAAA8L8"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAIcFAAAAAAAAiAUAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACHBQAAAAAAAIcFAAAAAAAAAAAAAAAA8L8"
				],
				[
					119,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIIFAAAAAAAAgwUAAAAAAAAAAAAAgwUAAAAAAACHBQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCBQAAAAAAAIIFAAAAAAAAAAAAAAAA8L8"
				],
				[
					120,
					1,
					"paste",
					null,
					"AQAAAIcFAAAAAAAAmAUAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACHBQAAAAAAAIcFAAAAAAAAAAAAAAAA8L8"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIIFAAAAAAAAgwUAAAAAAAAAAAAAgwUAAAAAAACHBQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCBQAAAAAAAIIFAAAAAAAAAAAAAAAA8L8"
				],
				[
					126,
					1,
					"paste",
					null,
					"AQAAAIcFAAAAAAAApAUAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACHBQAAAAAAAIcFAAAAAAAAAAAAAAAA8L8"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKQFAAAAAAAApQUAAAAAAAAAAAAApQUAAAAAAACpBQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACkBQAAAAAAAKQFAAAAAAAAAAAAAAAA8L8"
				],
				[
					134,
					1,
					"paste",
					null,
					"AQAAAKkFAAAAAAAAvAUAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpBQAAAAAAAKkFAAAAAAAAAAAAAAAA8L8"
				],
				[
					138,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMEFAAAAAAAAwgUAAAAAAAAAAAAAwgUAAAAAAADGBQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBBQAAAAAAAMEFAAAAAAAAAAAAAAAA8L8"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIcFAAAAAAAAiAUAAAAAAAAAAAAAiAUAAAAAAACMBQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACHBQAAAAAAAIcFAAAAAAAAAAAAAAAAQkA"
				],
				[
					151,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMEFAAAAAAAAwgUAAAAAAAAAAAAAwgUAAAAAAADGBQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBBQAAAAAAAMEFAAAAAAAAAAAAAAAA8L8"
				],
				[
					152,
					1,
					"paste",
					null,
					"AQAAAMYFAAAAAAAA1QUAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADGBQAAAAAAAMYFAAAAAAAAAAAAAAAA8L8"
				],
				[
					158,
					1,
					"paste",
					null,
					"AQAAAGkFAAAAAAAAiQUAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABpBQAAAAAAAGkFAAAAAAAAAAAAAAAA8L8"
				],
				[
					161,
					1,
					"paste",
					null,
					"AQAAAKwFAAAAAAAAzAUAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsBQAAAAAAAKwFAAAAAAAAAAAAAAAA8L8"
				],
				[
					164,
					1,
					"paste",
					null,
					"AQAAAO4FAAAAAAAADgYAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuBQAAAAAAAO4FAAAAAAAAAAAAAAAA8L8"
				],
				[
					167,
					1,
					"paste",
					null,
					"AQAAACYGAAAAAAAARgYAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAmBgAAAAAAACYGAAAAAAAAAAAAAAAA8L8"
				],
				[
					172,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKIFAAAAAAAAowUAAAAAAAAAAAAAowUAAAAAAACnBQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACiBQAAAAAAAKIFAAAAAAAAAAAAAAAA8L8"
				],
				[
					173,
					1,
					"paste",
					null,
					"AQAAAKcFAAAAAAAAwgUAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACnBQAAAAAAAKcFAAAAAAAAAAAAAAAA8L8"
				],
				[
					179,
					1,
					"paste",
					null,
					"AQAAAKcFAAAAAAAAxwUAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACnBQAAAAAAAKcFAAAAAAAAAAAAAAAA8L8"
				],
				[
					184,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJUGAAAAAAAAlgYAAAAAAAAAAAAAlgYAAAAAAACaBgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACVBgAAAAAAAJUGAAAAAAAAAAAAAAAA8L8"
				],
				[
					185,
					1,
					"paste",
					null,
					"AQAAAJoGAAAAAAAApwYAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaBgAAAAAAAJoGAAAAAAAAAAAAAAAA8L8"
				],
				[
					191,
					1,
					"paste",
					null,
					"AQAAAJoGAAAAAAAAugYAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaBgAAAAAAAJoGAAAAAAAAAAAAAAAA8L8"
				],
				[
					199,
					1,
					"paste",
					null,
					"AgAAAOcGAAAAAAAABwcAAAAAAAAAAAAABwcAAAAAAAAHBwAAAAAAAAEAAAAj",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADoBgAAAAAAAOcGAAAAAAAAAAAAAAAA8L8"
				],
				[
					202,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAANEGAAAAAAAA0gYAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADRBgAAAAAAANEGAAAAAAAAAAAAAAAA8L8"
				],
				[
					206,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOcFAAAAAAAA6AUAAAAAAAAAAAAA6AUAAAAAAADsBQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnBQAAAAAAAOcFAAAAAAAAAAAAAABIgkA"
				],
				[
					207,
					1,
					"paste",
					null,
					"AQAAAOwFAAAAAAAAAwYAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsBQAAAAAAAOwFAAAAAAAAAAAAAAAA8L8"
				],
				[
					213,
					1,
					"paste",
					null,
					"AQAAAOwFAAAAAAAADAYAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsBQAAAAAAAOwFAAAAAAAAAAAAAAAA8L8"
				],
				[
					216,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAB8HAAAAAAAAIAcAAAAAAAAAAAAAIAcAAAAAAAAkBwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfBwAAAAAAAB8HAAAAAAAAAAAAAAAA8L8"
				],
				[
					217,
					1,
					"paste",
					null,
					"AQAAACQHAAAAAAAAMAcAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkBwAAAAAAACQHAAAAAAAAAAAAAAAA8L8"
				],
				[
					224,
					1,
					"paste",
					null,
					"AQAAACQHAAAAAAAARAcAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkBwAAAAAAACQHAAAAAAAAAAAAAAAA8L8"
				],
				[
					230,
					1,
					"paste",
					null,
					"AgAAAA0HAAAAAAAALQcAAAAAAAAAAAAALQcAAAAAAAAtBwAAAAAAAAEAAAAj",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAANBwAAAAAAAA4HAAAAAAAAAAAAAAAA8L8"
				],
				[
					233,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAKUHAAAAAAAApgcAAAAAAAAAAAAApgcAAAAAAACqBwAAAAAAAAAAAACqBwAAAAAAAKsHAAAAAAAAAAAAAKsHAAAAAAAArwcAAAAAAAAAAAAApgcAAAAAAACmBwAAAAAAAAQAAAAgICAg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClBwAAAAAAAKUHAAAAAAAAAAAAAAAA8L8"
				],
				[
					234,
					1,
					"paste",
					null,
					"AQAAAKsHAAAAAAAAugcAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACrBwAAAAAAAKsHAAAAAAAAAAAAAAAA8L8"
				],
				[
					240,
					1,
					"paste",
					null,
					"AQAAAKsHAAAAAAAAxgcAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACrBwAAAAAAAKsHAAAAAAAAAAAAAAAA8L8"
				],
				[
					250,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGYAAAAAAAAAZwAAAAAAAAAAAAAAZwAAAAAAAABrAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABmAAAAAAAAAGYAAAAAAAAAAAAAAAAA8L8"
				],
				[
					251,
					1,
					"paste",
					null,
					"AQAAAGsAAAAAAAAAhQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrAAAAAAAAAGsAAAAAAAAAAAAAAAAA8L8"
				],
				[
					252,
					1,
					"insert",
					{
						"characters": "/include/V"
					},
					"CgAAAIUAAAAAAAAAhgAAAAAAAAAAAAAAhgAAAAAAAACHAAAAAAAAAAAAAACHAAAAAAAAAIgAAAAAAAAAAAAAAIgAAAAAAAAAiQAAAAAAAAAAAAAAiQAAAAAAAACKAAAAAAAAAAAAAACKAAAAAAAAAIsAAAAAAAAAAAAAAIsAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACNAAAAAAAAAAAAAACNAAAAAAAAAI4AAAAAAAAAAAAAAI4AAAAAAAAAjwAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACFAAAAAAAAAIUAAAAAAAAAAAAAAAAA8L8"
				],
				[
					253,
					1,
					"insert",
					{
						"characters": "ulak"
					},
					"BAAAAI8AAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACRAAAAAAAAAAAAAACRAAAAAAAAAJIAAAAAAAAAAAAAAJIAAAAAAAAAkwAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPAAAAAAAAAI8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					254,
					2,
					"left_delete",
					null,
					"AgAAAJIAAAAAAAAAkgAAAAAAAAABAAAAa5EAAAAAAAAAkQAAAAAAAAABAAAAYQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACTAAAAAAAAAJMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					255,
					1,
					"insert",
					{
						"characters": "kanMemory"
					},
					"CQAAAJEAAAAAAAAAkgAAAAAAAAAAAAAAkgAAAAAAAACTAAAAAAAAAAAAAACTAAAAAAAAAJQAAAAAAAAAAAAAAJQAAAAAAAAAlQAAAAAAAAAAAAAAlQAAAAAAAACWAAAAAAAAAAAAAACWAAAAAAAAAJcAAAAAAAAAAAAAAJcAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAACZAAAAAAAAAAAAAACZAAAAAAAAAJoAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACRAAAAAAAAAJEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					256,
					1,
					"insert",
					{
						"characters": "Allocator"
					},
					"CQAAAJoAAAAAAAAAmwAAAAAAAAAAAAAAmwAAAAAAAACcAAAAAAAAAAAAAACcAAAAAAAAAJ0AAAAAAAAAAAAAAJ0AAAAAAAAAngAAAAAAAAAAAAAAngAAAAAAAACfAAAAAAAAAAAAAACfAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAAoQAAAAAAAAAAAAAAoQAAAAAAAACiAAAAAAAAAAAAAACiAAAAAAAAAKMAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaAAAAAAAAAJoAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/RenderPasses/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 4214,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAMkAAAAAAAAAygAAAAAAAAAAAAAAygAAAAAAAADLAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADJAAAAAAAAAMkAAAAAAAAAAAAAAABQeUA"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAAMoAAAAAAAAA/gAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKAAAAAAAAAMoAAAAAAAAAAAAAAAAAAAA"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAP8AAAAAAAAAAAEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/AAAAAAAAAP8AAAAAAAAAAAAAAADgcEA"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAF0AAAAAAAAAXgAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABdAAAAAAAAAF0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAP8AAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAEAQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/AAAAAAAAAP8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"paste",
					null,
					"AQAAAAQBAAAAAAAAHgEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAEAQAAAAAAAAQBAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "/nvp"
					},
					"BAAAAB4BAAAAAAAAHwEAAAAAAAAAAAAAHwEAAAAAAAAgAQAAAAAAAAAAAAAgAQAAAAAAACEBAAAAAAAAAAAAACEBAAAAAAAAIgEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAeAQAAAAAAAB4BAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAP8AAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAEAQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/AAAAAAAAAP8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"paste",
					null,
					"AQAAAAQBAAAAAAAAPAEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAEAQAAAAAAAAQBAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/lava_lib/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 1294,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAWQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADQAAAAAAAAANQAAAAAAAAAAAAAANQAAAAAAAAA5AAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA0AAAAAAAAADQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"paste",
					null,
					"AQAAADkAAAAAAAAAcQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5AAAAAAAAADkAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/lava_cmd/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 1782,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAGMAAAAAAAAAZAAAAAAAAAAAAAAAZAAAAAAAAABlAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjAAAAAAAAAGMAAAAAAAAAAAAAAAAAAAA"
				],
				[
					4,
					1,
					"paste",
					null,
					"AQAAAGQAAAAAAAAAvQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABkAAAAAAAAAGQAAAAAAAAAAAAAAAAAAAA"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJgAAAAAAAAAmQAAAAAAAAAAAAAAmQAAAAAAAACdAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACYAAAAAAAAAJgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"paste",
					null,
					"AQAAAJ0AAAAAAAAA1QAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdAAAAAAAAAJ0AAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "third_party/vma_install_files.cmake",
			"redo_stack":
			[
				[
					7,
					1,
					"left_delete",
					null,
					"AQAAAJwAAAAAAAAAnQAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnAAAAAAAAACcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJwAAAAAAAAAnAAAAAAAAAABAAAACg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnQAAAAAAAACdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": "src"
					},
					"BAAAAJsAAAAAAAAAmwAAAAAAAAABAAAAY5oAAAAAAAAAmgAAAAAAAAABAAAAcpoAAAAAAAAAoQAAAAAAAAAAAAAAmQAAAAAAAACZAAAAAAAAAAEAAABz",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnAAAAAAAAACcAAAAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 208,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "inlucde"
					},
					"CAAAAJkAAAAAAAAAmgAAAAAAAAAAAAAAmgAAAAAAAACaAAAAAAAAAAMAAABzcmOaAAAAAAAAAJsAAAAAAAAAAAAAAJsAAAAAAAAAnAAAAAAAAAAAAAAAnAAAAAAAAACdAAAAAAAAAAAAAACdAAAAAAAAAJ4AAAAAAAAAAAAAAJ4AAAAAAAAAnwAAAAAAAAAAAAAAnwAAAAAAAACgAAAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZAAAAAAAAAJwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAAJsAAAAAAAAAnAAAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACbAAAAAAAAAJsAAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"right_delete",
					null,
					"AQAAAJ4AAAAAAAAAngAAAAAAAAABAAAAYw",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACeAAAAAAAAAJ4AAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "//\n// Copyright (c) 2017-2021 Advanced Micro Devices, Inc. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n#ifndef AMD_VULKAN_MEMORY_ALLOCATOR_H\n#define AMD_VULKAN_MEMORY_ALLOCATOR_H\n\n/** \\mainpage Vulkan Memory Allocator\n\n<b>Version 3.0.0-development</b> (2021-06-21)\n\nCopyright (c) 2017-2021 Advanced Micro Devices, Inc. All rights reserved. \\n\nLicense: MIT\n\nDocumentation of all members: vk_mem_alloc.h\n\n\\section main_table_of_contents Table of contents\n\n- <b>User guide</b>\n  - \\subpage quick_start\n    - [Project setup](@ref quick_start_project_setup)\n    - [Initialization](@ref quick_start_initialization)\n    - [Resource allocation](@ref quick_start_resource_allocation)\n  - \\subpage choosing_memory_type\n    - [Usage](@ref choosing_memory_type_usage)\n    - [Required and preferred flags](@ref choosing_memory_type_required_preferred_flags)\n    - [Explicit memory types](@ref choosing_memory_type_explicit_memory_types)\n    - [Custom memory pools](@ref choosing_memory_type_custom_memory_pools)\n    - [Dedicated allocations](@ref choosing_memory_type_dedicated_allocations)\n  - \\subpage memory_mapping\n    - [Mapping functions](@ref memory_mapping_mapping_functions)\n    - [Persistently mapped memory](@ref memory_mapping_persistently_mapped_memory)\n    - [Cache flush and invalidate](@ref memory_mapping_cache_control)\n    - [Finding out if memory is mappable](@ref memory_mapping_finding_if_memory_mappable)\n  - \\subpage staying_within_budget\n    - [Querying for budget](@ref staying_within_budget_querying_for_budget)\n    - [Controlling memory usage](@ref staying_within_budget_controlling_memory_usage)\n  - \\subpage resource_aliasing\n  - \\subpage custom_memory_pools\n    - [Choosing memory type index](@ref custom_memory_pools_MemTypeIndex)\n    - [Linear allocation algorithm](@ref linear_algorithm)\n      - [Free-at-once](@ref linear_algorithm_free_at_once)\n      - [Stack](@ref linear_algorithm_stack)\n      - [Double stack](@ref linear_algorithm_double_stack)\n      - [Ring buffer](@ref linear_algorithm_ring_buffer)\n    - [Buddy allocation algorithm](@ref buddy_algorithm)\n  - \\subpage defragmentation\n      - [Defragmenting CPU memory](@ref defragmentation_cpu)\n      - [Defragmenting GPU memory](@ref defragmentation_gpu)\n      - [Additional notes](@ref defragmentation_additional_notes)\n      - [Writing custom allocation algorithm](@ref defragmentation_custom_algorithm)\n  - \\subpage lost_allocations\n  - \\subpage statistics\n    - [Numeric statistics](@ref statistics_numeric_statistics)\n    - [JSON dump](@ref statistics_json_dump)\n  - \\subpage allocation_annotation\n    - [Allocation user data](@ref allocation_user_data)\n    - [Allocation names](@ref allocation_names)\n  - \\subpage virtual_allocator\n  - \\subpage debugging_memory_usage\n    - [Memory initialization](@ref debugging_memory_usage_initialization)\n    - [Margins](@ref debugging_memory_usage_margins)\n    - [Corruption detection](@ref debugging_memory_usage_corruption_detection)\n  - \\subpage record_and_replay\n  - \\subpage opengl_interop\n- \\subpage usage_patterns\n  - [Common mistakes](@ref usage_patterns_common_mistakes)\n  - [Simple patterns](@ref usage_patterns_simple)\n  - [Advanced patterns](@ref usage_patterns_advanced)\n- \\subpage configuration\n  - [Pointers to Vulkan functions](@ref config_Vulkan_functions)\n  - [Custom host memory allocator](@ref custom_memory_allocator)\n  - [Device memory allocation callbacks](@ref allocation_callbacks)\n  - [Device heap memory limit](@ref heap_memory_limit)\n  - \\subpage vk_khr_dedicated_allocation\n  - \\subpage enabling_buffer_device_address\n  - \\subpage vk_amd_device_coherent_memory\n- \\subpage general_considerations\n  - [Thread safety](@ref general_considerations_thread_safety)\n  - [Validation layer warnings](@ref general_considerations_validation_layer_warnings)\n  - [Allocation algorithm](@ref general_considerations_allocation_algorithm)\n  - [Features not supported](@ref general_considerations_features_not_supported)\n\n\\section main_see_also See also\n\n- [Product page on GPUOpen](https://gpuopen.com/gaming-product/vulkan-memory-allocator/)\n- [Source repository on GitHub](https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator)\n*/\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/*\nDefine this macro to 0/1 to disable/enable support for recording functionality,\navailable through VmaAllocatorCreateInfo::pRecordSettings.\n*/\n#ifndef VMA_RECORDING_ENABLED\n    #define VMA_RECORDING_ENABLED 0\n#endif\n\n#if defined(__ANDROID__) && defined(VK_NO_PROTOTYPES) && VMA_STATIC_VULKAN_FUNCTIONS\n    extern PFN_vkGetInstanceProcAddr vkGetInstanceProcAddr;\n    extern PFN_vkGetDeviceProcAddr vkGetDeviceProcAddr;\n    extern PFN_vkGetPhysicalDeviceProperties vkGetPhysicalDeviceProperties;\n    extern PFN_vkGetPhysicalDeviceMemoryProperties vkGetPhysicalDeviceMemoryProperties;\n    extern PFN_vkAllocateMemory vkAllocateMemory;\n    extern PFN_vkFreeMemory vkFreeMemory;\n    extern PFN_vkMapMemory vkMapMemory;\n    extern PFN_vkUnmapMemory vkUnmapMemory;\n    extern PFN_vkFlushMappedMemoryRanges vkFlushMappedMemoryRanges;\n    extern PFN_vkInvalidateMappedMemoryRanges vkInvalidateMappedMemoryRanges;\n    extern PFN_vkBindBufferMemory vkBindBufferMemory;\n    extern PFN_vkBindImageMemory vkBindImageMemory;\n    extern PFN_vkGetBufferMemoryRequirements vkGetBufferMemoryRequirements;\n    extern PFN_vkGetImageMemoryRequirements vkGetImageMemoryRequirements;\n    extern PFN_vkCreateBuffer vkCreateBuffer;\n    extern PFN_vkDestroyBuffer vkDestroyBuffer;\n    extern PFN_vkCreateImage vkCreateImage;\n    extern PFN_vkDestroyImage vkDestroyImage;\n    extern PFN_vkCmdCopyBuffer vkCmdCopyBuffer;\n    #if VMA_VULKAN_VERSION >= 1001000\n        extern PFN_vkGetBufferMemoryRequirements2 vkGetBufferMemoryRequirements2;\n        extern PFN_vkGetImageMemoryRequirements2 vkGetImageMemoryRequirements2;\n        extern PFN_vkBindBufferMemory2 vkBindBufferMemory2;\n        extern PFN_vkBindImageMemory2 vkBindImageMemory2;\n        extern PFN_vkGetPhysicalDeviceMemoryProperties2 vkGetPhysicalDeviceMemoryProperties2;\n    #endif // #if VMA_VULKAN_VERSION >= 1001000\n#endif // #if defined(__ANDROID__) && VMA_STATIC_VULKAN_FUNCTIONS && VK_NO_PROTOTYPES\n\n#ifndef VULKAN_H_\n    #include <vulkan/vulkan.h>\n#endif\n\n#if !defined(VK_VERSION_1_2)\n    // This one is tricky. Vulkan specification defines this code as available since\n    // Vulkan 1.0, but doesn't actually define it in Vulkan SDK earlier than 1.2.131.\n    // See pull request #207.\n    #define VK_ERROR_UNKNOWN ((VkResult)-13)\n#endif\n\n// Define this macro to declare maximum supported Vulkan version in format AAABBBCCC,\n// where AAA = major, BBB = minor, CCC = patch.\n// If you want to use version > 1.0, it still needs to be enabled via VmaAllocatorCreateInfo::vulkanApiVersion.\n#if !defined(VMA_VULKAN_VERSION)\n    #if defined(VK_VERSION_1_2)\n        #define VMA_VULKAN_VERSION 1002000\n    #elif defined(VK_VERSION_1_1)\n        #define VMA_VULKAN_VERSION 1001000\n    #else\n        #define VMA_VULKAN_VERSION 1000000\n    #endif\n#endif\n\n#if !defined(VMA_DEDICATED_ALLOCATION)\n    #if VK_KHR_get_memory_requirements2 && VK_KHR_dedicated_allocation\n        #define VMA_DEDICATED_ALLOCATION 1\n    #else\n        #define VMA_DEDICATED_ALLOCATION 0\n    #endif\n#endif\n\n#if !defined(VMA_BIND_MEMORY2)\n    #if VK_KHR_bind_memory2\n        #define VMA_BIND_MEMORY2 1\n    #else\n        #define VMA_BIND_MEMORY2 0\n    #endif\n#endif\n\n#if !defined(VMA_MEMORY_BUDGET)\n    #if VK_EXT_memory_budget && (VK_KHR_get_physical_device_properties2 || VMA_VULKAN_VERSION >= 1001000)\n        #define VMA_MEMORY_BUDGET 1\n    #else\n        #define VMA_MEMORY_BUDGET 0\n    #endif\n#endif\n\n// Defined to 1 when VK_KHR_buffer_device_address device extension or equivalent core Vulkan 1.2 feature is defined in its headers.\n#if !defined(VMA_BUFFER_DEVICE_ADDRESS)\n    #if VK_KHR_buffer_device_address || VMA_VULKAN_VERSION >= 1002000\n        #define VMA_BUFFER_DEVICE_ADDRESS 1\n    #else\n        #define VMA_BUFFER_DEVICE_ADDRESS 0\n    #endif\n#endif\n\n// Defined to 1 when VK_EXT_memory_priority device extension is defined in Vulkan headers.\n#if !defined(VMA_MEMORY_PRIORITY)\n    #if VK_EXT_memory_priority\n        #define VMA_MEMORY_PRIORITY 1\n    #else\n        #define VMA_MEMORY_PRIORITY 0\n    #endif\n#endif\n\n// Defined to 1 when VK_KHR_external_memory device extension is defined in Vulkan headers.\n#if !defined(VMA_EXTERNAL_MEMORY)\n    #if VK_KHR_external_memory\n        #define VMA_EXTERNAL_MEMORY 1\n    #else\n        #define VMA_EXTERNAL_MEMORY 0\n    #endif\n#endif\n\n// Define these macros to decorate all public functions with additional code,\n// before and after returned type, appropriately. This may be useful for\n// exporting the functions when compiling VMA as a separate library. Example:\n// #define VMA_CALL_PRE  __declspec(dllexport)\n// #define VMA_CALL_POST __cdecl\n#ifndef VMA_CALL_PRE\n    #define VMA_CALL_PRE\n#endif\n#ifndef VMA_CALL_POST\n    #define VMA_CALL_POST\n#endif\n\n// Define this macro to decorate pointers with an attribute specifying the\n// length of the array they point to if they are not null.\n//\n// The length may be one of\n// - The name of another parameter in the argument list where the pointer is declared\n// - The name of another member in the struct where the pointer is declared\n// - The name of a member of a struct type, meaning the value of that member in\n//   the context of the call. For example\n//   VMA_LEN_IF_NOT_NULL(\"VkPhysicalDeviceMemoryProperties::memoryHeapCount\"),\n//   this means the number of memory heaps available in the device associated\n//   with the VmaAllocator being dealt with.\n#ifndef VMA_LEN_IF_NOT_NULL\n    #define VMA_LEN_IF_NOT_NULL(len)\n#endif\n\n// The VMA_NULLABLE macro is defined to be _Nullable when compiling with Clang.\n// see: https://clang.llvm.org/docs/AttributeReference.html#nullable\n#ifndef VMA_NULLABLE\n    #ifdef __clang__\n        #define VMA_NULLABLE _Nullable\n    #else\n        #define VMA_NULLABLE\n    #endif\n#endif\n\n// The VMA_NOT_NULL macro is defined to be _Nonnull when compiling with Clang.\n// see: https://clang.llvm.org/docs/AttributeReference.html#nonnull\n#ifndef VMA_NOT_NULL\n    #ifdef __clang__\n        #define VMA_NOT_NULL _Nonnull\n    #else\n        #define VMA_NOT_NULL\n    #endif\n#endif\n\n// If non-dispatchable handles are represented as pointers then we can give\n// then nullability annotations\n#ifndef VMA_NOT_NULL_NON_DISPATCHABLE\n    #if defined(__LP64__) || defined(_WIN64) || (defined(__x86_64__) && !defined(__ILP32__) ) || defined(_M_X64) || defined(__ia64) || defined (_M_IA64) || defined(__aarch64__) || defined(__powerpc64__)\n        #define VMA_NOT_NULL_NON_DISPATCHABLE VMA_NOT_NULL\n    #else\n        #define VMA_NOT_NULL_NON_DISPATCHABLE\n    #endif\n#endif\n\n#ifndef VMA_NULLABLE_NON_DISPATCHABLE\n    #if defined(__LP64__) || defined(_WIN64) || (defined(__x86_64__) && !defined(__ILP32__) ) || defined(_M_X64) || defined(__ia64) || defined (_M_IA64) || defined(__aarch64__) || defined(__powerpc64__)\n        #define VMA_NULLABLE_NON_DISPATCHABLE VMA_NULLABLE\n    #else\n        #define VMA_NULLABLE_NON_DISPATCHABLE\n    #endif\n#endif\n\n/** \\struct VmaAllocator\n\\brief Represents main object of this library initialized.\n\nFill structure #VmaAllocatorCreateInfo and call function vmaCreateAllocator() to create it.\nCall function vmaDestroyAllocator() to destroy it.\n\nIt is recommended to create just one object of this type per `VkDevice` object,\nright after Vulkan is initialized and keep it alive until before Vulkan device is destroyed.\n*/\nVK_DEFINE_HANDLE(VmaAllocator)\n\n/// Callback function called after successful vkAllocateMemory.\ntypedef void (VKAPI_PTR *PFN_vmaAllocateDeviceMemoryFunction)(\n    VmaAllocator VMA_NOT_NULL                    allocator,\n    uint32_t                                     memoryType,\n    VkDeviceMemory VMA_NOT_NULL_NON_DISPATCHABLE memory,\n    VkDeviceSize                                 size,\n    void* VMA_NULLABLE                           pUserData);\n/// Callback function called before vkFreeMemory.\ntypedef void (VKAPI_PTR *PFN_vmaFreeDeviceMemoryFunction)(\n    VmaAllocator VMA_NOT_NULL                    allocator,\n    uint32_t                                     memoryType,\n    VkDeviceMemory VMA_NOT_NULL_NON_DISPATCHABLE memory,\n    VkDeviceSize                                 size,\n    void* VMA_NULLABLE                           pUserData);\n\n/** \\brief Set of callbacks that the library will call for `vkAllocateMemory` and `vkFreeMemory`.\n\nProvided for informative purpose, e.g. to gather statistics about number of\nallocations or total amount of memory allocated in Vulkan.\n\nUsed in VmaAllocatorCreateInfo::pDeviceMemoryCallbacks.\n*/\ntypedef struct VmaDeviceMemoryCallbacks {\n    /// Optional, can be null.\n    PFN_vmaAllocateDeviceMemoryFunction VMA_NULLABLE pfnAllocate;\n    /// Optional, can be null.\n    PFN_vmaFreeDeviceMemoryFunction VMA_NULLABLE pfnFree;\n    /// Optional, can be null.\n    void* VMA_NULLABLE pUserData;\n} VmaDeviceMemoryCallbacks;\n\n/// Flags for created #VmaAllocator.\ntypedef enum VmaAllocatorCreateFlagBits {\n    /** \\brief Allocator and all objects created from it will not be synchronized internally, so you must guarantee they are used from only one thread at a time or synchronized externally by you.\n\n    Using this flag may increase performance because internal mutexes are not used.\n    */\n    VMA_ALLOCATOR_CREATE_EXTERNALLY_SYNCHRONIZED_BIT = 0x00000001,\n    /** \\brief Enables usage of VK_KHR_dedicated_allocation extension.\n\n    The flag works only if VmaAllocatorCreateInfo::vulkanApiVersion `== VK_API_VERSION_1_0`.\n    When it is `VK_API_VERSION_1_1`, the flag is ignored because the extension has been promoted to Vulkan 1.1.\n\n    Using this extension will automatically allocate dedicated blocks of memory for\n    some buffers and images instead of suballocating place for them out of bigger\n    memory blocks (as if you explicitly used #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT\n    flag) when it is recommended by the driver. It may improve performance on some\n    GPUs.\n\n    You may set this flag only if you found out that following device extensions are\n    supported, you enabled them while creating Vulkan device passed as\n    VmaAllocatorCreateInfo::device, and you want them to be used internally by this\n    library:\n\n    - VK_KHR_get_memory_requirements2 (device extension)\n    - VK_KHR_dedicated_allocation (device extension)\n\n    When this flag is set, you can experience following warnings reported by Vulkan\n    validation layer. You can ignore them.\n\n    > vkBindBufferMemory(): Binding memory to buffer 0x2d but vkGetBufferMemoryRequirements() has not been called on that buffer.\n    */\n    VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT = 0x00000002,\n    /**\n    Enables usage of VK_KHR_bind_memory2 extension.\n\n    The flag works only if VmaAllocatorCreateInfo::vulkanApiVersion `== VK_API_VERSION_1_0`.\n    When it is `VK_API_VERSION_1_1`, the flag is ignored because the extension has been promoted to Vulkan 1.1.\n\n    You may set this flag only if you found out that this device extension is supported,\n    you enabled it while creating Vulkan device passed as VmaAllocatorCreateInfo::device,\n    and you want it to be used internally by this library.\n\n    The extension provides functions `vkBindBufferMemory2KHR` and `vkBindImageMemory2KHR`,\n    which allow to pass a chain of `pNext` structures while binding.\n    This flag is required if you use `pNext` parameter in vmaBindBufferMemory2() or vmaBindImageMemory2().\n    */\n    VMA_ALLOCATOR_CREATE_KHR_BIND_MEMORY2_BIT = 0x00000004,\n    /**\n    Enables usage of VK_EXT_memory_budget extension.\n\n    You may set this flag only if you found out that this device extension is supported,\n    you enabled it while creating Vulkan device passed as VmaAllocatorCreateInfo::device,\n    and you want it to be used internally by this library, along with another instance extension\n    VK_KHR_get_physical_device_properties2, which is required by it (or Vulkan 1.1, where this extension is promoted).\n\n    The extension provides query for current memory usage and budget, which will probably\n    be more accurate than an estimation used by the library otherwise.\n    */\n    VMA_ALLOCATOR_CREATE_EXT_MEMORY_BUDGET_BIT = 0x00000008,\n    /**\n    Enables usage of VK_AMD_device_coherent_memory extension.\n\n    You may set this flag only if you:\n\n    - found out that this device extension is supported and enabled it while creating Vulkan device passed as VmaAllocatorCreateInfo::device,\n    - checked that `VkPhysicalDeviceCoherentMemoryFeaturesAMD::deviceCoherentMemory` is true and set it while creating the Vulkan device,\n    - want it to be used internally by this library.\n\n    The extension and accompanying device feature provide access to memory types with\n    `VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD` and `VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD` flags.\n    They are useful mostly for writing breadcrumb markers - a common method for debugging GPU crash/hang/TDR.\n\n    When the extension is not enabled, such memory types are still enumerated, but their usage is illegal.\n    To protect from this error, if you don't create the allocator with this flag, it will refuse to allocate any memory or create a custom pool in such memory type,\n    returning `VK_ERROR_FEATURE_NOT_PRESENT`.\n    */\n    VMA_ALLOCATOR_CREATE_AMD_DEVICE_COHERENT_MEMORY_BIT = 0x00000010,\n    /**\n    Enables usage of \"buffer device address\" feature, which allows you to use function\n    `vkGetBufferDeviceAddress*` to get raw GPU pointer to a buffer and pass it for usage inside a shader.\n\n    You may set this flag only if you:\n\n    1. (For Vulkan version < 1.2) Found as available and enabled device extension\n    VK_KHR_buffer_device_address.\n    This extension is promoted to core Vulkan 1.2.\n    2. Found as available and enabled device feature `VkPhysicalDeviceBufferDeviceAddressFeatures::bufferDeviceAddress`.\n\n    When this flag is set, you can create buffers with `VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT` using VMA.\n    The library automatically adds `VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT` to\n    allocated memory blocks wherever it might be needed.\n\n    For more information, see documentation chapter \\ref enabling_buffer_device_address.\n    */\n    VMA_ALLOCATOR_CREATE_BUFFER_DEVICE_ADDRESS_BIT = 0x00000020,\n    /**\n    Enables usage of VK_EXT_memory_priority extension in the library.\n\n    You may set this flag only if you found available and enabled this device extension,\n    along with `VkPhysicalDeviceMemoryPriorityFeaturesEXT::memoryPriority == VK_TRUE`,\n    while creating Vulkan device passed as VmaAllocatorCreateInfo::device.\n\n    When this flag is used, VmaAllocationCreateInfo::priority and VmaPoolCreateInfo::priority\n    are used to set priorities of allocated Vulkan memory. Without it, these variables are ignored.\n\n    A priority must be a floating-point value between 0 and 1, indicating the priority of the allocation relative to other memory allocations.\n    Larger values are higher priority. The granularity of the priorities is implementation-dependent.\n    It is automatically passed to every call to `vkAllocateMemory` done by the library using structure `VkMemoryPriorityAllocateInfoEXT`.\n    The value to be used for default priority is 0.5.\n    For more details, see the documentation of the VK_EXT_memory_priority extension.\n    */\n    VMA_ALLOCATOR_CREATE_EXT_MEMORY_PRIORITY_BIT = 0x00000040,\n\n    VMA_ALLOCATOR_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF\n} VmaAllocatorCreateFlagBits;\ntypedef VkFlags VmaAllocatorCreateFlags;\n\n/** \\brief Pointers to some Vulkan functions - a subset used by the library.\n\nUsed in VmaAllocatorCreateInfo::pVulkanFunctions.\n*/\ntypedef struct VmaVulkanFunctions {\n    /// Required when using VMA_DYNAMIC_VULKAN_FUNCTIONS.\n    PFN_vkGetInstanceProcAddr VMA_NULLABLE vkGetInstanceProcAddr;\n    /// Required when using VMA_DYNAMIC_VULKAN_FUNCTIONS.\n    PFN_vkGetDeviceProcAddr VMA_NULLABLE vkGetDeviceProcAddr;\n    PFN_vkGetPhysicalDeviceProperties VMA_NULLABLE vkGetPhysicalDeviceProperties;\n    PFN_vkGetPhysicalDeviceMemoryProperties VMA_NULLABLE vkGetPhysicalDeviceMemoryProperties;\n    PFN_vkAllocateMemory VMA_NULLABLE vkAllocateMemory;\n    PFN_vkFreeMemory VMA_NULLABLE vkFreeMemory;\n    PFN_vkMapMemory VMA_NULLABLE vkMapMemory;\n    PFN_vkUnmapMemory VMA_NULLABLE vkUnmapMemory;\n    PFN_vkFlushMappedMemoryRanges VMA_NULLABLE vkFlushMappedMemoryRanges;\n    PFN_vkInvalidateMappedMemoryRanges VMA_NULLABLE vkInvalidateMappedMemoryRanges;\n    PFN_vkBindBufferMemory VMA_NULLABLE vkBindBufferMemory;\n    PFN_vkBindImageMemory VMA_NULLABLE vkBindImageMemory;\n    PFN_vkGetBufferMemoryRequirements VMA_NULLABLE vkGetBufferMemoryRequirements;\n    PFN_vkGetImageMemoryRequirements VMA_NULLABLE vkGetImageMemoryRequirements;\n    PFN_vkCreateBuffer VMA_NULLABLE vkCreateBuffer;\n    PFN_vkDestroyBuffer VMA_NULLABLE vkDestroyBuffer;\n    PFN_vkCreateImage VMA_NULLABLE vkCreateImage;\n    PFN_vkDestroyImage VMA_NULLABLE vkDestroyImage;\n    PFN_vkCmdCopyBuffer VMA_NULLABLE vkCmdCopyBuffer;\n#if VMA_DEDICATED_ALLOCATION || VMA_VULKAN_VERSION >= 1001000\n    /// Fetch \"vkGetBufferMemoryRequirements2\" on Vulkan >= 1.1, fetch \"vkGetBufferMemoryRequirements2KHR\" when using VK_KHR_dedicated_allocation extension.\n    PFN_vkGetBufferMemoryRequirements2KHR VMA_NULLABLE vkGetBufferMemoryRequirements2KHR;\n    /// Fetch \"vkGetImageMemoryRequirements 2\" on Vulkan >= 1.1, fetch \"vkGetImageMemoryRequirements2KHR\" when using VK_KHR_dedicated_allocation extension.\n    PFN_vkGetImageMemoryRequirements2KHR VMA_NULLABLE vkGetImageMemoryRequirements2KHR;\n#endif\n#if VMA_BIND_MEMORY2 || VMA_VULKAN_VERSION >= 1001000\n    /// Fetch \"vkBindBufferMemory2\" on Vulkan >= 1.1, fetch \"vkBindBufferMemory2KHR\" when using VK_KHR_bind_memory2 extension.\n    PFN_vkBindBufferMemory2KHR VMA_NULLABLE vkBindBufferMemory2KHR;\n    /// Fetch \"vkBindImageMemory2\" on Vulkan >= 1.1, fetch \"vkBindImageMemory2KHR\" when using VK_KHR_bind_memory2 extension.\n    PFN_vkBindImageMemory2KHR VMA_NULLABLE vkBindImageMemory2KHR;\n#endif\n#if VMA_MEMORY_BUDGET || VMA_VULKAN_VERSION >= 1001000\n    PFN_vkGetPhysicalDeviceMemoryProperties2KHR VMA_NULLABLE vkGetPhysicalDeviceMemoryProperties2KHR;\n#endif\n} VmaVulkanFunctions;\n\n/// Flags to be used in VmaRecordSettings::flags.\ntypedef enum VmaRecordFlagBits {\n    /** \\brief Enables flush after recording every function call.\n\n    Enable it if you expect your application to crash, which may leave recording file truncated.\n    It may degrade performance though.\n    */\n    VMA_RECORD_FLUSH_AFTER_CALL_BIT = 0x00000001,\n\n    VMA_RECORD_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF\n} VmaRecordFlagBits;\ntypedef VkFlags VmaRecordFlags;\n\n/// Parameters for recording calls to VMA functions. To be used in VmaAllocatorCreateInfo::pRecordSettings.\ntypedef struct VmaRecordSettings\n{\n    /// Flags for recording. Use #VmaRecordFlagBits enum.\n    VmaRecordFlags flags;\n    /** \\brief Path to the file that should be written by the recording.\n\n    Suggested extension: \"csv\".\n    If the file already exists, it will be overwritten.\n    It will be opened for the whole time #VmaAllocator object is alive.\n    If opening this file fails, creation of the whole allocator object fails.\n    */\n    const char* VMA_NOT_NULL pFilePath;\n} VmaRecordSettings;\n\n/// Description of a Allocator to be created.\ntypedef struct VmaAllocatorCreateInfo\n{\n    /// Flags for created allocator. Use #VmaAllocatorCreateFlagBits enum.\n    VmaAllocatorCreateFlags flags;\n    /// Vulkan physical device.\n    /** It must be valid throughout whole lifetime of created allocator. */\n    VkPhysicalDevice VMA_NOT_NULL physicalDevice;\n    /// Vulkan device.\n    /** It must be valid throughout whole lifetime of created allocator. */\n    VkDevice VMA_NOT_NULL device;\n    /// Preferred size of a single `VkDeviceMemory` block to be allocated from large heaps > 1 GiB. Optional.\n    /** Set to 0 to use default, which is currently 256 MiB. */\n    VkDeviceSize preferredLargeHeapBlockSize;\n    /// Custom CPU memory allocation callbacks. Optional.\n    /** Optional, can be null. When specified, will also be used for all CPU-side memory allocations. */\n    const VkAllocationCallbacks* VMA_NULLABLE pAllocationCallbacks;\n    /// Informative callbacks for `vkAllocateMemory`, `vkFreeMemory`. Optional.\n    /** Optional, can be null. */\n    const VmaDeviceMemoryCallbacks* VMA_NULLABLE pDeviceMemoryCallbacks;\n    /** \\brief Maximum number of additional frames that are in use at the same time as current frame.\n\n    This value is used only when you make allocations with\n    VMA_ALLOCATION_CREATE_CAN_BECOME_LOST_BIT flag. Such allocation cannot become\n    lost if allocation.lastUseFrameIndex >= allocator.currentFrameIndex - frameInUseCount.\n\n    For example, if you double-buffer your command buffers, so resources used for\n    rendering in previous frame may still be in use by the GPU at the moment you\n    allocate resources needed for the current frame, set this value to 1.\n\n    If you want to allow any allocations other than used in the current frame to\n    become lost, set this value to 0.\n    */\n    uint32_t frameInUseCount;\n    /** \\brief Either null or a pointer to an array of limits on maximum number of bytes that can be allocated out of particular Vulkan memory heap.\n\n    If not NULL, it must be a pointer to an array of\n    `VkPhysicalDeviceMemoryProperties::memoryHeapCount` elements, defining limit on\n    maximum number of bytes that can be allocated out of particular Vulkan memory\n    heap.\n\n    Any of the elements may be equal to `VK_WHOLE_SIZE`, which means no limit on that\n    heap. This is also the default in case of `pHeapSizeLimit` = NULL.\n\n    If there is a limit defined for a heap:\n\n    - If user tries to allocate more memory from that heap using this allocator,\n      the allocation fails with `VK_ERROR_OUT_OF_DEVICE_MEMORY`.\n    - If the limit is smaller than heap size reported in `VkMemoryHeap::size`, the\n      value of this limit will be reported instead when using vmaGetMemoryProperties().\n\n    Warning! Using this feature may not be equivalent to installing a GPU with\n    smaller amount of memory, because graphics driver doesn't necessary fail new\n    allocations with `VK_ERROR_OUT_OF_DEVICE_MEMORY` result when memory capacity is\n    exceeded. It may return success and just silently migrate some device memory\n    blocks to system RAM. This driver behavior can also be controlled using\n    VK_AMD_memory_overallocation_behavior extension.\n    */\n    const VkDeviceSize* VMA_NULLABLE VMA_LEN_IF_NOT_NULL(\"VkPhysicalDeviceMemoryProperties::memoryHeapCount\") pHeapSizeLimit;\n\n    /** \\brief Pointers to Vulkan functions. Can be null.\n\n    For details see [Pointers to Vulkan functions](@ref config_Vulkan_functions).\n    */\n    const VmaVulkanFunctions* VMA_NULLABLE pVulkanFunctions;\n    /** \\brief Parameters for recording of VMA calls. Can be null.\n\n    If not null, it enables recording of calls to VMA functions to a file.\n    If support for recording is not enabled using `VMA_RECORDING_ENABLED` macro,\n    creation of the allocator object fails with `VK_ERROR_FEATURE_NOT_PRESENT`.\n    */\n    const VmaRecordSettings* VMA_NULLABLE pRecordSettings;\n    /** \\brief Handle to Vulkan instance object.\n\n    Starting from version 3.0.0 this member is no longer optional, it must be set!\n    */\n    VkInstance VMA_NOT_NULL instance;\n    /** \\brief Optional. The highest version of Vulkan that the application is designed to use.\n\n    It must be a value in the format as created by macro `VK_MAKE_VERSION` or a constant like: `VK_API_VERSION_1_1`, `VK_API_VERSION_1_0`.\n    The patch version number specified is ignored. Only the major and minor versions are considered.\n    It must be less or equal (preferably equal) to value as passed to `vkCreateInstance` as `VkApplicationInfo::apiVersion`.\n    Only versions 1.0, 1.1, 1.2 are supported by the current implementation.\n    Leaving it initialized to zero is equivalent to `VK_API_VERSION_1_0`.\n    */\n    uint32_t vulkanApiVersion;\n#if VMA_EXTERNAL_MEMORY\n    /** \\brief Either null or a pointer to an array of external memory handle types for each Vulkan memory type.\n\n    If not NULL, it must be a pointer to an array of `VkPhysicalDeviceMemoryProperties::memoryTypeCount`\n    elements, defining external memory handle types of particular Vulkan memory type,\n    to be passed using `VkExportMemoryAllocateInfoKHR`.\n\n    Any of the elements may be equal to 0, which means not to use `VkExportMemoryAllocateInfoKHR` on this memory type.\n    This is also the default in case of `pTypeExternalMemoryHandleTypes` = NULL.\n    */\n    const VkExternalMemoryHandleTypeFlagsKHR* VMA_NULLABLE VMA_LEN_IF_NOT_NULL(\"VkPhysicalDeviceMemoryProperties::memoryTypeCount\") pTypeExternalMemoryHandleTypes;\n#endif // #if VMA_EXTERNAL_MEMORY\n} VmaAllocatorCreateInfo;\n\n/// Creates Allocator object.\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaCreateAllocator(\n    const VmaAllocatorCreateInfo* VMA_NOT_NULL pCreateInfo,\n    VmaAllocator VMA_NULLABLE * VMA_NOT_NULL pAllocator);\n\n/// Destroys allocator object.\nVMA_CALL_PRE void VMA_CALL_POST vmaDestroyAllocator(\n    VmaAllocator VMA_NULLABLE allocator);\n\n/** \\brief Information about existing #VmaAllocator object.\n*/\ntypedef struct VmaAllocatorInfo\n{\n    /** \\brief Handle to Vulkan instance object.\n\n    This is the same value as has been passed through VmaAllocatorCreateInfo::instance.\n    */\n    VkInstance VMA_NOT_NULL instance;\n    /** \\brief Handle to Vulkan physical device object.\n\n    This is the same value as has been passed through VmaAllocatorCreateInfo::physicalDevice.\n    */\n    VkPhysicalDevice VMA_NOT_NULL physicalDevice;\n    /** \\brief Handle to Vulkan device object.\n\n    This is the same value as has been passed through VmaAllocatorCreateInfo::device.\n    */\n    VkDevice VMA_NOT_NULL device;\n} VmaAllocatorInfo;\n\n/** \\brief Returns information about existing #VmaAllocator object - handle to Vulkan device etc.\n\nIt might be useful if you want to keep just the #VmaAllocator handle and fetch other required handles to\n`VkPhysicalDevice`, `VkDevice` etc. every time using this function.\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaGetAllocatorInfo(VmaAllocator VMA_NOT_NULL allocator, VmaAllocatorInfo* VMA_NOT_NULL pAllocatorInfo);\n\n/**\nPhysicalDeviceProperties are fetched from physicalDevice by the allocator.\nYou can access it here, without fetching it again on your own.\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaGetPhysicalDeviceProperties(\n    VmaAllocator VMA_NOT_NULL allocator,\n    const VkPhysicalDeviceProperties* VMA_NULLABLE * VMA_NOT_NULL ppPhysicalDeviceProperties);\n\n/**\nPhysicalDeviceMemoryProperties are fetched from physicalDevice by the allocator.\nYou can access it here, without fetching it again on your own.\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaGetMemoryProperties(\n    VmaAllocator VMA_NOT_NULL allocator,\n    const VkPhysicalDeviceMemoryProperties* VMA_NULLABLE * VMA_NOT_NULL ppPhysicalDeviceMemoryProperties);\n\n/**\n\\brief Given Memory Type Index, returns Property Flags of this memory type.\n\nThis is just a convenience function. Same information can be obtained using\nvmaGetMemoryProperties().\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaGetMemoryTypeProperties(\n    VmaAllocator VMA_NOT_NULL allocator,\n    uint32_t memoryTypeIndex,\n    VkMemoryPropertyFlags* VMA_NOT_NULL pFlags);\n\n/** \\brief Sets index of the current frame.\n\nThis function must be used if you make allocations with\n#VMA_ALLOCATION_CREATE_CAN_BECOME_LOST_BIT and\n#VMA_ALLOCATION_CREATE_CAN_MAKE_OTHER_LOST_BIT flags to inform the allocator\nwhen a new frame begins. Allocations queried using vmaGetAllocationInfo() cannot\nbecome lost in the current frame.\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaSetCurrentFrameIndex(\n    VmaAllocator VMA_NOT_NULL allocator,\n    uint32_t frameIndex);\n\n/** \\brief Calculated statistics of memory usage in entire allocator.\n*/\ntypedef struct VmaStatInfo\n{\n    /// Number of `VkDeviceMemory` Vulkan memory blocks allocated.\n    uint32_t blockCount;\n    /// Number of #VmaAllocation allocation objects allocated.\n    uint32_t allocationCount;\n    /// Number of free ranges of memory between allocations.\n    uint32_t unusedRangeCount;\n    /// Total number of bytes occupied by all allocations.\n    VkDeviceSize usedBytes;\n    /// Total number of bytes occupied by unused ranges.\n    VkDeviceSize unusedBytes;\n    VkDeviceSize allocationSizeMin, allocationSizeAvg, allocationSizeMax;\n    VkDeviceSize unusedRangeSizeMin, unusedRangeSizeAvg, unusedRangeSizeMax;\n} VmaStatInfo;\n\n/// General statistics from current state of Allocator.\ntypedef struct VmaStats\n{\n    VmaStatInfo memoryType[VK_MAX_MEMORY_TYPES];\n    VmaStatInfo memoryHeap[VK_MAX_MEMORY_HEAPS];\n    VmaStatInfo total;\n} VmaStats;\n\n/** \\brief Retrieves statistics from current state of the Allocator.\n\nThis function is called \"calculate\" not \"get\" because it has to traverse all\ninternal data structures, so it may be quite slow. For faster but more brief statistics\nsuitable to be called every frame or every allocation, use vmaGetBudget().\n\nNote that when using allocator from multiple threads, returned information may immediately\nbecome outdated.\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaCalculateStats(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaStats* VMA_NOT_NULL pStats);\n\n/** \\brief Statistics of current memory usage and available budget, in bytes, for specific memory heap.\n*/\ntypedef struct VmaBudget\n{\n    /** \\brief Sum size of all `VkDeviceMemory` blocks allocated from particular heap, in bytes.\n    */\n    VkDeviceSize blockBytes;\n\n    /** \\brief Sum size of all allocations created in particular heap, in bytes.\n\n    Usually less or equal than `blockBytes`.\n    Difference `blockBytes - allocationBytes` is the amount of memory allocated but unused -\n    available for new allocations or wasted due to fragmentation.\n\n    It might be greater than `blockBytes` if there are some allocations in lost state, as they account\n    to this value as well.\n    */\n    VkDeviceSize allocationBytes;\n\n    /** \\brief Estimated current memory usage of the program, in bytes.\n\n    Fetched from system using `VK_EXT_memory_budget` extension if enabled.\n\n    It might be different than `blockBytes` (usually higher) due to additional implicit objects\n    also occupying the memory, like swapchain, pipelines, descriptor heaps, command buffers, or\n    `VkDeviceMemory` blocks allocated outside of this library, if any.\n    */\n    VkDeviceSize usage;\n\n    /** \\brief Estimated amount of memory available to the program, in bytes.\n\n    Fetched from system using `VK_EXT_memory_budget` extension if enabled.\n\n    It might be different (most probably smaller) than `VkMemoryHeap::size[heapIndex]` due to factors\n    external to the program, like other programs also consuming system resources.\n    Difference `budget - usage` is the amount of additional memory that can probably\n    be allocated without problems. Exceeding the budget may result in various problems.\n    */\n    VkDeviceSize budget;\n} VmaBudget;\n\n/** \\brief Retrieves information about current memory budget for all memory heaps.\n\n\\param allocator\n\\param[out] pBudget Must point to array with number of elements at least equal to number of memory heaps in physical device used.\n\nThis function is called \"get\" not \"calculate\" because it is very fast, suitable to be called\nevery frame or every allocation. For more detailed statistics use vmaCalculateStats().\n\nNote that when using allocator from multiple threads, returned information may immediately\nbecome outdated.\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaGetBudget(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaBudget* VMA_NOT_NULL pBudget);\n\n#ifndef VMA_STATS_STRING_ENABLED\n#define VMA_STATS_STRING_ENABLED 1\n#endif\n\n#if VMA_STATS_STRING_ENABLED\n\n/// Builds and returns statistics as a null-terminated string in JSON format.\n/**\n@param allocator\n@param[out] ppStatsString Must be freed using vmaFreeStatsString() function.\n@param detailedMap\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaBuildStatsString(\n    VmaAllocator VMA_NOT_NULL allocator,\n    char* VMA_NULLABLE * VMA_NOT_NULL ppStatsString,\n    VkBool32 detailedMap);\n\nVMA_CALL_PRE void VMA_CALL_POST vmaFreeStatsString(\n    VmaAllocator VMA_NOT_NULL allocator,\n    char* VMA_NULLABLE pStatsString);\n\n#endif // #if VMA_STATS_STRING_ENABLED\n\n/** \\struct VmaPool\n\\brief Represents custom memory pool\n\nFill structure VmaPoolCreateInfo and call function vmaCreatePool() to create it.\nCall function vmaDestroyPool() to destroy it.\n\nFor more information see [Custom memory pools](@ref choosing_memory_type_custom_memory_pools).\n*/\nVK_DEFINE_HANDLE(VmaPool)\n\ntypedef enum VmaMemoryUsage\n{\n    /** No intended memory usage specified.\n    Use other members of VmaAllocationCreateInfo to specify your requirements.\n    */\n    VMA_MEMORY_USAGE_UNKNOWN = 0,\n    /** Memory will be used on device only, so fast access from the device is preferred.\n    It usually means device-local GPU (video) memory.\n    No need to be mappable on host.\n    It is roughly equivalent of `D3D12_HEAP_TYPE_DEFAULT`.\n\n    Usage:\n\n    - Resources written and read by device, e.g. images used as attachments.\n    - Resources transferred from host once (immutable) or infrequently and read by\n      device multiple times, e.g. textures to be sampled, vertex buffers, uniform\n      (constant) buffers, and majority of other types of resources used on GPU.\n\n    Allocation may still end up in `HOST_VISIBLE` memory on some implementations.\n    In such case, you are free to map it.\n    You can use #VMA_ALLOCATION_CREATE_MAPPED_BIT with this usage type.\n    */\n    VMA_MEMORY_USAGE_GPU_ONLY = 1,\n    /** Memory will be mappable on host.\n    It usually means CPU (system) memory.\n    Guarantees to be `HOST_VISIBLE` and `HOST_COHERENT`.\n    CPU access is typically uncached. Writes may be write-combined.\n    Resources created in this pool may still be accessible to the device, but access to them can be slow.\n    It is roughly equivalent of `D3D12_HEAP_TYPE_UPLOAD`.\n\n    Usage: Staging copy of resources used as transfer source.\n    */\n    VMA_MEMORY_USAGE_CPU_ONLY = 2,\n    /**\n    Memory that is both mappable on host (guarantees to be `HOST_VISIBLE`) and preferably fast to access by GPU.\n    CPU access is typically uncached. Writes may be write-combined.\n\n    Usage: Resources written frequently by host (dynamic), read by device. E.g. textures (with LINEAR layout), vertex buffers, uniform buffers updated every frame or every draw call.\n    */\n    VMA_MEMORY_USAGE_CPU_TO_GPU = 3,\n    /** Memory mappable on host (guarantees to be `HOST_VISIBLE`) and cached.\n    It is roughly equivalent of `D3D12_HEAP_TYPE_READBACK`.\n\n    Usage:\n\n    - Resources written by device, read by host - results of some computations, e.g. screen capture, average scene luminance for HDR tone mapping.\n    - Any resources read or accessed randomly on host, e.g. CPU-side copy of vertex buffer used as source of transfer, but also used for collision detection.\n    */\n    VMA_MEMORY_USAGE_GPU_TO_CPU = 4,\n    /** CPU memory - memory that is preferably not `DEVICE_LOCAL`, but also not guaranteed to be `HOST_VISIBLE`.\n\n    Usage: Staging copy of resources moved from GPU memory to CPU memory as part\n    of custom paging/residency mechanism, to be moved back to GPU memory when needed.\n    */\n    VMA_MEMORY_USAGE_CPU_COPY = 5,\n    /** Lazily allocated GPU memory having `VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT`.\n    Exists mostly on mobile platforms. Using it on desktop PC or other GPUs with no such memory type present will fail the allocation.\n\n    Usage: Memory for transient attachment images (color attachments, depth attachments etc.), created with `VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT`.\n\n    Allocations with this usage are always created as dedicated - it implies #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.\n    */\n    VMA_MEMORY_USAGE_GPU_LAZILY_ALLOCATED = 6,\n\n    VMA_MEMORY_USAGE_MAX_ENUM = 0x7FFFFFFF\n} VmaMemoryUsage;\n\n/// Flags to be passed as VmaAllocationCreateInfo::flags.\ntypedef enum VmaAllocationCreateFlagBits {\n    /** \\brief Set this flag if the allocation should have its own memory block.\n\n    Use it for special, big resources, like fullscreen images used as attachments.\n\n    You should not use this flag if VmaAllocationCreateInfo::pool is not null.\n    */\n    VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT = 0x00000001,\n\n    /** \\brief Set this flag to only try to allocate from existing `VkDeviceMemory` blocks and never create new such block.\n\n    If new allocation cannot be placed in any of the existing blocks, allocation\n    fails with `VK_ERROR_OUT_OF_DEVICE_MEMORY` error.\n\n    You should not use #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT and\n    #VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT at the same time. It makes no sense.\n\n    If VmaAllocationCreateInfo::pool is not null, this flag is implied and ignored. */\n    VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT = 0x00000002,\n    /** \\brief Set this flag to use a memory that will be persistently mapped and retrieve pointer to it.\n\n    Pointer to mapped memory will be returned through VmaAllocationInfo::pMappedData.\n\n    It is valid to use this flag for allocation made from memory type that is not\n    `HOST_VISIBLE`. This flag is then ignored and memory is not mapped. This is\n    useful if you need an allocation that is efficient to use on GPU\n    (`DEVICE_LOCAL`) and still want to map it directly if possible on platforms that\n    support it (e.g. Intel GPU).\n\n    You should not use this flag together with #VMA_ALLOCATION_CREATE_CAN_BECOME_LOST_BIT.\n    */\n    VMA_ALLOCATION_CREATE_MAPPED_BIT = 0x00000004,\n    /** Allocation created with this flag can become lost as a result of another\n    allocation with #VMA_ALLOCATION_CREATE_CAN_MAKE_OTHER_LOST_BIT flag, so you\n    must check it before use.\n\n    To check if allocation is not lost, call vmaGetAllocationInfo() and check if\n    VmaAllocationInfo::deviceMemory is not `VK_NULL_HANDLE`.\n\n    For details about supporting lost allocations, see Lost Allocations\n    chapter of User Guide on Main Page.\n\n    You should not use this flag together with #VMA_ALLOCATION_CREATE_MAPPED_BIT.\n    */\n    VMA_ALLOCATION_CREATE_CAN_BECOME_LOST_BIT = 0x00000008,\n    /** While creating allocation using this flag, other allocations that were\n    created with flag #VMA_ALLOCATION_CREATE_CAN_BECOME_LOST_BIT can become lost.\n\n    For details about supporting lost allocations, see Lost Allocations\n    chapter of User Guide on Main Page.\n    */\n    VMA_ALLOCATION_CREATE_CAN_MAKE_OTHER_LOST_BIT = 0x00000010,\n    /** Set this flag to treat VmaAllocationCreateInfo::pUserData as pointer to a\n    null-terminated string. Instead of copying pointer value, a local copy of the\n    string is made and stored in allocation's `pUserData`. The string is automatically\n    freed together with the allocation. It is also used in vmaBuildStatsString().\n    */\n    VMA_ALLOCATION_CREATE_USER_DATA_COPY_STRING_BIT = 0x00000020,\n    /** Allocation will be created from upper stack in a double stack pool.\n\n    This flag is only allowed for custom pools created with #VMA_POOL_CREATE_LINEAR_ALGORITHM_BIT flag.\n    */\n    VMA_ALLOCATION_CREATE_UPPER_ADDRESS_BIT = 0x00000040,\n    /** Create both buffer/image and allocation, but don't bind them together.\n    It is useful when you want to bind yourself to do some more advanced binding, e.g. using some extensions.\n    The flag is meaningful only with functions that bind by default: vmaCreateBuffer(), vmaCreateImage().\n    Otherwise it is ignored.\n    */\n    VMA_ALLOCATION_CREATE_DONT_BIND_BIT = 0x00000080,\n    /** Create allocation only if additional device memory required for it, if any, won't exceed\n    memory budget. Otherwise return `VK_ERROR_OUT_OF_DEVICE_MEMORY`.\n    */\n    VMA_ALLOCATION_CREATE_WITHIN_BUDGET_BIT = 0x00000100,\n\n    /** Allocation strategy that chooses smallest possible free range for the\n    allocation.\n    */\n    VMA_ALLOCATION_CREATE_STRATEGY_BEST_FIT_BIT  = 0x00010000,\n    /** Allocation strategy that chooses biggest possible free range for the\n    allocation.\n    */\n    VMA_ALLOCATION_CREATE_STRATEGY_WORST_FIT_BIT = 0x00020000,\n    /** Allocation strategy that chooses first suitable free range for the\n    allocation.\n\n    \"First\" doesn't necessarily means the one with smallest offset in memory,\n    but rather the one that is easiest and fastest to find.\n    */\n    VMA_ALLOCATION_CREATE_STRATEGY_FIRST_FIT_BIT = 0x00040000,\n\n    /** Allocation strategy that tries to minimize memory usage.\n    */\n    VMA_ALLOCATION_CREATE_STRATEGY_MIN_MEMORY_BIT = VMA_ALLOCATION_CREATE_STRATEGY_BEST_FIT_BIT,\n    /** Allocation strategy that tries to minimize allocation time.\n    */\n    VMA_ALLOCATION_CREATE_STRATEGY_MIN_TIME_BIT = VMA_ALLOCATION_CREATE_STRATEGY_FIRST_FIT_BIT,\n    /** Allocation strategy that tries to minimize memory fragmentation.\n    */\n    VMA_ALLOCATION_CREATE_STRATEGY_MIN_FRAGMENTATION_BIT = VMA_ALLOCATION_CREATE_STRATEGY_WORST_FIT_BIT,\n\n    /** A bit mask to extract only `STRATEGY` bits from entire set of flags.\n    */\n    VMA_ALLOCATION_CREATE_STRATEGY_MASK =\n        VMA_ALLOCATION_CREATE_STRATEGY_BEST_FIT_BIT |\n        VMA_ALLOCATION_CREATE_STRATEGY_WORST_FIT_BIT |\n        VMA_ALLOCATION_CREATE_STRATEGY_FIRST_FIT_BIT,\n\n    VMA_ALLOCATION_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF\n} VmaAllocationCreateFlagBits;\ntypedef VkFlags VmaAllocationCreateFlags;\n\ntypedef struct VmaAllocationCreateInfo\n{\n    /// Use #VmaAllocationCreateFlagBits enum.\n    VmaAllocationCreateFlags flags;\n    /** \\brief Intended usage of memory.\n\n    You can leave #VMA_MEMORY_USAGE_UNKNOWN if you specify memory requirements in other way. \\n\n    If `pool` is not null, this member is ignored.\n    */\n    VmaMemoryUsage usage;\n    /** \\brief Flags that must be set in a Memory Type chosen for an allocation.\n\n    Leave 0 if you specify memory requirements in other way. \\n\n    If `pool` is not null, this member is ignored.*/\n    VkMemoryPropertyFlags requiredFlags;\n    /** \\brief Flags that preferably should be set in a memory type chosen for an allocation.\n\n    Set to 0 if no additional flags are preferred. \\n\n    If `pool` is not null, this member is ignored. */\n    VkMemoryPropertyFlags preferredFlags;\n    /** \\brief Bitmask containing one bit set for every memory type acceptable for this allocation.\n\n    Value 0 is equivalent to `UINT32_MAX` - it means any memory type is accepted if\n    it meets other requirements specified by this structure, with no further\n    restrictions on memory type index. \\n\n    If `pool` is not null, this member is ignored.\n    */\n    uint32_t memoryTypeBits;\n    /** \\brief Pool that this allocation should be created in.\n\n    Leave `VK_NULL_HANDLE` to allocate from default pool. If not null, members:\n    `usage`, `requiredFlags`, `preferredFlags`, `memoryTypeBits` are ignored.\n    */\n    VmaPool VMA_NULLABLE pool;\n    /** \\brief Custom general-purpose pointer that will be stored in #VmaAllocation, can be read as VmaAllocationInfo::pUserData and changed using vmaSetAllocationUserData().\n\n    If #VMA_ALLOCATION_CREATE_USER_DATA_COPY_STRING_BIT is used, it must be either\n    null or pointer to a null-terminated string. The string will be then copied to\n    internal buffer, so it doesn't need to be valid after allocation call.\n    */\n    void* VMA_NULLABLE pUserData;\n    /** \\brief A floating-point value between 0 and 1, indicating the priority of the allocation relative to other memory allocations.\n\n    It is used only when #VMA_ALLOCATOR_CREATE_EXT_MEMORY_PRIORITY_BIT flag was used during creation of the #VmaAllocator object\n    and this allocation ends up as dedicated or is explicitly forced as dedicated using #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.\n    Otherwise, it has the priority of a memory block where it is placed and this variable is ignored.\n    */\n    float priority;\n} VmaAllocationCreateInfo;\n\n/**\n\\brief Helps to find memoryTypeIndex, given memoryTypeBits and VmaAllocationCreateInfo.\n\nThis algorithm tries to find a memory type that:\n\n- Is allowed by memoryTypeBits.\n- Contains all the flags from pAllocationCreateInfo->requiredFlags.\n- Matches intended usage.\n- Has as many flags from pAllocationCreateInfo->preferredFlags as possible.\n\n\\return Returns VK_ERROR_FEATURE_NOT_PRESENT if not found. Receiving such result\nfrom this function or any other allocating function probably means that your\ndevice doesn't support any memory type with requested features for the specific\ntype of resource you want to use it for. Please check parameters of your\nresource, like image layout (OPTIMAL versus LINEAR) or mip level count.\n*/\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaFindMemoryTypeIndex(\n    VmaAllocator VMA_NOT_NULL allocator,\n    uint32_t memoryTypeBits,\n    const VmaAllocationCreateInfo* VMA_NOT_NULL pAllocationCreateInfo,\n    uint32_t* VMA_NOT_NULL pMemoryTypeIndex);\n\n/**\n\\brief Helps to find memoryTypeIndex, given VkBufferCreateInfo and VmaAllocationCreateInfo.\n\nIt can be useful e.g. to determine value to be used as VmaPoolCreateInfo::memoryTypeIndex.\nIt internally creates a temporary, dummy buffer that never has memory bound.\nIt is just a convenience function, equivalent to calling:\n\n- `vkCreateBuffer`\n- `vkGetBufferMemoryRequirements`\n- `vmaFindMemoryTypeIndex`\n- `vkDestroyBuffer`\n*/\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaFindMemoryTypeIndexForBufferInfo(\n    VmaAllocator VMA_NOT_NULL allocator,\n    const VkBufferCreateInfo* VMA_NOT_NULL pBufferCreateInfo,\n    const VmaAllocationCreateInfo* VMA_NOT_NULL pAllocationCreateInfo,\n    uint32_t* VMA_NOT_NULL pMemoryTypeIndex);\n\n/**\n\\brief Helps to find memoryTypeIndex, given VkImageCreateInfo and VmaAllocationCreateInfo.\n\nIt can be useful e.g. to determine value to be used as VmaPoolCreateInfo::memoryTypeIndex.\nIt internally creates a temporary, dummy image that never has memory bound.\nIt is just a convenience function, equivalent to calling:\n\n- `vkCreateImage`\n- `vkGetImageMemoryRequirements`\n- `vmaFindMemoryTypeIndex`\n- `vkDestroyImage`\n*/\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaFindMemoryTypeIndexForImageInfo(\n    VmaAllocator VMA_NOT_NULL allocator,\n    const VkImageCreateInfo* VMA_NOT_NULL pImageCreateInfo,\n    const VmaAllocationCreateInfo* VMA_NOT_NULL pAllocationCreateInfo,\n    uint32_t* VMA_NOT_NULL pMemoryTypeIndex);\n\n/// Flags to be passed as VmaPoolCreateInfo::flags.\ntypedef enum VmaPoolCreateFlagBits {\n    /** \\brief Use this flag if you always allocate only buffers and linear images or only optimal images out of this pool and so Buffer-Image Granularity can be ignored.\n\n    This is an optional optimization flag.\n\n    If you always allocate using vmaCreateBuffer(), vmaCreateImage(),\n    vmaAllocateMemoryForBuffer(), then you don't need to use it because allocator\n    knows exact type of your allocations so it can handle Buffer-Image Granularity\n    in the optimal way.\n\n    If you also allocate using vmaAllocateMemoryForImage() or vmaAllocateMemory(),\n    exact type of such allocations is not known, so allocator must be conservative\n    in handling Buffer-Image Granularity, which can lead to suboptimal allocation\n    (wasted memory). In that case, if you can make sure you always allocate only\n    buffers and linear images or only optimal images out of this pool, use this flag\n    to make allocator disregard Buffer-Image Granularity and so make allocations\n    faster and more optimal.\n    */\n    VMA_POOL_CREATE_IGNORE_BUFFER_IMAGE_GRANULARITY_BIT = 0x00000002,\n\n    /** \\brief Enables alternative, linear allocation algorithm in this pool.\n\n    Specify this flag to enable linear allocation algorithm, which always creates\n    new allocations after last one and doesn't reuse space from allocations freed in\n    between. It trades memory consumption for simplified algorithm and data\n    structure, which has better performance and uses less memory for metadata.\n\n    By using this flag, you can achieve behavior of free-at-once, stack,\n    ring buffer, and double stack.\n    For details, see documentation chapter \\ref linear_algorithm.\n\n    When using this flag, you must specify VmaPoolCreateInfo::maxBlockCount == 1 (or 0 for default).\n    */\n    VMA_POOL_CREATE_LINEAR_ALGORITHM_BIT = 0x00000004,\n\n    /** \\brief Enables alternative, buddy allocation algorithm in this pool.\n\n    It operates on a tree of blocks, each having size that is a power of two and\n    a half of its parent's size. Comparing to default algorithm, this one provides\n    faster allocation and deallocation and decreased external fragmentation,\n    at the expense of more memory wasted (internal fragmentation).\n    For details, see documentation chapter \\ref buddy_algorithm.\n    */\n    VMA_POOL_CREATE_BUDDY_ALGORITHM_BIT = 0x00000008,\n\n    /** Bit mask to extract only `ALGORITHM` bits from entire set of flags.\n    */\n    VMA_POOL_CREATE_ALGORITHM_MASK =\n        VMA_POOL_CREATE_LINEAR_ALGORITHM_BIT |\n        VMA_POOL_CREATE_BUDDY_ALGORITHM_BIT,\n\n    VMA_POOL_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF\n} VmaPoolCreateFlagBits;\n/// Flags to be passed as VmaPoolCreateInfo::flags. See #VmaPoolCreateFlagBits.\ntypedef VkFlags VmaPoolCreateFlags;\n\n/** \\brief Describes parameter of created #VmaPool.\n*/\ntypedef struct VmaPoolCreateInfo {\n    /** \\brief Vulkan memory type index to allocate this pool from.\n    */\n    uint32_t memoryTypeIndex;\n    /** \\brief Use combination of #VmaPoolCreateFlagBits.\n    */\n    VmaPoolCreateFlags flags;\n    /** \\brief Size of a single `VkDeviceMemory` block to be allocated as part of this pool, in bytes. Optional.\n\n    Specify nonzero to set explicit, constant size of memory blocks used by this\n    pool.\n\n    Leave 0 to use default and let the library manage block sizes automatically.\n    Sizes of particular blocks may vary.\n    */\n    VkDeviceSize blockSize;\n    /** \\brief Minimum number of blocks to be always allocated in this pool, even if they stay empty.\n\n    Set to 0 to have no preallocated blocks and allow the pool be completely empty.\n    */\n    size_t minBlockCount;\n    /** \\brief Maximum number of blocks that can be allocated in this pool. Optional.\n\n    Set to 0 to use default, which is `SIZE_MAX`, which means no limit.\n\n    Set to same value as VmaPoolCreateInfo::minBlockCount to have fixed amount of memory allocated\n    throughout whole lifetime of this pool.\n    */\n    size_t maxBlockCount;\n    /** \\brief Maximum number of additional frames that are in use at the same time as current frame.\n\n    This value is used only when you make allocations with\n    #VMA_ALLOCATION_CREATE_CAN_BECOME_LOST_BIT flag. Such allocation cannot become\n    lost if allocation.lastUseFrameIndex >= allocator.currentFrameIndex - frameInUseCount.\n\n    For example, if you double-buffer your command buffers, so resources used for\n    rendering in previous frame may still be in use by the GPU at the moment you\n    allocate resources needed for the current frame, set this value to 1.\n\n    If you want to allow any allocations other than used in the current frame to\n    become lost, set this value to 0.\n    */\n    uint32_t frameInUseCount;\n    /** \\brief A floating-point value between 0 and 1, indicating the priority of the allocations in this pool relative to other memory allocations.\n\n    It is used only when #VMA_ALLOCATOR_CREATE_EXT_MEMORY_PRIORITY_BIT flag was used during creation of the #VmaAllocator object.\n    Otherwise, this variable is ignored.\n    */\n    float priority;\n    /** \\brief Additional minimum alignment to be used for all allocations created from this pool. Can be 0.\n\n    Leave 0 (default) not to impose any additional alignment. If not 0, it must be a power of two.\n    It can be useful in cases where alignment returned by Vulkan by functions like `vkGetBufferMemoryRequirements` is not enough,\n    e.g. when doing interop with OpenGL.\n    */\n    VkDeviceSize minAllocationAlignment;\n    /** \\brief Additional `pNext` chain to be attached to `VkMemoryAllocateInfo` used for every allocation made by this pool. Optional.\n\n    Optional, can be null. If not null, it must point to a `pNext` chain of structures that can be attached to `VkMemoryAllocateInfo`.\n    It can be useful for special needs such as adding `VkExportMemoryAllocateInfoKHR`.\n    Structures pointed by this member must remain alive and unchanged for the whole lifetime of the custom pool.\n\n    Please note that some structures, e.g. `VkMemoryPriorityAllocateInfoEXT`, `VkMemoryDedicatedAllocateInfoKHR`,\n    can be attached automatically by this library when using other, more convenient of its features.\n    */\n    void* VMA_NULLABLE pMemoryAllocateNext;\n} VmaPoolCreateInfo;\n\n/** \\brief Describes parameter of existing #VmaPool.\n*/\ntypedef struct VmaPoolStats {\n    /** \\brief Total amount of `VkDeviceMemory` allocated from Vulkan for this pool, in bytes.\n    */\n    VkDeviceSize size;\n    /** \\brief Total number of bytes in the pool not used by any #VmaAllocation.\n    */\n    VkDeviceSize unusedSize;\n    /** \\brief Number of #VmaAllocation objects created from this pool that were not destroyed or lost.\n    */\n    size_t allocationCount;\n    /** \\brief Number of continuous memory ranges in the pool not used by any #VmaAllocation.\n    */\n    size_t unusedRangeCount;\n    /** \\brief Size of the largest continuous free memory region available for new allocation.\n\n    Making a new allocation of that size is not guaranteed to succeed because of\n    possible additional margin required to respect alignment and buffer/image\n    granularity.\n    */\n    VkDeviceSize unusedRangeSizeMax;\n    /** \\brief Number of `VkDeviceMemory` blocks allocated for this pool.\n    */\n    size_t blockCount;\n} VmaPoolStats;\n\n/** \\brief Allocates Vulkan device memory and creates #VmaPool object.\n\n@param allocator Allocator object.\n@param pCreateInfo Parameters of pool to create.\n@param[out] pPool Handle to created pool.\n*/\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaCreatePool(\n    VmaAllocator VMA_NOT_NULL allocator,\n    const VmaPoolCreateInfo* VMA_NOT_NULL pCreateInfo,\n    VmaPool VMA_NULLABLE * VMA_NOT_NULL pPool);\n\n/** \\brief Destroys #VmaPool object and frees Vulkan device memory.\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaDestroyPool(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaPool VMA_NULLABLE pool);\n\n/** \\brief Retrieves statistics of existing #VmaPool object.\n\n@param allocator Allocator object.\n@param pool Pool object.\n@param[out] pPoolStats Statistics of specified pool.\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaGetPoolStats(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaPool VMA_NOT_NULL pool,\n    VmaPoolStats* VMA_NOT_NULL pPoolStats);\n\n/** \\brief Marks all allocations in given pool as lost if they are not used in current frame or VmaPoolCreateInfo::frameInUseCount back from now.\n\n@param allocator Allocator object.\n@param pool Pool.\n@param[out] pLostAllocationCount Number of allocations marked as lost. Optional - pass null if you don't need this information.\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaMakePoolAllocationsLost(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaPool VMA_NOT_NULL pool,\n    size_t* VMA_NULLABLE pLostAllocationCount);\n\n/** \\brief Checks magic number in margins around all allocations in given memory pool in search for corruptions.\n\nCorruption detection is enabled only when `VMA_DEBUG_DETECT_CORRUPTION` macro is defined to nonzero,\n`VMA_DEBUG_MARGIN` is defined to nonzero and the pool is created in memory type that is\n`HOST_VISIBLE` and `HOST_COHERENT`. For more information, see [Corruption detection](@ref debugging_memory_usage_corruption_detection).\n\nPossible return values:\n\n- `VK_ERROR_FEATURE_NOT_PRESENT` - corruption detection is not enabled for specified pool.\n- `VK_SUCCESS` - corruption detection has been performed and succeeded.\n- `VK_ERROR_UNKNOWN` - corruption detection has been performed and found memory corruptions around one of the allocations.\n  `VMA_ASSERT` is also fired in that case.\n- Other value: Error returned by Vulkan, e.g. memory mapping failure.\n*/\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaCheckPoolCorruption(VmaAllocator VMA_NOT_NULL allocator, VmaPool VMA_NOT_NULL pool);\n\n/** \\brief Retrieves name of a custom pool.\n\nAfter the call `ppName` is either null or points to an internally-owned null-terminated string\ncontaining name of the pool that was previously set. The pointer becomes invalid when the pool is\ndestroyed or its name is changed using vmaSetPoolName().\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaGetPoolName(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaPool VMA_NOT_NULL pool,\n    const char* VMA_NULLABLE * VMA_NOT_NULL ppName);\n\n/** \\brief Sets name of a custom pool.\n\n`pName` can be either null or pointer to a null-terminated string with new name for the pool.\nFunction makes internal copy of the string, so it can be changed or freed immediately after this call.\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaSetPoolName(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaPool VMA_NOT_NULL pool,\n    const char* VMA_NULLABLE pName);\n\n/** \\struct VmaAllocation\n\\brief Represents single memory allocation.\n\nIt may be either dedicated block of `VkDeviceMemory` or a specific region of a bigger block of this type\nplus unique offset.\n\nThere are multiple ways to create such object.\nYou need to fill structure VmaAllocationCreateInfo.\nFor more information see [Choosing memory type](@ref choosing_memory_type).\n\nAlthough the library provides convenience functions that create Vulkan buffer or image,\nallocate memory for it and bind them together,\nbinding of the allocation to a buffer or an image is out of scope of the allocation itself.\nAllocation object can exist without buffer/image bound,\nbinding can be done manually by the user, and destruction of it can be done\nindependently of destruction of the allocation.\n\nThe object also remembers its size and some other information.\nTo retrieve this information, use function vmaGetAllocationInfo() and inspect\nreturned structure VmaAllocationInfo.\n\nSome kinds allocations can be in lost state.\nFor more information, see [Lost allocations](@ref lost_allocations).\n*/\nVK_DEFINE_HANDLE(VmaAllocation)\n\n/** \\brief Parameters of #VmaAllocation objects, that can be retrieved using function vmaGetAllocationInfo().\n*/\ntypedef struct VmaAllocationInfo {\n    /** \\brief Memory type index that this allocation was allocated from.\n\n    It never changes.\n    */\n    uint32_t memoryType;\n    /** \\brief Handle to Vulkan memory object.\n\n    Same memory object can be shared by multiple allocations.\n\n    It can change after call to vmaDefragment() if this allocation is passed to the function, or if allocation is lost.\n\n    If the allocation is lost, it is equal to `VK_NULL_HANDLE`.\n    */\n    VkDeviceMemory VMA_NULLABLE_NON_DISPATCHABLE deviceMemory;\n    /** \\brief Offset in `VkDeviceMemory` object to the beginning of this allocation, in bytes. `(deviceMemory, offset)` pair is unique to this allocation.\n\n    You usually don't need to use this offset. If you create a buffer or an image together with the allocation using e.g. function\n    vmaCreateBuffer(), vmaCreateImage(), functions that operate on these resources refer to the beginning of the buffer or image,\n    not entire device memory block. Functions like vmaMapMemory(), vmaBindBufferMemory() also refer to the beginning of the allocation\n    and apply this offset automatically.\n\n    It can change after call to vmaDefragment() if this allocation is passed to the function, or if allocation is lost.\n    */\n    VkDeviceSize offset;\n    /** \\brief Size of this allocation, in bytes.\n\n    It never changes, unless allocation is lost.\n\n    \\note Allocation size returned in this variable may be greater than the size\n    requested for the resource e.g. as `VkBufferCreateInfo::size`. Whole size of the\n    allocation is accessible for operations on memory e.g. using a pointer after\n    mapping with vmaMapMemory(), but operations on the resource e.g. using\n    `vkCmdCopyBuffer` must be limited to the size of the resource.\n    */\n    VkDeviceSize size;\n    /** \\brief Pointer to the beginning of this allocation as mapped data.\n\n    If the allocation hasn't been mapped using vmaMapMemory() and hasn't been\n    created with #VMA_ALLOCATION_CREATE_MAPPED_BIT flag, this value is null.\n\n    It can change after call to vmaMapMemory(), vmaUnmapMemory().\n    It can also change after call to vmaDefragment() if this allocation is passed to the function.\n    */\n    void* VMA_NULLABLE pMappedData;\n    /** \\brief Custom general-purpose pointer that was passed as VmaAllocationCreateInfo::pUserData or set using vmaSetAllocationUserData().\n\n    It can change after call to vmaSetAllocationUserData() for this allocation.\n    */\n    void* VMA_NULLABLE pUserData;\n} VmaAllocationInfo;\n\n/** \\brief General purpose memory allocation.\n\n@param allocator\n@param pVkMemoryRequirements\n@param pCreateInfo\n@param[out] pAllocation Handle to allocated memory.\n@param[out] pAllocationInfo Optional. Information about allocated memory. It can be later fetched using function vmaGetAllocationInfo().\n\nYou should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().\n\nIt is recommended to use vmaAllocateMemoryForBuffer(), vmaAllocateMemoryForImage(),\nvmaCreateBuffer(), vmaCreateImage() instead whenever possible.\n*/\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaAllocateMemory(\n    VmaAllocator VMA_NOT_NULL allocator,\n    const VkMemoryRequirements* VMA_NOT_NULL pVkMemoryRequirements,\n    const VmaAllocationCreateInfo* VMA_NOT_NULL pCreateInfo,\n    VmaAllocation VMA_NULLABLE * VMA_NOT_NULL pAllocation,\n    VmaAllocationInfo* VMA_NULLABLE pAllocationInfo);\n\n/** \\brief General purpose memory allocation for multiple allocation objects at once.\n\n@param allocator Allocator object.\n@param pVkMemoryRequirements Memory requirements for each allocation.\n@param pCreateInfo Creation parameters for each alloction.\n@param allocationCount Number of allocations to make.\n@param[out] pAllocations Pointer to array that will be filled with handles to created allocations.\n@param[out] pAllocationInfo Optional. Pointer to array that will be filled with parameters of created allocations.\n\nYou should free the memory using vmaFreeMemory() or vmaFreeMemoryPages().\n\nWord \"pages\" is just a suggestion to use this function to allocate pieces of memory needed for sparse binding.\nIt is just a general purpose allocation function able to make multiple allocations at once.\nIt may be internally optimized to be more efficient than calling vmaAllocateMemory() `allocationCount` times.\n\nAll allocations are made using same parameters. All of them are created out of the same memory pool and type.\nIf any allocation fails, all allocations already made within this function call are also freed, so that when\nreturned result is not `VK_SUCCESS`, `pAllocation` array is always entirely filled with `VK_NULL_HANDLE`.\n*/\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaAllocateMemoryPages(\n    VmaAllocator VMA_NOT_NULL allocator,\n    const VkMemoryRequirements* VMA_NOT_NULL VMA_LEN_IF_NOT_NULL(allocationCount) pVkMemoryRequirements,\n    const VmaAllocationCreateInfo* VMA_NOT_NULL VMA_LEN_IF_NOT_NULL(allocationCount) pCreateInfo,\n    size_t allocationCount,\n    VmaAllocation VMA_NULLABLE * VMA_NOT_NULL VMA_LEN_IF_NOT_NULL(allocationCount) pAllocations,\n    VmaAllocationInfo* VMA_NULLABLE VMA_LEN_IF_NOT_NULL(allocationCount) pAllocationInfo);\n\n/**\n@param allocator\n@param buffer\n@param pCreateInfo\n@param[out] pAllocation Handle to allocated memory.\n@param[out] pAllocationInfo Optional. Information about allocated memory. It can be later fetched using function vmaGetAllocationInfo().\n\nYou should free the memory using vmaFreeMemory().\n*/\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaAllocateMemoryForBuffer(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VkBuffer VMA_NOT_NULL_NON_DISPATCHABLE buffer,\n    const VmaAllocationCreateInfo* VMA_NOT_NULL pCreateInfo,\n    VmaAllocation VMA_NULLABLE * VMA_NOT_NULL pAllocation,\n    VmaAllocationInfo* VMA_NULLABLE pAllocationInfo);\n\n/// Function similar to vmaAllocateMemoryForBuffer().\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaAllocateMemoryForImage(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VkImage VMA_NOT_NULL_NON_DISPATCHABLE image,\n    const VmaAllocationCreateInfo* VMA_NOT_NULL pCreateInfo,\n    VmaAllocation VMA_NULLABLE * VMA_NOT_NULL pAllocation,\n    VmaAllocationInfo* VMA_NULLABLE pAllocationInfo);\n\n/** \\brief Frees memory previously allocated using vmaAllocateMemory(), vmaAllocateMemoryForBuffer(), or vmaAllocateMemoryForImage().\n\nPassing `VK_NULL_HANDLE` as `allocation` is valid. Such function call is just skipped.\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaFreeMemory(\n    VmaAllocator VMA_NOT_NULL allocator,\n    const VmaAllocation VMA_NULLABLE allocation);\n\n/** \\brief Frees memory and destroys multiple allocations.\n\nWord \"pages\" is just a suggestion to use this function to free pieces of memory used for sparse binding.\nIt is just a general purpose function to free memory and destroy allocations made using e.g. vmaAllocateMemory(),\nvmaAllocateMemoryPages() and other functions.\nIt may be internally optimized to be more efficient than calling vmaFreeMemory() `allocationCount` times.\n\nAllocations in `pAllocations` array can come from any memory pools and types.\nPassing `VK_NULL_HANDLE` as elements of `pAllocations` array is valid. Such entries are just skipped.\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaFreeMemoryPages(\n    VmaAllocator VMA_NOT_NULL allocator,\n    size_t allocationCount,\n    const VmaAllocation VMA_NULLABLE * VMA_NOT_NULL VMA_LEN_IF_NOT_NULL(allocationCount) pAllocations);\n\n/** \\brief Returns current information about specified allocation and atomically marks it as used in current frame.\n\nCurrent paramteres of given allocation are returned in `pAllocationInfo`.\n\nThis function also atomically \"touches\" allocation - marks it as used in current frame,\njust like vmaTouchAllocation().\nIf the allocation is in lost state, `pAllocationInfo->deviceMemory == VK_NULL_HANDLE`.\n\nAlthough this function uses atomics and doesn't lock any mutex, so it should be quite efficient,\nyou can avoid calling it too often.\n\n- You can retrieve same VmaAllocationInfo structure while creating your resource, from function\n  vmaCreateBuffer(), vmaCreateImage(). You can remember it if you are sure parameters don't change\n  (e.g. due to defragmentation or allocation becoming lost).\n- If you just want to check if allocation is not lost, vmaTouchAllocation() will work faster.\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaGetAllocationInfo(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocation VMA_NOT_NULL allocation,\n    VmaAllocationInfo* VMA_NOT_NULL pAllocationInfo);\n\n/** \\brief Returns `VK_TRUE` if allocation is not lost and atomically marks it as used in current frame.\n\nIf the allocation has been created with #VMA_ALLOCATION_CREATE_CAN_BECOME_LOST_BIT flag,\nthis function returns `VK_TRUE` if it is not in lost state, so it can still be used.\nIt then also atomically \"touches\" the allocation - marks it as used in current frame,\nso that you can be sure it won't become lost in current frame or next `frameInUseCount` frames.\n\nIf the allocation is in lost state, the function returns `VK_FALSE`.\nMemory of such allocation, as well as buffer or image bound to it, should not be used.\nLost allocation and the buffer/image still need to be destroyed.\n\nIf the allocation has been created without #VMA_ALLOCATION_CREATE_CAN_BECOME_LOST_BIT flag,\nthis function always returns `VK_TRUE`.\n*/\nVMA_CALL_PRE VkBool32 VMA_CALL_POST vmaTouchAllocation(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocation VMA_NOT_NULL allocation);\n\n/** \\brief Sets pUserData in given allocation to new value.\n\nIf the allocation was created with VMA_ALLOCATION_CREATE_USER_DATA_COPY_STRING_BIT,\npUserData must be either null, or pointer to a null-terminated string. The function\nmakes local copy of the string and sets it as allocation's `pUserData`. String\npassed as pUserData doesn't need to be valid for whole lifetime of the allocation -\nyou can free it after this call. String previously pointed by allocation's\npUserData is freed from memory.\n\nIf the flag was not used, the value of pointer `pUserData` is just copied to\nallocation's `pUserData`. It is opaque, so you can use it however you want - e.g.\nas a pointer, ordinal number or some handle to you own data.\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaSetAllocationUserData(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocation VMA_NOT_NULL allocation,\n    void* VMA_NULLABLE pUserData);\n\n/** \\brief Creates new allocation that is in lost state from the beginning.\n\nIt can be useful if you need a dummy, non-null allocation.\n\nYou still need to destroy created object using vmaFreeMemory().\n\nReturned allocation is not tied to any specific memory pool or memory type and\nnot bound to any image or buffer. It has size = 0. It cannot be turned into\na real, non-empty allocation.\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaCreateLostAllocation(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocation VMA_NULLABLE * VMA_NOT_NULL pAllocation);\n\n/**\n\\brief Given an allocation, returns Property Flags of its memory type.\n\nThis is just a convenience function. Same information can be obtained using\nvmaGetAllocationInfo() + vmaGetMemoryProperties().\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaGetAllocationMemoryProperties(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocation VMA_NOT_NULL allocation,\n    VkMemoryPropertyFlags* VMA_NOT_NULL pFlags);\n\n/** \\brief Maps memory represented by given allocation and returns pointer to it.\n\nMaps memory represented by given allocation to make it accessible to CPU code.\nWhen succeeded, `*ppData` contains pointer to first byte of this memory.\nIf the allocation is part of bigger `VkDeviceMemory` block, the pointer is\ncorrectly offsetted to the beginning of region assigned to this particular\nallocation.\n\nMapping is internally reference-counted and synchronized, so despite raw Vulkan\nfunction `vkMapMemory()` cannot be used to map same block of `VkDeviceMemory`\nmultiple times simultaneously, it is safe to call this function on allocations\nassigned to the same memory block. Actual Vulkan memory will be mapped on first\nmapping and unmapped on last unmapping.\n\nIf the function succeeded, you must call vmaUnmapMemory() to unmap the\nallocation when mapping is no longer needed or before freeing the allocation, at\nthe latest.\n\nIt also safe to call this function multiple times on the same allocation. You\nmust call vmaUnmapMemory() same number of times as you called vmaMapMemory().\n\nIt is also safe to call this function on allocation created with\n#VMA_ALLOCATION_CREATE_MAPPED_BIT flag. Its memory stays mapped all the time.\nYou must still call vmaUnmapMemory() same number of times as you called\nvmaMapMemory(). You must not call vmaUnmapMemory() additional time to free the\n\"0-th\" mapping made automatically due to #VMA_ALLOCATION_CREATE_MAPPED_BIT flag.\n\nThis function fails when used on allocation made in memory type that is not\n`HOST_VISIBLE`.\n\nThis function always fails when called for allocation that was created with\n#VMA_ALLOCATION_CREATE_CAN_BECOME_LOST_BIT flag. Such allocations cannot be\nmapped.\n\nThis function doesn't automatically flush or invalidate caches.\nIf the allocation is made from a memory types that is not `HOST_COHERENT`,\nyou also need to use vmaInvalidateAllocation() / vmaFlushAllocation(), as required by Vulkan specification.\n*/\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaMapMemory(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocation VMA_NOT_NULL allocation,\n    void* VMA_NULLABLE * VMA_NOT_NULL ppData);\n\n/** \\brief Unmaps memory represented by given allocation, mapped previously using vmaMapMemory().\n\nFor details, see description of vmaMapMemory().\n\nThis function doesn't automatically flush or invalidate caches.\nIf the allocation is made from a memory types that is not `HOST_COHERENT`,\nyou also need to use vmaInvalidateAllocation() / vmaFlushAllocation(), as required by Vulkan specification.\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaUnmapMemory(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocation VMA_NOT_NULL allocation);\n\n/** \\brief Flushes memory of given allocation.\n\nCalls `vkFlushMappedMemoryRanges()` for memory associated with given range of given allocation.\nIt needs to be called after writing to a mapped memory for memory types that are not `HOST_COHERENT`.\nUnmap operation doesn't do that automatically.\n\n- `offset` must be relative to the beginning of allocation.\n- `size` can be `VK_WHOLE_SIZE`. It means all memory from `offset` the the end of given allocation.\n- `offset` and `size` don't have to be aligned.\n  They are internally rounded down/up to multiply of `nonCoherentAtomSize`.\n- If `size` is 0, this call is ignored.\n- If memory type that the `allocation` belongs to is not `HOST_VISIBLE` or it is `HOST_COHERENT`,\n  this call is ignored.\n\nWarning! `offset` and `size` are relative to the contents of given `allocation`.\nIf you mean whole allocation, you can pass 0 and `VK_WHOLE_SIZE`, respectively.\nDo not pass allocation's offset as `offset`!!!\n\nThis function returns the `VkResult` from `vkFlushMappedMemoryRanges` if it is\ncalled, otherwise `VK_SUCCESS`.\n*/\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaFlushAllocation(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocation VMA_NOT_NULL allocation,\n    VkDeviceSize offset,\n    VkDeviceSize size);\n\n/** \\brief Invalidates memory of given allocation.\n\nCalls `vkInvalidateMappedMemoryRanges()` for memory associated with given range of given allocation.\nIt needs to be called before reading from a mapped memory for memory types that are not `HOST_COHERENT`.\nMap operation doesn't do that automatically.\n\n- `offset` must be relative to the beginning of allocation.\n- `size` can be `VK_WHOLE_SIZE`. It means all memory from `offset` the the end of given allocation.\n- `offset` and `size` don't have to be aligned.\n  They are internally rounded down/up to multiply of `nonCoherentAtomSize`.\n- If `size` is 0, this call is ignored.\n- If memory type that the `allocation` belongs to is not `HOST_VISIBLE` or it is `HOST_COHERENT`,\n  this call is ignored.\n\nWarning! `offset` and `size` are relative to the contents of given `allocation`.\nIf you mean whole allocation, you can pass 0 and `VK_WHOLE_SIZE`, respectively.\nDo not pass allocation's offset as `offset`!!!\n\nThis function returns the `VkResult` from `vkInvalidateMappedMemoryRanges` if\nit is called, otherwise `VK_SUCCESS`.\n*/\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaInvalidateAllocation(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocation VMA_NOT_NULL allocation,\n    VkDeviceSize offset,\n    VkDeviceSize size);\n\n/** \\brief Flushes memory of given set of allocations.\n\nCalls `vkFlushMappedMemoryRanges()` for memory associated with given ranges of given allocations.\nFor more information, see documentation of vmaFlushAllocation().\n\n\\param allocator\n\\param allocationCount\n\\param allocations\n\\param offsets If not null, it must point to an array of offsets of regions to flush, relative to the beginning of respective allocations. Null means all ofsets are zero.\n\\param sizes If not null, it must point to an array of sizes of regions to flush in respective allocations. Null means `VK_WHOLE_SIZE` for all allocations.\n\nThis function returns the `VkResult` from `vkFlushMappedMemoryRanges` if it is\ncalled, otherwise `VK_SUCCESS`.\n*/\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaFlushAllocations(\n    VmaAllocator VMA_NOT_NULL allocator,\n    uint32_t allocationCount,\n    const VmaAllocation VMA_NOT_NULL * VMA_NULLABLE VMA_LEN_IF_NOT_NULL(allocationCount) allocations,\n    const VkDeviceSize* VMA_NULLABLE VMA_LEN_IF_NOT_NULL(allocationCount) offsets,\n    const VkDeviceSize* VMA_NULLABLE VMA_LEN_IF_NOT_NULL(allocationCount) sizes);\n\n/** \\brief Invalidates memory of given set of allocations.\n\nCalls `vkInvalidateMappedMemoryRanges()` for memory associated with given ranges of given allocations.\nFor more information, see documentation of vmaInvalidateAllocation().\n\n\\param allocator\n\\param allocationCount\n\\param allocations\n\\param offsets If not null, it must point to an array of offsets of regions to flush, relative to the beginning of respective allocations. Null means all ofsets are zero.\n\\param sizes If not null, it must point to an array of sizes of regions to flush in respective allocations. Null means `VK_WHOLE_SIZE` for all allocations.\n\nThis function returns the `VkResult` from `vkInvalidateMappedMemoryRanges` if it is\ncalled, otherwise `VK_SUCCESS`.\n*/\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaInvalidateAllocations(\n    VmaAllocator VMA_NOT_NULL allocator,\n    uint32_t allocationCount,\n    const VmaAllocation VMA_NOT_NULL * VMA_NULLABLE VMA_LEN_IF_NOT_NULL(allocationCount) allocations,\n    const VkDeviceSize* VMA_NULLABLE VMA_LEN_IF_NOT_NULL(allocationCount) offsets,\n    const VkDeviceSize* VMA_NULLABLE VMA_LEN_IF_NOT_NULL(allocationCount) sizes);\n\n/** \\brief Checks magic number in margins around all allocations in given memory types (in both default and custom pools) in search for corruptions.\n\n@param allocator\n@param memoryTypeBits Bit mask, where each bit set means that a memory type with that index should be checked.\n\nCorruption detection is enabled only when `VMA_DEBUG_DETECT_CORRUPTION` macro is defined to nonzero,\n`VMA_DEBUG_MARGIN` is defined to nonzero and only for memory types that are\n`HOST_VISIBLE` and `HOST_COHERENT`. For more information, see [Corruption detection](@ref debugging_memory_usage_corruption_detection).\n\nPossible return values:\n\n- `VK_ERROR_FEATURE_NOT_PRESENT` - corruption detection is not enabled for any of specified memory types.\n- `VK_SUCCESS` - corruption detection has been performed and succeeded.\n- `VK_ERROR_UNKNOWN` - corruption detection has been performed and found memory corruptions around one of the allocations.\n  `VMA_ASSERT` is also fired in that case.\n- Other value: Error returned by Vulkan, e.g. memory mapping failure.\n*/\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaCheckCorruption(VmaAllocator VMA_NOT_NULL allocator, uint32_t memoryTypeBits);\n\n/** \\struct VmaDefragmentationContext\n\\brief Represents Opaque object that represents started defragmentation process.\n\nFill structure #VmaDefragmentationInfo2 and call function vmaDefragmentationBegin() to create it.\nCall function vmaDefragmentationEnd() to destroy it.\n*/\nVK_DEFINE_HANDLE(VmaDefragmentationContext)\n\n/// Flags to be used in vmaDefragmentationBegin(). None at the moment. Reserved for future use.\ntypedef enum VmaDefragmentationFlagBits {\n    VMA_DEFRAGMENTATION_FLAG_INCREMENTAL = 0x1,\n    VMA_DEFRAGMENTATION_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF\n} VmaDefragmentationFlagBits;\ntypedef VkFlags VmaDefragmentationFlags;\n\n/** \\brief Parameters for defragmentation.\n\nTo be used with function vmaDefragmentationBegin().\n*/\ntypedef struct VmaDefragmentationInfo2 {\n    /** \\brief Reserved for future use. Should be 0.\n    */\n    VmaDefragmentationFlags flags;\n    /** \\brief Number of allocations in `pAllocations` array.\n    */\n    uint32_t allocationCount;\n    /** \\brief Pointer to array of allocations that can be defragmented.\n\n    The array should have `allocationCount` elements.\n    The array should not contain nulls.\n    Elements in the array should be unique - same allocation cannot occur twice.\n    It is safe to pass allocations that are in the lost state - they are ignored.\n    All allocations not present in this array are considered non-moveable during this defragmentation.\n    */\n    const VmaAllocation VMA_NOT_NULL * VMA_NULLABLE VMA_LEN_IF_NOT_NULL(allocationCount) pAllocations;\n    /** \\brief Optional, output. Pointer to array that will be filled with information whether the allocation at certain index has been changed during defragmentation.\n\n    The array should have `allocationCount` elements.\n    You can pass null if you are not interested in this information.\n    */\n    VkBool32* VMA_NULLABLE VMA_LEN_IF_NOT_NULL(allocationCount) pAllocationsChanged;\n    /** \\brief Numer of pools in `pPools` array.\n    */\n    uint32_t poolCount;\n    /** \\brief Either null or pointer to array of pools to be defragmented.\n\n    All the allocations in the specified pools can be moved during defragmentation\n    and there is no way to check if they were really moved as in `pAllocationsChanged`,\n    so you must query all the allocations in all these pools for new `VkDeviceMemory`\n    and offset using vmaGetAllocationInfo() if you might need to recreate buffers\n    and images bound to them.\n\n    The array should have `poolCount` elements.\n    The array should not contain nulls.\n    Elements in the array should be unique - same pool cannot occur twice.\n\n    Using this array is equivalent to specifying all allocations from the pools in `pAllocations`.\n    It might be more efficient.\n    */\n    const VmaPool VMA_NOT_NULL * VMA_NULLABLE VMA_LEN_IF_NOT_NULL(poolCount) pPools;\n    /** \\brief Maximum total numbers of bytes that can be copied while moving allocations to different places using transfers on CPU side, like `memcpy()`, `memmove()`.\n\n    `VK_WHOLE_SIZE` means no limit.\n    */\n    VkDeviceSize maxCpuBytesToMove;\n    /** \\brief Maximum number of allocations that can be moved to a different place using transfers on CPU side, like `memcpy()`, `memmove()`.\n\n    `UINT32_MAX` means no limit.\n    */\n    uint32_t maxCpuAllocationsToMove;\n    /** \\brief Maximum total numbers of bytes that can be copied while moving allocations to different places using transfers on GPU side, posted to `commandBuffer`.\n\n    `VK_WHOLE_SIZE` means no limit.\n    */\n    VkDeviceSize maxGpuBytesToMove;\n    /** \\brief Maximum number of allocations that can be moved to a different place using transfers on GPU side, posted to `commandBuffer`.\n\n    `UINT32_MAX` means no limit.\n    */\n    uint32_t maxGpuAllocationsToMove;\n    /** \\brief Optional. Command buffer where GPU copy commands will be posted.\n\n    If not null, it must be a valid command buffer handle that supports Transfer queue type.\n    It must be in the recording state and outside of a render pass instance.\n    You need to submit it and make sure it finished execution before calling vmaDefragmentationEnd().\n\n    Passing null means that only CPU defragmentation will be performed.\n    */\n    VkCommandBuffer VMA_NULLABLE commandBuffer;\n} VmaDefragmentationInfo2;\n\ntypedef struct VmaDefragmentationPassMoveInfo {\n    VmaAllocation VMA_NOT_NULL allocation;\n    VkDeviceMemory VMA_NOT_NULL_NON_DISPATCHABLE memory;\n    VkDeviceSize offset;\n} VmaDefragmentationPassMoveInfo;\n\n/** \\brief Parameters for incremental defragmentation steps.\n\nTo be used with function vmaBeginDefragmentationPass().\n*/\ntypedef struct VmaDefragmentationPassInfo {\n    uint32_t moveCount;\n    VmaDefragmentationPassMoveInfo* VMA_NOT_NULL VMA_LEN_IF_NOT_NULL(moveCount) pMoves;\n} VmaDefragmentationPassInfo;\n\n/** \\brief Deprecated. Optional configuration parameters to be passed to function vmaDefragment().\n\n\\deprecated This is a part of the old interface. It is recommended to use structure #VmaDefragmentationInfo2 and function vmaDefragmentationBegin() instead.\n*/\ntypedef struct VmaDefragmentationInfo {\n    /** \\brief Maximum total numbers of bytes that can be copied while moving allocations to different places.\n\n    Default is `VK_WHOLE_SIZE`, which means no limit.\n    */\n    VkDeviceSize maxBytesToMove;\n    /** \\brief Maximum number of allocations that can be moved to different place.\n\n    Default is `UINT32_MAX`, which means no limit.\n    */\n    uint32_t maxAllocationsToMove;\n} VmaDefragmentationInfo;\n\n/** \\brief Statistics returned by function vmaDefragment(). */\ntypedef struct VmaDefragmentationStats {\n    /// Total number of bytes that have been copied while moving allocations to different places.\n    VkDeviceSize bytesMoved;\n    /// Total number of bytes that have been released to the system by freeing empty `VkDeviceMemory` objects.\n    VkDeviceSize bytesFreed;\n    /// Number of allocations that have been moved to different places.\n    uint32_t allocationsMoved;\n    /// Number of empty `VkDeviceMemory` objects that have been released to the system.\n    uint32_t deviceMemoryBlocksFreed;\n} VmaDefragmentationStats;\n\n/** \\brief Begins defragmentation process.\n\n@param allocator Allocator object.\n@param pInfo Structure filled with parameters of defragmentation.\n@param[out] pStats Optional. Statistics of defragmentation. You can pass null if you are not interested in this information.\n@param[out] pContext Context object that must be passed to vmaDefragmentationEnd() to finish defragmentation.\n@return `VK_SUCCESS` and `*pContext == null` if defragmentation finished within this function call. `VK_NOT_READY` and `*pContext != null` if defragmentation has been started and you need to call vmaDefragmentationEnd() to finish it. Negative value in case of error.\n\nUse this function instead of old, deprecated vmaDefragment().\n\nWarning! Between the call to vmaDefragmentationBegin() and vmaDefragmentationEnd():\n\n- You should not use any of allocations passed as `pInfo->pAllocations` or\n  any allocations that belong to pools passed as `pInfo->pPools`,\n  including calling vmaGetAllocationInfo(), vmaTouchAllocation(), or access\n  their data.\n- Some mutexes protecting internal data structures may be locked, so trying to\n  make or free any allocations, bind buffers or images, map memory, or launch\n  another simultaneous defragmentation in between may cause stall (when done on\n  another thread) or deadlock (when done on the same thread), unless you are\n  100% sure that defragmented allocations are in different pools.\n- Information returned via `pStats` and `pInfo->pAllocationsChanged` are undefined.\n  They become valid after call to vmaDefragmentationEnd().\n- If `pInfo->commandBuffer` is not null, you must submit that command buffer\n  and make sure it finished execution before calling vmaDefragmentationEnd().\n\nFor more information and important limitations regarding defragmentation, see documentation chapter:\n[Defragmentation](@ref defragmentation).\n*/\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaDefragmentationBegin(\n    VmaAllocator VMA_NOT_NULL allocator,\n    const VmaDefragmentationInfo2* VMA_NOT_NULL pInfo,\n    VmaDefragmentationStats* VMA_NULLABLE pStats,\n    VmaDefragmentationContext VMA_NULLABLE * VMA_NOT_NULL pContext);\n\n/** \\brief Ends defragmentation process.\n\nUse this function to finish defragmentation started by vmaDefragmentationBegin().\nIt is safe to pass `context == null`. The function then does nothing.\n*/\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaDefragmentationEnd(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaDefragmentationContext VMA_NULLABLE context);\n\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaBeginDefragmentationPass(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaDefragmentationContext VMA_NULLABLE context,\n    VmaDefragmentationPassInfo* VMA_NOT_NULL pInfo\n);\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaEndDefragmentationPass(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaDefragmentationContext VMA_NULLABLE context\n);\n\n/** \\brief Deprecated. Compacts memory by moving allocations.\n\n@param allocator\n@param pAllocations Array of allocations that can be moved during this compation.\n@param allocationCount Number of elements in pAllocations and pAllocationsChanged arrays.\n@param[out] pAllocationsChanged Array of boolean values that will indicate whether matching allocation in pAllocations array has been moved. This parameter is optional. Pass null if you don't need this information.\n@param pDefragmentationInfo Configuration parameters. Optional - pass null to use default values.\n@param[out] pDefragmentationStats Statistics returned by the function. Optional - pass null if you don't need this information.\n@return `VK_SUCCESS` if completed, negative error code in case of error.\n\n\\deprecated This is a part of the old interface. It is recommended to use structure #VmaDefragmentationInfo2 and function vmaDefragmentationBegin() instead.\n\nThis function works by moving allocations to different places (different\n`VkDeviceMemory` objects and/or different offsets) in order to optimize memory\nusage. Only allocations that are in `pAllocations` array can be moved. All other\nallocations are considered nonmovable in this call. Basic rules:\n\n- Only allocations made in memory types that have\n  `VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT` and `VK_MEMORY_PROPERTY_HOST_COHERENT_BIT`\n  flags can be compacted. You may pass other allocations but it makes no sense -\n  these will never be moved.\n- Custom pools created with #VMA_POOL_CREATE_LINEAR_ALGORITHM_BIT or\n  #VMA_POOL_CREATE_BUDDY_ALGORITHM_BIT flag are not defragmented. Allocations\n  passed to this function that come from such pools are ignored.\n- Allocations created with #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT or\n  created as dedicated allocations for any other reason are also ignored.\n- Both allocations made with or without #VMA_ALLOCATION_CREATE_MAPPED_BIT\n  flag can be compacted. If not persistently mapped, memory will be mapped\n  temporarily inside this function if needed.\n- You must not pass same #VmaAllocation object multiple times in `pAllocations` array.\n\nThe function also frees empty `VkDeviceMemory` blocks.\n\nWarning: This function may be time-consuming, so you shouldn't call it too often\n(like after every resource creation/destruction).\nYou can call it on special occasions (like when reloading a game level or\nwhen you just destroyed a lot of objects). Calling it every frame may be OK, but\nyou should measure that on your platform.\n\nFor more information, see [Defragmentation](@ref defragmentation) chapter.\n*/\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaDefragment(\n    VmaAllocator VMA_NOT_NULL allocator,\n    const VmaAllocation VMA_NOT_NULL * VMA_NOT_NULL VMA_LEN_IF_NOT_NULL(allocationCount) pAllocations,\n    size_t allocationCount,\n    VkBool32* VMA_NULLABLE VMA_LEN_IF_NOT_NULL(allocationCount) pAllocationsChanged,\n    const VmaDefragmentationInfo* VMA_NULLABLE pDefragmentationInfo,\n    VmaDefragmentationStats* VMA_NULLABLE pDefragmentationStats);\n\n/** \\brief Binds buffer to allocation.\n\nBinds specified buffer to region of memory represented by specified allocation.\nGets `VkDeviceMemory` handle and offset from the allocation.\nIf you want to create a buffer, allocate memory for it and bind them together separately,\nyou should use this function for binding instead of standard `vkBindBufferMemory()`,\nbecause it ensures proper synchronization so that when a `VkDeviceMemory` object is used by multiple\nallocations, calls to `vkBind*Memory()` or `vkMapMemory()` won't happen from multiple threads simultaneously\n(which is illegal in Vulkan).\n\nIt is recommended to use function vmaCreateBuffer() instead of this one.\n*/\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaBindBufferMemory(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocation VMA_NOT_NULL allocation,\n    VkBuffer VMA_NOT_NULL_NON_DISPATCHABLE buffer);\n\n/** \\brief Binds buffer to allocation with additional parameters.\n\n@param allocator\n@param allocation\n@param allocationLocalOffset Additional offset to be added while binding, relative to the beginning of the `allocation`. Normally it should be 0.\n@param buffer\n@param pNext A chain of structures to be attached to `VkBindBufferMemoryInfoKHR` structure used internally. Normally it should be null.\n\nThis function is similar to vmaBindBufferMemory(), but it provides additional parameters.\n\nIf `pNext` is not null, #VmaAllocator object must have been created with #VMA_ALLOCATOR_CREATE_KHR_BIND_MEMORY2_BIT flag\nor with VmaAllocatorCreateInfo::vulkanApiVersion `>= VK_API_VERSION_1_1`. Otherwise the call fails.\n*/\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaBindBufferMemory2(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocation VMA_NOT_NULL allocation,\n    VkDeviceSize allocationLocalOffset,\n    VkBuffer VMA_NOT_NULL_NON_DISPATCHABLE buffer,\n    const void* VMA_NULLABLE pNext);\n\n/** \\brief Binds image to allocation.\n\nBinds specified image to region of memory represented by specified allocation.\nGets `VkDeviceMemory` handle and offset from the allocation.\nIf you want to create an image, allocate memory for it and bind them together separately,\nyou should use this function for binding instead of standard `vkBindImageMemory()`,\nbecause it ensures proper synchronization so that when a `VkDeviceMemory` object is used by multiple\nallocations, calls to `vkBind*Memory()` or `vkMapMemory()` won't happen from multiple threads simultaneously\n(which is illegal in Vulkan).\n\nIt is recommended to use function vmaCreateImage() instead of this one.\n*/\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaBindImageMemory(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocation VMA_NOT_NULL allocation,\n    VkImage VMA_NOT_NULL_NON_DISPATCHABLE image);\n\n/** \\brief Binds image to allocation with additional parameters.\n\n@param allocator\n@param allocation\n@param allocationLocalOffset Additional offset to be added while binding, relative to the beginning of the `allocation`. Normally it should be 0.\n@param image\n@param pNext A chain of structures to be attached to `VkBindImageMemoryInfoKHR` structure used internally. Normally it should be null.\n\nThis function is similar to vmaBindImageMemory(), but it provides additional parameters.\n\nIf `pNext` is not null, #VmaAllocator object must have been created with #VMA_ALLOCATOR_CREATE_KHR_BIND_MEMORY2_BIT flag\nor with VmaAllocatorCreateInfo::vulkanApiVersion `>= VK_API_VERSION_1_1`. Otherwise the call fails.\n*/\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaBindImageMemory2(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocation VMA_NOT_NULL allocation,\n    VkDeviceSize allocationLocalOffset,\n    VkImage VMA_NOT_NULL_NON_DISPATCHABLE image,\n    const void* VMA_NULLABLE pNext);\n\n/**\n@param allocator\n@param pBufferCreateInfo\n@param pAllocationCreateInfo\n@param[out] pBuffer Buffer that was created.\n@param[out] pAllocation Allocation that was created.\n@param[out] pAllocationInfo Optional. Information about allocated memory. It can be later fetched using function vmaGetAllocationInfo().\n\nThis function automatically:\n\n-# Creates buffer.\n-# Allocates appropriate memory for it.\n-# Binds the buffer with the memory.\n\nIf any of these operations fail, buffer and allocation are not created,\nreturned value is negative error code, *pBuffer and *pAllocation are null.\n\nIf the function succeeded, you must destroy both buffer and allocation when you\nno longer need them using either convenience function vmaDestroyBuffer() or\nseparately, using `vkDestroyBuffer()` and vmaFreeMemory().\n\nIf #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag was used,\nVK_KHR_dedicated_allocation extension is used internally to query driver whether\nit requires or prefers the new buffer to have dedicated allocation. If yes,\nand if dedicated allocation is possible (VmaAllocationCreateInfo::pool is null\nand #VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT is not used), it creates dedicated\nallocation for this buffer, just like when using\n#VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.\n\n\\note This function creates a new `VkBuffer`. Sub-allocation of parts of one large buffer,\nalthough recommended as a good practice, is out of scope of this library and could be implemented\nby the user as a higher-level logic on top of VMA.\n*/\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaCreateBuffer(\n    VmaAllocator VMA_NOT_NULL allocator,\n    const VkBufferCreateInfo* VMA_NOT_NULL pBufferCreateInfo,\n    const VmaAllocationCreateInfo* VMA_NOT_NULL pAllocationCreateInfo,\n    VkBuffer VMA_NULLABLE_NON_DISPATCHABLE * VMA_NOT_NULL pBuffer,\n    VmaAllocation VMA_NULLABLE * VMA_NOT_NULL pAllocation,\n    VmaAllocationInfo* VMA_NULLABLE pAllocationInfo);\n\n/** \\brief Creates a buffer with additional minimum alignment.\n\nSimilar to vmaCreateBuffer() but provides additional parameter `minAlignment` which allows to specify custom,\nminimum alignment to be used when placing the buffer inside a larger memory block, which may be needed e.g.\nfor interop with OpenGL.\n*/\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaCreateBufferWithAlignment(\n    VmaAllocator VMA_NOT_NULL allocator,\n    const VkBufferCreateInfo* VMA_NOT_NULL pBufferCreateInfo,\n    const VmaAllocationCreateInfo* VMA_NOT_NULL pAllocationCreateInfo,\n    VkDeviceSize minAlignment,\n    VkBuffer VMA_NULLABLE_NON_DISPATCHABLE * VMA_NOT_NULL pBuffer,\n    VmaAllocation VMA_NULLABLE * VMA_NOT_NULL pAllocation,\n    VmaAllocationInfo* VMA_NULLABLE pAllocationInfo);\n\n/** \\brief Destroys Vulkan buffer and frees allocated memory.\n\nThis is just a convenience function equivalent to:\n\n\\code\nvkDestroyBuffer(device, buffer, allocationCallbacks);\nvmaFreeMemory(allocator, allocation);\n\\endcode\n\nIt it safe to pass null as buffer and/or allocation.\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaDestroyBuffer(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VkBuffer VMA_NULLABLE_NON_DISPATCHABLE buffer,\n    VmaAllocation VMA_NULLABLE allocation);\n\n/// Function similar to vmaCreateBuffer().\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaCreateImage(\n    VmaAllocator VMA_NOT_NULL allocator,\n    const VkImageCreateInfo* VMA_NOT_NULL pImageCreateInfo,\n    const VmaAllocationCreateInfo* VMA_NOT_NULL pAllocationCreateInfo,\n    VkImage VMA_NULLABLE_NON_DISPATCHABLE * VMA_NOT_NULL pImage,\n    VmaAllocation VMA_NULLABLE * VMA_NOT_NULL pAllocation,\n    VmaAllocationInfo* VMA_NULLABLE pAllocationInfo);\n\n/** \\brief Destroys Vulkan image and frees allocated memory.\n\nThis is just a convenience function equivalent to:\n\n\\code\nvkDestroyImage(device, image, allocationCallbacks);\nvmaFreeMemory(allocator, allocation);\n\\endcode\n\nIt it safe to pass null as image and/or allocation.\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaDestroyImage(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VkImage VMA_NULLABLE_NON_DISPATCHABLE image,\n    VmaAllocation VMA_NULLABLE allocation);\n\n/// Flags to be passed as VmaVirtualBlockCreateInfo::flags.\ntypedef enum VmaVirtualBlockCreateFlagBits {\n    /** \\brief Enables alternative, linear allocation algorithm in this virtual block.\n\n    Specify this flag to enable linear allocation algorithm, which always creates\n    new allocations after last one and doesn't reuse space from allocations freed in\n    between. It trades memory consumption for simplified algorithm and data\n    structure, which has better performance and uses less memory for metadata.\n\n    By using this flag, you can achieve behavior of free-at-once, stack,\n    ring buffer, and double stack.\n    For details, see documentation chapter \\ref linear_algorithm.\n    */\n    VMA_VIRTUAL_BLOCK_CREATE_LINEAR_ALGORITHM_BIT = 0x00000001,\n\n    /** \\brief Enables alternative, buddy allocation algorithm in this virtual block.\n\n    It operates on a tree of blocks, each having size that is a power of two and\n    a half of its parent's size. Comparing to default algorithm, this one provides\n    faster allocation and deallocation and decreased external fragmentation,\n    at the expense of more memory wasted (internal fragmentation).\n    For details, see documentation chapter \\ref buddy_algorithm.\n    */\n    VMA_VIRTUAL_BLOCK_CREATE_BUDDY_ALGORITHM_BIT = 0x00000002,\n\n    /** \\brief Bit mask to extract only `ALGORITHM` bits from entire set of flags.\n    */\n    VMA_VIRTUAL_BLOCK_CREATE_ALGORITHM_MASK =\n        VMA_VIRTUAL_BLOCK_CREATE_LINEAR_ALGORITHM_BIT |\n        VMA_VIRTUAL_BLOCK_CREATE_BUDDY_ALGORITHM_BIT,\n\n    VMA_VIRTUAL_BLOCK_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF\n} VmaVirtualBlockCreateFlagBits;\n/// Flags to be passed as VmaVirtualBlockCreateInfo::flags. See #VmaVirtualBlockCreateFlagBits.\ntypedef VkFlags VmaVirtualBlockCreateFlags;\n\n/// Parameters of created #VmaVirtualBlock object to be passed to vmaCreateVirtualBlock().\ntypedef struct VmaVirtualBlockCreateInfo\n{\n    /** \\brief Total size of the virtual block.\n\n    Sizes can be expressed in bytes or any units you want as long as you are consistent in using them.\n    For example, if you allocate from some array of structures, 1 can mean single instance of entire structure.\n    */\n    VkDeviceSize size;\n    \n    /** \\brief Use combination of #VmaVirtualBlockCreateFlagBits.\n    */\n    VmaVirtualBlockCreateFlagBits flags;\n\n    /** \\brief Custom CPU memory allocation callbacks. Optional.\n\n    Optional, can be null. When specified, they will be used for all CPU-side memory allocations.\n    */\n    const VkAllocationCallbacks* VMA_NULLABLE pAllocationCallbacks;\n} VmaVirtualBlockCreateInfo;\n\n/// Flags to be passed as VmaVirtualAllocationCreateInfo::flags.\ntypedef enum VmaVirtualAllocationCreateFlagBits {\n    /** \\brief Allocation will be created from upper stack in a double stack pool.\n\n    This flag is only allowed for virtual blocks created with #VMA_VIRTUAL_BLOCK_CREATE_LINEAR_ALGORITHM_BIT flag.\n    */\n    VMA_VIRTUAL_ALLOCATION_CREATE_UPPER_ADDRESS_BIT = VMA_ALLOCATION_CREATE_UPPER_ADDRESS_BIT,\n    /** \\brief Allocation strategy that tries to minimize memory usage.\n    */\n    VMA_VIRTUAL_ALLOCATION_CREATE_STRATEGY_MIN_MEMORY_BIT = VMA_ALLOCATION_CREATE_STRATEGY_MIN_MEMORY_BIT,\n    /** \\brief Allocation strategy that tries to minimize allocation time.\n    */\n    VMA_VIRTUAL_ALLOCATION_CREATE_STRATEGY_MIN_TIME_BIT = VMA_ALLOCATION_CREATE_STRATEGY_MIN_TIME_BIT,\n    /** \\brief Allocation strategy that tries to minimize memory fragmentation.\n    */\n    VMA_VIRTUAL_ALLOCATION_CREATE_STRATEGY_MIN_FRAGMENTATION_BIT = VMA_ALLOCATION_CREATE_STRATEGY_MIN_FRAGMENTATION_BIT,\n    /** \\brief A bit mask to extract only `STRATEGY` bits from entire set of flags.\n    \n    These stategy flags are binary compatible with equivalent flags in #VmaAllocationCreateFlagBits.\n    */\n    VMA_VIRTUAL_ALLOCATION_CREATE_STRATEGY_MASK = VMA_ALLOCATION_CREATE_STRATEGY_MASK,\n\n    VMA_VIRTUAL_ALLOCATION_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF\n} VmaVirtualAllocationCreateFlagBits;\n/// Flags to be passed as VmaVirtualAllocationCreateInfo::flags. See #VmaVirtualAllocationCreateFlagBits.\ntypedef VkFlags VmaVirtualAllocationCreateFlags;\n\n/// Parameters of created virtual allocation to be passed to vmaVirtualAllocate().\ntypedef struct VmaVirtualAllocationCreateInfo\n{\n    /** \\brief Size of the allocation.\n\n    Cannot be zero.\n    */\n    VkDeviceSize size;\n    /** \\brief Required alignment of the allocation. Optional.\n\n    Must be power of two. Special value 0 has the same meaning as 1 - means no special alignment is required, so allocation can start at any offset.\n    */\n    VkDeviceSize alignment;\n    /** \\brief Use combination of #VmaVirtualAllocationCreateFlagBits.\n    */\n    VmaVirtualAllocationCreateFlags flags;\n    /** \\brief Custom pointer to be associated with the allocation. Optional.\n\n    It can be any value and can be used for user-defined purposes. It can be fetched or changed later.\n    */\n    void* VMA_NULLABLE pUserData;\n} VmaVirtualAllocationCreateInfo;\n\n/// Parameters of an existing virtual allocation, returned by vmaGetVirtualAllocationInfo().\ntypedef struct VmaVirtualAllocationInfo\n{\n    /** \\brief Size of the allocation.\n\n    Same value as passed in VmaVirtualAllocationCreateInfo::size.\n    */\n    VkDeviceSize size;\n    /** \\brief Custom pointer associated with the allocation.\n\n    Same value as passed in VmaVirtualAllocationCreateInfo::pUserData or to vmaSetVirtualAllocationUserData().\n    */\n    void* VMA_NULLABLE pUserData;\n} VmaVirtualAllocationInfo;\n\n/** \\struct VmaVirtualBlock\n\\brief Handle to a virtual block object that allows to use core allocation algorithm without allocating any real GPU memory.\n\nFill in #VmaVirtualBlockCreateInfo structure and Use vmaCreateVirtualBlock() to create it. Use vmaDestroyVirtualBlock() to destroy it.\nFor more information, see documentation chapter \\ref virtual_allocator.\n*/\nVK_DEFINE_HANDLE(VmaVirtualBlock);\n\n/** \\brief Creates new #VmaVirtualBlock object.\n\n\\param pCreateInfo Parameters for creation.\n\\param[out] pVirtualBlock Returned virtual block object or `VMA_NULL` if creation failed.\n*/\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaCreateVirtualBlock(\n    const VmaVirtualBlockCreateInfo* VMA_NOT_NULL pCreateInfo,\n    VmaVirtualBlock VMA_NULLABLE * VMA_NOT_NULL pVirtualBlock);\n\n/** \\brief Destroys #VmaVirtualBlock object.\n\nPlease note that you should consciously handle virtual allocations that could remain unfreed in the block.\nYou should either free them individually using vmaVirtualFree() or call vmaClearVirtualBlock()\nif you are sure this is what you want. If you do neither, an assert is called.\n\nIf you keep pointers to some additional metadata associated with your virtual allocations in their `pUserData`,\ndon't forget to free them.\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaDestroyVirtualBlock(VmaVirtualBlock VMA_NULLABLE virtualBlock);\n\n/** \\brief Returns true of the #VmaVirtualBlock is empty - contains 0 virtual allocations and has all its space available for new allocations.\n*/\nVMA_CALL_PRE VkBool32 VMA_CALL_POST vmaIsVirtualBlockEmpty(VmaVirtualBlock VMA_NOT_NULL virtualBlock);\n\n/** \\brief Returns information about a specific virtual allocation within a virtual block, like its size and `pUserData` pointer.\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaGetVirtualAllocationInfo(VmaVirtualBlock VMA_NOT_NULL virtualBlock,\n    VkDeviceSize offset, VmaVirtualAllocationInfo* VMA_NOT_NULL pVirtualAllocInfo);\n\n/** \\brief Allocates new virtual allocation inside given #VmaVirtualBlock.\n\nThere is no handle type for a virtual allocation.\nVirtual allocations within a specific virtual block are uniquely identified by their offsets.\n\nIf the allocation fails due to not enough free space available, `VK_ERROR_OUT_OF_DEVICE_MEMORY` is returned\n(despite the function doesn't ever allocate actual GPU memory).\n*/\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaVirtualAllocate(VmaVirtualBlock VMA_NOT_NULL virtualBlock,\n    const VmaVirtualAllocationCreateInfo* VMA_NOT_NULL pCreateInfo, VkDeviceSize* VMA_NOT_NULL pOffset);\n\n/** \\brief Frees virtual allocation inside given #VmaVirtualBlock.\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaVirtualFree(VmaVirtualBlock VMA_NOT_NULL virtualBlock, VkDeviceSize offset);\n\n/** \\brief Frees all virtual allocations inside given #VmaVirtualBlock.\n\nYou must either call this function or free each virtual allocation individually with vmaVirtualFree()\nbefore destroying a virtual block. Otherwise, an assert is called.\n\nIf you keep pointer to some additional metadata associated with your virtual allocation in its `pUserData`,\ndon't forget to free it as well.\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaClearVirtualBlock(VmaVirtualBlock VMA_NOT_NULL virtualBlock);\n\n/** \\brief Changes custom pointer associated with given virtual allocation.\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaSetVirtualAllocationUserData(VmaVirtualBlock VMA_NOT_NULL virtualBlock,\n    VkDeviceSize offset, void* VMA_NULLABLE pUserData);\n\n/** \\brief Calculates and returns statistics about virtual allocations and memory usage in given #VmaVirtualBlock.\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaCalculateVirtualBlockStats(VmaVirtualBlock VMA_NOT_NULL virtualBlock,\n    VmaStatInfo* VMA_NOT_NULL pStatInfo);\n\n/** \\brief Builds and returns a null-terminated string in JSON format with information about given #VmaVirtualBlock.\n\\param virtualBlock Virtual block.\n\\param[out] ppStatsString Returned string.\n\\param detailedMap Pass `VK_FALSE` to only obtain statistics as returned by vmaCalculateVirtualBlockStats(). Pass `VK_TRUE` to also obtain full list of allocations and free spaces.\n\nReturned string must be freed using vmaFreeVirtualBlockStatsString().\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaBuildVirtualBlockStatsString(VmaVirtualBlock VMA_NOT_NULL virtualBlock,\n    char* VMA_NULLABLE * VMA_NOT_NULL ppStatsString, VkBool32 detailedMap);\n\n/** \\brief Frees a string returned by vmaBuildVirtualBlockStatsString().\n*/\nVMA_CALL_PRE void VMA_CALL_POST vmaFreeVirtualBlockStatsString(VmaVirtualBlock VMA_NOT_NULL virtualBlock,\n    char* VMA_NULLABLE pStatsString);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif // AMD_VULKAN_MEMORY_ALLOCATOR_H\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n// \n//    IMPLEMENTATION\n// \n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n\n// For Visual Studio IntelliSense.\n#if defined(__cplusplus) && defined(__INTELLISENSE__)\n#define VMA_IMPLEMENTATION\n#endif\n\n#ifdef VMA_IMPLEMENTATION\n#undef VMA_IMPLEMENTATION\n\n#include <cstdint>\n#include <cstdlib>\n#include <cstring>\n#include <utility>\n\n#if VMA_RECORDING_ENABLED\n    #include <chrono>\n    #if defined(_WIN32)\n        #include <windows.h>\n    #else\n        #include <sstream>\n        #include <thread>\n    #endif\n#endif\n\n/*******************************************************************************\nCONFIGURATION SECTION\n\nDefine some of these macros before each #include of this header or change them\nhere if you need other then default behavior depending on your environment.\n*/\n\n/*\nDefine this macro to 1 to make the library fetch pointers to Vulkan functions\ninternally, like:\n\n    vulkanFunctions.vkAllocateMemory = &vkAllocateMemory;\n*/\n#if !defined(VMA_STATIC_VULKAN_FUNCTIONS) && !defined(VK_NO_PROTOTYPES)\n    #define VMA_STATIC_VULKAN_FUNCTIONS 1\n#endif\n\n/*\nDefine this macro to 1 to make the library fetch pointers to Vulkan functions\ninternally, like:\n\n    vulkanFunctions.vkAllocateMemory = (PFN_vkAllocateMemory)vkGetDeviceProcAddr(device, \"vkAllocateMemory\");\n\nTo use this feature in new versions of VMA you now have to pass\nVmaVulkanFunctions::vkGetInstanceProcAddr and vkGetDeviceProcAddr as\nVmaAllocatorCreateInfo::pVulkanFunctions. Other members can be null.\n*/\n#if !defined(VMA_DYNAMIC_VULKAN_FUNCTIONS)\n    #define VMA_DYNAMIC_VULKAN_FUNCTIONS 1\n#endif\n\n// Define this macro to 1 to make the library use STL containers instead of its own implementation.\n//#define VMA_USE_STL_CONTAINERS 1\n\n/* Set this macro to 1 to make the library including and using STL containers:\nstd::pair, std::vector, std::list, std::unordered_map.\n\nSet it to 0 or undefined to make the library using its own implementation of\nthe containers.\n*/\n#if VMA_USE_STL_CONTAINERS\n   #define VMA_USE_STL_VECTOR 1\n   #define VMA_USE_STL_UNORDERED_MAP 1\n   #define VMA_USE_STL_LIST 1\n#endif\n\n#ifndef VMA_USE_STL_SHARED_MUTEX\n    // Compiler conforms to C++17.\n    #if __cplusplus >= 201703L\n        #define VMA_USE_STL_SHARED_MUTEX 1\n    // Visual studio defines __cplusplus properly only when passed additional parameter: /Zc:__cplusplus\n    // Otherwise it is always 199711L, despite shared_mutex works since Visual Studio 2015 Update 2.\n    #elif defined(_MSC_FULL_VER) && _MSC_FULL_VER >= 190023918 && __cplusplus == 199711L && _MSVC_LANG >= 201703L\n        #define VMA_USE_STL_SHARED_MUTEX 1\n    #else\n        #define VMA_USE_STL_SHARED_MUTEX 0\n    #endif\n#endif\n\n/*\nTHESE INCLUDES ARE NOT ENABLED BY DEFAULT.\nLibrary has its own container implementation.\n*/\n#if VMA_USE_STL_VECTOR\n   #include <vector>\n#endif\n\n#if VMA_USE_STL_UNORDERED_MAP\n   #include <unordered_map>\n#endif\n\n#if VMA_USE_STL_LIST\n   #include <list>\n#endif\n\n/*\nFollowing headers are used in this CONFIGURATION section only, so feel free to\nremove them if not needed.\n*/\n#include <cassert> // for assert\n#include <algorithm> // for min, max\n#include <mutex>\n\n#ifndef VMA_NULL\n   // Value used as null pointer. Define it to e.g.: nullptr, NULL, 0, (void*)0.\n   #define VMA_NULL   nullptr\n#endif\n\n#if defined(__ANDROID_API__) && (__ANDROID_API__ < 16)\n#include <cstdlib>\nstatic void* vma_aligned_alloc(size_t alignment, size_t size)\n{\n    // alignment must be >= sizeof(void*)\n    if(alignment < sizeof(void*))\n    {\n        alignment = sizeof(void*);\n    }\n\n    return memalign(alignment, size);\n}\n#elif defined(__APPLE__) || defined(__ANDROID__) || (defined(__linux__) && defined(__GLIBCXX__) && !defined(_GLIBCXX_HAVE_ALIGNED_ALLOC))\n#include <cstdlib>\n\n#if defined(__APPLE__)\n#include <AvailabilityMacros.h>\n#endif\n\nstatic void* vma_aligned_alloc(size_t alignment, size_t size)\n{\n    // Unfortunately, aligned_alloc causes VMA to crash due to it returning null pointers. (At least under 11.4)\n    // Therefore, for now disable this specific exception until a proper solution is found.\n    //#if defined(__APPLE__) && (defined(MAC_OS_X_VERSION_10_16) || defined(__IPHONE_14_0))\n    //#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_16 || __IPHONE_OS_VERSION_MAX_ALLOWED >= __IPHONE_14_0\n    //    // For C++14, usr/include/malloc/_malloc.h declares aligned_alloc()) only\n    //    // with the MacOSX11.0 SDK in Xcode 12 (which is what adds\n    //    // MAC_OS_X_VERSION_10_16), even though the function is marked\n    //    // availabe for 10.15. That is why the preprocessor checks for 10.16 but\n    //    // the __builtin_available checks for 10.15.\n    //    // People who use C++17 could call aligned_alloc with the 10.15 SDK already.\n    //    if (__builtin_available(macOS 10.15, iOS 13, *))\n    //        return aligned_alloc(alignment, size);\n    //#endif\n    //#endif\n\n    // alignment must be >= sizeof(void*)\n    if(alignment < sizeof(void*))\n    {\n        alignment = sizeof(void*);\n    }\n\n    void *pointer;\n    if(posix_memalign(&pointer, alignment, size) == 0)\n        return pointer;\n    return VMA_NULL;\n}\n#elif defined(_WIN32)\nstatic void* vma_aligned_alloc(size_t alignment, size_t size)\n{\n    return _aligned_malloc(size, alignment);\n}\n#else\nstatic void* vma_aligned_alloc(size_t alignment, size_t size)\n{\n    return aligned_alloc(alignment, size);\n}\n#endif\n\n#if defined(_WIN32)\nstatic void vma_aligned_free(void* ptr)\n{\n    _aligned_free(ptr);\n}\n#else\nstatic void vma_aligned_free(void* VMA_NULLABLE ptr)\n{\n    free(ptr);\n}\n#endif\n\n// If your compiler is not compatible with C++11 and definition of\n// aligned_alloc() function is missing, uncommeting following line may help:\n\n//#include <malloc.h>\n\n// Normal assert to check for programmer's errors, especially in Debug configuration.\n#ifndef VMA_ASSERT\n   #ifdef NDEBUG\n       #define VMA_ASSERT(expr)\n   #else\n       #define VMA_ASSERT(expr)         assert(expr)\n   #endif\n#endif\n\n// Assert that will be called very often, like inside data structures e.g. operator[].\n// Making it non-empty can make program slow.\n#ifndef VMA_HEAVY_ASSERT\n   #ifdef NDEBUG\n       #define VMA_HEAVY_ASSERT(expr)\n   #else\n       #define VMA_HEAVY_ASSERT(expr)   //VMA_ASSERT(expr)\n   #endif\n#endif\n\n#ifndef VMA_ALIGN_OF\n   #define VMA_ALIGN_OF(type)       (__alignof(type))\n#endif\n\n#ifndef VMA_SYSTEM_ALIGNED_MALLOC\n   #define VMA_SYSTEM_ALIGNED_MALLOC(size, alignment) vma_aligned_alloc((alignment), (size))\n#endif\n\n#ifndef VMA_SYSTEM_ALIGNED_FREE\n   // VMA_SYSTEM_FREE is the old name, but might have been defined by the user\n   #if defined(VMA_SYSTEM_FREE)\n      #define VMA_SYSTEM_ALIGNED_FREE(ptr)     VMA_SYSTEM_FREE(ptr)\n   #else\n      #define VMA_SYSTEM_ALIGNED_FREE(ptr)     vma_aligned_free(ptr)\n    #endif\n#endif\n\n#ifndef VMA_MIN\n   #define VMA_MIN(v1, v2)    ((std::min)((v1), (v2)))\n#endif\n\n#ifndef VMA_MAX\n   #define VMA_MAX(v1, v2)    ((std::max)((v1), (v2)))\n#endif\n\n#ifndef VMA_SWAP\n   #define VMA_SWAP(v1, v2)   std::swap((v1), (v2))\n#endif\n\n#ifndef VMA_SORT\n   #define VMA_SORT(beg, end, cmp)  std::sort(beg, end, cmp)\n#endif\n\n#ifndef VMA_DEBUG_LOG\n   #define VMA_DEBUG_LOG(format, ...)\n   /*\n   #define VMA_DEBUG_LOG(format, ...) do { \\\n       printf(format, __VA_ARGS__); \\\n       printf(\"\\n\"); \\\n   } while(false)\n   */\n#endif\n\n// Define this macro to 1 to enable functions: vmaBuildStatsString, vmaFreeStatsString.\n#if VMA_STATS_STRING_ENABLED\n    static inline void VmaUint32ToStr(char* VMA_NOT_NULL outStr, size_t strLen, uint32_t num)\n    {\n        snprintf(outStr, strLen, \"%u\", static_cast<unsigned int>(num));\n    }\n    static inline void VmaUint64ToStr(char* VMA_NOT_NULL outStr, size_t strLen, uint64_t num)\n    {\n        snprintf(outStr, strLen, \"%llu\", static_cast<unsigned long long>(num));\n    }\n    static inline void VmaPtrToStr(char* VMA_NOT_NULL outStr, size_t strLen, const void* ptr)\n    {\n        snprintf(outStr, strLen, \"%p\", ptr);\n    }\n#endif\n\n#ifndef VMA_MUTEX\n    class VmaMutex\n    {\n    public:\n        void Lock() { m_Mutex.lock(); }\n        void Unlock() { m_Mutex.unlock(); }\n        bool TryLock() { return m_Mutex.try_lock(); }\n    private:\n        std::mutex m_Mutex;\n    };\n    #define VMA_MUTEX VmaMutex\n#endif\n\n// Read-write mutex, where \"read\" is shared access, \"write\" is exclusive access.\n#ifndef VMA_RW_MUTEX\n    #if VMA_USE_STL_SHARED_MUTEX\n        // Use std::shared_mutex from C++17.\n        #include <shared_mutex>\n        class VmaRWMutex\n        {\n        public:\n            void LockRead() { m_Mutex.lock_shared(); }\n            void UnlockRead() { m_Mutex.unlock_shared(); }\n            bool TryLockRead() { return m_Mutex.try_lock_shared(); }\n            void LockWrite() { m_Mutex.lock(); }\n            void UnlockWrite() { m_Mutex.unlock(); }\n            bool TryLockWrite() { return m_Mutex.try_lock(); }\n        private:\n            std::shared_mutex m_Mutex;\n        };\n        #define VMA_RW_MUTEX VmaRWMutex\n    #elif defined(_WIN32) && defined(WINVER) && WINVER >= 0x0600\n        // Use SRWLOCK from WinAPI.\n        // Minimum supported client = Windows Vista, server = Windows Server 2008.\n        class VmaRWMutex\n        {\n        public:\n            VmaRWMutex() { InitializeSRWLock(&m_Lock); }\n            void LockRead() { AcquireSRWLockShared(&m_Lock); }\n            void UnlockRead() { ReleaseSRWLockShared(&m_Lock); }\n            bool TryLockRead() { return TryAcquireSRWLockShared(&m_Lock) != FALSE; }\n            void LockWrite() { AcquireSRWLockExclusive(&m_Lock); }\n            void UnlockWrite() { ReleaseSRWLockExclusive(&m_Lock); }\n            bool TryLockWrite() { return TryAcquireSRWLockExclusive(&m_Lock) != FALSE; }\n        private:\n            SRWLOCK m_Lock;\n        };\n        #define VMA_RW_MUTEX VmaRWMutex\n    #else\n        // Less efficient fallback: Use normal mutex.\n        class VmaRWMutex\n        {\n        public:\n            void LockRead() { m_Mutex.Lock(); }\n            void UnlockRead() { m_Mutex.Unlock(); }\n            bool TryLockRead() { return m_Mutex.TryLock(); }\n            void LockWrite() { m_Mutex.Lock(); }\n            void UnlockWrite() { m_Mutex.Unlock(); }\n            bool TryLockWrite() { return m_Mutex.TryLock(); }\n        private:\n            VMA_MUTEX m_Mutex;\n        };\n        #define VMA_RW_MUTEX VmaRWMutex\n    #endif // #if VMA_USE_STL_SHARED_MUTEX\n#endif // #ifndef VMA_RW_MUTEX\n\n/*\nIf providing your own implementation, you need to implement a subset of std::atomic.\n*/\n#ifndef VMA_ATOMIC_UINT32\n    #include <atomic>\n    #define VMA_ATOMIC_UINT32 std::atomic<uint32_t>\n#endif\n\n#ifndef VMA_ATOMIC_UINT64\n    #include <atomic>\n    #define VMA_ATOMIC_UINT64 std::atomic<uint64_t>\n#endif\n\n#ifndef VMA_DEBUG_ALWAYS_DEDICATED_MEMORY\n    /**\n    Every allocation will have its own memory block.\n    Define to 1 for debugging purposes only.\n    */\n    #define VMA_DEBUG_ALWAYS_DEDICATED_MEMORY (0)\n#endif\n\n#ifndef VMA_MIN_ALIGNMENT\n    /**\n    Minimum alignment of all allocations, in bytes.\n    Set to more than 1 for debugging purposes. Must be power of two.\n    */\n    #ifdef VMA_DEBUG_ALIGNMENT // Old name\n        #define VMA_MIN_ALIGNMENT VMA_DEBUG_ALIGNMENT\n    #else\n        #define VMA_MIN_ALIGNMENT (1)\n    #endif\n#endif\n\n#ifndef VMA_DEBUG_MARGIN\n    /**\n    Minimum margin before and after every allocation, in bytes.\n    Set nonzero for debugging purposes only.\n    */\n    #define VMA_DEBUG_MARGIN (0)\n#endif\n\n#ifndef VMA_DEBUG_INITIALIZE_ALLOCATIONS\n    /**\n    Define this macro to 1 to automatically fill new allocations and destroyed\n    allocations with some bit pattern.\n    */\n    #define VMA_DEBUG_INITIALIZE_ALLOCATIONS (0)\n#endif\n\n#ifndef VMA_DEBUG_DETECT_CORRUPTION\n    /**\n    Define this macro to 1 together with non-zero value of VMA_DEBUG_MARGIN to\n    enable writing magic value to the margin before and after every allocation and\n    validating it, so that memory corruptions (out-of-bounds writes) are detected.\n    */\n    #define VMA_DEBUG_DETECT_CORRUPTION (0)\n#endif\n\n#ifndef VMA_DEBUG_GLOBAL_MUTEX\n    /**\n    Set this to 1 for debugging purposes only, to enable single mutex protecting all\n    entry calls to the library. Can be useful for debugging multithreading issues.\n    */\n    #define VMA_DEBUG_GLOBAL_MUTEX (0)\n#endif\n\n#ifndef VMA_DEBUG_MIN_BUFFER_IMAGE_GRANULARITY\n    /**\n    Minimum value for VkPhysicalDeviceLimits::bufferImageGranularity.\n    Set to more than 1 for debugging purposes only. Must be power of two.\n    */\n    #define VMA_DEBUG_MIN_BUFFER_IMAGE_GRANULARITY (1)\n#endif\n\n#ifndef VMA_DEBUG_DONT_EXCEED_MAX_MEMORY_ALLOCATION_COUNT\n    /*\n    Set this to 1 to make VMA never exceed VkPhysicalDeviceLimits::maxMemoryAllocationCount\n    and return error instead of leaving up to Vulkan implementation what to do in such cases.\n    */\n    #define VMA_DEBUG_DONT_EXCEED_MAX_MEMORY_ALLOCATION_COUNT (0)\n#endif\n\n#ifndef VMA_SMALL_HEAP_MAX_SIZE\n   /// Maximum size of a memory heap in Vulkan to consider it \"small\".\n   #define VMA_SMALL_HEAP_MAX_SIZE (1024ull * 1024 * 1024)\n#endif\n\n#ifndef VMA_DEFAULT_LARGE_HEAP_BLOCK_SIZE\n   /// Default size of a block allocated as single VkDeviceMemory from a \"large\" heap.\n   #define VMA_DEFAULT_LARGE_HEAP_BLOCK_SIZE (256ull * 1024 * 1024)\n#endif\n\n#ifndef VMA_CLASS_NO_COPY\n    #define VMA_CLASS_NO_COPY(className) \\\n        private: \\\n            className(const className&) = delete; \\\n            className& operator=(const className&) = delete;\n#endif\n\nstatic const uint32_t VMA_FRAME_INDEX_LOST = UINT32_MAX;\n\n// Decimal 2139416166, float NaN, little-endian binary 66 E6 84 7F.\nstatic const uint32_t VMA_CORRUPTION_DETECTION_MAGIC_VALUE = 0x7F84E666;\n\nstatic const uint8_t VMA_ALLOCATION_FILL_PATTERN_CREATED   = 0xDC;\nstatic const uint8_t VMA_ALLOCATION_FILL_PATTERN_DESTROYED = 0xEF;\n\n/*******************************************************************************\nEND OF CONFIGURATION\n*/\n\n// # Copy of some Vulkan definitions so we don't need to check their existence just to handle few constants.\n\nstatic const uint32_t VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD_COPY = 0x00000040;\nstatic const uint32_t VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD_COPY = 0x00000080;\nstatic const uint32_t VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_COPY = 0x00020000;\n\nstatic const uint32_t VMA_ALLOCATION_INTERNAL_STRATEGY_MIN_OFFSET = 0x10000000u;\n\nstatic VkAllocationCallbacks VmaEmptyAllocationCallbacks = {\n    VMA_NULL, VMA_NULL, VMA_NULL, VMA_NULL, VMA_NULL, VMA_NULL };\n\n// Returns number of bits set to 1 in (v).\nstatic inline uint32_t VmaCountBitsSet(uint32_t v)\n{\n    uint32_t c = v - ((v >> 1) & 0x55555555);\n    c = ((c >>  2) & 0x33333333) + (c & 0x33333333);\n    c = ((c >>  4) + c) & 0x0F0F0F0F;\n    c = ((c >>  8) + c) & 0x00FF00FF;\n    c = ((c >> 16) + c) & 0x0000FFFF;\n    return c;\n}\n\n/*\nReturns true if given number is a power of two.\nT must be unsigned integer number or signed integer but always nonnegative.\nFor 0 returns true.\n*/\ntemplate <typename T>\ninline bool VmaIsPow2(T x)\n{\n    return (x & (x-1)) == 0;\n}\n\n// Aligns given value up to nearest multiply of align value. For example: VmaAlignUp(11, 8) = 16.\n// Use types like uint32_t, uint64_t as T.\ntemplate <typename T>\nstatic inline T VmaAlignUp(T val, T alignment)\n{\n    VMA_HEAVY_ASSERT(VmaIsPow2(alignment));\n    return (val + alignment - 1) & ~(alignment - 1);\n}\n// Aligns given value down to nearest multiply of align value. For example: VmaAlignUp(11, 8) = 8.\n// Use types like uint32_t, uint64_t as T.\ntemplate <typename T>\nstatic inline T VmaAlignDown(T val, T alignment)\n{\n    VMA_HEAVY_ASSERT(VmaIsPow2(alignment));\n    return val & ~(alignment - 1);\n}\n\n// Division with mathematical rounding to nearest number.\ntemplate <typename T>\nstatic inline T VmaRoundDiv(T x, T y)\n{\n    return (x + (y / (T)2)) / y;\n}\n\n// Returns smallest power of 2 greater or equal to v.\nstatic inline uint32_t VmaNextPow2(uint32_t v)\n{\n    v--;\n    v |= v >> 1;\n    v |= v >> 2;\n    v |= v >> 4;\n    v |= v >> 8;\n    v |= v >> 16;\n    v++;\n    return v;\n}\nstatic inline uint64_t VmaNextPow2(uint64_t v)\n{\n    v--;\n    v |= v >> 1;\n    v |= v >> 2;\n    v |= v >> 4;\n    v |= v >> 8;\n    v |= v >> 16;\n    v |= v >> 32;\n    v++;\n    return v;\n}\n\n// Returns largest power of 2 less or equal to v.\nstatic inline uint32_t VmaPrevPow2(uint32_t v)\n{\n    v |= v >> 1;\n    v |= v >> 2;\n    v |= v >> 4;\n    v |= v >> 8;\n    v |= v >> 16;\n    v = v ^ (v >> 1);\n    return v;\n}\nstatic inline uint64_t VmaPrevPow2(uint64_t v)\n{\n    v |= v >> 1;\n    v |= v >> 2;\n    v |= v >> 4;\n    v |= v >> 8;\n    v |= v >> 16;\n    v |= v >> 32;\n    v = v ^ (v >> 1);\n    return v;\n}\n\nstatic inline bool VmaStrIsEmpty(const char* pStr)\n{\n    return pStr == VMA_NULL || *pStr == '\\0';\n}\n\n#if VMA_STATS_STRING_ENABLED\n\nstatic const char* VmaAlgorithmToStr(uint32_t algorithm)\n{\n    switch(algorithm)\n    {\n    case VMA_POOL_CREATE_LINEAR_ALGORITHM_BIT:\n        return \"Linear\";\n    case VMA_POOL_CREATE_BUDDY_ALGORITHM_BIT:\n        return \"Buddy\";\n    case 0:\n        return \"Default\";\n    default:\n        VMA_ASSERT(0);\n        return \"\";\n    }\n}\n\n#endif // #if VMA_STATS_STRING_ENABLED\n\n#ifndef VMA_SORT\n\ntemplate<typename Iterator, typename Compare>\nIterator VmaQuickSortPartition(Iterator beg, Iterator end, Compare cmp)\n{\n    Iterator centerValue = end; --centerValue;\n    Iterator insertIndex = beg;\n    for(Iterator memTypeIndex = beg; memTypeIndex < centerValue; ++memTypeIndex)\n    {\n        if(cmp(*memTypeIndex, *centerValue))\n        {\n            if(insertIndex != memTypeIndex)\n            {\n                VMA_SWAP(*memTypeIndex, *insertIndex);\n            }\n            ++insertIndex;\n        }\n    }\n    if(insertIndex != centerValue)\n    {\n        VMA_SWAP(*insertIndex, *centerValue);\n    }\n    return insertIndex;\n}\n\ntemplate<typename Iterator, typename Compare>\nvoid VmaQuickSort(Iterator beg, Iterator end, Compare cmp)\n{\n    if(beg < end)\n    {\n        Iterator it = VmaQuickSortPartition<Iterator, Compare>(beg, end, cmp);\n        VmaQuickSort<Iterator, Compare>(beg, it, cmp);\n        VmaQuickSort<Iterator, Compare>(it + 1, end, cmp);\n    }\n}\n\n#define VMA_SORT(beg, end, cmp) VmaQuickSort(beg, end, cmp)\n\n#endif // #ifndef VMA_SORT\n\n/*\nReturns true if two memory blocks occupy overlapping pages.\nResourceA must be in less memory offset than ResourceB.\n\nAlgorithm is based on \"Vulkan 1.0.39 - A Specification (with all registered Vulkan extensions)\"\nchapter 11.6 \"Resource Memory Association\", paragraph \"Buffer-Image Granularity\".\n*/\nstatic inline bool VmaBlocksOnSamePage(\n    VkDeviceSize resourceAOffset,\n    VkDeviceSize resourceASize,\n    VkDeviceSize resourceBOffset,\n    VkDeviceSize pageSize)\n{\n    VMA_ASSERT(resourceAOffset + resourceASize <= resourceBOffset && resourceASize > 0 && pageSize > 0);\n    VkDeviceSize resourceAEnd = resourceAOffset + resourceASize - 1;\n    VkDeviceSize resourceAEndPage = resourceAEnd & ~(pageSize - 1);\n    VkDeviceSize resourceBStart = resourceBOffset;\n    VkDeviceSize resourceBStartPage = resourceBStart & ~(pageSize - 1);\n    return resourceAEndPage == resourceBStartPage;\n}\n\nenum VmaSuballocationType\n{\n    VMA_SUBALLOCATION_TYPE_FREE = 0,\n    VMA_SUBALLOCATION_TYPE_UNKNOWN = 1,\n    VMA_SUBALLOCATION_TYPE_BUFFER = 2,\n    VMA_SUBALLOCATION_TYPE_IMAGE_UNKNOWN = 3,\n    VMA_SUBALLOCATION_TYPE_IMAGE_LINEAR = 4,\n    VMA_SUBALLOCATION_TYPE_IMAGE_OPTIMAL = 5,\n    VMA_SUBALLOCATION_TYPE_MAX_ENUM = 0x7FFFFFFF\n};\n\n/*\nReturns true if given suballocation types could conflict and must respect\nVkPhysicalDeviceLimits::bufferImageGranularity. They conflict if one is buffer\nor linear image and another one is optimal image. If type is unknown, behave\nconservatively.\n*/\nstatic inline bool VmaIsBufferImageGranularityConflict(\n    VmaSuballocationType suballocType1,\n    VmaSuballocationType suballocType2)\n{\n    if(suballocType1 > suballocType2)\n    {\n        VMA_SWAP(suballocType1, suballocType2);\n    }\n\n    switch(suballocType1)\n    {\n    case VMA_SUBALLOCATION_TYPE_FREE:\n        return false;\n    case VMA_SUBALLOCATION_TYPE_UNKNOWN:\n        return true;\n    case VMA_SUBALLOCATION_TYPE_BUFFER:\n        return\n            suballocType2 == VMA_SUBALLOCATION_TYPE_IMAGE_UNKNOWN ||\n            suballocType2 == VMA_SUBALLOCATION_TYPE_IMAGE_OPTIMAL;\n    case VMA_SUBALLOCATION_TYPE_IMAGE_UNKNOWN:\n        return\n            suballocType2 == VMA_SUBALLOCATION_TYPE_IMAGE_UNKNOWN ||\n            suballocType2 == VMA_SUBALLOCATION_TYPE_IMAGE_LINEAR ||\n            suballocType2 == VMA_SUBALLOCATION_TYPE_IMAGE_OPTIMAL;\n    case VMA_SUBALLOCATION_TYPE_IMAGE_LINEAR:\n        return\n            suballocType2 == VMA_SUBALLOCATION_TYPE_IMAGE_OPTIMAL;\n    case VMA_SUBALLOCATION_TYPE_IMAGE_OPTIMAL:\n        return false;\n    default:\n        VMA_ASSERT(0);\n        return true;\n    }\n}\n\nstatic void VmaWriteMagicValue(void* pData, VkDeviceSize offset)\n{\n#if VMA_DEBUG_MARGIN > 0 && VMA_DEBUG_DETECT_CORRUPTION\n    uint32_t* pDst = (uint32_t*)((char*)pData + offset);\n    const size_t numberCount = VMA_DEBUG_MARGIN / sizeof(uint32_t);\n    for(size_t i = 0; i < numberCount; ++i, ++pDst)\n    {\n        *pDst = VMA_CORRUPTION_DETECTION_MAGIC_VALUE;\n    }\n#else\n    // no-op\n#endif\n}\n\nstatic bool VmaValidateMagicValue(const void* pData, VkDeviceSize offset)\n{\n#if VMA_DEBUG_MARGIN > 0 && VMA_DEBUG_DETECT_CORRUPTION\n    const uint32_t* pSrc = (const uint32_t*)((const char*)pData + offset);\n    const size_t numberCount = VMA_DEBUG_MARGIN / sizeof(uint32_t);\n    for(size_t i = 0; i < numberCount; ++i, ++pSrc)\n    {\n        if(*pSrc != VMA_CORRUPTION_DETECTION_MAGIC_VALUE)\n        {\n            return false;\n        }\n    }\n#endif\n    return true;\n}\n\n/*\nFills structure with parameters of an example buffer to be used for transfers\nduring GPU memory defragmentation.\n*/\nstatic void VmaFillGpuDefragmentationBufferCreateInfo(VkBufferCreateInfo& outBufCreateInfo)\n{\n    memset(&outBufCreateInfo, 0, sizeof(outBufCreateInfo));\n    outBufCreateInfo.sType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;\n    outBufCreateInfo.usage = VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT;\n    outBufCreateInfo.size = (VkDeviceSize)VMA_DEFAULT_LARGE_HEAP_BLOCK_SIZE; // Example size.\n}\n\n// Helper RAII class to lock a mutex in constructor and unlock it in destructor (at the end of scope).\nstruct VmaMutexLock\n{\n    VMA_CLASS_NO_COPY(VmaMutexLock)\npublic:\n    VmaMutexLock(VMA_MUTEX& mutex, bool useMutex = true) :\n        m_pMutex(useMutex ? &mutex : VMA_NULL)\n    { if(m_pMutex) { m_pMutex->Lock(); } }\n    ~VmaMutexLock()\n    { if(m_pMutex) { m_pMutex->Unlock(); } }\nprivate:\n    VMA_MUTEX* m_pMutex;\n};\n\n// Helper RAII class to lock a RW mutex in constructor and unlock it in destructor (at the end of scope), for reading.\nstruct VmaMutexLockRead\n{\n    VMA_CLASS_NO_COPY(VmaMutexLockRead)\npublic:\n    VmaMutexLockRead(VMA_RW_MUTEX& mutex, bool useMutex) :\n        m_pMutex(useMutex ? &mutex : VMA_NULL)\n    { if(m_pMutex) { m_pMutex->LockRead(); } }\n    ~VmaMutexLockRead() { if(m_pMutex) { m_pMutex->UnlockRead(); } }\nprivate:\n    VMA_RW_MUTEX* m_pMutex;\n};\n\n// Helper RAII class to lock a RW mutex in constructor and unlock it in destructor (at the end of scope), for writing.\nstruct VmaMutexLockWrite\n{\n    VMA_CLASS_NO_COPY(VmaMutexLockWrite)\npublic:\n    VmaMutexLockWrite(VMA_RW_MUTEX& mutex, bool useMutex) :\n        m_pMutex(useMutex ? &mutex : VMA_NULL)\n    { if(m_pMutex) { m_pMutex->LockWrite(); } }\n    ~VmaMutexLockWrite() { if(m_pMutex) { m_pMutex->UnlockWrite(); } }\nprivate:\n    VMA_RW_MUTEX* m_pMutex;\n};\n\n#if VMA_DEBUG_GLOBAL_MUTEX\n    static VMA_MUTEX gDebugGlobalMutex;\n    #define VMA_DEBUG_GLOBAL_MUTEX_LOCK VmaMutexLock debugGlobalMutexLock(gDebugGlobalMutex, true);\n#else\n    #define VMA_DEBUG_GLOBAL_MUTEX_LOCK\n#endif\n\n/*\nPerforms binary search and returns iterator to first element that is greater or\nequal to (key), according to comparison (cmp).\n\nCmp should return true if first argument is less than second argument.\n\nReturned value is the found element, if present in the collection or place where\nnew element with value (key) should be inserted.\n*/\ntemplate <typename CmpLess, typename IterT, typename KeyT>\nstatic IterT VmaBinaryFindFirstNotLess(IterT beg, IterT end, const KeyT &key, const CmpLess& cmp)\n{\n    size_t down = 0, up = (end - beg);\n    while(down < up)\n    {\n        const size_t mid = down + (up - down) / 2;  // Overflow-safe midpoint calculation\n        if(cmp(*(beg+mid), key))\n        {\n            down = mid + 1;\n        }\n        else\n        {\n            up = mid;\n        }\n    }\n    return beg + down;\n}\n\ntemplate<typename CmpLess, typename IterT, typename KeyT>\nIterT VmaBinaryFindSorted(const IterT& beg, const IterT& end, const KeyT& value, const CmpLess& cmp)\n{\n    IterT it = VmaBinaryFindFirstNotLess<CmpLess, IterT, KeyT>(\n        beg, end, value, cmp);\n    if(it == end ||\n        (!cmp(*it, value) && !cmp(value, *it)))\n    {\n        return it;\n    }\n    return end;\n}\n\n/*\nReturns true if all pointers in the array are not-null and unique.\nWarning! O(n^2) complexity. Use only inside VMA_HEAVY_ASSERT.\nT must be pointer type, e.g. VmaAllocation, VmaPool.\n*/\ntemplate<typename T>\nstatic bool VmaValidatePointerArray(uint32_t count, const T* arr)\n{\n    for(uint32_t i = 0; i < count; ++i)\n    {\n        const T iPtr = arr[i];\n        if(iPtr == VMA_NULL)\n        {\n            return false;\n        }\n        for(uint32_t j = i + 1; j < count; ++j)\n        {\n            if(iPtr == arr[j])\n            {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\ntemplate<typename MainT, typename NewT>\nstatic inline void VmaPnextChainPushFront(MainT* mainStruct, NewT* newStruct)\n{\n    newStruct->pNext = mainStruct->pNext;\n    mainStruct->pNext = newStruct;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Memory allocation\n\nstatic void* VmaMalloc(const VkAllocationCallbacks* pAllocationCallbacks, size_t size, size_t alignment)\n{\n    void* result = VMA_NULL;\n    if((pAllocationCallbacks != VMA_NULL) &&\n        (pAllocationCallbacks->pfnAllocation != VMA_NULL))\n    {\n        result = (*pAllocationCallbacks->pfnAllocation)(\n            pAllocationCallbacks->pUserData,\n            size,\n            alignment,\n            VK_SYSTEM_ALLOCATION_SCOPE_OBJECT);\n    }\n    else\n    {\n        result = VMA_SYSTEM_ALIGNED_MALLOC(size, alignment);\n    }\n    VMA_ASSERT(result != VMA_NULL && \"CPU memory allocation failed.\");\n    return result;\n}\n\nstatic void VmaFree(const VkAllocationCallbacks* pAllocationCallbacks, void* ptr)\n{\n    if((pAllocationCallbacks != VMA_NULL) &&\n        (pAllocationCallbacks->pfnFree != VMA_NULL))\n    {\n        (*pAllocationCallbacks->pfnFree)(pAllocationCallbacks->pUserData, ptr);\n    }\n    else\n    {\n        VMA_SYSTEM_ALIGNED_FREE(ptr);\n    }\n}\n\ntemplate<typename T>\nstatic T* VmaAllocate(const VkAllocationCallbacks* pAllocationCallbacks)\n{\n    return (T*)VmaMalloc(pAllocationCallbacks, sizeof(T), VMA_ALIGN_OF(T));\n}\n\ntemplate<typename T>\nstatic T* VmaAllocateArray(const VkAllocationCallbacks* pAllocationCallbacks, size_t count)\n{\n    return (T*)VmaMalloc(pAllocationCallbacks, sizeof(T) * count, VMA_ALIGN_OF(T));\n}\n\n#define vma_new(allocator, type)   new(VmaAllocate<type>(allocator))(type)\n\n#define vma_new_array(allocator, type, count)   new(VmaAllocateArray<type>((allocator), (count)))(type)\n\ntemplate<typename T>\nstatic void vma_delete(const VkAllocationCallbacks* pAllocationCallbacks, T* ptr)\n{\n    ptr->~T();\n    VmaFree(pAllocationCallbacks, ptr);\n}\n\ntemplate<typename T>\nstatic void vma_delete_array(const VkAllocationCallbacks* pAllocationCallbacks, T* ptr, size_t count)\n{\n    if(ptr != VMA_NULL)\n    {\n        for(size_t i = count; i--; )\n        {\n            ptr[i].~T();\n        }\n        VmaFree(pAllocationCallbacks, ptr);\n    }\n}\n\nstatic char* VmaCreateStringCopy(const VkAllocationCallbacks* allocs, const char* srcStr)\n{\n    if(srcStr != VMA_NULL)\n    {\n        const size_t len = strlen(srcStr);\n        char* const result = vma_new_array(allocs, char, len + 1);\n        memcpy(result, srcStr, len + 1);\n        return result;\n    }\n    return VMA_NULL;\n}\n\nstatic char* VmaCreateStringCopy(const VkAllocationCallbacks* allocs, const char* srcStr, size_t strLen)\n{\n    if(srcStr != VMA_NULL)\n    {\n        char* const result = vma_new_array(allocs, char, strLen + 1);\n        memcpy(result, srcStr, strLen);\n        result[strLen] = '\\0';\n        return result;\n    }\n    return VMA_NULL;\n}\n\nstatic void VmaFreeString(const VkAllocationCallbacks* allocs, char* str)\n{\n    if(str != VMA_NULL)\n    {\n        const size_t len = strlen(str);\n        vma_delete_array(allocs, str, len + 1);\n    }\n}\n\n// STL-compatible allocator.\ntemplate<typename T>\nclass VmaStlAllocator\n{\npublic:\n    const VkAllocationCallbacks* const m_pCallbacks;\n    typedef T value_type;\n\n    VmaStlAllocator(const VkAllocationCallbacks* pCallbacks) : m_pCallbacks(pCallbacks) { }\n    template<typename U> VmaStlAllocator(const VmaStlAllocator<U>& src) : m_pCallbacks(src.m_pCallbacks) { }\n\n    T* allocate(size_t n) { return VmaAllocateArray<T>(m_pCallbacks, n); }\n    void deallocate(T* p, size_t n) { VmaFree(m_pCallbacks, p); }\n\n    template<typename U>\n    bool operator==(const VmaStlAllocator<U>& rhs) const\n    {\n        return m_pCallbacks == rhs.m_pCallbacks;\n    }\n    template<typename U>\n    bool operator!=(const VmaStlAllocator<U>& rhs) const\n    {\n        return m_pCallbacks != rhs.m_pCallbacks;\n    }\n\n    VmaStlAllocator& operator=(const VmaStlAllocator& x) = delete;\n    VmaStlAllocator(const VmaStlAllocator&) = default;\n};\n\n#if VMA_USE_STL_VECTOR\n\n#define VmaVector std::vector\n\ntemplate<typename T, typename allocatorT>\nstatic void VmaVectorInsert(std::vector<T, allocatorT>& vec, size_t index, const T& item)\n{\n    vec.insert(vec.begin() + index, item);\n}\n\ntemplate<typename T, typename allocatorT>\nstatic void VmaVectorRemove(std::vector<T, allocatorT>& vec, size_t index)\n{\n    vec.erase(vec.begin() + index);\n}\n\n#else // #if VMA_USE_STL_VECTOR\n\n/* Class with interface compatible with subset of std::vector.\nT must be POD because constructors and destructors are not called and memcpy is\nused for these objects. */\ntemplate<typename T, typename AllocatorT>\nclass VmaVector\n{\npublic:\n    typedef T value_type;\n\n    VmaVector(const AllocatorT& allocator) :\n        m_Allocator(allocator),\n        m_pArray(VMA_NULL),\n        m_Count(0),\n        m_Capacity(0)\n    {\n    }\n\n    VmaVector(size_t count, const AllocatorT& allocator) :\n        m_Allocator(allocator),\n        m_pArray(count ? (T*)VmaAllocateArray<T>(allocator.m_pCallbacks, count) : VMA_NULL),\n        m_Count(count),\n        m_Capacity(count)\n    {\n    }\n\n    // This version of the constructor is here for compatibility with pre-C++14 std::vector.\n    // value is unused.\n    VmaVector(size_t count, const T& value, const AllocatorT& allocator)\n        : VmaVector(count, allocator) {}\n\n    VmaVector(const VmaVector<T, AllocatorT>& src) :\n        m_Allocator(src.m_Allocator),\n        m_pArray(src.m_Count ? (T*)VmaAllocateArray<T>(src.m_Allocator.m_pCallbacks, src.m_Count) : VMA_NULL),\n        m_Count(src.m_Count),\n        m_Capacity(src.m_Count)\n    {\n        if(m_Count != 0)\n        {\n            memcpy(m_pArray, src.m_pArray, m_Count * sizeof(T));\n        }\n    }\n\n    ~VmaVector()\n    {\n        VmaFree(m_Allocator.m_pCallbacks, m_pArray);\n    }\n\n    VmaVector& operator=(const VmaVector<T, AllocatorT>& rhs)\n    {\n        if(&rhs != this)\n        {\n            resize(rhs.m_Count);\n            if(m_Count != 0)\n            {\n                memcpy(m_pArray, rhs.m_pArray, m_Count * sizeof(T));\n            }\n        }\n        return *this;\n    }\n\n    bool empty() const { return m_Count == 0; }\n    size_t size() const { return m_Count; }\n    T* data() { return m_pArray; }\n    const T* data() const { return m_pArray; }\n\n    T& operator[](size_t index)\n    {\n        VMA_HEAVY_ASSERT(index < m_Count);\n        return m_pArray[index];\n    }\n    const T& operator[](size_t index) const\n    {\n        VMA_HEAVY_ASSERT(index < m_Count);\n        return m_pArray[index];\n    }\n\n    T& front()\n    {\n        VMA_HEAVY_ASSERT(m_Count > 0);\n        return m_pArray[0];\n    }\n    const T& front() const\n    {\n        VMA_HEAVY_ASSERT(m_Count > 0);\n        return m_pArray[0];\n    }\n    T& back()\n    {\n        VMA_HEAVY_ASSERT(m_Count > 0);\n        return m_pArray[m_Count - 1];\n    }\n    const T& back() const\n    {\n        VMA_HEAVY_ASSERT(m_Count > 0);\n        return m_pArray[m_Count - 1];\n    }\n\n    void reserve(size_t newCapacity, bool freeMemory = false)\n    {\n        newCapacity = VMA_MAX(newCapacity, m_Count);\n\n        if((newCapacity < m_Capacity) && !freeMemory)\n        {\n            newCapacity = m_Capacity;\n        }\n\n        if(newCapacity != m_Capacity)\n        {\n            T* const newArray = newCapacity ? VmaAllocateArray<T>(m_Allocator, newCapacity) : VMA_NULL;\n            if(m_Count != 0)\n            {\n                memcpy(newArray, m_pArray, m_Count * sizeof(T));\n            }\n            VmaFree(m_Allocator.m_pCallbacks, m_pArray);\n            m_Capacity = newCapacity;\n            m_pArray = newArray;\n        }\n    }\n\n    void resize(size_t newCount)\n    {\n        size_t newCapacity = m_Capacity;\n        if(newCount > m_Capacity)\n        {\n            newCapacity = VMA_MAX(newCount, VMA_MAX(m_Capacity * 3 / 2, (size_t)8));\n        }\n\n        if(newCapacity != m_Capacity)\n        {\n            T* const newArray = newCapacity ? VmaAllocateArray<T>(m_Allocator.m_pCallbacks, newCapacity) : VMA_NULL;\n            const size_t elementsToCopy = VMA_MIN(m_Count, newCount);\n            if(elementsToCopy != 0)\n            {\n                memcpy(newArray, m_pArray, elementsToCopy * sizeof(T));\n            }\n            VmaFree(m_Allocator.m_pCallbacks, m_pArray);\n            m_Capacity = newCapacity;\n            m_pArray = newArray;\n        }\n\n        m_Count = newCount;\n    }\n\n    void clear()\n    {\n        resize(0);\n    }\n\n    void shrink_to_fit()\n    {\n        if(m_Capacity > m_Count)\n        {\n            T* newArray = VMA_NULL;\n            if(m_Count > 0)\n            {\n                newArray = VmaAllocateArray<T>(m_Allocator.m_pCallbacks, m_Count);\n                memcpy(newArray, m_pArray, m_Count * sizeof(T));\n            }\n            VmaFree(m_Allocator.m_pCallbacks, m_pArray);\n            m_Capacity = m_Count;\n            m_pArray = newArray;\n        }\n    }\n\n    void insert(size_t index, const T& src)\n    {\n        VMA_HEAVY_ASSERT(index <= m_Count);\n        const size_t oldCount = size();\n        resize(oldCount + 1);\n        if(index < oldCount)\n        {\n            memmove(m_pArray + (index + 1), m_pArray + index, (oldCount - index) * sizeof(T));\n        }\n        m_pArray[index] = src;\n    }\n\n    void remove(size_t index)\n    {\n        VMA_HEAVY_ASSERT(index < m_Count);\n        const size_t oldCount = size();\n        if(index < oldCount - 1)\n        {\n            memmove(m_pArray + index, m_pArray + (index + 1), (oldCount - index - 1) * sizeof(T));\n        }\n        resize(oldCount - 1);\n    }\n\n    void push_back(const T& src)\n    {\n        const size_t newIndex = size();\n        resize(newIndex + 1);\n        m_pArray[newIndex] = src;\n    }\n\n    void pop_back()\n    {\n        VMA_HEAVY_ASSERT(m_Count > 0);\n        resize(size() - 1);\n    }\n\n    void push_front(const T& src)\n    {\n        insert(0, src);\n    }\n\n    void pop_front()\n    {\n        VMA_HEAVY_ASSERT(m_Count > 0);\n        remove(0);\n    }\n\n    typedef T* iterator;\n    typedef const T* const_iterator;\n\n    iterator begin() { return m_pArray; }\n    iterator end() { return m_pArray + m_Count; }\n    const_iterator cbegin() const { return m_pArray; }\n    const_iterator cend() const { return m_pArray + m_Count; }\n    const_iterator begin() const { return cbegin(); }\n    const_iterator end() const { return cend(); }\n\nprivate:\n    AllocatorT m_Allocator;\n    T* m_pArray;\n    size_t m_Count;\n    size_t m_Capacity;\n};\n\ntemplate<typename T, typename allocatorT>\nstatic void VmaVectorInsert(VmaVector<T, allocatorT>& vec, size_t index, const T& item)\n{\n    vec.insert(index, item);\n}\n\ntemplate<typename T, typename allocatorT>\nstatic void VmaVectorRemove(VmaVector<T, allocatorT>& vec, size_t index)\n{\n    vec.remove(index);\n}\n\n#endif // #if VMA_USE_STL_VECTOR\n\ntemplate<typename CmpLess, typename VectorT>\nsize_t VmaVectorInsertSorted(VectorT& vector, const typename VectorT::value_type& value)\n{\n    const size_t indexToInsert = VmaBinaryFindFirstNotLess(\n        vector.data(),\n        vector.data() + vector.size(),\n        value,\n        CmpLess()) - vector.data();\n    VmaVectorInsert(vector, indexToInsert, value);\n    return indexToInsert;\n}\n\ntemplate<typename CmpLess, typename VectorT>\nbool VmaVectorRemoveSorted(VectorT& vector, const typename VectorT::value_type& value)\n{\n    CmpLess comparator;\n    typename VectorT::iterator it = VmaBinaryFindFirstNotLess(\n        vector.begin(),\n        vector.end(),\n        value,\n        comparator);\n    if((it != vector.end()) && !comparator(*it, value) && !comparator(value, *it))\n    {\n        size_t indexToRemove = it - vector.begin();\n        VmaVectorRemove(vector, indexToRemove);\n        return true;\n    }\n    return false;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// class VmaSmallVector\n\n/*\nThis is a vector (a variable-sized array), optimized for the case when the array is small.\n\nIt contains some number of elements in-place, which allows it to avoid heap allocation\nwhen the actual number of elements is below that threshold. This allows normal \"small\"\ncases to be fast without losing generality for large inputs.\n*/\n\ntemplate<typename T, typename AllocatorT, size_t N>\nclass VmaSmallVector\n{\npublic:\n    typedef T value_type;\n\n    VmaSmallVector(const AllocatorT& allocator) :\n        m_Count(0),\n        m_DynamicArray(allocator)\n    {\n    }\n    VmaSmallVector(size_t count, const AllocatorT& allocator) :\n        m_Count(count),\n        m_DynamicArray(count > N ? count : 0, allocator)\n    {\n    }\n    template<typename SrcT, typename SrcAllocatorT, size_t SrcN>\n    VmaSmallVector(const VmaSmallVector<SrcT, SrcAllocatorT, SrcN>& src) = delete;\n    template<typename SrcT, typename SrcAllocatorT, size_t SrcN>\n    VmaSmallVector<T, AllocatorT, N>& operator=(const VmaSmallVector<SrcT, SrcAllocatorT, SrcN>& rhs) = delete;\n\n    bool empty() const { return m_Count == 0; }\n    size_t size() const { return m_Count; }\n    T* data() { return m_Count > N ? m_DynamicArray.data() : m_StaticArray; }\n    const T* data() const { return m_Count > N ? m_DynamicArray.data() : m_StaticArray; }\n\n    T& operator[](size_t index)\n    {\n        VMA_HEAVY_ASSERT(index < m_Count);\n        return data()[index];\n    }\n    const T& operator[](size_t index) const\n    {\n        VMA_HEAVY_ASSERT(index < m_Count);\n        return data()[index];\n    }\n\n    T& front()\n    {\n        VMA_HEAVY_ASSERT(m_Count > 0);\n        return data()[0];\n    }\n    const T& front() const\n    {\n        VMA_HEAVY_ASSERT(m_Count > 0);\n        return data()[0];\n    }\n    T& back()\n    {\n        VMA_HEAVY_ASSERT(m_Count > 0);\n        return data()[m_Count - 1];\n    }\n    const T& back() const\n    {\n        VMA_HEAVY_ASSERT(m_Count > 0);\n        return data()[m_Count - 1];\n    }\n\n    void resize(size_t newCount, bool freeMemory = false)\n    {\n        if(newCount > N && m_Count > N)\n        {\n            // Any direction, staying in m_DynamicArray\n            m_DynamicArray.resize(newCount);\n            if(freeMemory)\n            {\n                m_DynamicArray.shrink_to_fit();\n            }\n        }\n        else if(newCount > N && m_Count <= N)\n        {\n            // Growing, moving from m_StaticArray to m_DynamicArray\n            m_DynamicArray.resize(newCount);\n            if(m_Count > 0)\n            {\n                memcpy(m_DynamicArray.data(), m_StaticArray, m_Count * sizeof(T));\n            }\n        }\n        else if(newCount <= N && m_Count > N)\n        {\n            // Shrinking, moving from m_DynamicArray to m_StaticArray\n            if(newCount > 0)\n            {\n                memcpy(m_StaticArray, m_DynamicArray.data(), newCount * sizeof(T));\n            }\n            m_DynamicArray.resize(0);\n            if(freeMemory)\n            {\n                m_DynamicArray.shrink_to_fit();\n            }\n        }\n        else\n        {\n            // Any direction, staying in m_StaticArray - nothing to do here\n        }\n        m_Count = newCount;\n    }\n\n    void clear(bool freeMemory = false)\n    {\n        m_DynamicArray.clear();\n        if(freeMemory)\n        {\n            m_DynamicArray.shrink_to_fit();\n        }\n        m_Count = 0;\n    }\n\n    void insert(size_t index, const T& src)\n    {\n        VMA_HEAVY_ASSERT(index <= m_Count);\n        const size_t oldCount = size();\n        resize(oldCount + 1);\n        T* const dataPtr = data();\n        if(index < oldCount)\n        {\n            //  I know, this could be more optimal for case where memmove can be memcpy directly from m_StaticArray to m_DynamicArray.\n            memmove(dataPtr + (index + 1), dataPtr + index, (oldCount - index) * sizeof(T));\n        }\n        dataPtr[index] = src;\n    }\n\n    void remove(size_t index)\n    {\n        VMA_HEAVY_ASSERT(index < m_Count);\n        const size_t oldCount = size();\n        if(index < oldCount - 1)\n        {\n            //  I know, this could be more optimal for case where memmove can be memcpy directly from m_DynamicArray to m_StaticArray.\n            T* const dataPtr = data();\n            memmove(dataPtr + index, dataPtr + (index + 1), (oldCount - index - 1) * sizeof(T));\n        }\n        resize(oldCount - 1);\n    }\n\n    void push_back(const T& src)\n    {\n        const size_t newIndex = size();\n        resize(newIndex + 1);\n        data()[newIndex] = src;\n    }\n\n    void pop_back()\n    {\n        VMA_HEAVY_ASSERT(m_Count > 0);\n        resize(size() - 1);\n    }\n\n    void push_front(const T& src)\n    {\n        insert(0, src);\n    }\n\n    void pop_front()\n    {\n        VMA_HEAVY_ASSERT(m_Count > 0);\n        remove(0);\n    }\n\n    typedef T* iterator;\n\n    iterator begin() { return data(); }\n    iterator end() { return data() + m_Count; }\n\nprivate:\n    size_t m_Count;\n    T m_StaticArray[N]; // Used when m_Size <= N\n    VmaVector<T, AllocatorT> m_DynamicArray; // Used when m_Size > N\n};\n\n////////////////////////////////////////////////////////////////////////////////\n// class VmaPoolAllocator\n\n/*\nAllocator for objects of type T using a list of arrays (pools) to speed up\nallocation. Number of elements that can be allocated is not bounded because\nallocator can create multiple blocks.\n*/\ntemplate<typename T>\nclass VmaPoolAllocator\n{\n    VMA_CLASS_NO_COPY(VmaPoolAllocator)\npublic:\n    VmaPoolAllocator(const VkAllocationCallbacks* pAllocationCallbacks, uint32_t firstBlockCapacity);\n    ~VmaPoolAllocator();\n    template<typename... Types> T* Alloc(Types&&... args);\n    void Free(T* ptr);\n\nprivate:\n    union Item\n    {\n        uint32_t NextFreeIndex;\n        alignas(T) char Value[sizeof(T)];\n    };\n\n    struct ItemBlock\n    {\n        Item* pItems;\n        uint32_t Capacity;\n        uint32_t FirstFreeIndex;\n    };\n\n    const VkAllocationCallbacks* m_pAllocationCallbacks;\n    const uint32_t m_FirstBlockCapacity;\n    VmaVector< ItemBlock, VmaStlAllocator<ItemBlock> > m_ItemBlocks;\n\n    ItemBlock& CreateNewBlock();\n};\n\ntemplate<typename T>\nVmaPoolAllocator<T>::VmaPoolAllocator(const VkAllocationCallbacks* pAllocationCallbacks, uint32_t firstBlockCapacity) :\n    m_pAllocationCallbacks(pAllocationCallbacks),\n    m_FirstBlockCapacity(firstBlockCapacity),\n    m_ItemBlocks(VmaStlAllocator<ItemBlock>(pAllocationCallbacks))\n{\n    VMA_ASSERT(m_FirstBlockCapacity > 1);\n}\n\ntemplate<typename T>\nVmaPoolAllocator<T>::~VmaPoolAllocator()\n{\n    for(size_t i = m_ItemBlocks.size(); i--; )\n        vma_delete_array(m_pAllocationCallbacks, m_ItemBlocks[i].pItems, m_ItemBlocks[i].Capacity);\n    m_ItemBlocks.clear();\n}\n\ntemplate<typename T>\ntemplate<typename... Types> T* VmaPoolAllocator<T>::Alloc(Types&&... args)\n{\n    for(size_t i = m_ItemBlocks.size(); i--; )\n    {\n        ItemBlock& block = m_ItemBlocks[i];\n        // This block has some free items: Use first one.\n        if(block.FirstFreeIndex != UINT32_MAX)\n        {\n            Item* const pItem = &block.pItems[block.FirstFreeIndex];\n            block.FirstFreeIndex = pItem->NextFreeIndex;\n            T* result = (T*)&pItem->Value;\n            new(result)T(std::forward<Types>(args)...); // Explicit constructor call.\n            return result;\n        }\n    }\n\n    // No block has free item: Create new one and use it.\n    ItemBlock& newBlock = CreateNewBlock();\n    Item* const pItem = &newBlock.pItems[0];\n    newBlock.FirstFreeIndex = pItem->NextFreeIndex;\n    T* result = (T*)&pItem->Value;\n    new(result)T(std::forward<Types>(args)...); // Explicit constructor call.\n    return result;\n}\n\ntemplate<typename T>\nvoid VmaPoolAllocator<T>::Free(T* ptr)\n{\n    // Search all memory blocks to find ptr.\n    for(size_t i = m_ItemBlocks.size(); i--; )\n    {\n        ItemBlock& block = m_ItemBlocks[i];\n\n        // Casting to union.\n        Item* pItemPtr;\n        memcpy(&pItemPtr, &ptr, sizeof(pItemPtr));\n\n        // Check if pItemPtr is in address range of this block.\n        if((pItemPtr >= block.pItems) && (pItemPtr < block.pItems + block.Capacity))\n        {\n            ptr->~T(); // Explicit destructor call.\n            const uint32_t index = static_cast<uint32_t>(pItemPtr - block.pItems);\n            pItemPtr->NextFreeIndex = block.FirstFreeIndex;\n            block.FirstFreeIndex = index;\n            return;\n        }\n    }\n    VMA_ASSERT(0 && \"Pointer doesn't belong to this memory pool.\");\n}\n\ntemplate<typename T>\ntypename VmaPoolAllocator<T>::ItemBlock& VmaPoolAllocator<T>::CreateNewBlock()\n{\n    const uint32_t newBlockCapacity = m_ItemBlocks.empty() ?\n        m_FirstBlockCapacity : m_ItemBlocks.back().Capacity * 3 / 2;\n\n    const ItemBlock newBlock = {\n        vma_new_array(m_pAllocationCallbacks, Item, newBlockCapacity),\n        newBlockCapacity,\n        0 };\n\n    m_ItemBlocks.push_back(newBlock);\n\n    // Setup singly-linked list of all free items in this block.\n    for(uint32_t i = 0; i < newBlockCapacity - 1; ++i)\n        newBlock.pItems[i].NextFreeIndex = i + 1;\n    newBlock.pItems[newBlockCapacity - 1].NextFreeIndex = UINT32_MAX;\n    return m_ItemBlocks.back();\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// class VmaRawList, VmaList\n\n#if VMA_USE_STL_LIST\n\n#define VmaList std::list\n\n#else // #if VMA_USE_STL_LIST\n\ntemplate<typename T>\nstruct VmaListItem\n{\n    VmaListItem* pPrev;\n    VmaListItem* pNext;\n    T Value;\n};\n\n// Doubly linked list.\ntemplate<typename T>\nclass VmaRawList\n{\n    VMA_CLASS_NO_COPY(VmaRawList)\npublic:\n    typedef VmaListItem<T> ItemType;\n\n    VmaRawList(const VkAllocationCallbacks* pAllocationCallbacks);\n    ~VmaRawList();\n    void Clear();\n\n    size_t GetCount() const { return m_Count; }\n    bool IsEmpty() const { return m_Count == 0; }\n\n    ItemType* Front() { return m_pFront; }\n    const ItemType* Front() const { return m_pFront; }\n    ItemType* Back() { return m_pBack; }\n    const ItemType* Back() const { return m_pBack; }\n\n    ItemType* PushBack();\n    ItemType* PushFront();\n    ItemType* PushBack(const T& value);\n    ItemType* PushFront(const T& value);\n    void PopBack();\n    void PopFront();\n\n    // Item can be null - it means PushBack.\n    ItemType* InsertBefore(ItemType* pItem);\n    // Item can be null - it means PushFront.\n    ItemType* InsertAfter(ItemType* pItem);\n\n    ItemType* InsertBefore(ItemType* pItem, const T& value);\n    ItemType* InsertAfter(ItemType* pItem, const T& value);\n\n    void Remove(ItemType* pItem);\n\nprivate:\n    const VkAllocationCallbacks* const m_pAllocationCallbacks;\n    VmaPoolAllocator<ItemType> m_ItemAllocator;\n    ItemType* m_pFront;\n    ItemType* m_pBack;\n    size_t m_Count;\n};\n\ntemplate<typename T>\nVmaRawList<T>::VmaRawList(const VkAllocationCallbacks* pAllocationCallbacks) :\n    m_pAllocationCallbacks(pAllocationCallbacks),\n    m_ItemAllocator(pAllocationCallbacks, 128),\n    m_pFront(VMA_NULL),\n    m_pBack(VMA_NULL),\n    m_Count(0)\n{\n}\n\ntemplate<typename T>\nVmaRawList<T>::~VmaRawList() = default;\n// Intentionally not calling Clear, because that would be unnecessary\n// computations to return all items to m_ItemAllocator as free.\n\ntemplate<typename T>\nvoid VmaRawList<T>::Clear()\n{\n    if(IsEmpty() == false)\n    {\n        ItemType* pItem = m_pBack;\n        while(pItem != VMA_NULL)\n        {\n            ItemType* const pPrevItem = pItem->pPrev;\n            m_ItemAllocator.Free(pItem);\n            pItem = pPrevItem;\n        }\n        m_pFront = VMA_NULL;\n        m_pBack = VMA_NULL;\n        m_Count = 0;\n    }\n}\n\ntemplate<typename T>\nVmaListItem<T>* VmaRawList<T>::PushBack()\n{\n    ItemType* const pNewItem = m_ItemAllocator.Alloc();\n    pNewItem->pNext = VMA_NULL;\n    if(IsEmpty())\n    {\n        pNewItem->pPrev = VMA_NULL;\n        m_pFront = pNewItem;\n        m_pBack = pNewItem;\n        m_Count = 1;\n    }\n    else\n    {\n        pNewItem->pPrev = m_pBack;\n        m_pBack->pNext = pNewItem;\n        m_pBack = pNewItem;\n        ++m_Count;\n    }\n    return pNewItem;\n}\n\ntemplate<typename T>\nVmaListItem<T>* VmaRawList<T>::PushFront()\n{\n    ItemType* const pNewItem = m_ItemAllocator.Alloc();\n    pNewItem->pPrev = VMA_NULL;\n    if(IsEmpty())\n    {\n        pNewItem->pNext = VMA_NULL;\n        m_pFront = pNewItem;\n        m_pBack = pNewItem;\n        m_Count = 1;\n    }\n    else\n    {\n        pNewItem->pNext = m_pFront;\n        m_pFront->pPrev = pNewItem;\n        m_pFront = pNewItem;\n        ++m_Count;\n    }\n    return pNewItem;\n}\n\ntemplate<typename T>\nVmaListItem<T>* VmaRawList<T>::PushBack(const T& value)\n{\n    ItemType* const pNewItem = PushBack();\n    pNewItem->Value = value;\n    return pNewItem;\n}\n\ntemplate<typename T>\nVmaListItem<T>* VmaRawList<T>::PushFront(const T& value)\n{\n    ItemType* const pNewItem = PushFront();\n    pNewItem->Value = value;\n    return pNewItem;\n}\n\ntemplate<typename T>\nvoid VmaRawList<T>::PopBack()\n{\n    VMA_HEAVY_ASSERT(m_Count > 0);\n    ItemType* const pBackItem = m_pBack;\n    ItemType* const pPrevItem = pBackItem->pPrev;\n    if(pPrevItem != VMA_NULL)\n    {\n        pPrevItem->pNext = VMA_NULL;\n    }\n    m_pBack = pPrevItem;\n    m_ItemAllocator.Free(pBackItem);\n    --m_Count;\n}\n\ntemplate<typename T>\nvoid VmaRawList<T>::PopFront()\n{\n    VMA_HEAVY_ASSERT(m_Count > 0);\n    ItemType* const pFrontItem = m_pFront;\n    ItemType* const pNextItem = pFrontItem->pNext;\n    if(pNextItem != VMA_NULL)\n    {\n        pNextItem->pPrev = VMA_NULL;\n    }\n    m_pFront = pNextItem;\n    m_ItemAllocator.Free(pFrontItem);\n    --m_Count;\n}\n\ntemplate<typename T>\nvoid VmaRawList<T>::Remove(ItemType* pItem)\n{\n    VMA_HEAVY_ASSERT(pItem != VMA_NULL);\n    VMA_HEAVY_ASSERT(m_Count > 0);\n\n    if(pItem->pPrev != VMA_NULL)\n    {\n        pItem->pPrev->pNext = pItem->pNext;\n    }\n    else\n    {\n        VMA_HEAVY_ASSERT(m_pFront == pItem);\n        m_pFront = pItem->pNext;\n    }\n\n    if(pItem->pNext != VMA_NULL)\n    {\n        pItem->pNext->pPrev = pItem->pPrev;\n    }\n    else\n    {\n        VMA_HEAVY_ASSERT(m_pBack == pItem);\n        m_pBack = pItem->pPrev;\n    }\n\n    m_ItemAllocator.Free(pItem);\n    --m_Count;\n}\n\ntemplate<typename T>\nVmaListItem<T>* VmaRawList<T>::InsertBefore(ItemType* pItem)\n{\n    if(pItem != VMA_NULL)\n    {\n        ItemType* const prevItem = pItem->pPrev;\n        ItemType* const newItem = m_ItemAllocator.Alloc();\n        newItem->pPrev = prevItem;\n        newItem->pNext = pItem;\n        pItem->pPrev = newItem;\n        if(prevItem != VMA_NULL)\n        {\n            prevItem->pNext = newItem;\n        }\n        else\n        {\n            VMA_HEAVY_ASSERT(m_pFront == pItem);\n            m_pFront = newItem;\n        }\n        ++m_Count;\n        return newItem;\n    }\n    else\n        return PushBack();\n}\n\ntemplate<typename T>\nVmaListItem<T>* VmaRawList<T>::InsertAfter(ItemType* pItem)\n{\n    if(pItem != VMA_NULL)\n    {\n        ItemType* const nextItem = pItem->pNext;\n        ItemType* const newItem = m_ItemAllocator.Alloc();\n        newItem->pNext = nextItem;\n        newItem->pPrev = pItem;\n        pItem->pNext = newItem;\n        if(nextItem != VMA_NULL)\n        {\n            nextItem->pPrev = newItem;\n        }\n        else\n        {\n            VMA_HEAVY_ASSERT(m_pBack == pItem);\n            m_pBack = newItem;\n        }\n        ++m_Count;\n        return newItem;\n    }\n    else\n        return PushFront();\n}\n\ntemplate<typename T>\nVmaListItem<T>* VmaRawList<T>::InsertBefore(ItemType* pItem, const T& value)\n{\n    ItemType* const newItem = InsertBefore(pItem);\n    newItem->Value = value;\n    return newItem;\n}\n\ntemplate<typename T>\nVmaListItem<T>* VmaRawList<T>::InsertAfter(ItemType* pItem, const T& value)\n{\n    ItemType* const newItem = InsertAfter(pItem);\n    newItem->Value = value;\n    return newItem;\n}\n\ntemplate<typename T, typename AllocatorT>\nclass VmaList\n{\n    VMA_CLASS_NO_COPY(VmaList)\npublic:\n    class iterator\n    {\n    public:\n        iterator() :\n            m_pList(VMA_NULL),\n            m_pItem(VMA_NULL)\n        {\n        }\n\n        T& operator*() const\n        {\n            VMA_HEAVY_ASSERT(m_pItem != VMA_NULL);\n            return m_pItem->Value;\n        }\n        T* operator->() const\n        {\n            VMA_HEAVY_ASSERT(m_pItem != VMA_NULL);\n            return &m_pItem->Value;\n        }\n\n        iterator& operator++()\n        {\n            VMA_HEAVY_ASSERT(m_pItem != VMA_NULL);\n            m_pItem = m_pItem->pNext;\n            return *this;\n        }\n        iterator& operator--()\n        {\n            if(m_pItem != VMA_NULL)\n            {\n                m_pItem = m_pItem->pPrev;\n            }\n            else\n            {\n                VMA_HEAVY_ASSERT(!m_pList->IsEmpty());\n                m_pItem = m_pList->Back();\n            }\n            return *this;\n        }\n\n        iterator operator++(int)\n        {\n            iterator result = *this;\n            ++*this;\n            return result;\n        }\n        iterator operator--(int)\n        {\n            iterator result = *this;\n            --*this;\n            return result;\n        }\n\n        bool operator==(const iterator& rhs) const\n        {\n            VMA_HEAVY_ASSERT(m_pList == rhs.m_pList);\n            return m_pItem == rhs.m_pItem;\n        }\n        bool operator!=(const iterator& rhs) const\n        {\n            VMA_HEAVY_ASSERT(m_pList == rhs.m_pList);\n            return m_pItem != rhs.m_pItem;\n        }\n\n    private:\n        VmaRawList<T>* m_pList;\n        VmaListItem<T>* m_pItem;\n\n        iterator(VmaRawList<T>* pList, VmaListItem<T>* pItem) :\n            m_pList(pList),\n            m_pItem(pItem)\n        {\n        }\n\n        friend class VmaList<T, AllocatorT>;\n    };\n\n    class const_iterator\n    {\n    public:\n        const_iterator() :\n            m_pList(VMA_NULL),\n            m_pItem(VMA_NULL)\n        {\n        }\n\n        const_iterator(const iterator& src) :\n            m_pList(src.m_pList),\n            m_pItem(src.m_pItem)\n        {\n        }\n\n        const T& operator*() const\n        {\n            VMA_HEAVY_ASSERT(m_pItem != VMA_NULL);\n            return m_pItem->Value;\n        }\n        const T* operator->() const\n        {\n            VMA_HEAVY_ASSERT(m_pItem != VMA_NULL);\n            return &m_pItem->Value;\n        }\n\n        const_iterator& operator++()\n        {\n            VMA_HEAVY_ASSERT(m_pItem != VMA_NULL);\n            m_pItem = m_pItem->pNext;\n            return *this;\n        }\n        const_iterator& operator--()\n        {\n            if(m_pItem != VMA_NULL)\n            {\n                m_pItem = m_pItem->pPrev;\n            }\n            else\n            {\n                VMA_HEAVY_ASSERT(!m_pList->IsEmpty());\n                m_pItem = m_pList->Back();\n            }\n            return *this;\n        }\n\n        const_iterator operator++(int)\n        {\n            const_iterator result = *this;\n            ++*this;\n            return result;\n        }\n        const_iterator operator--(int)\n        {\n            const_iterator result = *this;\n            --*this;\n            return result;\n        }\n\n        bool operator==(const const_iterator& rhs) const\n        {\n            VMA_HEAVY_ASSERT(m_pList == rhs.m_pList);\n            return m_pItem == rhs.m_pItem;\n        }\n        bool operator!=(const const_iterator& rhs) const\n        {\n            VMA_HEAVY_ASSERT(m_pList == rhs.m_pList);\n            return m_pItem != rhs.m_pItem;\n        }\n\n    private:\n        const_iterator(const VmaRawList<T>* pList, const VmaListItem<T>* pItem) :\n            m_pList(pList),\n            m_pItem(pItem)\n        {\n        }\n\n        const VmaRawList<T>* m_pList;\n        const VmaListItem<T>* m_pItem;\n\n        friend class VmaList<T, AllocatorT>;\n    };\n\n    VmaList(const AllocatorT& allocator) : m_RawList(allocator.m_pCallbacks) { }\n\n    bool empty() const { return m_RawList.IsEmpty(); }\n    size_t size() const { return m_RawList.GetCount(); }\n\n    iterator begin() { return iterator(&m_RawList, m_RawList.Front()); }\n    iterator end() { return iterator(&m_RawList, VMA_NULL); }\n\n    const_iterator cbegin() const { return const_iterator(&m_RawList, m_RawList.Front()); }\n    const_iterator cend() const { return const_iterator(&m_RawList, VMA_NULL); }\n\n    const_iterator begin() const { return cbegin(); }\n    const_iterator end() const { return cend(); }\n\n    void clear() { m_RawList.Clear(); }\n    void push_back(const T& value) { m_RawList.PushBack(value); }\n    void erase(iterator it) { m_RawList.Remove(it.m_pItem); }\n    iterator insert(iterator it, const T& value) { return iterator(&m_RawList, m_RawList.InsertBefore(it.m_pItem, value)); }\n\nprivate:\n    VmaRawList<T> m_RawList;\n};\n\n#endif // #if VMA_USE_STL_LIST\n\n////////////////////////////////////////////////////////////////////////////////\n// class VmaIntrusiveLinkedList\n\n/*\nExpected interface of ItemTypeTraits:\nstruct MyItemTypeTraits\n{\n    typedef MyItem ItemType;\n    static ItemType* GetPrev(const ItemType* item) { return item->myPrevPtr; }\n    static ItemType* GetNext(const ItemType* item) { return item->myNextPtr; }\n    static ItemType*& AccessPrev(ItemType* item) { return item->myPrevPtr; }\n    static ItemType*& AccessNext(ItemType* item) { return item->myNextPtr; }\n};\n*/\ntemplate<typename ItemTypeTraits>\nclass VmaIntrusiveLinkedList\n{\npublic:\n    typedef typename ItemTypeTraits::ItemType ItemType;\n    static ItemType* GetPrev(const ItemType* item) { return ItemTypeTraits::GetPrev(item); }\n    static ItemType* GetNext(const ItemType* item) { return ItemTypeTraits::GetNext(item); }\n    // Movable, not copyable.\n    VmaIntrusiveLinkedList() = default;\n    VmaIntrusiveLinkedList(const VmaIntrusiveLinkedList<ItemTypeTraits>& src) = delete;\n    VmaIntrusiveLinkedList(VmaIntrusiveLinkedList<ItemTypeTraits>&& src) :\n        m_Front(src.m_Front), m_Back(src.m_Back), m_Count(src.m_Count)\n    {\n        src.m_Front = src.m_Back = VMA_NULL;\n        src.m_Count = 0;\n    }\n    ~VmaIntrusiveLinkedList()\n    {\n        VMA_HEAVY_ASSERT(IsEmpty());\n    }\n    VmaIntrusiveLinkedList<ItemTypeTraits>& operator=(const VmaIntrusiveLinkedList<ItemTypeTraits>& src) = delete;\n    VmaIntrusiveLinkedList<ItemTypeTraits>& operator=(VmaIntrusiveLinkedList<ItemTypeTraits>&& src)\n    {\n        if(&src != this)\n        {\n            VMA_HEAVY_ASSERT(IsEmpty());\n            m_Front = src.m_Front;\n            m_Back = src.m_Back;\n            m_Count = src.m_Count;\n            src.m_Front = src.m_Back = VMA_NULL;\n            src.m_Count = 0;\n        }\n        return *this;\n    }\n    void RemoveAll()\n    {\n        if(!IsEmpty())\n        {\n            ItemType* item = m_Back;\n            while(item != VMA_NULL)\n            {\n                ItemType* const prevItem = ItemTypeTraits::AccessPrev(item);\n                ItemTypeTraits::AccessPrev(item) = VMA_NULL;\n                ItemTypeTraits::AccessNext(item) = VMA_NULL;\n                item = prevItem;\n            }\n            m_Front = VMA_NULL;\n            m_Back = VMA_NULL;\n            m_Count = 0;\n        }\n    }\n    size_t GetCount() const { return m_Count; }\n    bool IsEmpty() const { return m_Count == 0; }\n    ItemType* Front() { return m_Front; }\n    const ItemType* Front() const { return m_Front; }\n    ItemType* Back() { return m_Back; }\n    const ItemType* Back() const { return m_Back; }\n    void PushBack(ItemType* item)\n    {\n        VMA_HEAVY_ASSERT(ItemTypeTraits::GetPrev(item) == VMA_NULL && ItemTypeTraits::GetNext(item) == VMA_NULL);\n        if(IsEmpty())\n        {\n            m_Front = item;\n            m_Back = item;\n            m_Count = 1;\n        }\n        else\n        {\n            ItemTypeTraits::AccessPrev(item) = m_Back;\n            ItemTypeTraits::AccessNext(m_Back) = item;\n            m_Back = item;\n            ++m_Count;\n        }\n    }\n    void PushFront(ItemType* item)\n    {\n        VMA_HEAVY_ASSERT(ItemTypeTraits::GetPrev(item) == VMA_NULL && ItemTypeTraits::GetNext(item) == VMA_NULL);\n        if(IsEmpty())\n        {\n            m_Front = item;\n            m_Back = item;\n            m_Count = 1;\n        }\n        else\n        {\n            ItemTypeTraits::AccessNext(item) = m_Front;\n            ItemTypeTraits::AccessPrev(m_Front) = item;\n            m_Front = item;\n            ++m_Count;\n        }\n    }\n    ItemType* PopBack()\n    {\n        VMA_HEAVY_ASSERT(m_Count > 0);\n        ItemType* const backItem = m_Back;\n        ItemType* const prevItem = ItemTypeTraits::GetPrev(backItem);\n        if(prevItem != VMA_NULL)\n        {\n            ItemTypeTraits::AccessNext(prevItem) = VMA_NULL;\n        }\n        m_Back = prevItem;\n        --m_Count;\n        ItemTypeTraits::AccessPrev(backItem) = VMA_NULL;\n        ItemTypeTraits::AccessNext(backItem) = VMA_NULL;\n        return backItem;\n    }\n    ItemType* PopFront()\n    {\n        VMA_HEAVY_ASSERT(m_Count > 0);\n        ItemType* const frontItem = m_Front;\n        ItemType* const nextItem = ItemTypeTraits::GetNext(frontItem);\n        if(nextItem != VMA_NULL)\n        {\n            ItemTypeTraits::AccessPrev(nextItem) = VMA_NULL;\n        }\n        m_Front = nextItem;\n        --m_Count;\n        ItemTypeTraits::AccessPrev(frontItem) = VMA_NULL;\n        ItemTypeTraits::AccessNext(frontItem) = VMA_NULL;\n        return frontItem;\n    }\n\n    // MyItem can be null - it means PushBack.\n    void InsertBefore(ItemType* existingItem, ItemType* newItem)\n    {\n        VMA_HEAVY_ASSERT(newItem != VMA_NULL && ItemTypeTraits::GetPrev(newItem) == VMA_NULL && ItemTypeTraits::GetNext(newItem) == VMA_NULL);\n        if(existingItem != VMA_NULL)\n        {\n            ItemType* const prevItem = ItemTypeTraits::GetPrev(existingItem);\n            ItemTypeTraits::AccessPrev(newItem) = prevItem;\n            ItemTypeTraits::AccessNext(newItem) = existingItem;\n            ItemTypeTraits::AccessPrev(existingItem) = newItem;\n            if(prevItem != VMA_NULL)\n            {\n                ItemTypeTraits::AccessNext(prevItem) = newItem;\n            }\n            else\n            {\n                VMA_HEAVY_ASSERT(m_Front == existingItem);\n                m_Front = newItem;\n            }\n            ++m_Count;\n        }\n        else\n            PushBack(newItem);\n    }\n    // MyItem can be null - it means PushFront.\n    void InsertAfter(ItemType* existingItem, ItemType* newItem)\n    {\n        VMA_HEAVY_ASSERT(newItem != VMA_NULL && ItemTypeTraits::GetPrev(newItem) == VMA_NULL && ItemTypeTraits::GetNext(newItem) == VMA_NULL);\n        if(existingItem != VMA_NULL)\n        {\n            ItemType* const nextItem = ItemTypeTraits::GetNext(existingItem);\n            ItemTypeTraits::AccessNext(newItem) = nextItem;\n            ItemTypeTraits::AccessPrev(newItem) = existingItem;\n            ItemTypeTraits::AccessNext(existingItem) = newItem;\n            if(nextItem != VMA_NULL)\n            {\n                ItemTypeTraits::AccessPrev(nextItem) = newItem;\n            }\n            else\n            {\n                VMA_HEAVY_ASSERT(m_Back == existingItem);\n                m_Back = newItem;\n            }\n            ++m_Count;\n        }\n        else\n            return PushFront(newItem);\n    }\n    void Remove(ItemType* item)\n    {\n        VMA_HEAVY_ASSERT(item != VMA_NULL && m_Count > 0);\n        if(ItemTypeTraits::GetPrev(item) != VMA_NULL)\n        {\n            ItemTypeTraits::AccessNext(ItemTypeTraits::AccessPrev(item)) = ItemTypeTraits::GetNext(item);\n        }\n        else\n        {\n            VMA_HEAVY_ASSERT(m_Front == item);\n            m_Front = ItemTypeTraits::GetNext(item);\n        }\n\n        if(ItemTypeTraits::GetNext(item) != VMA_NULL)\n        {\n            ItemTypeTraits::AccessPrev(ItemTypeTraits::AccessNext(item)) = ItemTypeTraits::GetPrev(item);\n        }\n        else\n        {\n            VMA_HEAVY_ASSERT(m_Back == item);\n            m_Back = ItemTypeTraits::GetPrev(item);\n        }\n        ItemTypeTraits::AccessPrev(item) = VMA_NULL;\n        ItemTypeTraits::AccessNext(item) = VMA_NULL;\n        --m_Count;\n    }\nprivate:\n    ItemType* m_Front = VMA_NULL;\n    ItemType* m_Back = VMA_NULL;\n    size_t m_Count = 0;\n};\n\n////////////////////////////////////////////////////////////////////////////////\n// class VmaMap\n\n// Unused in this version.\n#if 0\n\n#if VMA_USE_STL_UNORDERED_MAP\n\n#define VmaPair std::pair\n\n#define VMA_MAP_TYPE(KeyT, ValueT) \\\n    std::unordered_map< KeyT, ValueT, std::hash<KeyT>, std::equal_to<KeyT>, VmaStlAllocator< std::pair<KeyT, ValueT> > >\n\n#else // #if VMA_USE_STL_UNORDERED_MAP\n\ntemplate<typename T1, typename T2>\nstruct VmaPair\n{\n    T1 first;\n    T2 second;\n\n    VmaPair() : first(), second() { }\n    VmaPair(const T1& firstSrc, const T2& secondSrc) : first(firstSrc), second(secondSrc) { }\n};\n\n/* Class compatible with subset of interface of std::unordered_map.\nKeyT, ValueT must be POD because they will be stored in VmaVector.\n*/\ntemplate<typename KeyT, typename ValueT>\nclass VmaMap\n{\npublic:\n    typedef VmaPair<KeyT, ValueT> PairType;\n    typedef PairType* iterator;\n\n    VmaMap(const VmaStlAllocator<PairType>& allocator) : m_Vector(allocator) { }\n\n    iterator begin() { return m_Vector.begin(); }\n    iterator end() { return m_Vector.end(); }\n\n    void insert(const PairType& pair);\n    iterator find(const KeyT& key);\n    void erase(iterator it);\n\nprivate:\n    VmaVector< PairType, VmaStlAllocator<PairType> > m_Vector;\n};\n\n#define VMA_MAP_TYPE(KeyT, ValueT) VmaMap<KeyT, ValueT>\n\ntemplate<typename FirstT, typename SecondT>\nstruct VmaPairFirstLess\n{\n    bool operator()(const VmaPair<FirstT, SecondT>& lhs, const VmaPair<FirstT, SecondT>& rhs) const\n    {\n        return lhs.first < rhs.first;\n    }\n    bool operator()(const VmaPair<FirstT, SecondT>& lhs, const FirstT& rhsFirst) const\n    {\n        return lhs.first < rhsFirst;\n    }\n};\n\ntemplate<typename KeyT, typename ValueT>\nvoid VmaMap<KeyT, ValueT>::insert(const PairType& pair)\n{\n    const size_t indexToInsert = VmaBinaryFindFirstNotLess(\n        m_Vector.data(),\n        m_Vector.data() + m_Vector.size(),\n        pair,\n        VmaPairFirstLess<KeyT, ValueT>()) - m_Vector.data();\n    VmaVectorInsert(m_Vector, indexToInsert, pair);\n}\n\ntemplate<typename KeyT, typename ValueT>\nVmaPair<KeyT, ValueT>* VmaMap<KeyT, ValueT>::find(const KeyT& key)\n{\n    PairType* it = VmaBinaryFindFirstNotLess(\n        m_Vector.data(),\n        m_Vector.data() + m_Vector.size(),\n        key,\n        VmaPairFirstLess<KeyT, ValueT>());\n    if((it != m_Vector.end()) && (it->first == key))\n    {\n        return it;\n    }\n    else\n    {\n        return m_Vector.end();\n    }\n}\n\ntemplate<typename KeyT, typename ValueT>\nvoid VmaMap<KeyT, ValueT>::erase(iterator it)\n{\n    VmaVectorRemove(m_Vector, it - m_Vector.begin());\n}\n\n#endif // #if VMA_USE_STL_UNORDERED_MAP\n\n#endif // #if 0\n\n////////////////////////////////////////////////////////////////////////////////\n\nclass VmaDeviceMemoryBlock;\n\nenum VMA_CACHE_OPERATION { VMA_CACHE_FLUSH, VMA_CACHE_INVALIDATE };\n\nstruct VmaAllocation_T\n{\nprivate:\n    static const uint8_t MAP_COUNT_FLAG_PERSISTENT_MAP = 0x80;\n\n    enum FLAGS\n    {\n        FLAG_USER_DATA_STRING = 0x01,\n    };\n\npublic:\n    enum ALLOCATION_TYPE\n    {\n        ALLOCATION_TYPE_NONE,\n        ALLOCATION_TYPE_BLOCK,\n        ALLOCATION_TYPE_DEDICATED,\n    };\n\n    /*\n    This struct is allocated using VmaPoolAllocator.\n    */\n\n    VmaAllocation_T(uint32_t currentFrameIndex, bool userDataString) :\n        m_Alignment{1},\n        m_Size{0},\n        m_pUserData{VMA_NULL},\n        m_LastUseFrameIndex{currentFrameIndex},\n        m_MemoryTypeIndex{0},\n        m_Type{(uint8_t)ALLOCATION_TYPE_NONE},\n        m_SuballocationType{(uint8_t)VMA_SUBALLOCATION_TYPE_UNKNOWN},\n        m_MapCount{0},\n        m_Flags{userDataString ? (uint8_t)FLAG_USER_DATA_STRING : (uint8_t)0}\n    {\n#if VMA_STATS_STRING_ENABLED\n        m_CreationFrameIndex = currentFrameIndex;\n        m_BufferImageUsage = 0;\n#endif\n    }\n\n    ~VmaAllocation_T()\n    {\n        VMA_ASSERT((m_MapCount & ~MAP_COUNT_FLAG_PERSISTENT_MAP) == 0 && \"Allocation was not unmapped before destruction.\");\n\n        // Check if owned string was freed.\n        VMA_ASSERT(m_pUserData == VMA_NULL);\n    }\n\n    void InitBlockAllocation(\n        VmaDeviceMemoryBlock* block,\n        VkDeviceSize offset,\n        VkDeviceSize alignment,\n        VkDeviceSize size,\n        uint32_t memoryTypeIndex,\n        VmaSuballocationType suballocationType,\n        bool mapped,\n        bool canBecomeLost)\n    {\n        VMA_ASSERT(m_Type == ALLOCATION_TYPE_NONE);\n        VMA_ASSERT(block != VMA_NULL);\n        m_Type = (uint8_t)ALLOCATION_TYPE_BLOCK;\n        m_Alignment = alignment;\n        m_Size = size;\n        m_MemoryTypeIndex = memoryTypeIndex;\n        m_MapCount = mapped ? MAP_COUNT_FLAG_PERSISTENT_MAP : 0;\n        m_SuballocationType = (uint8_t)suballocationType;\n        m_BlockAllocation.m_Block = block;\n        m_BlockAllocation.m_Offset = offset;\n        m_BlockAllocation.m_CanBecomeLost = canBecomeLost;\n    }\n\n    void InitLost()\n    {\n        VMA_ASSERT(m_Type == ALLOCATION_TYPE_NONE);\n        VMA_ASSERT(m_LastUseFrameIndex.load() == VMA_FRAME_INDEX_LOST);\n        m_Type = (uint8_t)ALLOCATION_TYPE_BLOCK;\n        m_MemoryTypeIndex = 0;\n        m_BlockAllocation.m_Block = VMA_NULL;\n        m_BlockAllocation.m_Offset = 0;\n        m_BlockAllocation.m_CanBecomeLost = true;\n    }\n\n    void ChangeBlockAllocation(\n        VmaAllocator hAllocator,\n        VmaDeviceMemoryBlock* block,\n        VkDeviceSize offset);\n\n    void ChangeOffset(VkDeviceSize newOffset);\n\n    // pMappedData not null means allocation is created with MAPPED flag.\n    void InitDedicatedAllocation(\n        uint32_t memoryTypeIndex,\n        VkDeviceMemory hMemory,\n        VmaSuballocationType suballocationType,\n        void* pMappedData,\n        VkDeviceSize size)\n    {\n        VMA_ASSERT(m_Type == ALLOCATION_TYPE_NONE);\n        VMA_ASSERT(hMemory != VK_NULL_HANDLE);\n        m_Type = (uint8_t)ALLOCATION_TYPE_DEDICATED;\n        m_Alignment = 0;\n        m_Size = size;\n        m_MemoryTypeIndex = memoryTypeIndex;\n        m_SuballocationType = (uint8_t)suballocationType;\n        m_MapCount = (pMappedData != VMA_NULL) ? MAP_COUNT_FLAG_PERSISTENT_MAP : 0;\n        m_DedicatedAllocation.m_hMemory = hMemory;\n        m_DedicatedAllocation.m_pMappedData = pMappedData;\n        m_DedicatedAllocation.m_Prev = VMA_NULL;\n        m_DedicatedAllocation.m_Next = VMA_NULL;\n    }\n\n    ALLOCATION_TYPE GetType() const { return (ALLOCATION_TYPE)m_Type; }\n    VkDeviceSize GetAlignment() const { return m_Alignment; }\n    VkDeviceSize GetSize() const { return m_Size; }\n    bool IsUserDataString() const { return (m_Flags & FLAG_USER_DATA_STRING) != 0; }\n    void* GetUserData() const { return m_pUserData; }\n    void SetUserData(VmaAllocator hAllocator, void* pUserData);\n    VmaSuballocationType GetSuballocationType() const { return (VmaSuballocationType)m_SuballocationType; }\n\n    VmaDeviceMemoryBlock* GetBlock() const\n    {\n        VMA_ASSERT(m_Type == ALLOCATION_TYPE_BLOCK);\n        return m_BlockAllocation.m_Block;\n    }\n    VkDeviceSize GetOffset() const;\n    VkDeviceMemory GetMemory() const;\n    uint32_t GetMemoryTypeIndex() const { return m_MemoryTypeIndex; }\n    bool IsPersistentMap() const { return (m_MapCount & MAP_COUNT_FLAG_PERSISTENT_MAP) != 0; }\n    void* GetMappedData() const;\n    bool CanBecomeLost() const;\n\n    uint32_t GetLastUseFrameIndex() const\n    {\n        return m_LastUseFrameIndex.load();\n    }\n    bool CompareExchangeLastUseFrameIndex(uint32_t& expected, uint32_t desired)\n    {\n        return m_LastUseFrameIndex.compare_exchange_weak(expected, desired);\n    }\n    /*\n    - If hAllocation.LastUseFrameIndex + frameInUseCount < allocator.CurrentFrameIndex,\n      makes it lost by setting LastUseFrameIndex = VMA_FRAME_INDEX_LOST and returns true.\n    - Else, returns false.\n\n    If hAllocation is already lost, assert - you should not call it then.\n    If hAllocation was not created with CAN_BECOME_LOST_BIT, assert.\n    */\n    bool MakeLost(uint32_t currentFrameIndex, uint32_t frameInUseCount);\n\n    void DedicatedAllocCalcStatsInfo(VmaStatInfo& outInfo)\n    {\n        VMA_ASSERT(m_Type == ALLOCATION_TYPE_DEDICATED);\n        outInfo.blockCount = 1;\n        outInfo.allocationCount = 1;\n        outInfo.unusedRangeCount = 0;\n        outInfo.usedBytes = m_Size;\n        outInfo.unusedBytes = 0;\n        outInfo.allocationSizeMin = outInfo.allocationSizeMax = m_Size;\n        outInfo.unusedRangeSizeMin = UINT64_MAX;\n        outInfo.unusedRangeSizeMax = 0;\n    }\n\n    void BlockAllocMap();\n    void BlockAllocUnmap();\n    VkResult DedicatedAllocMap(VmaAllocator hAllocator, void** ppData);\n    void DedicatedAllocUnmap(VmaAllocator hAllocator);\n\n#if VMA_STATS_STRING_ENABLED\n    uint32_t GetCreationFrameIndex() const { return m_CreationFrameIndex; }\n    uint32_t GetBufferImageUsage() const { return m_BufferImageUsage; }\n\n    void InitBufferImageUsage(uint32_t bufferImageUsage)\n    {\n        VMA_ASSERT(m_BufferImageUsage == 0);\n        m_BufferImageUsage = bufferImageUsage;\n    }\n\n    void PrintParameters(class VmaJsonWriter& json) const;\n#endif\n\nprivate:\n    VkDeviceSize m_Alignment;\n    VkDeviceSize m_Size;\n    void* m_pUserData;\n    VMA_ATOMIC_UINT32 m_LastUseFrameIndex;\n    uint32_t m_MemoryTypeIndex;\n    uint8_t m_Type; // ALLOCATION_TYPE\n    uint8_t m_SuballocationType; // VmaSuballocationType\n    // Bit 0x80 is set when allocation was created with VMA_ALLOCATION_CREATE_MAPPED_BIT.\n    // Bits with mask 0x7F are reference counter for vmaMapMemory()/vmaUnmapMemory().\n    uint8_t m_MapCount;\n    uint8_t m_Flags; // enum FLAGS\n\n    // Allocation out of VmaDeviceMemoryBlock.\n    struct BlockAllocation\n    {\n        VmaDeviceMemoryBlock* m_Block;\n        VkDeviceSize m_Offset;\n        bool m_CanBecomeLost;\n    };\n\n    // Allocation for an object that has its own private VkDeviceMemory.\n    struct DedicatedAllocation\n    {\n        VkDeviceMemory m_hMemory;\n        void* m_pMappedData; // Not null means memory is mapped.\n        VmaAllocation_T* m_Prev;\n        VmaAllocation_T* m_Next;\n    };\n\n    union\n    {\n        // Allocation out of VmaDeviceMemoryBlock.\n        BlockAllocation m_BlockAllocation;\n        // Allocation for an object that has its own private VkDeviceMemory.\n        DedicatedAllocation m_DedicatedAllocation;\n    };\n\n#if VMA_STATS_STRING_ENABLED\n    uint32_t m_CreationFrameIndex;\n    uint32_t m_BufferImageUsage; // 0 if unknown.\n#endif\n\n    void FreeUserDataString(VmaAllocator hAllocator);\n\n    friend struct VmaDedicatedAllocationListItemTraits;\n};\n\nstruct VmaDedicatedAllocationListItemTraits\n{\n    typedef VmaAllocation_T ItemType;\n    static ItemType* GetPrev(const ItemType* item)\n    {\n        VMA_HEAVY_ASSERT(item->GetType() == VmaAllocation_T::ALLOCATION_TYPE_DEDICATED);\n        return item->m_DedicatedAllocation.m_Prev;\n    }\n    static ItemType* GetNext(const ItemType* item)\n    {\n        VMA_HEAVY_ASSERT(item->GetType() == VmaAllocation_T::ALLOCATION_TYPE_DEDICATED);\n        return item->m_DedicatedAllocation.m_Next;\n    }\n    static ItemType*& AccessPrev(ItemType* item)\n    {\n        VMA_HEAVY_ASSERT(item->GetType() == VmaAllocation_T::ALLOCATION_TYPE_DEDICATED);\n        return item->m_DedicatedAllocation.m_Prev;\n    }\n    static ItemType*& AccessNext(ItemType* item){\n        VMA_HEAVY_ASSERT(item->GetType() == VmaAllocation_T::ALLOCATION_TYPE_DEDICATED);\n        return item->m_DedicatedAllocation.m_Next;\n    }\n};\n\n/*\nRepresents a region of VmaDeviceMemoryBlock that is either assigned and returned as\nallocated memory block or free.\n*/\nstruct VmaSuballocation\n{\n    VkDeviceSize offset;\n    VkDeviceSize size;\n    void* userData;\n    VmaSuballocationType type;\n};\n\n// Comparator for offsets.\nstruct VmaSuballocationOffsetLess\n{\n    bool operator()(const VmaSuballocation& lhs, const VmaSuballocation& rhs) const\n    {\n        return lhs.offset < rhs.offset;\n    }\n};\nstruct VmaSuballocationOffsetGreater\n{\n    bool operator()(const VmaSuballocation& lhs, const VmaSuballocation& rhs) const\n    {\n        return lhs.offset > rhs.offset;\n    }\n};\n\ntypedef VmaList< VmaSuballocation, VmaStlAllocator<VmaSuballocation> > VmaSuballocationList;\n\n// Cost of one additional allocation lost, as equivalent in bytes.\nstatic const VkDeviceSize VMA_LOST_ALLOCATION_COST = 1048576;\n\nenum class VmaAllocationRequestType\n{\n    Normal,\n    // Used by \"Linear\" algorithm.\n    UpperAddress,\n    EndOf1st,\n    EndOf2nd,\n};\n\n/*\nParameters of planned allocation inside a VmaDeviceMemoryBlock.\n\nIf canMakeOtherLost was false:\n- item points to a FREE suballocation.\n- itemsToMakeLostCount is 0.\n\nIf canMakeOtherLost was true:\n- item points to first of sequence of suballocations, which are either FREE,\n  or point to VmaAllocations that can become lost.\n- itemsToMakeLostCount is the number of VmaAllocations that need to be made lost for\n  the requested allocation to succeed.\n*/\nstruct VmaAllocationRequest\n{\n    VkDeviceSize offset;\n    VkDeviceSize size;\n    VkDeviceSize sumFreeSize; // Sum size of free items that overlap with proposed allocation.\n    VkDeviceSize sumItemSize; // Sum size of items to make lost that overlap with proposed allocation.\n    VmaSuballocationList::iterator item;\n    size_t itemsToMakeLostCount;\n    void* customData;\n    VmaAllocationRequestType type;\n\n    VkDeviceSize CalcCost() const\n    {\n        return sumItemSize + itemsToMakeLostCount * VMA_LOST_ALLOCATION_COST;\n    }\n};\n\n/*\nData structure used for bookkeeping of allocations and unused ranges of memory\nin a single VkDeviceMemory block.\n*/\nclass VmaBlockMetadata\n{\npublic:\n    // pAllocationCallbacks, if not null, must be owned externally - alive and unchanged for the whole lifetime of this object.\n    VmaBlockMetadata(const VkAllocationCallbacks* pAllocationCallbacks, bool isVirtual);\n    virtual ~VmaBlockMetadata() { }\n    virtual void Init(VkDeviceSize size) { m_Size = size; }\n\n    // Validates all data structures inside this object. If not valid, returns false.\n    virtual bool Validate() const = 0;\n    bool IsVirtual() const { return m_IsVirtual; }\n    VkDeviceSize GetSize() const { return m_Size; }\n    virtual size_t GetAllocationCount() const = 0;\n    virtual VkDeviceSize GetSumFreeSize() const = 0;\n    virtual VkDeviceSize GetUnusedRangeSizeMax() const = 0;\n    // Returns true if this block is empty - contains only single free suballocation.\n    virtual bool IsEmpty() const = 0;\n    virtual void GetAllocationInfo(VkDeviceSize offset, VmaVirtualAllocationInfo& outInfo) = 0;\n\n    // Must set blockCount to 1.\n    virtual void CalcAllocationStatInfo(VmaStatInfo& outInfo) const = 0;\n    // Shouldn't modify blockCount.\n    virtual void AddPoolStats(VmaPoolStats& inoutStats) const = 0;\n\n#if VMA_STATS_STRING_ENABLED\n    virtual void PrintDetailedMap(class VmaJsonWriter& json) const = 0;\n#endif\n\n    // Tries to find a place for suballocation with given parameters inside this block.\n    // If succeeded, fills pAllocationRequest and returns true.\n    // If failed, returns false.\n    virtual bool CreateAllocationRequest(\n        uint32_t currentFrameIndex,\n        uint32_t frameInUseCount,\n        VkDeviceSize bufferImageGranularity,\n        VkDeviceSize allocSize,\n        VkDeviceSize allocAlignment,\n        bool upperAddress,\n        VmaSuballocationType allocType,\n        bool canMakeOtherLost,\n        // Always one of VMA_ALLOCATION_CREATE_STRATEGY_* or VMA_ALLOCATION_INTERNAL_STRATEGY_* flags.\n        uint32_t strategy,\n        VmaAllocationRequest* pAllocationRequest) = 0;\n\n    virtual bool MakeRequestedAllocationsLost(\n        uint32_t currentFrameIndex,\n        uint32_t frameInUseCount,\n        VmaAllocationRequest* pAllocationRequest) = 0;\n\n    virtual uint32_t MakeAllocationsLost(uint32_t currentFrameIndex, uint32_t frameInUseCount) = 0;\n\n    virtual VkResult CheckCorruption(const void* pBlockData) = 0;\n\n    // Makes actual allocation based on request. Request must already be checked and valid.\n    virtual void Alloc(\n        const VmaAllocationRequest& request,\n        VmaSuballocationType type,\n        void* userData) = 0;\n\n    // Frees suballocation assigned to given memory region.\n    virtual void FreeAtOffset(VkDeviceSize offset) = 0;\n\n    // Frees all allocations.\n    // Careful! Don't call it if there are VmaAllocation objects owned by userData of cleared allocations!\n    virtual void Clear() = 0;\n\n    virtual void SetAllocationUserData(VkDeviceSize offset, void* userData) = 0;\n\nprotected:\n    const VkAllocationCallbacks* GetAllocationCallbacks() const { return m_pAllocationCallbacks; }\n    VkDeviceSize GetDebugMargin() const\n    {\n        return IsVirtual() ? 0 : VMA_DEBUG_MARGIN;\n    }\n\n#if VMA_STATS_STRING_ENABLED\n    void PrintDetailedMap_Begin(class VmaJsonWriter& json,\n        VkDeviceSize unusedBytes,\n        size_t allocationCount,\n        size_t unusedRangeCount) const;\n    void PrintDetailedMap_Allocation(class VmaJsonWriter& json,\n        VkDeviceSize offset, VkDeviceSize size, void* userData) const;\n    void PrintDetailedMap_UnusedRange(class VmaJsonWriter& json,\n        VkDeviceSize offset,\n        VkDeviceSize size) const;\n    void PrintDetailedMap_End(class VmaJsonWriter& json) const;\n#endif\n\nprivate:\n    VkDeviceSize m_Size;\n    const VkAllocationCallbacks* m_pAllocationCallbacks;\n    const bool m_IsVirtual;\n};\n\n#define VMA_VALIDATE(cond) do { if(!(cond)) { \\\n        VMA_ASSERT(0 && \"Validation failed: \" #cond); \\\n        return false; \\\n    } } while(false)\n\nclass VmaBlockMetadata_Generic : public VmaBlockMetadata\n{\n    VMA_CLASS_NO_COPY(VmaBlockMetadata_Generic)\npublic:\n    VmaBlockMetadata_Generic(const VkAllocationCallbacks* pAllocationCallbacks, bool isVirtual);\n    virtual ~VmaBlockMetadata_Generic();\n    virtual void Init(VkDeviceSize size);\n\n    virtual bool Validate() const;\n    virtual size_t GetAllocationCount() const { return m_Suballocations.size() - m_FreeCount; }\n    virtual VkDeviceSize GetSumFreeSize() const { return m_SumFreeSize; }\n    virtual VkDeviceSize GetUnusedRangeSizeMax() const;\n    virtual bool IsEmpty() const;\n\n    virtual void CalcAllocationStatInfo(VmaStatInfo& outInfo) const;\n    virtual void AddPoolStats(VmaPoolStats& inoutStats) const;\n\n#if VMA_STATS_STRING_ENABLED\n    virtual void PrintDetailedMap(class VmaJsonWriter& json) const;\n#endif\n\n    virtual bool CreateAllocationRequest(\n        uint32_t currentFrameIndex,\n        uint32_t frameInUseCount,\n        VkDeviceSize bufferImageGranularity,\n        VkDeviceSize allocSize,\n        VkDeviceSize allocAlignment,\n        bool upperAddress,\n        VmaSuballocationType allocType,\n        bool canMakeOtherLost,\n        uint32_t strategy,\n        VmaAllocationRequest* pAllocationRequest);\n\n    virtual bool MakeRequestedAllocationsLost(\n        uint32_t currentFrameIndex,\n        uint32_t frameInUseCount,\n        VmaAllocationRequest* pAllocationRequest);\n\n    virtual uint32_t MakeAllocationsLost(uint32_t currentFrameIndex, uint32_t frameInUseCount);\n\n    virtual VkResult CheckCorruption(const void* pBlockData);\n\n    virtual void Alloc(\n        const VmaAllocationRequest& request,\n        VmaSuballocationType type,\n        void* userData);\n\n    virtual void FreeAtOffset(VkDeviceSize offset);\n    virtual void GetAllocationInfo(VkDeviceSize offset, VmaVirtualAllocationInfo& outInfo);\n    virtual void Clear();\n    virtual void SetAllocationUserData(VkDeviceSize offset, void* userData);\n\n    ////////////////////////////////////////////////////////////////////////////////\n    // For defragmentation\n\n    bool IsBufferImageGranularityConflictPossible(\n        VkDeviceSize bufferImageGranularity,\n        VmaSuballocationType& inOutPrevSuballocType) const;\n\nprivate:\n    friend class VmaDefragmentationAlgorithm_Generic;\n    friend class VmaDefragmentationAlgorithm_Fast;\n\n    uint32_t m_FreeCount;\n    VkDeviceSize m_SumFreeSize;\n    VmaSuballocationList m_Suballocations;\n    // Suballocations that are free. Sorted by size, ascending.\n    VmaVector< VmaSuballocationList::iterator, VmaStlAllocator< VmaSuballocationList::iterator > > m_FreeSuballocationsBySize;\n\n    VkDeviceSize AlignAllocationSize(VkDeviceSize size) const\n    {\n        return IsVirtual() ? size : VmaAlignUp(size, (VkDeviceSize)16);\n    }\n\n    bool ValidateFreeSuballocationList() const;\n\n    // Checks if requested suballocation with given parameters can be placed in given pFreeSuballocItem.\n    // If yes, fills pOffset and returns true. If no, returns false.\n    bool CheckAllocation(\n        uint32_t currentFrameIndex,\n        uint32_t frameInUseCount,\n        VkDeviceSize bufferImageGranularity,\n        VkDeviceSize allocSize,\n        VkDeviceSize allocAlignment,\n        VmaSuballocationType allocType,\n        VmaSuballocationList::const_iterator suballocItem,\n        bool canMakeOtherLost,\n        VkDeviceSize* pOffset,\n        size_t* itemsToMakeLostCount,\n        VkDeviceSize* pSumFreeSize,\n        VkDeviceSize* pSumItemSize) const;\n    // Given free suballocation, it merges it with following one, which must also be free.\n    void MergeFreeWithNext(VmaSuballocationList::iterator item);\n    // Releases given suballocation, making it free.\n    // Merges it with adjacent free suballocations if applicable.\n    // Returns iterator to new free suballocation at this place.\n    VmaSuballocationList::iterator FreeSuballocation(VmaSuballocationList::iterator suballocItem);\n    // Given free suballocation, it inserts it into sorted list of\n    // m_FreeSuballocationsBySize if it is suitable.\n    void RegisterFreeSuballocation(VmaSuballocationList::iterator item);\n    // Given free suballocation, it removes it from sorted list of\n    // m_FreeSuballocationsBySize if it is suitable.\n    void UnregisterFreeSuballocation(VmaSuballocationList::iterator item);\n};\n\n/*\nAllocations and their references in internal data structure look like this:\n\nif(m_2ndVectorMode == SECOND_VECTOR_EMPTY):\n\n        0 +-------+\n          |       |\n          |       |\n          |       |\n          +-------+\n          | Alloc |  1st[m_1stNullItemsBeginCount]\n          +-------+\n          | Alloc |  1st[m_1stNullItemsBeginCount + 1]\n          +-------+\n          |  ...  |\n          +-------+\n          | Alloc |  1st[1st.size() - 1]\n          +-------+\n          |       |\n          |       |\n          |       |\nGetSize() +-------+\n\nif(m_2ndVectorMode == SECOND_VECTOR_RING_BUFFER):\n\n        0 +-------+\n          | Alloc |  2nd[0]\n          +-------+\n          | Alloc |  2nd[1]\n          +-------+\n          |  ...  |\n          +-------+\n          | Alloc |  2nd[2nd.size() - 1]\n          +-------+\n          |       |\n          |       |\n          |       |\n          +-------+\n          | Alloc |  1st[m_1stNullItemsBeginCount]\n          +-------+\n          | Alloc |  1st[m_1stNullItemsBeginCount + 1]\n          +-------+\n          |  ...  |\n          +-------+\n          | Alloc |  1st[1st.size() - 1]\n          +-------+\n          |       |\nGetSize() +-------+\n\nif(m_2ndVectorMode == SECOND_VECTOR_DOUBLE_STACK):\n\n        0 +-------+\n          |       |\n          |       |\n          |       |\n          +-------+\n          | Alloc |  1st[m_1stNullItemsBeginCount]\n          +-------+\n          | Alloc |  1st[m_1stNullItemsBeginCount + 1]\n          +-------+\n          |  ...  |\n          +-------+\n          | Alloc |  1st[1st.size() - 1]\n          +-------+\n          |       |\n          |       |\n          |       |\n          +-------+\n          | Alloc |  2nd[2nd.size() - 1]\n          +-------+\n          |  ...  |\n          +-------+\n          | Alloc |  2nd[1]\n          +-------+\n          | Alloc |  2nd[0]\nGetSize() +-------+\n\n*/\nclass VmaBlockMetadata_Linear : public VmaBlockMetadata\n{\n    VMA_CLASS_NO_COPY(VmaBlockMetadata_Linear)\npublic:\n    VmaBlockMetadata_Linear(const VkAllocationCallbacks* pAllocationCallbacks, bool isVirtual);\n    virtual ~VmaBlockMetadata_Linear();\n    virtual void Init(VkDeviceSize size);\n\n    virtual bool Validate() const;\n    virtual size_t GetAllocationCount() const;\n    virtual VkDeviceSize GetSumFreeSize() const { return m_SumFreeSize; }\n    virtual VkDeviceSize GetUnusedRangeSizeMax() const;\n    virtual bool IsEmpty() const { return GetAllocationCount() == 0; }\n\n    virtual void CalcAllocationStatInfo(VmaStatInfo& outInfo) const;\n    virtual void AddPoolStats(VmaPoolStats& inoutStats) const;\n\n#if VMA_STATS_STRING_ENABLED\n    virtual void PrintDetailedMap(class VmaJsonWriter& json) const;\n#endif\n\n    virtual bool CreateAllocationRequest(\n        uint32_t currentFrameIndex,\n        uint32_t frameInUseCount,\n        VkDeviceSize bufferImageGranularity,\n        VkDeviceSize allocSize,\n        VkDeviceSize allocAlignment,\n        bool upperAddress,\n        VmaSuballocationType allocType,\n        bool canMakeOtherLost,\n        uint32_t strategy,\n        VmaAllocationRequest* pAllocationRequest);\n\n    virtual bool MakeRequestedAllocationsLost(\n        uint32_t currentFrameIndex,\n        uint32_t frameInUseCount,\n        VmaAllocationRequest* pAllocationRequest);\n\n    virtual uint32_t MakeAllocationsLost(uint32_t currentFrameIndex, uint32_t frameInUseCount);\n\n    virtual VkResult CheckCorruption(const void* pBlockData);\n\n    virtual void Alloc(\n        const VmaAllocationRequest& request,\n        VmaSuballocationType type,\n        void* userData);\n\n    virtual void FreeAtOffset(VkDeviceSize offset);\n    virtual void GetAllocationInfo(VkDeviceSize offset, VmaVirtualAllocationInfo& outInfo);\n    virtual void Clear();\n    virtual void SetAllocationUserData(VkDeviceSize offset, void* userData);\n\nprivate:\n    /*\n    There are two suballocation vectors, used in ping-pong way.\n    The one with index m_1stVectorIndex is called 1st.\n    The one with index (m_1stVectorIndex ^ 1) is called 2nd.\n    2nd can be non-empty only when 1st is not empty.\n    When 2nd is not empty, m_2ndVectorMode indicates its mode of operation.\n    */\n    typedef VmaVector< VmaSuballocation, VmaStlAllocator<VmaSuballocation> > SuballocationVectorType;\n\n    enum SECOND_VECTOR_MODE\n    {\n        SECOND_VECTOR_EMPTY,\n        /*\n        Suballocations in 2nd vector are created later than the ones in 1st, but they\n        all have smaller offset.\n        */\n        SECOND_VECTOR_RING_BUFFER,\n        /*\n        Suballocations in 2nd vector are upper side of double stack.\n        They all have offsets higher than those in 1st vector.\n        Top of this stack means smaller offsets, but higher indices in this vector.\n        */\n        SECOND_VECTOR_DOUBLE_STACK,\n    };\n\n    VkDeviceSize m_SumFreeSize;\n    SuballocationVectorType m_Suballocations0, m_Suballocations1;\n    uint32_t m_1stVectorIndex;\n    SECOND_VECTOR_MODE m_2ndVectorMode;\n\n    SuballocationVectorType& AccessSuballocations1st() { return m_1stVectorIndex ? m_Suballocations1 : m_Suballocations0; }\n    SuballocationVectorType& AccessSuballocations2nd() { return m_1stVectorIndex ? m_Suballocations0 : m_Suballocations1; }\n    const SuballocationVectorType& AccessSuballocations1st() const { return m_1stVectorIndex ? m_Suballocations1 : m_Suballocations0; }\n    const SuballocationVectorType& AccessSuballocations2nd() const { return m_1stVectorIndex ? m_Suballocations0 : m_Suballocations1; }\n    VmaSuballocation& FindSuballocation(VkDeviceSize offset);\n\n    // Number of items in 1st vector with hAllocation = null at the beginning.\n    size_t m_1stNullItemsBeginCount;\n    // Number of other items in 1st vector with hAllocation = null somewhere in the middle.\n    size_t m_1stNullItemsMiddleCount;\n    // Number of items in 2nd vector with hAllocation = null.\n    size_t m_2ndNullItemsCount;\n\n    bool ShouldCompact1st() const;\n    void CleanupAfterFree();\n\n    bool CreateAllocationRequest_LowerAddress(\n        uint32_t currentFrameIndex,\n        uint32_t frameInUseCount,\n        VkDeviceSize bufferImageGranularity,\n        VkDeviceSize allocSize,\n        VkDeviceSize allocAlignment,\n        VmaSuballocationType allocType,\n        bool canMakeOtherLost,\n        uint32_t strategy,\n        VmaAllocationRequest* pAllocationRequest);\n    bool CreateAllocationRequest_UpperAddress(\n        uint32_t currentFrameIndex,\n        uint32_t frameInUseCount,\n        VkDeviceSize bufferImageGranularity,\n        VkDeviceSize allocSize,\n        VkDeviceSize allocAlignment,\n        VmaSuballocationType allocType,\n        bool canMakeOtherLost,\n        uint32_t strategy,\n        VmaAllocationRequest* pAllocationRequest);\n};\n\n/*\n- GetSize() is the original size of allocated memory block.\n- m_UsableSize is this size aligned down to a power of two.\n  All allocations and calculations happen relative to m_UsableSize.\n- GetUnusableSize() is the difference between them.\n  It is reported as separate, unused range, not available for allocations.\n\nNode at level 0 has size = m_UsableSize.\nEach next level contains nodes with size 2 times smaller than current level.\nm_LevelCount is the maximum number of levels to use in the current object.\n*/\nclass VmaBlockMetadata_Buddy : public VmaBlockMetadata\n{\n    VMA_CLASS_NO_COPY(VmaBlockMetadata_Buddy)\npublic:\n    VmaBlockMetadata_Buddy(const VkAllocationCallbacks* pAllocationCallbacks, bool isVirtual);\n    virtual ~VmaBlockMetadata_Buddy();\n    virtual void Init(VkDeviceSize size);\n\n    virtual bool Validate() const;\n    virtual size_t GetAllocationCount() const { return m_AllocationCount; }\n    virtual VkDeviceSize GetSumFreeSize() const { return m_SumFreeSize + GetUnusableSize(); }\n    virtual VkDeviceSize GetUnusedRangeSizeMax() const;\n    virtual bool IsEmpty() const { return m_Root->type == Node::TYPE_FREE; }\n\n    virtual void CalcAllocationStatInfo(VmaStatInfo& outInfo) const;\n    virtual void AddPoolStats(VmaPoolStats& inoutStats) const;\n\n#if VMA_STATS_STRING_ENABLED\n    virtual void PrintDetailedMap(class VmaJsonWriter& json) const;\n#endif\n\n    virtual bool CreateAllocationRequest(\n        uint32_t currentFrameIndex,\n        uint32_t frameInUseCount,\n        VkDeviceSize bufferImageGranularity,\n        VkDeviceSize allocSize,\n        VkDeviceSize allocAlignment,\n        bool upperAddress,\n        VmaSuballocationType allocType,\n        bool canMakeOtherLost,\n        uint32_t strategy,\n        VmaAllocationRequest* pAllocationRequest);\n\n    virtual bool MakeRequestedAllocationsLost(\n        uint32_t currentFrameIndex,\n        uint32_t frameInUseCount,\n        VmaAllocationRequest* pAllocationRequest);\n\n    virtual uint32_t MakeAllocationsLost(uint32_t currentFrameIndex, uint32_t frameInUseCount);\n\n    virtual VkResult CheckCorruption(const void* pBlockData) { return VK_ERROR_FEATURE_NOT_PRESENT; }\n\n    virtual void Alloc(\n        const VmaAllocationRequest& request,\n        VmaSuballocationType type,\n        void* userData);\n\n    virtual void FreeAtOffset(VkDeviceSize offset);\n    virtual void GetAllocationInfo(VkDeviceSize offset, VmaVirtualAllocationInfo& outInfo);\n    virtual void Clear();\n    virtual void SetAllocationUserData(VkDeviceSize offset, void* userData);\n\nprivate:\n    static const size_t MAX_LEVELS = 48;\n    \n    struct ValidationContext\n    {\n        size_t calculatedAllocationCount = 0;\n        size_t calculatedFreeCount = 0;\n        VkDeviceSize calculatedSumFreeSize = 0;\n    };\n\n    struct Node\n    {\n        VkDeviceSize offset;\n        enum TYPE\n        {\n            TYPE_FREE,\n            TYPE_ALLOCATION,\n            TYPE_SPLIT,\n            TYPE_COUNT\n        } type;\n        Node* parent;\n        Node* buddy;\n\n        union\n        {\n            struct\n            {\n                Node* prev;\n                Node* next;\n            } free;\n            struct\n            {\n                void* userData;\n            } allocation;\n            struct\n            {\n                Node* leftChild;\n            } split;\n        };\n    };\n\n    // Size of the memory block aligned down to a power of two.\n    VkDeviceSize m_UsableSize;\n    uint32_t m_LevelCount;\n\n    VmaPoolAllocator<Node> m_NodeAllocator;\n\n    Node* m_Root;\n    struct {\n        Node* front;\n        Node* back;\n    } m_FreeList[MAX_LEVELS];\n    // Number of nodes in the tree with type == TYPE_ALLOCATION.\n    size_t m_AllocationCount;\n    // Number of nodes in the tree with type == TYPE_FREE.\n    size_t m_FreeCount;\n    // Doesn't include space wasted due to internal fragmentation - allocation sizes are just aligned up to node sizes.\n    // Doesn't include unusable size.\n    VkDeviceSize m_SumFreeSize;\n\n    VkDeviceSize AlignAllocationSize(VkDeviceSize size) const\n    {\n        if(!IsVirtual())\n        {\n            size = VmaAlignUp(size, (VkDeviceSize)16);\n        }\n        return VmaNextPow2(size);\n    }\n    VkDeviceSize GetUnusableSize() const { return GetSize() - m_UsableSize; }\n    Node* FindAllocationNode(VkDeviceSize offset, uint32_t& outLevel);\n    void DeleteNodeChildren(Node* node);\n    bool ValidateNode(ValidationContext& ctx, const Node* parent, const Node* curr, uint32_t level, VkDeviceSize levelNodeSize) const;\n    uint32_t AllocSizeToLevel(VkDeviceSize allocSize) const;\n    inline VkDeviceSize LevelToNodeSize(uint32_t level) const { return m_UsableSize >> level; }\n    void CalcAllocationStatInfoNode(VmaStatInfo& inoutInfo, const Node* node, VkDeviceSize levelNodeSize) const;\n    // Adds node to the front of FreeList at given level.\n    // node->type must be FREE.\n    // node->free.prev, next can be undefined.\n    void AddToFreeListFront(uint32_t level, Node* node);\n    // Removes node from FreeList at given level.\n    // node->type must be FREE.\n    // node->free.prev, next stay untouched.\n    void RemoveFromFreeList(uint32_t level, Node* node);\n\n#if VMA_STATS_STRING_ENABLED\n    void PrintDetailedMapNode(class VmaJsonWriter& json, const Node* node, VkDeviceSize levelNodeSize) const;\n#endif\n};\n\n/*\nRepresents a single block of device memory (`VkDeviceMemory`) with all the\ndata about its regions (aka suballocations, #VmaAllocation), assigned and free.\n\nThread-safety: This class must be externally synchronized.\n*/\nclass VmaDeviceMemoryBlock\n{\n    VMA_CLASS_NO_COPY(VmaDeviceMemoryBlock)\npublic:\n    VmaBlockMetadata* m_pMetadata;\n\n    VmaDeviceMemoryBlock(VmaAllocator hAllocator);\n\n    ~VmaDeviceMemoryBlock()\n    {\n        VMA_ASSERT(m_MapCount == 0 && \"VkDeviceMemory block is being destroyed while it is still mapped.\");\n        VMA_ASSERT(m_hMemory == VK_NULL_HANDLE);\n    }\n\n    // Always call after construction.\n    void Init(\n        VmaAllocator hAllocator,\n        VmaPool hParentPool,\n        uint32_t newMemoryTypeIndex,\n        VkDeviceMemory newMemory,\n        VkDeviceSize newSize,\n        uint32_t id,\n        uint32_t algorithm);\n    // Always call before destruction.\n    void Destroy(VmaAllocator allocator);\n\n    VmaPool GetParentPool() const { return m_hParentPool; }\n    VkDeviceMemory GetDeviceMemory() const { return m_hMemory; }\n    uint32_t GetMemoryTypeIndex() const { return m_MemoryTypeIndex; }\n    uint32_t GetId() const { return m_Id; }\n    void* GetMappedData() const { return m_pMappedData; }\n\n    // Validates all data structures inside this object. If not valid, returns false.\n    bool Validate() const;\n\n    VkResult CheckCorruption(VmaAllocator hAllocator);\n\n    // ppData can be null.\n    VkResult Map(VmaAllocator hAllocator, uint32_t count, void** ppData);\n    void Unmap(VmaAllocator hAllocator, uint32_t count);\n\n    VkResult WriteMagicValueAroundAllocation(VmaAllocator hAllocator, VkDeviceSize allocOffset, VkDeviceSize allocSize);\n    VkResult ValidateMagicValueAroundAllocation(VmaAllocator hAllocator, VkDeviceSize allocOffset, VkDeviceSize allocSize);\n\n    VkResult BindBufferMemory(\n        const VmaAllocator hAllocator,\n        const VmaAllocation hAllocation,\n        VkDeviceSize allocationLocalOffset,\n        VkBuffer hBuffer,\n        const void* pNext);\n    VkResult BindImageMemory(\n        const VmaAllocator hAllocator,\n        const VmaAllocation hAllocation,\n        VkDeviceSize allocationLocalOffset,\n        VkImage hImage,\n        const void* pNext);\n\nprivate:\n    VmaPool m_hParentPool; // VK_NULL_HANDLE if not belongs to custom pool.\n    uint32_t m_MemoryTypeIndex;\n    uint32_t m_Id;\n    VkDeviceMemory m_hMemory;\n\n    /*\n    Protects access to m_hMemory so it is not used by multiple threads simultaneously, e.g. vkMapMemory, vkBindBufferMemory.\n    Also protects m_MapCount, m_pMappedData.\n    Allocations, deallocations, any change in m_pMetadata is protected by parent's VmaBlockVector::m_Mutex.\n    */\n    VMA_MUTEX m_Mutex;\n    uint32_t m_MapCount;\n    void* m_pMappedData;\n};\n\nstruct VmaDefragmentationMove\n{\n    size_t srcBlockIndex;\n    size_t dstBlockIndex;\n    VkDeviceSize srcOffset;\n    VkDeviceSize dstOffset;\n    VkDeviceSize size;\n    VmaAllocation hAllocation;\n    VmaDeviceMemoryBlock* pSrcBlock;\n    VmaDeviceMemoryBlock* pDstBlock;\n};\n\nclass VmaDefragmentationAlgorithm;\n\n/*\nSequence of VmaDeviceMemoryBlock. Represents memory blocks allocated for a specific\nVulkan memory type.\n\nSynchronized internally with a mutex.\n*/\nstruct VmaBlockVector\n{\n    VMA_CLASS_NO_COPY(VmaBlockVector)\npublic:\n    VmaBlockVector(\n        VmaAllocator hAllocator,\n        VmaPool hParentPool,\n        uint32_t memoryTypeIndex,\n        VkDeviceSize preferredBlockSize,\n        size_t minBlockCount,\n        size_t maxBlockCount,\n        VkDeviceSize bufferImageGranularity,\n        uint32_t frameInUseCount,\n        bool explicitBlockSize,\n        uint32_t algorithm,\n        float priority,\n        VkDeviceSize minAllocationAlignment,\n        void* pMemoryAllocateNext);\n    ~VmaBlockVector();\n\n    VkResult CreateMinBlocks();\n\n    VmaAllocator GetAllocator() const { return m_hAllocator; }\n    VmaPool GetParentPool() const { return m_hParentPool; }\n    bool IsCustomPool() const { return m_hParentPool != VMA_NULL; }\n    uint32_t GetMemoryTypeIndex() const { return m_MemoryTypeIndex; }\n    VkDeviceSize GetPreferredBlockSize() const { return m_PreferredBlockSize; }\n    VkDeviceSize GetBufferImageGranularity() const { return m_BufferImageGranularity; }\n    uint32_t GetFrameInUseCount() const { return m_FrameInUseCount; }\n    uint32_t GetAlgorithm() const { return m_Algorithm; }\n\n    void GetPoolStats(VmaPoolStats* pStats);\n\n    bool IsEmpty();\n    bool IsCorruptionDetectionEnabled() const;\n\n    VkResult Allocate(\n        uint32_t currentFrameIndex,\n        VkDeviceSize size,\n        VkDeviceSize alignment,\n        const VmaAllocationCreateInfo& createInfo,\n        VmaSuballocationType suballocType,\n        size_t allocationCount,\n        VmaAllocation* pAllocations);\n\n    void Free(const VmaAllocation hAllocation);\n\n    // Adds statistics of this BlockVector to pStats.\n    void AddStats(VmaStats* pStats);\n\n#if VMA_STATS_STRING_ENABLED\n    void PrintDetailedMap(class VmaJsonWriter& json);\n#endif\n\n    void MakePoolAllocationsLost(\n        uint32_t currentFrameIndex,\n        size_t* pLostAllocationCount);\n    VkResult CheckCorruption();\n\n    // Saves results in pCtx->res.\n    void Defragment(\n        class VmaBlockVectorDefragmentationContext* pCtx,\n        VmaDefragmentationStats* pStats, VmaDefragmentationFlags flags,\n        VkDeviceSize& maxCpuBytesToMove, uint32_t& maxCpuAllocationsToMove,\n        VkDeviceSize& maxGpuBytesToMove, uint32_t& maxGpuAllocationsToMove,\n        VkCommandBuffer commandBuffer);\n    void DefragmentationEnd(\n        class VmaBlockVectorDefragmentationContext* pCtx,\n        uint32_t flags,\n        VmaDefragmentationStats* pStats);\n\n    uint32_t ProcessDefragmentations(\n        class VmaBlockVectorDefragmentationContext *pCtx,\n        VmaDefragmentationPassMoveInfo* pMove, uint32_t maxMoves);\n\n    void CommitDefragmentations(\n        class VmaBlockVectorDefragmentationContext *pCtx,\n        VmaDefragmentationStats* pStats);\n\n    ////////////////////////////////////////////////////////////////////////////////\n    // To be used only while the m_Mutex is locked. Used during defragmentation.\n\n    size_t GetBlockCount() const { return m_Blocks.size(); }\n    VmaDeviceMemoryBlock* GetBlock(size_t index) const { return m_Blocks[index]; }\n    size_t CalcAllocationCount() const;\n    bool IsBufferImageGranularityConflictPossible() const;\n\nprivate:\n    friend class VmaDefragmentationAlgorithm_Generic;\n\n    const VmaAllocator m_hAllocator;\n    const VmaPool m_hParentPool;\n    const uint32_t m_MemoryTypeIndex;\n    const VkDeviceSize m_PreferredBlockSize;\n    const size_t m_MinBlockCount;\n    const size_t m_MaxBlockCount;\n    const VkDeviceSize m_BufferImageGranularity;\n    const uint32_t m_FrameInUseCount;\n    const bool m_ExplicitBlockSize;\n    const uint32_t m_Algorithm;\n    const float m_Priority;\n    const VkDeviceSize m_MinAllocationAlignment;\n    void* const m_pMemoryAllocateNext;\n    VMA_RW_MUTEX m_Mutex;\n\n    /* There can be at most one allocation that is completely empty (except when minBlockCount > 0) -\n    a hysteresis to avoid pessimistic case of alternating creation and destruction of a VkDeviceMemory. */\n    bool m_HasEmptyBlock;\n    // Incrementally sorted by sumFreeSize, ascending.\n    VmaVector< VmaDeviceMemoryBlock*, VmaStlAllocator<VmaDeviceMemoryBlock*> > m_Blocks;\n    uint32_t m_NextBlockId;\n\n    VkDeviceSize CalcMaxBlockSize() const;\n\n    // Finds and removes given block from vector.\n    void Remove(VmaDeviceMemoryBlock* pBlock);\n\n    // Performs single step in sorting m_Blocks. They may not be fully sorted\n    // after this call.\n    void IncrementallySortBlocks();\n\n    VkResult AllocatePage(\n        uint32_t currentFrameIndex,\n        VkDeviceSize size,\n        VkDeviceSize alignment,\n        const VmaAllocationCreateInfo& createInfo,\n        VmaSuballocationType suballocType,\n        VmaAllocation* pAllocation);\n\n    // To be used only without CAN_MAKE_OTHER_LOST flag.\n    VkResult AllocateFromBlock(\n        VmaDeviceMemoryBlock* pBlock,\n        uint32_t currentFrameIndex,\n        VkDeviceSize size,\n        VkDeviceSize alignment,\n        VmaAllocationCreateFlags allocFlags,\n        void* pUserData,\n        VmaSuballocationType suballocType,\n        uint32_t strategy,\n        VmaAllocation* pAllocation);\n\n    VkResult CreateBlock(VkDeviceSize blockSize, size_t* pNewBlockIndex);\n\n    // Saves result to pCtx->res.\n    void ApplyDefragmentationMovesCpu(\n        class VmaBlockVectorDefragmentationContext* pDefragCtx,\n        const VmaVector< VmaDefragmentationMove, VmaStlAllocator<VmaDefragmentationMove> >& moves);\n    // Saves result to pCtx->res.\n    void ApplyDefragmentationMovesGpu(\n        class VmaBlockVectorDefragmentationContext* pDefragCtx,\n        VmaVector< VmaDefragmentationMove, VmaStlAllocator<VmaDefragmentationMove> >& moves,\n        VkCommandBuffer commandBuffer);\n\n    /*\n    Used during defragmentation. pDefragmentationStats is optional. It is in/out\n    - updated with new data.\n    */\n    void FreeEmptyBlocks(VmaDefragmentationStats* pDefragmentationStats);\n\n    void UpdateHasEmptyBlock();\n};\n\nstruct VmaPool_T\n{\n    VMA_CLASS_NO_COPY(VmaPool_T)\npublic:\n    VmaBlockVector m_BlockVector;\n\n    VmaPool_T(\n        VmaAllocator hAllocator,\n        const VmaPoolCreateInfo& createInfo,\n        VkDeviceSize preferredBlockSize);\n    ~VmaPool_T();\n\n    uint32_t GetId() const { return m_Id; }\n    void SetId(uint32_t id) { VMA_ASSERT(m_Id == 0); m_Id = id; }\n\n    const char* GetName() const { return m_Name; }\n    void SetName(const char* pName);\n\n#if VMA_STATS_STRING_ENABLED\n    //void PrintDetailedMap(class VmaStringBuilder& sb);\n#endif\n\nprivate:\n    uint32_t m_Id;\n    char* m_Name;\n    VmaPool_T* m_PrevPool = VMA_NULL;\n    VmaPool_T* m_NextPool = VMA_NULL;\n    friend struct VmaPoolListItemTraits;\n};\n\nstruct VmaPoolListItemTraits\n{\n    typedef VmaPool_T ItemType;\n    static ItemType* GetPrev(const ItemType* item) { return item->m_PrevPool; }\n    static ItemType* GetNext(const ItemType* item) { return item->m_NextPool; }\n    static ItemType*& AccessPrev(ItemType* item) { return item->m_PrevPool; }\n    static ItemType*& AccessNext(ItemType* item) { return item->m_NextPool; }\n};\n\n/*\nPerforms defragmentation:\n\n- Updates `pBlockVector->m_pMetadata`.\n- Updates allocations by calling ChangeBlockAllocation() or ChangeOffset().\n- Does not move actual data, only returns requested moves as `moves`.\n*/\nclass VmaDefragmentationAlgorithm\n{\n    VMA_CLASS_NO_COPY(VmaDefragmentationAlgorithm)\npublic:\n    VmaDefragmentationAlgorithm(\n        VmaAllocator hAllocator,\n        VmaBlockVector* pBlockVector,\n        uint32_t currentFrameIndex) :\n        m_hAllocator(hAllocator),\n        m_pBlockVector(pBlockVector),\n        m_CurrentFrameIndex(currentFrameIndex)\n    {\n    }\n    virtual ~VmaDefragmentationAlgorithm()\n    {\n    }\n\n    virtual void AddAllocation(VmaAllocation hAlloc, VkBool32* pChanged) = 0;\n    virtual void AddAll() = 0;\n\n    virtual VkResult Defragment(\n        VmaVector< VmaDefragmentationMove, VmaStlAllocator<VmaDefragmentationMove> >& moves,\n        VkDeviceSize maxBytesToMove,\n        uint32_t maxAllocationsToMove,\n        VmaDefragmentationFlags flags) = 0;\n\n    virtual VkDeviceSize GetBytesMoved() const = 0;\n    virtual uint32_t GetAllocationsMoved() const = 0;\n\nprotected:\n    VmaAllocator const m_hAllocator;\n    VmaBlockVector* const m_pBlockVector;\n    const uint32_t m_CurrentFrameIndex;\n\n    struct AllocationInfo\n    {\n        VmaAllocation m_hAllocation;\n        VkBool32* m_pChanged;\n\n        AllocationInfo() :\n            m_hAllocation(VK_NULL_HANDLE),\n            m_pChanged(VMA_NULL)\n        {\n        }\n        AllocationInfo(VmaAllocation hAlloc, VkBool32* pChanged) :\n            m_hAllocation(hAlloc),\n            m_pChanged(pChanged)\n        {\n        }\n    };\n};\n\nclass VmaDefragmentationAlgorithm_Generic : public VmaDefragmentationAlgorithm\n{\n    VMA_CLASS_NO_COPY(VmaDefragmentationAlgorithm_Generic)\npublic:\n    VmaDefragmentationAlgorithm_Generic(\n        VmaAllocator hAllocator,\n        VmaBlockVector* pBlockVector,\n        uint32_t currentFrameIndex,\n        bool overlappingMoveSupported);\n    virtual ~VmaDefragmentationAlgorithm_Generic();\n\n    virtual void AddAllocation(VmaAllocation hAlloc, VkBool32* pChanged);\n    virtual void AddAll() { m_AllAllocations = true; }\n\n    virtual VkResult Defragment(\n        VmaVector< VmaDefragmentationMove, VmaStlAllocator<VmaDefragmentationMove> >& moves,\n        VkDeviceSize maxBytesToMove,\n        uint32_t maxAllocationsToMove,\n        VmaDefragmentationFlags flags);\n\n    virtual VkDeviceSize GetBytesMoved() const { return m_BytesMoved; }\n    virtual uint32_t GetAllocationsMoved() const { return m_AllocationsMoved; }\n\nprivate:\n    uint32_t m_AllocationCount;\n    bool m_AllAllocations;\n\n    VkDeviceSize m_BytesMoved;\n    uint32_t m_AllocationsMoved;\n\n    struct AllocationInfoSizeGreater\n    {\n        bool operator()(const AllocationInfo& lhs, const AllocationInfo& rhs) const\n        {\n            return lhs.m_hAllocation->GetSize() > rhs.m_hAllocation->GetSize();\n        }\n    };\n\n    struct AllocationInfoOffsetGreater\n    {\n        bool operator()(const AllocationInfo& lhs, const AllocationInfo& rhs) const\n        {\n            return lhs.m_hAllocation->GetOffset() > rhs.m_hAllocation->GetOffset();\n        }\n    };\n\n    struct BlockInfo\n    {\n        size_t m_OriginalBlockIndex;\n        VmaDeviceMemoryBlock* m_pBlock;\n        bool m_HasNonMovableAllocations;\n        VmaVector< AllocationInfo, VmaStlAllocator<AllocationInfo> > m_Allocations;\n\n        BlockInfo(const VkAllocationCallbacks* pAllocationCallbacks) :\n            m_OriginalBlockIndex(SIZE_MAX),\n            m_pBlock(VMA_NULL),\n            m_HasNonMovableAllocations(true),\n            m_Allocations(pAllocationCallbacks)\n        {\n        }\n\n        void CalcHasNonMovableAllocations()\n        {\n            const size_t blockAllocCount = m_pBlock->m_pMetadata->GetAllocationCount();\n            const size_t defragmentAllocCount = m_Allocations.size();\n            m_HasNonMovableAllocations = blockAllocCount != defragmentAllocCount;\n        }\n\n        void SortAllocationsBySizeDescending()\n        {\n            VMA_SORT(m_Allocations.begin(), m_Allocations.end(), AllocationInfoSizeGreater());\n        }\n\n        void SortAllocationsByOffsetDescending()\n        {\n            VMA_SORT(m_Allocations.begin(), m_Allocations.end(), AllocationInfoOffsetGreater());\n        }\n    };\n\n    struct BlockPointerLess\n    {\n        bool operator()(const BlockInfo* pLhsBlockInfo, const VmaDeviceMemoryBlock* pRhsBlock) const\n        {\n            return pLhsBlockInfo->m_pBlock < pRhsBlock;\n        }\n        bool operator()(const BlockInfo* pLhsBlockInfo, const BlockInfo* pRhsBlockInfo) const\n        {\n            return pLhsBlockInfo->m_pBlock < pRhsBlockInfo->m_pBlock;\n        }\n    };\n\n    // 1. Blocks with some non-movable allocations go first.\n    // 2. Blocks with smaller sumFreeSize go first.\n    struct BlockInfoCompareMoveDestination\n    {\n        bool operator()(const BlockInfo* pLhsBlockInfo, const BlockInfo* pRhsBlockInfo) const\n        {\n            if(pLhsBlockInfo->m_HasNonMovableAllocations && !pRhsBlockInfo->m_HasNonMovableAllocations)\n            {\n                return true;\n            }\n            if(!pLhsBlockInfo->m_HasNonMovableAllocations && pRhsBlockInfo->m_HasNonMovableAllocations)\n            {\n                return false;\n            }\n            if(pLhsBlockInfo->m_pBlock->m_pMetadata->GetSumFreeSize() < pRhsBlockInfo->m_pBlock->m_pMetadata->GetSumFreeSize())\n            {\n                return true;\n            }\n            return false;\n        }\n    };\n\n    typedef VmaVector< BlockInfo*, VmaStlAllocator<BlockInfo*> > BlockInfoVector;\n    BlockInfoVector m_Blocks;\n\n    VkResult DefragmentRound(\n        VmaVector< VmaDefragmentationMove, VmaStlAllocator<VmaDefragmentationMove> >& moves,\n        VkDeviceSize maxBytesToMove,\n        uint32_t maxAllocationsToMove,\n        bool freeOldAllocations);\n\n    size_t CalcBlocksWithNonMovableCount() const;\n\n    static bool MoveMakesSense(\n        size_t dstBlockIndex, VkDeviceSize dstOffset,\n        size_t srcBlockIndex, VkDeviceSize srcOffset);\n};\n\nclass VmaDefragmentationAlgorithm_Fast : public VmaDefragmentationAlgorithm\n{\n    VMA_CLASS_NO_COPY(VmaDefragmentationAlgorithm_Fast)\npublic:\n    VmaDefragmentationAlgorithm_Fast(\n        VmaAllocator hAllocator,\n        VmaBlockVector* pBlockVector,\n        uint32_t currentFrameIndex,\n        bool overlappingMoveSupported);\n    virtual ~VmaDefragmentationAlgorithm_Fast();\n\n    virtual void AddAllocation(VmaAllocation hAlloc, VkBool32* pChanged) { ++m_AllocationCount; }\n    virtual void AddAll() { m_AllAllocations = true; }\n\n    virtual VkResult Defragment(\n        VmaVector< VmaDefragmentationMove, VmaStlAllocator<VmaDefragmentationMove> >& moves,\n        VkDeviceSize maxBytesToMove,\n        uint32_t maxAllocationsToMove,\n        VmaDefragmentationFlags flags);\n\n    virtual VkDeviceSize GetBytesMoved() const { return m_BytesMoved; }\n    virtual uint32_t GetAllocationsMoved() const { return m_AllocationsMoved; }\n\nprivate:\n    struct BlockInfo\n    {\n        size_t origBlockIndex;\n    };\n\n    class FreeSpaceDatabase\n    {\n    public:\n        FreeSpaceDatabase()\n        {\n            FreeSpace s = {};\n            s.blockInfoIndex = SIZE_MAX;\n            for(size_t i = 0; i < MAX_COUNT; ++i)\n            {\n                m_FreeSpaces[i] = s;\n            }\n        }\n\n        void Register(size_t blockInfoIndex, VkDeviceSize offset, VkDeviceSize size)\n        {\n            // Find first invalid or the smallest structure.\n            size_t bestIndex = SIZE_MAX;\n            for(size_t i = 0; i < MAX_COUNT; ++i)\n            {\n                // Empty structure.\n                if(m_FreeSpaces[i].blockInfoIndex == SIZE_MAX)\n                {\n                    bestIndex = i;\n                    break;\n                }\n                if(m_FreeSpaces[i].size < size &&\n                    (bestIndex == SIZE_MAX || m_FreeSpaces[bestIndex].size > m_FreeSpaces[i].size))\n                {\n                    bestIndex = i;\n                }\n            }\n\n            if(bestIndex != SIZE_MAX)\n            {\n                m_FreeSpaces[bestIndex].blockInfoIndex = blockInfoIndex;\n                m_FreeSpaces[bestIndex].offset = offset;\n                m_FreeSpaces[bestIndex].size = size;\n            }\n        }\n\n        bool Fetch(VkDeviceSize alignment, VkDeviceSize size,\n            size_t& outBlockInfoIndex, VkDeviceSize& outDstOffset)\n        {\n            size_t bestIndex = SIZE_MAX;\n            VkDeviceSize bestFreeSpaceAfter = 0;\n            for(size_t i = 0; i < MAX_COUNT; ++i)\n            {\n                // Structure is valid.\n                if(m_FreeSpaces[i].blockInfoIndex != SIZE_MAX)\n                {\n                    const VkDeviceSize dstOffset = VmaAlignUp(m_FreeSpaces[i].offset, alignment);\n                    // Allocation fits into this structure.\n                    if(dstOffset + size <= m_FreeSpaces[i].offset + m_FreeSpaces[i].size)\n                    {\n                        const VkDeviceSize freeSpaceAfter = (m_FreeSpaces[i].offset + m_FreeSpaces[i].size) -\n                            (dstOffset + size);\n                        if(bestIndex == SIZE_MAX || freeSpaceAfter > bestFreeSpaceAfter)\n                        {\n                            bestIndex = i;\n                            bestFreeSpaceAfter = freeSpaceAfter;\n                        }\n                    }\n                }\n            }\n\n            if(bestIndex != SIZE_MAX)\n            {\n                outBlockInfoIndex = m_FreeSpaces[bestIndex].blockInfoIndex;\n                outDstOffset = VmaAlignUp(m_FreeSpaces[bestIndex].offset, alignment);\n\n                // Leave this structure for remaining empty space.\n                const VkDeviceSize alignmentPlusSize = (outDstOffset - m_FreeSpaces[bestIndex].offset) + size;\n                m_FreeSpaces[bestIndex].offset += alignmentPlusSize;\n                m_FreeSpaces[bestIndex].size -= alignmentPlusSize;\n\n                return true;\n            }\n\n            return false;\n        }\n\n    private:\n        static const size_t MAX_COUNT = 4;\n\n        struct FreeSpace\n        {\n            size_t blockInfoIndex; // SIZE_MAX means this structure is invalid.\n            VkDeviceSize offset;\n            VkDeviceSize size;\n        } m_FreeSpaces[MAX_COUNT];\n    };\n\n    const bool m_OverlappingMoveSupported;\n\n    uint32_t m_AllocationCount;\n    bool m_AllAllocations;\n\n    VkDeviceSize m_BytesMoved;\n    uint32_t m_AllocationsMoved;\n\n    VmaVector< BlockInfo, VmaStlAllocator<BlockInfo> > m_BlockInfos;\n\n    void PreprocessMetadata();\n    void PostprocessMetadata();\n    void InsertSuballoc(VmaBlockMetadata_Generic* pMetadata, const VmaSuballocation& suballoc);\n};\n\nstruct VmaBlockDefragmentationContext\n{\n    enum BLOCK_FLAG\n    {\n        BLOCK_FLAG_USED = 0x00000001,\n    };\n    uint32_t flags;\n    VkBuffer hBuffer;\n};\n\nclass VmaBlockVectorDefragmentationContext\n{\n    VMA_CLASS_NO_COPY(VmaBlockVectorDefragmentationContext)\npublic:\n    VkResult res;\n    bool mutexLocked;\n    VmaVector< VmaBlockDefragmentationContext, VmaStlAllocator<VmaBlockDefragmentationContext> > blockContexts;\n    VmaVector< VmaDefragmentationMove, VmaStlAllocator<VmaDefragmentationMove> > defragmentationMoves;\n    uint32_t defragmentationMovesProcessed;\n    uint32_t defragmentationMovesCommitted;\n    bool hasDefragmentationPlan;\n\n    VmaBlockVectorDefragmentationContext(\n        VmaAllocator hAllocator,\n        VmaPool hCustomPool, // Optional.\n        VmaBlockVector* pBlockVector,\n        uint32_t currFrameIndex);\n    ~VmaBlockVectorDefragmentationContext();\n\n    VmaPool GetCustomPool() const { return m_hCustomPool; }\n    VmaBlockVector* GetBlockVector() const { return m_pBlockVector; }\n    VmaDefragmentationAlgorithm* GetAlgorithm() const { return m_pAlgorithm; }\n\n    void AddAllocation(VmaAllocation hAlloc, VkBool32* pChanged);\n    void AddAll() { m_AllAllocations = true; }\n\n    void Begin(bool overlappingMoveSupported, VmaDefragmentationFlags flags);\n\nprivate:\n    const VmaAllocator m_hAllocator;\n    // Null if not from custom pool.\n    const VmaPool m_hCustomPool;\n    // Redundant, for convenience not to fetch from m_hCustomPool->m_BlockVector or m_hAllocator->m_pBlockVectors.\n    VmaBlockVector* const m_pBlockVector;\n    const uint32_t m_CurrFrameIndex;\n    // Owner of this object.\n    VmaDefragmentationAlgorithm* m_pAlgorithm;\n\n    struct AllocInfo\n    {\n        VmaAllocation hAlloc;\n        VkBool32* pChanged;\n    };\n    // Used between constructor and Begin.\n    VmaVector< AllocInfo, VmaStlAllocator<AllocInfo> > m_Allocations;\n    bool m_AllAllocations;\n};\n\nstruct VmaDefragmentationContext_T\n{\nprivate:\n    VMA_CLASS_NO_COPY(VmaDefragmentationContext_T)\npublic:\n    VmaDefragmentationContext_T(\n        VmaAllocator hAllocator,\n        uint32_t currFrameIndex,\n        uint32_t flags,\n        VmaDefragmentationStats* pStats);\n    ~VmaDefragmentationContext_T();\n\n    void AddPools(uint32_t poolCount, const VmaPool* pPools);\n    void AddAllocations(\n        uint32_t allocationCount,\n        const VmaAllocation* pAllocations,\n        VkBool32* pAllocationsChanged);\n\n    /*\n    Returns:\n    - `VK_SUCCESS` if succeeded and object can be destroyed immediately.\n    - `VK_NOT_READY` if succeeded but the object must remain alive until vmaDefragmentationEnd().\n    - Negative value if error occurred and object can be destroyed immediately.\n    */\n    VkResult Defragment(\n        VkDeviceSize maxCpuBytesToMove, uint32_t maxCpuAllocationsToMove,\n        VkDeviceSize maxGpuBytesToMove, uint32_t maxGpuAllocationsToMove,\n        VkCommandBuffer commandBuffer, VmaDefragmentationStats* pStats, VmaDefragmentationFlags flags);\n\n    VkResult DefragmentPassBegin(VmaDefragmentationPassInfo* pInfo);\n    VkResult DefragmentPassEnd();\n\nprivate:\n    const VmaAllocator m_hAllocator;\n    const uint32_t m_CurrFrameIndex;\n    const uint32_t m_Flags;\n    VmaDefragmentationStats* const m_pStats;\n\n    VkDeviceSize m_MaxCpuBytesToMove;\n    uint32_t m_MaxCpuAllocationsToMove;\n    VkDeviceSize m_MaxGpuBytesToMove;\n    uint32_t m_MaxGpuAllocationsToMove;\n\n    // Owner of these objects.\n    VmaBlockVectorDefragmentationContext* m_DefaultPoolContexts[VK_MAX_MEMORY_TYPES];\n    // Owner of these objects.\n    VmaVector< VmaBlockVectorDefragmentationContext*, VmaStlAllocator<VmaBlockVectorDefragmentationContext*> > m_CustomPoolContexts;\n};\n\n#if VMA_RECORDING_ENABLED\n\nclass VmaRecorder\n{\npublic:\n    VmaRecorder();\n    VkResult Init(const VmaRecordSettings& settings, bool useMutex);\n    void WriteConfiguration(\n        const VkPhysicalDeviceProperties& devProps,\n        const VkPhysicalDeviceMemoryProperties& memProps,\n        uint32_t vulkanApiVersion,\n        bool dedicatedAllocationExtensionEnabled,\n        bool bindMemory2ExtensionEnabled,\n        bool memoryBudgetExtensionEnabled,\n        bool deviceCoherentMemoryExtensionEnabled);\n    ~VmaRecorder();\n\n    void RecordCreateAllocator(uint32_t frameIndex);\n    void RecordDestroyAllocator(uint32_t frameIndex);\n    void RecordCreatePool(uint32_t frameIndex,\n        const VmaPoolCreateInfo& createInfo,\n        VmaPool pool);\n    void RecordDestroyPool(uint32_t frameIndex, VmaPool pool);\n    void RecordAllocateMemory(uint32_t frameIndex,\n        const VkMemoryRequirements& vkMemReq,\n        const VmaAllocationCreateInfo& createInfo,\n        VmaAllocation allocation);\n    void RecordAllocateMemoryPages(uint32_t frameIndex,\n        const VkMemoryRequirements& vkMemReq,\n        const VmaAllocationCreateInfo& createInfo,\n        uint64_t allocationCount,\n        const VmaAllocation* pAllocations);\n    void RecordAllocateMemoryForBuffer(uint32_t frameIndex,\n        const VkMemoryRequirements& vkMemReq,\n        bool requiresDedicatedAllocation,\n        bool prefersDedicatedAllocation,\n        const VmaAllocationCreateInfo& createInfo,\n        VmaAllocation allocation);\n    void RecordAllocateMemoryForImage(uint32_t frameIndex,\n        const VkMemoryRequirements& vkMemReq,\n        bool requiresDedicatedAllocation,\n        bool prefersDedicatedAllocation,\n        const VmaAllocationCreateInfo& createInfo,\n        VmaAllocation allocation);\n    void RecordFreeMemory(uint32_t frameIndex,\n        VmaAllocation allocation);\n    void RecordFreeMemoryPages(uint32_t frameIndex,\n        uint64_t allocationCount,\n        const VmaAllocation* pAllocations);\n    void RecordSetAllocationUserData(uint32_t frameIndex,\n        VmaAllocation allocation,\n        const void* pUserData);\n    void RecordCreateLostAllocation(uint32_t frameIndex,\n        VmaAllocation allocation);\n    void RecordMapMemory(uint32_t frameIndex,\n        VmaAllocation allocation);\n    void RecordUnmapMemory(uint32_t frameIndex,\n        VmaAllocation allocation);\n    void RecordFlushAllocation(uint32_t frameIndex,\n        VmaAllocation allocation, VkDeviceSize offset, VkDeviceSize size);\n    void RecordInvalidateAllocation(uint32_t frameIndex,\n        VmaAllocation allocation, VkDeviceSize offset, VkDeviceSize size);\n    void RecordCreateBuffer(uint32_t frameIndex,\n        const VkBufferCreateInfo& bufCreateInfo,\n        const VmaAllocationCreateInfo& allocCreateInfo,\n        VmaAllocation allocation);\n    void RecordCreateImage(uint32_t frameIndex,\n        const VkImageCreateInfo& imageCreateInfo,\n        const VmaAllocationCreateInfo& allocCreateInfo,\n        VmaAllocation allocation);\n    void RecordDestroyBuffer(uint32_t frameIndex,\n        VmaAllocation allocation);\n    void RecordDestroyImage(uint32_t frameIndex,\n        VmaAllocation allocation);\n    void RecordTouchAllocation(uint32_t frameIndex,\n        VmaAllocation allocation);\n    void RecordGetAllocationInfo(uint32_t frameIndex,\n        VmaAllocation allocation);\n    void RecordMakePoolAllocationsLost(uint32_t frameIndex,\n        VmaPool pool);\n    void RecordDefragmentationBegin(uint32_t frameIndex,\n        const VmaDefragmentationInfo2& info,\n        VmaDefragmentationContext ctx);\n    void RecordDefragmentationEnd(uint32_t frameIndex,\n        VmaDefragmentationContext ctx);\n    void RecordSetPoolName(uint32_t frameIndex,\n        VmaPool pool,\n        const char* name);\n\nprivate:\n    struct CallParams\n    {\n        uint32_t threadId;\n        double time;\n    };\n\n    class UserDataString\n    {\n    public:\n        UserDataString(VmaAllocationCreateFlags allocFlags, const void* pUserData);\n        const char* GetString() const { return m_Str; }\n\n    private:\n        char m_PtrStr[17];\n        const char* m_Str;\n    };\n\n    bool m_UseMutex;\n    VmaRecordFlags m_Flags;\n    FILE* m_File;\n    VMA_MUTEX m_FileMutex;\n    std::chrono::time_point<std::chrono::high_resolution_clock> m_RecordingStartTime;\n\n    void GetBasicParams(CallParams& outParams);\n\n    // T must be a pointer type, e.g. VmaAllocation, VmaPool.\n    template<typename T>\n    void PrintPointerList(uint64_t count, const T* pItems)\n    {\n        if(count)\n        {\n            fprintf(m_File, \"%p\", pItems[0]);\n            for(uint64_t i = 1; i < count; ++i)\n            {\n                fprintf(m_File, \" %p\", pItems[i]);\n            }\n        }\n    }\n\n    void PrintPointerList(uint64_t count, const VmaAllocation* pItems);\n    void Flush();\n};\n\n#endif // #if VMA_RECORDING_ENABLED\n\n/*\nThread-safe wrapper over VmaPoolAllocator free list, for allocation of VmaAllocation_T objects.\n*/\nclass VmaAllocationObjectAllocator\n{\n    VMA_CLASS_NO_COPY(VmaAllocationObjectAllocator)\npublic:\n    VmaAllocationObjectAllocator(const VkAllocationCallbacks* pAllocationCallbacks);\n\n    template<typename... Types> VmaAllocation Allocate(Types&&... args);\n    void Free(VmaAllocation hAlloc);\n\nprivate:\n    VMA_MUTEX m_Mutex;\n    VmaPoolAllocator<VmaAllocation_T> m_Allocator;\n};\n\nstruct VmaCurrentBudgetData\n{\n    VMA_ATOMIC_UINT64 m_BlockBytes[VK_MAX_MEMORY_HEAPS];\n    VMA_ATOMIC_UINT64 m_AllocationBytes[VK_MAX_MEMORY_HEAPS];\n\n#if VMA_MEMORY_BUDGET\n    VMA_ATOMIC_UINT32 m_OperationsSinceBudgetFetch;\n    VMA_RW_MUTEX m_BudgetMutex;\n    uint64_t m_VulkanUsage[VK_MAX_MEMORY_HEAPS];\n    uint64_t m_VulkanBudget[VK_MAX_MEMORY_HEAPS];\n    uint64_t m_BlockBytesAtBudgetFetch[VK_MAX_MEMORY_HEAPS];\n#endif // #if VMA_MEMORY_BUDGET\n\n    VmaCurrentBudgetData()\n    {\n        for(uint32_t heapIndex = 0; heapIndex < VK_MAX_MEMORY_HEAPS; ++heapIndex)\n        {\n            m_BlockBytes[heapIndex] = 0;\n            m_AllocationBytes[heapIndex] = 0;\n#if VMA_MEMORY_BUDGET\n            m_VulkanUsage[heapIndex] = 0;\n            m_VulkanBudget[heapIndex] = 0;\n            m_BlockBytesAtBudgetFetch[heapIndex] = 0;\n#endif\n        }\n\n#if VMA_MEMORY_BUDGET\n        m_OperationsSinceBudgetFetch = 0;\n#endif\n    }\n\n    void AddAllocation(uint32_t heapIndex, VkDeviceSize allocationSize)\n    {\n        m_AllocationBytes[heapIndex] += allocationSize;\n#if VMA_MEMORY_BUDGET\n        ++m_OperationsSinceBudgetFetch;\n#endif\n    }\n\n    void RemoveAllocation(uint32_t heapIndex, VkDeviceSize allocationSize)\n    {\n        VMA_ASSERT(m_AllocationBytes[heapIndex] >= allocationSize);\n        m_AllocationBytes[heapIndex] -= allocationSize;\n#if VMA_MEMORY_BUDGET\n        ++m_OperationsSinceBudgetFetch;\n#endif\n    }\n};\n\n// Main allocator object.\nstruct VmaAllocator_T\n{\n    VMA_CLASS_NO_COPY(VmaAllocator_T)\npublic:\n    bool m_UseMutex;\n    uint32_t m_VulkanApiVersion;\n    bool m_UseKhrDedicatedAllocation; // Can be set only if m_VulkanApiVersion < VK_MAKE_VERSION(1, 1, 0).\n    bool m_UseKhrBindMemory2; // Can be set only if m_VulkanApiVersion < VK_MAKE_VERSION(1, 1, 0).\n    bool m_UseExtMemoryBudget;\n    bool m_UseAmdDeviceCoherentMemory;\n    bool m_UseKhrBufferDeviceAddress;\n    bool m_UseExtMemoryPriority;\n    VkDevice m_hDevice;\n    VkInstance m_hInstance;\n    bool m_AllocationCallbacksSpecified;\n    VkAllocationCallbacks m_AllocationCallbacks;\n    VmaDeviceMemoryCallbacks m_DeviceMemoryCallbacks;\n    VmaAllocationObjectAllocator m_AllocationObjectAllocator;\n\n    // Each bit (1 << i) is set if HeapSizeLimit is enabled for that heap, so cannot allocate more than the heap size.\n    uint32_t m_HeapSizeLimitMask;\n\n    VkPhysicalDeviceProperties m_PhysicalDeviceProperties;\n    VkPhysicalDeviceMemoryProperties m_MemProps;\n\n    // Default pools.\n    VmaBlockVector* m_pBlockVectors[VK_MAX_MEMORY_TYPES];\n\n    typedef VmaIntrusiveLinkedList<VmaDedicatedAllocationListItemTraits> DedicatedAllocationLinkedList;\n    DedicatedAllocationLinkedList m_DedicatedAllocations[VK_MAX_MEMORY_TYPES];\n    VMA_RW_MUTEX m_DedicatedAllocationsMutex[VK_MAX_MEMORY_TYPES];\n\n    VmaCurrentBudgetData m_Budget;\n    VMA_ATOMIC_UINT32 m_DeviceMemoryCount; // Total number of VkDeviceMemory objects.\n\n    VmaAllocator_T(const VmaAllocatorCreateInfo* pCreateInfo);\n    VkResult Init(const VmaAllocatorCreateInfo* pCreateInfo);\n    ~VmaAllocator_T();\n\n    const VkAllocationCallbacks* GetAllocationCallbacks() const\n    {\n        return m_AllocationCallbacksSpecified ? &m_AllocationCallbacks : VMA_NULL;\n    }\n    const VmaVulkanFunctions& GetVulkanFunctions() const\n    {\n        return m_VulkanFunctions;\n    }\n\n    VkPhysicalDevice GetPhysicalDevice() const { return m_PhysicalDevice; }\n\n    VkDeviceSize GetBufferImageGranularity() const\n    {\n        return VMA_MAX(\n            static_cast<VkDeviceSize>(VMA_DEBUG_MIN_BUFFER_IMAGE_GRANULARITY),\n            m_PhysicalDeviceProperties.limits.bufferImageGranularity);\n    }\n\n    uint32_t GetMemoryHeapCount() const { return m_MemProps.memoryHeapCount; }\n    uint32_t GetMemoryTypeCount() const { return m_MemProps.memoryTypeCount; }\n\n    uint32_t MemoryTypeIndexToHeapIndex(uint32_t memTypeIndex) const\n    {\n        VMA_ASSERT(memTypeIndex < m_MemProps.memoryTypeCount);\n        return m_MemProps.memoryTypes[memTypeIndex].heapIndex;\n    }\n    // True when specific memory type is HOST_VISIBLE but not HOST_COHERENT.\n    bool IsMemoryTypeNonCoherent(uint32_t memTypeIndex) const\n    {\n        return (m_MemProps.memoryTypes[memTypeIndex].propertyFlags & (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)) ==\n            VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT;\n    }\n    // Minimum alignment for all allocations in specific memory type.\n    VkDeviceSize GetMemoryTypeMinAlignment(uint32_t memTypeIndex) const\n    {\n        return IsMemoryTypeNonCoherent(memTypeIndex) ?\n            VMA_MAX((VkDeviceSize)VMA_MIN_ALIGNMENT, m_PhysicalDeviceProperties.limits.nonCoherentAtomSize) :\n            (VkDeviceSize)VMA_MIN_ALIGNMENT;\n    }\n\n    bool IsIntegratedGpu() const\n    {\n        return m_PhysicalDeviceProperties.deviceType == VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU;\n    }\n\n    uint32_t GetGlobalMemoryTypeBits() const { return m_GlobalMemoryTypeBits; }\n\n#if VMA_RECORDING_ENABLED\n    VmaRecorder* GetRecorder() const { return m_pRecorder; }\n#endif\n\n    void GetBufferMemoryRequirements(\n        VkBuffer hBuffer,\n        VkMemoryRequirements& memReq,\n        bool& requiresDedicatedAllocation,\n        bool& prefersDedicatedAllocation) const;\n    void GetImageMemoryRequirements(\n        VkImage hImage,\n        VkMemoryRequirements& memReq,\n        bool& requiresDedicatedAllocation,\n        bool& prefersDedicatedAllocation) const;\n\n    // Main allocation function.\n    VkResult AllocateMemory(\n        const VkMemoryRequirements& vkMemReq,\n        bool requiresDedicatedAllocation,\n        bool prefersDedicatedAllocation,\n        VkBuffer dedicatedBuffer,\n        VkBufferUsageFlags dedicatedBufferUsage, // UINT32_MAX when unknown.\n        VkImage dedicatedImage,\n        const VmaAllocationCreateInfo& createInfo,\n        VmaSuballocationType suballocType,\n        size_t allocationCount,\n        VmaAllocation* pAllocations);\n\n    // Main deallocation function.\n    void FreeMemory(\n        size_t allocationCount,\n        const VmaAllocation* pAllocations);\n\n    void CalculateStats(VmaStats* pStats);\n\n    void GetBudget(\n        VmaBudget* outBudget, uint32_t firstHeap, uint32_t heapCount);\n\n#if VMA_STATS_STRING_ENABLED\n    void PrintDetailedMap(class VmaJsonWriter& json);\n#endif\n\n    VkResult DefragmentationBegin(\n        const VmaDefragmentationInfo2& info,\n        VmaDefragmentationStats* pStats,\n        VmaDefragmentationContext* pContext);\n    VkResult DefragmentationEnd(\n        VmaDefragmentationContext context);\n\n    VkResult DefragmentationPassBegin(\n        VmaDefragmentationPassInfo* pInfo,\n        VmaDefragmentationContext context);\n    VkResult DefragmentationPassEnd(\n        VmaDefragmentationContext context);\n\n    void GetAllocationInfo(VmaAllocation hAllocation, VmaAllocationInfo* pAllocationInfo);\n    bool TouchAllocation(VmaAllocation hAllocation);\n\n    VkResult CreatePool(const VmaPoolCreateInfo* pCreateInfo, VmaPool* pPool);\n    void DestroyPool(VmaPool pool);\n    void GetPoolStats(VmaPool pool, VmaPoolStats* pPoolStats);\n\n    void SetCurrentFrameIndex(uint32_t frameIndex);\n    uint32_t GetCurrentFrameIndex() const { return m_CurrentFrameIndex.load(); }\n\n    void MakePoolAllocationsLost(\n        VmaPool hPool,\n        size_t* pLostAllocationCount);\n    VkResult CheckPoolCorruption(VmaPool hPool);\n    VkResult CheckCorruption(uint32_t memoryTypeBits);\n\n    void CreateLostAllocation(VmaAllocation* pAllocation);\n\n    // Call to Vulkan function vkAllocateMemory with accompanying bookkeeping.\n    VkResult AllocateVulkanMemory(const VkMemoryAllocateInfo* pAllocateInfo, VkDeviceMemory* pMemory);\n    // Call to Vulkan function vkFreeMemory with accompanying bookkeeping.\n    void FreeVulkanMemory(uint32_t memoryType, VkDeviceSize size, VkDeviceMemory hMemory);\n    // Call to Vulkan function vkBindBufferMemory or vkBindBufferMemory2KHR.\n    VkResult BindVulkanBuffer(\n        VkDeviceMemory memory,\n        VkDeviceSize memoryOffset,\n        VkBuffer buffer,\n        const void* pNext);\n    // Call to Vulkan function vkBindImageMemory or vkBindImageMemory2KHR.\n    VkResult BindVulkanImage(\n        VkDeviceMemory memory,\n        VkDeviceSize memoryOffset,\n        VkImage image,\n        const void* pNext);\n\n    VkResult Map(VmaAllocation hAllocation, void** ppData);\n    void Unmap(VmaAllocation hAllocation);\n\n    VkResult BindBufferMemory(\n        VmaAllocation hAllocation,\n        VkDeviceSize allocationLocalOffset,\n        VkBuffer hBuffer,\n        const void* pNext);\n    VkResult BindImageMemory(\n        VmaAllocation hAllocation,\n        VkDeviceSize allocationLocalOffset,\n        VkImage hImage,\n        const void* pNext);\n\n    VkResult FlushOrInvalidateAllocation(\n        VmaAllocation hAllocation,\n        VkDeviceSize offset, VkDeviceSize size,\n        VMA_CACHE_OPERATION op);\n    VkResult FlushOrInvalidateAllocations(\n        uint32_t allocationCount,\n        const VmaAllocation* allocations,\n        const VkDeviceSize* offsets, const VkDeviceSize* sizes,\n        VMA_CACHE_OPERATION op);\n\n    void FillAllocation(const VmaAllocation hAllocation, uint8_t pattern);\n\n    /*\n    Returns bit mask of memory types that can support defragmentation on GPU as\n    they support creation of required buffer for copy operations.\n    */\n    uint32_t GetGpuDefragmentationMemoryTypeBits();\n\n#if VMA_EXTERNAL_MEMORY\n    VkExternalMemoryHandleTypeFlagsKHR GetExternalMemoryHandleTypeFlags(uint32_t memTypeIndex) const\n    {\n        return m_TypeExternalMemoryHandleTypes[memTypeIndex];\n    }\n#endif // #if VMA_EXTERNAL_MEMORY\n\nprivate:\n    VkDeviceSize m_PreferredLargeHeapBlockSize;\n\n    VkPhysicalDevice m_PhysicalDevice;\n    VMA_ATOMIC_UINT32 m_CurrentFrameIndex;\n    VMA_ATOMIC_UINT32 m_GpuDefragmentationMemoryTypeBits; // UINT32_MAX means uninitialized.\n#if VMA_EXTERNAL_MEMORY\n    VkExternalMemoryHandleTypeFlagsKHR m_TypeExternalMemoryHandleTypes[VK_MAX_MEMORY_TYPES];\n#endif // #if VMA_EXTERNAL_MEMORY\n\n    VMA_RW_MUTEX m_PoolsMutex;\n    typedef VmaIntrusiveLinkedList<VmaPoolListItemTraits> PoolList;\n    // Protected by m_PoolsMutex.\n    PoolList m_Pools;\n    uint32_t m_NextPoolId;\n\n    VmaVulkanFunctions m_VulkanFunctions;\n\n    // Global bit mask AND-ed with any memoryTypeBits to disallow certain memory types.\n    uint32_t m_GlobalMemoryTypeBits;\n\n#if VMA_RECORDING_ENABLED\n    VmaRecorder* m_pRecorder;\n#endif\n\n    void ImportVulkanFunctions(const VmaVulkanFunctions* pVulkanFunctions);\n\n#if VMA_STATIC_VULKAN_FUNCTIONS == 1\n    void ImportVulkanFunctions_Static();\n#endif\n\n    void ImportVulkanFunctions_Custom(const VmaVulkanFunctions* pVulkanFunctions);\n\n#if VMA_DYNAMIC_VULKAN_FUNCTIONS == 1\n    void ImportVulkanFunctions_Dynamic();\n#endif\n\n    void ValidateVulkanFunctions();\n\n    VkDeviceSize CalcPreferredBlockSize(uint32_t memTypeIndex);\n\n    VkResult AllocateMemoryOfType(\n        VkDeviceSize size,\n        VkDeviceSize alignment,\n        bool dedicatedAllocation,\n        VkBuffer dedicatedBuffer,\n        VkBufferUsageFlags dedicatedBufferUsage,\n        VkImage dedicatedImage,\n        const VmaAllocationCreateInfo& createInfo,\n        uint32_t memTypeIndex,\n        VmaSuballocationType suballocType,\n        size_t allocationCount,\n        VmaAllocation* pAllocations);\n\n    // Helper function only to be used inside AllocateDedicatedMemory.\n    VkResult AllocateDedicatedMemoryPage(\n        VkDeviceSize size,\n        VmaSuballocationType suballocType,\n        uint32_t memTypeIndex,\n        const VkMemoryAllocateInfo& allocInfo,\n        bool map,\n        bool isUserDataString,\n        void* pUserData,\n        VmaAllocation* pAllocation);\n\n    // Allocates and registers new VkDeviceMemory specifically for dedicated allocations.\n    VkResult AllocateDedicatedMemory(\n        VkDeviceSize size,\n        VmaSuballocationType suballocType,\n        uint32_t memTypeIndex,\n        bool withinBudget,\n        bool map,\n        bool isUserDataString,\n        void* pUserData,\n        float priority,\n        VkBuffer dedicatedBuffer,\n        VkBufferUsageFlags dedicatedBufferUsage,\n        VkImage dedicatedImage,\n        size_t allocationCount,\n        VmaAllocation* pAllocations);\n\n    void FreeDedicatedMemory(const VmaAllocation allocation);\n\n    /*\n    Calculates and returns bit mask of memory types that can support defragmentation\n    on GPU as they support creation of required buffer for copy operations.\n    */\n    uint32_t CalculateGpuDefragmentationMemoryTypeBits() const;\n\n    uint32_t CalculateGlobalMemoryTypeBits() const;\n\n    bool GetFlushOrInvalidateRange(\n        VmaAllocation allocation,\n        VkDeviceSize offset, VkDeviceSize size,\n        VkMappedMemoryRange& outRange) const;\n\n#if VMA_MEMORY_BUDGET\n    void UpdateVulkanBudget();\n#endif // #if VMA_MEMORY_BUDGET\n};\n\nclass VmaStringBuilder;\n\nstatic void VmaInitStatInfo(VmaStatInfo& outInfo)\n{\n    memset(&outInfo, 0, sizeof(outInfo));\n    outInfo.allocationSizeMin = UINT64_MAX;\n    outInfo.unusedRangeSizeMin = UINT64_MAX;\n}\n\n// Adds statistics srcInfo into inoutInfo, like: inoutInfo += srcInfo.\nstatic void VmaAddStatInfo(VmaStatInfo& inoutInfo, const VmaStatInfo& srcInfo)\n{\n    inoutInfo.blockCount += srcInfo.blockCount;\n    inoutInfo.allocationCount += srcInfo.allocationCount;\n    inoutInfo.unusedRangeCount += srcInfo.unusedRangeCount;\n    inoutInfo.usedBytes += srcInfo.usedBytes;\n    inoutInfo.unusedBytes += srcInfo.unusedBytes;\n    inoutInfo.allocationSizeMin = VMA_MIN(inoutInfo.allocationSizeMin, srcInfo.allocationSizeMin);\n    inoutInfo.allocationSizeMax = VMA_MAX(inoutInfo.allocationSizeMax, srcInfo.allocationSizeMax);\n    inoutInfo.unusedRangeSizeMin = VMA_MIN(inoutInfo.unusedRangeSizeMin, srcInfo.unusedRangeSizeMin);\n    inoutInfo.unusedRangeSizeMax = VMA_MAX(inoutInfo.unusedRangeSizeMax, srcInfo.unusedRangeSizeMax);\n}\n\nstatic void VmaAddStatInfoAllocation(VmaStatInfo& inoutInfo, VkDeviceSize size)\n{\n    ++inoutInfo.allocationCount;\n    inoutInfo.usedBytes += size;\n    if(size < inoutInfo.allocationSizeMin)\n    {\n        inoutInfo.allocationSizeMin = size;\n    }\n    if(size > inoutInfo.allocationSizeMax)\n    {\n        inoutInfo.allocationSizeMax = size;\n    }\n}\n\nstatic void VmaAddStatInfoUnusedRange(VmaStatInfo& inoutInfo, VkDeviceSize size)\n{\n    ++inoutInfo.unusedRangeCount;\n    inoutInfo.unusedBytes += size;\n    if(size < inoutInfo.unusedRangeSizeMin)\n    {\n        inoutInfo.unusedRangeSizeMin = size;\n    }\n    if(size > inoutInfo.unusedRangeSizeMax)\n    {\n        inoutInfo.unusedRangeSizeMax = size;\n    }\n}\n\nstatic void VmaPostprocessCalcStatInfo(VmaStatInfo& inoutInfo)\n{\n    inoutInfo.allocationSizeAvg = (inoutInfo.allocationCount > 0) ?\n        VmaRoundDiv<VkDeviceSize>(inoutInfo.usedBytes, inoutInfo.allocationCount) : 0;\n    inoutInfo.unusedRangeSizeAvg = (inoutInfo.unusedRangeCount > 0) ?\n        VmaRoundDiv<VkDeviceSize>(inoutInfo.unusedBytes, inoutInfo.unusedRangeCount) : 0;\n}\n\nstruct VmaVirtualBlock_T\n{\n    VMA_CLASS_NO_COPY(VmaVirtualBlock_T)\npublic:\n    const bool m_AllocationCallbacksSpecified;\n    const VkAllocationCallbacks m_AllocationCallbacks;\n\n    VmaVirtualBlock_T(const VmaVirtualBlockCreateInfo& createInfo);\n    ~VmaVirtualBlock_T();\n    VkResult Init()\n    {\n        return VK_SUCCESS;\n    }\n\n    const VkAllocationCallbacks* GetAllocationCallbacks() const\n    {\n        return m_AllocationCallbacksSpecified ? &m_AllocationCallbacks : VMA_NULL;\n    }\n    bool IsEmpty() const\n    {\n        return m_Metadata->IsEmpty();\n    }\n    void GetAllocationInfo(VkDeviceSize offset, VmaVirtualAllocationInfo& outInfo)\n    {\n        m_Metadata->GetAllocationInfo(offset, outInfo);\n    }\n    VkResult Allocate(const VmaVirtualAllocationCreateInfo& createInfo, VkDeviceSize& outOffset);\n    void Free(VkDeviceSize offset)\n    {\n        m_Metadata->FreeAtOffset(offset);\n    }\n    void Clear()\n    {\n        m_Metadata->Clear();\n    }\n    void SetAllocationUserData(VkDeviceSize offset, void* userData)\n    {\n        m_Metadata->SetAllocationUserData(offset, userData);\n    }\n    void CalculateStats(VmaStatInfo& outStatInfo) const\n    {\n        m_Metadata->CalcAllocationStatInfo(outStatInfo);\n        VmaPostprocessCalcStatInfo(outStatInfo);\n    }\n#if VMA_STATS_STRING_ENABLED\n    void BuildStatsString(bool detailedMap, VmaStringBuilder& sb) const;\n#endif\n\nprivate:\n    VmaBlockMetadata* m_Metadata;\n};\n\n////////////////////////////////////////////////////////////////////////////////\n// Memory allocation #2 after VmaAllocator_T definition\n\nstatic void* VmaMalloc(VmaAllocator hAllocator, size_t size, size_t alignment)\n{\n    return VmaMalloc(&hAllocator->m_AllocationCallbacks, size, alignment);\n}\n\nstatic void VmaFree(VmaAllocator hAllocator, void* ptr)\n{\n    VmaFree(&hAllocator->m_AllocationCallbacks, ptr);\n}\n\ntemplate<typename T>\nstatic T* VmaAllocate(VmaAllocator hAllocator)\n{\n    return (T*)VmaMalloc(hAllocator, sizeof(T), VMA_ALIGN_OF(T));\n}\n\ntemplate<typename T>\nstatic T* VmaAllocateArray(VmaAllocator hAllocator, size_t count)\n{\n    return (T*)VmaMalloc(hAllocator, sizeof(T) * count, VMA_ALIGN_OF(T));\n}\n\ntemplate<typename T>\nstatic void vma_delete(VmaAllocator hAllocator, T* ptr)\n{\n    if(ptr != VMA_NULL)\n    {\n        ptr->~T();\n        VmaFree(hAllocator, ptr);\n    }\n}\n\ntemplate<typename T>\nstatic void vma_delete_array(VmaAllocator hAllocator, T* ptr, size_t count)\n{\n    if(ptr != VMA_NULL)\n    {\n        for(size_t i = count; i--; )\n            ptr[i].~T();\n        VmaFree(hAllocator, ptr);\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// VmaStringBuilder\n\n#if VMA_STATS_STRING_ENABLED\n\nclass VmaStringBuilder\n{\npublic:\n    VmaStringBuilder(const VkAllocationCallbacks* allocationCallbacks) : m_Data(VmaStlAllocator<char>(allocationCallbacks)) { }\n    size_t GetLength() const { return m_Data.size(); }\n    const char* GetData() const { return m_Data.data(); }\n\n    void Add(char ch) { m_Data.push_back(ch); }\n    void Add(const char* pStr);\n    void AddNewLine() { Add('\\n'); }\n    void AddNumber(uint32_t num);\n    void AddNumber(uint64_t num);\n    void AddPointer(const void* ptr);\n\nprivate:\n    VmaVector< char, VmaStlAllocator<char> > m_Data;\n};\n\nvoid VmaStringBuilder::Add(const char* pStr)\n{\n    const size_t strLen = strlen(pStr);\n    if(strLen > 0)\n    {\n        const size_t oldCount = m_Data.size();\n        m_Data.resize(oldCount + strLen);\n        memcpy(m_Data.data() + oldCount, pStr, strLen);\n    }\n}\n\nvoid VmaStringBuilder::AddNumber(uint32_t num)\n{\n    char buf[11];\n    buf[10] = '\\0';\n    char *p = &buf[10];\n    do\n    {\n        *--p = '0' + (num % 10);\n        num /= 10;\n    }\n    while(num);\n    Add(p);\n}\n\nvoid VmaStringBuilder::AddNumber(uint64_t num)\n{\n    char buf[21];\n    buf[20] = '\\0';\n    char *p = &buf[20];\n    do\n    {\n        *--p = '0' + (num % 10);\n        num /= 10;\n    }\n    while(num);\n    Add(p);\n}\n\nvoid VmaStringBuilder::AddPointer(const void* ptr)\n{\n    char buf[21];\n    VmaPtrToStr(buf, sizeof(buf), ptr);\n    Add(buf);\n}\n\n#endif // #if VMA_STATS_STRING_ENABLED\n\n////////////////////////////////////////////////////////////////////////////////\n// VmaJsonWriter\n\n#if VMA_STATS_STRING_ENABLED\n\nclass VmaJsonWriter\n{\n    VMA_CLASS_NO_COPY(VmaJsonWriter)\npublic:\n    VmaJsonWriter(const VkAllocationCallbacks* pAllocationCallbacks, VmaStringBuilder& sb);\n    ~VmaJsonWriter();\n\n    void BeginObject(bool singleLine = false);\n    void EndObject();\n\n    void BeginArray(bool singleLine = false);\n    void EndArray();\n\n    void WriteString(const char* pStr);\n    void BeginString(const char* pStr = VMA_NULL);\n    void ContinueString(const char* pStr);\n    void ContinueString(uint32_t n);\n    void ContinueString(uint64_t n);\n    void ContinueString_Pointer(const void* ptr);\n    void EndString(const char* pStr = VMA_NULL);\n\n    void WriteNumber(uint32_t n);\n    void WriteNumber(uint64_t n);\n    void WriteBool(bool b);\n    void WriteNull();\n\nprivate:\n    static const char* const INDENT;\n\n    enum COLLECTION_TYPE\n    {\n        COLLECTION_TYPE_OBJECT,\n        COLLECTION_TYPE_ARRAY,\n    };\n    struct StackItem\n    {\n        COLLECTION_TYPE type;\n        uint32_t valueCount;\n        bool singleLineMode;\n    };\n\n    VmaStringBuilder& m_SB;\n    VmaVector< StackItem, VmaStlAllocator<StackItem> > m_Stack;\n    bool m_InsideString;\n\n    void BeginValue(bool isString);\n    void WriteIndent(bool oneLess = false);\n};\n\nconst char* const VmaJsonWriter::INDENT = \"  \";\n\nVmaJsonWriter::VmaJsonWriter(const VkAllocationCallbacks* pAllocationCallbacks, VmaStringBuilder& sb) :\n    m_SB(sb),\n    m_Stack(VmaStlAllocator<StackItem>(pAllocationCallbacks)),\n    m_InsideString(false)\n{\n}\n\nVmaJsonWriter::~VmaJsonWriter()\n{\n    VMA_ASSERT(!m_InsideString);\n    VMA_ASSERT(m_Stack.empty());\n}\n\nvoid VmaJsonWriter::BeginObject(bool singleLine)\n{\n    VMA_ASSERT(!m_InsideString);\n\n    BeginValue(false);\n    m_SB.Add('{');\n\n    StackItem item;\n    item.type = COLLECTION_TYPE_OBJECT;\n    item.valueCount = 0;\n    item.singleLineMode = singleLine;\n    m_Stack.push_back(item);\n}\n\nvoid VmaJsonWriter::EndObject()\n{\n    VMA_ASSERT(!m_InsideString);\n\n    WriteIndent(true);\n    m_SB.Add('}');\n\n    VMA_ASSERT(!m_Stack.empty() && m_Stack.back().type == COLLECTION_TYPE_OBJECT);\n    m_Stack.pop_back();\n}\n\nvoid VmaJsonWriter::BeginArray(bool singleLine)\n{\n    VMA_ASSERT(!m_InsideString);\n\n    BeginValue(false);\n    m_SB.Add('[');\n\n    StackItem item;\n    item.type = COLLECTION_TYPE_ARRAY;\n    item.valueCount = 0;\n    item.singleLineMode = singleLine;\n    m_Stack.push_back(item);\n}\n\nvoid VmaJsonWriter::EndArray()\n{\n    VMA_ASSERT(!m_InsideString);\n\n    WriteIndent(true);\n    m_SB.Add(']');\n\n    VMA_ASSERT(!m_Stack.empty() && m_Stack.back().type == COLLECTION_TYPE_ARRAY);\n    m_Stack.pop_back();\n}\n\nvoid VmaJsonWriter::WriteString(const char* pStr)\n{\n    BeginString(pStr);\n    EndString();\n}\n\nvoid VmaJsonWriter::BeginString(const char* pStr)\n{\n    VMA_ASSERT(!m_InsideString);\n\n    BeginValue(true);\n    m_SB.Add('\"');\n    m_InsideString = true;\n    if(pStr != VMA_NULL && pStr[0] != '\\0')\n    {\n        ContinueString(pStr);\n    }\n}\n\nvoid VmaJsonWriter::ContinueString(const char* pStr)\n{\n    VMA_ASSERT(m_InsideString);\n\n    const size_t strLen = strlen(pStr);\n    for(size_t i = 0; i < strLen; ++i)\n    {\n        char ch = pStr[i];\n        if(ch == '\\\\')\n        {\n            m_SB.Add(\"\\\\\\\\\");\n        }\n        else if(ch == '\"')\n        {\n            m_SB.Add(\"\\\\\\\"\");\n        }\n        else if(ch >= 32)\n        {\n            m_SB.Add(ch);\n        }\n        else switch(ch)\n        {\n        case '\\b':\n            m_SB.Add(\"\\\\b\");\n            break;\n        case '\\f':\n            m_SB.Add(\"\\\\f\");\n            break;\n        case '\\n':\n            m_SB.Add(\"\\\\n\");\n            break;\n        case '\\r':\n            m_SB.Add(\"\\\\r\");\n            break;\n        case '\\t':\n            m_SB.Add(\"\\\\t\");\n            break;\n        default:\n            VMA_ASSERT(0 && \"Character not currently supported.\");\n            break;\n        }\n    }\n}\n\nvoid VmaJsonWriter::ContinueString(uint32_t n)\n{\n    VMA_ASSERT(m_InsideString);\n    m_SB.AddNumber(n);\n}\n\nvoid VmaJsonWriter::ContinueString(uint64_t n)\n{\n    VMA_ASSERT(m_InsideString);\n    m_SB.AddNumber(n);\n}\n\nvoid VmaJsonWriter::ContinueString_Pointer(const void* ptr)\n{\n    VMA_ASSERT(m_InsideString);\n    m_SB.AddPointer(ptr);\n}\n\nvoid VmaJsonWriter::EndString(const char* pStr)\n{\n    VMA_ASSERT(m_InsideString);\n    if(pStr != VMA_NULL && pStr[0] != '\\0')\n    {\n        ContinueString(pStr);\n    }\n    m_SB.Add('\"');\n    m_InsideString = false;\n}\n\nvoid VmaJsonWriter::WriteNumber(uint32_t n)\n{\n    VMA_ASSERT(!m_InsideString);\n    BeginValue(false);\n    m_SB.AddNumber(n);\n}\n\nvoid VmaJsonWriter::WriteNumber(uint64_t n)\n{\n    VMA_ASSERT(!m_InsideString);\n    BeginValue(false);\n    m_SB.AddNumber(n);\n}\n\nvoid VmaJsonWriter::WriteBool(bool b)\n{\n    VMA_ASSERT(!m_InsideString);\n    BeginValue(false);\n    m_SB.Add(b ? \"true\" : \"false\");\n}\n\nvoid VmaJsonWriter::WriteNull()\n{\n    VMA_ASSERT(!m_InsideString);\n    BeginValue(false);\n    m_SB.Add(\"null\");\n}\n\nvoid VmaJsonWriter::BeginValue(bool isString)\n{\n    if(!m_Stack.empty())\n    {\n        StackItem& currItem = m_Stack.back();\n        if(currItem.type == COLLECTION_TYPE_OBJECT &&\n            currItem.valueCount % 2 == 0)\n        {\n            VMA_ASSERT(isString);\n        }\n\n        if(currItem.type == COLLECTION_TYPE_OBJECT &&\n            currItem.valueCount % 2 != 0)\n        {\n            m_SB.Add(\": \");\n        }\n        else if(currItem.valueCount > 0)\n        {\n            m_SB.Add(\", \");\n            WriteIndent();\n        }\n        else\n        {\n            WriteIndent();\n        }\n        ++currItem.valueCount;\n    }\n}\n\nvoid VmaJsonWriter::WriteIndent(bool oneLess)\n{\n    if(!m_Stack.empty() && !m_Stack.back().singleLineMode)\n    {\n        m_SB.AddNewLine();\n\n        size_t count = m_Stack.size();\n        if(count > 0 && oneLess)\n        {\n            --count;\n        }\n        for(size_t i = 0; i < count; ++i)\n        {\n            m_SB.Add(INDENT);\n        }\n    }\n}\n\n#endif // #if VMA_STATS_STRING_ENABLED\n\n////////////////////////////////////////////////////////////////////////////////\n\nvoid VmaAllocation_T::SetUserData(VmaAllocator hAllocator, void* pUserData)\n{\n    if(IsUserDataString())\n    {\n        VMA_ASSERT(pUserData == VMA_NULL || pUserData != m_pUserData);\n\n        FreeUserDataString(hAllocator);\n\n        if(pUserData != VMA_NULL)\n        {\n            m_pUserData = VmaCreateStringCopy(hAllocator->GetAllocationCallbacks(), (const char*)pUserData);\n        }\n    }\n    else\n    {\n        m_pUserData = pUserData;\n    }\n}\n\nvoid VmaAllocation_T::ChangeBlockAllocation(\n    VmaAllocator hAllocator,\n    VmaDeviceMemoryBlock* block,\n    VkDeviceSize offset)\n{\n    VMA_ASSERT(block != VMA_NULL);\n    VMA_ASSERT(m_Type == ALLOCATION_TYPE_BLOCK);\n\n    // Move mapping reference counter from old block to new block.\n    if(block != m_BlockAllocation.m_Block)\n    {\n        uint32_t mapRefCount = m_MapCount & ~MAP_COUNT_FLAG_PERSISTENT_MAP;\n        if(IsPersistentMap())\n            ++mapRefCount;\n        m_BlockAllocation.m_Block->Unmap(hAllocator, mapRefCount);\n        block->Map(hAllocator, mapRefCount, VMA_NULL);\n    }\n\n    m_BlockAllocation.m_Block = block;\n    m_BlockAllocation.m_Offset = offset;\n}\n\nvoid VmaAllocation_T::ChangeOffset(VkDeviceSize newOffset)\n{\n    VMA_ASSERT(m_Type == ALLOCATION_TYPE_BLOCK);\n    m_BlockAllocation.m_Offset = newOffset;\n}\n\nVkDeviceSize VmaAllocation_T::GetOffset() const\n{\n    switch(m_Type)\n    {\n    case ALLOCATION_TYPE_BLOCK:\n        return m_BlockAllocation.m_Offset;\n    case ALLOCATION_TYPE_DEDICATED:\n        return 0;\n    default:\n        VMA_ASSERT(0);\n        return 0;\n    }\n}\n\nVkDeviceMemory VmaAllocation_T::GetMemory() const\n{\n    switch(m_Type)\n    {\n    case ALLOCATION_TYPE_BLOCK:\n        return m_BlockAllocation.m_Block->GetDeviceMemory();\n    case ALLOCATION_TYPE_DEDICATED:\n        return m_DedicatedAllocation.m_hMemory;\n    default:\n        VMA_ASSERT(0);\n        return VK_NULL_HANDLE;\n    }\n}\n\nvoid* VmaAllocation_T::GetMappedData() const\n{\n    switch(m_Type)\n    {\n    case ALLOCATION_TYPE_BLOCK:\n        if(m_MapCount != 0)\n        {\n            void* pBlockData = m_BlockAllocation.m_Block->GetMappedData();\n            VMA_ASSERT(pBlockData != VMA_NULL);\n            return (char*)pBlockData + m_BlockAllocation.m_Offset;\n        }\n        else\n        {\n            return VMA_NULL;\n        }\n        break;\n    case ALLOCATION_TYPE_DEDICATED:\n        VMA_ASSERT((m_DedicatedAllocation.m_pMappedData != VMA_NULL) == (m_MapCount != 0));\n        return m_DedicatedAllocation.m_pMappedData;\n    default:\n        VMA_ASSERT(0);\n        return VMA_NULL;\n    }\n}\n\nbool VmaAllocation_T::CanBecomeLost() const\n{\n    switch(m_Type)\n    {\n    case ALLOCATION_TYPE_BLOCK:\n        return m_BlockAllocation.m_CanBecomeLost;\n    case ALLOCATION_TYPE_DEDICATED:\n        return false;\n    default:\n        VMA_ASSERT(0);\n        return false;\n    }\n}\n\nbool VmaAllocation_T::MakeLost(uint32_t currentFrameIndex, uint32_t frameInUseCount)\n{\n    VMA_ASSERT(CanBecomeLost());\n\n    /*\n    Warning: This is a carefully designed algorithm.\n    Do not modify unless you really know what you're doing :)\n    */\n    uint32_t localLastUseFrameIndex = GetLastUseFrameIndex();\n    for(;;)\n    {\n        if(localLastUseFrameIndex == VMA_FRAME_INDEX_LOST)\n        {\n            VMA_ASSERT(0);\n            return false;\n        }\n        else if(localLastUseFrameIndex + frameInUseCount >= currentFrameIndex)\n        {\n            return false;\n        }\n        else // Last use time earlier than current time.\n        {\n            if(CompareExchangeLastUseFrameIndex(localLastUseFrameIndex, VMA_FRAME_INDEX_LOST))\n            {\n                // Setting hAllocation.LastUseFrameIndex atomic to VMA_FRAME_INDEX_LOST is enough to mark it as LOST.\n                // Calling code just needs to unregister this allocation in owning VmaDeviceMemoryBlock.\n                return true;\n            }\n        }\n    }\n}\n\n#if VMA_STATS_STRING_ENABLED\n\n// Correspond to values of enum VmaSuballocationType.\nstatic const char* VMA_SUBALLOCATION_TYPE_NAMES[] = {\n    \"FREE\",\n    \"UNKNOWN\",\n    \"BUFFER\",\n    \"IMAGE_UNKNOWN\",\n    \"IMAGE_LINEAR\",\n    \"IMAGE_OPTIMAL\",\n};\n\nvoid VmaAllocation_T::PrintParameters(class VmaJsonWriter& json) const\n{\n    json.WriteString(\"Type\");\n    json.WriteString(VMA_SUBALLOCATION_TYPE_NAMES[m_SuballocationType]);\n\n    json.WriteString(\"Size\");\n    json.WriteNumber(m_Size);\n\n    if(m_pUserData != VMA_NULL)\n    {\n        json.WriteString(\"UserData\");\n        if(IsUserDataString())\n        {\n            json.WriteString((const char*)m_pUserData);\n        }\n        else\n        {\n            json.BeginString();\n            json.ContinueString_Pointer(m_pUserData);\n            json.EndString();\n        }\n    }\n\n    json.WriteString(\"CreationFrameIndex\");\n    json.WriteNumber(m_CreationFrameIndex);\n\n    json.WriteString(\"LastUseFrameIndex\");\n    json.WriteNumber(GetLastUseFrameIndex());\n\n    if(m_BufferImageUsage != 0)\n    {\n        json.WriteString(\"Usage\");\n        json.WriteNumber(m_BufferImageUsage);\n    }\n}\n\n#endif\n\nvoid VmaAllocation_T::FreeUserDataString(VmaAllocator hAllocator)\n{\n    VMA_ASSERT(IsUserDataString());\n    VmaFreeString(hAllocator->GetAllocationCallbacks(), (char*)m_pUserData);\n    m_pUserData = VMA_NULL;\n}\n\nvoid VmaAllocation_T::BlockAllocMap()\n{\n    VMA_ASSERT(GetType() == ALLOCATION_TYPE_BLOCK);\n\n    if((m_MapCount & ~MAP_COUNT_FLAG_PERSISTENT_MAP) < 0x7F)\n    {\n        ++m_MapCount;\n    }\n    else\n    {\n        VMA_ASSERT(0 && \"Allocation mapped too many times simultaneously.\");\n    }\n}\n\nvoid VmaAllocation_T::BlockAllocUnmap()\n{\n    VMA_ASSERT(GetType() == ALLOCATION_TYPE_BLOCK);\n\n    if((m_MapCount & ~MAP_COUNT_FLAG_PERSISTENT_MAP) != 0)\n    {\n        --m_MapCount;\n    }\n    else\n    {\n        VMA_ASSERT(0 && \"Unmapping allocation not previously mapped.\");\n    }\n}\n\nVkResult VmaAllocation_T::DedicatedAllocMap(VmaAllocator hAllocator, void** ppData)\n{\n    VMA_ASSERT(GetType() == ALLOCATION_TYPE_DEDICATED);\n\n    if(m_MapCount != 0)\n    {\n        if((m_MapCount & ~MAP_COUNT_FLAG_PERSISTENT_MAP) < 0x7F)\n        {\n            VMA_ASSERT(m_DedicatedAllocation.m_pMappedData != VMA_NULL);\n            *ppData = m_DedicatedAllocation.m_pMappedData;\n            ++m_MapCount;\n            return VK_SUCCESS;\n        }\n        else\n        {\n            VMA_ASSERT(0 && \"Dedicated allocation mapped too many times simultaneously.\");\n            return VK_ERROR_MEMORY_MAP_FAILED;\n        }\n    }\n    else\n    {\n        VkResult result = (*hAllocator->GetVulkanFunctions().vkMapMemory)(\n            hAllocator->m_hDevice,\n            m_DedicatedAllocation.m_hMemory,\n            0, // offset\n            VK_WHOLE_SIZE,\n            0, // flags\n            ppData);\n        if(result == VK_SUCCESS)\n        {\n            m_DedicatedAllocation.m_pMappedData = *ppData;\n            m_MapCount = 1;\n        }\n        return result;\n    }\n}\n\nvoid VmaAllocation_T::DedicatedAllocUnmap(VmaAllocator hAllocator)\n{\n    VMA_ASSERT(GetType() == ALLOCATION_TYPE_DEDICATED);\n\n    if((m_MapCount & ~MAP_COUNT_FLAG_PERSISTENT_MAP) != 0)\n    {\n        --m_MapCount;\n        if(m_MapCount == 0)\n        {\n            m_DedicatedAllocation.m_pMappedData = VMA_NULL;\n            (*hAllocator->GetVulkanFunctions().vkUnmapMemory)(\n                hAllocator->m_hDevice,\n                m_DedicatedAllocation.m_hMemory);\n        }\n    }\n    else\n    {\n        VMA_ASSERT(0 && \"Unmapping dedicated allocation not previously mapped.\");\n    }\n}\n\n#if VMA_STATS_STRING_ENABLED\n\nstatic void VmaPrintStatInfo(VmaJsonWriter& json, const VmaStatInfo& stat)\n{\n    json.BeginObject();\n\n    json.WriteString(\"Blocks\");\n    json.WriteNumber(stat.blockCount);\n\n    json.WriteString(\"Allocations\");\n    json.WriteNumber(stat.allocationCount);\n\n    json.WriteString(\"UnusedRanges\");\n    json.WriteNumber(stat.unusedRangeCount);\n\n    json.WriteString(\"UsedBytes\");\n    json.WriteNumber(stat.usedBytes);\n\n    json.WriteString(\"UnusedBytes\");\n    json.WriteNumber(stat.unusedBytes);\n\n    if(stat.allocationCount > 1)\n    {\n        json.WriteString(\"AllocationSize\");\n        json.BeginObject(true);\n        json.WriteString(\"Min\");\n        json.WriteNumber(stat.allocationSizeMin);\n        json.WriteString(\"Avg\");\n        json.WriteNumber(stat.allocationSizeAvg);\n        json.WriteString(\"Max\");\n        json.WriteNumber(stat.allocationSizeMax);\n        json.EndObject();\n    }\n\n    if(stat.unusedRangeCount > 1)\n    {\n        json.WriteString(\"UnusedRangeSize\");\n        json.BeginObject(true);\n        json.WriteString(\"Min\");\n        json.WriteNumber(stat.unusedRangeSizeMin);\n        json.WriteString(\"Avg\");\n        json.WriteNumber(stat.unusedRangeSizeAvg);\n        json.WriteString(\"Max\");\n        json.WriteNumber(stat.unusedRangeSizeMax);\n        json.EndObject();\n    }\n\n    json.EndObject();\n}\n\n#endif // #if VMA_STATS_STRING_ENABLED\n\nstruct VmaSuballocationItemSizeLess\n{\n    bool operator()(\n        const VmaSuballocationList::iterator lhs,\n        const VmaSuballocationList::iterator rhs) const\n    {\n        return lhs->size < rhs->size;\n    }\n    bool operator()(\n        const VmaSuballocationList::iterator lhs,\n        VkDeviceSize rhsSize) const\n    {\n        return lhs->size < rhsSize;\n    }\n};\n\n\n////////////////////////////////////////////////////////////////////////////////\n// class VmaBlockMetadata\n\nVmaBlockMetadata::VmaBlockMetadata(const VkAllocationCallbacks* pAllocationCallbacks, bool isVirtual) :\n    m_Size(0),\n    m_pAllocationCallbacks(pAllocationCallbacks),\n    m_IsVirtual(isVirtual)\n{\n}\n\n#if VMA_STATS_STRING_ENABLED\n\nvoid VmaBlockMetadata::PrintDetailedMap_Begin(class VmaJsonWriter& json,\n    VkDeviceSize unusedBytes,\n    size_t allocationCount,\n    size_t unusedRangeCount) const\n{\n    json.BeginObject();\n\n    json.WriteString(\"TotalBytes\");\n    json.WriteNumber(GetSize());\n\n    json.WriteString(\"UnusedBytes\");\n    json.WriteNumber(unusedBytes);\n\n    json.WriteString(\"Allocations\");\n    json.WriteNumber((uint64_t)allocationCount);\n\n    json.WriteString(\"UnusedRanges\");\n    json.WriteNumber((uint64_t)unusedRangeCount);\n\n    json.WriteString(\"Suballocations\");\n    json.BeginArray();\n}\n\nvoid VmaBlockMetadata::PrintDetailedMap_Allocation(class VmaJsonWriter& json,\n    VkDeviceSize offset, VkDeviceSize size, void* userData) const\n{\n    json.BeginObject(true);\n\n    json.WriteString(\"Offset\");\n    json.WriteNumber(offset);\n\n    if(IsVirtual())\n    {\n        json.WriteString(\"Type\");\n        json.WriteString(\"VirtualAllocation\");\n\n        json.WriteString(\"Size\");\n        json.WriteNumber(size);\n\n        if(userData != VMA_NULL)\n        {\n            json.WriteString(\"UserData\");\n            json.BeginString();\n            json.ContinueString_Pointer(userData);\n            json.EndString();\n        }\n    }\n    else\n    {\n        ((VmaAllocation)userData)->PrintParameters(json);\n    }\n\n    json.EndObject();\n}\n\nvoid VmaBlockMetadata::PrintDetailedMap_UnusedRange(class VmaJsonWriter& json,\n    VkDeviceSize offset,\n    VkDeviceSize size) const\n{\n    json.BeginObject(true);\n\n    json.WriteString(\"Offset\");\n    json.WriteNumber(offset);\n\n    json.WriteString(\"Type\");\n    json.WriteString(VMA_SUBALLOCATION_TYPE_NAMES[VMA_SUBALLOCATION_TYPE_FREE]);\n\n    json.WriteString(\"Size\");\n    json.WriteNumber(size);\n\n    json.EndObject();\n}\n\nvoid VmaBlockMetadata::PrintDetailedMap_End(class VmaJsonWriter& json) const\n{\n    json.EndArray();\n    json.EndObject();\n}\n\n#endif // #if VMA_STATS_STRING_ENABLED\n\n////////////////////////////////////////////////////////////////////////////////\n// class VmaBlockMetadata_Generic\n\nVmaBlockMetadata_Generic::VmaBlockMetadata_Generic(const VkAllocationCallbacks* pAllocationCallbacks, bool isVirtual) :\n    VmaBlockMetadata(pAllocationCallbacks, isVirtual),\n    m_FreeCount(0),\n    m_SumFreeSize(0),\n    m_Suballocations(VmaStlAllocator<VmaSuballocation>(pAllocationCallbacks)),\n    m_FreeSuballocationsBySize(VmaStlAllocator<VmaSuballocationList::iterator>(pAllocationCallbacks))\n{\n}\n\nVmaBlockMetadata_Generic::~VmaBlockMetadata_Generic()\n{\n}\n\nvoid VmaBlockMetadata_Generic::Init(VkDeviceSize size)\n{\n    VmaBlockMetadata::Init(size);\n\n    m_FreeCount = 1;\n    m_SumFreeSize = size;\n\n    VmaSuballocation suballoc = {};\n    suballoc.offset = 0;\n    suballoc.size = size;\n    suballoc.type = VMA_SUBALLOCATION_TYPE_FREE;\n\n    m_Suballocations.push_back(suballoc);\n    m_FreeSuballocationsBySize.push_back(m_Suballocations.begin());\n}\n\nbool VmaBlockMetadata_Generic::Validate() const\n{\n    VMA_VALIDATE(!m_Suballocations.empty());\n\n    // Expected offset of new suballocation as calculated from previous ones.\n    VkDeviceSize calculatedOffset = 0;\n    // Expected number of free suballocations as calculated from traversing their list.\n    uint32_t calculatedFreeCount = 0;\n    // Expected sum size of free suballocations as calculated from traversing their list.\n    VkDeviceSize calculatedSumFreeSize = 0;\n    // Expected number of free suballocations that should be registered in\n    // m_FreeSuballocationsBySize calculated from traversing their list.\n    size_t freeSuballocationsToRegister = 0;\n    // True if previous visited suballocation was free.\n    bool prevFree = false;\n\n    const VkDeviceSize debugMargin = GetDebugMargin();\n\n    for(const auto& subAlloc : m_Suballocations)\n    {\n        // Actual offset of this suballocation doesn't match expected one.\n        VMA_VALIDATE(subAlloc.offset == calculatedOffset);\n\n        const bool currFree = (subAlloc.type == VMA_SUBALLOCATION_TYPE_FREE);\n        // Two adjacent free suballocations are invalid. They should be merged.\n        VMA_VALIDATE(!prevFree || !currFree);\n\n        VmaAllocation alloc = (VmaAllocation)subAlloc.userData;\n        if(!IsVirtual())\n        {\n            VMA_VALIDATE(currFree == (alloc == VK_NULL_HANDLE));\n        }\n\n        if(currFree)\n        {\n            calculatedSumFreeSize += subAlloc.size;\n            ++calculatedFreeCount;\n            ++freeSuballocationsToRegister;\n\n            // Margin required between allocations - every free space must be at least that large.\n            VMA_VALIDATE(subAlloc.size >= debugMargin);\n        }\n        else\n        {\n            if(!IsVirtual())\n            {\n                VMA_VALIDATE(alloc->GetOffset() == subAlloc.offset);\n                VMA_VALIDATE(alloc->GetSize() == subAlloc.size);\n            }\n\n            // Margin required between allocations - previous allocation must be free.\n            VMA_VALIDATE(debugMargin == 0 || prevFree);\n        }\n\n        calculatedOffset += subAlloc.size;\n        prevFree = currFree;\n    }\n\n    // Number of free suballocations registered in m_FreeSuballocationsBySize doesn't\n    // match expected one.\n    VMA_VALIDATE(m_FreeSuballocationsBySize.size() == freeSuballocationsToRegister);\n\n    VkDeviceSize lastSize = 0;\n    for(size_t i = 0; i < m_FreeSuballocationsBySize.size(); ++i)\n    {\n        VmaSuballocationList::iterator suballocItem = m_FreeSuballocationsBySize[i];\n\n        // Only free suballocations can be registered in m_FreeSuballocationsBySize.\n        VMA_VALIDATE(suballocItem->type == VMA_SUBALLOCATION_TYPE_FREE);\n        // They must be sorted by size ascending.\n        VMA_VALIDATE(suballocItem->size >= lastSize);\n\n        lastSize = suballocItem->size;\n    }\n\n    // Check if totals match calculated values.\n    VMA_VALIDATE(ValidateFreeSuballocationList());\n    VMA_VALIDATE(calculatedOffset == GetSize());\n    VMA_VALIDATE(calculatedSumFreeSize == m_SumFreeSize);\n    VMA_VALIDATE(calculatedFreeCount == m_FreeCount);\n\n    return true;\n}\n\nVkDeviceSize VmaBlockMetadata_Generic::GetUnusedRangeSizeMax() const\n{\n    if(!m_FreeSuballocationsBySize.empty())\n    {\n        return m_FreeSuballocationsBySize.back()->size;\n    }\n    else\n    {\n        return 0;\n    }\n}\n\nbool VmaBlockMetadata_Generic::IsEmpty() const\n{\n    return (m_Suballocations.size() == 1) && (m_FreeCount == 1);\n}\n\nvoid VmaBlockMetadata_Generic::CalcAllocationStatInfo(VmaStatInfo& outInfo) const\n{\n    const uint32_t rangeCount = (uint32_t)m_Suballocations.size();\n    VmaInitStatInfo(outInfo);\n    outInfo.blockCount = 1;\n\n    for(const auto& suballoc : m_Suballocations)\n    {\n        if(suballoc.type != VMA_SUBALLOCATION_TYPE_FREE)\n        {\n            VmaAddStatInfoAllocation(outInfo, suballoc.size);\n        }\n        else\n        {\n            VmaAddStatInfoUnusedRange(outInfo, suballoc.size);\n        }\n    }\n}\n\nvoid VmaBlockMetadata_Generic::AddPoolStats(VmaPoolStats& inoutStats) const\n{\n    const uint32_t rangeCount = (uint32_t)m_Suballocations.size();\n\n    inoutStats.size += GetSize();\n    inoutStats.unusedSize += m_SumFreeSize;\n    inoutStats.allocationCount += rangeCount - m_FreeCount;\n    inoutStats.unusedRangeCount += m_FreeCount;\n    inoutStats.unusedRangeSizeMax = VMA_MAX(inoutStats.unusedRangeSizeMax, GetUnusedRangeSizeMax());\n}\n\n#if VMA_STATS_STRING_ENABLED\n\nvoid VmaBlockMetadata_Generic::PrintDetailedMap(class VmaJsonWriter& json) const\n{\n    PrintDetailedMap_Begin(json,\n        m_SumFreeSize, // unusedBytes\n        m_Suballocations.size() - (size_t)m_FreeCount, // allocationCount\n        m_FreeCount); // unusedRangeCount\n\n    for(const auto& suballoc : m_Suballocations)\n    {\n        if(suballoc.type == VMA_SUBALLOCATION_TYPE_FREE)\n        {\n            PrintDetailedMap_UnusedRange(json, suballoc.offset, suballoc.size);\n        }\n        else\n        {\n            PrintDetailedMap_Allocation(json, suballoc.offset, suballoc.size, suballoc.userData);\n        }\n    }\n\n    PrintDetailedMap_End(json);\n}\n\n#endif // #if VMA_STATS_STRING_ENABLED\n\nbool VmaBlockMetadata_Generic::CreateAllocationRequest(\n    uint32_t currentFrameIndex,\n    uint32_t frameInUseCount,\n    VkDeviceSize bufferImageGranularity,\n    VkDeviceSize allocSize,\n    VkDeviceSize allocAlignment,\n    bool upperAddress,\n    VmaSuballocationType allocType,\n    bool canMakeOtherLost,\n    uint32_t strategy,\n    VmaAllocationRequest* pAllocationRequest)\n{\n    VMA_ASSERT(allocSize > 0);\n    VMA_ASSERT(!upperAddress);\n    VMA_ASSERT(allocType != VMA_SUBALLOCATION_TYPE_FREE);\n    VMA_ASSERT(pAllocationRequest != VMA_NULL);\n    VMA_HEAVY_ASSERT(Validate());\n\n    allocSize = AlignAllocationSize(allocSize);\n\n    pAllocationRequest->type = VmaAllocationRequestType::Normal;\n    pAllocationRequest->size = allocSize;\n\n    const VkDeviceSize debugMargin = GetDebugMargin();\n\n    // There is not enough total free space in this block to fulfill the request: Early return.\n    if(canMakeOtherLost == false &&\n        m_SumFreeSize < allocSize + 2 * debugMargin)\n    {\n        return false;\n    }\n\n    // New algorithm, efficiently searching freeSuballocationsBySize.\n    const size_t freeSuballocCount = m_FreeSuballocationsBySize.size();\n    if(freeSuballocCount > 0)\n    {\n        if(strategy == VMA_ALLOCATION_CREATE_STRATEGY_BEST_FIT_BIT)\n        {\n            // Find first free suballocation with size not less than allocSize + 2 * debugMargin.\n            VmaSuballocationList::iterator* const it = VmaBinaryFindFirstNotLess(\n                m_FreeSuballocationsBySize.data(),\n                m_FreeSuballocationsBySize.data() + freeSuballocCount,\n                allocSize + 2 * debugMargin,\n                VmaSuballocationItemSizeLess());\n            size_t index = it - m_FreeSuballocationsBySize.data();\n            for(; index < freeSuballocCount; ++index)\n            {\n                if(CheckAllocation(\n                    currentFrameIndex,\n                    frameInUseCount,\n                    bufferImageGranularity,\n                    allocSize,\n                    allocAlignment,\n                    allocType,\n                    m_FreeSuballocationsBySize[index],\n                    false, // canMakeOtherLost\n                    &pAllocationRequest->offset,\n                    &pAllocationRequest->itemsToMakeLostCount,\n                    &pAllocationRequest->sumFreeSize,\n                    &pAllocationRequest->sumItemSize))\n                {\n                    pAllocationRequest->item = m_FreeSuballocationsBySize[index];\n                    return true;\n                }\n            }\n        }\n        else if(strategy == VMA_ALLOCATION_INTERNAL_STRATEGY_MIN_OFFSET)\n        {\n            for(VmaSuballocationList::iterator it = m_Suballocations.begin();\n                it != m_Suballocations.end();\n                ++it)\n            {\n                if(it->type == VMA_SUBALLOCATION_TYPE_FREE && CheckAllocation(\n                    currentFrameIndex,\n                    frameInUseCount,\n                    bufferImageGranularity,\n                    allocSize,\n                    allocAlignment,\n                    allocType,\n                    it,\n                    false, // canMakeOtherLost\n                    &pAllocationRequest->offset,\n                    &pAllocationRequest->itemsToMakeLostCount,\n                    &pAllocationRequest->sumFreeSize,\n                    &pAllocationRequest->sumItemSize))\n                {\n                    pAllocationRequest->item = it;\n                    return true;\n                }\n            }\n        }\n        else // WORST_FIT, FIRST_FIT\n        {\n            // Search staring from biggest suballocations.\n            for(size_t index = freeSuballocCount; index--; )\n            {\n                if(CheckAllocation(\n                    currentFrameIndex,\n                    frameInUseCount,\n                    bufferImageGranularity,\n                    allocSize,\n                    allocAlignment,\n                    allocType,\n                    m_FreeSuballocationsBySize[index],\n                    false, // canMakeOtherLost\n                    &pAllocationRequest->offset,\n                    &pAllocationRequest->itemsToMakeLostCount,\n                    &pAllocationRequest->sumFreeSize,\n                    &pAllocationRequest->sumItemSize))\n                {\n                    pAllocationRequest->item = m_FreeSuballocationsBySize[index];\n                    return true;\n                }\n            }\n        }\n    }\n\n    if(canMakeOtherLost)\n    {\n        VMA_ASSERT(!IsVirtual());\n        // Brute-force algorithm. TODO: Come up with something better.\n\n        bool found = false;\n        VmaAllocationRequest tmpAllocRequest = {};\n        tmpAllocRequest.type = VmaAllocationRequestType::Normal;\n        tmpAllocRequest.size = allocSize;\n        for(VmaSuballocationList::iterator suballocIt = m_Suballocations.begin();\n            suballocIt != m_Suballocations.end();\n            ++suballocIt)\n        {\n            VmaAllocation const alloc = (VmaAllocation)suballocIt->userData;\n            if(suballocIt->type == VMA_SUBALLOCATION_TYPE_FREE ||\n                alloc->CanBecomeLost())\n            {\n                if(CheckAllocation(\n                    currentFrameIndex,\n                    frameInUseCount,\n                    bufferImageGranularity,\n                    allocSize,\n                    allocAlignment,\n                    allocType,\n                    suballocIt,\n                    canMakeOtherLost,\n                    &tmpAllocRequest.offset,\n                    &tmpAllocRequest.itemsToMakeLostCount,\n                    &tmpAllocRequest.sumFreeSize,\n                    &tmpAllocRequest.sumItemSize))\n                {\n                    if(strategy == VMA_ALLOCATION_CREATE_STRATEGY_FIRST_FIT_BIT)\n                    {\n                        *pAllocationRequest = tmpAllocRequest;\n                        pAllocationRequest->item = suballocIt;\n                        break;\n                    }\n                    if(!found || tmpAllocRequest.CalcCost() < pAllocationRequest->CalcCost())\n                    {\n                        *pAllocationRequest = tmpAllocRequest;\n                        pAllocationRequest->item = suballocIt;\n                        found = true;\n                    }\n                }\n            }\n        }\n\n        return found;\n    }\n\n    return false;\n}\n\nbool VmaBlockMetadata_Generic::MakeRequestedAllocationsLost(\n    uint32_t currentFrameIndex,\n    uint32_t frameInUseCount,\n    VmaAllocationRequest* pAllocationRequest)\n{\n    VMA_ASSERT(!IsVirtual());\n    VMA_ASSERT(pAllocationRequest && pAllocationRequest->type == VmaAllocationRequestType::Normal);\n\n    while(pAllocationRequest->itemsToMakeLostCount > 0)\n    {\n        if(pAllocationRequest->item->type == VMA_SUBALLOCATION_TYPE_FREE)\n        {\n            ++pAllocationRequest->item;\n        }\n        VMA_ASSERT(pAllocationRequest->item != m_Suballocations.end());\n        VmaAllocation const alloc = (VmaAllocation)pAllocationRequest->item->userData;\n        VMA_ASSERT(alloc != VK_NULL_HANDLE && alloc->CanBecomeLost());\n        if(alloc->MakeLost(currentFrameIndex, frameInUseCount))\n        {\n            pAllocationRequest->item = FreeSuballocation(pAllocationRequest->item);\n            --pAllocationRequest->itemsToMakeLostCount;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    VMA_HEAVY_ASSERT(Validate());\n    VMA_ASSERT(pAllocationRequest->item != m_Suballocations.end());\n    VMA_ASSERT(pAllocationRequest->item->type == VMA_SUBALLOCATION_TYPE_FREE);\n\n    return true;\n}\n\nuint32_t VmaBlockMetadata_Generic::MakeAllocationsLost(uint32_t currentFrameIndex, uint32_t frameInUseCount)\n{\n    VMA_ASSERT(!IsVirtual());\n    uint32_t lostAllocationCount = 0;\n    for(VmaSuballocationList::iterator it = m_Suballocations.begin();\n        it != m_Suballocations.end();\n        ++it)\n    {\n        VmaAllocation const alloc = (VmaAllocation)it->userData;\n        if(it->type != VMA_SUBALLOCATION_TYPE_FREE &&\n            alloc->CanBecomeLost() &&\n            alloc->MakeLost(currentFrameIndex, frameInUseCount))\n        {\n            it = FreeSuballocation(it);\n            ++lostAllocationCount;\n        }\n    }\n    return lostAllocationCount;\n}\n\nVkResult VmaBlockMetadata_Generic::CheckCorruption(const void* pBlockData)\n{\n    for(auto& suballoc : m_Suballocations)\n    {\n        if(suballoc.type != VMA_SUBALLOCATION_TYPE_FREE)\n        {\n            if(!VmaValidateMagicValue(pBlockData, suballoc.offset - GetDebugMargin()))\n            {\n                VMA_ASSERT(0 && \"MEMORY CORRUPTION DETECTED BEFORE VALIDATED ALLOCATION!\");\n                return VK_ERROR_UNKNOWN;\n            }\n            if(!VmaValidateMagicValue(pBlockData, suballoc.offset + suballoc.size))\n            {\n                VMA_ASSERT(0 && \"MEMORY CORRUPTION DETECTED AFTER VALIDATED ALLOCATION!\");\n                return VK_ERROR_UNKNOWN;\n            }\n        }\n    }\n\n    return VK_SUCCESS;\n}\n\nvoid VmaBlockMetadata_Generic::Alloc(\n    const VmaAllocationRequest& request,\n    VmaSuballocationType type,\n    void* userData)\n{\n    VMA_ASSERT(request.type == VmaAllocationRequestType::Normal);\n    VMA_ASSERT(request.item != m_Suballocations.end());\n    VmaSuballocation& suballoc = *request.item;\n    // Given suballocation is a free block.\n    VMA_ASSERT(suballoc.type == VMA_SUBALLOCATION_TYPE_FREE);\n    // Given offset is inside this suballocation.\n    VMA_ASSERT(request.offset >= suballoc.offset);\n    const VkDeviceSize paddingBegin = request.offset - suballoc.offset;\n    VMA_ASSERT(suballoc.size >= paddingBegin + request.size);\n    const VkDeviceSize paddingEnd = suballoc.size - paddingBegin - request.size;\n\n    // Unregister this free suballocation from m_FreeSuballocationsBySize and update\n    // it to become used.\n    UnregisterFreeSuballocation(request.item);\n\n    suballoc.offset = request.offset;\n    suballoc.size = request.size;\n    suballoc.type = type;\n    suballoc.userData = userData;\n\n    // If there are any free bytes remaining at the end, insert new free suballocation after current one.\n    if(paddingEnd)\n    {\n        VmaSuballocation paddingSuballoc = {};\n        paddingSuballoc.offset = request.offset + request.size;\n        paddingSuballoc.size = paddingEnd;\n        paddingSuballoc.type = VMA_SUBALLOCATION_TYPE_FREE;\n        VmaSuballocationList::iterator next = request.item;\n        ++next;\n        const VmaSuballocationList::iterator paddingEndItem =\n            m_Suballocations.insert(next, paddingSuballoc);\n        RegisterFreeSuballocation(paddingEndItem);\n    }\n\n    // If there are any free bytes remaining at the beginning, insert new free suballocation before current one.\n    if(paddingBegin)\n    {\n        VmaSuballocation paddingSuballoc = {};\n        paddingSuballoc.offset = request.offset - paddingBegin;\n        paddingSuballoc.size = paddingBegin;\n        paddingSuballoc.type = VMA_SUBALLOCATION_TYPE_FREE;\n        const VmaSuballocationList::iterator paddingBeginItem =\n            m_Suballocations.insert(request.item, paddingSuballoc);\n        RegisterFreeSuballocation(paddingBeginItem);\n    }\n\n    // Update totals.\n    m_FreeCount = m_FreeCount - 1;\n    if(paddingBegin > 0)\n    {\n        ++m_FreeCount;\n    }\n    if(paddingEnd > 0)\n    {\n        ++m_FreeCount;\n    }\n    m_SumFreeSize -= request.size;\n}\n\nvoid VmaBlockMetadata_Generic::FreeAtOffset(VkDeviceSize offset)\n{\n    for(VmaSuballocationList::iterator suballocItem = m_Suballocations.begin();\n        suballocItem != m_Suballocations.end();\n        ++suballocItem)\n    {\n        VmaSuballocation& suballoc = *suballocItem;\n        if(suballoc.offset == offset)\n        {\n            FreeSuballocation(suballocItem);\n            return;\n        }\n    }\n    VMA_ASSERT(0 && \"Not found!\");\n}\n\nvoid VmaBlockMetadata_Generic::GetAllocationInfo(VkDeviceSize offset, VmaVirtualAllocationInfo& outInfo)\n{\n    for (VmaSuballocationList::const_iterator suballocItem = m_Suballocations.begin();\n        suballocItem != m_Suballocations.end();\n        ++suballocItem)\n    {\n        const VmaSuballocation& suballoc = *suballocItem;\n        if (suballoc.offset == offset)\n        {\n            outInfo.size = suballoc.size;\n            outInfo.pUserData = suballoc.userData;\n            return;\n        }\n    }\n    VMA_ASSERT(0 && \"Not found!\");\n}\n\nvoid VmaBlockMetadata_Generic::Clear()\n{\n    const VkDeviceSize size = GetSize();\n\n    VMA_ASSERT(IsVirtual());\n    m_FreeCount = 1;\n    m_SumFreeSize = size;\n    m_Suballocations.clear();\n    m_FreeSuballocationsBySize.clear();\n\n    VmaSuballocation suballoc = {};\n    suballoc.offset = 0;\n    suballoc.size = size;\n    suballoc.type = VMA_SUBALLOCATION_TYPE_FREE;\n    m_Suballocations.push_back(suballoc);\n\n    m_FreeSuballocationsBySize.push_back(m_Suballocations.begin());\n}\n\nvoid VmaBlockMetadata_Generic::SetAllocationUserData(VkDeviceSize offset, void* userData)\n{\n    for (VmaSuballocationList::iterator suballocItem = m_Suballocations.begin();\n        suballocItem != m_Suballocations.end();\n        ++suballocItem)\n    {\n        VmaSuballocation& suballoc = *suballocItem;\n        if (suballoc.offset == offset)\n        {\n            suballoc.userData = userData;\n            return;\n        }\n    }\n    VMA_ASSERT(0 && \"Not found!\");\n}\n\nbool VmaBlockMetadata_Generic::ValidateFreeSuballocationList() const\n{\n    VkDeviceSize lastSize = 0;\n    for(size_t i = 0, count = m_FreeSuballocationsBySize.size(); i < count; ++i)\n    {\n        const VmaSuballocationList::iterator it = m_FreeSuballocationsBySize[i];\n\n        VMA_VALIDATE(it->type == VMA_SUBALLOCATION_TYPE_FREE);\n        VMA_VALIDATE(it->size >= lastSize);\n        lastSize = it->size;\n    }\n    return true;\n}\n\nbool VmaBlockMetadata_Generic::CheckAllocation(\n    uint32_t currentFrameIndex,\n    uint32_t frameInUseCount,\n    VkDeviceSize bufferImageGranularity,\n    VkDeviceSize allocSize,\n    VkDeviceSize allocAlignment,\n    VmaSuballocationType allocType,\n    VmaSuballocationList::const_iterator suballocItem,\n    bool canMakeOtherLost,\n    VkDeviceSize* pOffset,\n    size_t* itemsToMakeLostCount,\n    VkDeviceSize* pSumFreeSize,\n    VkDeviceSize* pSumItemSize) const\n{\n    VMA_ASSERT(allocSize > 0);\n    VMA_ASSERT(allocType != VMA_SUBALLOCATION_TYPE_FREE);\n    VMA_ASSERT(suballocItem != m_Suballocations.cend());\n    VMA_ASSERT(pOffset != VMA_NULL);\n\n    *itemsToMakeLostCount = 0;\n    *pSumFreeSize = 0;\n    *pSumItemSize = 0;\n\n    const VkDeviceSize debugMargin = GetDebugMargin();\n\n    if(canMakeOtherLost)\n    {\n        VMA_ASSERT(!IsVirtual());\n        if(suballocItem->type == VMA_SUBALLOCATION_TYPE_FREE)\n        {\n            *pSumFreeSize = suballocItem->size;\n        }\n        else\n        {\n            VmaAllocation const alloc = (VmaAllocation)suballocItem->userData;\n            if(alloc->CanBecomeLost() &&\n                alloc->GetLastUseFrameIndex() + frameInUseCount < currentFrameIndex)\n            {\n                ++*itemsToMakeLostCount;\n                *pSumItemSize = suballocItem->size;\n            }\n            else\n            {\n                return false;\n            }\n        }\n\n        // Remaining size is too small for this request: Early return.\n        if(GetSize() - suballocItem->offset < allocSize)\n        {\n            return false;\n        }\n\n        // Start from offset equal to beginning of this suballocation.\n        *pOffset = suballocItem->offset;\n\n        // Apply debugMargin at the beginning.\n        if(debugMargin > 0)\n        {\n            *pOffset += debugMargin;\n        }\n\n        // Apply alignment.\n        *pOffset = VmaAlignUp(*pOffset, allocAlignment);\n\n        // Check previous suballocations for BufferImageGranularity conflicts.\n        // Make bigger alignment if necessary.\n        if(bufferImageGranularity > 1 && bufferImageGranularity != allocAlignment)\n        {\n            bool bufferImageGranularityConflict = false;\n            VmaSuballocationList::const_iterator prevSuballocItem = suballocItem;\n            while(prevSuballocItem != m_Suballocations.cbegin())\n            {\n                --prevSuballocItem;\n                const VmaSuballocation& prevSuballoc = *prevSuballocItem;\n                if(VmaBlocksOnSamePage(prevSuballoc.offset, prevSuballoc.size, *pOffset, bufferImageGranularity))\n                {\n                    if(VmaIsBufferImageGranularityConflict(prevSuballoc.type, allocType))\n                    {\n                        bufferImageGranularityConflict = true;\n                        break;\n                    }\n                }\n                else\n                    // Already on previous page.\n                    break;\n            }\n            if(bufferImageGranularityConflict)\n            {\n                *pOffset = VmaAlignUp(*pOffset, bufferImageGranularity);\n            }\n        }\n\n        // Now that we have final *pOffset, check if we are past suballocItem.\n        // If yes, return false - this function should be called for another suballocItem as starting point.\n        if(*pOffset >= suballocItem->offset + suballocItem->size)\n        {\n            return false;\n        }\n\n        // Calculate padding at the beginning based on current offset.\n        const VkDeviceSize paddingBegin = *pOffset - suballocItem->offset;\n\n        // Calculate required margin at the end.\n        const VkDeviceSize requiredEndMargin = debugMargin;\n\n        const VkDeviceSize totalSize = paddingBegin + allocSize + requiredEndMargin;\n        // Another early return check.\n        if(suballocItem->offset + totalSize > GetSize())\n        {\n            return false;\n        }\n\n        // Advance lastSuballocItem until desired size is reached.\n        // Update itemsToMakeLostCount.\n        VmaSuballocationList::const_iterator lastSuballocItem = suballocItem;\n        if(totalSize > suballocItem->size)\n        {\n            VkDeviceSize remainingSize = totalSize - suballocItem->size;\n            while(remainingSize > 0)\n            {\n                ++lastSuballocItem;\n                if(lastSuballocItem == m_Suballocations.cend())\n                {\n                    return false;\n                }\n                if(lastSuballocItem->type == VMA_SUBALLOCATION_TYPE_FREE)\n                {\n                    *pSumFreeSize += lastSuballocItem->size;\n                }\n                else\n                {\n                    VmaAllocation const lastSuballocAlloc = (VmaAllocation)lastSuballocItem->userData;\n                    VMA_ASSERT(lastSuballocAlloc != VK_NULL_HANDLE);\n                    if(lastSuballocAlloc->CanBecomeLost() &&\n                        lastSuballocAlloc->GetLastUseFrameIndex() + frameInUseCount < currentFrameIndex)\n                    {\n                        ++*itemsToMakeLostCount;\n                        *pSumItemSize += lastSuballocItem->size;\n                    }\n                    else\n                    {\n                        return false;\n                    }\n                }\n                remainingSize = (lastSuballocItem->size < remainingSize) ?\n                    remainingSize - lastSuballocItem->size : 0;\n            }\n        }\n\n        // Check next suballocations for BufferImageGranularity conflicts.\n        // If conflict exists, we must mark more allocations lost or fail.\n        if(allocSize % bufferImageGranularity || *pOffset % bufferImageGranularity)\n        {\n            VmaSuballocationList::const_iterator nextSuballocItem = lastSuballocItem;\n            ++nextSuballocItem;\n            while(nextSuballocItem != m_Suballocations.cend())\n            {\n                const VmaSuballocation& nextSuballoc = *nextSuballocItem;\n                if(VmaBlocksOnSamePage(*pOffset, allocSize, nextSuballoc.offset, bufferImageGranularity))\n                {\n                    if(VmaIsBufferImageGranularityConflict(allocType, nextSuballoc.type))\n                    {\n                        VmaAllocation const nextSuballocAlloc = (VmaAllocation)nextSuballoc.userData;\n                        VMA_ASSERT(nextSuballocAlloc != VK_NULL_HANDLE);\n                        if(nextSuballocAlloc->CanBecomeLost() &&\n                            nextSuballocAlloc->GetLastUseFrameIndex() + frameInUseCount < currentFrameIndex)\n                        {\n                            ++*itemsToMakeLostCount;\n                        }\n                        else\n                        {\n                            return false;\n                        }\n                    }\n                }\n                else\n                {\n                    // Already on next page.\n                    break;\n                }\n                ++nextSuballocItem;\n            }\n        }\n    }\n    else\n    {\n        const VmaSuballocation& suballoc = *suballocItem;\n        VMA_ASSERT(suballoc.type == VMA_SUBALLOCATION_TYPE_FREE);\n\n        *pSumFreeSize = suballoc.size;\n\n        // Size of this suballocation is too small for this request: Early return.\n        if(suballoc.size < allocSize)\n        {\n            return false;\n        }\n\n        // Start from offset equal to beginning of this suballocation.\n        *pOffset = suballoc.offset;\n\n        // Apply debugMargin at the beginning.\n        if(debugMargin > 0)\n        {\n            *pOffset += debugMargin;\n        }\n\n        // Apply alignment.\n        *pOffset = VmaAlignUp(*pOffset, allocAlignment);\n\n        // Check previous suballocations for BufferImageGranularity conflicts.\n        // Make bigger alignment if necessary.\n        if(bufferImageGranularity > 1 && bufferImageGranularity != allocAlignment)\n        {\n            bool bufferImageGranularityConflict = false;\n            VmaSuballocationList::const_iterator prevSuballocItem = suballocItem;\n            while(prevSuballocItem != m_Suballocations.cbegin())\n            {\n                --prevSuballocItem;\n                const VmaSuballocation& prevSuballoc = *prevSuballocItem;\n                if(VmaBlocksOnSamePage(prevSuballoc.offset, prevSuballoc.size, *pOffset, bufferImageGranularity))\n                {\n                    if(VmaIsBufferImageGranularityConflict(prevSuballoc.type, allocType))\n                    {\n                        bufferImageGranularityConflict = true;\n                        break;\n                    }\n                }\n                else\n                    // Already on previous page.\n                    break;\n            }\n            if(bufferImageGranularityConflict)\n            {\n                *pOffset = VmaAlignUp(*pOffset, bufferImageGranularity);\n            }\n        }\n\n        // Calculate padding at the beginning based on current offset.\n        const VkDeviceSize paddingBegin = *pOffset - suballoc.offset;\n\n        // Calculate required margin at the end.\n        const VkDeviceSize requiredEndMargin = debugMargin;\n\n        // Fail if requested size plus margin before and after is bigger than size of this suballocation.\n        if(paddingBegin + allocSize + requiredEndMargin > suballoc.size)\n        {\n            return false;\n        }\n\n        // Check next suballocations for BufferImageGranularity conflicts.\n        // If conflict exists, allocation cannot be made here.\n        if(allocSize % bufferImageGranularity || *pOffset % bufferImageGranularity)\n        {\n            VmaSuballocationList::const_iterator nextSuballocItem = suballocItem;\n            ++nextSuballocItem;\n            while(nextSuballocItem != m_Suballocations.cend())\n            {\n                const VmaSuballocation& nextSuballoc = *nextSuballocItem;\n                if(VmaBlocksOnSamePage(*pOffset, allocSize, nextSuballoc.offset, bufferImageGranularity))\n                {\n                    if(VmaIsBufferImageGranularityConflict(allocType, nextSuballoc.type))\n                    {\n                        return false;\n                    }\n                }\n                else\n                {\n                    // Already on next page.\n                    break;\n                }\n                ++nextSuballocItem;\n            }\n        }\n    }\n\n    // All tests passed: Success. pOffset is already filled.\n    return true;\n}\n\nvoid VmaBlockMetadata_Generic::MergeFreeWithNext(VmaSuballocationList::iterator item)\n{\n    VMA_ASSERT(item != m_Suballocations.end());\n    VMA_ASSERT(item->type == VMA_SUBALLOCATION_TYPE_FREE);\n\n    VmaSuballocationList::iterator nextItem = item;\n    ++nextItem;\n    VMA_ASSERT(nextItem != m_Suballocations.end());\n    VMA_ASSERT(nextItem->type == VMA_SUBALLOCATION_TYPE_FREE);\n\n    item->size += nextItem->size;\n    --m_FreeCount;\n    m_Suballocations.erase(nextItem);\n}\n\nVmaSuballocationList::iterator VmaBlockMetadata_Generic::FreeSuballocation(VmaSuballocationList::iterator suballocItem)\n{\n    // Change this suballocation to be marked as free.\n    VmaSuballocation& suballoc = *suballocItem;\n    suballoc.type = VMA_SUBALLOCATION_TYPE_FREE;\n    suballoc.userData = VMA_NULL;\n\n    // Update totals.\n    ++m_FreeCount;\n    m_SumFreeSize += suballoc.size;\n\n    // Merge with previous and/or next suballocation if it's also free.\n    bool mergeWithNext = false;\n    bool mergeWithPrev = false;\n\n    VmaSuballocationList::iterator nextItem = suballocItem;\n    ++nextItem;\n    if((nextItem != m_Suballocations.end()) && (nextItem->type == VMA_SUBALLOCATION_TYPE_FREE))\n    {\n        mergeWithNext = true;\n    }\n\n    VmaSuballocationList::iterator prevItem = suballocItem;\n    if(suballocItem != m_Suballocations.begin())\n    {\n        --prevItem;\n        if(prevItem->type == VMA_SUBALLOCATION_TYPE_FREE)\n        {\n            mergeWithPrev = true;\n        }\n    }\n\n    if(mergeWithNext)\n    {\n        UnregisterFreeSuballocation(nextItem);\n        MergeFreeWithNext(suballocItem);\n    }\n\n    if(mergeWithPrev)\n    {\n        UnregisterFreeSuballocation(prevItem);\n        MergeFreeWithNext(prevItem);\n        RegisterFreeSuballocation(prevItem);\n        return prevItem;\n    }\n    else\n    {\n        RegisterFreeSuballocation(suballocItem);\n        return suballocItem;\n    }\n}\n\nvoid VmaBlockMetadata_Generic::RegisterFreeSuballocation(VmaSuballocationList::iterator item)\n{\n    VMA_ASSERT(item->type == VMA_SUBALLOCATION_TYPE_FREE);\n    VMA_ASSERT(item->size > 0);\n\n    // You may want to enable this validation at the beginning or at the end of\n    // this function, depending on what do you want to check.\n    VMA_HEAVY_ASSERT(ValidateFreeSuballocationList());\n\n    if(m_FreeSuballocationsBySize.empty())\n    {\n        m_FreeSuballocationsBySize.push_back(item);\n    }\n    else\n    {\n        VmaVectorInsertSorted<VmaSuballocationItemSizeLess>(m_FreeSuballocationsBySize, item);\n    }\n\n    //VMA_HEAVY_ASSERT(ValidateFreeSuballocationList());\n}\n\n\nvoid VmaBlockMetadata_Generic::UnregisterFreeSuballocation(VmaSuballocationList::iterator item)\n{\n    VMA_ASSERT(item->type == VMA_SUBALLOCATION_TYPE_FREE);\n    VMA_ASSERT(item->size > 0);\n\n    // You may want to enable this validation at the beginning or at the end of\n    // this function, depending on what do you want to check.\n    VMA_HEAVY_ASSERT(ValidateFreeSuballocationList());\n\n    VmaSuballocationList::iterator* const it = VmaBinaryFindFirstNotLess(\n        m_FreeSuballocationsBySize.data(),\n        m_FreeSuballocationsBySize.data() + m_FreeSuballocationsBySize.size(),\n        item,\n        VmaSuballocationItemSizeLess());\n    for(size_t index = it - m_FreeSuballocationsBySize.data();\n        index < m_FreeSuballocationsBySize.size();\n        ++index)\n    {\n        if(m_FreeSuballocationsBySize[index] == item)\n        {\n            VmaVectorRemove(m_FreeSuballocationsBySize, index);\n            return;\n        }\n        VMA_ASSERT((m_FreeSuballocationsBySize[index]->size == item->size) && \"Not found.\");\n    }\n    VMA_ASSERT(0 && \"Not found.\");\n\n    //VMA_HEAVY_ASSERT(ValidateFreeSuballocationList());\n}\n\nbool VmaBlockMetadata_Generic::IsBufferImageGranularityConflictPossible(\n    VkDeviceSize bufferImageGranularity,\n    VmaSuballocationType& inOutPrevSuballocType) const\n{\n    if(bufferImageGranularity == 1 || IsEmpty() || IsVirtual())\n    {\n        return false;\n    }\n\n    VkDeviceSize minAlignment = VK_WHOLE_SIZE;\n    bool typeConflictFound = false;\n    for(const auto& suballoc : m_Suballocations)\n    {\n        const VmaSuballocationType suballocType = suballoc.type;\n        if(suballocType != VMA_SUBALLOCATION_TYPE_FREE)\n        {\n            VmaAllocation const alloc = (VmaAllocation)suballoc.userData;\n            minAlignment = VMA_MIN(minAlignment, alloc->GetAlignment());\n            if(VmaIsBufferImageGranularityConflict(inOutPrevSuballocType, suballocType))\n            {\n                typeConflictFound = true;\n            }\n            inOutPrevSuballocType = suballocType;\n        }\n    }\n\n    return typeConflictFound || minAlignment >= bufferImageGranularity;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// class VmaBlockMetadata_Linear\n\nVmaBlockMetadata_Linear::VmaBlockMetadata_Linear(const VkAllocationCallbacks* pAllocationCallbacks, bool isVirtual) :\n    VmaBlockMetadata(pAllocationCallbacks, isVirtual),\n    m_SumFreeSize(0),\n    m_Suballocations0(VmaStlAllocator<VmaSuballocation>(pAllocationCallbacks)),\n    m_Suballocations1(VmaStlAllocator<VmaSuballocation>(pAllocationCallbacks)),\n    m_1stVectorIndex(0),\n    m_2ndVectorMode(SECOND_VECTOR_EMPTY),\n    m_1stNullItemsBeginCount(0),\n    m_1stNullItemsMiddleCount(0),\n    m_2ndNullItemsCount(0)\n{\n}\n\nVmaBlockMetadata_Linear::~VmaBlockMetadata_Linear()\n{\n}\n\nvoid VmaBlockMetadata_Linear::Init(VkDeviceSize size)\n{\n    VmaBlockMetadata::Init(size);\n    m_SumFreeSize = size;\n}\n\nbool VmaBlockMetadata_Linear::Validate() const\n{\n    const SuballocationVectorType& suballocations1st = AccessSuballocations1st();\n    const SuballocationVectorType& suballocations2nd = AccessSuballocations2nd();\n\n    VMA_VALIDATE(suballocations2nd.empty() == (m_2ndVectorMode == SECOND_VECTOR_EMPTY));\n    VMA_VALIDATE(!suballocations1st.empty() ||\n        suballocations2nd.empty() ||\n        m_2ndVectorMode != SECOND_VECTOR_RING_BUFFER);\n\n    if(!suballocations1st.empty())\n    {\n        // Null item at the beginning should be accounted into m_1stNullItemsBeginCount.\n        VMA_VALIDATE(suballocations1st[m_1stNullItemsBeginCount].type != VMA_SUBALLOCATION_TYPE_FREE);\n        // Null item at the end should be just pop_back().\n        VMA_VALIDATE(suballocations1st.back().type != VMA_SUBALLOCATION_TYPE_FREE);\n    }\n    if(!suballocations2nd.empty())\n    {\n        // Null item at the end should be just pop_back().\n        VMA_VALIDATE(suballocations2nd.back().type != VMA_SUBALLOCATION_TYPE_FREE);\n    }\n\n    VMA_VALIDATE(m_1stNullItemsBeginCount + m_1stNullItemsMiddleCount <= suballocations1st.size());\n    VMA_VALIDATE(m_2ndNullItemsCount <= suballocations2nd.size());\n\n    VkDeviceSize sumUsedSize = 0;\n    const size_t suballoc1stCount = suballocations1st.size();\n    const VkDeviceSize debugMargin = GetDebugMargin();\n    VkDeviceSize offset = debugMargin;\n\n    if(m_2ndVectorMode == SECOND_VECTOR_RING_BUFFER)\n    {\n        const size_t suballoc2ndCount = suballocations2nd.size();\n        size_t nullItem2ndCount = 0;\n        for(size_t i = 0; i < suballoc2ndCount; ++i)\n        {\n            const VmaSuballocation& suballoc = suballocations2nd[i];\n            const bool currFree = (suballoc.type == VMA_SUBALLOCATION_TYPE_FREE);\n\n            VmaAllocation const alloc = (VmaAllocation)suballoc.userData;\n            if(!IsVirtual())\n            {\n                VMA_VALIDATE(currFree == (alloc == VK_NULL_HANDLE));\n            }\n            VMA_VALIDATE(suballoc.offset >= offset);\n\n            if(!currFree)\n            {\n                if(!IsVirtual())\n                {\n                    VMA_VALIDATE(alloc->GetOffset() == suballoc.offset);\n                    VMA_VALIDATE(alloc->GetSize() == suballoc.size);\n                }\n                sumUsedSize += suballoc.size;\n            }\n            else\n            {\n                ++nullItem2ndCount;\n            }\n\n            offset = suballoc.offset + suballoc.size + debugMargin;\n        }\n\n        VMA_VALIDATE(nullItem2ndCount == m_2ndNullItemsCount);\n    }\n\n    for(size_t i = 0; i < m_1stNullItemsBeginCount; ++i)\n    {\n        const VmaSuballocation& suballoc = suballocations1st[i];\n        VMA_VALIDATE(suballoc.type == VMA_SUBALLOCATION_TYPE_FREE &&\n            suballoc.userData == VMA_NULL);\n    }\n\n    size_t nullItem1stCount = m_1stNullItemsBeginCount;\n\n    for(size_t i = m_1stNullItemsBeginCount; i < suballoc1stCount; ++i)\n    {\n        const VmaSuballocation& suballoc = suballocations1st[i];\n        const bool currFree = (suballoc.type == VMA_SUBALLOCATION_TYPE_FREE);\n\n        VmaAllocation const alloc = (VmaAllocation)suballoc.userData;\n        if(!IsVirtual())\n        {\n            VMA_VALIDATE(currFree == (alloc == VK_NULL_HANDLE));\n        }\n        VMA_VALIDATE(suballoc.offset >= offset);\n        VMA_VALIDATE(i >= m_1stNullItemsBeginCount || currFree);\n\n        if(!currFree)\n        {\n            if(!IsVirtual())\n            {\n                VMA_VALIDATE(alloc->GetOffset() == suballoc.offset);\n                VMA_VALIDATE(alloc->GetSize() == suballoc.size);\n            }\n            sumUsedSize += suballoc.size;\n        }\n        else\n        {\n            ++nullItem1stCount;\n        }\n\n        offset = suballoc.offset + suballoc.size + debugMargin;\n    }\n    VMA_VALIDATE(nullItem1stCount == m_1stNullItemsBeginCount + m_1stNullItemsMiddleCount);\n\n    if(m_2ndVectorMode == SECOND_VECTOR_DOUBLE_STACK)\n    {\n        const size_t suballoc2ndCount = suballocations2nd.size();\n        size_t nullItem2ndCount = 0;\n        for(size_t i = suballoc2ndCount; i--; )\n        {\n            const VmaSuballocation& suballoc = suballocations2nd[i];\n            const bool currFree = (suballoc.type == VMA_SUBALLOCATION_TYPE_FREE);\n\n            VmaAllocation const alloc = (VmaAllocation)suballoc.userData;\n            if(!IsVirtual())\n            {\n                VMA_VALIDATE(currFree == (alloc == VK_NULL_HANDLE));\n            }\n            VMA_VALIDATE(suballoc.offset >= offset);\n\n            if(!currFree)\n            {\n                if(!IsVirtual())\n                {\n                    VMA_VALIDATE(alloc->GetOffset() == suballoc.offset);\n                    VMA_VALIDATE(alloc->GetSize() == suballoc.size);\n                }\n                sumUsedSize += suballoc.size;\n            }\n            else\n            {\n                ++nullItem2ndCount;\n            }\n\n            offset = suballoc.offset + suballoc.size + debugMargin;\n        }\n\n        VMA_VALIDATE(nullItem2ndCount == m_2ndNullItemsCount);\n    }\n\n    VMA_VALIDATE(offset <= GetSize());\n    VMA_VALIDATE(m_SumFreeSize == GetSize() - sumUsedSize);\n\n    return true;\n}\n\nsize_t VmaBlockMetadata_Linear::GetAllocationCount() const\n{\n    return AccessSuballocations1st().size() - m_1stNullItemsBeginCount - m_1stNullItemsMiddleCount +\n        AccessSuballocations2nd().size() - m_2ndNullItemsCount;\n}\n\nVkDeviceSize VmaBlockMetadata_Linear::GetUnusedRangeSizeMax() const\n{\n    const VkDeviceSize size = GetSize();\n\n    /*\n    We don't consider gaps inside allocation vectors with freed allocations because\n    they are not suitable for reuse in linear allocator. We consider only space that\n    is available for new allocations.\n    */\n    if(IsEmpty())\n    {\n        return size;\n    }\n\n    const SuballocationVectorType& suballocations1st = AccessSuballocations1st();\n\n    switch(m_2ndVectorMode)\n    {\n    case SECOND_VECTOR_EMPTY:\n        /*\n        Available space is after end of 1st, as well as before beginning of 1st (which\n        would make it a ring buffer).\n        */\n        {\n            const size_t suballocations1stCount = suballocations1st.size();\n            VMA_ASSERT(suballocations1stCount > m_1stNullItemsBeginCount);\n            const VmaSuballocation& firstSuballoc = suballocations1st[m_1stNullItemsBeginCount];\n            const VmaSuballocation& lastSuballoc  = suballocations1st[suballocations1stCount - 1];\n            return VMA_MAX(\n                firstSuballoc.offset,\n                size - (lastSuballoc.offset + lastSuballoc.size));\n        }\n        break;\n\n    case SECOND_VECTOR_RING_BUFFER:\n        /*\n        Available space is only between end of 2nd and beginning of 1st.\n        */\n        {\n            const SuballocationVectorType& suballocations2nd = AccessSuballocations2nd();\n            const VmaSuballocation& lastSuballoc2nd = suballocations2nd.back();\n            const VmaSuballocation& firstSuballoc1st = suballocations1st[m_1stNullItemsBeginCount];\n            return firstSuballoc1st.offset - (lastSuballoc2nd.offset + lastSuballoc2nd.size);\n        }\n        break;\n\n    case SECOND_VECTOR_DOUBLE_STACK:\n        /*\n        Available space is only between end of 1st and top of 2nd.\n        */\n        {\n            const SuballocationVectorType& suballocations2nd = AccessSuballocations2nd();\n            const VmaSuballocation& topSuballoc2nd = suballocations2nd.back();\n            const VmaSuballocation& lastSuballoc1st = suballocations1st.back();\n            return topSuballoc2nd.offset - (lastSuballoc1st.offset + lastSuballoc1st.size);\n        }\n        break;\n\n    default:\n        VMA_ASSERT(0);\n        return 0;\n    }\n}\n\nvoid VmaBlockMetadata_Linear::CalcAllocationStatInfo(VmaStatInfo& outInfo) const\n{\n    const VkDeviceSize size = GetSize();\n    const SuballocationVectorType& suballocations1st = AccessSuballocations1st();\n    const SuballocationVectorType& suballocations2nd = AccessSuballocations2nd();\n    const size_t suballoc1stCount = suballocations1st.size();\n    const size_t suballoc2ndCount = suballocations2nd.size();\n\n    VmaInitStatInfo(outInfo);\n    outInfo.blockCount = 1;\n\n    VkDeviceSize lastOffset = 0;\n\n    if(m_2ndVectorMode == SECOND_VECTOR_RING_BUFFER)\n    {\n        const VkDeviceSize freeSpace2ndTo1stEnd = suballocations1st[m_1stNullItemsBeginCount].offset;\n        size_t nextAlloc2ndIndex = 0;\n        while(lastOffset < freeSpace2ndTo1stEnd)\n        {\n            // Find next non-null allocation or move nextAllocIndex to the end.\n            while(nextAlloc2ndIndex < suballoc2ndCount &&\n                suballocations2nd[nextAlloc2ndIndex].userData == VMA_NULL)\n            {\n                ++nextAlloc2ndIndex;\n            }\n\n            // Found non-null allocation.\n            if(nextAlloc2ndIndex < suballoc2ndCount)\n            {\n                const VmaSuballocation& suballoc = suballocations2nd[nextAlloc2ndIndex];\n\n                // 1. Process free space before this allocation.\n                if(lastOffset < suballoc.offset)\n                {\n                    // There is free space from lastOffset to suballoc.offset.\n                    const VkDeviceSize unusedRangeSize = suballoc.offset - lastOffset;\n                    VmaAddStatInfoUnusedRange(outInfo, unusedRangeSize);\n                }\n\n                // 2. Process this allocation.\n                // There is allocation with suballoc.offset, suballoc.size.\n                VmaAddStatInfoAllocation(outInfo, suballoc.size);\n\n                // 3. Prepare for next iteration.\n                lastOffset = suballoc.offset + suballoc.size;\n                ++nextAlloc2ndIndex;\n            }\n            // We are at the end.\n            else\n            {\n                // There is free space from lastOffset to freeSpace2ndTo1stEnd.\n                if(lastOffset < freeSpace2ndTo1stEnd)\n                {\n                    const VkDeviceSize unusedRangeSize = freeSpace2ndTo1stEnd - lastOffset;\n                    VmaAddStatInfoUnusedRange(outInfo, unusedRangeSize);\n               }\n\n                // End of loop.\n                lastOffset = freeSpace2ndTo1stEnd;\n            }\n        }\n    }\n\n    size_t nextAlloc1stIndex = m_1stNullItemsBeginCount;\n    const VkDeviceSize freeSpace1stTo2ndEnd =\n        m_2ndVectorMode == SECOND_VECTOR_DOUBLE_STACK ? suballocations2nd.back().offset : size;\n    while(lastOffset < freeSpace1stTo2ndEnd)\n    {\n        // Find next non-null allocation or move nextAllocIndex to the end.\n        while(nextAlloc1stIndex < suballoc1stCount &&\n            suballocations1st[nextAlloc1stIndex].userData == VMA_NULL)\n        {\n            ++nextAlloc1stIndex;\n        }\n\n        // Found non-null allocation.\n        if(nextAlloc1stIndex < suballoc1stCount)\n        {\n            const VmaSuballocation& suballoc = suballocations1st[nextAlloc1stIndex];\n\n            // 1. Process free space before this allocation.\n            if(lastOffset < suballoc.offset)\n            {\n                // There is free space from lastOffset to suballoc.offset.\n                const VkDeviceSize unusedRangeSize = suballoc.offset - lastOffset;\n                VmaAddStatInfoUnusedRange(outInfo, unusedRangeSize);\n            }\n\n            // 2. Process this allocation.\n            // There is allocation with suballoc.offset, suballoc.size.\n            VmaAddStatInfoAllocation(outInfo, suballoc.size);\n\n            // 3. Prepare for next iteration.\n            lastOffset = suballoc.offset + suballoc.size;\n            ++nextAlloc1stIndex;\n        }\n        // We are at the end.\n        else\n        {\n            // There is free space from lastOffset to freeSpace1stTo2ndEnd.\n            if(lastOffset < freeSpace1stTo2ndEnd)\n            {\n                const VkDeviceSize unusedRangeSize = freeSpace1stTo2ndEnd - lastOffset;\n                VmaAddStatInfoUnusedRange(outInfo, unusedRangeSize);\n           }\n\n            // End of loop.\n            lastOffset = freeSpace1stTo2ndEnd;\n        }\n    }\n\n    if(m_2ndVectorMode == SECOND_VECTOR_DOUBLE_STACK)\n    {\n        size_t nextAlloc2ndIndex = suballocations2nd.size() - 1;\n        while(lastOffset < size)\n        {\n            // Find next non-null allocation or move nextAllocIndex to the end.\n            while(nextAlloc2ndIndex != SIZE_MAX &&\n                suballocations2nd[nextAlloc2ndIndex].userData == VMA_NULL)\n            {\n                --nextAlloc2ndIndex;\n            }\n\n            // Found non-null allocation.\n            if(nextAlloc2ndIndex != SIZE_MAX)\n            {\n                const VmaSuballocation& suballoc = suballocations2nd[nextAlloc2ndIndex];\n\n                // 1. Process free space before this allocation.\n                if(lastOffset < suballoc.offset)\n                {\n                    // There is free space from lastOffset to suballoc.offset.\n                    const VkDeviceSize unusedRangeSize = suballoc.offset - lastOffset;\n                    VmaAddStatInfoUnusedRange(outInfo, unusedRangeSize);\n                }\n\n                // 2. Process this allocation.\n                // There is allocation with suballoc.offset, suballoc.size.\n                VmaAddStatInfoAllocation(outInfo, suballoc.size);\n\n                // 3. Prepare for next iteration.\n                lastOffset = suballoc.offset + suballoc.size;\n                --nextAlloc2ndIndex;\n            }\n            // We are at the end.\n            else\n            {\n                // There is free space from lastOffset to size.\n                if(lastOffset < size)\n                {\n                    const VkDeviceSize unusedRangeSize = size - lastOffset;\n                    VmaAddStatInfoUnusedRange(outInfo, unusedRangeSize);\n               }\n\n                // End of loop.\n                lastOffset = size;\n            }\n        }\n    }\n\n    outInfo.unusedBytes = size - outInfo.usedBytes;\n}\n\nvoid VmaBlockMetadata_Linear::AddPoolStats(VmaPoolStats& inoutStats) const\n{\n    const SuballocationVectorType& suballocations1st = AccessSuballocations1st();\n    const SuballocationVectorType& suballocations2nd = AccessSuballocations2nd();\n    const VkDeviceSize size = GetSize();\n    const size_t suballoc1stCount = suballocations1st.size();\n    const size_t suballoc2ndCount = suballocations2nd.size();\n\n    inoutStats.size += size;\n\n    VkDeviceSize lastOffset = 0;\n\n    if(m_2ndVectorMode == SECOND_VECTOR_RING_BUFFER)\n    {\n        const VkDeviceSize freeSpace2ndTo1stEnd = suballocations1st[m_1stNullItemsBeginCount].offset;\n        size_t nextAlloc2ndIndex = m_1stNullItemsBeginCount;\n        while(lastOffset < freeSpace2ndTo1stEnd)\n        {\n            // Find next non-null allocation or move nextAlloc2ndIndex to the end.\n            while(nextAlloc2ndIndex < suballoc2ndCount &&\n                suballocations2nd[nextAlloc2ndIndex].userData == VMA_NULL)\n            {\n                ++nextAlloc2ndIndex;\n            }\n\n            // Found non-null allocation.\n            if(nextAlloc2ndIndex < suballoc2ndCount)\n            {\n                const VmaSuballocation& suballoc = suballocations2nd[nextAlloc2ndIndex];\n\n                // 1. Process free space before this allocation.\n                if(lastOffset < suballoc.offset)\n                {\n                    // There is free space from lastOffset to suballoc.offset.\n                    const VkDeviceSize unusedRangeSize = suballoc.offset - lastOffset;\n                    inoutStats.unusedSize += unusedRangeSize;\n                    ++inoutStats.unusedRangeCount;\n                    inoutStats.unusedRangeSizeMax = VMA_MAX(inoutStats.unusedRangeSizeMax, unusedRangeSize);\n                }\n\n                // 2. Process this allocation.\n                // There is allocation with suballoc.offset, suballoc.size.\n                ++inoutStats.allocationCount;\n\n                // 3. Prepare for next iteration.\n                lastOffset = suballoc.offset + suballoc.size;\n                ++nextAlloc2ndIndex;\n            }\n            // We are at the end.\n            else\n            {\n                if(lastOffset < freeSpace2ndTo1stEnd)\n                {\n                    // There is free space from lastOffset to freeSpace2ndTo1stEnd.\n                    const VkDeviceSize unusedRangeSize = freeSpace2ndTo1stEnd - lastOffset;\n                    inoutStats.unusedSize += unusedRangeSize;\n                    ++inoutStats.unusedRangeCount;\n                    inoutStats.unusedRangeSizeMax = VMA_MAX(inoutStats.unusedRangeSizeMax, unusedRangeSize);\n                }\n\n                // End of loop.\n                lastOffset = freeSpace2ndTo1stEnd;\n            }\n        }\n    }\n\n    size_t nextAlloc1stIndex = m_1stNullItemsBeginCount;\n    const VkDeviceSize freeSpace1stTo2ndEnd =\n        m_2ndVectorMode == SECOND_VECTOR_DOUBLE_STACK ? suballocations2nd.back().offset : size;\n    while(lastOffset < freeSpace1stTo2ndEnd)\n    {\n        // Find next non-null allocation or move nextAllocIndex to the end.\n        while(nextAlloc1stIndex < suballoc1stCount &&\n            suballocations1st[nextAlloc1stIndex].userData == VMA_NULL)\n        {\n            ++nextAlloc1stIndex;\n        }\n\n        // Found non-null allocation.\n        if(nextAlloc1stIndex < suballoc1stCount)\n        {\n            const VmaSuballocation& suballoc = suballocations1st[nextAlloc1stIndex];\n\n            // 1. Process free space before this allocation.\n            if(lastOffset < suballoc.offset)\n            {\n                // There is free space from lastOffset to suballoc.offset.\n                const VkDeviceSize unusedRangeSize = suballoc.offset - lastOffset;\n                inoutStats.unusedSize += unusedRangeSize;\n                ++inoutStats.unusedRangeCount;\n                inoutStats.unusedRangeSizeMax = VMA_MAX(inoutStats.unusedRangeSizeMax, unusedRangeSize);\n            }\n\n            // 2. Process this allocation.\n            // There is allocation with suballoc.offset, suballoc.size.\n            ++inoutStats.allocationCount;\n\n            // 3. Prepare for next iteration.\n            lastOffset = suballoc.offset + suballoc.size;\n            ++nextAlloc1stIndex;\n        }\n        // We are at the end.\n        else\n        {\n            if(lastOffset < freeSpace1stTo2ndEnd)\n            {\n                // There is free space from lastOffset to freeSpace1stTo2ndEnd.\n                const VkDeviceSize unusedRangeSize = freeSpace1stTo2ndEnd - lastOffset;\n                inoutStats.unusedSize += unusedRangeSize;\n                ++inoutStats.unusedRangeCount;\n                inoutStats.unusedRangeSizeMax = VMA_MAX(inoutStats.unusedRangeSizeMax, unusedRangeSize);\n            }\n\n            // End of loop.\n            lastOffset = freeSpace1stTo2ndEnd;\n        }\n    }\n\n    if(m_2ndVectorMode == SECOND_VECTOR_DOUBLE_STACK)\n    {\n        size_t nextAlloc2ndIndex = suballocations2nd.size() - 1;\n        while(lastOffset < size)\n        {\n            // Find next non-null allocation or move nextAlloc2ndIndex to the end.\n            while(nextAlloc2ndIndex != SIZE_MAX &&\n                suballocations2nd[nextAlloc2ndIndex].userData == VMA_NULL)\n            {\n                --nextAlloc2ndIndex;\n            }\n\n            // Found non-null allocation.\n            if(nextAlloc2ndIndex != SIZE_MAX)\n            {\n                const VmaSuballocation& suballoc = suballocations2nd[nextAlloc2ndIndex];\n\n                // 1. Process free space before this allocation.\n                if(lastOffset < suballoc.offset)\n                {\n                    // There is free space from lastOffset to suballoc.offset.\n                    const VkDeviceSize unusedRangeSize = suballoc.offset - lastOffset;\n                    inoutStats.unusedSize += unusedRangeSize;\n                    ++inoutStats.unusedRangeCount;\n                    inoutStats.unusedRangeSizeMax = VMA_MAX(inoutStats.unusedRangeSizeMax, unusedRangeSize);\n                }\n\n                // 2. Process this allocation.\n                // There is allocation with suballoc.offset, suballoc.size.\n                ++inoutStats.allocationCount;\n\n                // 3. Prepare for next iteration.\n                lastOffset = suballoc.offset + suballoc.size;\n                --nextAlloc2ndIndex;\n            }\n            // We are at the end.\n            else\n            {\n                if(lastOffset < size)\n                {\n                    // There is free space from lastOffset to size.\n                    const VkDeviceSize unusedRangeSize = size - lastOffset;\n                    inoutStats.unusedSize += unusedRangeSize;\n                    ++inoutStats.unusedRangeCount;\n                    inoutStats.unusedRangeSizeMax = VMA_MAX(inoutStats.unusedRangeSizeMax, unusedRangeSize);\n                }\n\n                // End of loop.\n                lastOffset = size;\n            }\n        }\n    }\n}\n\n#if VMA_STATS_STRING_ENABLED\nvoid VmaBlockMetadata_Linear::PrintDetailedMap(class VmaJsonWriter& json) const\n{\n    const VkDeviceSize size = GetSize();\n    const SuballocationVectorType& suballocations1st = AccessSuballocations1st();\n    const SuballocationVectorType& suballocations2nd = AccessSuballocations2nd();\n    const size_t suballoc1stCount = suballocations1st.size();\n    const size_t suballoc2ndCount = suballocations2nd.size();\n\n    // FIRST PASS\n\n    size_t unusedRangeCount = 0;\n    VkDeviceSize usedBytes = 0;\n\n    VkDeviceSize lastOffset = 0;\n\n    size_t alloc2ndCount = 0;\n    if(m_2ndVectorMode == SECOND_VECTOR_RING_BUFFER)\n    {\n        const VkDeviceSize freeSpace2ndTo1stEnd = suballocations1st[m_1stNullItemsBeginCount].offset;\n        size_t nextAlloc2ndIndex = 0;\n        while(lastOffset < freeSpace2ndTo1stEnd)\n        {\n            // Find next non-null allocation or move nextAlloc2ndIndex to the end.\n            while(nextAlloc2ndIndex < suballoc2ndCount &&\n                suballocations2nd[nextAlloc2ndIndex].userData == VMA_NULL)\n            {\n                ++nextAlloc2ndIndex;\n            }\n\n            // Found non-null allocation.\n            if(nextAlloc2ndIndex < suballoc2ndCount)\n            {\n                const VmaSuballocation& suballoc = suballocations2nd[nextAlloc2ndIndex];\n\n                // 1. Process free space before this allocation.\n                if(lastOffset < suballoc.offset)\n                {\n                    // There is free space from lastOffset to suballoc.offset.\n                    ++unusedRangeCount;\n                }\n\n                // 2. Process this allocation.\n                // There is allocation with suballoc.offset, suballoc.size.\n                ++alloc2ndCount;\n                usedBytes += suballoc.size;\n\n                // 3. Prepare for next iteration.\n                lastOffset = suballoc.offset + suballoc.size;\n                ++nextAlloc2ndIndex;\n            }\n            // We are at the end.\n            else\n            {\n                if(lastOffset < freeSpace2ndTo1stEnd)\n                {\n                    // There is free space from lastOffset to freeSpace2ndTo1stEnd.\n                    ++unusedRangeCount;\n                }\n\n                // End of loop.\n                lastOffset = freeSpace2ndTo1stEnd;\n            }\n        }\n    }\n\n    size_t nextAlloc1stIndex = m_1stNullItemsBeginCount;\n    size_t alloc1stCount = 0;\n    const VkDeviceSize freeSpace1stTo2ndEnd =\n        m_2ndVectorMode == SECOND_VECTOR_DOUBLE_STACK ? suballocations2nd.back().offset : size;\n    while(lastOffset < freeSpace1stTo2ndEnd)\n    {\n        // Find next non-null allocation or move nextAllocIndex to the end.\n        while(nextAlloc1stIndex < suballoc1stCount &&\n            suballocations1st[nextAlloc1stIndex].userData == VMA_NULL)\n        {\n            ++nextAlloc1stIndex;\n        }\n\n        // Found non-null allocation.\n        if(nextAlloc1stIndex < suballoc1stCount)\n        {\n            const VmaSuballocation& suballoc = suballocations1st[nextAlloc1stIndex];\n\n            // 1. Process free space before this allocation.\n            if(lastOffset < suballoc.offset)\n            {\n                // There is free space from lastOffset to suballoc.offset.\n                ++unusedRangeCount;\n            }\n\n            // 2. Process this allocation.\n            // There is allocation with suballoc.offset, suballoc.size.\n            ++alloc1stCount;\n            usedBytes += suballoc.size;\n\n            // 3. Prepare for next iteration.\n            lastOffset = suballoc.offset + suballoc.size;\n            ++nextAlloc1stIndex;\n        }\n        // We are at the end.\n        else\n        {\n            if(lastOffset < size)\n            {\n                // There is free space from lastOffset to freeSpace1stTo2ndEnd.\n                ++unusedRangeCount;\n            }\n\n            // End of loop.\n            lastOffset = freeSpace1stTo2ndEnd;\n        }\n    }\n\n    if(m_2ndVectorMode == SECOND_VECTOR_DOUBLE_STACK)\n    {\n        size_t nextAlloc2ndIndex = suballocations2nd.size() - 1;\n        while(lastOffset < size)\n        {\n            // Find next non-null allocation or move nextAlloc2ndIndex to the end.\n            while(nextAlloc2ndIndex != SIZE_MAX &&\n                suballocations2nd[nextAlloc2ndIndex].userData == VMA_NULL)\n            {\n                --nextAlloc2ndIndex;\n            }\n\n            // Found non-null allocation.\n            if(nextAlloc2ndIndex != SIZE_MAX)\n            {\n                const VmaSuballocation& suballoc = suballocations2nd[nextAlloc2ndIndex];\n\n                // 1. Process free space before this allocation.\n                if(lastOffset < suballoc.offset)\n                {\n                    // There is free space from lastOffset to suballoc.offset.\n                    ++unusedRangeCount;\n                }\n\n                // 2. Process this allocation.\n                // There is allocation with suballoc.offset, suballoc.size.\n                ++alloc2ndCount;\n                usedBytes += suballoc.size;\n\n                // 3. Prepare for next iteration.\n                lastOffset = suballoc.offset + suballoc.size;\n                --nextAlloc2ndIndex;\n            }\n            // We are at the end.\n            else\n            {\n                if(lastOffset < size)\n                {\n                    // There is free space from lastOffset to size.\n                    ++unusedRangeCount;\n                }\n\n                // End of loop.\n                lastOffset = size;\n            }\n        }\n    }\n\n    const VkDeviceSize unusedBytes = size - usedBytes;\n    PrintDetailedMap_Begin(json, unusedBytes, alloc1stCount + alloc2ndCount, unusedRangeCount);\n\n    // SECOND PASS\n    lastOffset = 0;\n\n    if(m_2ndVectorMode == SECOND_VECTOR_RING_BUFFER)\n    {\n        const VkDeviceSize freeSpace2ndTo1stEnd = suballocations1st[m_1stNullItemsBeginCount].offset;\n        size_t nextAlloc2ndIndex = 0;\n        while(lastOffset < freeSpace2ndTo1stEnd)\n        {\n            // Find next non-null allocation or move nextAlloc2ndIndex to the end.\n            while(nextAlloc2ndIndex < suballoc2ndCount &&\n                suballocations2nd[nextAlloc2ndIndex].userData == VMA_NULL)\n            {\n                ++nextAlloc2ndIndex;\n            }\n\n            // Found non-null allocation.\n            if(nextAlloc2ndIndex < suballoc2ndCount)\n            {\n                const VmaSuballocation& suballoc = suballocations2nd[nextAlloc2ndIndex];\n\n                // 1. Process free space before this allocation.\n                if(lastOffset < suballoc.offset)\n                {\n                    // There is free space from lastOffset to suballoc.offset.\n                    const VkDeviceSize unusedRangeSize = suballoc.offset - lastOffset;\n                    PrintDetailedMap_UnusedRange(json, lastOffset, unusedRangeSize);\n                }\n\n                // 2. Process this allocation.\n                // There is allocation with suballoc.offset, suballoc.size.\n                PrintDetailedMap_Allocation(json, suballoc.offset, suballoc.size, suballoc.userData);\n\n                // 3. Prepare for next iteration.\n                lastOffset = suballoc.offset + suballoc.size;\n                ++nextAlloc2ndIndex;\n            }\n            // We are at the end.\n            else\n            {\n                if(lastOffset < freeSpace2ndTo1stEnd)\n                {\n                    // There is free space from lastOffset to freeSpace2ndTo1stEnd.\n                    const VkDeviceSize unusedRangeSize = freeSpace2ndTo1stEnd - lastOffset;\n                    PrintDetailedMap_UnusedRange(json, lastOffset, unusedRangeSize);\n                }\n\n                // End of loop.\n                lastOffset = freeSpace2ndTo1stEnd;\n            }\n        }\n    }\n\n    nextAlloc1stIndex = m_1stNullItemsBeginCount;\n    while(lastOffset < freeSpace1stTo2ndEnd)\n    {\n        // Find next non-null allocation or move nextAllocIndex to the end.\n        while(nextAlloc1stIndex < suballoc1stCount &&\n            suballocations1st[nextAlloc1stIndex].userData == VMA_NULL)\n        {\n            ++nextAlloc1stIndex;\n        }\n\n        // Found non-null allocation.\n        if(nextAlloc1stIndex < suballoc1stCount)\n        {\n            const VmaSuballocation& suballoc = suballocations1st[nextAlloc1stIndex];\n\n            // 1. Process free space before this allocation.\n            if(lastOffset < suballoc.offset)\n            {\n                // There is free space from lastOffset to suballoc.offset.\n                const VkDeviceSize unusedRangeSize = suballoc.offset - lastOffset;\n                PrintDetailedMap_UnusedRange(json, lastOffset, unusedRangeSize);\n            }\n\n            // 2. Process this allocation.\n            // There is allocation with suballoc.offset, suballoc.size.\n            PrintDetailedMap_Allocation(json, suballoc.offset, suballoc.size, suballoc.userData);\n\n            // 3. Prepare for next iteration.\n            lastOffset = suballoc.offset + suballoc.size;\n            ++nextAlloc1stIndex;\n        }\n        // We are at the end.\n        else\n        {\n            if(lastOffset < freeSpace1stTo2ndEnd)\n            {\n                // There is free space from lastOffset to freeSpace1stTo2ndEnd.\n                const VkDeviceSize unusedRangeSize = freeSpace1stTo2ndEnd - lastOffset;\n                PrintDetailedMap_UnusedRange(json, lastOffset, unusedRangeSize);\n            }\n\n            // End of loop.\n            lastOffset = freeSpace1stTo2ndEnd;\n        }\n    }\n\n    if(m_2ndVectorMode == SECOND_VECTOR_DOUBLE_STACK)\n    {\n        size_t nextAlloc2ndIndex = suballocations2nd.size() - 1;\n        while(lastOffset < size)\n        {\n            // Find next non-null allocation or move nextAlloc2ndIndex to the end.\n            while(nextAlloc2ndIndex != SIZE_MAX &&\n                suballocations2nd[nextAlloc2ndIndex].userData == VMA_NULL)\n            {\n                --nextAlloc2ndIndex;\n            }\n\n            // Found non-null allocation.\n            if(nextAlloc2ndIndex != SIZE_MAX)\n            {\n                const VmaSuballocation& suballoc = suballocations2nd[nextAlloc2ndIndex];\n\n                // 1. Process free space before this allocation.\n                if(lastOffset < suballoc.offset)\n                {\n                    // There is free space from lastOffset to suballoc.offset.\n                    const VkDeviceSize unusedRangeSize = suballoc.offset - lastOffset;\n                    PrintDetailedMap_UnusedRange(json, lastOffset, unusedRangeSize);\n                }\n\n                // 2. Process this allocation.\n                // There is allocation with suballoc.offset, suballoc.size.\n                PrintDetailedMap_Allocation(json, suballoc.offset, suballoc.size, suballoc.userData);\n\n                // 3. Prepare for next iteration.\n                lastOffset = suballoc.offset + suballoc.size;\n                --nextAlloc2ndIndex;\n            }\n            // We are at the end.\n            else\n            {\n                if(lastOffset < size)\n                {\n                    // There is free space from lastOffset to size.\n                    const VkDeviceSize unusedRangeSize = size - lastOffset;\n                    PrintDetailedMap_UnusedRange(json, lastOffset, unusedRangeSize);\n                }\n\n                // End of loop.\n                lastOffset = size;\n            }\n        }\n    }\n\n    PrintDetailedMap_End(json);\n}\n#endif // #if VMA_STATS_STRING_ENABLED\n\nbool VmaBlockMetadata_Linear::CreateAllocationRequest(\n    uint32_t currentFrameIndex,\n    uint32_t frameInUseCount,\n    VkDeviceSize bufferImageGranularity,\n    VkDeviceSize allocSize,\n    VkDeviceSize allocAlignment,\n    bool upperAddress,\n    VmaSuballocationType allocType,\n    bool canMakeOtherLost,\n    uint32_t strategy,\n    VmaAllocationRequest* pAllocationRequest)\n{\n    VMA_ASSERT(allocSize > 0);\n    VMA_ASSERT(allocType != VMA_SUBALLOCATION_TYPE_FREE);\n    VMA_ASSERT(pAllocationRequest != VMA_NULL);\n    VMA_HEAVY_ASSERT(Validate());\n    pAllocationRequest->size = allocSize;\n    return upperAddress ?\n        CreateAllocationRequest_UpperAddress(\n            currentFrameIndex, frameInUseCount, bufferImageGranularity,\n            allocSize, allocAlignment, allocType, canMakeOtherLost, strategy, pAllocationRequest) :\n        CreateAllocationRequest_LowerAddress(\n            currentFrameIndex, frameInUseCount, bufferImageGranularity,\n            allocSize, allocAlignment, allocType, canMakeOtherLost, strategy, pAllocationRequest);\n}\n\nbool VmaBlockMetadata_Linear::CreateAllocationRequest_UpperAddress(\n    uint32_t currentFrameIndex,\n    uint32_t frameInUseCount,\n    VkDeviceSize bufferImageGranularity,\n    VkDeviceSize allocSize,\n    VkDeviceSize allocAlignment,\n    VmaSuballocationType allocType,\n    bool canMakeOtherLost,\n    uint32_t strategy,\n    VmaAllocationRequest* pAllocationRequest)\n{\n    const VkDeviceSize blockSize = GetSize();\n    SuballocationVectorType& suballocations1st = AccessSuballocations1st();\n    SuballocationVectorType& suballocations2nd = AccessSuballocations2nd();\n\n    if(m_2ndVectorMode == SECOND_VECTOR_RING_BUFFER)\n    {\n        VMA_ASSERT(0 && \"Trying to use pool with linear algorithm as double stack, while it is already being used as ring buffer.\");\n        return false;\n    }\n\n    // Try to allocate before 2nd.back(), or end of block if 2nd.empty().\n    if(allocSize > blockSize)\n    {\n        return false;\n    }\n    VkDeviceSize resultBaseOffset = blockSize - allocSize;\n    if(!suballocations2nd.empty())\n    {\n        const VmaSuballocation& lastSuballoc = suballocations2nd.back();\n        resultBaseOffset = lastSuballoc.offset - allocSize;\n        if(allocSize > lastSuballoc.offset)\n        {\n            return false;\n        }\n    }\n\n    // Start from offset equal to end of free space.\n    VkDeviceSize resultOffset = resultBaseOffset;\n\n    const VkDeviceSize debugMargin = GetDebugMargin();\n\n    // Apply debugMargin at the end.\n    if(debugMargin > 0)\n    {\n        if(resultOffset < debugMargin)\n        {\n            return false;\n        }\n        resultOffset -= debugMargin;\n    }\n\n    // Apply alignment.\n    resultOffset = VmaAlignDown(resultOffset, allocAlignment);\n\n    // Check next suballocations from 2nd for BufferImageGranularity conflicts.\n    // Make bigger alignment if necessary.\n    if(bufferImageGranularity > 1 && bufferImageGranularity != allocAlignment && !suballocations2nd.empty())\n    {\n        bool bufferImageGranularityConflict = false;\n        for(size_t nextSuballocIndex = suballocations2nd.size(); nextSuballocIndex--; )\n        {\n            const VmaSuballocation& nextSuballoc = suballocations2nd[nextSuballocIndex];\n            if(VmaBlocksOnSamePage(resultOffset, allocSize, nextSuballoc.offset, bufferImageGranularity))\n            {\n                if(VmaIsBufferImageGranularityConflict(nextSuballoc.type, allocType))\n                {\n                    bufferImageGranularityConflict = true;\n                    break;\n                }\n            }\n            else\n                // Already on previous page.\n                break;\n        }\n        if(bufferImageGranularityConflict)\n        {\n            resultOffset = VmaAlignDown(resultOffset, bufferImageGranularity);\n        }\n    }\n\n    // There is enough free space.\n    const VkDeviceSize endOf1st = !suballocations1st.empty() ?\n        suballocations1st.back().offset + suballocations1st.back().size :\n        0;\n    if(endOf1st + debugMargin <= resultOffset)\n    {\n        // Check previous suballocations for BufferImageGranularity conflicts.\n        // If conflict exists, allocation cannot be made here.\n        if(bufferImageGranularity > 1)\n        {\n            for(size_t prevSuballocIndex = suballocations1st.size(); prevSuballocIndex--; )\n            {\n                const VmaSuballocation& prevSuballoc = suballocations1st[prevSuballocIndex];\n                if(VmaBlocksOnSamePage(prevSuballoc.offset, prevSuballoc.size, resultOffset, bufferImageGranularity))\n                {\n                    if(VmaIsBufferImageGranularityConflict(allocType, prevSuballoc.type))\n                    {\n                        return false;\n                    }\n                }\n                else\n                {\n                    // Already on next page.\n                    break;\n                }\n            }\n        }\n\n        // All tests passed: Success.\n        pAllocationRequest->offset = resultOffset;\n        pAllocationRequest->sumFreeSize = resultBaseOffset + allocSize - endOf1st;\n        pAllocationRequest->sumItemSize = 0;\n        // pAllocationRequest->item unused.\n        pAllocationRequest->itemsToMakeLostCount = 0;\n        pAllocationRequest->type = VmaAllocationRequestType::UpperAddress;\n        return true;\n    }\n\n    return false;\n}\n\nbool VmaBlockMetadata_Linear::CreateAllocationRequest_LowerAddress(\n    uint32_t currentFrameIndex,\n    uint32_t frameInUseCount,\n    VkDeviceSize bufferImageGranularity,\n    VkDeviceSize allocSize,\n    VkDeviceSize allocAlignment,\n    VmaSuballocationType allocType,\n    bool canMakeOtherLost,\n    uint32_t strategy,\n    VmaAllocationRequest* pAllocationRequest)\n{\n    const VkDeviceSize blockSize = GetSize();\n    const VkDeviceSize debugMargin = GetDebugMargin();\n    SuballocationVectorType& suballocations1st = AccessSuballocations1st();\n    SuballocationVectorType& suballocations2nd = AccessSuballocations2nd();\n\n    if(m_2ndVectorMode == SECOND_VECTOR_EMPTY || m_2ndVectorMode == SECOND_VECTOR_DOUBLE_STACK)\n    {\n        // Try to allocate at the end of 1st vector.\n\n        VkDeviceSize resultBaseOffset = 0;\n        if(!suballocations1st.empty())\n        {\n            const VmaSuballocation& lastSuballoc = suballocations1st.back();\n            resultBaseOffset = lastSuballoc.offset + lastSuballoc.size;\n        }\n\n        // Start from offset equal to beginning of free space.\n        VkDeviceSize resultOffset = resultBaseOffset;\n\n        // Apply debugMargin at the beginning.\n        if(debugMargin > 0)\n        {\n            resultOffset += debugMargin;\n        }\n\n        // Apply alignment.\n        resultOffset = VmaAlignUp(resultOffset, allocAlignment);\n\n        // Check previous suballocations for BufferImageGranularity conflicts.\n        // Make bigger alignment if necessary.\n        if(bufferImageGranularity > 1 && bufferImageGranularity != allocAlignment && !suballocations1st.empty())\n        {\n            bool bufferImageGranularityConflict = false;\n            for(size_t prevSuballocIndex = suballocations1st.size(); prevSuballocIndex--; )\n            {\n                const VmaSuballocation& prevSuballoc = suballocations1st[prevSuballocIndex];\n                if(VmaBlocksOnSamePage(prevSuballoc.offset, prevSuballoc.size, resultOffset, bufferImageGranularity))\n                {\n                    if(VmaIsBufferImageGranularityConflict(prevSuballoc.type, allocType))\n                    {\n                        bufferImageGranularityConflict = true;\n                        break;\n                    }\n                }\n                else\n                    // Already on previous page.\n                    break;\n            }\n            if(bufferImageGranularityConflict)\n            {\n                resultOffset = VmaAlignUp(resultOffset, bufferImageGranularity);\n            }\n        }\n\n        const VkDeviceSize freeSpaceEnd = m_2ndVectorMode == SECOND_VECTOR_DOUBLE_STACK ?\n            suballocations2nd.back().offset : blockSize;\n\n        // There is enough free space at the end after alignment.\n        if(resultOffset + allocSize + debugMargin <= freeSpaceEnd)\n        {\n            // Check next suballocations for BufferImageGranularity conflicts.\n            // If conflict exists, allocation cannot be made here.\n            if((allocSize % bufferImageGranularity || resultOffset % bufferImageGranularity) && m_2ndVectorMode == SECOND_VECTOR_DOUBLE_STACK)\n            {\n                for(size_t nextSuballocIndex = suballocations2nd.size(); nextSuballocIndex--; )\n                {\n                    const VmaSuballocation& nextSuballoc = suballocations2nd[nextSuballocIndex];\n                    if(VmaBlocksOnSamePage(resultOffset, allocSize, nextSuballoc.offset, bufferImageGranularity))\n                    {\n                        if(VmaIsBufferImageGranularityConflict(allocType, nextSuballoc.type))\n                        {\n                            return false;\n                        }\n                    }\n                    else\n                    {\n                        // Already on previous page.\n                        break;\n                    }\n                }\n            }\n\n            // All tests passed: Success.\n            pAllocationRequest->offset = resultOffset;\n            pAllocationRequest->sumFreeSize = freeSpaceEnd - resultBaseOffset;\n            pAllocationRequest->sumItemSize = 0;\n            // pAllocationRequest->item, customData unused.\n            pAllocationRequest->type = VmaAllocationRequestType::EndOf1st;\n            pAllocationRequest->itemsToMakeLostCount = 0;\n            return true;\n        }\n    }\n\n    // Wrap-around to end of 2nd vector. Try to allocate there, watching for the\n    // beginning of 1st vector as the end of free space.\n    if(m_2ndVectorMode == SECOND_VECTOR_EMPTY || m_2ndVectorMode == SECOND_VECTOR_RING_BUFFER)\n    {\n        VMA_ASSERT(!suballocations1st.empty());\n\n        VkDeviceSize resultBaseOffset = 0;\n        if(!suballocations2nd.empty())\n        {\n            const VmaSuballocation& lastSuballoc = suballocations2nd.back();\n            resultBaseOffset = lastSuballoc.offset + lastSuballoc.size;\n        }\n\n        // Start from offset equal to beginning of free space.\n        VkDeviceSize resultOffset = resultBaseOffset;\n\n        // Apply debugMargin at the beginning.\n        if(debugMargin > 0)\n        {\n            resultOffset += debugMargin;\n        }\n\n        // Apply alignment.\n        resultOffset = VmaAlignUp(resultOffset, allocAlignment);\n\n        // Check previous suballocations for BufferImageGranularity conflicts.\n        // Make bigger alignment if necessary.\n        if(bufferImageGranularity > 1 && bufferImageGranularity != allocAlignment && !suballocations2nd.empty())\n        {\n            bool bufferImageGranularityConflict = false;\n            for(size_t prevSuballocIndex = suballocations2nd.size(); prevSuballocIndex--; )\n            {\n                const VmaSuballocation& prevSuballoc = suballocations2nd[prevSuballocIndex];\n                if(VmaBlocksOnSamePage(prevSuballoc.offset, prevSuballoc.size, resultOffset, bufferImageGranularity))\n                {\n                    if(VmaIsBufferImageGranularityConflict(prevSuballoc.type, allocType))\n                    {\n                        bufferImageGranularityConflict = true;\n                        break;\n                    }\n                }\n                else\n                    // Already on previous page.\n                    break;\n            }\n            if(bufferImageGranularityConflict)\n            {\n                resultOffset = VmaAlignUp(resultOffset, bufferImageGranularity);\n            }\n        }\n\n        pAllocationRequest->itemsToMakeLostCount = 0;\n        pAllocationRequest->sumItemSize = 0;\n        size_t index1st = m_1stNullItemsBeginCount;\n\n        if(canMakeOtherLost)\n        {\n            VMA_ASSERT(!IsVirtual());\n            while(index1st < suballocations1st.size() &&\n                resultOffset + allocSize + debugMargin > suballocations1st[index1st].offset)\n            {\n                // Next colliding allocation at the beginning of 1st vector found. Try to make it lost.\n                const VmaSuballocation& suballoc = suballocations1st[index1st];\n                if(suballoc.type == VMA_SUBALLOCATION_TYPE_FREE)\n                {\n                    // No problem.\n                }\n                else\n                {\n                    VmaAllocation const alloc = (VmaAllocation)suballoc.userData;\n                    VMA_ASSERT(alloc != VK_NULL_HANDLE);\n                    if(alloc->CanBecomeLost() &&\n                        alloc->GetLastUseFrameIndex() + frameInUseCount < currentFrameIndex)\n                    {\n                        ++pAllocationRequest->itemsToMakeLostCount;\n                        pAllocationRequest->sumItemSize += suballoc.size;\n                    }\n                    else\n                    {\n                        return false;\n                    }\n                }\n                ++index1st;\n            }\n\n            // Check next suballocations for BufferImageGranularity conflicts.\n            // If conflict exists, we must mark more allocations lost or fail.\n            if(allocSize % bufferImageGranularity || resultOffset % bufferImageGranularity)\n            {\n                while(index1st < suballocations1st.size())\n                {\n                    const VmaSuballocation& suballoc = suballocations1st[index1st];\n                    if(VmaBlocksOnSamePage(resultOffset, allocSize, suballoc.offset, bufferImageGranularity))\n                    {\n                        VmaAllocation const alloc = (VmaAllocation)suballoc.userData;\n                        if (alloc != VK_NULL_HANDLE)\n                        {\n                            // Not checking actual VmaIsBufferImageGranularityConflict(allocType, suballoc.type).\n                            if(alloc->CanBecomeLost() &&\n                                alloc->GetLastUseFrameIndex() + frameInUseCount < currentFrameIndex)\n                            {\n                                ++pAllocationRequest->itemsToMakeLostCount;\n                                pAllocationRequest->sumItemSize += suballoc.size;\n                            }\n                            else\n                            {\n                                return false;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        // Already on next page.\n                        break;\n                    }\n                    ++index1st;\n                }\n            }\n\n            // Special case: There is not enough room at the end for this allocation, even after making all from the 1st lost.\n            if(index1st == suballocations1st.size() &&\n                resultOffset + allocSize + debugMargin > blockSize)\n            {\n                // TODO: This is a known bug that it's not yet implemented and the allocation is failing.\n                VMA_DEBUG_LOG(\"Unsupported special case in custom pool with linear allocation algorithm used as ring buffer with allocations that can be lost.\");\n            }\n        }\n\n        // There is enough free space at the end after alignment.\n        if((index1st == suballocations1st.size() && resultOffset + allocSize + debugMargin <= blockSize) ||\n            (index1st < suballocations1st.size() && resultOffset + allocSize + debugMargin <= suballocations1st[index1st].offset))\n        {\n            // Check next suballocations for BufferImageGranularity conflicts.\n            // If conflict exists, allocation cannot be made here.\n            if(allocSize % bufferImageGranularity || resultOffset % bufferImageGranularity)\n            {\n                for(size_t nextSuballocIndex = index1st;\n                    nextSuballocIndex < suballocations1st.size();\n                    nextSuballocIndex++)\n                {\n                    const VmaSuballocation& nextSuballoc = suballocations1st[nextSuballocIndex];\n                    if(VmaBlocksOnSamePage(resultOffset, allocSize, nextSuballoc.offset, bufferImageGranularity))\n                    {\n                        if(VmaIsBufferImageGranularityConflict(allocType, nextSuballoc.type))\n                        {\n                            return false;\n                        }\n                    }\n                    else\n                    {\n                        // Already on next page.\n                        break;\n                    }\n                }\n            }\n\n            // All tests passed: Success.\n            pAllocationRequest->offset = resultOffset;\n            pAllocationRequest->sumFreeSize =\n                (index1st < suballocations1st.size() ? suballocations1st[index1st].offset : blockSize)\n                - resultBaseOffset\n                - pAllocationRequest->sumItemSize;\n            pAllocationRequest->type = VmaAllocationRequestType::EndOf2nd;\n            // pAllocationRequest->item, customData unused.\n            return true;\n        }\n    }\n\n    return false;\n}\n\nbool VmaBlockMetadata_Linear::MakeRequestedAllocationsLost(\n    uint32_t currentFrameIndex,\n    uint32_t frameInUseCount,\n    VmaAllocationRequest* pAllocationRequest)\n{\n    VMA_ASSERT(!IsVirtual());\n\n    if(pAllocationRequest->itemsToMakeLostCount == 0)\n    {\n        return true;\n    }\n\n    VMA_ASSERT(m_2ndVectorMode == SECOND_VECTOR_EMPTY || m_2ndVectorMode == SECOND_VECTOR_RING_BUFFER);\n\n    // We always start from 1st.\n    SuballocationVectorType* suballocations = &AccessSuballocations1st();\n    size_t index = m_1stNullItemsBeginCount;\n    size_t madeLostCount = 0;\n    while(madeLostCount < pAllocationRequest->itemsToMakeLostCount)\n    {\n        if(index == suballocations->size())\n        {\n            index = 0;\n            // If we get to the end of 1st, we wrap around to beginning of 2nd of 1st.\n            if(m_2ndVectorMode == SECOND_VECTOR_RING_BUFFER)\n            {\n                suballocations = &AccessSuballocations2nd();\n            }\n            // else: m_2ndVectorMode == SECOND_VECTOR_EMPTY:\n            // suballocations continues pointing at AccessSuballocations1st().\n            VMA_ASSERT(!suballocations->empty());\n        }\n        VmaSuballocation& suballoc = (*suballocations)[index];\n        if(suballoc.type != VMA_SUBALLOCATION_TYPE_FREE)\n        {\n            VmaAllocation const alloc = (VmaAllocation)suballoc.userData;\n            VMA_ASSERT(alloc != VK_NULL_HANDLE && alloc->CanBecomeLost());\n            if(alloc->MakeLost(currentFrameIndex, frameInUseCount))\n            {\n                suballoc.type = VMA_SUBALLOCATION_TYPE_FREE;\n                suballoc.userData = VMA_NULL;\n                m_SumFreeSize += suballoc.size;\n                if(suballocations == &AccessSuballocations1st())\n                {\n                    ++m_1stNullItemsMiddleCount;\n                }\n                else\n                {\n                    ++m_2ndNullItemsCount;\n                }\n                ++madeLostCount;\n            }\n            else\n            {\n                return false;\n            }\n        }\n        ++index;\n    }\n\n    CleanupAfterFree();\n    //VMA_HEAVY_ASSERT(Validate()); // Already called by CleanupAfterFree().\n\n    return true;\n}\n\nuint32_t VmaBlockMetadata_Linear::MakeAllocationsLost(uint32_t currentFrameIndex, uint32_t frameInUseCount)\n{\n    VMA_ASSERT(!IsVirtual());\n\n    uint32_t lostAllocationCount = 0;\n\n    SuballocationVectorType& suballocations1st = AccessSuballocations1st();\n    for(size_t i = m_1stNullItemsBeginCount, count = suballocations1st.size(); i < count; ++i)\n    {\n        VmaSuballocation& suballoc = suballocations1st[i];\n        VmaAllocation const alloc = (VmaAllocation)suballoc.userData;\n        if(suballoc.type != VMA_SUBALLOCATION_TYPE_FREE &&\n            alloc->CanBecomeLost() &&\n            alloc->MakeLost(currentFrameIndex, frameInUseCount))\n        {\n            suballoc.type = VMA_SUBALLOCATION_TYPE_FREE;\n            suballoc.userData = VMA_NULL;\n            ++m_1stNullItemsMiddleCount;\n            m_SumFreeSize += suballoc.size;\n            ++lostAllocationCount;\n        }\n    }\n\n    SuballocationVectorType& suballocations2nd = AccessSuballocations2nd();\n    for(size_t i = 0, count = suballocations2nd.size(); i < count; ++i)\n    {\n        VmaSuballocation& suballoc = suballocations2nd[i];\n        VmaAllocation const alloc = (VmaAllocation)suballoc.userData;\n        if(suballoc.type != VMA_SUBALLOCATION_TYPE_FREE &&\n            alloc->CanBecomeLost() &&\n            alloc->MakeLost(currentFrameIndex, frameInUseCount))\n        {\n            suballoc.type = VMA_SUBALLOCATION_TYPE_FREE;\n            suballoc.userData = VMA_NULL;\n            ++m_2ndNullItemsCount;\n            m_SumFreeSize += suballoc.size;\n            ++lostAllocationCount;\n        }\n    }\n\n    if(lostAllocationCount)\n    {\n        CleanupAfterFree();\n    }\n\n    return lostAllocationCount;\n}\n\nVkResult VmaBlockMetadata_Linear::CheckCorruption(const void* pBlockData)\n{\n    VMA_ASSERT(!IsVirtual());\n    SuballocationVectorType& suballocations1st = AccessSuballocations1st();\n    for(size_t i = m_1stNullItemsBeginCount, count = suballocations1st.size(); i < count; ++i)\n    {\n        const VmaSuballocation& suballoc = suballocations1st[i];\n        if(suballoc.type != VMA_SUBALLOCATION_TYPE_FREE)\n        {\n            if(!VmaValidateMagicValue(pBlockData, suballoc.offset - GetDebugMargin()))\n            {\n                VMA_ASSERT(0 && \"MEMORY CORRUPTION DETECTED BEFORE VALIDATED ALLOCATION!\");\n                return VK_ERROR_UNKNOWN;\n            }\n            if(!VmaValidateMagicValue(pBlockData, suballoc.offset + suballoc.size))\n            {\n                VMA_ASSERT(0 && \"MEMORY CORRUPTION DETECTED AFTER VALIDATED ALLOCATION!\");\n                return VK_ERROR_UNKNOWN;\n            }\n        }\n    }\n\n    SuballocationVectorType& suballocations2nd = AccessSuballocations2nd();\n    for(size_t i = 0, count = suballocations2nd.size(); i < count; ++i)\n    {\n        const VmaSuballocation& suballoc = suballocations2nd[i];\n        if(suballoc.type != VMA_SUBALLOCATION_TYPE_FREE)\n        {\n            if(!VmaValidateMagicValue(pBlockData, suballoc.offset - GetDebugMargin()))\n            {\n                VMA_ASSERT(0 && \"MEMORY CORRUPTION DETECTED BEFORE VALIDATED ALLOCATION!\");\n                return VK_ERROR_UNKNOWN;\n            }\n            if(!VmaValidateMagicValue(pBlockData, suballoc.offset + suballoc.size))\n            {\n                VMA_ASSERT(0 && \"MEMORY CORRUPTION DETECTED AFTER VALIDATED ALLOCATION!\");\n                return VK_ERROR_UNKNOWN;\n            }\n        }\n    }\n\n    return VK_SUCCESS;\n}\n\nvoid VmaBlockMetadata_Linear::Alloc(\n    const VmaAllocationRequest& request,\n    VmaSuballocationType type,\n    void* userData)\n{\n    const VmaSuballocation newSuballoc = { request.offset, request.size, userData, type };\n\n    switch(request.type)\n    {\n    case VmaAllocationRequestType::UpperAddress:\n        {\n            VMA_ASSERT(m_2ndVectorMode != SECOND_VECTOR_RING_BUFFER &&\n                \"CRITICAL ERROR: Trying to use linear allocator as double stack while it was already used as ring buffer.\");\n            SuballocationVectorType& suballocations2nd = AccessSuballocations2nd();\n            suballocations2nd.push_back(newSuballoc);\n            m_2ndVectorMode = SECOND_VECTOR_DOUBLE_STACK;\n        }\n        break;\n    case VmaAllocationRequestType::EndOf1st:\n        {\n            SuballocationVectorType& suballocations1st = AccessSuballocations1st();\n\n            VMA_ASSERT(suballocations1st.empty() ||\n                request.offset >= suballocations1st.back().offset + suballocations1st.back().size);\n            // Check if it fits before the end of the block.\n            VMA_ASSERT(request.offset + request.size <= GetSize());\n\n            suballocations1st.push_back(newSuballoc);\n        }\n        break;\n    case VmaAllocationRequestType::EndOf2nd:\n        {\n            SuballocationVectorType& suballocations1st = AccessSuballocations1st();\n            // New allocation at the end of 2-part ring buffer, so before first allocation from 1st vector.\n            VMA_ASSERT(!suballocations1st.empty() &&\n                request.offset + request.size <= suballocations1st[m_1stNullItemsBeginCount].offset);\n            SuballocationVectorType& suballocations2nd = AccessSuballocations2nd();\n\n            switch(m_2ndVectorMode)\n            {\n            case SECOND_VECTOR_EMPTY:\n                // First allocation from second part ring buffer.\n                VMA_ASSERT(suballocations2nd.empty());\n                m_2ndVectorMode = SECOND_VECTOR_RING_BUFFER;\n                break;\n            case SECOND_VECTOR_RING_BUFFER:\n                // 2-part ring buffer is already started.\n                VMA_ASSERT(!suballocations2nd.empty());\n                break;\n            case SECOND_VECTOR_DOUBLE_STACK:\n                VMA_ASSERT(0 && \"CRITICAL ERROR: Trying to use linear allocator as ring buffer while it was already used as double stack.\");\n                break;\n            default:\n                VMA_ASSERT(0);\n            }\n\n            suballocations2nd.push_back(newSuballoc);\n        }\n        break;\n    default:\n        VMA_ASSERT(0 && \"CRITICAL INTERNAL ERROR.\");\n    }\n\n    m_SumFreeSize -= newSuballoc.size;\n}\n\nvoid VmaBlockMetadata_Linear::FreeAtOffset(VkDeviceSize offset)\n{\n    SuballocationVectorType& suballocations1st = AccessSuballocations1st();\n    SuballocationVectorType& suballocations2nd = AccessSuballocations2nd();\n\n    if(!suballocations1st.empty())\n    {\n        // First allocation: Mark it as next empty at the beginning.\n        VmaSuballocation& firstSuballoc = suballocations1st[m_1stNullItemsBeginCount];\n        if(firstSuballoc.offset == offset)\n        {\n            firstSuballoc.type = VMA_SUBALLOCATION_TYPE_FREE;\n            firstSuballoc.userData = VMA_NULL;\n            m_SumFreeSize += firstSuballoc.size;\n            ++m_1stNullItemsBeginCount;\n            CleanupAfterFree();\n            return;\n        }\n    }\n\n    // Last allocation in 2-part ring buffer or top of upper stack (same logic).\n    if(m_2ndVectorMode == SECOND_VECTOR_RING_BUFFER ||\n        m_2ndVectorMode == SECOND_VECTOR_DOUBLE_STACK)\n    {\n        VmaSuballocation& lastSuballoc = suballocations2nd.back();\n        if(lastSuballoc.offset == offset)\n        {\n            m_SumFreeSize += lastSuballoc.size;\n            suballocations2nd.pop_back();\n            CleanupAfterFree();\n            return;\n        }\n    }\n    // Last allocation in 1st vector.\n    else if(m_2ndVectorMode == SECOND_VECTOR_EMPTY)\n    {\n        VmaSuballocation& lastSuballoc = suballocations1st.back();\n        if(lastSuballoc.offset == offset)\n        {\n            m_SumFreeSize += lastSuballoc.size;\n            suballocations1st.pop_back();\n            CleanupAfterFree();\n            return;\n        }\n    }\n\n    VmaSuballocation refSuballoc;\n    refSuballoc.offset = offset;\n    // Rest of members stays uninitialized intentionally for better performance.\n\n    // Item from the middle of 1st vector.\n    {\n        const SuballocationVectorType::iterator it = VmaBinaryFindSorted(\n            suballocations1st.begin() + m_1stNullItemsBeginCount,\n            suballocations1st.end(),\n            refSuballoc,\n            VmaSuballocationOffsetLess());\n        if(it != suballocations1st.end())\n        {\n            it->type = VMA_SUBALLOCATION_TYPE_FREE;\n            it->userData = VMA_NULL;\n            ++m_1stNullItemsMiddleCount;\n            m_SumFreeSize += it->size;\n            CleanupAfterFree();\n            return;\n        }\n    }\n\n    if(m_2ndVectorMode != SECOND_VECTOR_EMPTY)\n    {\n        // Item from the middle of 2nd vector.\n        const SuballocationVectorType::iterator it = m_2ndVectorMode == SECOND_VECTOR_RING_BUFFER ?\n            VmaBinaryFindSorted(suballocations2nd.begin(), suballocations2nd.end(), refSuballoc, VmaSuballocationOffsetLess()) :\n            VmaBinaryFindSorted(suballocations2nd.begin(), suballocations2nd.end(), refSuballoc, VmaSuballocationOffsetGreater());\n        if(it != suballocations2nd.end())\n        {\n            it->type = VMA_SUBALLOCATION_TYPE_FREE;\n            it->userData = VMA_NULL;\n            ++m_2ndNullItemsCount;\n            m_SumFreeSize += it->size;\n            CleanupAfterFree();\n            return;\n        }\n    }\n\n    VMA_ASSERT(0 && \"Allocation to free not found in linear allocator!\");\n}\n\nvoid VmaBlockMetadata_Linear::GetAllocationInfo(VkDeviceSize offset, VmaVirtualAllocationInfo& outInfo)\n{\n    VmaSuballocation& suballoc = FindSuballocation(offset);\n    outInfo.size = suballoc.size;\n    outInfo.pUserData = suballoc.userData;\n}\n\nvoid VmaBlockMetadata_Linear::Clear()\n{\n    m_SumFreeSize = GetSize();\n    m_Suballocations0.clear();\n    m_Suballocations1.clear();\n    // Leaving m_1stVectorIndex unchanged - it doesn't matter.\n    m_2ndVectorMode = SECOND_VECTOR_EMPTY;\n    m_1stNullItemsBeginCount = 0;\n    m_1stNullItemsMiddleCount = 0;\n    m_2ndNullItemsCount = 0;\n}\n\nvoid VmaBlockMetadata_Linear::SetAllocationUserData(VkDeviceSize offset, void* userData)\n{\n    VmaSuballocation& suballoc = FindSuballocation(offset);\n    suballoc.userData = userData;\n}\n\nVmaSuballocation& VmaBlockMetadata_Linear::FindSuballocation(VkDeviceSize offset)\n{\n    SuballocationVectorType& suballocations1st = AccessSuballocations1st();\n    SuballocationVectorType& suballocations2nd = AccessSuballocations2nd();\n\n    VmaSuballocation refSuballoc;\n    refSuballoc.offset = offset;\n    // Rest of members stays uninitialized intentionally for better performance.\n\n    // Item from the 1st vector.\n    {\n        const SuballocationVectorType::iterator it = VmaBinaryFindSorted(\n            suballocations1st.begin() + m_1stNullItemsBeginCount,\n            suballocations1st.end(),\n            refSuballoc,\n            VmaSuballocationOffsetLess());\n        if(it != suballocations1st.end())\n        {\n            return *it;\n        }\n    }\n\n    if(m_2ndVectorMode != SECOND_VECTOR_EMPTY)\n    {\n        // Rest of members stays uninitialized intentionally for better performance.\n        const SuballocationVectorType::iterator it = m_2ndVectorMode == SECOND_VECTOR_RING_BUFFER ?\n            VmaBinaryFindSorted(suballocations2nd.begin(), suballocations2nd.end(), refSuballoc, VmaSuballocationOffsetLess()) :\n            VmaBinaryFindSorted(suballocations2nd.begin(), suballocations2nd.end(), refSuballoc, VmaSuballocationOffsetGreater());\n        if(it != suballocations2nd.end())\n        {\n            return *it;\n        }\n    }\n\n    VMA_ASSERT(0 && \"Allocation not found in linear allocator!\");\n    return suballocations1st.back(); // Should never occur.\n}\n\nbool VmaBlockMetadata_Linear::ShouldCompact1st() const\n{\n    const size_t nullItemCount = m_1stNullItemsBeginCount + m_1stNullItemsMiddleCount;\n    const size_t suballocCount = AccessSuballocations1st().size();\n    return suballocCount > 32 && nullItemCount * 2 >= (suballocCount - nullItemCount) * 3;\n}\n\nvoid VmaBlockMetadata_Linear::CleanupAfterFree()\n{\n    SuballocationVectorType& suballocations1st = AccessSuballocations1st();\n    SuballocationVectorType& suballocations2nd = AccessSuballocations2nd();\n\n    if(IsEmpty())\n    {\n        suballocations1st.clear();\n        suballocations2nd.clear();\n        m_1stNullItemsBeginCount = 0;\n        m_1stNullItemsMiddleCount = 0;\n        m_2ndNullItemsCount = 0;\n        m_2ndVectorMode = SECOND_VECTOR_EMPTY;\n    }\n    else\n    {\n        const size_t suballoc1stCount = suballocations1st.size();\n        const size_t nullItem1stCount = m_1stNullItemsBeginCount + m_1stNullItemsMiddleCount;\n        VMA_ASSERT(nullItem1stCount <= suballoc1stCount);\n\n        // Find more null items at the beginning of 1st vector.\n        while(m_1stNullItemsBeginCount < suballoc1stCount &&\n            suballocations1st[m_1stNullItemsBeginCount].type == VMA_SUBALLOCATION_TYPE_FREE)\n        {\n            ++m_1stNullItemsBeginCount;\n            --m_1stNullItemsMiddleCount;\n        }\n\n        // Find more null items at the end of 1st vector.\n        while(m_1stNullItemsMiddleCount > 0 &&\n            suballocations1st.back().type == VMA_SUBALLOCATION_TYPE_FREE)\n        {\n            --m_1stNullItemsMiddleCount;\n            suballocations1st.pop_back();\n        }\n\n        // Find more null items at the end of 2nd vector.\n        while(m_2ndNullItemsCount > 0 &&\n            suballocations2nd.back().type == VMA_SUBALLOCATION_TYPE_FREE)\n        {\n            --m_2ndNullItemsCount;\n            suballocations2nd.pop_back();\n        }\n\n        // Find more null items at the beginning of 2nd vector.\n        while(m_2ndNullItemsCount > 0 &&\n            suballocations2nd[0].type == VMA_SUBALLOCATION_TYPE_FREE)\n        {\n            --m_2ndNullItemsCount;\n            VmaVectorRemove(suballocations2nd, 0);\n        }\n\n        if(ShouldCompact1st())\n        {\n            const size_t nonNullItemCount = suballoc1stCount - nullItem1stCount;\n            size_t srcIndex = m_1stNullItemsBeginCount;\n            for(size_t dstIndex = 0; dstIndex < nonNullItemCount; ++dstIndex)\n            {\n                while(suballocations1st[srcIndex].type == VMA_SUBALLOCATION_TYPE_FREE)\n                {\n                    ++srcIndex;\n                }\n                if(dstIndex != srcIndex)\n                {\n                    suballocations1st[dstIndex] = suballocations1st[srcIndex];\n                }\n                ++srcIndex;\n            }\n            suballocations1st.resize(nonNullItemCount);\n            m_1stNullItemsBeginCount = 0;\n            m_1stNullItemsMiddleCount = 0;\n        }\n\n        // 2nd vector became empty.\n        if(suballocations2nd.empty())\n        {\n            m_2ndVectorMode = SECOND_VECTOR_EMPTY;\n        }\n\n        // 1st vector became empty.\n        if(suballocations1st.size() - m_1stNullItemsBeginCount == 0)\n        {\n            suballocations1st.clear();\n            m_1stNullItemsBeginCount = 0;\n\n            if(!suballocations2nd.empty() && m_2ndVectorMode == SECOND_VECTOR_RING_BUFFER)\n            {\n                // Swap 1st with 2nd. Now 2nd is empty.\n                m_2ndVectorMode = SECOND_VECTOR_EMPTY;\n                m_1stNullItemsMiddleCount = m_2ndNullItemsCount;\n                while(m_1stNullItemsBeginCount < suballocations2nd.size() &&\n                    suballocations2nd[m_1stNullItemsBeginCount].type == VMA_SUBALLOCATION_TYPE_FREE)\n                {\n                    ++m_1stNullItemsBeginCount;\n                    --m_1stNullItemsMiddleCount;\n                }\n                m_2ndNullItemsCount = 0;\n                m_1stVectorIndex ^= 1;\n            }\n        }\n    }\n\n    VMA_HEAVY_ASSERT(Validate());\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n// class VmaBlockMetadata_Buddy\n\nVmaBlockMetadata_Buddy::VmaBlockMetadata_Buddy(const VkAllocationCallbacks* pAllocationCallbacks, bool isVirtual) :\n    VmaBlockMetadata(pAllocationCallbacks, isVirtual),\n    m_NodeAllocator(pAllocationCallbacks,\n        32), // firstBlockCapacity\n    m_Root(VMA_NULL),\n    m_AllocationCount(0),\n    m_FreeCount(1),\n    m_SumFreeSize(0)\n{\n    memset(m_FreeList, 0, sizeof(m_FreeList));\n}\n\nVmaBlockMetadata_Buddy::~VmaBlockMetadata_Buddy()\n{\n    DeleteNodeChildren(m_Root);\n    m_NodeAllocator.Free(m_Root);\n}\n\nvoid VmaBlockMetadata_Buddy::Init(VkDeviceSize size)\n{\n    VmaBlockMetadata::Init(size);\n\n    m_UsableSize = VmaPrevPow2(size);\n    m_SumFreeSize = m_UsableSize;\n\n    // Calculate m_LevelCount.\n    const VkDeviceSize minNodeSize = IsVirtual() ? 1 : 16;\n    m_LevelCount = 1;\n    while(m_LevelCount < MAX_LEVELS &&\n        LevelToNodeSize(m_LevelCount) >= minNodeSize)\n    {\n        ++m_LevelCount;\n    }\n\n    Node* rootNode = m_NodeAllocator.Alloc();\n    rootNode->offset = 0;\n    rootNode->type = Node::TYPE_FREE;\n    rootNode->parent = VMA_NULL;\n    rootNode->buddy = VMA_NULL;\n\n    m_Root = rootNode;\n    AddToFreeListFront(0, rootNode);\n}\n\nbool VmaBlockMetadata_Buddy::Validate() const\n{\n    // Validate tree.\n    ValidationContext ctx;\n    if(!ValidateNode(ctx, VMA_NULL, m_Root, 0, LevelToNodeSize(0)))\n    {\n        VMA_VALIDATE(false && \"ValidateNode failed.\");\n    }\n    VMA_VALIDATE(m_AllocationCount == ctx.calculatedAllocationCount);\n    VMA_VALIDATE(m_SumFreeSize == ctx.calculatedSumFreeSize);\n\n    // Validate free node lists.\n    for(uint32_t level = 0; level < m_LevelCount; ++level)\n    {\n        VMA_VALIDATE(m_FreeList[level].front == VMA_NULL ||\n            m_FreeList[level].front->free.prev == VMA_NULL);\n\n        for(Node* node = m_FreeList[level].front;\n            node != VMA_NULL;\n            node = node->free.next)\n        {\n            VMA_VALIDATE(node->type == Node::TYPE_FREE);\n\n            if(node->free.next == VMA_NULL)\n            {\n                VMA_VALIDATE(m_FreeList[level].back == node);\n            }\n            else\n            {\n                VMA_VALIDATE(node->free.next->free.prev == node);\n            }\n        }\n    }\n\n    // Validate that free lists ar higher levels are empty.\n    for(uint32_t level = m_LevelCount; level < MAX_LEVELS; ++level)\n    {\n        VMA_VALIDATE(m_FreeList[level].front == VMA_NULL && m_FreeList[level].back == VMA_NULL);\n    }\n\n    return true;\n}\n\nVkDeviceSize VmaBlockMetadata_Buddy::GetUnusedRangeSizeMax() const\n{\n    for(uint32_t level = 0; level < m_LevelCount; ++level)\n    {\n        if(m_FreeList[level].front != VMA_NULL)\n        {\n            return LevelToNodeSize(level);\n        }\n    }\n    return 0;\n}\n\nvoid VmaBlockMetadata_Buddy::CalcAllocationStatInfo(VmaStatInfo& outInfo) const\n{\n    VmaInitStatInfo(outInfo);\n    outInfo.blockCount = 1;\n\n    CalcAllocationStatInfoNode(outInfo, m_Root, LevelToNodeSize(0));\n\n    const VkDeviceSize unusableSize = GetUnusableSize();\n    if(unusableSize > 0)\n    {\n        VmaAddStatInfoUnusedRange(outInfo, unusableSize);\n    }\n}\n\nvoid VmaBlockMetadata_Buddy::AddPoolStats(VmaPoolStats& inoutStats) const\n{\n    const VkDeviceSize unusableSize = GetUnusableSize();\n\n    inoutStats.size += GetSize();\n    inoutStats.unusedSize += m_SumFreeSize + unusableSize;\n    inoutStats.allocationCount += m_AllocationCount;\n    inoutStats.unusedRangeCount += m_FreeCount;\n    inoutStats.unusedRangeSizeMax = VMA_MAX(inoutStats.unusedRangeSizeMax, GetUnusedRangeSizeMax());\n\n    if(unusableSize > 0)\n    {\n        ++inoutStats.unusedRangeCount;\n        // Not updating inoutStats.unusedRangeSizeMax with unusableSize because this space is not available for allocations.\n    }\n}\n\n#if VMA_STATS_STRING_ENABLED\n\nvoid VmaBlockMetadata_Buddy::PrintDetailedMap(class VmaJsonWriter& json) const\n{\n    VmaStatInfo stat;\n    CalcAllocationStatInfo(stat);\n\n    PrintDetailedMap_Begin(\n        json,\n        stat.unusedBytes,\n        stat.allocationCount,\n        stat.unusedRangeCount);\n\n    PrintDetailedMapNode(json, m_Root, LevelToNodeSize(0));\n\n    const VkDeviceSize unusableSize = GetUnusableSize();\n    if(unusableSize > 0)\n    {\n        PrintDetailedMap_UnusedRange(json,\n            m_UsableSize, // offset\n            unusableSize); // size\n    }\n\n    PrintDetailedMap_End(json);\n}\n\n#endif // #if VMA_STATS_STRING_ENABLED\n\nbool VmaBlockMetadata_Buddy::CreateAllocationRequest(\n    uint32_t currentFrameIndex,\n    uint32_t frameInUseCount,\n    VkDeviceSize bufferImageGranularity,\n    VkDeviceSize allocSize,\n    VkDeviceSize allocAlignment,\n    bool upperAddress,\n    VmaSuballocationType allocType,\n    bool canMakeOtherLost,\n    uint32_t strategy,\n    VmaAllocationRequest* pAllocationRequest)\n{\n    VMA_ASSERT(!upperAddress && \"VMA_ALLOCATION_CREATE_UPPER_ADDRESS_BIT can be used only with linear algorithm.\");\n\n    allocSize = AlignAllocationSize(allocSize);\n    \n    // Simple way to respect bufferImageGranularity. May be optimized some day.\n    // Whenever it might be an OPTIMAL image...\n    if(allocType == VMA_SUBALLOCATION_TYPE_UNKNOWN ||\n        allocType == VMA_SUBALLOCATION_TYPE_IMAGE_UNKNOWN ||\n        allocType == VMA_SUBALLOCATION_TYPE_IMAGE_OPTIMAL)\n    {\n        allocAlignment = VMA_MAX(allocAlignment, bufferImageGranularity);\n        allocSize = VMA_MAX(allocSize, bufferImageGranularity);\n    }\n\n    if(allocSize > m_UsableSize)\n    {\n        return false;\n    }\n\n    const uint32_t targetLevel = AllocSizeToLevel(allocSize);\n    for(uint32_t level = targetLevel; level--; )\n    {\n        for(Node* freeNode = m_FreeList[level].front;\n            freeNode != VMA_NULL;\n            freeNode = freeNode->free.next)\n        {\n            if(freeNode->offset % allocAlignment == 0)\n            {\n                pAllocationRequest->type = VmaAllocationRequestType::Normal;\n                pAllocationRequest->offset = freeNode->offset;\n                pAllocationRequest->size = allocSize;\n                pAllocationRequest->sumFreeSize = LevelToNodeSize(level);\n                pAllocationRequest->sumItemSize = 0;\n                pAllocationRequest->itemsToMakeLostCount = 0;\n                pAllocationRequest->customData = (void*)(uintptr_t)level;\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nbool VmaBlockMetadata_Buddy::MakeRequestedAllocationsLost(\n    uint32_t currentFrameIndex,\n    uint32_t frameInUseCount,\n    VmaAllocationRequest* pAllocationRequest)\n{\n    /*\n    Lost allocations are not supported in buddy allocator at the moment.\n    Support might be added in the future.\n    */\n    return pAllocationRequest->itemsToMakeLostCount == 0;\n}\n\nuint32_t VmaBlockMetadata_Buddy::MakeAllocationsLost(uint32_t currentFrameIndex, uint32_t frameInUseCount)\n{\n    /*\n    Lost allocations are not supported in buddy allocator at the moment.\n    Support might be added in the future.\n    */\n    return 0;\n}\n\nvoid VmaBlockMetadata_Buddy::Alloc(\n    const VmaAllocationRequest& request,\n    VmaSuballocationType type,\n    void* userData)\n{\n    VMA_ASSERT(request.type == VmaAllocationRequestType::Normal);\n\n    const uint32_t targetLevel = AllocSizeToLevel(request.size);\n    uint32_t currLevel = (uint32_t)(uintptr_t)request.customData;\n\n    Node* currNode = m_FreeList[currLevel].front;\n    VMA_ASSERT(currNode != VMA_NULL && currNode->type == Node::TYPE_FREE);\n    while(currNode->offset != request.offset)\n    {\n        currNode = currNode->free.next;\n        VMA_ASSERT(currNode != VMA_NULL && currNode->type == Node::TYPE_FREE);\n    }\n\n    // Go down, splitting free nodes.\n    while(currLevel < targetLevel)\n    {\n        // currNode is already first free node at currLevel.\n        // Remove it from list of free nodes at this currLevel.\n        RemoveFromFreeList(currLevel, currNode);\n\n        const uint32_t childrenLevel = currLevel + 1;\n\n        // Create two free sub-nodes.\n        Node* leftChild = m_NodeAllocator.Alloc();\n        Node* rightChild = m_NodeAllocator.Alloc();\n\n        leftChild->offset = currNode->offset;\n        leftChild->type = Node::TYPE_FREE;\n        leftChild->parent = currNode;\n        leftChild->buddy = rightChild;\n\n        rightChild->offset = currNode->offset + LevelToNodeSize(childrenLevel);\n        rightChild->type = Node::TYPE_FREE;\n        rightChild->parent = currNode;\n        rightChild->buddy = leftChild;\n\n        // Convert current currNode to split type.\n        currNode->type = Node::TYPE_SPLIT;\n        currNode->split.leftChild = leftChild;\n\n        // Add child nodes to free list. Order is important!\n        AddToFreeListFront(childrenLevel, rightChild);\n        AddToFreeListFront(childrenLevel, leftChild);\n\n        ++m_FreeCount;\n        ++currLevel;\n        currNode = m_FreeList[currLevel].front;\n\n        /*\n        We can be sure that currNode, as left child of node previously split,\n        also fulfills the alignment requirement.\n        */\n    }\n\n    // Remove from free list.\n    VMA_ASSERT(currLevel == targetLevel &&\n        currNode != VMA_NULL &&\n        currNode->type == Node::TYPE_FREE);\n    RemoveFromFreeList(currLevel, currNode);\n\n    // Convert to allocation node.\n    currNode->type = Node::TYPE_ALLOCATION;\n    currNode->allocation.userData = userData;\n\n    ++m_AllocationCount;\n    --m_FreeCount;\n    m_SumFreeSize -= request.size;\n}\n\nvoid VmaBlockMetadata_Buddy::GetAllocationInfo(VkDeviceSize offset, VmaVirtualAllocationInfo& outInfo)\n{\n    uint32_t level = 0;\n    const Node* const node = FindAllocationNode(offset, level);\n    outInfo.size = LevelToNodeSize(level);\n    outInfo.pUserData = node->allocation.userData;\n}\n\nvoid VmaBlockMetadata_Buddy::DeleteNodeChildren(Node* node)\n{\n    if(node->type == Node::TYPE_SPLIT)\n    {\n        DeleteNodeChildren(node->split.leftChild->buddy);\n        DeleteNodeChildren(node->split.leftChild);\n        const VkAllocationCallbacks* allocationCallbacks = GetAllocationCallbacks();\n        m_NodeAllocator.Free(node->split.leftChild->buddy);\n        m_NodeAllocator.Free(node->split.leftChild);\n    }\n}\n\nvoid VmaBlockMetadata_Buddy::Clear()\n{\n    DeleteNodeChildren(m_Root);\n    m_Root->type = Node::TYPE_FREE;\n    m_AllocationCount = 0;\n    m_FreeCount = 1;\n    m_SumFreeSize = m_UsableSize;\n}\n\nvoid VmaBlockMetadata_Buddy::SetAllocationUserData(VkDeviceSize offset, void* userData)\n{\n    uint32_t level = 0;\n    Node* const node = FindAllocationNode(offset, level);\n    node->allocation.userData = userData;\n}\n\nVmaBlockMetadata_Buddy::Node* VmaBlockMetadata_Buddy::FindAllocationNode(VkDeviceSize offset, uint32_t& outLevel)\n{\n    Node* node = m_Root;\n    VkDeviceSize nodeOffset = 0;\n    outLevel = 0;\n    VkDeviceSize levelNodeSize = LevelToNodeSize(0);\n    while(node->type == Node::TYPE_SPLIT)\n    {\n        const VkDeviceSize nextLevelNodeSize = levelNodeSize >> 1;\n        if(offset < nodeOffset + nextLevelNodeSize)\n        {\n            node = node->split.leftChild;\n        }\n        else\n        {\n            node = node->split.leftChild->buddy;\n            nodeOffset += nextLevelNodeSize;\n        }\n        ++outLevel;\n        levelNodeSize = nextLevelNodeSize;\n    }\n\n    VMA_ASSERT(node != VMA_NULL && node->type == Node::TYPE_ALLOCATION);\n    return node;\n}\n\nbool VmaBlockMetadata_Buddy::ValidateNode(ValidationContext& ctx, const Node* parent, const Node* curr, uint32_t level, VkDeviceSize levelNodeSize) const\n{\n    VMA_VALIDATE(level < m_LevelCount);\n    VMA_VALIDATE(curr->parent == parent);\n    VMA_VALIDATE((curr->buddy == VMA_NULL) == (parent == VMA_NULL));\n    VMA_VALIDATE(curr->buddy == VMA_NULL || curr->buddy->buddy == curr);\n    switch(curr->type)\n    {\n    case Node::TYPE_FREE:\n        // curr->free.prev, next are validated separately.\n        ctx.calculatedSumFreeSize += levelNodeSize;\n        ++ctx.calculatedFreeCount;\n        break;\n    case Node::TYPE_ALLOCATION:\n        ++ctx.calculatedAllocationCount;\n        if(!IsVirtual())\n        {\n            VMA_VALIDATE(curr->allocation.userData != VMA_NULL);\n        }\n        break;\n    case Node::TYPE_SPLIT:\n        {\n            const uint32_t childrenLevel = level + 1;\n            const VkDeviceSize childrenLevelNodeSize = levelNodeSize >> 1;\n            const Node* const leftChild = curr->split.leftChild;\n            VMA_VALIDATE(leftChild != VMA_NULL);\n            VMA_VALIDATE(leftChild->offset == curr->offset);\n            if(!ValidateNode(ctx, curr, leftChild, childrenLevel, childrenLevelNodeSize))\n            {\n                VMA_VALIDATE(false && \"ValidateNode for left child failed.\");\n            }\n            const Node* const rightChild = leftChild->buddy;\n            VMA_VALIDATE(rightChild->offset == curr->offset + childrenLevelNodeSize);\n            if(!ValidateNode(ctx, curr, rightChild, childrenLevel, childrenLevelNodeSize))\n            {\n                VMA_VALIDATE(false && \"ValidateNode for right child failed.\");\n            }\n        }\n        break;\n    default:\n        return false;\n    }\n\n    return true;\n}\n\nuint32_t VmaBlockMetadata_Buddy::AllocSizeToLevel(VkDeviceSize allocSize) const\n{\n    // I know this could be optimized somehow e.g. by using std::log2p1 from C++20.\n    uint32_t level = 0;\n    VkDeviceSize currLevelNodeSize = m_UsableSize;\n    VkDeviceSize nextLevelNodeSize = currLevelNodeSize >> 1;\n    while(allocSize <= nextLevelNodeSize && level + 1 < m_LevelCount)\n    {\n        ++level;\n        currLevelNodeSize >>= 1;\n        nextLevelNodeSize >>= 1;\n    }\n    return level;\n}\n\nvoid VmaBlockMetadata_Buddy::FreeAtOffset(VkDeviceSize offset)\n{\n    uint32_t level = 0;\n    Node* node = FindAllocationNode(offset, level);\n\n    ++m_FreeCount;\n    --m_AllocationCount;\n    m_SumFreeSize += LevelToNodeSize(level);\n\n    node->type = Node::TYPE_FREE;\n\n    // Join free nodes if possible.\n    while(level > 0 && node->buddy->type == Node::TYPE_FREE)\n    {\n        RemoveFromFreeList(level, node->buddy);\n        Node* const parent = node->parent;\n\n        m_NodeAllocator.Free(node->buddy);\n        m_NodeAllocator.Free(node);\n        parent->type = Node::TYPE_FREE;\n\n        node = parent;\n        --level;\n        --m_FreeCount;\n    }\n\n    AddToFreeListFront(level, node);\n}\n\nvoid VmaBlockMetadata_Buddy::CalcAllocationStatInfoNode(VmaStatInfo& inoutInfo, const Node* node, VkDeviceSize levelNodeSize) const\n{\n    switch(node->type)\n    {\n    case Node::TYPE_FREE:\n        VmaAddStatInfoUnusedRange(inoutInfo, levelNodeSize);\n        break;\n    case Node::TYPE_ALLOCATION:\n        VmaAddStatInfoAllocation(inoutInfo, levelNodeSize);\n        break;\n    case Node::TYPE_SPLIT:\n        {\n            const VkDeviceSize childrenNodeSize = levelNodeSize / 2;\n            const Node* const leftChild = node->split.leftChild;\n            CalcAllocationStatInfoNode(inoutInfo, leftChild, childrenNodeSize);\n            const Node* const rightChild = leftChild->buddy;\n            CalcAllocationStatInfoNode(inoutInfo, rightChild, childrenNodeSize);\n        }\n        break;\n    default:\n        VMA_ASSERT(0);\n    }\n}\n\nvoid VmaBlockMetadata_Buddy::AddToFreeListFront(uint32_t level, Node* node)\n{\n    VMA_ASSERT(node->type == Node::TYPE_FREE);\n\n    // List is empty.\n    Node* const frontNode = m_FreeList[level].front;\n    if(frontNode == VMA_NULL)\n    {\n        VMA_ASSERT(m_FreeList[level].back == VMA_NULL);\n        node->free.prev = node->free.next = VMA_NULL;\n        m_FreeList[level].front = m_FreeList[level].back = node;\n    }\n    else\n    {\n        VMA_ASSERT(frontNode->free.prev == VMA_NULL);\n        node->free.prev = VMA_NULL;\n        node->free.next = frontNode;\n        frontNode->free.prev = node;\n        m_FreeList[level].front = node;\n    }\n}\n\nvoid VmaBlockMetadata_Buddy::RemoveFromFreeList(uint32_t level, Node* node)\n{\n    VMA_ASSERT(m_FreeList[level].front != VMA_NULL);\n\n    // It is at the front.\n    if(node->free.prev == VMA_NULL)\n    {\n        VMA_ASSERT(m_FreeList[level].front == node);\n        m_FreeList[level].front = node->free.next;\n    }\n    else\n    {\n        Node* const prevFreeNode = node->free.prev;\n        VMA_ASSERT(prevFreeNode->free.next == node);\n        prevFreeNode->free.next = node->free.next;\n    }\n\n    // It is at the back.\n    if(node->free.next == VMA_NULL)\n    {\n        VMA_ASSERT(m_FreeList[level].back == node);\n        m_FreeList[level].back = node->free.prev;\n    }\n    else\n    {\n        Node* const nextFreeNode = node->free.next;\n        VMA_ASSERT(nextFreeNode->free.prev == node);\n        nextFreeNode->free.prev = node->free.prev;\n    }\n}\n\n#if VMA_STATS_STRING_ENABLED\nvoid VmaBlockMetadata_Buddy::PrintDetailedMapNode(class VmaJsonWriter& json, const Node* node, VkDeviceSize levelNodeSize) const\n{\n    switch(node->type)\n    {\n    case Node::TYPE_FREE:\n        PrintDetailedMap_UnusedRange(json, node->offset, levelNodeSize);\n        break;\n    case Node::TYPE_ALLOCATION:\n        PrintDetailedMap_Allocation(json, node->offset, levelNodeSize, node->allocation.userData);\n        break;\n    case Node::TYPE_SPLIT:\n        {\n            const VkDeviceSize childrenNodeSize = levelNodeSize / 2;\n            const Node* const leftChild = node->split.leftChild;\n            PrintDetailedMapNode(json, leftChild, childrenNodeSize);\n            const Node* const rightChild = leftChild->buddy;\n            PrintDetailedMapNode(json, rightChild, childrenNodeSize);\n        }\n        break;\n    default:\n        VMA_ASSERT(0);\n    }\n}\n#endif // #if VMA_STATS_STRING_ENABLED\n\n\n////////////////////////////////////////////////////////////////////////////////\n// class VmaDeviceMemoryBlock\n\nVmaDeviceMemoryBlock::VmaDeviceMemoryBlock(VmaAllocator hAllocator) :\n    m_pMetadata(VMA_NULL),\n    m_MemoryTypeIndex(UINT32_MAX),\n    m_Id(0),\n    m_hMemory(VK_NULL_HANDLE),\n    m_MapCount(0),\n    m_pMappedData(VMA_NULL)\n{\n}\n\nvoid VmaDeviceMemoryBlock::Init(\n    VmaAllocator hAllocator,\n    VmaPool hParentPool,\n    uint32_t newMemoryTypeIndex,\n    VkDeviceMemory newMemory,\n    VkDeviceSize newSize,\n    uint32_t id,\n    uint32_t algorithm)\n{\n    VMA_ASSERT(m_hMemory == VK_NULL_HANDLE);\n\n    m_hParentPool = hParentPool;\n    m_MemoryTypeIndex = newMemoryTypeIndex;\n    m_Id = id;\n    m_hMemory = newMemory;\n\n    switch(algorithm)\n    {\n    case VMA_POOL_CREATE_LINEAR_ALGORITHM_BIT:\n        m_pMetadata = vma_new(hAllocator, VmaBlockMetadata_Linear)(hAllocator->GetAllocationCallbacks(),\n            false); // isVirtual\n        break;\n    case VMA_POOL_CREATE_BUDDY_ALGORITHM_BIT:\n        m_pMetadata = vma_new(hAllocator, VmaBlockMetadata_Buddy)(hAllocator->GetAllocationCallbacks(),\n            false); // isVirtual\n        break;\n    default:\n        VMA_ASSERT(0);\n        // Fall-through.\n    case 0:\n        m_pMetadata = vma_new(hAllocator, VmaBlockMetadata_Generic)(hAllocator->GetAllocationCallbacks(),\n            false); // isVirtual\n    }\n    m_pMetadata->Init(newSize);\n}\n\nvoid VmaDeviceMemoryBlock::Destroy(VmaAllocator allocator)\n{\n    // This is the most important assert in the entire library.\n    // Hitting it means you have some memory leak - unreleased VmaAllocation objects.\n    VMA_ASSERT(m_pMetadata->IsEmpty() && \"Some allocations were not freed before destruction of this memory block!\");\n\n    VMA_ASSERT(m_hMemory != VK_NULL_HANDLE);\n    allocator->FreeVulkanMemory(m_MemoryTypeIndex, m_pMetadata->GetSize(), m_hMemory);\n    m_hMemory = VK_NULL_HANDLE;\n\n    vma_delete(allocator, m_pMetadata);\n    m_pMetadata = VMA_NULL;\n}\n\nbool VmaDeviceMemoryBlock::Validate() const\n{\n    VMA_VALIDATE((m_hMemory != VK_NULL_HANDLE) &&\n        (m_pMetadata->GetSize() != 0));\n\n    return m_pMetadata->Validate();\n}\n\nVkResult VmaDeviceMemoryBlock::CheckCorruption(VmaAllocator hAllocator)\n{\n    void* pData = nullptr;\n    VkResult res = Map(hAllocator, 1, &pData);\n    if(res != VK_SUCCESS)\n    {\n        return res;\n    }\n\n    res = m_pMetadata->CheckCorruption(pData);\n\n    Unmap(hAllocator, 1);\n\n    return res;\n}\n\nVkResult VmaDeviceMemoryBlock::Map(VmaAllocator hAllocator, uint32_t count, void** ppData)\n{\n    if(count == 0)\n    {\n        return VK_SUCCESS;\n    }\n\n    VmaMutexLock lock(m_Mutex, hAllocator->m_UseMutex);\n    if(m_MapCount != 0)\n    {\n        m_MapCount += count;\n        VMA_ASSERT(m_pMappedData != VMA_NULL);\n        if(ppData != VMA_NULL)\n        {\n            *ppData = m_pMappedData;\n        }\n        return VK_SUCCESS;\n    }\n    else\n    {\n        VkResult result = (*hAllocator->GetVulkanFunctions().vkMapMemory)(\n            hAllocator->m_hDevice,\n            m_hMemory,\n            0, // offset\n            VK_WHOLE_SIZE,\n            0, // flags\n            &m_pMappedData);\n        if(result == VK_SUCCESS)\n        {\n            if(ppData != VMA_NULL)\n            {\n                *ppData = m_pMappedData;\n            }\n            m_MapCount = count;\n        }\n        return result;\n    }\n}\n\nvoid VmaDeviceMemoryBlock::Unmap(VmaAllocator hAllocator, uint32_t count)\n{\n    if(count == 0)\n    {\n        return;\n    }\n\n    VmaMutexLock lock(m_Mutex, hAllocator->m_UseMutex);\n    if(m_MapCount >= count)\n    {\n        m_MapCount -= count;\n        if(m_MapCount == 0)\n        {\n            m_pMappedData = VMA_NULL;\n            (*hAllocator->GetVulkanFunctions().vkUnmapMemory)(hAllocator->m_hDevice, m_hMemory);\n        }\n    }\n    else\n    {\n        VMA_ASSERT(0 && \"VkDeviceMemory block is being unmapped while it was not previously mapped.\");\n    }\n}\n\nVkResult VmaDeviceMemoryBlock::WriteMagicValueAroundAllocation(VmaAllocator hAllocator, VkDeviceSize allocOffset, VkDeviceSize allocSize)\n{\n    VMA_ASSERT(VMA_DEBUG_MARGIN > 0 && VMA_DEBUG_MARGIN % 4 == 0 && VMA_DEBUG_DETECT_CORRUPTION);\n    VMA_ASSERT(allocOffset >= VMA_DEBUG_MARGIN);\n\n    void* pData;\n    VkResult res = Map(hAllocator, 1, &pData);\n    if(res != VK_SUCCESS)\n    {\n        return res;\n    }\n\n    VmaWriteMagicValue(pData, allocOffset - VMA_DEBUG_MARGIN);\n    VmaWriteMagicValue(pData, allocOffset + allocSize);\n\n    Unmap(hAllocator, 1);\n\n    return VK_SUCCESS;\n}\n\nVkResult VmaDeviceMemoryBlock::ValidateMagicValueAroundAllocation(VmaAllocator hAllocator, VkDeviceSize allocOffset, VkDeviceSize allocSize)\n{\n    VMA_ASSERT(VMA_DEBUG_MARGIN > 0 && VMA_DEBUG_MARGIN % 4 == 0 && VMA_DEBUG_DETECT_CORRUPTION);\n    VMA_ASSERT(allocOffset >= VMA_DEBUG_MARGIN);\n\n    void* pData;\n    VkResult res = Map(hAllocator, 1, &pData);\n    if(res != VK_SUCCESS)\n    {\n        return res;\n    }\n\n    if(!VmaValidateMagicValue(pData, allocOffset - VMA_DEBUG_MARGIN))\n    {\n        VMA_ASSERT(0 && \"MEMORY CORRUPTION DETECTED BEFORE FREED ALLOCATION!\");\n    }\n    else if(!VmaValidateMagicValue(pData, allocOffset + allocSize))\n    {\n        VMA_ASSERT(0 && \"MEMORY CORRUPTION DETECTED AFTER FREED ALLOCATION!\");\n    }\n\n    Unmap(hAllocator, 1);\n\n    return VK_SUCCESS;\n}\n\nVkResult VmaDeviceMemoryBlock::BindBufferMemory(\n    const VmaAllocator hAllocator,\n    const VmaAllocation hAllocation,\n    VkDeviceSize allocationLocalOffset,\n    VkBuffer hBuffer,\n    const void* pNext)\n{\n    VMA_ASSERT(hAllocation->GetType() == VmaAllocation_T::ALLOCATION_TYPE_BLOCK &&\n        hAllocation->GetBlock() == this);\n    VMA_ASSERT(allocationLocalOffset < hAllocation->GetSize() &&\n        \"Invalid allocationLocalOffset. Did you forget that this offset is relative to the beginning of the allocation, not the whole memory block?\");\n    const VkDeviceSize memoryOffset = hAllocation->GetOffset() + allocationLocalOffset;\n    // This lock is important so that we don't call vkBind... and/or vkMap... simultaneously on the same VkDeviceMemory from multiple threads.\n    VmaMutexLock lock(m_Mutex, hAllocator->m_UseMutex);\n    return hAllocator->BindVulkanBuffer(m_hMemory, memoryOffset, hBuffer, pNext);\n}\n\nVkResult VmaDeviceMemoryBlock::BindImageMemory(\n    const VmaAllocator hAllocator,\n    const VmaAllocation hAllocation,\n    VkDeviceSize allocationLocalOffset,\n    VkImage hImage,\n    const void* pNext)\n{\n    VMA_ASSERT(hAllocation->GetType() == VmaAllocation_T::ALLOCATION_TYPE_BLOCK &&\n        hAllocation->GetBlock() == this);\n    VMA_ASSERT(allocationLocalOffset < hAllocation->GetSize() &&\n        \"Invalid allocationLocalOffset. Did you forget that this offset is relative to the beginning of the allocation, not the whole memory block?\");\n    const VkDeviceSize memoryOffset = hAllocation->GetOffset() + allocationLocalOffset;\n    // This lock is important so that we don't call vkBind... and/or vkMap... simultaneously on the same VkDeviceMemory from multiple threads.\n    VmaMutexLock lock(m_Mutex, hAllocator->m_UseMutex);\n    return hAllocator->BindVulkanImage(m_hMemory, memoryOffset, hImage, pNext);\n}\n\nVmaPool_T::VmaPool_T(\n    VmaAllocator hAllocator,\n    const VmaPoolCreateInfo& createInfo,\n    VkDeviceSize preferredBlockSize) :\n    m_BlockVector(\n        hAllocator,\n        this, // hParentPool\n        createInfo.memoryTypeIndex,\n        createInfo.blockSize != 0 ? createInfo.blockSize : preferredBlockSize,\n        createInfo.minBlockCount,\n        createInfo.maxBlockCount,\n        (createInfo.flags & VMA_POOL_CREATE_IGNORE_BUFFER_IMAGE_GRANULARITY_BIT) != 0 ? 1 : hAllocator->GetBufferImageGranularity(),\n        createInfo.frameInUseCount,\n        createInfo.blockSize != 0, // explicitBlockSize\n        createInfo.flags & VMA_POOL_CREATE_ALGORITHM_MASK, // algorithm\n        createInfo.priority,\n        VMA_MAX(hAllocator->GetMemoryTypeMinAlignment(createInfo.memoryTypeIndex), createInfo.minAllocationAlignment),\n        createInfo.pMemoryAllocateNext),\n    m_Id(0),\n    m_Name(VMA_NULL)\n{\n}\n\nVmaPool_T::~VmaPool_T()\n{\n    VMA_ASSERT(m_PrevPool == VMA_NULL && m_NextPool == VMA_NULL);\n}\n\nvoid VmaPool_T::SetName(const char* pName)\n{\n    const VkAllocationCallbacks* allocs = m_BlockVector.GetAllocator()->GetAllocationCallbacks();\n    VmaFreeString(allocs, m_Name);\n\n    if(pName != VMA_NULL)\n    {\n        m_Name = VmaCreateStringCopy(allocs, pName);\n    }\n    else\n    {\n        m_Name = VMA_NULL;\n    }\n}\n\n#if VMA_STATS_STRING_ENABLED\n\n#endif // #if VMA_STATS_STRING_ENABLED\n\nVmaBlockVector::VmaBlockVector(\n    VmaAllocator hAllocator,\n    VmaPool hParentPool,\n    uint32_t memoryTypeIndex,\n    VkDeviceSize preferredBlockSize,\n    size_t minBlockCount,\n    size_t maxBlockCount,\n    VkDeviceSize bufferImageGranularity,\n    uint32_t frameInUseCount,\n    bool explicitBlockSize,\n    uint32_t algorithm,\n    float priority,\n    VkDeviceSize minAllocationAlignment,\n    void* pMemoryAllocateNext) :\n    m_hAllocator(hAllocator),\n    m_hParentPool(hParentPool),\n    m_MemoryTypeIndex(memoryTypeIndex),\n    m_PreferredBlockSize(preferredBlockSize),\n    m_MinBlockCount(minBlockCount),\n    m_MaxBlockCount(maxBlockCount),\n    m_BufferImageGranularity(bufferImageGranularity),\n    m_FrameInUseCount(frameInUseCount),\n    m_ExplicitBlockSize(explicitBlockSize),\n    m_Algorithm(algorithm),\n    m_Priority(priority),\n    m_MinAllocationAlignment(minAllocationAlignment),\n    m_pMemoryAllocateNext(pMemoryAllocateNext),\n    m_HasEmptyBlock(false),\n    m_Blocks(VmaStlAllocator<VmaDeviceMemoryBlock*>(hAllocator->GetAllocationCallbacks())),\n    m_NextBlockId(0)\n{\n}\n\nVmaBlockVector::~VmaBlockVector()\n{\n    for(size_t i = m_Blocks.size(); i--; )\n    {\n        m_Blocks[i]->Destroy(m_hAllocator);\n        vma_delete(m_hAllocator, m_Blocks[i]);\n    }\n}\n\nVkResult VmaBlockVector::CreateMinBlocks()\n{\n    for(size_t i = 0; i < m_MinBlockCount; ++i)\n    {\n        VkResult res = CreateBlock(m_PreferredBlockSize, VMA_NULL);\n        if(res != VK_SUCCESS)\n        {\n            return res;\n        }\n    }\n    return VK_SUCCESS;\n}\n\nvoid VmaBlockVector::GetPoolStats(VmaPoolStats* pStats)\n{\n    VmaMutexLockRead lock(m_Mutex, m_hAllocator->m_UseMutex);\n\n    const size_t blockCount = m_Blocks.size();\n\n    pStats->size = 0;\n    pStats->unusedSize = 0;\n    pStats->allocationCount = 0;\n    pStats->unusedRangeCount = 0;\n    pStats->unusedRangeSizeMax = 0;\n    pStats->blockCount = blockCount;\n\n    for(uint32_t blockIndex = 0; blockIndex < blockCount; ++blockIndex)\n    {\n        const VmaDeviceMemoryBlock* const pBlock = m_Blocks[blockIndex];\n        VMA_ASSERT(pBlock);\n        VMA_HEAVY_ASSERT(pBlock->Validate());\n        pBlock->m_pMetadata->AddPoolStats(*pStats);\n    }\n}\n\nbool VmaBlockVector::IsEmpty()\n{\n    VmaMutexLockRead lock(m_Mutex, m_hAllocator->m_UseMutex);\n    return m_Blocks.empty();\n}\n\nbool VmaBlockVector::IsCorruptionDetectionEnabled() const\n{\n    const uint32_t requiredMemFlags = VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT;\n    return (VMA_DEBUG_DETECT_CORRUPTION != 0) &&\n        (VMA_DEBUG_MARGIN > 0) &&\n        (m_Algorithm == 0 || m_Algorithm == VMA_POOL_CREATE_LINEAR_ALGORITHM_BIT) &&\n        (m_hAllocator->m_MemProps.memoryTypes[m_MemoryTypeIndex].propertyFlags & requiredMemFlags) == requiredMemFlags;\n}\n\nstatic const uint32_t VMA_ALLOCATION_TRY_COUNT = 32;\n\nVkResult VmaBlockVector::Allocate(\n    uint32_t currentFrameIndex,\n    VkDeviceSize size,\n    VkDeviceSize alignment,\n    const VmaAllocationCreateInfo& createInfo,\n    VmaSuballocationType suballocType,\n    size_t allocationCount,\n    VmaAllocation* pAllocations)\n{\n    size_t allocIndex;\n    VkResult res = VK_SUCCESS;\n\n    alignment = VMA_MAX(alignment, m_MinAllocationAlignment);\n\n    if(IsCorruptionDetectionEnabled())\n    {\n        size = VmaAlignUp<VkDeviceSize>(size, sizeof(VMA_CORRUPTION_DETECTION_MAGIC_VALUE));\n        alignment = VmaAlignUp<VkDeviceSize>(alignment, sizeof(VMA_CORRUPTION_DETECTION_MAGIC_VALUE));\n    }\n\n    {\n        VmaMutexLockWrite lock(m_Mutex, m_hAllocator->m_UseMutex);\n        for(allocIndex = 0; allocIndex < allocationCount; ++allocIndex)\n        {\n            res = AllocatePage(\n                currentFrameIndex,\n                size,\n                alignment,\n                createInfo,\n                suballocType,\n                pAllocations + allocIndex);\n            if(res != VK_SUCCESS)\n            {\n                break;\n            }\n        }\n    }\n\n    if(res != VK_SUCCESS)\n    {\n        // Free all already created allocations.\n        const uint32_t heapIndex = m_hAllocator->MemoryTypeIndexToHeapIndex(m_MemoryTypeIndex);\n        while(allocIndex--)\n        {\n            VmaAllocation_T* const alloc = pAllocations[allocIndex];\n            const VkDeviceSize allocSize = alloc->GetSize();\n            Free(alloc);\n            m_hAllocator->m_Budget.RemoveAllocation(heapIndex, allocSize);\n        }\n        memset(pAllocations, 0, sizeof(VmaAllocation) * allocationCount);\n    }\n\n    return res;\n}\n\nVkResult VmaBlockVector::AllocatePage(\n    uint32_t currentFrameIndex,\n    VkDeviceSize size,\n    VkDeviceSize alignment,\n    const VmaAllocationCreateInfo& createInfo,\n    VmaSuballocationType suballocType,\n    VmaAllocation* pAllocation)\n{\n    const bool isUpperAddress = (createInfo.flags & VMA_ALLOCATION_CREATE_UPPER_ADDRESS_BIT) != 0;\n    bool canMakeOtherLost = (createInfo.flags & VMA_ALLOCATION_CREATE_CAN_MAKE_OTHER_LOST_BIT) != 0;\n    const bool mapped = (createInfo.flags & VMA_ALLOCATION_CREATE_MAPPED_BIT) != 0;\n    const bool isUserDataString = (createInfo.flags & VMA_ALLOCATION_CREATE_USER_DATA_COPY_STRING_BIT) != 0;\n\n    VkDeviceSize freeMemory;\n    {\n        const uint32_t heapIndex = m_hAllocator->MemoryTypeIndexToHeapIndex(m_MemoryTypeIndex);\n        VmaBudget heapBudget = {};\n        m_hAllocator->GetBudget(&heapBudget, heapIndex, 1);\n        freeMemory = (heapBudget.usage < heapBudget.budget) ? (heapBudget.budget - heapBudget.usage) : 0;\n    }\n\n    const bool canFallbackToDedicated = !IsCustomPool();\n    const bool canCreateNewBlock =\n        ((createInfo.flags & VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT) == 0) &&\n        (m_Blocks.size() < m_MaxBlockCount) &&\n        (freeMemory >= size || !canFallbackToDedicated);\n    uint32_t strategy = createInfo.flags & VMA_ALLOCATION_CREATE_STRATEGY_MASK;\n\n    // If linearAlgorithm is used, canMakeOtherLost is available only when used as ring buffer.\n    // Which in turn is available only when maxBlockCount = 1.\n    if(m_Algorithm == VMA_POOL_CREATE_LINEAR_ALGORITHM_BIT && m_MaxBlockCount > 1)\n    {\n        canMakeOtherLost = false;\n    }\n\n    // Upper address can only be used with linear allocator and within single memory block.\n    if(isUpperAddress &&\n        (m_Algorithm != VMA_POOL_CREATE_LINEAR_ALGORITHM_BIT || m_MaxBlockCount > 1))\n    {\n        return VK_ERROR_FEATURE_NOT_PRESENT;\n    }\n\n    // Validate strategy.\n    switch(strategy)\n    {\n    case 0:\n        strategy = VMA_ALLOCATION_CREATE_STRATEGY_BEST_FIT_BIT;\n        break;\n    case VMA_ALLOCATION_CREATE_STRATEGY_BEST_FIT_BIT:\n    case VMA_ALLOCATION_CREATE_STRATEGY_WORST_FIT_BIT:\n    case VMA_ALLOCATION_CREATE_STRATEGY_FIRST_FIT_BIT:\n        break;\n    default:\n        return VK_ERROR_FEATURE_NOT_PRESENT;\n    }\n\n    // Early reject: requested allocation size is larger that maximum block size for this block vector.\n    if(size + 2 * VMA_DEBUG_MARGIN > m_PreferredBlockSize)\n    {\n        return VK_ERROR_OUT_OF_DEVICE_MEMORY;\n    }\n\n    /*\n    Under certain condition, this whole section can be skipped for optimization, so\n    we move on directly to trying to allocate with canMakeOtherLost. That is the case\n    e.g. for custom pools with linear algorithm.\n    */\n    if(!canMakeOtherLost || canCreateNewBlock)\n    {\n        // 1. Search existing allocations. Try to allocate without making other allocations lost.\n        VmaAllocationCreateFlags allocFlagsCopy = createInfo.flags;\n        allocFlagsCopy &= ~VMA_ALLOCATION_CREATE_CAN_MAKE_OTHER_LOST_BIT;\n\n        if(m_Algorithm == VMA_POOL_CREATE_LINEAR_ALGORITHM_BIT)\n        {\n            // Use only last block.\n            if(!m_Blocks.empty())\n            {\n                VmaDeviceMemoryBlock* const pCurrBlock = m_Blocks.back();\n                VMA_ASSERT(pCurrBlock);\n                VkResult res = AllocateFromBlock(\n                    pCurrBlock,\n                    currentFrameIndex,\n                    size,\n                    alignment,\n                    allocFlagsCopy,\n                    createInfo.pUserData,\n                    suballocType,\n                    strategy,\n                    pAllocation);\n                if(res == VK_SUCCESS)\n                {\n                    VMA_DEBUG_LOG(\"    Returned from last block #%u\", pCurrBlock->GetId());\n                    return VK_SUCCESS;\n                }\n            }\n        }\n        else\n        {\n            if(strategy == VMA_ALLOCATION_CREATE_STRATEGY_BEST_FIT_BIT)\n            {\n                // Forward order in m_Blocks - prefer blocks with smallest amount of free space.\n                for(size_t blockIndex = 0; blockIndex < m_Blocks.size(); ++blockIndex )\n                {\n                    VmaDeviceMemoryBlock* const pCurrBlock = m_Blocks[blockIndex];\n                    VMA_ASSERT(pCurrBlock);\n                    VkResult res = AllocateFromBlock(\n                        pCurrBlock,\n                        currentFrameIndex,\n                        size,\n                        alignment,\n                        allocFlagsCopy,\n                        createInfo.pUserData,\n                        suballocType,\n                        strategy,\n                        pAllocation);\n                    if(res == VK_SUCCESS)\n                    {\n                        VMA_DEBUG_LOG(\"    Returned from existing block #%u\", pCurrBlock->GetId());\n                        return VK_SUCCESS;\n                    }\n                }\n            }\n            else // WORST_FIT, FIRST_FIT\n            {\n                // Backward order in m_Blocks - prefer blocks with largest amount of free space.\n                for(size_t blockIndex = m_Blocks.size(); blockIndex--; )\n                {\n                    VmaDeviceMemoryBlock* const pCurrBlock = m_Blocks[blockIndex];\n                    VMA_ASSERT(pCurrBlock);\n                    VkResult res = AllocateFromBlock(\n                        pCurrBlock,\n                        currentFrameIndex,\n                        size,\n                        alignment,\n                        allocFlagsCopy,\n                        createInfo.pUserData,\n                        suballocType,\n                        strategy,\n                        pAllocation);\n                    if(res == VK_SUCCESS)\n                    {\n                        VMA_DEBUG_LOG(\"    Returned from existing block #%u\", pCurrBlock->GetId());\n                        return VK_SUCCESS;\n                    }\n                }\n            }\n        }\n\n        // 2. Try to create new block.\n        if(canCreateNewBlock)\n        {\n            // Calculate optimal size for new block.\n            VkDeviceSize newBlockSize = m_PreferredBlockSize;\n            uint32_t newBlockSizeShift = 0;\n            const uint32_t NEW_BLOCK_SIZE_SHIFT_MAX = 3;\n\n            if(!m_ExplicitBlockSize)\n            {\n                // Allocate 1/8, 1/4, 1/2 as first blocks.\n                const VkDeviceSize maxExistingBlockSize = CalcMaxBlockSize();\n                for(uint32_t i = 0; i < NEW_BLOCK_SIZE_SHIFT_MAX; ++i)\n                {\n                    const VkDeviceSize smallerNewBlockSize = newBlockSize / 2;\n                    if(smallerNewBlockSize > maxExistingBlockSize && smallerNewBlockSize >= size * 2)\n                    {\n                        newBlockSize = smallerNewBlockSize;\n                        ++newBlockSizeShift;\n                    }\n                    else\n                    {\n                        break;\n                    }\n                }\n            }\n\n            size_t newBlockIndex = 0;\n            VkResult res = (newBlockSize <= freeMemory || !canFallbackToDedicated) ?\n                CreateBlock(newBlockSize, &newBlockIndex) : VK_ERROR_OUT_OF_DEVICE_MEMORY;\n            // Allocation of this size failed? Try 1/2, 1/4, 1/8 of m_PreferredBlockSize.\n            if(!m_ExplicitBlockSize)\n            {\n                while(res < 0 && newBlockSizeShift < NEW_BLOCK_SIZE_SHIFT_MAX)\n                {\n                    const VkDeviceSize smallerNewBlockSize = newBlockSize / 2;\n                    if(smallerNewBlockSize >= size)\n                    {\n                        newBlockSize = smallerNewBlockSize;\n                        ++newBlockSizeShift;\n                        res = (newBlockSize <= freeMemory || !canFallbackToDedicated) ?\n                            CreateBlock(newBlockSize, &newBlockIndex) : VK_ERROR_OUT_OF_DEVICE_MEMORY;\n                    }\n                    else\n                    {\n                        break;\n                    }\n                }\n            }\n\n            if(res == VK_SUCCESS)\n            {\n                VmaDeviceMemoryBlock* const pBlock = m_Blocks[newBlockIndex];\n                VMA_ASSERT(pBlock->m_pMetadata->GetSize() >= size);\n\n                res = AllocateFromBlock(\n                    pBlock,\n                    currentFrameIndex,\n                    size,\n                    alignment,\n                    allocFlagsCopy,\n                    createInfo.pUserData,\n                    suballocType,\n                    strategy,\n                    pAllocation);\n                if(res == VK_SUCCESS)\n                {\n                    VMA_DEBUG_LOG(\"    Created new block #%u Size=%llu\", pBlock->GetId(), newBlockSize);\n                    return VK_SUCCESS;\n                }\n                else\n                {\n                    // Allocation from new block failed, possibly due to VMA_DEBUG_MARGIN or alignment.\n                    return VK_ERROR_OUT_OF_DEVICE_MEMORY;\n                }\n            }\n        }\n    }\n\n    // 3. Try to allocate from existing blocks with making other allocations lost.\n    if(canMakeOtherLost)\n    {\n        uint32_t tryIndex = 0;\n        for(; tryIndex < VMA_ALLOCATION_TRY_COUNT; ++tryIndex)\n        {\n            VmaDeviceMemoryBlock* pBestRequestBlock = VMA_NULL;\n            VmaAllocationRequest bestRequest = {};\n            VkDeviceSize bestRequestCost = VK_WHOLE_SIZE;\n\n            // 1. Search existing allocations.\n            if(strategy == VMA_ALLOCATION_CREATE_STRATEGY_BEST_FIT_BIT)\n            {\n                // Forward order in m_Blocks - prefer blocks with smallest amount of free space.\n                for(size_t blockIndex = 0; blockIndex < m_Blocks.size(); ++blockIndex )\n                {\n                    VmaDeviceMemoryBlock* const pCurrBlock = m_Blocks[blockIndex];\n                    VMA_ASSERT(pCurrBlock);\n                    VmaAllocationRequest currRequest = {};\n                    if(pCurrBlock->m_pMetadata->CreateAllocationRequest(\n                        currentFrameIndex,\n                        m_FrameInUseCount,\n                        m_BufferImageGranularity,\n                        size,\n                        alignment,\n                        (createInfo.flags & VMA_ALLOCATION_CREATE_UPPER_ADDRESS_BIT) != 0,\n                        suballocType,\n                        canMakeOtherLost,\n                        strategy,\n                        &currRequest))\n                    {\n                        const VkDeviceSize currRequestCost = currRequest.CalcCost();\n                        if(pBestRequestBlock == VMA_NULL ||\n                            currRequestCost < bestRequestCost)\n                        {\n                            pBestRequestBlock = pCurrBlock;\n                            bestRequest = currRequest;\n                            bestRequestCost = currRequestCost;\n\n                            if(bestRequestCost == 0)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n            else // WORST_FIT, FIRST_FIT\n            {\n                // Backward order in m_Blocks - prefer blocks with largest amount of free space.\n                for(size_t blockIndex = m_Blocks.size(); blockIndex--; )\n                {\n                    VmaDeviceMemoryBlock* const pCurrBlock = m_Blocks[blockIndex];\n                    VMA_ASSERT(pCurrBlock);\n                    VmaAllocationRequest currRequest = {};\n                    if(pCurrBlock->m_pMetadata->CreateAllocationRequest(\n                        currentFrameIndex,\n                        m_FrameInUseCount,\n                        m_BufferImageGranularity,\n                        size,\n                        alignment,\n                        (createInfo.flags & VMA_ALLOCATION_CREATE_UPPER_ADDRESS_BIT) != 0,\n                        suballocType,\n                        canMakeOtherLost,\n                        strategy,\n                        &currRequest))\n                    {\n                        const VkDeviceSize currRequestCost = currRequest.CalcCost();\n                        if(pBestRequestBlock == VMA_NULL ||\n                            currRequestCost < bestRequestCost ||\n                            strategy == VMA_ALLOCATION_CREATE_STRATEGY_FIRST_FIT_BIT)\n                        {\n                            pBestRequestBlock = pCurrBlock;\n                            bestRequest = currRequest;\n                            bestRequestCost = currRequestCost;\n\n                            if(bestRequestCost == 0 ||\n                                strategy == VMA_ALLOCATION_CREATE_STRATEGY_FIRST_FIT_BIT)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n\n            if(pBestRequestBlock != VMA_NULL)\n            {\n                if(mapped)\n                {\n                    VkResult res = pBestRequestBlock->Map(m_hAllocator, 1, VMA_NULL);\n                    if(res != VK_SUCCESS)\n                    {\n                        return res;\n                    }\n                }\n\n                if(pBestRequestBlock->m_pMetadata->MakeRequestedAllocationsLost(\n                    currentFrameIndex,\n                    m_FrameInUseCount,\n                    &bestRequest))\n                {\n                    // Allocate from this pBlock.\n                    *pAllocation = m_hAllocator->m_AllocationObjectAllocator.Allocate(currentFrameIndex, isUserDataString);\n                    pBestRequestBlock->m_pMetadata->Alloc(bestRequest, suballocType, *pAllocation);\n                    UpdateHasEmptyBlock();\n                    (*pAllocation)->InitBlockAllocation(\n                        pBestRequestBlock,\n                        bestRequest.offset,\n                        alignment,\n                        bestRequest.size, // Not size, as actual allocation size may be larger than requested!\n                        m_MemoryTypeIndex,\n                        suballocType,\n                        mapped,\n                        (createInfo.flags & VMA_ALLOCATION_CREATE_CAN_BECOME_LOST_BIT) != 0);\n                    VMA_HEAVY_ASSERT(pBestRequestBlock->Validate());\n                    VMA_DEBUG_LOG(\"    Returned from existing block #%u\", pBestRequestBlock->GetId());\n                    (*pAllocation)->SetUserData(m_hAllocator, createInfo.pUserData);\n                    m_hAllocator->m_Budget.AddAllocation(m_hAllocator->MemoryTypeIndexToHeapIndex(m_MemoryTypeIndex), bestRequest.size);\n                    if(VMA_DEBUG_INITIALIZE_ALLOCATIONS)\n                    {\n                        m_hAllocator->FillAllocation(*pAllocation, VMA_ALLOCATION_FILL_PATTERN_CREATED);\n                    }\n                    if(IsCorruptionDetectionEnabled())\n                    {\n                        VkResult res = pBestRequestBlock->WriteMagicValueAroundAllocation(m_hAllocator, bestRequest.offset, bestRequest.size);\n                        VMA_ASSERT(res == VK_SUCCESS && \"Couldn't map block memory to write magic value.\");\n                    }\n                    return VK_SUCCESS;\n                }\n                // else: Some allocations must have been touched while we are here. Next try.\n            }\n            else\n            {\n                // Could not find place in any of the blocks - break outer loop.\n                break;\n            }\n        }\n        /* Maximum number of tries exceeded - a very unlike event when many other\n        threads are simultaneously touching allocations making it impossible to make\n        lost at the same time as we try to allocate. */\n        if(tryIndex == VMA_ALLOCATION_TRY_COUNT)\n        {\n            return VK_ERROR_TOO_MANY_OBJECTS;\n        }\n    }\n\n    return VK_ERROR_OUT_OF_DEVICE_MEMORY;\n}\n\nvoid VmaBlockVector::Free(\n    const VmaAllocation hAllocation)\n{\n    VmaDeviceMemoryBlock* pBlockToDelete = VMA_NULL;\n\n    bool budgetExceeded = false;\n    {\n        const uint32_t heapIndex = m_hAllocator->MemoryTypeIndexToHeapIndex(m_MemoryTypeIndex);\n        VmaBudget heapBudget = {};\n        m_hAllocator->GetBudget(&heapBudget, heapIndex, 1);\n        budgetExceeded = heapBudget.usage >= heapBudget.budget;\n    }\n\n    // Scope for lock.\n    {\n        VmaMutexLockWrite lock(m_Mutex, m_hAllocator->m_UseMutex);\n\n        VmaDeviceMemoryBlock* pBlock = hAllocation->GetBlock();\n\n        if(IsCorruptionDetectionEnabled())\n        {\n            VkResult res = pBlock->ValidateMagicValueAroundAllocation(m_hAllocator, hAllocation->GetOffset(), hAllocation->GetSize());\n            VMA_ASSERT(res == VK_SUCCESS && \"Couldn't map block memory to validate magic value.\");\n        }\n\n        if(hAllocation->IsPersistentMap())\n        {\n            pBlock->Unmap(m_hAllocator, 1);\n        }\n\n        pBlock->m_pMetadata->FreeAtOffset(hAllocation->GetOffset());\n        VMA_HEAVY_ASSERT(pBlock->Validate());\n\n        VMA_DEBUG_LOG(\"  Freed from MemoryTypeIndex=%u\", m_MemoryTypeIndex);\n\n        const bool canDeleteBlock = m_Blocks.size() > m_MinBlockCount;\n        // pBlock became empty after this deallocation.\n        if(pBlock->m_pMetadata->IsEmpty())\n        {\n            // Already has empty block. We don't want to have two, so delete this one.\n            if((m_HasEmptyBlock || budgetExceeded) && canDeleteBlock)\n            {\n                pBlockToDelete = pBlock;\n                Remove(pBlock);\n            }\n            // else: We now have an empty block - leave it.\n        }\n        // pBlock didn't become empty, but we have another empty block - find and free that one.\n        // (This is optional, heuristics.)\n        else if(m_HasEmptyBlock && canDeleteBlock)\n        {\n            VmaDeviceMemoryBlock* pLastBlock = m_Blocks.back();\n            if(pLastBlock->m_pMetadata->IsEmpty())\n            {\n                pBlockToDelete = pLastBlock;\n                m_Blocks.pop_back();\n            }\n        }\n\n        UpdateHasEmptyBlock();\n        IncrementallySortBlocks();\n    }\n\n    // Destruction of a free block. Deferred until this point, outside of mutex\n    // lock, for performance reason.\n    if(pBlockToDelete != VMA_NULL)\n    {\n        VMA_DEBUG_LOG(\"    Deleted empty block #%u\", pBlockToDelete->GetId());\n        pBlockToDelete->Destroy(m_hAllocator);\n        vma_delete(m_hAllocator, pBlockToDelete);\n    }\n}\n\nVkDeviceSize VmaBlockVector::CalcMaxBlockSize() const\n{\n    VkDeviceSize result = 0;\n    for(size_t i = m_Blocks.size(); i--; )\n    {\n        result = VMA_MAX(result, m_Blocks[i]->m_pMetadata->GetSize());\n        if(result >= m_PreferredBlockSize)\n        {\n            break;\n        }\n    }\n    return result;\n}\n\nvoid VmaBlockVector::Remove(VmaDeviceMemoryBlock* pBlock)\n{\n    for(uint32_t blockIndex = 0; blockIndex < m_Blocks.size(); ++blockIndex)\n    {\n        if(m_Blocks[blockIndex] == pBlock)\n        {\n            VmaVectorRemove(m_Blocks, blockIndex);\n            return;\n        }\n    }\n    VMA_ASSERT(0);\n}\n\nvoid VmaBlockVector::IncrementallySortBlocks()\n{\n    if(m_Algorithm != VMA_POOL_CREATE_LINEAR_ALGORITHM_BIT)\n    {\n        // Bubble sort only until first swap.\n        for(size_t i = 1; i < m_Blocks.size(); ++i)\n        {\n            if(m_Blocks[i - 1]->m_pMetadata->GetSumFreeSize() > m_Blocks[i]->m_pMetadata->GetSumFreeSize())\n            {\n                VMA_SWAP(m_Blocks[i - 1], m_Blocks[i]);\n                return;\n            }\n        }\n    }\n}\n\nVkResult VmaBlockVector::AllocateFromBlock(\n    VmaDeviceMemoryBlock* pBlock,\n    uint32_t currentFrameIndex,\n    VkDeviceSize size,\n    VkDeviceSize alignment,\n    VmaAllocationCreateFlags allocFlags,\n    void* pUserData,\n    VmaSuballocationType suballocType,\n    uint32_t strategy,\n    VmaAllocation* pAllocation)\n{\n    VMA_ASSERT((allocFlags & VMA_ALLOCATION_CREATE_CAN_MAKE_OTHER_LOST_BIT) == 0);\n    const bool isUpperAddress = (allocFlags & VMA_ALLOCATION_CREATE_UPPER_ADDRESS_BIT) != 0;\n    const bool mapped = (allocFlags & VMA_ALLOCATION_CREATE_MAPPED_BIT) != 0;\n    const bool isUserDataString = (allocFlags & VMA_ALLOCATION_CREATE_USER_DATA_COPY_STRING_BIT) != 0;\n\n    VmaAllocationRequest currRequest = {};\n    if(pBlock->m_pMetadata->CreateAllocationRequest(\n        currentFrameIndex,\n        m_FrameInUseCount,\n        m_BufferImageGranularity,\n        size,\n        alignment,\n        isUpperAddress,\n        suballocType,\n        false, // canMakeOtherLost\n        strategy,\n        &currRequest))\n    {\n        // Allocate from pCurrBlock.\n        VMA_ASSERT(currRequest.itemsToMakeLostCount == 0);\n\n        if(mapped)\n        {\n            VkResult res = pBlock->Map(m_hAllocator, 1, VMA_NULL);\n            if(res != VK_SUCCESS)\n            {\n                return res;\n            }\n        }\n\n        *pAllocation = m_hAllocator->m_AllocationObjectAllocator.Allocate(currentFrameIndex, isUserDataString);\n        pBlock->m_pMetadata->Alloc(currRequest, suballocType, *pAllocation);\n        UpdateHasEmptyBlock();\n        (*pAllocation)->InitBlockAllocation(\n            pBlock,\n            currRequest.offset,\n            alignment,\n            currRequest.size, // Not size, as actual allocation size may be larger than requested!\n            m_MemoryTypeIndex,\n            suballocType,\n            mapped,\n            (allocFlags & VMA_ALLOCATION_CREATE_CAN_BECOME_LOST_BIT) != 0);\n        VMA_HEAVY_ASSERT(pBlock->Validate());\n        (*pAllocation)->SetUserData(m_hAllocator, pUserData);\n        m_hAllocator->m_Budget.AddAllocation(m_hAllocator->MemoryTypeIndexToHeapIndex(m_MemoryTypeIndex), currRequest.size);\n        if(VMA_DEBUG_INITIALIZE_ALLOCATIONS)\n        {\n            m_hAllocator->FillAllocation(*pAllocation, VMA_ALLOCATION_FILL_PATTERN_CREATED);\n        }\n        if(IsCorruptionDetectionEnabled())\n        {\n            VkResult res = pBlock->WriteMagicValueAroundAllocation(m_hAllocator, currRequest.offset, currRequest.size);\n            VMA_ASSERT(res == VK_SUCCESS && \"Couldn't map block memory to write magic value.\");\n        }\n        return VK_SUCCESS;\n    }\n    return VK_ERROR_OUT_OF_DEVICE_MEMORY;\n}\n\nVkResult VmaBlockVector::CreateBlock(VkDeviceSize blockSize, size_t* pNewBlockIndex)\n{\n    VkMemoryAllocateInfo allocInfo = { VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO };\n    allocInfo.pNext = m_pMemoryAllocateNext;\n    allocInfo.memoryTypeIndex = m_MemoryTypeIndex;\n    allocInfo.allocationSize = blockSize;\n\n#if VMA_BUFFER_DEVICE_ADDRESS\n    // Every standalone block can potentially contain a buffer with VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT - always enable the feature.\n    VkMemoryAllocateFlagsInfoKHR allocFlagsInfo = { VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR };\n    if(m_hAllocator->m_UseKhrBufferDeviceAddress)\n    {\n        allocFlagsInfo.flags = VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR;\n        VmaPnextChainPushFront(&allocInfo, &allocFlagsInfo);\n    }\n#endif // #if VMA_BUFFER_DEVICE_ADDRESS\n\n#if VMA_MEMORY_PRIORITY\n    VkMemoryPriorityAllocateInfoEXT priorityInfo = { VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT };\n    if(m_hAllocator->m_UseExtMemoryPriority)\n    {\n        priorityInfo.priority = m_Priority;\n        VmaPnextChainPushFront(&allocInfo, &priorityInfo);\n    }\n#endif // #if VMA_MEMORY_PRIORITY\n\n#if VMA_EXTERNAL_MEMORY\n    // Attach VkExportMemoryAllocateInfoKHR if necessary.\n    VkExportMemoryAllocateInfoKHR exportMemoryAllocInfo = { VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR };\n    exportMemoryAllocInfo.handleTypes = m_hAllocator->GetExternalMemoryHandleTypeFlags(m_MemoryTypeIndex);\n    if(exportMemoryAllocInfo.handleTypes != 0)\n    {\n        VmaPnextChainPushFront(&allocInfo, &exportMemoryAllocInfo);\n    }\n#endif // #if VMA_EXTERNAL_MEMORY\n\n    VkDeviceMemory mem = VK_NULL_HANDLE;\n    VkResult res = m_hAllocator->AllocateVulkanMemory(&allocInfo, &mem);\n    if(res < 0)\n    {\n        return res;\n    }\n\n    // New VkDeviceMemory successfully created.\n\n    // Create new Allocation for it.\n    VmaDeviceMemoryBlock* const pBlock = vma_new(m_hAllocator, VmaDeviceMemoryBlock)(m_hAllocator);\n    pBlock->Init(\n        m_hAllocator,\n        m_hParentPool,\n        m_MemoryTypeIndex,\n        mem,\n        allocInfo.allocationSize,\n        m_NextBlockId++,\n        m_Algorithm);\n\n    m_Blocks.push_back(pBlock);\n    if(pNewBlockIndex != VMA_NULL)\n    {\n        *pNewBlockIndex = m_Blocks.size() - 1;\n    }\n\n    return VK_SUCCESS;\n}\n\nvoid VmaBlockVector::ApplyDefragmentationMovesCpu(\n    class VmaBlockVectorDefragmentationContext* pDefragCtx,\n    const VmaVector< VmaDefragmentationMove, VmaStlAllocator<VmaDefragmentationMove> >& moves)\n{\n    const size_t blockCount = m_Blocks.size();\n    const bool isNonCoherent = m_hAllocator->IsMemoryTypeNonCoherent(m_MemoryTypeIndex);\n\n    enum BLOCK_FLAG\n    {\n        BLOCK_FLAG_USED = 0x00000001,\n        BLOCK_FLAG_MAPPED_FOR_DEFRAGMENTATION = 0x00000002,\n    };\n\n    struct BlockInfo\n    {\n        uint32_t flags;\n        void* pMappedData;\n    };\n    VmaVector< BlockInfo, VmaStlAllocator<BlockInfo> >\n        blockInfo(blockCount, BlockInfo(), VmaStlAllocator<BlockInfo>(m_hAllocator->GetAllocationCallbacks()));\n    memset(blockInfo.data(), 0, blockCount * sizeof(BlockInfo));\n\n    // Go over all moves. Mark blocks that are used with BLOCK_FLAG_USED.\n    const size_t moveCount = moves.size();\n    for(size_t moveIndex = 0; moveIndex < moveCount; ++moveIndex)\n    {\n        const VmaDefragmentationMove& move = moves[moveIndex];\n        blockInfo[move.srcBlockIndex].flags |= BLOCK_FLAG_USED;\n        blockInfo[move.dstBlockIndex].flags |= BLOCK_FLAG_USED;\n    }\n\n    VMA_ASSERT(pDefragCtx->res == VK_SUCCESS);\n\n    // Go over all blocks. Get mapped pointer or map if necessary.\n    for(size_t blockIndex = 0; pDefragCtx->res == VK_SUCCESS && blockIndex < blockCount; ++blockIndex)\n    {\n        BlockInfo& currBlockInfo = blockInfo[blockIndex];\n        VmaDeviceMemoryBlock* pBlock = m_Blocks[blockIndex];\n        if((currBlockInfo.flags & BLOCK_FLAG_USED) != 0)\n        {\n            currBlockInfo.pMappedData = pBlock->GetMappedData();\n            // It is not originally mapped - map it.\n            if(currBlockInfo.pMappedData == VMA_NULL)\n            {\n                pDefragCtx->res = pBlock->Map(m_hAllocator, 1, &currBlockInfo.pMappedData);\n                if(pDefragCtx->res == VK_SUCCESS)\n                {\n                    currBlockInfo.flags |= BLOCK_FLAG_MAPPED_FOR_DEFRAGMENTATION;\n                }\n            }\n        }\n    }\n\n    // Go over all moves. Do actual data transfer.\n    if(pDefragCtx->res == VK_SUCCESS)\n    {\n        const VkDeviceSize nonCoherentAtomSize = m_hAllocator->m_PhysicalDeviceProperties.limits.nonCoherentAtomSize;\n        VkMappedMemoryRange memRange = { VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE };\n\n        for(size_t moveIndex = 0; moveIndex < moveCount; ++moveIndex)\n        {\n            const VmaDefragmentationMove& move = moves[moveIndex];\n\n            const BlockInfo& srcBlockInfo = blockInfo[move.srcBlockIndex];\n            const BlockInfo& dstBlockInfo = blockInfo[move.dstBlockIndex];\n\n            VMA_ASSERT(srcBlockInfo.pMappedData && dstBlockInfo.pMappedData);\n\n            // Invalidate source.\n            if(isNonCoherent)\n            {\n                VmaDeviceMemoryBlock* const pSrcBlock = m_Blocks[move.srcBlockIndex];\n                memRange.memory = pSrcBlock->GetDeviceMemory();\n                memRange.offset = VmaAlignDown(move.srcOffset, nonCoherentAtomSize);\n                memRange.size = VMA_MIN(\n                    VmaAlignUp(move.size + (move.srcOffset - memRange.offset), nonCoherentAtomSize),\n                    pSrcBlock->m_pMetadata->GetSize() - memRange.offset);\n                (*m_hAllocator->GetVulkanFunctions().vkInvalidateMappedMemoryRanges)(m_hAllocator->m_hDevice, 1, &memRange);\n            }\n\n            // THE PLACE WHERE ACTUAL DATA COPY HAPPENS.\n            memmove(\n                reinterpret_cast<char*>(dstBlockInfo.pMappedData) + move.dstOffset,\n                reinterpret_cast<char*>(srcBlockInfo.pMappedData) + move.srcOffset,\n                static_cast<size_t>(move.size));\n\n            if(IsCorruptionDetectionEnabled())\n            {\n                VmaWriteMagicValue(dstBlockInfo.pMappedData, move.dstOffset - VMA_DEBUG_MARGIN);\n                VmaWriteMagicValue(dstBlockInfo.pMappedData, move.dstOffset + move.size);\n            }\n\n            // Flush destination.\n            if(isNonCoherent)\n            {\n                VmaDeviceMemoryBlock* const pDstBlock = m_Blocks[move.dstBlockIndex];\n                memRange.memory = pDstBlock->GetDeviceMemory();\n                memRange.offset = VmaAlignDown(move.dstOffset, nonCoherentAtomSize);\n                memRange.size = VMA_MIN(\n                    VmaAlignUp(move.size + (move.dstOffset - memRange.offset), nonCoherentAtomSize),\n                    pDstBlock->m_pMetadata->GetSize() - memRange.offset);\n                (*m_hAllocator->GetVulkanFunctions().vkFlushMappedMemoryRanges)(m_hAllocator->m_hDevice, 1, &memRange);\n            }\n        }\n    }\n\n    // Go over all blocks in reverse order. Unmap those that were mapped just for defragmentation.\n    // Regardless of pCtx->res == VK_SUCCESS.\n    for(size_t blockIndex = blockCount; blockIndex--; )\n    {\n        const BlockInfo& currBlockInfo = blockInfo[blockIndex];\n        if((currBlockInfo.flags & BLOCK_FLAG_MAPPED_FOR_DEFRAGMENTATION) != 0)\n        {\n            VmaDeviceMemoryBlock* pBlock = m_Blocks[blockIndex];\n            pBlock->Unmap(m_hAllocator, 1);\n        }\n    }\n}\n\nvoid VmaBlockVector::ApplyDefragmentationMovesGpu(\n    class VmaBlockVectorDefragmentationContext* pDefragCtx,\n    VmaVector< VmaDefragmentationMove, VmaStlAllocator<VmaDefragmentationMove> >& moves,\n    VkCommandBuffer commandBuffer)\n{\n    const size_t blockCount = m_Blocks.size();\n\n    pDefragCtx->blockContexts.resize(blockCount);\n    memset(pDefragCtx->blockContexts.data(), 0, blockCount * sizeof(VmaBlockDefragmentationContext));\n\n    // Go over all moves. Mark blocks that are used with BLOCK_FLAG_USED.\n    const size_t moveCount = moves.size();\n    for(size_t moveIndex = 0; moveIndex < moveCount; ++moveIndex)\n    {\n        const VmaDefragmentationMove& move = moves[moveIndex];\n\n        //if(move.type == VMA_ALLOCATION_TYPE_UNKNOWN)\n        {\n            // Old school move still require us to map the whole block\n            pDefragCtx->blockContexts[move.srcBlockIndex].flags |= VmaBlockDefragmentationContext::BLOCK_FLAG_USED;\n            pDefragCtx->blockContexts[move.dstBlockIndex].flags |= VmaBlockDefragmentationContext::BLOCK_FLAG_USED;\n        }\n    }\n\n    VMA_ASSERT(pDefragCtx->res == VK_SUCCESS);\n\n    // Go over all blocks. Create and bind buffer for whole block if necessary.\n    {\n        VkBufferCreateInfo bufCreateInfo;\n        VmaFillGpuDefragmentationBufferCreateInfo(bufCreateInfo);\n\n        for(size_t blockIndex = 0; pDefragCtx->res == VK_SUCCESS && blockIndex < blockCount; ++blockIndex)\n        {\n            VmaBlockDefragmentationContext& currBlockCtx = pDefragCtx->blockContexts[blockIndex];\n            VmaDeviceMemoryBlock* pBlock = m_Blocks[blockIndex];\n            if((currBlockCtx.flags & VmaBlockDefragmentationContext::BLOCK_FLAG_USED) != 0)\n            {\n                bufCreateInfo.size = pBlock->m_pMetadata->GetSize();\n                pDefragCtx->res = (*m_hAllocator->GetVulkanFunctions().vkCreateBuffer)(\n                    m_hAllocator->m_hDevice, &bufCreateInfo, m_hAllocator->GetAllocationCallbacks(), &currBlockCtx.hBuffer);\n                if(pDefragCtx->res == VK_SUCCESS)\n                {\n                    pDefragCtx->res = (*m_hAllocator->GetVulkanFunctions().vkBindBufferMemory)(\n                        m_hAllocator->m_hDevice, currBlockCtx.hBuffer, pBlock->GetDeviceMemory(), 0);\n                }\n            }\n        }\n    }\n\n    // Go over all moves. Post data transfer commands to command buffer.\n    if(pDefragCtx->res == VK_SUCCESS)\n    {\n        for(size_t moveIndex = 0; moveIndex < moveCount; ++moveIndex)\n        {\n            const VmaDefragmentationMove& move = moves[moveIndex];\n\n            const VmaBlockDefragmentationContext& srcBlockCtx = pDefragCtx->blockContexts[move.srcBlockIndex];\n            const VmaBlockDefragmentationContext& dstBlockCtx = pDefragCtx->blockContexts[move.dstBlockIndex];\n\n            VMA_ASSERT(srcBlockCtx.hBuffer && dstBlockCtx.hBuffer);\n\n            VkBufferCopy region = {\n                move.srcOffset,\n                move.dstOffset,\n                move.size };\n            (*m_hAllocator->GetVulkanFunctions().vkCmdCopyBuffer)(\n                commandBuffer, srcBlockCtx.hBuffer, dstBlockCtx.hBuffer, 1, &region);\n        }\n    }\n\n    // Save buffers to defrag context for later destruction.\n    if(pDefragCtx->res == VK_SUCCESS && moveCount > 0)\n    {\n        pDefragCtx->res = VK_NOT_READY;\n    }\n}\n\nvoid VmaBlockVector::FreeEmptyBlocks(VmaDefragmentationStats* pDefragmentationStats)\n{\n    for(size_t blockIndex = m_Blocks.size(); blockIndex--; )\n    {\n        VmaDeviceMemoryBlock* pBlock = m_Blocks[blockIndex];\n        if(pBlock->m_pMetadata->IsEmpty())\n        {\n            if(m_Blocks.size() > m_MinBlockCount)\n            {\n                if(pDefragmentationStats != VMA_NULL)\n                {\n                    ++pDefragmentationStats->deviceMemoryBlocksFreed;\n                    pDefragmentationStats->bytesFreed += pBlock->m_pMetadata->GetSize();\n                }\n\n                VmaVectorRemove(m_Blocks, blockIndex);\n                pBlock->Destroy(m_hAllocator);\n                vma_delete(m_hAllocator, pBlock);\n            }\n            else\n            {\n                break;\n            }\n        }\n    }\n    UpdateHasEmptyBlock();\n}\n\nvoid VmaBlockVector::UpdateHasEmptyBlock()\n{\n    m_HasEmptyBlock = false;\n    for(size_t index = 0, count = m_Blocks.size(); index < count; ++index)\n    {\n        VmaDeviceMemoryBlock* const pBlock = m_Blocks[index];\n        if(pBlock->m_pMetadata->IsEmpty())\n        {\n            m_HasEmptyBlock = true;\n            break;\n        }\n    }\n}\n\n#if VMA_STATS_STRING_ENABLED\n\nvoid VmaBlockVector::PrintDetailedMap(class VmaJsonWriter& json)\n{\n    VmaMutexLockRead lock(m_Mutex, m_hAllocator->m_UseMutex);\n\n    json.BeginObject();\n\n    if(IsCustomPool())\n    {\n        const char* poolName = m_hParentPool->GetName();\n        if(poolName != VMA_NULL && poolName[0] != '\\0')\n        {\n            json.WriteString(\"Name\");\n            json.WriteString(poolName);\n        }\n\n        json.WriteString(\"MemoryTypeIndex\");\n        json.WriteNumber(m_MemoryTypeIndex);\n\n        json.WriteString(\"BlockSize\");\n        json.WriteNumber(m_PreferredBlockSize);\n\n        json.WriteString(\"BlockCount\");\n        json.BeginObject(true);\n        if(m_MinBlockCount > 0)\n        {\n            json.WriteString(\"Min\");\n            json.WriteNumber((uint64_t)m_MinBlockCount);\n        }\n        if(m_MaxBlockCount < SIZE_MAX)\n        {\n            json.WriteString(\"Max\");\n            json.WriteNumber((uint64_t)m_MaxBlockCount);\n        }\n        json.WriteString(\"Cur\");\n        json.WriteNumber((uint64_t)m_Blocks.size());\n        json.EndObject();\n\n        if(m_FrameInUseCount > 0)\n        {\n            json.WriteString(\"FrameInUseCount\");\n            json.WriteNumber(m_FrameInUseCount);\n        }\n\n        if(m_Algorithm != 0)\n        {\n            json.WriteString(\"Algorithm\");\n            json.WriteString(VmaAlgorithmToStr(m_Algorithm));\n        }\n    }\n    else\n    {\n        json.WriteString(\"PreferredBlockSize\");\n        json.WriteNumber(m_PreferredBlockSize);\n    }\n\n    json.WriteString(\"Blocks\");\n    json.BeginObject();\n    for(size_t i = 0; i < m_Blocks.size(); ++i)\n    {\n        json.BeginString();\n        json.ContinueString(m_Blocks[i]->GetId());\n        json.EndString();\n\n        m_Blocks[i]->m_pMetadata->PrintDetailedMap(json);\n    }\n    json.EndObject();\n\n    json.EndObject();\n}\n\n#endif // #if VMA_STATS_STRING_ENABLED\n\nvoid VmaBlockVector::Defragment(\n    class VmaBlockVectorDefragmentationContext* pCtx,\n    VmaDefragmentationStats* pStats, VmaDefragmentationFlags flags,\n    VkDeviceSize& maxCpuBytesToMove, uint32_t& maxCpuAllocationsToMove,\n    VkDeviceSize& maxGpuBytesToMove, uint32_t& maxGpuAllocationsToMove,\n    VkCommandBuffer commandBuffer)\n{\n    pCtx->res = VK_SUCCESS;\n\n    const VkMemoryPropertyFlags memPropFlags =\n        m_hAllocator->m_MemProps.memoryTypes[m_MemoryTypeIndex].propertyFlags;\n    const bool isHostVisible = (memPropFlags & VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT) != 0;\n\n    const bool canDefragmentOnCpu = maxCpuBytesToMove > 0 && maxCpuAllocationsToMove > 0 &&\n        isHostVisible;\n    const bool canDefragmentOnGpu = maxGpuBytesToMove > 0 && maxGpuAllocationsToMove > 0 &&\n        !IsCorruptionDetectionEnabled() &&\n        ((1u << m_MemoryTypeIndex) & m_hAllocator->GetGpuDefragmentationMemoryTypeBits()) != 0;\n\n    // There are options to defragment this memory type.\n    if(canDefragmentOnCpu || canDefragmentOnGpu)\n    {\n        bool defragmentOnGpu;\n        // There is only one option to defragment this memory type.\n        if(canDefragmentOnGpu != canDefragmentOnCpu)\n        {\n            defragmentOnGpu = canDefragmentOnGpu;\n        }\n        // Both options are available: Heuristics to choose the best one.\n        else\n        {\n            defragmentOnGpu = (memPropFlags & VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT) != 0 ||\n                m_hAllocator->IsIntegratedGpu();\n        }\n\n        bool overlappingMoveSupported = !defragmentOnGpu;\n\n        if(m_hAllocator->m_UseMutex)\n        {\n            if(flags & VMA_DEFRAGMENTATION_FLAG_INCREMENTAL)\n            {\n                if(!m_Mutex.TryLockWrite())\n                {\n                    pCtx->res = VK_ERROR_INITIALIZATION_FAILED;\n                    return;\n                }\n            }\n            else\n            {\n                m_Mutex.LockWrite();\n                pCtx->mutexLocked = true;\n            }\n        }\n\n        pCtx->Begin(overlappingMoveSupported, flags);\n\n        // Defragment.\n\n        const VkDeviceSize maxBytesToMove = defragmentOnGpu ? maxGpuBytesToMove : maxCpuBytesToMove;\n        const uint32_t maxAllocationsToMove = defragmentOnGpu ? maxGpuAllocationsToMove : maxCpuAllocationsToMove;\n        VmaDefragmentationAlgorithm* algo = pCtx->GetAlgorithm();\n        pCtx->res = algo->Defragment(pCtx->defragmentationMoves, maxBytesToMove, maxAllocationsToMove, flags);\n\n        // Accumulate statistics.\n        if(pStats != VMA_NULL)\n        {\n            const VkDeviceSize bytesMoved = algo->GetBytesMoved();\n            const uint32_t allocationsMoved = algo->GetAllocationsMoved();\n            pStats->bytesMoved += bytesMoved;\n            pStats->allocationsMoved += allocationsMoved;\n            VMA_ASSERT(bytesMoved <= maxBytesToMove);\n            VMA_ASSERT(allocationsMoved <= maxAllocationsToMove);\n            if(defragmentOnGpu)\n            {\n                maxGpuBytesToMove -= bytesMoved;\n                maxGpuAllocationsToMove -= allocationsMoved;\n            }\n            else\n            {\n                maxCpuBytesToMove -= bytesMoved;\n                maxCpuAllocationsToMove -= allocationsMoved;\n            }\n        }\n\n        if(flags & VMA_DEFRAGMENTATION_FLAG_INCREMENTAL)\n        {\n            if(m_hAllocator->m_UseMutex)\n                m_Mutex.UnlockWrite();\n\n            if(pCtx->res >= VK_SUCCESS && !pCtx->defragmentationMoves.empty())\n                pCtx->res = VK_NOT_READY;\n\n            return;\n        }\n\n        if(pCtx->res >= VK_SUCCESS)\n        {\n            if(defragmentOnGpu)\n            {\n                ApplyDefragmentationMovesGpu(pCtx, pCtx->defragmentationMoves, commandBuffer);\n            }\n            else\n            {\n                ApplyDefragmentationMovesCpu(pCtx, pCtx->defragmentationMoves);\n            }\n        }\n    }\n}\n\nvoid VmaBlockVector::DefragmentationEnd(\n    class VmaBlockVectorDefragmentationContext* pCtx,\n    uint32_t flags,\n    VmaDefragmentationStats* pStats)\n{\n    if(flags & VMA_DEFRAGMENTATION_FLAG_INCREMENTAL && m_hAllocator->m_UseMutex)\n    {\n        VMA_ASSERT(pCtx->mutexLocked == false);\n\n        // Incremental defragmentation doesn't hold the lock, so when we enter here we don't actually have any\n        // lock protecting us. Since we mutate state here, we have to take the lock out now\n        m_Mutex.LockWrite();\n        pCtx->mutexLocked = true;\n    }\n\n    // If the mutex isn't locked we didn't do any work and there is nothing to delete.\n    if(pCtx->mutexLocked || !m_hAllocator->m_UseMutex)\n    {\n        // Destroy buffers.\n        for(size_t blockIndex = pCtx->blockContexts.size(); blockIndex--;)\n        {\n            VmaBlockDefragmentationContext &blockCtx = pCtx->blockContexts[blockIndex];\n            if(blockCtx.hBuffer)\n            {\n                (*m_hAllocator->GetVulkanFunctions().vkDestroyBuffer)(m_hAllocator->m_hDevice, blockCtx.hBuffer, m_hAllocator->GetAllocationCallbacks());\n            }\n        }\n\n        if(pCtx->res >= VK_SUCCESS)\n        {\n            FreeEmptyBlocks(pStats);\n        }\n    }\n\n    if(pCtx->mutexLocked)\n    {\n        VMA_ASSERT(m_hAllocator->m_UseMutex);\n        m_Mutex.UnlockWrite();\n    }\n}\n\nuint32_t VmaBlockVector::ProcessDefragmentations(\n    class VmaBlockVectorDefragmentationContext *pCtx,\n    VmaDefragmentationPassMoveInfo* pMove, uint32_t maxMoves)\n{\n    VmaMutexLockWrite lock(m_Mutex, m_hAllocator->m_UseMutex);\n\n    const uint32_t moveCount = VMA_MIN(uint32_t(pCtx->defragmentationMoves.size()) - pCtx->defragmentationMovesProcessed, maxMoves);\n\n    for(uint32_t i = 0; i < moveCount; ++ i)\n    {\n        VmaDefragmentationMove& move = pCtx->defragmentationMoves[pCtx->defragmentationMovesProcessed + i];\n\n        pMove->allocation = move.hAllocation;\n        pMove->memory = move.pDstBlock->GetDeviceMemory();\n        pMove->offset = move.dstOffset;\n\n        ++ pMove;\n    }\n\n    pCtx->defragmentationMovesProcessed += moveCount;\n\n    return moveCount;\n}\n\nvoid VmaBlockVector::CommitDefragmentations(\n    class VmaBlockVectorDefragmentationContext *pCtx,\n    VmaDefragmentationStats* pStats)\n{\n    VmaMutexLockWrite lock(m_Mutex, m_hAllocator->m_UseMutex);\n\n    for(uint32_t i = pCtx->defragmentationMovesCommitted; i < pCtx->defragmentationMovesProcessed; ++ i)\n    {\n        const VmaDefragmentationMove &move = pCtx->defragmentationMoves[i];\n\n        move.pSrcBlock->m_pMetadata->FreeAtOffset(move.srcOffset);\n        move.hAllocation->ChangeBlockAllocation(m_hAllocator, move.pDstBlock, move.dstOffset);\n    }\n\n    pCtx->defragmentationMovesCommitted = pCtx->defragmentationMovesProcessed;\n    FreeEmptyBlocks(pStats);\n}\n\nsize_t VmaBlockVector::CalcAllocationCount() const\n{\n    size_t result = 0;\n    for(size_t i = 0; i < m_Blocks.size(); ++i)\n    {\n        result += m_Blocks[i]->m_pMetadata->GetAllocationCount();\n    }\n    return result;\n}\n\nbool VmaBlockVector::IsBufferImageGranularityConflictPossible() const\n{\n    if(m_BufferImageGranularity == 1)\n    {\n        return false;\n    }\n    VmaSuballocationType lastSuballocType = VMA_SUBALLOCATION_TYPE_FREE;\n    for(size_t i = 0, count = m_Blocks.size(); i < count; ++i)\n    {\n        VmaDeviceMemoryBlock* const pBlock = m_Blocks[i];\n        VMA_ASSERT(m_Algorithm == 0);\n        VmaBlockMetadata_Generic* const pMetadata = (VmaBlockMetadata_Generic*)pBlock->m_pMetadata;\n        if(pMetadata->IsBufferImageGranularityConflictPossible(m_BufferImageGranularity, lastSuballocType))\n        {\n            return true;\n        }\n    }\n    return false;\n}\n\nvoid VmaBlockVector::MakePoolAllocationsLost(\n    uint32_t currentFrameIndex,\n    size_t* pLostAllocationCount)\n{\n    VmaMutexLockWrite lock(m_Mutex, m_hAllocator->m_UseMutex);\n    size_t lostAllocationCount = 0;\n    for(uint32_t blockIndex = 0; blockIndex < m_Blocks.size(); ++blockIndex)\n    {\n        VmaDeviceMemoryBlock* const pBlock = m_Blocks[blockIndex];\n        VMA_ASSERT(pBlock);\n        lostAllocationCount += pBlock->m_pMetadata->MakeAllocationsLost(currentFrameIndex, m_FrameInUseCount);\n    }\n    if(pLostAllocationCount != VMA_NULL)\n    {\n        *pLostAllocationCount = lostAllocationCount;\n    }\n}\n\nVkResult VmaBlockVector::CheckCorruption()\n{\n    if(!IsCorruptionDetectionEnabled())\n    {\n        return VK_ERROR_FEATURE_NOT_PRESENT;\n    }\n\n    VmaMutexLockRead lock(m_Mutex, m_hAllocator->m_UseMutex);\n    for(uint32_t blockIndex = 0; blockIndex < m_Blocks.size(); ++blockIndex)\n    {\n        VmaDeviceMemoryBlock* const pBlock = m_Blocks[blockIndex];\n        VMA_ASSERT(pBlock);\n        VkResult res = pBlock->CheckCorruption(m_hAllocator);\n        if(res != VK_SUCCESS)\n        {\n            return res;\n        }\n    }\n    return VK_SUCCESS;\n}\n\nvoid VmaBlockVector::AddStats(VmaStats* pStats)\n{\n    const uint32_t memTypeIndex = m_MemoryTypeIndex;\n    const uint32_t memHeapIndex = m_hAllocator->MemoryTypeIndexToHeapIndex(memTypeIndex);\n\n    VmaMutexLockRead lock(m_Mutex, m_hAllocator->m_UseMutex);\n\n    for(uint32_t blockIndex = 0; blockIndex < m_Blocks.size(); ++blockIndex)\n    {\n        const VmaDeviceMemoryBlock* const pBlock = m_Blocks[blockIndex];\n        VMA_ASSERT(pBlock);\n        VMA_HEAVY_ASSERT(pBlock->Validate());\n        VmaStatInfo allocationStatInfo;\n        pBlock->m_pMetadata->CalcAllocationStatInfo(allocationStatInfo);\n        VmaAddStatInfo(pStats->total, allocationStatInfo);\n        VmaAddStatInfo(pStats->memoryType[memTypeIndex], allocationStatInfo);\n        VmaAddStatInfo(pStats->memoryHeap[memHeapIndex], allocationStatInfo);\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// VmaDefragmentationAlgorithm_Generic members definition\n\nVmaDefragmentationAlgorithm_Generic::VmaDefragmentationAlgorithm_Generic(\n    VmaAllocator hAllocator,\n    VmaBlockVector* pBlockVector,\n    uint32_t currentFrameIndex,\n    bool overlappingMoveSupported) :\n    VmaDefragmentationAlgorithm(hAllocator, pBlockVector, currentFrameIndex),\n    m_AllocationCount(0),\n    m_AllAllocations(false),\n    m_BytesMoved(0),\n    m_AllocationsMoved(0),\n    m_Blocks(VmaStlAllocator<BlockInfo*>(hAllocator->GetAllocationCallbacks()))\n{\n    // Create block info for each block.\n    const size_t blockCount = m_pBlockVector->m_Blocks.size();\n    for(size_t blockIndex = 0; blockIndex < blockCount; ++blockIndex)\n    {\n        BlockInfo* pBlockInfo = vma_new(m_hAllocator, BlockInfo)(m_hAllocator->GetAllocationCallbacks());\n        pBlockInfo->m_OriginalBlockIndex = blockIndex;\n        pBlockInfo->m_pBlock = m_pBlockVector->m_Blocks[blockIndex];\n        m_Blocks.push_back(pBlockInfo);\n    }\n\n    // Sort them by m_pBlock pointer value.\n    VMA_SORT(m_Blocks.begin(), m_Blocks.end(), BlockPointerLess());\n}\n\nVmaDefragmentationAlgorithm_Generic::~VmaDefragmentationAlgorithm_Generic()\n{\n    for(size_t i = m_Blocks.size(); i--; )\n    {\n        vma_delete(m_hAllocator, m_Blocks[i]);\n    }\n}\n\nvoid VmaDefragmentationAlgorithm_Generic::AddAllocation(VmaAllocation hAlloc, VkBool32* pChanged)\n{\n    // Now as we are inside VmaBlockVector::m_Mutex, we can make final check if this allocation was not lost.\n    if(hAlloc->GetLastUseFrameIndex() != VMA_FRAME_INDEX_LOST)\n    {\n        VmaDeviceMemoryBlock* pBlock = hAlloc->GetBlock();\n        BlockInfoVector::iterator it = VmaBinaryFindFirstNotLess(m_Blocks.begin(), m_Blocks.end(), pBlock, BlockPointerLess());\n        if(it != m_Blocks.end() && (*it)->m_pBlock == pBlock)\n        {\n            AllocationInfo allocInfo = AllocationInfo(hAlloc, pChanged);\n            (*it)->m_Allocations.push_back(allocInfo);\n        }\n        else\n        {\n            VMA_ASSERT(0);\n        }\n\n        ++m_AllocationCount;\n    }\n}\n\nVkResult VmaDefragmentationAlgorithm_Generic::DefragmentRound(\n    VmaVector< VmaDefragmentationMove, VmaStlAllocator<VmaDefragmentationMove> >& moves,\n    VkDeviceSize maxBytesToMove,\n    uint32_t maxAllocationsToMove,\n    bool freeOldAllocations)\n{\n    if(m_Blocks.empty())\n    {\n        return VK_SUCCESS;\n    }\n\n    // This is a choice based on research.\n    // Option 1:\n    uint32_t strategy = VMA_ALLOCATION_CREATE_STRATEGY_MIN_TIME_BIT;\n    // Option 2:\n    //uint32_t strategy = VMA_ALLOCATION_CREATE_STRATEGY_MIN_MEMORY_BIT;\n    // Option 3:\n    //uint32_t strategy = VMA_ALLOCATION_CREATE_STRATEGY_MIN_FRAGMENTATION_BIT;\n\n    size_t srcBlockMinIndex = 0;\n    // When FAST_ALGORITHM, move allocations from only last out of blocks that contain non-movable allocations.\n    /*\n    if(m_AlgorithmFlags & VMA_DEFRAGMENTATION_FAST_ALGORITHM_BIT)\n    {\n        const size_t blocksWithNonMovableCount = CalcBlocksWithNonMovableCount();\n        if(blocksWithNonMovableCount > 0)\n        {\n            srcBlockMinIndex = blocksWithNonMovableCount - 1;\n        }\n    }\n    */\n\n    size_t srcBlockIndex = m_Blocks.size() - 1;\n    size_t srcAllocIndex = SIZE_MAX;\n    for(;;)\n    {\n        // 1. Find next allocation to move.\n        // 1.1. Start from last to first m_Blocks - they are sorted from most \"destination\" to most \"source\".\n        // 1.2. Then start from last to first m_Allocations.\n        while(srcAllocIndex >= m_Blocks[srcBlockIndex]->m_Allocations.size())\n        {\n            if(m_Blocks[srcBlockIndex]->m_Allocations.empty())\n            {\n                // Finished: no more allocations to process.\n                if(srcBlockIndex == srcBlockMinIndex)\n                {\n                    return VK_SUCCESS;\n                }\n                else\n                {\n                    --srcBlockIndex;\n                    srcAllocIndex = SIZE_MAX;\n                }\n            }\n            else\n            {\n                srcAllocIndex = m_Blocks[srcBlockIndex]->m_Allocations.size() - 1;\n            }\n        }\n\n        BlockInfo* pSrcBlockInfo = m_Blocks[srcBlockIndex];\n        AllocationInfo& allocInfo = pSrcBlockInfo->m_Allocations[srcAllocIndex];\n\n        const VkDeviceSize size = allocInfo.m_hAllocation->GetSize();\n        const VkDeviceSize srcOffset = allocInfo.m_hAllocation->GetOffset();\n        const VkDeviceSize alignment = allocInfo.m_hAllocation->GetAlignment();\n        const VmaSuballocationType suballocType = allocInfo.m_hAllocation->GetSuballocationType();\n\n        // 2. Try to find new place for this allocation in preceding or current block.\n        for(size_t dstBlockIndex = 0; dstBlockIndex <= srcBlockIndex; ++dstBlockIndex)\n        {\n            BlockInfo* pDstBlockInfo = m_Blocks[dstBlockIndex];\n            VmaAllocationRequest dstAllocRequest;\n            if(pDstBlockInfo->m_pBlock->m_pMetadata->CreateAllocationRequest(\n                m_CurrentFrameIndex,\n                m_pBlockVector->GetFrameInUseCount(),\n                m_pBlockVector->GetBufferImageGranularity(),\n                size,\n                alignment,\n                false, // upperAddress\n                suballocType,\n                false, // canMakeOtherLost\n                strategy,\n                &dstAllocRequest) &&\n            MoveMakesSense(\n                dstBlockIndex, dstAllocRequest.offset, srcBlockIndex, srcOffset))\n            {\n                VMA_ASSERT(dstAllocRequest.itemsToMakeLostCount == 0);\n\n                // Reached limit on number of allocations or bytes to move.\n                if((m_AllocationsMoved + 1 > maxAllocationsToMove) ||\n                    (m_BytesMoved + size > maxBytesToMove))\n                {\n                    return VK_SUCCESS;\n                }\n\n                VmaDefragmentationMove move = {};\n                move.srcBlockIndex = pSrcBlockInfo->m_OriginalBlockIndex;\n                move.dstBlockIndex = pDstBlockInfo->m_OriginalBlockIndex;\n                move.srcOffset = srcOffset;\n                move.dstOffset = dstAllocRequest.offset;\n                move.size = size;\n                move.hAllocation = allocInfo.m_hAllocation;\n                move.pSrcBlock = pSrcBlockInfo->m_pBlock;\n                move.pDstBlock = pDstBlockInfo->m_pBlock;\n\n                moves.push_back(move);\n\n                pDstBlockInfo->m_pBlock->m_pMetadata->Alloc(dstAllocRequest, suballocType, allocInfo.m_hAllocation);\n\n                if(freeOldAllocations)\n                {\n                    pSrcBlockInfo->m_pBlock->m_pMetadata->FreeAtOffset(srcOffset);\n                    allocInfo.m_hAllocation->ChangeBlockAllocation(m_hAllocator, pDstBlockInfo->m_pBlock, dstAllocRequest.offset);\n                }\n\n                if(allocInfo.m_pChanged != VMA_NULL)\n                {\n                    *allocInfo.m_pChanged = VK_TRUE;\n                }\n\n                ++m_AllocationsMoved;\n                m_BytesMoved += size;\n\n                VmaVectorRemove(pSrcBlockInfo->m_Allocations, srcAllocIndex);\n\n                break;\n            }\n        }\n\n        // If not processed, this allocInfo remains in pBlockInfo->m_Allocations for next round.\n\n        if(srcAllocIndex > 0)\n        {\n            --srcAllocIndex;\n        }\n        else\n        {\n            if(srcBlockIndex > 0)\n            {\n                --srcBlockIndex;\n                srcAllocIndex = SIZE_MAX;\n            }\n            else\n            {\n                return VK_SUCCESS;\n            }\n        }\n    }\n}\n\nsize_t VmaDefragmentationAlgorithm_Generic::CalcBlocksWithNonMovableCount() const\n{\n    size_t result = 0;\n    for(size_t i = 0; i < m_Blocks.size(); ++i)\n    {\n        if(m_Blocks[i]->m_HasNonMovableAllocations)\n        {\n            ++result;\n        }\n    }\n    return result;\n}\n\nVkResult VmaDefragmentationAlgorithm_Generic::Defragment(\n    VmaVector< VmaDefragmentationMove, VmaStlAllocator<VmaDefragmentationMove> >& moves,\n    VkDeviceSize maxBytesToMove,\n    uint32_t maxAllocationsToMove,\n    VmaDefragmentationFlags flags)\n{\n    if(!m_AllAllocations && m_AllocationCount == 0)\n    {\n        return VK_SUCCESS;\n    }\n\n    const size_t blockCount = m_Blocks.size();\n    for(size_t blockIndex = 0; blockIndex < blockCount; ++blockIndex)\n    {\n        BlockInfo* pBlockInfo = m_Blocks[blockIndex];\n\n        if(m_AllAllocations)\n        {\n            VmaBlockMetadata_Generic* pMetadata = (VmaBlockMetadata_Generic*)pBlockInfo->m_pBlock->m_pMetadata;\n            VMA_ASSERT(!pMetadata->IsVirtual());\n            for (VmaSuballocationList::const_iterator it = pMetadata->m_Suballocations.begin();\n                it != pMetadata->m_Suballocations.end();\n                ++it)\n            {\n                if(it->type != VMA_SUBALLOCATION_TYPE_FREE)\n                {\n                    AllocationInfo allocInfo = AllocationInfo((VmaAllocation)it->userData, VMA_NULL);\n                    pBlockInfo->m_Allocations.push_back(allocInfo);\n                }\n            }\n        }\n\n        pBlockInfo->CalcHasNonMovableAllocations();\n\n        // This is a choice based on research.\n        // Option 1:\n        pBlockInfo->SortAllocationsByOffsetDescending();\n        // Option 2:\n        //pBlockInfo->SortAllocationsBySizeDescending();\n    }\n\n    // Sort m_Blocks this time by the main criterium, from most \"destination\" to most \"source\" blocks.\n    VMA_SORT(m_Blocks.begin(), m_Blocks.end(), BlockInfoCompareMoveDestination());\n\n    // This is a choice based on research.\n    const uint32_t roundCount = 2;\n\n    // Execute defragmentation rounds (the main part).\n    VkResult result = VK_SUCCESS;\n    for(uint32_t round = 0; (round < roundCount) && (result == VK_SUCCESS); ++round)\n    {\n        result = DefragmentRound(moves, maxBytesToMove, maxAllocationsToMove, !(flags & VMA_DEFRAGMENTATION_FLAG_INCREMENTAL));\n    }\n\n    return result;\n}\n\nbool VmaDefragmentationAlgorithm_Generic::MoveMakesSense(\n        size_t dstBlockIndex, VkDeviceSize dstOffset,\n        size_t srcBlockIndex, VkDeviceSize srcOffset)\n{\n    if(dstBlockIndex < srcBlockIndex)\n    {\n        return true;\n    }\n    if(dstBlockIndex > srcBlockIndex)\n    {\n        return false;\n    }\n    if(dstOffset < srcOffset)\n    {\n        return true;\n    }\n    return false;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// VmaDefragmentationAlgorithm_Fast\n\nVmaDefragmentationAlgorithm_Fast::VmaDefragmentationAlgorithm_Fast(\n    VmaAllocator hAllocator,\n    VmaBlockVector* pBlockVector,\n    uint32_t currentFrameIndex,\n    bool overlappingMoveSupported) :\n    VmaDefragmentationAlgorithm(hAllocator, pBlockVector, currentFrameIndex),\n    m_OverlappingMoveSupported(overlappingMoveSupported),\n    m_AllocationCount(0),\n    m_AllAllocations(false),\n    m_BytesMoved(0),\n    m_AllocationsMoved(0),\n    m_BlockInfos(VmaStlAllocator<BlockInfo>(hAllocator->GetAllocationCallbacks()))\n{\n    VMA_ASSERT(VMA_DEBUG_MARGIN == 0);\n\n}\n\nVmaDefragmentationAlgorithm_Fast::~VmaDefragmentationAlgorithm_Fast()\n{\n}\n\nVkResult VmaDefragmentationAlgorithm_Fast::Defragment(\n    VmaVector< VmaDefragmentationMove, VmaStlAllocator<VmaDefragmentationMove> >& moves,\n    VkDeviceSize maxBytesToMove,\n    uint32_t maxAllocationsToMove,\n    VmaDefragmentationFlags flags)\n{\n    VMA_ASSERT(m_AllAllocations || m_pBlockVector->CalcAllocationCount() == m_AllocationCount);\n\n    const size_t blockCount = m_pBlockVector->GetBlockCount();\n    if(blockCount == 0 || maxBytesToMove == 0 || maxAllocationsToMove == 0)\n    {\n        return VK_SUCCESS;\n    }\n\n    PreprocessMetadata();\n\n    // Sort blocks in order from most destination.\n\n    m_BlockInfos.resize(blockCount);\n    for(size_t i = 0; i < blockCount; ++i)\n    {\n        m_BlockInfos[i].origBlockIndex = i;\n    }\n\n    VMA_SORT(m_BlockInfos.begin(), m_BlockInfos.end(), [this](const BlockInfo& lhs, const BlockInfo& rhs) -> bool {\n        return m_pBlockVector->GetBlock(lhs.origBlockIndex)->m_pMetadata->GetSumFreeSize() <\n            m_pBlockVector->GetBlock(rhs.origBlockIndex)->m_pMetadata->GetSumFreeSize();\n    });\n\n    // THE MAIN ALGORITHM\n\n    FreeSpaceDatabase freeSpaceDb;\n\n    size_t dstBlockInfoIndex = 0;\n    size_t dstOrigBlockIndex = m_BlockInfos[dstBlockInfoIndex].origBlockIndex;\n    VmaDeviceMemoryBlock* pDstBlock = m_pBlockVector->GetBlock(dstOrigBlockIndex);\n    VmaBlockMetadata_Generic* pDstMetadata = (VmaBlockMetadata_Generic*)pDstBlock->m_pMetadata;\n    VkDeviceSize dstBlockSize = pDstMetadata->GetSize();\n    VkDeviceSize dstOffset = 0;\n\n    bool end = false;\n    for(size_t srcBlockInfoIndex = 0; !end && srcBlockInfoIndex < blockCount; ++srcBlockInfoIndex)\n    {\n        const size_t srcOrigBlockIndex = m_BlockInfos[srcBlockInfoIndex].origBlockIndex;\n        VmaDeviceMemoryBlock* const pSrcBlock = m_pBlockVector->GetBlock(srcOrigBlockIndex);\n        VmaBlockMetadata_Generic* const pSrcMetadata = (VmaBlockMetadata_Generic*)pSrcBlock->m_pMetadata;\n        for(VmaSuballocationList::iterator srcSuballocIt = pSrcMetadata->m_Suballocations.begin();\n            !end && srcSuballocIt != pSrcMetadata->m_Suballocations.end(); )\n        {\n            VmaAllocation const pAlloc = (VmaAllocation)srcSuballocIt->userData;\n            const VkDeviceSize srcAllocAlignment = pAlloc->GetAlignment();\n            const VkDeviceSize srcAllocSize = srcSuballocIt->size;\n            if(m_AllocationsMoved == maxAllocationsToMove ||\n                m_BytesMoved + srcAllocSize > maxBytesToMove)\n            {\n                end = true;\n                break;\n            }\n            const VkDeviceSize srcAllocOffset = srcSuballocIt->offset;\n\n            VmaDefragmentationMove move = {};\n            // Try to place it in one of free spaces from the database.\n            size_t freeSpaceInfoIndex;\n            VkDeviceSize dstAllocOffset;\n            if(freeSpaceDb.Fetch(srcAllocAlignment, srcAllocSize,\n                freeSpaceInfoIndex, dstAllocOffset))\n            {\n                size_t freeSpaceOrigBlockIndex = m_BlockInfos[freeSpaceInfoIndex].origBlockIndex;\n                VmaDeviceMemoryBlock* pFreeSpaceBlock = m_pBlockVector->GetBlock(freeSpaceOrigBlockIndex);\n                VmaBlockMetadata_Generic* pFreeSpaceMetadata = (VmaBlockMetadata_Generic*)pFreeSpaceBlock->m_pMetadata;\n\n                // Same block\n                if(freeSpaceInfoIndex == srcBlockInfoIndex)\n                {\n                    VMA_ASSERT(dstAllocOffset <= srcAllocOffset);\n\n                    // MOVE OPTION 1: Move the allocation inside the same block by decreasing offset.\n\n                    VmaSuballocation suballoc = *srcSuballocIt;\n                    suballoc.offset = dstAllocOffset;\n                    ((VmaAllocation)(suballoc.userData))->ChangeOffset(dstAllocOffset);\n                    m_BytesMoved += srcAllocSize;\n                    ++m_AllocationsMoved;\n\n                    VmaSuballocationList::iterator nextSuballocIt = srcSuballocIt;\n                    ++nextSuballocIt;\n                    pSrcMetadata->m_Suballocations.erase(srcSuballocIt);\n                    srcSuballocIt = nextSuballocIt;\n\n                    InsertSuballoc(pFreeSpaceMetadata, suballoc);\n\n                    move.srcBlockIndex = srcOrigBlockIndex;\n                    move.dstBlockIndex = freeSpaceOrigBlockIndex;\n                    move.srcOffset = srcAllocOffset;\n                    move.dstOffset = dstAllocOffset;\n                    move.size = srcAllocSize;\n\n                    moves.push_back(move);\n                }\n                // Different block\n                else\n                {\n                    // MOVE OPTION 2: Move the allocation to a different block.\n\n                    VMA_ASSERT(freeSpaceInfoIndex < srcBlockInfoIndex);\n\n                    VmaSuballocation suballoc = *srcSuballocIt;\n                    suballoc.offset = dstAllocOffset;\n                    ((VmaAllocation)(suballoc.userData))->ChangeBlockAllocation(m_hAllocator, pFreeSpaceBlock, dstAllocOffset);\n                    m_BytesMoved += srcAllocSize;\n                    ++m_AllocationsMoved;\n\n                    VmaSuballocationList::iterator nextSuballocIt = srcSuballocIt;\n                    ++nextSuballocIt;\n                    pSrcMetadata->m_Suballocations.erase(srcSuballocIt);\n                    srcSuballocIt = nextSuballocIt;\n\n                    InsertSuballoc(pFreeSpaceMetadata, suballoc);\n\n                    move.srcBlockIndex = srcOrigBlockIndex;\n                    move.dstBlockIndex = freeSpaceOrigBlockIndex;\n                    move.srcOffset = srcAllocOffset;\n                    move.dstOffset = dstAllocOffset;\n                    move.size = srcAllocSize;\n\n                    moves.push_back(move);\n                }\n            }\n            else\n            {\n                dstAllocOffset = VmaAlignUp(dstOffset, srcAllocAlignment);\n\n                // If the allocation doesn't fit before the end of dstBlock, forward to next block.\n                while(dstBlockInfoIndex < srcBlockInfoIndex &&\n                    dstAllocOffset + srcAllocSize > dstBlockSize)\n                {\n                    // But before that, register remaining free space at the end of dst block.\n                    freeSpaceDb.Register(dstBlockInfoIndex, dstOffset, dstBlockSize - dstOffset);\n\n                    ++dstBlockInfoIndex;\n                    dstOrigBlockIndex = m_BlockInfos[dstBlockInfoIndex].origBlockIndex;\n                    pDstBlock = m_pBlockVector->GetBlock(dstOrigBlockIndex);\n                    pDstMetadata = (VmaBlockMetadata_Generic*)pDstBlock->m_pMetadata;\n                    dstBlockSize = pDstMetadata->GetSize();\n                    dstOffset = 0;\n                    dstAllocOffset = 0;\n                }\n\n                // Same block\n                if(dstBlockInfoIndex == srcBlockInfoIndex)\n                {\n                    VMA_ASSERT(dstAllocOffset <= srcAllocOffset);\n\n                    const bool overlap = dstAllocOffset + srcAllocSize > srcAllocOffset;\n\n                    bool skipOver = overlap;\n                    if(overlap && m_OverlappingMoveSupported && dstAllocOffset < srcAllocOffset)\n                    {\n                        // If destination and source place overlap, skip if it would move it\n                        // by only < 1/64 of its size.\n                        skipOver = (srcAllocOffset - dstAllocOffset) * 64 < srcAllocSize;\n                    }\n\n                    if(skipOver)\n                    {\n                        freeSpaceDb.Register(dstBlockInfoIndex, dstOffset, srcAllocOffset - dstOffset);\n\n                        dstOffset = srcAllocOffset + srcAllocSize;\n                        ++srcSuballocIt;\n                    }\n                    // MOVE OPTION 1: Move the allocation inside the same block by decreasing offset.\n                    else\n                    {\n                        srcSuballocIt->offset = dstAllocOffset;\n                        ((VmaAllocation)(srcSuballocIt->userData))->ChangeOffset(dstAllocOffset);\n                        dstOffset = dstAllocOffset + srcAllocSize;\n                        m_BytesMoved += srcAllocSize;\n                        ++m_AllocationsMoved;\n                        ++srcSuballocIt;\n\n                        move.srcBlockIndex = srcOrigBlockIndex;\n                        move.dstBlockIndex = dstOrigBlockIndex;\n                        move.srcOffset = srcAllocOffset;\n                        move.dstOffset = dstAllocOffset;\n                        move.size = srcAllocSize;\n\n                        moves.push_back(move);\n                    }\n                }\n                // Different block\n                else\n                {\n                    // MOVE OPTION 2: Move the allocation to a different block.\n\n                    VMA_ASSERT(dstBlockInfoIndex < srcBlockInfoIndex);\n                    VMA_ASSERT(dstAllocOffset + srcAllocSize <= dstBlockSize);\n\n                    VmaSuballocation suballoc = *srcSuballocIt;\n                    suballoc.offset = dstAllocOffset;\n                    ((VmaAllocation)(suballoc.userData))->ChangeBlockAllocation(m_hAllocator, pDstBlock, dstAllocOffset);\n                    dstOffset = dstAllocOffset + srcAllocSize;\n                    m_BytesMoved += srcAllocSize;\n                    ++m_AllocationsMoved;\n\n                    VmaSuballocationList::iterator nextSuballocIt = srcSuballocIt;\n                    ++nextSuballocIt;\n                    pSrcMetadata->m_Suballocations.erase(srcSuballocIt);\n                    srcSuballocIt = nextSuballocIt;\n\n                    pDstMetadata->m_Suballocations.push_back(suballoc);\n\n                    move.srcBlockIndex = srcOrigBlockIndex;\n                    move.dstBlockIndex = dstOrigBlockIndex;\n                    move.srcOffset = srcAllocOffset;\n                    move.dstOffset = dstAllocOffset;\n                    move.size = srcAllocSize;\n\n                    moves.push_back(move);\n                }\n            }\n        }\n    }\n\n    m_BlockInfos.clear();\n\n    PostprocessMetadata();\n\n    return VK_SUCCESS;\n}\n\nvoid VmaDefragmentationAlgorithm_Fast::PreprocessMetadata()\n{\n    const size_t blockCount = m_pBlockVector->GetBlockCount();\n    for(size_t blockIndex = 0; blockIndex < blockCount; ++blockIndex)\n    {\n        VmaBlockMetadata_Generic* const pMetadata =\n            (VmaBlockMetadata_Generic*)m_pBlockVector->GetBlock(blockIndex)->m_pMetadata;\n        pMetadata->m_FreeCount = 0;\n        pMetadata->m_SumFreeSize = pMetadata->GetSize();\n        pMetadata->m_FreeSuballocationsBySize.clear();\n        for(VmaSuballocationList::iterator it = pMetadata->m_Suballocations.begin();\n            it != pMetadata->m_Suballocations.end(); )\n        {\n            if(it->type == VMA_SUBALLOCATION_TYPE_FREE)\n            {\n                VmaSuballocationList::iterator nextIt = it;\n                ++nextIt;\n                pMetadata->m_Suballocations.erase(it);\n                it = nextIt;\n            }\n            else\n            {\n                ++it;\n            }\n        }\n    }\n}\n\nvoid VmaDefragmentationAlgorithm_Fast::PostprocessMetadata()\n{\n    const size_t blockCount = m_pBlockVector->GetBlockCount();\n    for(size_t blockIndex = 0; blockIndex < blockCount; ++blockIndex)\n    {\n        VmaBlockMetadata_Generic* const pMetadata =\n            (VmaBlockMetadata_Generic*)m_pBlockVector->GetBlock(blockIndex)->m_pMetadata;\n        const VkDeviceSize blockSize = pMetadata->GetSize();\n\n        // No allocations in this block - entire area is free.\n        if(pMetadata->m_Suballocations.empty())\n        {\n            pMetadata->m_FreeCount = 1;\n            //pMetadata->m_SumFreeSize is already set to blockSize.\n            VmaSuballocation suballoc = {\n                0, // offset\n                blockSize, // size\n                VMA_NULL, // hAllocation\n                VMA_SUBALLOCATION_TYPE_FREE };\n            pMetadata->m_Suballocations.push_back(suballoc);\n            pMetadata->RegisterFreeSuballocation(pMetadata->m_Suballocations.begin());\n        }\n        // There are some allocations in this block.\n        else\n        {\n            VkDeviceSize offset = 0;\n            VmaSuballocationList::iterator it;\n            for(it = pMetadata->m_Suballocations.begin();\n                it != pMetadata->m_Suballocations.end();\n                ++it)\n            {\n                VMA_ASSERT(it->type != VMA_SUBALLOCATION_TYPE_FREE);\n                VMA_ASSERT(it->offset >= offset);\n\n                // Need to insert preceding free space.\n                if(it->offset > offset)\n                {\n                    ++pMetadata->m_FreeCount;\n                    const VkDeviceSize freeSize = it->offset - offset;\n                    VmaSuballocation suballoc = {\n                        offset, // offset\n                        freeSize, // size\n                        VMA_NULL, // hAllocation\n                        VMA_SUBALLOCATION_TYPE_FREE };\n                    VmaSuballocationList::iterator precedingFreeIt = pMetadata->m_Suballocations.insert(it, suballoc);\n                    pMetadata->m_FreeSuballocationsBySize.push_back(precedingFreeIt);\n                }\n\n                pMetadata->m_SumFreeSize -= it->size;\n                offset = it->offset + it->size;\n            }\n\n            // Need to insert trailing free space.\n            if(offset < blockSize)\n            {\n                ++pMetadata->m_FreeCount;\n                const VkDeviceSize freeSize = blockSize - offset;\n                VmaSuballocation suballoc = {\n                    offset, // offset\n                    freeSize, // size\n                    VMA_NULL, // hAllocation\n                    VMA_SUBALLOCATION_TYPE_FREE };\n                VMA_ASSERT(it == pMetadata->m_Suballocations.end());\n                VmaSuballocationList::iterator trailingFreeIt = pMetadata->m_Suballocations.insert(it, suballoc);\n                pMetadata->m_FreeSuballocationsBySize.push_back(trailingFreeIt);\n            }\n\n            VMA_SORT(\n                pMetadata->m_FreeSuballocationsBySize.begin(),\n                pMetadata->m_FreeSuballocationsBySize.end(),\n                VmaSuballocationItemSizeLess());\n        }\n\n        VMA_HEAVY_ASSERT(pMetadata->Validate());\n    }\n}\n\nvoid VmaDefragmentationAlgorithm_Fast::InsertSuballoc(VmaBlockMetadata_Generic* pMetadata, const VmaSuballocation& suballoc)\n{\n    // TODO: Optimize somehow. Remember iterator instead of searching for it linearly.\n    VmaSuballocationList::iterator it = pMetadata->m_Suballocations.begin();\n    while(it != pMetadata->m_Suballocations.end())\n    {\n        if(it->offset < suballoc.offset)\n        {\n            ++it;\n        }\n    }\n    pMetadata->m_Suballocations.insert(it, suballoc);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// VmaBlockVectorDefragmentationContext\n\nVmaBlockVectorDefragmentationContext::VmaBlockVectorDefragmentationContext(\n    VmaAllocator hAllocator,\n    VmaPool hCustomPool,\n    VmaBlockVector* pBlockVector,\n    uint32_t currFrameIndex) :\n    res(VK_SUCCESS),\n    mutexLocked(false),\n    blockContexts(VmaStlAllocator<VmaBlockDefragmentationContext>(hAllocator->GetAllocationCallbacks())),\n    defragmentationMoves(VmaStlAllocator<VmaDefragmentationMove>(hAllocator->GetAllocationCallbacks())),\n    defragmentationMovesProcessed(0),\n    defragmentationMovesCommitted(0),\n    hasDefragmentationPlan(0),\n    m_hAllocator(hAllocator),\n    m_hCustomPool(hCustomPool),\n    m_pBlockVector(pBlockVector),\n    m_CurrFrameIndex(currFrameIndex),\n    m_pAlgorithm(VMA_NULL),\n    m_Allocations(VmaStlAllocator<AllocInfo>(hAllocator->GetAllocationCallbacks())),\n    m_AllAllocations(false)\n{\n}\n\nVmaBlockVectorDefragmentationContext::~VmaBlockVectorDefragmentationContext()\n{\n    vma_delete(m_hAllocator, m_pAlgorithm);\n}\n\nvoid VmaBlockVectorDefragmentationContext::AddAllocation(VmaAllocation hAlloc, VkBool32* pChanged)\n{\n    AllocInfo info = { hAlloc, pChanged };\n    m_Allocations.push_back(info);\n}\n\nvoid VmaBlockVectorDefragmentationContext::Begin(bool overlappingMoveSupported, VmaDefragmentationFlags flags)\n{\n    const bool allAllocations = m_AllAllocations ||\n        m_Allocations.size() == m_pBlockVector->CalcAllocationCount();\n\n    /********************************\n    HERE IS THE CHOICE OF DEFRAGMENTATION ALGORITHM.\n    ********************************/\n\n    /*\n    Fast algorithm is supported only when certain criteria are met:\n    - VMA_DEBUG_MARGIN is 0.\n    - All allocations in this block vector are movable.\n    - There is no possibility of image/buffer granularity conflict.\n    - The defragmentation is not incremental\n    */\n    if(VMA_DEBUG_MARGIN == 0 &&\n        allAllocations &&\n        !m_pBlockVector->IsBufferImageGranularityConflictPossible() &&\n        !(flags & VMA_DEFRAGMENTATION_FLAG_INCREMENTAL))\n    {\n        m_pAlgorithm = vma_new(m_hAllocator, VmaDefragmentationAlgorithm_Fast)(\n            m_hAllocator, m_pBlockVector, m_CurrFrameIndex, overlappingMoveSupported);\n    }\n    else\n    {\n        m_pAlgorithm = vma_new(m_hAllocator, VmaDefragmentationAlgorithm_Generic)(\n            m_hAllocator, m_pBlockVector, m_CurrFrameIndex, overlappingMoveSupported);\n    }\n\n    if(allAllocations)\n    {\n        m_pAlgorithm->AddAll();\n    }\n    else\n    {\n        for(size_t i = 0, count = m_Allocations.size(); i < count; ++i)\n        {\n            m_pAlgorithm->AddAllocation(m_Allocations[i].hAlloc, m_Allocations[i].pChanged);\n        }\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// VmaDefragmentationContext\n\nVmaDefragmentationContext_T::VmaDefragmentationContext_T(\n    VmaAllocator hAllocator,\n    uint32_t currFrameIndex,\n    uint32_t flags,\n    VmaDefragmentationStats* pStats) :\n    m_hAllocator(hAllocator),\n    m_CurrFrameIndex(currFrameIndex),\n    m_Flags(flags),\n    m_pStats(pStats),\n    m_CustomPoolContexts(VmaStlAllocator<VmaBlockVectorDefragmentationContext*>(hAllocator->GetAllocationCallbacks()))\n{\n    memset(m_DefaultPoolContexts, 0, sizeof(m_DefaultPoolContexts));\n}\n\nVmaDefragmentationContext_T::~VmaDefragmentationContext_T()\n{\n    for(size_t i = m_CustomPoolContexts.size(); i--; )\n    {\n        VmaBlockVectorDefragmentationContext* pBlockVectorCtx = m_CustomPoolContexts[i];\n        pBlockVectorCtx->GetBlockVector()->DefragmentationEnd(pBlockVectorCtx, m_Flags, m_pStats);\n        vma_delete(m_hAllocator, pBlockVectorCtx);\n    }\n    for(size_t i = m_hAllocator->m_MemProps.memoryTypeCount; i--; )\n    {\n        VmaBlockVectorDefragmentationContext* pBlockVectorCtx = m_DefaultPoolContexts[i];\n        if(pBlockVectorCtx)\n        {\n            pBlockVectorCtx->GetBlockVector()->DefragmentationEnd(pBlockVectorCtx, m_Flags, m_pStats);\n            vma_delete(m_hAllocator, pBlockVectorCtx);\n        }\n    }\n}\n\nvoid VmaDefragmentationContext_T::AddPools(uint32_t poolCount, const VmaPool* pPools)\n{\n    for(uint32_t poolIndex = 0; poolIndex < poolCount; ++poolIndex)\n    {\n        VmaPool pool = pPools[poolIndex];\n        VMA_ASSERT(pool);\n        // Pools with algorithm other than default are not defragmented.\n        if(pool->m_BlockVector.GetAlgorithm() == 0)\n        {\n            VmaBlockVectorDefragmentationContext* pBlockVectorDefragCtx = VMA_NULL;\n\n            for(size_t i = m_CustomPoolContexts.size(); i--; )\n            {\n                if(m_CustomPoolContexts[i]->GetCustomPool() == pool)\n                {\n                    pBlockVectorDefragCtx = m_CustomPoolContexts[i];\n                    break;\n                }\n            }\n\n            if(!pBlockVectorDefragCtx)\n            {\n                pBlockVectorDefragCtx = vma_new(m_hAllocator, VmaBlockVectorDefragmentationContext)(\n                    m_hAllocator,\n                    pool,\n                    &pool->m_BlockVector,\n                    m_CurrFrameIndex);\n                m_CustomPoolContexts.push_back(pBlockVectorDefragCtx);\n            }\n\n            pBlockVectorDefragCtx->AddAll();\n        }\n    }\n}\n\nvoid VmaDefragmentationContext_T::AddAllocations(\n    uint32_t allocationCount,\n    const VmaAllocation* pAllocations,\n    VkBool32* pAllocationsChanged)\n{\n    // Dispatch pAllocations among defragmentators. Create them when necessary.\n    for(uint32_t allocIndex = 0; allocIndex < allocationCount; ++allocIndex)\n    {\n        const VmaAllocation hAlloc = pAllocations[allocIndex];\n        VMA_ASSERT(hAlloc);\n        // DedicatedAlloc cannot be defragmented.\n        if((hAlloc->GetType() == VmaAllocation_T::ALLOCATION_TYPE_BLOCK) &&\n            // Lost allocation cannot be defragmented.\n            (hAlloc->GetLastUseFrameIndex() != VMA_FRAME_INDEX_LOST))\n        {\n            VmaBlockVectorDefragmentationContext* pBlockVectorDefragCtx = VMA_NULL;\n\n            const VmaPool hAllocPool = hAlloc->GetBlock()->GetParentPool();\n            // This allocation belongs to custom pool.\n            if(hAllocPool != VK_NULL_HANDLE)\n            {\n                // Pools with algorithm other than default are not defragmented.\n                if(hAllocPool->m_BlockVector.GetAlgorithm() == 0)\n                {\n                    for(size_t i = m_CustomPoolContexts.size(); i--; )\n                    {\n                        if(m_CustomPoolContexts[i]->GetCustomPool() == hAllocPool)\n                        {\n                            pBlockVectorDefragCtx = m_CustomPoolContexts[i];\n                            break;\n                        }\n                    }\n                    if(!pBlockVectorDefragCtx)\n                    {\n                        pBlockVectorDefragCtx = vma_new(m_hAllocator, VmaBlockVectorDefragmentationContext)(\n                            m_hAllocator,\n                            hAllocPool,\n                            &hAllocPool->m_BlockVector,\n                            m_CurrFrameIndex);\n                        m_CustomPoolContexts.push_back(pBlockVectorDefragCtx);\n                    }\n                }\n            }\n            // This allocation belongs to default pool.\n            else\n            {\n                const uint32_t memTypeIndex = hAlloc->GetMemoryTypeIndex();\n                pBlockVectorDefragCtx = m_DefaultPoolContexts[memTypeIndex];\n                if(!pBlockVectorDefragCtx)\n                {\n                    pBlockVectorDefragCtx = vma_new(m_hAllocator, VmaBlockVectorDefragmentationContext)(\n                        m_hAllocator,\n                        VMA_NULL, // hCustomPool\n                        m_hAllocator->m_pBlockVectors[memTypeIndex],\n                        m_CurrFrameIndex);\n                    m_DefaultPoolContexts[memTypeIndex] = pBlockVectorDefragCtx;\n                }\n            }\n\n            if(pBlockVectorDefragCtx)\n            {\n                VkBool32* const pChanged = (pAllocationsChanged != VMA_NULL) ?\n                    &pAllocationsChanged[allocIndex] : VMA_NULL;\n                pBlockVectorDefragCtx->AddAllocation(hAlloc, pChanged);\n            }\n        }\n    }\n}\n\nVkResult VmaDefragmentationContext_T::Defragment(\n    VkDeviceSize maxCpuBytesToMove, uint32_t maxCpuAllocationsToMove,\n    VkDeviceSize maxGpuBytesToMove, uint32_t maxGpuAllocationsToMove,\n    VkCommandBuffer commandBuffer, VmaDefragmentationStats* pStats, VmaDefragmentationFlags flags)\n{\n    if(pStats)\n    {\n        memset(pStats, 0, sizeof(VmaDefragmentationStats));\n    }\n\n    if(flags & VMA_DEFRAGMENTATION_FLAG_INCREMENTAL)\n    {\n        // For incremental defragmetnations, we just earmark how much we can move\n        // The real meat is in the defragmentation steps\n        m_MaxCpuBytesToMove = maxCpuBytesToMove;\n        m_MaxCpuAllocationsToMove = maxCpuAllocationsToMove;\n\n        m_MaxGpuBytesToMove = maxGpuBytesToMove;\n        m_MaxGpuAllocationsToMove = maxGpuAllocationsToMove;\n\n        if(m_MaxCpuBytesToMove == 0 && m_MaxCpuAllocationsToMove == 0 &&\n            m_MaxGpuBytesToMove == 0 && m_MaxGpuAllocationsToMove == 0)\n            return VK_SUCCESS;\n\n        return VK_NOT_READY;\n    }\n\n    if(commandBuffer == VK_NULL_HANDLE)\n    {\n        maxGpuBytesToMove = 0;\n        maxGpuAllocationsToMove = 0;\n    }\n\n    VkResult res = VK_SUCCESS;\n\n    // Process default pools.\n    for(uint32_t memTypeIndex = 0;\n        memTypeIndex < m_hAllocator->GetMemoryTypeCount() && res >= VK_SUCCESS;\n        ++memTypeIndex)\n    {\n        VmaBlockVectorDefragmentationContext* pBlockVectorCtx = m_DefaultPoolContexts[memTypeIndex];\n        if(pBlockVectorCtx)\n        {\n            VMA_ASSERT(pBlockVectorCtx->GetBlockVector());\n            pBlockVectorCtx->GetBlockVector()->Defragment(\n                pBlockVectorCtx,\n                pStats, flags,\n                maxCpuBytesToMove, maxCpuAllocationsToMove,\n                maxGpuBytesToMove, maxGpuAllocationsToMove,\n                commandBuffer);\n            if(pBlockVectorCtx->res != VK_SUCCESS)\n            {\n                res = pBlockVectorCtx->res;\n            }\n        }\n    }\n\n    // Process custom pools.\n    for(size_t customCtxIndex = 0, customCtxCount = m_CustomPoolContexts.size();\n        customCtxIndex < customCtxCount && res >= VK_SUCCESS;\n        ++customCtxIndex)\n    {\n        VmaBlockVectorDefragmentationContext* pBlockVectorCtx = m_CustomPoolContexts[customCtxIndex];\n        VMA_ASSERT(pBlockVectorCtx && pBlockVectorCtx->GetBlockVector());\n        pBlockVectorCtx->GetBlockVector()->Defragment(\n            pBlockVectorCtx,\n            pStats, flags,\n            maxCpuBytesToMove, maxCpuAllocationsToMove,\n            maxGpuBytesToMove, maxGpuAllocationsToMove,\n            commandBuffer);\n        if(pBlockVectorCtx->res != VK_SUCCESS)\n        {\n            res = pBlockVectorCtx->res;\n        }\n    }\n\n    return res;\n}\n\nVkResult VmaDefragmentationContext_T::DefragmentPassBegin(VmaDefragmentationPassInfo* pInfo)\n{\n    VmaDefragmentationPassMoveInfo* pCurrentMove = pInfo->pMoves;\n    uint32_t movesLeft = pInfo->moveCount;\n\n    // Process default pools.\n    for(uint32_t memTypeIndex = 0;\n        memTypeIndex < m_hAllocator->GetMemoryTypeCount();\n        ++memTypeIndex)\n    {\n        VmaBlockVectorDefragmentationContext *pBlockVectorCtx = m_DefaultPoolContexts[memTypeIndex];\n        if(pBlockVectorCtx)\n        {\n            VMA_ASSERT(pBlockVectorCtx->GetBlockVector());\n\n            if(!pBlockVectorCtx->hasDefragmentationPlan)\n            {\n                pBlockVectorCtx->GetBlockVector()->Defragment(\n                    pBlockVectorCtx,\n                    m_pStats, m_Flags,\n                    m_MaxCpuBytesToMove, m_MaxCpuAllocationsToMove,\n                    m_MaxGpuBytesToMove, m_MaxGpuAllocationsToMove,\n                    VK_NULL_HANDLE);\n\n                if(pBlockVectorCtx->res < VK_SUCCESS)\n                    continue;\n\n                pBlockVectorCtx->hasDefragmentationPlan = true;\n            }\n\n            const uint32_t processed = pBlockVectorCtx->GetBlockVector()->ProcessDefragmentations(\n                pBlockVectorCtx,\n                pCurrentMove, movesLeft);\n\n            movesLeft -= processed;\n            pCurrentMove += processed;\n        }\n    }\n\n    // Process custom pools.\n    for(size_t customCtxIndex = 0, customCtxCount = m_CustomPoolContexts.size();\n        customCtxIndex < customCtxCount;\n        ++customCtxIndex)\n    {\n        VmaBlockVectorDefragmentationContext *pBlockVectorCtx = m_CustomPoolContexts[customCtxIndex];\n        VMA_ASSERT(pBlockVectorCtx && pBlockVectorCtx->GetBlockVector());\n\n        if(!pBlockVectorCtx->hasDefragmentationPlan)\n        {\n            pBlockVectorCtx->GetBlockVector()->Defragment(\n                pBlockVectorCtx,\n                m_pStats, m_Flags,\n                m_MaxCpuBytesToMove, m_MaxCpuAllocationsToMove,\n                m_MaxGpuBytesToMove, m_MaxGpuAllocationsToMove,\n                VK_NULL_HANDLE);\n\n            if(pBlockVectorCtx->res < VK_SUCCESS)\n                continue;\n\n            pBlockVectorCtx->hasDefragmentationPlan = true;\n        }\n\n        const uint32_t processed = pBlockVectorCtx->GetBlockVector()->ProcessDefragmentations(\n            pBlockVectorCtx,\n            pCurrentMove, movesLeft);\n\n        movesLeft -= processed;\n        pCurrentMove += processed;\n    }\n\n    pInfo->moveCount = pInfo->moveCount - movesLeft;\n\n    return VK_SUCCESS;\n}\nVkResult VmaDefragmentationContext_T::DefragmentPassEnd()\n{\n    VkResult res = VK_SUCCESS;\n\n    // Process default pools.\n    for(uint32_t memTypeIndex = 0;\n        memTypeIndex < m_hAllocator->GetMemoryTypeCount();\n        ++memTypeIndex)\n    {\n        VmaBlockVectorDefragmentationContext *pBlockVectorCtx = m_DefaultPoolContexts[memTypeIndex];\n        if(pBlockVectorCtx)\n        {\n            VMA_ASSERT(pBlockVectorCtx->GetBlockVector());\n\n            if(!pBlockVectorCtx->hasDefragmentationPlan)\n            {\n                res = VK_NOT_READY;\n                continue;\n            }\n\n            pBlockVectorCtx->GetBlockVector()->CommitDefragmentations(\n                pBlockVectorCtx, m_pStats);\n\n            if(pBlockVectorCtx->defragmentationMoves.size() != pBlockVectorCtx->defragmentationMovesCommitted)\n                res = VK_NOT_READY;\n        }\n    }\n\n    // Process custom pools.\n    for(size_t customCtxIndex = 0, customCtxCount = m_CustomPoolContexts.size();\n        customCtxIndex < customCtxCount;\n        ++customCtxIndex)\n    {\n        VmaBlockVectorDefragmentationContext *pBlockVectorCtx = m_CustomPoolContexts[customCtxIndex];\n        VMA_ASSERT(pBlockVectorCtx && pBlockVectorCtx->GetBlockVector());\n\n        if(!pBlockVectorCtx->hasDefragmentationPlan)\n        {\n            res = VK_NOT_READY;\n            continue;\n        }\n\n        pBlockVectorCtx->GetBlockVector()->CommitDefragmentations(\n            pBlockVectorCtx, m_pStats);\n\n        if(pBlockVectorCtx->defragmentationMoves.size() != pBlockVectorCtx->defragmentationMovesCommitted)\n            res = VK_NOT_READY;\n    }\n\n    return res;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// VmaRecorder\n\n#if VMA_RECORDING_ENABLED\n\nVmaRecorder::VmaRecorder() :\n    m_UseMutex(true),\n    m_Flags(0),\n    m_File(VMA_NULL),\n    m_RecordingStartTime(std::chrono::high_resolution_clock::now())\n{\n}\n\nVkResult VmaRecorder::Init(const VmaRecordSettings& settings, bool useMutex)\n{\n    m_UseMutex = useMutex;\n    m_Flags = settings.flags;\n\n#if defined(_WIN32)\n    // Open file for writing.\n    errno_t err = fopen_s(&m_File, settings.pFilePath, \"wb\");\n\n    if(err != 0)\n    {\n        return VK_ERROR_INITIALIZATION_FAILED;\n    }\n#else\n    // Open file for writing.\n    m_File = fopen(settings.pFilePath, \"wb\");\n\n    if(m_File == 0)\n    {\n        return VK_ERROR_INITIALIZATION_FAILED;\n    }\n#endif\n\n    // Write header.\n    fprintf(m_File, \"%s\\n\", \"Vulkan Memory Allocator,Calls recording\");\n    fprintf(m_File, \"%s\\n\", \"1,8\");\n\n    return VK_SUCCESS;\n}\n\nVmaRecorder::~VmaRecorder()\n{\n    if(m_File != VMA_NULL)\n    {\n        fclose(m_File);\n    }\n}\n\nvoid VmaRecorder::RecordCreateAllocator(uint32_t frameIndex)\n{\n    CallParams callParams;\n    GetBasicParams(callParams);\n\n    VmaMutexLock lock(m_FileMutex, m_UseMutex);\n    fprintf(m_File, \"%u,%.3f,%u,vmaCreateAllocator\\n\", callParams.threadId, callParams.time, frameIndex);\n    Flush();\n}\n\nvoid VmaRecorder::RecordDestroyAllocator(uint32_t frameIndex)\n{\n    CallParams callParams;\n    GetBasicParams(callParams);\n\n    VmaMutexLock lock(m_FileMutex, m_UseMutex);\n    fprintf(m_File, \"%u,%.3f,%u,vmaDestroyAllocator\\n\", callParams.threadId, callParams.time, frameIndex);\n    Flush();\n}\n\nvoid VmaRecorder::RecordCreatePool(uint32_t frameIndex, const VmaPoolCreateInfo& createInfo, VmaPool pool)\n{\n    CallParams callParams;\n    GetBasicParams(callParams);\n\n    VmaMutexLock lock(m_FileMutex, m_UseMutex);\n    fprintf(m_File, \"%u,%.3f,%u,vmaCreatePool,%u,%u,%llu,%llu,%llu,%u,%p\\n\", callParams.threadId, callParams.time, frameIndex,\n        createInfo.memoryTypeIndex,\n        createInfo.flags,\n        createInfo.blockSize,\n        (uint64_t)createInfo.minBlockCount,\n        (uint64_t)createInfo.maxBlockCount,\n        createInfo.frameInUseCount,\n        pool);\n    Flush();\n}\n\nvoid VmaRecorder::RecordDestroyPool(uint32_t frameIndex, VmaPool pool)\n{\n    CallParams callParams;\n    GetBasicParams(callParams);\n\n    VmaMutexLock lock(m_FileMutex, m_UseMutex);\n    fprintf(m_File, \"%u,%.3f,%u,vmaDestroyPool,%p\\n\", callParams.threadId, callParams.time, frameIndex,\n        pool);\n    Flush();\n}\n\nvoid VmaRecorder::RecordAllocateMemory(uint32_t frameIndex,\n        const VkMemoryRequirements& vkMemReq,\n        const VmaAllocationCreateInfo& createInfo,\n        VmaAllocation allocation)\n{\n    CallParams callParams;\n    GetBasicParams(callParams);\n\n    VmaMutexLock lock(m_FileMutex, m_UseMutex);\n    UserDataString userDataStr(createInfo.flags, createInfo.pUserData);\n    fprintf(m_File, \"%u,%.3f,%u,vmaAllocateMemory,%llu,%llu,%u,%u,%u,%u,%u,%u,%p,%p,%s\\n\", callParams.threadId, callParams.time, frameIndex,\n        vkMemReq.size,\n        vkMemReq.alignment,\n        vkMemReq.memoryTypeBits,\n        createInfo.flags,\n        createInfo.usage,\n        createInfo.requiredFlags,\n        createInfo.preferredFlags,\n        createInfo.memoryTypeBits,\n        createInfo.pool,\n        allocation,\n        userDataStr.GetString());\n    Flush();\n}\n\nvoid VmaRecorder::RecordAllocateMemoryPages(uint32_t frameIndex,\n    const VkMemoryRequirements& vkMemReq,\n    const VmaAllocationCreateInfo& createInfo,\n    uint64_t allocationCount,\n    const VmaAllocation* pAllocations)\n{\n    CallParams callParams;\n    GetBasicParams(callParams);\n\n    VmaMutexLock lock(m_FileMutex, m_UseMutex);\n    UserDataString userDataStr(createInfo.flags, createInfo.pUserData);\n    fprintf(m_File, \"%u,%.3f,%u,vmaAllocateMemoryPages,%llu,%llu,%u,%u,%u,%u,%u,%u,%p,\", callParams.threadId, callParams.time, frameIndex,\n        vkMemReq.size,\n        vkMemReq.alignment,\n        vkMemReq.memoryTypeBits,\n        createInfo.flags,\n        createInfo.usage,\n        createInfo.requiredFlags,\n        createInfo.preferredFlags,\n        createInfo.memoryTypeBits,\n        createInfo.pool);\n    PrintPointerList(allocationCount, pAllocations);\n    fprintf(m_File, \",%s\\n\", userDataStr.GetString());\n    Flush();\n}\n\nvoid VmaRecorder::RecordAllocateMemoryForBuffer(uint32_t frameIndex,\n    const VkMemoryRequirements& vkMemReq,\n    bool requiresDedicatedAllocation,\n    bool prefersDedicatedAllocation,\n    const VmaAllocationCreateInfo& createInfo,\n    VmaAllocation allocation)\n{\n    CallParams callParams;\n    GetBasicParams(callParams);\n\n    VmaMutexLock lock(m_FileMutex, m_UseMutex);\n    UserDataString userDataStr(createInfo.flags, createInfo.pUserData);\n    fprintf(m_File, \"%u,%.3f,%u,vmaAllocateMemoryForBuffer,%llu,%llu,%u,%u,%u,%u,%u,%u,%u,%u,%p,%p,%s\\n\", callParams.threadId, callParams.time, frameIndex,\n        vkMemReq.size,\n        vkMemReq.alignment,\n        vkMemReq.memoryTypeBits,\n        requiresDedicatedAllocation ? 1 : 0,\n        prefersDedicatedAllocation ? 1 : 0,\n        createInfo.flags,\n        createInfo.usage,\n        createInfo.requiredFlags,\n        createInfo.preferredFlags,\n        createInfo.memoryTypeBits,\n        createInfo.pool,\n        allocation,\n        userDataStr.GetString());\n    Flush();\n}\n\nvoid VmaRecorder::RecordAllocateMemoryForImage(uint32_t frameIndex,\n    const VkMemoryRequirements& vkMemReq,\n    bool requiresDedicatedAllocation,\n    bool prefersDedicatedAllocation,\n    const VmaAllocationCreateInfo& createInfo,\n    VmaAllocation allocation)\n{\n    CallParams callParams;\n    GetBasicParams(callParams);\n\n    VmaMutexLock lock(m_FileMutex, m_UseMutex);\n    UserDataString userDataStr(createInfo.flags, createInfo.pUserData);\n    fprintf(m_File, \"%u,%.3f,%u,vmaAllocateMemoryForImage,%llu,%llu,%u,%u,%u,%u,%u,%u,%u,%u,%p,%p,%s\\n\", callParams.threadId, callParams.time, frameIndex,\n        vkMemReq.size,\n        vkMemReq.alignment,\n        vkMemReq.memoryTypeBits,\n        requiresDedicatedAllocation ? 1 : 0,\n        prefersDedicatedAllocation ? 1 : 0,\n        createInfo.flags,\n        createInfo.usage,\n        createInfo.requiredFlags,\n        createInfo.preferredFlags,\n        createInfo.memoryTypeBits,\n        createInfo.pool,\n        allocation,\n        userDataStr.GetString());\n    Flush();\n}\n\nvoid VmaRecorder::RecordFreeMemory(uint32_t frameIndex,\n    VmaAllocation allocation)\n{\n    CallParams callParams;\n    GetBasicParams(callParams);\n\n    VmaMutexLock lock(m_FileMutex, m_UseMutex);\n    fprintf(m_File, \"%u,%.3f,%u,vmaFreeMemory,%p\\n\", callParams.threadId, callParams.time, frameIndex,\n        allocation);\n    Flush();\n}\n\nvoid VmaRecorder::RecordFreeMemoryPages(uint32_t frameIndex,\n    uint64_t allocationCount,\n    const VmaAllocation* pAllocations)\n{\n    CallParams callParams;\n    GetBasicParams(callParams);\n\n    VmaMutexLock lock(m_FileMutex, m_UseMutex);\n    fprintf(m_File, \"%u,%.3f,%u,vmaFreeMemoryPages,\", callParams.threadId, callParams.time, frameIndex);\n    PrintPointerList(allocationCount, pAllocations);\n    fprintf(m_File, \"\\n\");\n    Flush();\n}\n\nvoid VmaRecorder::RecordSetAllocationUserData(uint32_t frameIndex,\n    VmaAllocation allocation,\n    const void* pUserData)\n{\n    CallParams callParams;\n    GetBasicParams(callParams);\n\n    VmaMutexLock lock(m_FileMutex, m_UseMutex);\n    UserDataString userDataStr(\n        allocation->IsUserDataString() ? VMA_ALLOCATION_CREATE_USER_DATA_COPY_STRING_BIT : 0,\n        pUserData);\n    fprintf(m_File, \"%u,%.3f,%u,vmaSetAllocationUserData,%p,%s\\n\", callParams.threadId, callParams.time, frameIndex,\n        allocation,\n        userDataStr.GetString());\n    Flush();\n}\n\nvoid VmaRecorder::RecordCreateLostAllocation(uint32_t frameIndex,\n    VmaAllocation allocation)\n{\n    CallParams callParams;\n    GetBasicParams(callParams);\n\n    VmaMutexLock lock(m_FileMutex, m_UseMutex);\n    fprintf(m_File, \"%u,%.3f,%u,vmaCreateLostAllocation,%p\\n\", callParams.threadId, callParams.time, frameIndex,\n        allocation);\n    Flush();\n}\n\nvoid VmaRecorder::RecordMapMemory(uint32_t frameIndex,\n    VmaAllocation allocation)\n{\n    CallParams callParams;\n    GetBasicParams(callParams);\n\n    VmaMutexLock lock(m_FileMutex, m_UseMutex);\n    fprintf(m_File, \"%u,%.3f,%u,vmaMapMemory,%p\\n\", callParams.threadId, callParams.time, frameIndex,\n        allocation);\n    Flush();\n}\n\nvoid VmaRecorder::RecordUnmapMemory(uint32_t frameIndex,\n    VmaAllocation allocation)\n{\n    CallParams callParams;\n    GetBasicParams(callParams);\n\n    VmaMutexLock lock(m_FileMutex, m_UseMutex);\n    fprintf(m_File, \"%u,%.3f,%u,vmaUnmapMemory,%p\\n\", callParams.threadId, callParams.time, frameIndex,\n        allocation);\n    Flush();\n}\n\nvoid VmaRecorder::RecordFlushAllocation(uint32_t frameIndex,\n    VmaAllocation allocation, VkDeviceSize offset, VkDeviceSize size)\n{\n    CallParams callParams;\n    GetBasicParams(callParams);\n\n    VmaMutexLock lock(m_FileMutex, m_UseMutex);\n    fprintf(m_File, \"%u,%.3f,%u,vmaFlushAllocation,%p,%llu,%llu\\n\", callParams.threadId, callParams.time, frameIndex,\n        allocation,\n        offset,\n        size);\n    Flush();\n}\n\nvoid VmaRecorder::RecordInvalidateAllocation(uint32_t frameIndex,\n    VmaAllocation allocation, VkDeviceSize offset, VkDeviceSize size)\n{\n    CallParams callParams;\n    GetBasicParams(callParams);\n\n    VmaMutexLock lock(m_FileMutex, m_UseMutex);\n    fprintf(m_File, \"%u,%.3f,%u,vmaInvalidateAllocation,%p,%llu,%llu\\n\", callParams.threadId, callParams.time, frameIndex,\n        allocation,\n        offset,\n        size);\n    Flush();\n}\n\nvoid VmaRecorder::RecordCreateBuffer(uint32_t frameIndex,\n    const VkBufferCreateInfo& bufCreateInfo,\n    const VmaAllocationCreateInfo& allocCreateInfo,\n    VmaAllocation allocation)\n{\n    CallParams callParams;\n    GetBasicParams(callParams);\n\n    VmaMutexLock lock(m_FileMutex, m_UseMutex);\n    UserDataString userDataStr(allocCreateInfo.flags, allocCreateInfo.pUserData);\n    fprintf(m_File, \"%u,%.3f,%u,vmaCreateBuffer,%u,%llu,%u,%u,%u,%u,%u,%u,%u,%p,%p,%s\\n\", callParams.threadId, callParams.time, frameIndex,\n        bufCreateInfo.flags,\n        bufCreateInfo.size,\n        bufCreateInfo.usage,\n        bufCreateInfo.sharingMode,\n        allocCreateInfo.flags,\n        allocCreateInfo.usage,\n        allocCreateInfo.requiredFlags,\n        allocCreateInfo.preferredFlags,\n        allocCreateInfo.memoryTypeBits,\n        allocCreateInfo.pool,\n        allocation,\n        userDataStr.GetString());\n    Flush();\n}\n\nvoid VmaRecorder::RecordCreateImage(uint32_t frameIndex,\n    const VkImageCreateInfo& imageCreateInfo,\n    const VmaAllocationCreateInfo& allocCreateInfo,\n    VmaAllocation allocation)\n{\n    CallParams callParams;\n    GetBasicParams(callParams);\n\n    VmaMutexLock lock(m_FileMutex, m_UseMutex);\n    UserDataString userDataStr(allocCreateInfo.flags, allocCreateInfo.pUserData);\n    fprintf(m_File, \"%u,%.3f,%u,vmaCreateImage,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%p,%p,%s\\n\", callParams.threadId, callParams.time, frameIndex,\n        imageCreateInfo.flags,\n        imageCreateInfo.imageType,\n        imageCreateInfo.format,\n        imageCreateInfo.extent.width,\n        imageCreateInfo.extent.height,\n        imageCreateInfo.extent.depth,\n        imageCreateInfo.mipLevels,\n        imageCreateInfo.arrayLayers,\n        imageCreateInfo.samples,\n        imageCreateInfo.tiling,\n        imageCreateInfo.usage,\n        imageCreateInfo.sharingMode,\n        imageCreateInfo.initialLayout,\n        allocCreateInfo.flags,\n        allocCreateInfo.usage,\n        allocCreateInfo.requiredFlags,\n        allocCreateInfo.preferredFlags,\n        allocCreateInfo.memoryTypeBits,\n        allocCreateInfo.pool,\n        allocation,\n        userDataStr.GetString());\n    Flush();\n}\n\nvoid VmaRecorder::RecordDestroyBuffer(uint32_t frameIndex,\n    VmaAllocation allocation)\n{\n    CallParams callParams;\n    GetBasicParams(callParams);\n\n    VmaMutexLock lock(m_FileMutex, m_UseMutex);\n    fprintf(m_File, \"%u,%.3f,%u,vmaDestroyBuffer,%p\\n\", callParams.threadId, callParams.time, frameIndex,\n        allocation);\n    Flush();\n}\n\nvoid VmaRecorder::RecordDestroyImage(uint32_t frameIndex,\n    VmaAllocation allocation)\n{\n    CallParams callParams;\n    GetBasicParams(callParams);\n\n    VmaMutexLock lock(m_FileMutex, m_UseMutex);\n    fprintf(m_File, \"%u,%.3f,%u,vmaDestroyImage,%p\\n\", callParams.threadId, callParams.time, frameIndex,\n        allocation);\n    Flush();\n}\n\nvoid VmaRecorder::RecordTouchAllocation(uint32_t frameIndex,\n    VmaAllocation allocation)\n{\n    CallParams callParams;\n    GetBasicParams(callParams);\n\n    VmaMutexLock lock(m_FileMutex, m_UseMutex);\n    fprintf(m_File, \"%u,%.3f,%u,vmaTouchAllocation,%p\\n\", callParams.threadId, callParams.time, frameIndex,\n        allocation);\n    Flush();\n}\n\nvoid VmaRecorder::RecordGetAllocationInfo(uint32_t frameIndex,\n    VmaAllocation allocation)\n{\n    CallParams callParams;\n    GetBasicParams(callParams);\n\n    VmaMutexLock lock(m_FileMutex, m_UseMutex);\n    fprintf(m_File, \"%u,%.3f,%u,vmaGetAllocationInfo,%p\\n\", callParams.threadId, callParams.time, frameIndex,\n        allocation);\n    Flush();\n}\n\nvoid VmaRecorder::RecordMakePoolAllocationsLost(uint32_t frameIndex,\n    VmaPool pool)\n{\n    CallParams callParams;\n    GetBasicParams(callParams);\n\n    VmaMutexLock lock(m_FileMutex, m_UseMutex);\n    fprintf(m_File, \"%u,%.3f,%u,vmaMakePoolAllocationsLost,%p\\n\", callParams.threadId, callParams.time, frameIndex,\n        pool);\n    Flush();\n}\n\nvoid VmaRecorder::RecordDefragmentationBegin(uint32_t frameIndex,\n    const VmaDefragmentationInfo2& info,\n    VmaDefragmentationContext ctx)\n{\n    CallParams callParams;\n    GetBasicParams(callParams);\n\n    VmaMutexLock lock(m_FileMutex, m_UseMutex);\n    fprintf(m_File, \"%u,%.3f,%u,vmaDefragmentationBegin,%u,\", callParams.threadId, callParams.time, frameIndex,\n        info.flags);\n    PrintPointerList(info.allocationCount, info.pAllocations);\n    fprintf(m_File, \",\");\n    PrintPointerList(info.poolCount, info.pPools);\n    fprintf(m_File, \",%llu,%u,%llu,%u,%p,%p\\n\",\n        info.maxCpuBytesToMove,\n        info.maxCpuAllocationsToMove,\n        info.maxGpuBytesToMove,\n        info.maxGpuAllocationsToMove,\n        info.commandBuffer,\n        ctx);\n    Flush();\n}\n\nvoid VmaRecorder::RecordDefragmentationEnd(uint32_t frameIndex,\n    VmaDefragmentationContext ctx)\n{\n    CallParams callParams;\n    GetBasicParams(callParams);\n\n    VmaMutexLock lock(m_FileMutex, m_UseMutex);\n    fprintf(m_File, \"%u,%.3f,%u,vmaDefragmentationEnd,%p\\n\", callParams.threadId, callParams.time, frameIndex,\n        ctx);\n    Flush();\n}\n\nvoid VmaRecorder::RecordSetPoolName(uint32_t frameIndex,\n    VmaPool pool,\n    const char* name)\n{\n    CallParams callParams;\n    GetBasicParams(callParams);\n\n    VmaMutexLock lock(m_FileMutex, m_UseMutex);\n    fprintf(m_File, \"%u,%.3f,%u,vmaSetPoolName,%p,%s\\n\", callParams.threadId, callParams.time, frameIndex,\n        pool, name != VMA_NULL ? name : \"\");\n    Flush();\n}\n\nVmaRecorder::UserDataString::UserDataString(VmaAllocationCreateFlags allocFlags, const void* pUserData)\n{\n    if(pUserData != VMA_NULL)\n    {\n        if((allocFlags & VMA_ALLOCATION_CREATE_USER_DATA_COPY_STRING_BIT) != 0)\n        {\n            m_Str = (const char*)pUserData;\n        }\n        else\n        {\n            // If VMA_ALLOCATION_CREATE_USER_DATA_COPY_STRING_BIT is not specified, convert the string's memory address to a string and store it.\n            snprintf(m_PtrStr, 17, \"%p\", pUserData);\n            m_Str = m_PtrStr;\n        }\n    }\n    else\n    {\n        m_Str = \"\";\n    }\n}\n\nvoid VmaRecorder::WriteConfiguration(\n    const VkPhysicalDeviceProperties& devProps,\n    const VkPhysicalDeviceMemoryProperties& memProps,\n    uint32_t vulkanApiVersion,\n    bool dedicatedAllocationExtensionEnabled,\n    bool bindMemory2ExtensionEnabled,\n    bool memoryBudgetExtensionEnabled,\n    bool deviceCoherentMemoryExtensionEnabled)\n{\n    fprintf(m_File, \"Config,Begin\\n\");\n\n    fprintf(m_File, \"VulkanApiVersion,%u,%u\\n\", VK_VERSION_MAJOR(vulkanApiVersion), VK_VERSION_MINOR(vulkanApiVersion));\n\n    fprintf(m_File, \"PhysicalDevice,apiVersion,%u\\n\", devProps.apiVersion);\n    fprintf(m_File, \"PhysicalDevice,driverVersion,%u\\n\", devProps.driverVersion);\n    fprintf(m_File, \"PhysicalDevice,vendorID,%u\\n\", devProps.vendorID);\n    fprintf(m_File, \"PhysicalDevice,deviceID,%u\\n\", devProps.deviceID);\n    fprintf(m_File, \"PhysicalDevice,deviceType,%u\\n\", devProps.deviceType);\n    fprintf(m_File, \"PhysicalDevice,deviceName,%s\\n\", devProps.deviceName);\n\n    fprintf(m_File, \"PhysicalDeviceLimits,maxMemoryAllocationCount,%u\\n\", devProps.limits.maxMemoryAllocationCount);\n    fprintf(m_File, \"PhysicalDeviceLimits,bufferImageGranularity,%llu\\n\", devProps.limits.bufferImageGranularity);\n    fprintf(m_File, \"PhysicalDeviceLimits,nonCoherentAtomSize,%llu\\n\", devProps.limits.nonCoherentAtomSize);\n\n    fprintf(m_File, \"PhysicalDeviceMemory,HeapCount,%u\\n\", memProps.memoryHeapCount);\n    for(uint32_t i = 0; i < memProps.memoryHeapCount; ++i)\n    {\n        fprintf(m_File, \"PhysicalDeviceMemory,Heap,%u,size,%llu\\n\", i, memProps.memoryHeaps[i].size);\n        fprintf(m_File, \"PhysicalDeviceMemory,Heap,%u,flags,%u\\n\", i, memProps.memoryHeaps[i].flags);\n    }\n    fprintf(m_File, \"PhysicalDeviceMemory,TypeCount,%u\\n\", memProps.memoryTypeCount);\n    for(uint32_t i = 0; i < memProps.memoryTypeCount; ++i)\n    {\n        fprintf(m_File, \"PhysicalDeviceMemory,Type,%u,heapIndex,%u\\n\", i, memProps.memoryTypes[i].heapIndex);\n        fprintf(m_File, \"PhysicalDeviceMemory,Type,%u,propertyFlags,%u\\n\", i, memProps.memoryTypes[i].propertyFlags);\n    }\n\n    fprintf(m_File, \"Extension,VK_KHR_dedicated_allocation,%u\\n\", dedicatedAllocationExtensionEnabled ? 1 : 0);\n    fprintf(m_File, \"Extension,VK_KHR_bind_memory2,%u\\n\", bindMemory2ExtensionEnabled ? 1 : 0);\n    fprintf(m_File, \"Extension,VK_EXT_memory_budget,%u\\n\", memoryBudgetExtensionEnabled ? 1 : 0);\n    fprintf(m_File, \"Extension,VK_AMD_device_coherent_memory,%u\\n\", deviceCoherentMemoryExtensionEnabled ? 1 : 0);\n\n    fprintf(m_File, \"Macro,VMA_DEBUG_ALWAYS_DEDICATED_MEMORY,%u\\n\", VMA_DEBUG_ALWAYS_DEDICATED_MEMORY ? 1 : 0);\n    fprintf(m_File, \"Macro,VMA_MIN_ALIGNMENT,%llu\\n\", (VkDeviceSize)VMA_MIN_ALIGNMENT);\n    fprintf(m_File, \"Macro,VMA_DEBUG_MARGIN,%llu\\n\", (VkDeviceSize)VMA_DEBUG_MARGIN);\n    fprintf(m_File, \"Macro,VMA_DEBUG_INITIALIZE_ALLOCATIONS,%u\\n\", VMA_DEBUG_INITIALIZE_ALLOCATIONS ? 1 : 0);\n    fprintf(m_File, \"Macro,VMA_DEBUG_DETECT_CORRUPTION,%u\\n\", VMA_DEBUG_DETECT_CORRUPTION ? 1 : 0);\n    fprintf(m_File, \"Macro,VMA_DEBUG_GLOBAL_MUTEX,%u\\n\", VMA_DEBUG_GLOBAL_MUTEX ? 1 : 0);\n    fprintf(m_File, \"Macro,VMA_DEBUG_MIN_BUFFER_IMAGE_GRANULARITY,%llu\\n\", (VkDeviceSize)VMA_DEBUG_MIN_BUFFER_IMAGE_GRANULARITY);\n    fprintf(m_File, \"Macro,VMA_SMALL_HEAP_MAX_SIZE,%llu\\n\", (VkDeviceSize)VMA_SMALL_HEAP_MAX_SIZE);\n    fprintf(m_File, \"Macro,VMA_DEFAULT_LARGE_HEAP_BLOCK_SIZE,%llu\\n\", (VkDeviceSize)VMA_DEFAULT_LARGE_HEAP_BLOCK_SIZE);\n\n    fprintf(m_File, \"Config,End\\n\");\n}\n\nvoid VmaRecorder::GetBasicParams(CallParams& outParams)\n{\n    #if defined(_WIN32)\n        outParams.threadId = GetCurrentThreadId();\n    #else\n        // Use C++11 features to get thread id and convert it to uint32_t.\n        // There is room for optimization since sstream is quite slow.\n        // Is there a better way to convert std::this_thread::get_id() to uint32_t?\n        std::thread::id thread_id = std::this_thread::get_id();\n        std::stringstream thread_id_to_string_converter;\n        thread_id_to_string_converter << thread_id;\n        std::string thread_id_as_string = thread_id_to_string_converter.str();\n        outParams.threadId = static_cast<uint32_t>(std::stoi(thread_id_as_string.c_str()));\n    #endif\n\n    auto current_time = std::chrono::high_resolution_clock::now();\n\n    outParams.time = std::chrono::duration<double, std::chrono::seconds::period>(current_time - m_RecordingStartTime).count();\n}\n\nvoid VmaRecorder::PrintPointerList(uint64_t count, const VmaAllocation* pItems)\n{\n    if(count)\n    {\n        fprintf(m_File, \"%p\", pItems[0]);\n        for(uint64_t i = 1; i < count; ++i)\n        {\n            fprintf(m_File, \" %p\", pItems[i]);\n        }\n    }\n}\n\nvoid VmaRecorder::Flush()\n{\n    if((m_Flags & VMA_RECORD_FLUSH_AFTER_CALL_BIT) != 0)\n    {\n        fflush(m_File);\n    }\n}\n\n#endif // #if VMA_RECORDING_ENABLED\n\n////////////////////////////////////////////////////////////////////////////////\n// VmaAllocationObjectAllocator\n\nVmaAllocationObjectAllocator::VmaAllocationObjectAllocator(const VkAllocationCallbacks* pAllocationCallbacks) :\n    m_Allocator(pAllocationCallbacks, 1024)\n{\n}\n\ntemplate<typename... Types> VmaAllocation VmaAllocationObjectAllocator::Allocate(Types&&... args)\n{\n    VmaMutexLock mutexLock(m_Mutex);\n    return m_Allocator.Alloc<Types...>(std::forward<Types>(args)...);\n}\n\nvoid VmaAllocationObjectAllocator::Free(VmaAllocation hAlloc)\n{\n    VmaMutexLock mutexLock(m_Mutex);\n    m_Allocator.Free(hAlloc);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// VmaAllocator_T\n\nVmaAllocator_T::VmaAllocator_T(const VmaAllocatorCreateInfo* pCreateInfo) :\n    m_UseMutex((pCreateInfo->flags & VMA_ALLOCATOR_CREATE_EXTERNALLY_SYNCHRONIZED_BIT) == 0),\n    m_VulkanApiVersion(pCreateInfo->vulkanApiVersion != 0 ? pCreateInfo->vulkanApiVersion : VK_API_VERSION_1_0),\n    m_UseKhrDedicatedAllocation((pCreateInfo->flags & VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT) != 0),\n    m_UseKhrBindMemory2((pCreateInfo->flags & VMA_ALLOCATOR_CREATE_KHR_BIND_MEMORY2_BIT) != 0),\n    m_UseExtMemoryBudget((pCreateInfo->flags & VMA_ALLOCATOR_CREATE_EXT_MEMORY_BUDGET_BIT) != 0),\n    m_UseAmdDeviceCoherentMemory((pCreateInfo->flags & VMA_ALLOCATOR_CREATE_AMD_DEVICE_COHERENT_MEMORY_BIT) != 0),\n    m_UseKhrBufferDeviceAddress((pCreateInfo->flags & VMA_ALLOCATOR_CREATE_BUFFER_DEVICE_ADDRESS_BIT) != 0),\n    m_UseExtMemoryPriority((pCreateInfo->flags & VMA_ALLOCATOR_CREATE_EXT_MEMORY_PRIORITY_BIT) != 0),\n    m_hDevice(pCreateInfo->device),\n    m_hInstance(pCreateInfo->instance),\n    m_AllocationCallbacksSpecified(pCreateInfo->pAllocationCallbacks != VMA_NULL),\n    m_AllocationCallbacks(pCreateInfo->pAllocationCallbacks ?\n        *pCreateInfo->pAllocationCallbacks : VmaEmptyAllocationCallbacks),\n    m_AllocationObjectAllocator(&m_AllocationCallbacks),\n    m_HeapSizeLimitMask(0),\n    m_DeviceMemoryCount(0),\n    m_PreferredLargeHeapBlockSize(0),\n    m_PhysicalDevice(pCreateInfo->physicalDevice),\n    m_CurrentFrameIndex(0),\n    m_GpuDefragmentationMemoryTypeBits(UINT32_MAX),\n    m_NextPoolId(0),\n    m_GlobalMemoryTypeBits(UINT32_MAX)\n#if VMA_RECORDING_ENABLED\n    ,m_pRecorder(VMA_NULL)\n#endif\n{\n    if(m_VulkanApiVersion >= VK_MAKE_VERSION(1, 1, 0))\n    {\n        m_UseKhrDedicatedAllocation = false;\n        m_UseKhrBindMemory2 = false;\n    }\n\n    if(VMA_DEBUG_DETECT_CORRUPTION)\n    {\n        // Needs to be multiply of uint32_t size because we are going to write VMA_CORRUPTION_DETECTION_MAGIC_VALUE to it.\n        VMA_ASSERT(VMA_DEBUG_MARGIN % sizeof(uint32_t) == 0);\n    }\n\n    VMA_ASSERT(pCreateInfo->physicalDevice && pCreateInfo->device && pCreateInfo->instance);\n\n    if(m_VulkanApiVersion < VK_MAKE_VERSION(1, 1, 0))\n    {\n#if !(VMA_DEDICATED_ALLOCATION)\n        if((pCreateInfo->flags & VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT) != 0)\n        {\n            VMA_ASSERT(0 && \"VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT set but required extensions are disabled by preprocessor macros.\");\n        }\n#endif\n#if !(VMA_BIND_MEMORY2)\n        if((pCreateInfo->flags & VMA_ALLOCATOR_CREATE_KHR_BIND_MEMORY2_BIT) != 0)\n        {\n            VMA_ASSERT(0 && \"VMA_ALLOCATOR_CREATE_KHR_BIND_MEMORY2_BIT set but required extension is disabled by preprocessor macros.\");\n        }\n#endif\n    }\n#if !(VMA_MEMORY_BUDGET)\n    if((pCreateInfo->flags & VMA_ALLOCATOR_CREATE_EXT_MEMORY_BUDGET_BIT) != 0)\n    {\n        VMA_ASSERT(0 && \"VMA_ALLOCATOR_CREATE_EXT_MEMORY_BUDGET_BIT set but required extension is disabled by preprocessor macros.\");\n    }\n#endif\n#if !(VMA_BUFFER_DEVICE_ADDRESS)\n    if(m_UseKhrBufferDeviceAddress)\n    {\n        VMA_ASSERT(0 && \"VMA_ALLOCATOR_CREATE_BUFFER_DEVICE_ADDRESS_BIT is set but required extension or Vulkan 1.2 is not available in your Vulkan header or its support in VMA has been disabled by a preprocessor macro.\");\n    }\n#endif\n#if VMA_VULKAN_VERSION < 1002000\n    if(m_VulkanApiVersion >= VK_MAKE_VERSION(1, 2, 0))\n    {\n        VMA_ASSERT(0 && \"vulkanApiVersion >= VK_API_VERSION_1_2 but required Vulkan version is disabled by preprocessor macros.\");\n    }\n#endif\n#if VMA_VULKAN_VERSION < 1001000\n    if(m_VulkanApiVersion >= VK_MAKE_VERSION(1, 1, 0))\n    {\n        VMA_ASSERT(0 && \"vulkanApiVersion >= VK_API_VERSION_1_1 but required Vulkan version is disabled by preprocessor macros.\");\n    }\n#endif\n#if !(VMA_MEMORY_PRIORITY)\n    if(m_UseExtMemoryPriority)\n    {\n        VMA_ASSERT(0 && \"VMA_ALLOCATOR_CREATE_EXT_MEMORY_PRIORITY_BIT is set but required extension is not available in your Vulkan header or its support in VMA has been disabled by a preprocessor macro.\");\n    }\n#endif\n\n    memset(&m_DeviceMemoryCallbacks, 0 ,sizeof(m_DeviceMemoryCallbacks));\n    memset(&m_PhysicalDeviceProperties, 0, sizeof(m_PhysicalDeviceProperties));\n    memset(&m_MemProps, 0, sizeof(m_MemProps));\n\n    memset(&m_pBlockVectors, 0, sizeof(m_pBlockVectors));\n    memset(&m_VulkanFunctions, 0, sizeof(m_VulkanFunctions));\n\n#if VMA_EXTERNAL_MEMORY\n    memset(&m_TypeExternalMemoryHandleTypes, 0, sizeof(m_TypeExternalMemoryHandleTypes));\n#endif // #if VMA_EXTERNAL_MEMORY\n\n    if(pCreateInfo->pDeviceMemoryCallbacks != VMA_NULL)\n    {\n        m_DeviceMemoryCallbacks.pUserData = pCreateInfo->pDeviceMemoryCallbacks->pUserData;\n        m_DeviceMemoryCallbacks.pfnAllocate = pCreateInfo->pDeviceMemoryCallbacks->pfnAllocate;\n        m_DeviceMemoryCallbacks.pfnFree = pCreateInfo->pDeviceMemoryCallbacks->pfnFree;\n    }\n\n    ImportVulkanFunctions(pCreateInfo->pVulkanFunctions);\n\n    (*m_VulkanFunctions.vkGetPhysicalDeviceProperties)(m_PhysicalDevice, &m_PhysicalDeviceProperties);\n    (*m_VulkanFunctions.vkGetPhysicalDeviceMemoryProperties)(m_PhysicalDevice, &m_MemProps);\n\n    VMA_ASSERT(VmaIsPow2(VMA_MIN_ALIGNMENT));\n    VMA_ASSERT(VmaIsPow2(VMA_DEBUG_MIN_BUFFER_IMAGE_GRANULARITY));\n    VMA_ASSERT(VmaIsPow2(m_PhysicalDeviceProperties.limits.bufferImageGranularity));\n    VMA_ASSERT(VmaIsPow2(m_PhysicalDeviceProperties.limits.nonCoherentAtomSize));\n\n    m_PreferredLargeHeapBlockSize = (pCreateInfo->preferredLargeHeapBlockSize != 0) ?\n        pCreateInfo->preferredLargeHeapBlockSize : static_cast<VkDeviceSize>(VMA_DEFAULT_LARGE_HEAP_BLOCK_SIZE);\n\n    m_GlobalMemoryTypeBits = CalculateGlobalMemoryTypeBits();\n\n#if VMA_EXTERNAL_MEMORY\n    if(pCreateInfo->pTypeExternalMemoryHandleTypes != VMA_NULL)\n    {\n        memcpy(m_TypeExternalMemoryHandleTypes, pCreateInfo->pTypeExternalMemoryHandleTypes,\n            sizeof(VkExternalMemoryHandleTypeFlagsKHR) * GetMemoryTypeCount());\n    }\n#endif // #if VMA_EXTERNAL_MEMORY\n\n    if(pCreateInfo->pHeapSizeLimit != VMA_NULL)\n    {\n        for(uint32_t heapIndex = 0; heapIndex < GetMemoryHeapCount(); ++heapIndex)\n        {\n            const VkDeviceSize limit = pCreateInfo->pHeapSizeLimit[heapIndex];\n            if(limit != VK_WHOLE_SIZE)\n            {\n                m_HeapSizeLimitMask |= 1u << heapIndex;\n                if(limit < m_MemProps.memoryHeaps[heapIndex].size)\n                {\n                    m_MemProps.memoryHeaps[heapIndex].size = limit;\n                }\n            }\n        }\n    }\n\n    for(uint32_t memTypeIndex = 0; memTypeIndex < GetMemoryTypeCount(); ++memTypeIndex)\n    {\n        const VkDeviceSize preferredBlockSize = CalcPreferredBlockSize(memTypeIndex);\n\n        m_pBlockVectors[memTypeIndex] = vma_new(this, VmaBlockVector)(\n            this,\n            VK_NULL_HANDLE, // hParentPool\n            memTypeIndex,\n            preferredBlockSize,\n            0,\n            SIZE_MAX,\n            GetBufferImageGranularity(),\n            pCreateInfo->frameInUseCount,\n            false, // explicitBlockSize\n            false, // linearAlgorithm\n            0.5f, // priority (0.5 is the default per Vulkan spec)\n            GetMemoryTypeMinAlignment(memTypeIndex), // minAllocationAlignment\n            VMA_NULL); // // pMemoryAllocateNext\n        // No need to call m_pBlockVectors[memTypeIndex][blockVectorTypeIndex]->CreateMinBlocks here,\n        // becase minBlockCount is 0.\n    }\n}\n\nVkResult VmaAllocator_T::Init(const VmaAllocatorCreateInfo* pCreateInfo)\n{\n    VkResult res = VK_SUCCESS;\n\n    if(pCreateInfo->pRecordSettings != VMA_NULL &&\n        !VmaStrIsEmpty(pCreateInfo->pRecordSettings->pFilePath))\n    {\n#if VMA_RECORDING_ENABLED\n        m_pRecorder = vma_new(this, VmaRecorder)();\n        res = m_pRecorder->Init(*pCreateInfo->pRecordSettings, m_UseMutex);\n        if(res != VK_SUCCESS)\n        {\n            return res;\n        }\n        m_pRecorder->WriteConfiguration(\n            m_PhysicalDeviceProperties,\n            m_MemProps,\n            m_VulkanApiVersion,\n            m_UseKhrDedicatedAllocation,\n            m_UseKhrBindMemory2,\n            m_UseExtMemoryBudget,\n            m_UseAmdDeviceCoherentMemory);\n        m_pRecorder->RecordCreateAllocator(GetCurrentFrameIndex());\n#else\n        VMA_ASSERT(0 && \"VmaAllocatorCreateInfo::pRecordSettings used, but not supported due to VMA_RECORDING_ENABLED not defined to 1.\");\n        return VK_ERROR_FEATURE_NOT_PRESENT;\n#endif\n    }\n\n#if VMA_MEMORY_BUDGET\n    if(m_UseExtMemoryBudget)\n    {\n        UpdateVulkanBudget();\n    }\n#endif // #if VMA_MEMORY_BUDGET\n\n    return res;\n}\n\nVmaAllocator_T::~VmaAllocator_T()\n{\n#if VMA_RECORDING_ENABLED\n    if(m_pRecorder != VMA_NULL)\n    {\n        m_pRecorder->RecordDestroyAllocator(GetCurrentFrameIndex());\n        vma_delete(this, m_pRecorder);\n    }\n#endif\n\n    VMA_ASSERT(m_Pools.IsEmpty());\n\n    for(size_t memTypeIndex = GetMemoryTypeCount(); memTypeIndex--; )\n    {\n        if(!m_DedicatedAllocations[memTypeIndex].IsEmpty())\n        {\n            VMA_ASSERT(0 && \"Unfreed dedicated allocations found.\");\n        }\n\n        vma_delete(this, m_pBlockVectors[memTypeIndex]);\n    }\n}\n\nvoid VmaAllocator_T::ImportVulkanFunctions(const VmaVulkanFunctions* pVulkanFunctions)\n{\n#if VMA_STATIC_VULKAN_FUNCTIONS == 1\n    ImportVulkanFunctions_Static();\n#endif\n\n    if(pVulkanFunctions != VMA_NULL)\n    {\n        ImportVulkanFunctions_Custom(pVulkanFunctions);\n    }\n\n#if VMA_DYNAMIC_VULKAN_FUNCTIONS == 1\n    ImportVulkanFunctions_Dynamic();\n#endif\n\n    ValidateVulkanFunctions();\n}\n\n#if VMA_STATIC_VULKAN_FUNCTIONS == 1\n\nvoid VmaAllocator_T::ImportVulkanFunctions_Static()\n{\n    // Vulkan 1.0\n    m_VulkanFunctions.vkGetInstanceProcAddr = (PFN_vkGetInstanceProcAddr)vkGetInstanceProcAddr;\n    m_VulkanFunctions.vkGetDeviceProcAddr = (PFN_vkGetDeviceProcAddr)vkGetDeviceProcAddr;\n    m_VulkanFunctions.vkGetPhysicalDeviceProperties = (PFN_vkGetPhysicalDeviceProperties)vkGetPhysicalDeviceProperties;\n    m_VulkanFunctions.vkGetPhysicalDeviceMemoryProperties = (PFN_vkGetPhysicalDeviceMemoryProperties)vkGetPhysicalDeviceMemoryProperties;\n    m_VulkanFunctions.vkAllocateMemory = (PFN_vkAllocateMemory)vkAllocateMemory;\n    m_VulkanFunctions.vkFreeMemory = (PFN_vkFreeMemory)vkFreeMemory;\n    m_VulkanFunctions.vkMapMemory = (PFN_vkMapMemory)vkMapMemory;\n    m_VulkanFunctions.vkUnmapMemory = (PFN_vkUnmapMemory)vkUnmapMemory;\n    m_VulkanFunctions.vkFlushMappedMemoryRanges = (PFN_vkFlushMappedMemoryRanges)vkFlushMappedMemoryRanges;\n    m_VulkanFunctions.vkInvalidateMappedMemoryRanges = (PFN_vkInvalidateMappedMemoryRanges)vkInvalidateMappedMemoryRanges;\n    m_VulkanFunctions.vkBindBufferMemory = (PFN_vkBindBufferMemory)vkBindBufferMemory;\n    m_VulkanFunctions.vkBindImageMemory = (PFN_vkBindImageMemory)vkBindImageMemory;\n    m_VulkanFunctions.vkGetBufferMemoryRequirements = (PFN_vkGetBufferMemoryRequirements)vkGetBufferMemoryRequirements;\n    m_VulkanFunctions.vkGetImageMemoryRequirements = (PFN_vkGetImageMemoryRequirements)vkGetImageMemoryRequirements;\n    m_VulkanFunctions.vkCreateBuffer = (PFN_vkCreateBuffer)vkCreateBuffer;\n    m_VulkanFunctions.vkDestroyBuffer = (PFN_vkDestroyBuffer)vkDestroyBuffer;\n    m_VulkanFunctions.vkCreateImage = (PFN_vkCreateImage)vkCreateImage;\n    m_VulkanFunctions.vkDestroyImage = (PFN_vkDestroyImage)vkDestroyImage;\n    m_VulkanFunctions.vkCmdCopyBuffer = (PFN_vkCmdCopyBuffer)vkCmdCopyBuffer;\n\n    // Vulkan 1.1\n#if VMA_VULKAN_VERSION >= 1001000\n    if(m_VulkanApiVersion >= VK_MAKE_VERSION(1, 1, 0))\n    {\n        m_VulkanFunctions.vkGetBufferMemoryRequirements2KHR = (PFN_vkGetBufferMemoryRequirements2)vkGetBufferMemoryRequirements2;\n        m_VulkanFunctions.vkGetImageMemoryRequirements2KHR = (PFN_vkGetImageMemoryRequirements2)vkGetImageMemoryRequirements2;\n        m_VulkanFunctions.vkBindBufferMemory2KHR = (PFN_vkBindBufferMemory2)vkBindBufferMemory2;\n        m_VulkanFunctions.vkBindImageMemory2KHR = (PFN_vkBindImageMemory2)vkBindImageMemory2;\n        m_VulkanFunctions.vkGetPhysicalDeviceMemoryProperties2KHR = (PFN_vkGetPhysicalDeviceMemoryProperties2)vkGetPhysicalDeviceMemoryProperties2;\n    }\n#endif\n}\n\n#endif // #if VMA_STATIC_VULKAN_FUNCTIONS == 1\n\nvoid VmaAllocator_T::ImportVulkanFunctions_Custom(const VmaVulkanFunctions* pVulkanFunctions)\n{\n    VMA_ASSERT(pVulkanFunctions != VMA_NULL);\n\n#define VMA_COPY_IF_NOT_NULL(funcName) \\\n    if(pVulkanFunctions->funcName != VMA_NULL) m_VulkanFunctions.funcName = pVulkanFunctions->funcName;\n\n    VMA_COPY_IF_NOT_NULL(vkGetInstanceProcAddr);\n    VMA_COPY_IF_NOT_NULL(vkGetDeviceProcAddr);\n    VMA_COPY_IF_NOT_NULL(vkGetPhysicalDeviceProperties);\n    VMA_COPY_IF_NOT_NULL(vkGetPhysicalDeviceMemoryProperties);\n    VMA_COPY_IF_NOT_NULL(vkAllocateMemory);\n    VMA_COPY_IF_NOT_NULL(vkFreeMemory);\n    VMA_COPY_IF_NOT_NULL(vkMapMemory);\n    VMA_COPY_IF_NOT_NULL(vkUnmapMemory);\n    VMA_COPY_IF_NOT_NULL(vkFlushMappedMemoryRanges);\n    VMA_COPY_IF_NOT_NULL(vkInvalidateMappedMemoryRanges);\n    VMA_COPY_IF_NOT_NULL(vkBindBufferMemory);\n    VMA_COPY_IF_NOT_NULL(vkBindImageMemory);\n    VMA_COPY_IF_NOT_NULL(vkGetBufferMemoryRequirements);\n    VMA_COPY_IF_NOT_NULL(vkGetImageMemoryRequirements);\n    VMA_COPY_IF_NOT_NULL(vkCreateBuffer);\n    VMA_COPY_IF_NOT_NULL(vkDestroyBuffer);\n    VMA_COPY_IF_NOT_NULL(vkCreateImage);\n    VMA_COPY_IF_NOT_NULL(vkDestroyImage);\n    VMA_COPY_IF_NOT_NULL(vkCmdCopyBuffer);\n\n#if VMA_DEDICATED_ALLOCATION || VMA_VULKAN_VERSION >= 1001000\n    VMA_COPY_IF_NOT_NULL(vkGetBufferMemoryRequirements2KHR);\n    VMA_COPY_IF_NOT_NULL(vkGetImageMemoryRequirements2KHR);\n#endif\n\n#if VMA_BIND_MEMORY2 || VMA_VULKAN_VERSION >= 1001000\n    VMA_COPY_IF_NOT_NULL(vkBindBufferMemory2KHR);\n    VMA_COPY_IF_NOT_NULL(vkBindImageMemory2KHR);\n#endif\n\n#if VMA_MEMORY_BUDGET\n    VMA_COPY_IF_NOT_NULL(vkGetPhysicalDeviceMemoryProperties2KHR);\n#endif\n\n#undef VMA_COPY_IF_NOT_NULL\n}\n\n#if VMA_DYNAMIC_VULKAN_FUNCTIONS == 1\n\nvoid VmaAllocator_T::ImportVulkanFunctions_Dynamic()\n{\n    VMA_ASSERT(m_VulkanFunctions.vkGetInstanceProcAddr && m_VulkanFunctions.vkGetDeviceProcAddr &&\n        \"To use VMA_DYNAMIC_VULKAN_FUNCTIONS in new versions of VMA you now have to pass \"\n        \"VmaVulkanFunctions::vkGetInstanceProcAddr and vkGetDeviceProcAddr as VmaAllocatorCreateInfo::pVulkanFunctions. \"\n        \"Other members can be null.\");\n\n#define VMA_FETCH_INSTANCE_FUNC(memberName, functionPointerType, functionNameString) \\\n    if(m_VulkanFunctions.memberName == VMA_NULL) \\\n        m_VulkanFunctions.memberName = \\\n            (functionPointerType)m_VulkanFunctions.vkGetInstanceProcAddr(m_hInstance, functionNameString);\n#define VMA_FETCH_DEVICE_FUNC(memberName, functionPointerType, functionNameString) \\\n    if(m_VulkanFunctions.memberName == VMA_NULL) \\\n        m_VulkanFunctions.memberName = \\\n            (functionPointerType)m_VulkanFunctions.vkGetDeviceProcAddr(m_hDevice, functionNameString);\n\n    VMA_FETCH_INSTANCE_FUNC(vkGetPhysicalDeviceProperties, PFN_vkGetPhysicalDeviceProperties, \"vkGetPhysicalDeviceProperties\");\n    VMA_FETCH_INSTANCE_FUNC(vkGetPhysicalDeviceMemoryProperties, PFN_vkGetPhysicalDeviceMemoryProperties, \"vkGetPhysicalDeviceMemoryProperties\");\n    VMA_FETCH_DEVICE_FUNC(vkAllocateMemory, PFN_vkAllocateMemory, \"vkAllocateMemory\");\n    VMA_FETCH_DEVICE_FUNC(vkFreeMemory, PFN_vkFreeMemory, \"vkFreeMemory\");\n    VMA_FETCH_DEVICE_FUNC(vkMapMemory, PFN_vkMapMemory, \"vkMapMemory\");\n    VMA_FETCH_DEVICE_FUNC(vkUnmapMemory, PFN_vkUnmapMemory, \"vkUnmapMemory\");\n    VMA_FETCH_DEVICE_FUNC(vkFlushMappedMemoryRanges, PFN_vkFlushMappedMemoryRanges, \"vkFlushMappedMemoryRanges\");\n    VMA_FETCH_DEVICE_FUNC(vkInvalidateMappedMemoryRanges, PFN_vkInvalidateMappedMemoryRanges, \"vkInvalidateMappedMemoryRanges\");\n    VMA_FETCH_DEVICE_FUNC(vkBindBufferMemory, PFN_vkBindBufferMemory, \"vkBindBufferMemory\");\n    VMA_FETCH_DEVICE_FUNC(vkBindImageMemory, PFN_vkBindImageMemory, \"vkBindImageMemory\");\n    VMA_FETCH_DEVICE_FUNC(vkGetBufferMemoryRequirements, PFN_vkGetBufferMemoryRequirements, \"vkGetBufferMemoryRequirements\");\n    VMA_FETCH_DEVICE_FUNC(vkGetImageMemoryRequirements, PFN_vkGetImageMemoryRequirements, \"vkGetImageMemoryRequirements\");\n    VMA_FETCH_DEVICE_FUNC(vkCreateBuffer, PFN_vkCreateBuffer, \"vkCreateBuffer\");\n    VMA_FETCH_DEVICE_FUNC(vkDestroyBuffer, PFN_vkDestroyBuffer, \"vkDestroyBuffer\");\n    VMA_FETCH_DEVICE_FUNC(vkCreateImage, PFN_vkCreateImage, \"vkCreateImage\");\n    VMA_FETCH_DEVICE_FUNC(vkDestroyImage, PFN_vkDestroyImage, \"vkDestroyImage\");\n    VMA_FETCH_DEVICE_FUNC(vkCmdCopyBuffer, PFN_vkCmdCopyBuffer, \"vkCmdCopyBuffer\");\n\n#if VMA_VULKAN_VERSION >= 1001000\n    if(m_VulkanApiVersion >= VK_MAKE_VERSION(1, 1, 0))\n    {\n        VMA_FETCH_DEVICE_FUNC(vkGetBufferMemoryRequirements2KHR, PFN_vkGetBufferMemoryRequirements2, \"vkGetBufferMemoryRequirements2\");\n        VMA_FETCH_DEVICE_FUNC(vkGetImageMemoryRequirements2KHR, PFN_vkGetImageMemoryRequirements2, \"vkGetImageMemoryRequirements2\");\n        VMA_FETCH_DEVICE_FUNC(vkBindBufferMemory2KHR, PFN_vkBindBufferMemory2, \"vkBindBufferMemory2\");\n        VMA_FETCH_DEVICE_FUNC(vkBindImageMemory2KHR, PFN_vkBindImageMemory2, \"vkBindImageMemory2\");\n        VMA_FETCH_INSTANCE_FUNC(vkGetPhysicalDeviceMemoryProperties2KHR, PFN_vkGetPhysicalDeviceMemoryProperties2, \"vkGetPhysicalDeviceMemoryProperties2\");\n    }\n#endif\n\n#if VMA_DEDICATED_ALLOCATION\n    if(m_UseKhrDedicatedAllocation)\n    {\n        VMA_FETCH_DEVICE_FUNC(vkGetBufferMemoryRequirements2KHR, PFN_vkGetBufferMemoryRequirements2KHR, \"vkGetBufferMemoryRequirements2KHR\");\n        VMA_FETCH_DEVICE_FUNC(vkGetImageMemoryRequirements2KHR, PFN_vkGetImageMemoryRequirements2KHR, \"vkGetImageMemoryRequirements2KHR\");\n    }\n#endif\n\n#if VMA_BIND_MEMORY2\n    if(m_UseKhrBindMemory2)\n    {\n        VMA_FETCH_DEVICE_FUNC(vkBindBufferMemory2KHR, PFN_vkBindBufferMemory2KHR, \"vkBindBufferMemory2KHR\");\n        VMA_FETCH_DEVICE_FUNC(vkBindImageMemory2KHR, PFN_vkBindImageMemory2KHR, \"vkBindImageMemory2KHR\");\n    }\n#endif // #if VMA_BIND_MEMORY2\n\n#if VMA_MEMORY_BUDGET\n    if(m_UseExtMemoryBudget)\n    {\n        VMA_FETCH_INSTANCE_FUNC(vkGetPhysicalDeviceMemoryProperties2KHR, PFN_vkGetPhysicalDeviceMemoryProperties2KHR, \"vkGetPhysicalDeviceMemoryProperties2KHR\");\n    }\n#endif // #if VMA_MEMORY_BUDGET\n\n#undef VMA_FETCH_DEVICE_FUNC\n#undef VMA_FETCH_INSTANCE_FUNC\n}\n\n#endif // #if VMA_DYNAMIC_VULKAN_FUNCTIONS == 1\n\nvoid VmaAllocator_T::ValidateVulkanFunctions()\n{\n    VMA_ASSERT(m_VulkanFunctions.vkGetPhysicalDeviceProperties != VMA_NULL);\n    VMA_ASSERT(m_VulkanFunctions.vkGetPhysicalDeviceMemoryProperties != VMA_NULL);\n    VMA_ASSERT(m_VulkanFunctions.vkAllocateMemory != VMA_NULL);\n    VMA_ASSERT(m_VulkanFunctions.vkFreeMemory != VMA_NULL);\n    VMA_ASSERT(m_VulkanFunctions.vkMapMemory != VMA_NULL);\n    VMA_ASSERT(m_VulkanFunctions.vkUnmapMemory != VMA_NULL);\n    VMA_ASSERT(m_VulkanFunctions.vkFlushMappedMemoryRanges != VMA_NULL);\n    VMA_ASSERT(m_VulkanFunctions.vkInvalidateMappedMemoryRanges != VMA_NULL);\n    VMA_ASSERT(m_VulkanFunctions.vkBindBufferMemory != VMA_NULL);\n    VMA_ASSERT(m_VulkanFunctions.vkBindImageMemory != VMA_NULL);\n    VMA_ASSERT(m_VulkanFunctions.vkGetBufferMemoryRequirements != VMA_NULL);\n    VMA_ASSERT(m_VulkanFunctions.vkGetImageMemoryRequirements != VMA_NULL);\n    VMA_ASSERT(m_VulkanFunctions.vkCreateBuffer != VMA_NULL);\n    VMA_ASSERT(m_VulkanFunctions.vkDestroyBuffer != VMA_NULL);\n    VMA_ASSERT(m_VulkanFunctions.vkCreateImage != VMA_NULL);\n    VMA_ASSERT(m_VulkanFunctions.vkDestroyImage != VMA_NULL);\n    VMA_ASSERT(m_VulkanFunctions.vkCmdCopyBuffer != VMA_NULL);\n\n#if VMA_DEDICATED_ALLOCATION || VMA_VULKAN_VERSION >= 1001000\n    if(m_VulkanApiVersion >= VK_MAKE_VERSION(1, 1, 0) || m_UseKhrDedicatedAllocation)\n    {\n        VMA_ASSERT(m_VulkanFunctions.vkGetBufferMemoryRequirements2KHR != VMA_NULL);\n        VMA_ASSERT(m_VulkanFunctions.vkGetImageMemoryRequirements2KHR != VMA_NULL);\n    }\n#endif\n\n#if VMA_BIND_MEMORY2 || VMA_VULKAN_VERSION >= 1001000\n    if(m_VulkanApiVersion >= VK_MAKE_VERSION(1, 1, 0) || m_UseKhrBindMemory2)\n    {\n        VMA_ASSERT(m_VulkanFunctions.vkBindBufferMemory2KHR != VMA_NULL);\n        VMA_ASSERT(m_VulkanFunctions.vkBindImageMemory2KHR != VMA_NULL);\n    }\n#endif\n\n#if VMA_MEMORY_BUDGET || VMA_VULKAN_VERSION >= 1001000\n    if(m_UseExtMemoryBudget || m_VulkanApiVersion >= VK_MAKE_VERSION(1, 1, 0))\n    {\n        VMA_ASSERT(m_VulkanFunctions.vkGetPhysicalDeviceMemoryProperties2KHR != VMA_NULL);\n    }\n#endif\n}\n\nVkDeviceSize VmaAllocator_T::CalcPreferredBlockSize(uint32_t memTypeIndex)\n{\n    const uint32_t heapIndex = MemoryTypeIndexToHeapIndex(memTypeIndex);\n    const VkDeviceSize heapSize = m_MemProps.memoryHeaps[heapIndex].size;\n    const bool isSmallHeap = heapSize <= VMA_SMALL_HEAP_MAX_SIZE;\n    return VmaAlignUp(isSmallHeap ? (heapSize / 8) : m_PreferredLargeHeapBlockSize, (VkDeviceSize)32);\n}\n\nVkResult VmaAllocator_T::AllocateMemoryOfType(\n    VkDeviceSize size,\n    VkDeviceSize alignment,\n    bool dedicatedAllocation,\n    VkBuffer dedicatedBuffer,\n    VkBufferUsageFlags dedicatedBufferUsage,\n    VkImage dedicatedImage,\n    const VmaAllocationCreateInfo& createInfo,\n    uint32_t memTypeIndex,\n    VmaSuballocationType suballocType,\n    size_t allocationCount,\n    VmaAllocation* pAllocations)\n{\n    VMA_ASSERT(pAllocations != VMA_NULL);\n    VMA_DEBUG_LOG(\"  AllocateMemory: MemoryTypeIndex=%u, AllocationCount=%zu, Size=%llu\", memTypeIndex, allocationCount, size);\n\n    VmaAllocationCreateInfo finalCreateInfo = createInfo;\n\n    // If memory type is not HOST_VISIBLE, disable MAPPED.\n    if((finalCreateInfo.flags & VMA_ALLOCATION_CREATE_MAPPED_BIT) != 0 &&\n        (m_MemProps.memoryTypes[memTypeIndex].propertyFlags & VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT) == 0)\n    {\n        finalCreateInfo.flags &= ~VMA_ALLOCATION_CREATE_MAPPED_BIT;\n    }\n    // If memory is lazily allocated, it should be always dedicated.\n    if(finalCreateInfo.usage == VMA_MEMORY_USAGE_GPU_LAZILY_ALLOCATED)\n    {\n        finalCreateInfo.flags |= VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT;\n    }\n\n    VmaBlockVector* const blockVector = m_pBlockVectors[memTypeIndex];\n    VMA_ASSERT(blockVector);\n\n    const VkDeviceSize preferredBlockSize = blockVector->GetPreferredBlockSize();\n    bool preferDedicatedMemory =\n        VMA_DEBUG_ALWAYS_DEDICATED_MEMORY ||\n        dedicatedAllocation ||\n        // Heuristics: Allocate dedicated memory if requested size if greater than half of preferred block size.\n        size > preferredBlockSize / 2;\n\n    if(preferDedicatedMemory &&\n        (finalCreateInfo.flags & VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT) == 0 &&\n        finalCreateInfo.pool == VK_NULL_HANDLE)\n    {\n        finalCreateInfo.flags |= VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT;\n    }\n\n    if((finalCreateInfo.flags & VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT) != 0)\n    {\n        if((finalCreateInfo.flags & VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT) != 0)\n        {\n            return VK_ERROR_OUT_OF_DEVICE_MEMORY;\n        }\n        else\n        {\n            return AllocateDedicatedMemory(\n                size,\n                suballocType,\n                memTypeIndex,\n                (finalCreateInfo.flags & VMA_ALLOCATION_CREATE_WITHIN_BUDGET_BIT) != 0,\n                (finalCreateInfo.flags & VMA_ALLOCATION_CREATE_MAPPED_BIT) != 0,\n                (finalCreateInfo.flags & VMA_ALLOCATION_CREATE_USER_DATA_COPY_STRING_BIT) != 0,\n                finalCreateInfo.pUserData,\n                finalCreateInfo.priority,\n                dedicatedBuffer,\n                dedicatedBufferUsage,\n                dedicatedImage,\n                allocationCount,\n                pAllocations);\n        }\n    }\n    else\n    {\n        VkResult res = blockVector->Allocate(\n            m_CurrentFrameIndex.load(),\n            size,\n            alignment,\n            finalCreateInfo,\n            suballocType,\n            allocationCount,\n            pAllocations);\n        if(res == VK_SUCCESS)\n        {\n            return res;\n        }\n\n        // 5. Try dedicated memory.\n        if((finalCreateInfo.flags & VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT) != 0)\n        {\n            return VK_ERROR_OUT_OF_DEVICE_MEMORY;\n        }\n\n        // Protection against creating each allocation as dedicated when we reach or exceed heap size/budget,\n        // which can quickly deplete maxMemoryAllocationCount: Don't try dedicated allocations when above\n        // 3/4 of the maximum allocation count.\n        if(m_DeviceMemoryCount.load() > m_PhysicalDeviceProperties.limits.maxMemoryAllocationCount * 3 / 4)\n        {\n            return VK_ERROR_OUT_OF_DEVICE_MEMORY;\n        }\n\n        res = AllocateDedicatedMemory(\n            size,\n            suballocType,\n            memTypeIndex,\n            (finalCreateInfo.flags & VMA_ALLOCATION_CREATE_WITHIN_BUDGET_BIT) != 0,\n            (finalCreateInfo.flags & VMA_ALLOCATION_CREATE_MAPPED_BIT) != 0,\n            (finalCreateInfo.flags & VMA_ALLOCATION_CREATE_USER_DATA_COPY_STRING_BIT) != 0,\n            finalCreateInfo.pUserData,\n            finalCreateInfo.priority,\n            dedicatedBuffer,\n            dedicatedBufferUsage,\n            dedicatedImage,\n            allocationCount,\n            pAllocations);\n        if(res == VK_SUCCESS)\n        {\n            // Succeeded: AllocateDedicatedMemory function already filld pMemory, nothing more to do here.\n            VMA_DEBUG_LOG(\"    Allocated as DedicatedMemory\");\n            return VK_SUCCESS;\n        }\n        else\n        {\n            // Everything failed: Return error code.\n            VMA_DEBUG_LOG(\"    vkAllocateMemory FAILED\");\n            return res;\n        }\n    }\n}\n\nVkResult VmaAllocator_T::AllocateDedicatedMemory(\n    VkDeviceSize size,\n    VmaSuballocationType suballocType,\n    uint32_t memTypeIndex,\n    bool withinBudget,\n    bool map,\n    bool isUserDataString,\n    void* pUserData,\n    float priority,\n    VkBuffer dedicatedBuffer,\n    VkBufferUsageFlags dedicatedBufferUsage,\n    VkImage dedicatedImage,\n    size_t allocationCount,\n    VmaAllocation* pAllocations)\n{\n    VMA_ASSERT(allocationCount > 0 && pAllocations);\n\n    if(withinBudget)\n    {\n        const uint32_t heapIndex = MemoryTypeIndexToHeapIndex(memTypeIndex);\n        VmaBudget heapBudget = {};\n        GetBudget(&heapBudget, heapIndex, 1);\n        if(heapBudget.usage + size * allocationCount > heapBudget.budget)\n        {\n            return VK_ERROR_OUT_OF_DEVICE_MEMORY;\n        }\n    }\n\n    VkMemoryAllocateInfo allocInfo = { VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO };\n    allocInfo.memoryTypeIndex = memTypeIndex;\n    allocInfo.allocationSize = size;\n\n#if VMA_DEDICATED_ALLOCATION || VMA_VULKAN_VERSION >= 1001000\n    VkMemoryDedicatedAllocateInfoKHR dedicatedAllocInfo = { VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR };\n    if(m_UseKhrDedicatedAllocation || m_VulkanApiVersion >= VK_MAKE_VERSION(1, 1, 0))\n    {\n        if(dedicatedBuffer != VK_NULL_HANDLE)\n        {\n            VMA_ASSERT(dedicatedImage == VK_NULL_HANDLE);\n            dedicatedAllocInfo.buffer = dedicatedBuffer;\n            VmaPnextChainPushFront(&allocInfo, &dedicatedAllocInfo);\n        }\n        else if(dedicatedImage != VK_NULL_HANDLE)\n        {\n            dedicatedAllocInfo.image = dedicatedImage;\n            VmaPnextChainPushFront(&allocInfo, &dedicatedAllocInfo);\n        }\n    }\n#endif // #if VMA_DEDICATED_ALLOCATION || VMA_VULKAN_VERSION >= 1001000\n\n#if VMA_BUFFER_DEVICE_ADDRESS\n    VkMemoryAllocateFlagsInfoKHR allocFlagsInfo = { VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR };\n    if(m_UseKhrBufferDeviceAddress)\n    {\n        bool canContainBufferWithDeviceAddress = true;\n        if(dedicatedBuffer != VK_NULL_HANDLE)\n        {\n            canContainBufferWithDeviceAddress = dedicatedBufferUsage == UINT32_MAX || // Usage flags unknown\n                (dedicatedBufferUsage & VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT) != 0;\n        }\n        else if(dedicatedImage != VK_NULL_HANDLE)\n        {\n            canContainBufferWithDeviceAddress = false;\n        }\n        if(canContainBufferWithDeviceAddress)\n        {\n            allocFlagsInfo.flags = VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR;\n            VmaPnextChainPushFront(&allocInfo, &allocFlagsInfo);\n        }\n    }\n#endif // #if VMA_BUFFER_DEVICE_ADDRESS\n\n#if VMA_MEMORY_PRIORITY\n    VkMemoryPriorityAllocateInfoEXT priorityInfo = { VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT };\n    if(m_UseExtMemoryPriority)\n    {\n        priorityInfo.priority = priority;\n        VmaPnextChainPushFront(&allocInfo, &priorityInfo);\n    }\n#endif // #if VMA_MEMORY_PRIORITY\n\n#if VMA_EXTERNAL_MEMORY\n    // Attach VkExportMemoryAllocateInfoKHR if necessary.\n    VkExportMemoryAllocateInfoKHR exportMemoryAllocInfo = { VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR };\n    exportMemoryAllocInfo.handleTypes = GetExternalMemoryHandleTypeFlags(memTypeIndex);\n    if(exportMemoryAllocInfo.handleTypes != 0)\n    {\n        VmaPnextChainPushFront(&allocInfo, &exportMemoryAllocInfo);\n    }\n#endif // #if VMA_EXTERNAL_MEMORY\n\n    size_t allocIndex;\n    VkResult res = VK_SUCCESS;\n    for(allocIndex = 0; allocIndex < allocationCount; ++allocIndex)\n    {\n        res = AllocateDedicatedMemoryPage(\n            size,\n            suballocType,\n            memTypeIndex,\n            allocInfo,\n            map,\n            isUserDataString,\n            pUserData,\n            pAllocations + allocIndex);\n        if(res != VK_SUCCESS)\n        {\n            break;\n        }\n    }\n\n    if(res == VK_SUCCESS)\n    {\n        // Register them in m_DedicatedAllocations.\n        {\n            VmaMutexLockWrite lock(m_DedicatedAllocationsMutex[memTypeIndex], m_UseMutex);\n            DedicatedAllocationLinkedList& dedicatedAllocations = m_DedicatedAllocations[memTypeIndex];\n            for(allocIndex = 0; allocIndex < allocationCount; ++allocIndex)\n            {\n                dedicatedAllocations.PushBack(pAllocations[allocIndex]);\n            }\n        }\n\n        VMA_DEBUG_LOG(\"    Allocated DedicatedMemory Count=%zu, MemoryTypeIndex=#%u\", allocationCount, memTypeIndex);\n    }\n    else\n    {\n        // Free all already created allocations.\n        while(allocIndex--)\n        {\n            VmaAllocation currAlloc = pAllocations[allocIndex];\n            VkDeviceMemory hMemory = currAlloc->GetMemory();\n\n            /*\n            There is no need to call this, because Vulkan spec allows to skip vkUnmapMemory\n            before vkFreeMemory.\n\n            if(currAlloc->GetMappedData() != VMA_NULL)\n            {\n                (*m_VulkanFunctions.vkUnmapMemory)(m_hDevice, hMemory);\n            }\n            */\n\n            FreeVulkanMemory(memTypeIndex, currAlloc->GetSize(), hMemory);\n            m_Budget.RemoveAllocation(MemoryTypeIndexToHeapIndex(memTypeIndex), currAlloc->GetSize());\n            currAlloc->SetUserData(this, VMA_NULL);\n            m_AllocationObjectAllocator.Free(currAlloc);\n        }\n\n        memset(pAllocations, 0, sizeof(VmaAllocation) * allocationCount);\n    }\n\n    return res;\n}\n\nVkResult VmaAllocator_T::AllocateDedicatedMemoryPage(\n    VkDeviceSize size,\n    VmaSuballocationType suballocType,\n    uint32_t memTypeIndex,\n    const VkMemoryAllocateInfo& allocInfo,\n    bool map,\n    bool isUserDataString,\n    void* pUserData,\n    VmaAllocation* pAllocation)\n{\n    VkDeviceMemory hMemory = VK_NULL_HANDLE;\n    VkResult res = AllocateVulkanMemory(&allocInfo, &hMemory);\n    if(res < 0)\n    {\n        VMA_DEBUG_LOG(\"    vkAllocateMemory FAILED\");\n        return res;\n    }\n\n    void* pMappedData = VMA_NULL;\n    if(map)\n    {\n        res = (*m_VulkanFunctions.vkMapMemory)(\n            m_hDevice,\n            hMemory,\n            0,\n            VK_WHOLE_SIZE,\n            0,\n            &pMappedData);\n        if(res < 0)\n        {\n            VMA_DEBUG_LOG(\"    vkMapMemory FAILED\");\n            FreeVulkanMemory(memTypeIndex, size, hMemory);\n            return res;\n        }\n    }\n\n    *pAllocation = m_AllocationObjectAllocator.Allocate(m_CurrentFrameIndex.load(), isUserDataString);\n    (*pAllocation)->InitDedicatedAllocation(memTypeIndex, hMemory, suballocType, pMappedData, size);\n    (*pAllocation)->SetUserData(this, pUserData);\n    m_Budget.AddAllocation(MemoryTypeIndexToHeapIndex(memTypeIndex), size);\n    if(VMA_DEBUG_INITIALIZE_ALLOCATIONS)\n    {\n        FillAllocation(*pAllocation, VMA_ALLOCATION_FILL_PATTERN_CREATED);\n    }\n\n    return VK_SUCCESS;\n}\n\nvoid VmaAllocator_T::GetBufferMemoryRequirements(\n    VkBuffer hBuffer,\n    VkMemoryRequirements& memReq,\n    bool& requiresDedicatedAllocation,\n    bool& prefersDedicatedAllocation) const\n{\n#if VMA_DEDICATED_ALLOCATION || VMA_VULKAN_VERSION >= 1001000\n    if(m_UseKhrDedicatedAllocation || m_VulkanApiVersion >= VK_MAKE_VERSION(1, 1, 0))\n    {\n        VkBufferMemoryRequirementsInfo2KHR memReqInfo = { VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR };\n        memReqInfo.buffer = hBuffer;\n\n        VkMemoryDedicatedRequirementsKHR memDedicatedReq = { VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR };\n\n        VkMemoryRequirements2KHR memReq2 = { VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR };\n        VmaPnextChainPushFront(&memReq2, &memDedicatedReq);\n\n        (*m_VulkanFunctions.vkGetBufferMemoryRequirements2KHR)(m_hDevice, &memReqInfo, &memReq2);\n\n        memReq = memReq2.memoryRequirements;\n        requiresDedicatedAllocation = (memDedicatedReq.requiresDedicatedAllocation != VK_FALSE);\n        prefersDedicatedAllocation  = (memDedicatedReq.prefersDedicatedAllocation  != VK_FALSE);\n    }\n    else\n#endif // #if VMA_DEDICATED_ALLOCATION || VMA_VULKAN_VERSION >= 1001000\n    {\n        (*m_VulkanFunctions.vkGetBufferMemoryRequirements)(m_hDevice, hBuffer, &memReq);\n        requiresDedicatedAllocation = false;\n        prefersDedicatedAllocation  = false;\n    }\n}\n\nvoid VmaAllocator_T::GetImageMemoryRequirements(\n    VkImage hImage,\n    VkMemoryRequirements& memReq,\n    bool& requiresDedicatedAllocation,\n    bool& prefersDedicatedAllocation) const\n{\n#if VMA_DEDICATED_ALLOCATION || VMA_VULKAN_VERSION >= 1001000\n    if(m_UseKhrDedicatedAllocation || m_VulkanApiVersion >= VK_MAKE_VERSION(1, 1, 0))\n    {\n        VkImageMemoryRequirementsInfo2KHR memReqInfo = { VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR };\n        memReqInfo.image = hImage;\n\n        VkMemoryDedicatedRequirementsKHR memDedicatedReq = { VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR };\n\n        VkMemoryRequirements2KHR memReq2 = { VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR };\n        VmaPnextChainPushFront(&memReq2, &memDedicatedReq);\n\n        (*m_VulkanFunctions.vkGetImageMemoryRequirements2KHR)(m_hDevice, &memReqInfo, &memReq2);\n\n        memReq = memReq2.memoryRequirements;\n        requiresDedicatedAllocation = (memDedicatedReq.requiresDedicatedAllocation != VK_FALSE);\n        prefersDedicatedAllocation  = (memDedicatedReq.prefersDedicatedAllocation  != VK_FALSE);\n    }\n    else\n#endif // #if VMA_DEDICATED_ALLOCATION || VMA_VULKAN_VERSION >= 1001000\n    {\n        (*m_VulkanFunctions.vkGetImageMemoryRequirements)(m_hDevice, hImage, &memReq);\n        requiresDedicatedAllocation = false;\n        prefersDedicatedAllocation  = false;\n    }\n}\n\nVkResult VmaAllocator_T::AllocateMemory(\n    const VkMemoryRequirements& vkMemReq,\n    bool requiresDedicatedAllocation,\n    bool prefersDedicatedAllocation,\n    VkBuffer dedicatedBuffer,\n    VkBufferUsageFlags dedicatedBufferUsage,\n    VkImage dedicatedImage,\n    const VmaAllocationCreateInfo& createInfo,\n    VmaSuballocationType suballocType,\n    size_t allocationCount,\n    VmaAllocation* pAllocations)\n{\n    memset(pAllocations, 0, sizeof(VmaAllocation) * allocationCount);\n\n    VMA_ASSERT(VmaIsPow2(vkMemReq.alignment));\n\n    if(vkMemReq.size == 0)\n    {\n        return VK_ERROR_INITIALIZATION_FAILED;\n    }\n    if((createInfo.flags & VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT) != 0 &&\n        (createInfo.flags & VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT) != 0)\n    {\n        VMA_ASSERT(0 && \"Specifying VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT together with VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT makes no sense.\");\n        return VK_ERROR_OUT_OF_DEVICE_MEMORY;\n    }\n    if((createInfo.flags & VMA_ALLOCATION_CREATE_MAPPED_BIT) != 0 &&\n        (createInfo.flags & VMA_ALLOCATION_CREATE_CAN_BECOME_LOST_BIT) != 0)\n    {\n        VMA_ASSERT(0 && \"Specifying VMA_ALLOCATION_CREATE_MAPPED_BIT together with VMA_ALLOCATION_CREATE_CAN_BECOME_LOST_BIT is invalid.\");\n        return VK_ERROR_OUT_OF_DEVICE_MEMORY;\n    }\n    if(requiresDedicatedAllocation)\n    {\n        if((createInfo.flags & VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT) != 0)\n        {\n            VMA_ASSERT(0 && \"VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT specified while dedicated allocation is required.\");\n            return VK_ERROR_OUT_OF_DEVICE_MEMORY;\n        }\n        if(createInfo.pool != VK_NULL_HANDLE)\n        {\n            VMA_ASSERT(0 && \"Pool specified while dedicated allocation is required.\");\n            return VK_ERROR_OUT_OF_DEVICE_MEMORY;\n        }\n    }\n    if((createInfo.pool != VK_NULL_HANDLE) &&\n        ((createInfo.flags & (VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT)) != 0))\n    {\n        VMA_ASSERT(0 && \"Specifying VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT when pool != null is invalid.\");\n        return VK_ERROR_OUT_OF_DEVICE_MEMORY;\n    }\n\n    if(createInfo.pool != VK_NULL_HANDLE)\n    {\n        VmaAllocationCreateInfo createInfoForPool = createInfo;\n        // If memory type is not HOST_VISIBLE, disable MAPPED.\n        if((createInfoForPool.flags & VMA_ALLOCATION_CREATE_MAPPED_BIT) != 0 &&\n            (m_MemProps.memoryTypes[createInfo.pool->m_BlockVector.GetMemoryTypeIndex()].propertyFlags & VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT) == 0)\n        {\n            createInfoForPool.flags &= ~VMA_ALLOCATION_CREATE_MAPPED_BIT;\n        }\n\n        return createInfo.pool->m_BlockVector.Allocate(\n            m_CurrentFrameIndex.load(),\n            vkMemReq.size,\n            vkMemReq.alignment,\n            createInfoForPool,\n            suballocType,\n            allocationCount,\n            pAllocations);\n    }\n    else\n    {\n        // Bit mask of memory Vulkan types acceptable for this allocation.\n        uint32_t memoryTypeBits = vkMemReq.memoryTypeBits;\n        uint32_t memTypeIndex = UINT32_MAX;\n        VkResult res = vmaFindMemoryTypeIndex(this, memoryTypeBits, &createInfo, &memTypeIndex);\n        if(res == VK_SUCCESS)\n        {\n            res = AllocateMemoryOfType(\n                vkMemReq.size,\n                vkMemReq.alignment,\n                requiresDedicatedAllocation || prefersDedicatedAllocation,\n                dedicatedBuffer,\n                dedicatedBufferUsage,\n                dedicatedImage,\n                createInfo,\n                memTypeIndex,\n                suballocType,\n                allocationCount,\n                pAllocations);\n            // Succeeded on first try.\n            if(res == VK_SUCCESS)\n            {\n                return res;\n            }\n            // Allocation from this memory type failed. Try other compatible memory types.\n            else\n            {\n                for(;;)\n                {\n                    // Remove old memTypeIndex from list of possibilities.\n                    memoryTypeBits &= ~(1u << memTypeIndex);\n                    // Find alternative memTypeIndex.\n                    res = vmaFindMemoryTypeIndex(this, memoryTypeBits, &createInfo, &memTypeIndex);\n                    if(res == VK_SUCCESS)\n                    {\n                        res = AllocateMemoryOfType(\n                            vkMemReq.size,\n                            vkMemReq.alignment,\n                            requiresDedicatedAllocation || prefersDedicatedAllocation,\n                            dedicatedBuffer,\n                            dedicatedBufferUsage,\n                            dedicatedImage,\n                            createInfo,\n                            memTypeIndex,\n                            suballocType,\n                            allocationCount,\n                            pAllocations);\n                        // Allocation from this alternative memory type succeeded.\n                        if(res == VK_SUCCESS)\n                        {\n                            return res;\n                        }\n                        // else: Allocation from this memory type failed. Try next one - next loop iteration.\n                    }\n                    // No other matching memory type index could be found.\n                    else\n                    {\n                        // Not returning res, which is VK_ERROR_FEATURE_NOT_PRESENT, because we already failed to allocate once.\n                        return VK_ERROR_OUT_OF_DEVICE_MEMORY;\n                    }\n                }\n            }\n        }\n        // Can't find any single memory type maching requirements. res is VK_ERROR_FEATURE_NOT_PRESENT.\n        else\n            return res;\n    }\n}\n\nvoid VmaAllocator_T::FreeMemory(\n    size_t allocationCount,\n    const VmaAllocation* pAllocations)\n{\n    VMA_ASSERT(pAllocations);\n\n    for(size_t allocIndex = allocationCount; allocIndex--; )\n    {\n        VmaAllocation allocation = pAllocations[allocIndex];\n\n        if(allocation != VK_NULL_HANDLE)\n        {\n            if(TouchAllocation(allocation))\n            {\n                if(VMA_DEBUG_INITIALIZE_ALLOCATIONS)\n                {\n                    FillAllocation(allocation, VMA_ALLOCATION_FILL_PATTERN_DESTROYED);\n                }\n\n                switch(allocation->GetType())\n                {\n                case VmaAllocation_T::ALLOCATION_TYPE_BLOCK:\n                    {\n                        VmaBlockVector* pBlockVector = VMA_NULL;\n                        VmaPool hPool = allocation->GetBlock()->GetParentPool();\n                        if(hPool != VK_NULL_HANDLE)\n                        {\n                            pBlockVector = &hPool->m_BlockVector;\n                        }\n                        else\n                        {\n                            const uint32_t memTypeIndex = allocation->GetMemoryTypeIndex();\n                            pBlockVector = m_pBlockVectors[memTypeIndex];\n                        }\n                        pBlockVector->Free(allocation);\n                    }\n                    break;\n                case VmaAllocation_T::ALLOCATION_TYPE_DEDICATED:\n                    FreeDedicatedMemory(allocation);\n                    break;\n                default:\n                    VMA_ASSERT(0);\n                }\n            }\n\n            // Do this regardless of whether the allocation is lost. Lost allocations still account to Budget.AllocationBytes.\n            m_Budget.RemoveAllocation(MemoryTypeIndexToHeapIndex(allocation->GetMemoryTypeIndex()), allocation->GetSize());\n            allocation->SetUserData(this, VMA_NULL);\n            m_AllocationObjectAllocator.Free(allocation);\n        }\n    }\n}\n\nvoid VmaAllocator_T::CalculateStats(VmaStats* pStats)\n{\n    // Initialize.\n    VmaInitStatInfo(pStats->total);\n    for(size_t i = 0; i < VK_MAX_MEMORY_TYPES; ++i)\n        VmaInitStatInfo(pStats->memoryType[i]);\n    for(size_t i = 0; i < VK_MAX_MEMORY_HEAPS; ++i)\n        VmaInitStatInfo(pStats->memoryHeap[i]);\n\n    // Process default pools.\n    for(uint32_t memTypeIndex = 0; memTypeIndex < GetMemoryTypeCount(); ++memTypeIndex)\n    {\n        VmaBlockVector* const pBlockVector = m_pBlockVectors[memTypeIndex];\n        VMA_ASSERT(pBlockVector);\n        pBlockVector->AddStats(pStats);\n    }\n\n    // Process custom pools.\n    {\n        VmaMutexLockRead lock(m_PoolsMutex, m_UseMutex);\n        for(VmaPool pool = m_Pools.Front(); pool != VMA_NULL; pool = m_Pools.GetNext(pool))\n        {\n            pool->m_BlockVector.AddStats(pStats);\n        }\n    }\n\n    // Process dedicated allocations.\n    for(uint32_t memTypeIndex = 0; memTypeIndex < GetMemoryTypeCount(); ++memTypeIndex)\n    {\n        const uint32_t memHeapIndex = MemoryTypeIndexToHeapIndex(memTypeIndex);\n        VmaMutexLockRead dedicatedAllocationsLock(m_DedicatedAllocationsMutex[memTypeIndex], m_UseMutex);\n        DedicatedAllocationLinkedList& dedicatedAllocList = m_DedicatedAllocations[memTypeIndex];\n        for(VmaAllocation alloc = dedicatedAllocList.Front();\n            alloc != VMA_NULL; alloc = dedicatedAllocList.GetNext(alloc))\n        {\n            VmaStatInfo allocationStatInfo;\n            alloc->DedicatedAllocCalcStatsInfo(allocationStatInfo);\n            VmaAddStatInfo(pStats->total, allocationStatInfo);\n            VmaAddStatInfo(pStats->memoryType[memTypeIndex], allocationStatInfo);\n            VmaAddStatInfo(pStats->memoryHeap[memHeapIndex], allocationStatInfo);\n        }\n    }\n\n    // Postprocess.\n    VmaPostprocessCalcStatInfo(pStats->total);\n    for(size_t i = 0; i < GetMemoryTypeCount(); ++i)\n        VmaPostprocessCalcStatInfo(pStats->memoryType[i]);\n    for(size_t i = 0; i < GetMemoryHeapCount(); ++i)\n        VmaPostprocessCalcStatInfo(pStats->memoryHeap[i]);\n}\n\nvoid VmaAllocator_T::GetBudget(VmaBudget* outBudget, uint32_t firstHeap, uint32_t heapCount)\n{\n#if VMA_MEMORY_BUDGET\n    if(m_UseExtMemoryBudget)\n    {\n        if(m_Budget.m_OperationsSinceBudgetFetch < 30)\n        {\n            VmaMutexLockRead lockRead(m_Budget.m_BudgetMutex, m_UseMutex);\n            for(uint32_t i = 0; i < heapCount; ++i, ++outBudget)\n            {\n                const uint32_t heapIndex = firstHeap + i;\n\n                outBudget->blockBytes = m_Budget.m_BlockBytes[heapIndex];\n                outBudget->allocationBytes = m_Budget.m_AllocationBytes[heapIndex];\n\n                if(m_Budget.m_VulkanUsage[heapIndex] + outBudget->blockBytes > m_Budget.m_BlockBytesAtBudgetFetch[heapIndex])\n                {\n                    outBudget->usage = m_Budget.m_VulkanUsage[heapIndex] +\n                        outBudget->blockBytes - m_Budget.m_BlockBytesAtBudgetFetch[heapIndex];\n                }\n                else\n                {\n                    outBudget->usage = 0;\n                }\n\n                // Have to take MIN with heap size because explicit HeapSizeLimit is included in it.\n                outBudget->budget = VMA_MIN(\n                    m_Budget.m_VulkanBudget[heapIndex], m_MemProps.memoryHeaps[heapIndex].size);\n            }\n        }\n        else\n        {\n            UpdateVulkanBudget(); // Outside of mutex lock\n            GetBudget(outBudget, firstHeap, heapCount); // Recursion\n        }\n    }\n    else\n#endif\n    {\n        for(uint32_t i = 0; i < heapCount; ++i, ++outBudget)\n        {\n            const uint32_t heapIndex = firstHeap + i;\n\n            outBudget->blockBytes = m_Budget.m_BlockBytes[heapIndex];\n            outBudget->allocationBytes = m_Budget.m_AllocationBytes[heapIndex];\n\n            outBudget->usage = outBudget->blockBytes;\n            outBudget->budget = m_MemProps.memoryHeaps[heapIndex].size * 8 / 10; // 80% heuristics.\n        }\n    }\n}\n\nstatic const uint32_t VMA_VENDOR_ID_AMD = 4098;\n\nVkResult VmaAllocator_T::DefragmentationBegin(\n    const VmaDefragmentationInfo2& info,\n    VmaDefragmentationStats* pStats,\n    VmaDefragmentationContext* pContext)\n{\n    if(info.pAllocationsChanged != VMA_NULL)\n    {\n        memset(info.pAllocationsChanged, 0, info.allocationCount * sizeof(VkBool32));\n    }\n\n    *pContext = vma_new(this, VmaDefragmentationContext_T)(\n        this, m_CurrentFrameIndex.load(), info.flags, pStats);\n\n    (*pContext)->AddPools(info.poolCount, info.pPools);\n    (*pContext)->AddAllocations(\n        info.allocationCount, info.pAllocations, info.pAllocationsChanged);\n\n    VkResult res = (*pContext)->Defragment(\n        info.maxCpuBytesToMove, info.maxCpuAllocationsToMove,\n        info.maxGpuBytesToMove, info.maxGpuAllocationsToMove,\n        info.commandBuffer, pStats, info.flags);\n\n    if(res != VK_NOT_READY)\n    {\n        vma_delete(this, *pContext);\n        *pContext = VMA_NULL;\n    }\n\n    return res;\n}\n\nVkResult VmaAllocator_T::DefragmentationEnd(\n    VmaDefragmentationContext context)\n{\n    vma_delete(this, context);\n    return VK_SUCCESS;\n}\n\nVkResult VmaAllocator_T::DefragmentationPassBegin(\n    VmaDefragmentationPassInfo* pInfo,\n    VmaDefragmentationContext context)\n{\n    return context->DefragmentPassBegin(pInfo);\n}\nVkResult VmaAllocator_T::DefragmentationPassEnd(\n    VmaDefragmentationContext context)\n{\n    return context->DefragmentPassEnd();\n\n}\n\nvoid VmaAllocator_T::GetAllocationInfo(VmaAllocation hAllocation, VmaAllocationInfo* pAllocationInfo)\n{\n    if(hAllocation->CanBecomeLost())\n    {\n        /*\n        Warning: This is a carefully designed algorithm.\n        Do not modify unless you really know what you are doing :)\n        */\n        const uint32_t localCurrFrameIndex = m_CurrentFrameIndex.load();\n        uint32_t localLastUseFrameIndex = hAllocation->GetLastUseFrameIndex();\n        for(;;)\n        {\n            if(localLastUseFrameIndex == VMA_FRAME_INDEX_LOST)\n            {\n                pAllocationInfo->memoryType = UINT32_MAX;\n                pAllocationInfo->deviceMemory = VK_NULL_HANDLE;\n                pAllocationInfo->offset = 0;\n                pAllocationInfo->size = hAllocation->GetSize();\n                pAllocationInfo->pMappedData = VMA_NULL;\n                pAllocationInfo->pUserData = hAllocation->GetUserData();\n                return;\n            }\n            else if(localLastUseFrameIndex == localCurrFrameIndex)\n            {\n                pAllocationInfo->memoryType = hAllocation->GetMemoryTypeIndex();\n                pAllocationInfo->deviceMemory = hAllocation->GetMemory();\n                pAllocationInfo->offset = hAllocation->GetOffset();\n                pAllocationInfo->size = hAllocation->GetSize();\n                pAllocationInfo->pMappedData = VMA_NULL;\n                pAllocationInfo->pUserData = hAllocation->GetUserData();\n                return;\n            }\n            else // Last use time earlier than current time.\n            {\n                if(hAllocation->CompareExchangeLastUseFrameIndex(localLastUseFrameIndex, localCurrFrameIndex))\n                {\n                    localLastUseFrameIndex = localCurrFrameIndex;\n                }\n            }\n        }\n    }\n    else\n    {\n#if VMA_STATS_STRING_ENABLED\n        uint32_t localCurrFrameIndex = m_CurrentFrameIndex.load();\n        uint32_t localLastUseFrameIndex = hAllocation->GetLastUseFrameIndex();\n        for(;;)\n        {\n            VMA_ASSERT(localLastUseFrameIndex != VMA_FRAME_INDEX_LOST);\n            if(localLastUseFrameIndex == localCurrFrameIndex)\n            {\n                break;\n            }\n            else // Last use time earlier than current time.\n            {\n                if(hAllocation->CompareExchangeLastUseFrameIndex(localLastUseFrameIndex, localCurrFrameIndex))\n                {\n                    localLastUseFrameIndex = localCurrFrameIndex;\n                }\n            }\n        }\n#endif\n\n        pAllocationInfo->memoryType = hAllocation->GetMemoryTypeIndex();\n        pAllocationInfo->deviceMemory = hAllocation->GetMemory();\n        pAllocationInfo->offset = hAllocation->GetOffset();\n        pAllocationInfo->size = hAllocation->GetSize();\n        pAllocationInfo->pMappedData = hAllocation->GetMappedData();\n        pAllocationInfo->pUserData = hAllocation->GetUserData();\n    }\n}\n\nbool VmaAllocator_T::TouchAllocation(VmaAllocation hAllocation)\n{\n    // This is a stripped-down version of VmaAllocator_T::GetAllocationInfo.\n    if(hAllocation->CanBecomeLost())\n    {\n        uint32_t localCurrFrameIndex = m_CurrentFrameIndex.load();\n        uint32_t localLastUseFrameIndex = hAllocation->GetLastUseFrameIndex();\n        for(;;)\n        {\n            if(localLastUseFrameIndex == VMA_FRAME_INDEX_LOST)\n            {\n                return false;\n            }\n            else if(localLastUseFrameIndex == localCurrFrameIndex)\n            {\n                return true;\n            }\n            else // Last use time earlier than current time.\n            {\n                if(hAllocation->CompareExchangeLastUseFrameIndex(localLastUseFrameIndex, localCurrFrameIndex))\n                {\n                    localLastUseFrameIndex = localCurrFrameIndex;\n                }\n            }\n        }\n    }\n    else\n    {\n#if VMA_STATS_STRING_ENABLED\n        uint32_t localCurrFrameIndex = m_CurrentFrameIndex.load();\n        uint32_t localLastUseFrameIndex = hAllocation->GetLastUseFrameIndex();\n        for(;;)\n        {\n            VMA_ASSERT(localLastUseFrameIndex != VMA_FRAME_INDEX_LOST);\n            if(localLastUseFrameIndex == localCurrFrameIndex)\n            {\n                break;\n            }\n            else // Last use time earlier than current time.\n            {\n                if(hAllocation->CompareExchangeLastUseFrameIndex(localLastUseFrameIndex, localCurrFrameIndex))\n                {\n                    localLastUseFrameIndex = localCurrFrameIndex;\n                }\n            }\n        }\n#endif\n\n        return true;\n    }\n}\n\nVkResult VmaAllocator_T::CreatePool(const VmaPoolCreateInfo* pCreateInfo, VmaPool* pPool)\n{\n    VMA_DEBUG_LOG(\"  CreatePool: MemoryTypeIndex=%u, flags=%u\", pCreateInfo->memoryTypeIndex, pCreateInfo->flags);\n\n    VmaPoolCreateInfo newCreateInfo = *pCreateInfo;\n\n    // Protection against uninitialized new structure member. If garbage data are left there, this pointer dereference would crash.\n    if(pCreateInfo->pMemoryAllocateNext)\n    {\n        VMA_ASSERT(((const VkBaseInStructure*)pCreateInfo->pMemoryAllocateNext)->sType != 0);\n    }\n\n    if(newCreateInfo.maxBlockCount == 0)\n    {\n        newCreateInfo.maxBlockCount = SIZE_MAX;\n    }\n    if(newCreateInfo.minBlockCount > newCreateInfo.maxBlockCount)\n    {\n        return VK_ERROR_INITIALIZATION_FAILED;\n    }\n    // Memory type index out of range or forbidden.\n    if(pCreateInfo->memoryTypeIndex >= GetMemoryTypeCount() ||\n        ((1u << pCreateInfo->memoryTypeIndex) & m_GlobalMemoryTypeBits) == 0)\n    {\n        return VK_ERROR_FEATURE_NOT_PRESENT;\n    }\n    if(newCreateInfo.minAllocationAlignment > 0)\n    {\n        VMA_ASSERT(VmaIsPow2(newCreateInfo.minAllocationAlignment));\n    }\n\n    const VkDeviceSize preferredBlockSize = CalcPreferredBlockSize(newCreateInfo.memoryTypeIndex);\n\n    *pPool = vma_new(this, VmaPool_T)(this, newCreateInfo, preferredBlockSize);\n\n    VkResult res = (*pPool)->m_BlockVector.CreateMinBlocks();\n    if(res != VK_SUCCESS)\n    {\n        vma_delete(this, *pPool);\n        *pPool = VMA_NULL;\n        return res;\n    }\n\n    // Add to m_Pools.\n    {\n        VmaMutexLockWrite lock(m_PoolsMutex, m_UseMutex);\n        (*pPool)->SetId(m_NextPoolId++);\n        m_Pools.PushBack(*pPool);\n    }\n\n    return VK_SUCCESS;\n}\n\nvoid VmaAllocator_T::DestroyPool(VmaPool pool)\n{\n    // Remove from m_Pools.\n    {\n        VmaMutexLockWrite lock(m_PoolsMutex, m_UseMutex);\n        m_Pools.Remove(pool);\n    }\n\n    vma_delete(this, pool);\n}\n\nvoid VmaAllocator_T::GetPoolStats(VmaPool pool, VmaPoolStats* pPoolStats)\n{\n    pool->m_BlockVector.GetPoolStats(pPoolStats);\n}\n\nvoid VmaAllocator_T::SetCurrentFrameIndex(uint32_t frameIndex)\n{\n    m_CurrentFrameIndex.store(frameIndex);\n\n#if VMA_MEMORY_BUDGET\n    if(m_UseExtMemoryBudget)\n    {\n        UpdateVulkanBudget();\n    }\n#endif // #if VMA_MEMORY_BUDGET\n}\n\nvoid VmaAllocator_T::MakePoolAllocationsLost(\n    VmaPool hPool,\n    size_t* pLostAllocationCount)\n{\n    hPool->m_BlockVector.MakePoolAllocationsLost(\n        m_CurrentFrameIndex.load(),\n        pLostAllocationCount);\n}\n\nVkResult VmaAllocator_T::CheckPoolCorruption(VmaPool hPool)\n{\n    return hPool->m_BlockVector.CheckCorruption();\n}\n\nVkResult VmaAllocator_T::CheckCorruption(uint32_t memoryTypeBits)\n{\n    VkResult finalRes = VK_ERROR_FEATURE_NOT_PRESENT;\n\n    // Process default pools.\n    for(uint32_t memTypeIndex = 0; memTypeIndex < GetMemoryTypeCount(); ++memTypeIndex)\n    {\n        if(((1u << memTypeIndex) & memoryTypeBits) != 0)\n        {\n            VmaBlockVector* const pBlockVector = m_pBlockVectors[memTypeIndex];\n            VMA_ASSERT(pBlockVector);\n            VkResult localRes = pBlockVector->CheckCorruption();\n            switch(localRes)\n            {\n            case VK_ERROR_FEATURE_NOT_PRESENT:\n                break;\n            case VK_SUCCESS:\n                finalRes = VK_SUCCESS;\n                break;\n            default:\n                return localRes;\n            }\n        }\n    }\n\n    // Process custom pools.\n    {\n        VmaMutexLockRead lock(m_PoolsMutex, m_UseMutex);\n        for(VmaPool pool = m_Pools.Front(); pool != VMA_NULL; pool = m_Pools.GetNext(pool))\n        {\n            if(((1u << pool->m_BlockVector.GetMemoryTypeIndex()) & memoryTypeBits) != 0)\n            {\n                VkResult localRes = pool->m_BlockVector.CheckCorruption();\n                switch(localRes)\n                {\n                case VK_ERROR_FEATURE_NOT_PRESENT:\n                    break;\n                case VK_SUCCESS:\n                    finalRes = VK_SUCCESS;\n                    break;\n                default:\n                    return localRes;\n                }\n            }\n        }\n    }\n\n    return finalRes;\n}\n\nvoid VmaAllocator_T::CreateLostAllocation(VmaAllocation* pAllocation)\n{\n    *pAllocation = m_AllocationObjectAllocator.Allocate(VMA_FRAME_INDEX_LOST, false);\n    (*pAllocation)->InitLost();\n}\n\n// An object that increments given atomic but decrements it back in the destructor unless Commit() is called.\ntemplate<typename T>\nstruct AtomicTransactionalIncrement\n{\npublic:\n    typedef std::atomic<T> AtomicT;\n    ~AtomicTransactionalIncrement()\n    {\n        if(m_Atomic)\n            --(*m_Atomic);\n    }\n    T Increment(AtomicT* atomic)\n    {\n        m_Atomic = atomic;\n        return m_Atomic->fetch_add(1);\n    }\n    void Commit()\n    {\n        m_Atomic = nullptr;\n    }\n\nprivate:\n    AtomicT* m_Atomic = nullptr;\n};\n\nVkResult VmaAllocator_T::AllocateVulkanMemory(const VkMemoryAllocateInfo* pAllocateInfo, VkDeviceMemory* pMemory)\n{\n    AtomicTransactionalIncrement<uint32_t> deviceMemoryCountIncrement;\n    const uint64_t prevDeviceMemoryCount = deviceMemoryCountIncrement.Increment(&m_DeviceMemoryCount);\n#if VMA_DEBUG_DONT_EXCEED_MAX_MEMORY_ALLOCATION_COUNT\n    if(prevDeviceMemoryCount >= m_PhysicalDeviceProperties.limits.maxMemoryAllocationCount)\n    {\n        return VK_ERROR_TOO_MANY_OBJECTS;\n    }\n#endif\n\n    const uint32_t heapIndex = MemoryTypeIndexToHeapIndex(pAllocateInfo->memoryTypeIndex);\n\n    // HeapSizeLimit is in effect for this heap.\n    if((m_HeapSizeLimitMask & (1u << heapIndex)) != 0)\n    {\n        const VkDeviceSize heapSize = m_MemProps.memoryHeaps[heapIndex].size;\n        VkDeviceSize blockBytes = m_Budget.m_BlockBytes[heapIndex];\n        for(;;)\n        {\n            const VkDeviceSize blockBytesAfterAllocation = blockBytes + pAllocateInfo->allocationSize;\n            if(blockBytesAfterAllocation > heapSize)\n            {\n                return VK_ERROR_OUT_OF_DEVICE_MEMORY;\n            }\n            if(m_Budget.m_BlockBytes[heapIndex].compare_exchange_strong(blockBytes, blockBytesAfterAllocation))\n            {\n                break;\n            }\n        }\n    }\n    else\n    {\n        m_Budget.m_BlockBytes[heapIndex] += pAllocateInfo->allocationSize;\n    }\n\n    // VULKAN CALL vkAllocateMemory.\n    VkResult res = (*m_VulkanFunctions.vkAllocateMemory)(m_hDevice, pAllocateInfo, GetAllocationCallbacks(), pMemory);\n\n    if(res == VK_SUCCESS)\n    {\n#if VMA_MEMORY_BUDGET\n        ++m_Budget.m_OperationsSinceBudgetFetch;\n#endif\n\n        // Informative callback.\n        if(m_DeviceMemoryCallbacks.pfnAllocate != VMA_NULL)\n        {\n            (*m_DeviceMemoryCallbacks.pfnAllocate)(this, pAllocateInfo->memoryTypeIndex, *pMemory, pAllocateInfo->allocationSize, m_DeviceMemoryCallbacks.pUserData);\n        }\n\n        deviceMemoryCountIncrement.Commit();\n    }\n    else\n    {\n        m_Budget.m_BlockBytes[heapIndex] -= pAllocateInfo->allocationSize;\n    }\n\n    return res;\n}\n\nvoid VmaAllocator_T::FreeVulkanMemory(uint32_t memoryType, VkDeviceSize size, VkDeviceMemory hMemory)\n{\n    // Informative callback.\n    if(m_DeviceMemoryCallbacks.pfnFree != VMA_NULL)\n    {\n        (*m_DeviceMemoryCallbacks.pfnFree)(this, memoryType, hMemory, size, m_DeviceMemoryCallbacks.pUserData);\n    }\n\n    // VULKAN CALL vkFreeMemory.\n    (*m_VulkanFunctions.vkFreeMemory)(m_hDevice, hMemory, GetAllocationCallbacks());\n\n    m_Budget.m_BlockBytes[MemoryTypeIndexToHeapIndex(memoryType)] -= size;\n\n    --m_DeviceMemoryCount;\n}\n\nVkResult VmaAllocator_T::BindVulkanBuffer(\n    VkDeviceMemory memory,\n    VkDeviceSize memoryOffset,\n    VkBuffer buffer,\n    const void* pNext)\n{\n    if(pNext != VMA_NULL)\n    {\n#if VMA_VULKAN_VERSION >= 1001000 || VMA_BIND_MEMORY2\n        if((m_UseKhrBindMemory2 || m_VulkanApiVersion >= VK_MAKE_VERSION(1, 1, 0)) &&\n            m_VulkanFunctions.vkBindBufferMemory2KHR != VMA_NULL)\n        {\n            VkBindBufferMemoryInfoKHR bindBufferMemoryInfo = { VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR };\n            bindBufferMemoryInfo.pNext = pNext;\n            bindBufferMemoryInfo.buffer = buffer;\n            bindBufferMemoryInfo.memory = memory;\n            bindBufferMemoryInfo.memoryOffset = memoryOffset;\n            return (*m_VulkanFunctions.vkBindBufferMemory2KHR)(m_hDevice, 1, &bindBufferMemoryInfo);\n        }\n        else\n#endif // #if VMA_VULKAN_VERSION >= 1001000 || VMA_BIND_MEMORY2\n        {\n            return VK_ERROR_EXTENSION_NOT_PRESENT;\n        }\n    }\n    else\n    {\n        return (*m_VulkanFunctions.vkBindBufferMemory)(m_hDevice, buffer, memory, memoryOffset);\n    }\n}\n\nVkResult VmaAllocator_T::BindVulkanImage(\n    VkDeviceMemory memory,\n    VkDeviceSize memoryOffset,\n    VkImage image,\n    const void* pNext)\n{\n    if(pNext != VMA_NULL)\n    {\n#if VMA_VULKAN_VERSION >= 1001000 || VMA_BIND_MEMORY2\n        if((m_UseKhrBindMemory2 || m_VulkanApiVersion >= VK_MAKE_VERSION(1, 1, 0)) &&\n            m_VulkanFunctions.vkBindImageMemory2KHR != VMA_NULL)\n        {\n            VkBindImageMemoryInfoKHR bindBufferMemoryInfo = { VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR };\n            bindBufferMemoryInfo.pNext = pNext;\n            bindBufferMemoryInfo.image = image;\n            bindBufferMemoryInfo.memory = memory;\n            bindBufferMemoryInfo.memoryOffset = memoryOffset;\n            return (*m_VulkanFunctions.vkBindImageMemory2KHR)(m_hDevice, 1, &bindBufferMemoryInfo);\n        }\n        else\n#endif // #if VMA_BIND_MEMORY2\n        {\n            return VK_ERROR_EXTENSION_NOT_PRESENT;\n        }\n    }\n    else\n    {\n        return (*m_VulkanFunctions.vkBindImageMemory)(m_hDevice, image, memory, memoryOffset);\n    }\n}\n\nVkResult VmaAllocator_T::Map(VmaAllocation hAllocation, void** ppData)\n{\n    if(hAllocation->CanBecomeLost())\n    {\n        return VK_ERROR_MEMORY_MAP_FAILED;\n    }\n\n    switch(hAllocation->GetType())\n    {\n    case VmaAllocation_T::ALLOCATION_TYPE_BLOCK:\n        {\n            VmaDeviceMemoryBlock* const pBlock = hAllocation->GetBlock();\n            char *pBytes = VMA_NULL;\n            VkResult res = pBlock->Map(this, 1, (void**)&pBytes);\n            if(res == VK_SUCCESS)\n            {\n                *ppData = pBytes + (ptrdiff_t)hAllocation->GetOffset();\n                hAllocation->BlockAllocMap();\n            }\n            return res;\n        }\n    case VmaAllocation_T::ALLOCATION_TYPE_DEDICATED:\n        return hAllocation->DedicatedAllocMap(this, ppData);\n    default:\n        VMA_ASSERT(0);\n        return VK_ERROR_MEMORY_MAP_FAILED;\n    }\n}\n\nvoid VmaAllocator_T::Unmap(VmaAllocation hAllocation)\n{\n    switch(hAllocation->GetType())\n    {\n    case VmaAllocation_T::ALLOCATION_TYPE_BLOCK:\n        {\n            VmaDeviceMemoryBlock* const pBlock = hAllocation->GetBlock();\n            hAllocation->BlockAllocUnmap();\n            pBlock->Unmap(this, 1);\n        }\n        break;\n    case VmaAllocation_T::ALLOCATION_TYPE_DEDICATED:\n        hAllocation->DedicatedAllocUnmap(this);\n        break;\n    default:\n        VMA_ASSERT(0);\n    }\n}\n\nVkResult VmaAllocator_T::BindBufferMemory(\n    VmaAllocation hAllocation,\n    VkDeviceSize allocationLocalOffset,\n    VkBuffer hBuffer,\n    const void* pNext)\n{\n    VkResult res = VK_SUCCESS;\n    switch(hAllocation->GetType())\n    {\n    case VmaAllocation_T::ALLOCATION_TYPE_DEDICATED:\n        res = BindVulkanBuffer(hAllocation->GetMemory(), allocationLocalOffset, hBuffer, pNext);\n        break;\n    case VmaAllocation_T::ALLOCATION_TYPE_BLOCK:\n    {\n        VmaDeviceMemoryBlock* const pBlock = hAllocation->GetBlock();\n        VMA_ASSERT(pBlock && \"Binding buffer to allocation that doesn't belong to any block. Is the allocation lost?\");\n        res = pBlock->BindBufferMemory(this, hAllocation, allocationLocalOffset, hBuffer, pNext);\n        break;\n    }\n    default:\n        VMA_ASSERT(0);\n    }\n    return res;\n}\n\nVkResult VmaAllocator_T::BindImageMemory(\n    VmaAllocation hAllocation,\n    VkDeviceSize allocationLocalOffset,\n    VkImage hImage,\n    const void* pNext)\n{\n    VkResult res = VK_SUCCESS;\n    switch(hAllocation->GetType())\n    {\n    case VmaAllocation_T::ALLOCATION_TYPE_DEDICATED:\n        res = BindVulkanImage(hAllocation->GetMemory(), allocationLocalOffset, hImage, pNext);\n        break;\n    case VmaAllocation_T::ALLOCATION_TYPE_BLOCK:\n    {\n        VmaDeviceMemoryBlock* pBlock = hAllocation->GetBlock();\n        VMA_ASSERT(pBlock && \"Binding image to allocation that doesn't belong to any block. Is the allocation lost?\");\n        res = pBlock->BindImageMemory(this, hAllocation, allocationLocalOffset, hImage, pNext);\n        break;\n    }\n    default:\n        VMA_ASSERT(0);\n    }\n    return res;\n}\n\nVkResult VmaAllocator_T::FlushOrInvalidateAllocation(\n    VmaAllocation hAllocation,\n    VkDeviceSize offset, VkDeviceSize size,\n    VMA_CACHE_OPERATION op)\n{\n    VkResult res = VK_SUCCESS;\n\n    VkMappedMemoryRange memRange = {};\n    if(GetFlushOrInvalidateRange(hAllocation, offset, size, memRange))\n    {\n        switch(op)\n        {\n        case VMA_CACHE_FLUSH:\n            res = (*GetVulkanFunctions().vkFlushMappedMemoryRanges)(m_hDevice, 1, &memRange);\n            break;\n        case VMA_CACHE_INVALIDATE:\n            res = (*GetVulkanFunctions().vkInvalidateMappedMemoryRanges)(m_hDevice, 1, &memRange);\n            break;\n        default:\n            VMA_ASSERT(0);\n        }\n    }\n    // else: Just ignore this call.\n    return res;\n}\n\nVkResult VmaAllocator_T::FlushOrInvalidateAllocations(\n    uint32_t allocationCount,\n    const VmaAllocation* allocations,\n    const VkDeviceSize* offsets, const VkDeviceSize* sizes,\n    VMA_CACHE_OPERATION op)\n{\n    typedef VmaStlAllocator<VkMappedMemoryRange> RangeAllocator;\n    typedef VmaSmallVector<VkMappedMemoryRange, RangeAllocator, 16> RangeVector;\n    RangeVector ranges = RangeVector(RangeAllocator(GetAllocationCallbacks()));\n\n    for(uint32_t allocIndex = 0; allocIndex < allocationCount; ++allocIndex)\n    {\n        const VmaAllocation alloc = allocations[allocIndex];\n        const VkDeviceSize offset = offsets != VMA_NULL ? offsets[allocIndex] : 0;\n        const VkDeviceSize size = sizes != VMA_NULL ? sizes[allocIndex] : VK_WHOLE_SIZE;\n        VkMappedMemoryRange newRange;\n        if(GetFlushOrInvalidateRange(alloc, offset, size, newRange))\n        {\n            ranges.push_back(newRange);\n        }\n    }\n\n    VkResult res = VK_SUCCESS;\n    if(!ranges.empty())\n    {\n        switch(op)\n        {\n        case VMA_CACHE_FLUSH:\n            res = (*GetVulkanFunctions().vkFlushMappedMemoryRanges)(m_hDevice, (uint32_t)ranges.size(), ranges.data());\n            break;\n        case VMA_CACHE_INVALIDATE:\n            res = (*GetVulkanFunctions().vkInvalidateMappedMemoryRanges)(m_hDevice, (uint32_t)ranges.size(), ranges.data());\n            break;\n        default:\n            VMA_ASSERT(0);\n        }\n    }\n    // else: Just ignore this call.\n    return res;\n}\n\nvoid VmaAllocator_T::FreeDedicatedMemory(const VmaAllocation allocation)\n{\n    VMA_ASSERT(allocation && allocation->GetType() == VmaAllocation_T::ALLOCATION_TYPE_DEDICATED);\n\n    const uint32_t memTypeIndex = allocation->GetMemoryTypeIndex();\n    {\n        VmaMutexLockWrite lock(m_DedicatedAllocationsMutex[memTypeIndex], m_UseMutex);\n        DedicatedAllocationLinkedList& dedicatedAllocations = m_DedicatedAllocations[memTypeIndex];\n        dedicatedAllocations.Remove(allocation);\n    }\n\n    VkDeviceMemory hMemory = allocation->GetMemory();\n\n    /*\n    There is no need to call this, because Vulkan spec allows to skip vkUnmapMemory\n    before vkFreeMemory.\n\n    if(allocation->GetMappedData() != VMA_NULL)\n    {\n        (*m_VulkanFunctions.vkUnmapMemory)(m_hDevice, hMemory);\n    }\n    */\n\n    FreeVulkanMemory(memTypeIndex, allocation->GetSize(), hMemory);\n\n    VMA_DEBUG_LOG(\"    Freed DedicatedMemory MemoryTypeIndex=%u\", memTypeIndex);\n}\n\nuint32_t VmaAllocator_T::CalculateGpuDefragmentationMemoryTypeBits() const\n{\n    VkBufferCreateInfo dummyBufCreateInfo;\n    VmaFillGpuDefragmentationBufferCreateInfo(dummyBufCreateInfo);\n\n    uint32_t memoryTypeBits = 0;\n\n    // Create buffer.\n    VkBuffer buf = VK_NULL_HANDLE;\n    VkResult res = (*GetVulkanFunctions().vkCreateBuffer)(\n        m_hDevice, &dummyBufCreateInfo, GetAllocationCallbacks(), &buf);\n    if(res == VK_SUCCESS)\n    {\n        // Query for supported memory types.\n        VkMemoryRequirements memReq;\n        (*GetVulkanFunctions().vkGetBufferMemoryRequirements)(m_hDevice, buf, &memReq);\n        memoryTypeBits = memReq.memoryTypeBits;\n\n        // Destroy buffer.\n        (*GetVulkanFunctions().vkDestroyBuffer)(m_hDevice, buf, GetAllocationCallbacks());\n    }\n\n    return memoryTypeBits;\n}\n\nuint32_t VmaAllocator_T::CalculateGlobalMemoryTypeBits() const\n{\n    // Make sure memory information is already fetched.\n    VMA_ASSERT(GetMemoryTypeCount() > 0);\n\n    uint32_t memoryTypeBits = UINT32_MAX;\n\n    if(!m_UseAmdDeviceCoherentMemory)\n    {\n        // Exclude memory types that have VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD.\n        for(uint32_t memTypeIndex = 0; memTypeIndex < GetMemoryTypeCount(); ++memTypeIndex)\n        {\n            if((m_MemProps.memoryTypes[memTypeIndex].propertyFlags & VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD_COPY) != 0)\n            {\n                memoryTypeBits &= ~(1u << memTypeIndex);\n            }\n        }\n    }\n\n    return memoryTypeBits;\n}\n\nbool VmaAllocator_T::GetFlushOrInvalidateRange(\n    VmaAllocation allocation,\n    VkDeviceSize offset, VkDeviceSize size,\n    VkMappedMemoryRange& outRange) const\n{\n    const uint32_t memTypeIndex = allocation->GetMemoryTypeIndex();\n    if(size > 0 && IsMemoryTypeNonCoherent(memTypeIndex))\n    {\n        const VkDeviceSize nonCoherentAtomSize = m_PhysicalDeviceProperties.limits.nonCoherentAtomSize;\n        const VkDeviceSize allocationSize = allocation->GetSize();\n        VMA_ASSERT(offset <= allocationSize);\n\n        outRange.sType = VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE;\n        outRange.pNext = VMA_NULL;\n        outRange.memory = allocation->GetMemory();\n\n        switch(allocation->GetType())\n        {\n        case VmaAllocation_T::ALLOCATION_TYPE_DEDICATED:\n            outRange.offset = VmaAlignDown(offset, nonCoherentAtomSize);\n            if(size == VK_WHOLE_SIZE)\n            {\n                outRange.size = allocationSize - outRange.offset;\n            }\n            else\n            {\n                VMA_ASSERT(offset + size <= allocationSize);\n                outRange.size = VMA_MIN(\n                    VmaAlignUp(size + (offset - outRange.offset), nonCoherentAtomSize),\n                    allocationSize - outRange.offset);\n            }\n            break;\n        case VmaAllocation_T::ALLOCATION_TYPE_BLOCK:\n        {\n            // 1. Still within this allocation.\n            outRange.offset = VmaAlignDown(offset, nonCoherentAtomSize);\n            if(size == VK_WHOLE_SIZE)\n            {\n                size = allocationSize - offset;\n            }\n            else\n            {\n                VMA_ASSERT(offset + size <= allocationSize);\n            }\n            outRange.size = VmaAlignUp(size + (offset - outRange.offset), nonCoherentAtomSize);\n\n            // 2. Adjust to whole block.\n            const VkDeviceSize allocationOffset = allocation->GetOffset();\n            VMA_ASSERT(allocationOffset % nonCoherentAtomSize == 0);\n            const VkDeviceSize blockSize = allocation->GetBlock()->m_pMetadata->GetSize();\n            outRange.offset += allocationOffset;\n            outRange.size = VMA_MIN(outRange.size, blockSize - outRange.offset);\n\n            break;\n        }\n        default:\n            VMA_ASSERT(0);\n        }\n        return true;\n    }\n    return false;\n}\n\n#if VMA_MEMORY_BUDGET\n\nvoid VmaAllocator_T::UpdateVulkanBudget()\n{\n    VMA_ASSERT(m_UseExtMemoryBudget);\n\n    VkPhysicalDeviceMemoryProperties2KHR memProps = { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR };\n\n    VkPhysicalDeviceMemoryBudgetPropertiesEXT budgetProps = { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT };\n    VmaPnextChainPushFront(&memProps, &budgetProps);\n\n    GetVulkanFunctions().vkGetPhysicalDeviceMemoryProperties2KHR(m_PhysicalDevice, &memProps);\n\n    {\n        VmaMutexLockWrite lockWrite(m_Budget.m_BudgetMutex, m_UseMutex);\n\n        for(uint32_t heapIndex = 0; heapIndex < GetMemoryHeapCount(); ++heapIndex)\n        {\n            m_Budget.m_VulkanUsage[heapIndex] = budgetProps.heapUsage[heapIndex];\n            m_Budget.m_VulkanBudget[heapIndex] = budgetProps.heapBudget[heapIndex];\n            m_Budget.m_BlockBytesAtBudgetFetch[heapIndex] = m_Budget.m_BlockBytes[heapIndex].load();\n\n            // Some bugged drivers return the budget incorrectly, e.g. 0 or much bigger than heap size.\n            if(m_Budget.m_VulkanBudget[heapIndex] == 0)\n            {\n                m_Budget.m_VulkanBudget[heapIndex] = m_MemProps.memoryHeaps[heapIndex].size * 8 / 10; // 80% heuristics.\n            }\n            else if(m_Budget.m_VulkanBudget[heapIndex] > m_MemProps.memoryHeaps[heapIndex].size)\n            {\n                m_Budget.m_VulkanBudget[heapIndex] = m_MemProps.memoryHeaps[heapIndex].size;\n            }\n            if(m_Budget.m_VulkanUsage[heapIndex] == 0 && m_Budget.m_BlockBytesAtBudgetFetch[heapIndex] > 0)\n            {\n                m_Budget.m_VulkanUsage[heapIndex] = m_Budget.m_BlockBytesAtBudgetFetch[heapIndex];\n            }\n        }\n        m_Budget.m_OperationsSinceBudgetFetch = 0;\n    }\n}\n\n#endif // #if VMA_MEMORY_BUDGET\n\nvoid VmaAllocator_T::FillAllocation(const VmaAllocation hAllocation, uint8_t pattern)\n{\n    if(VMA_DEBUG_INITIALIZE_ALLOCATIONS &&\n        !hAllocation->CanBecomeLost() &&\n        (m_MemProps.memoryTypes[hAllocation->GetMemoryTypeIndex()].propertyFlags & VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT) != 0)\n    {\n        void* pData = VMA_NULL;\n        VkResult res = Map(hAllocation, &pData);\n        if(res == VK_SUCCESS)\n        {\n            memset(pData, (int)pattern, (size_t)hAllocation->GetSize());\n            FlushOrInvalidateAllocation(hAllocation, 0, VK_WHOLE_SIZE, VMA_CACHE_FLUSH);\n            Unmap(hAllocation);\n        }\n        else\n        {\n            VMA_ASSERT(0 && \"VMA_DEBUG_INITIALIZE_ALLOCATIONS is enabled, but couldn't map memory to fill allocation.\");\n        }\n    }\n}\n\nuint32_t VmaAllocator_T::GetGpuDefragmentationMemoryTypeBits()\n{\n    uint32_t memoryTypeBits = m_GpuDefragmentationMemoryTypeBits.load();\n    if(memoryTypeBits == UINT32_MAX)\n    {\n        memoryTypeBits = CalculateGpuDefragmentationMemoryTypeBits();\n        m_GpuDefragmentationMemoryTypeBits.store(memoryTypeBits);\n    }\n    return memoryTypeBits;\n}\n\n#if VMA_STATS_STRING_ENABLED\n\nvoid VmaAllocator_T::PrintDetailedMap(VmaJsonWriter& json)\n{\n    bool dedicatedAllocationsStarted = false;\n    for(uint32_t memTypeIndex = 0; memTypeIndex < GetMemoryTypeCount(); ++memTypeIndex)\n    {\n        VmaMutexLockRead dedicatedAllocationsLock(m_DedicatedAllocationsMutex[memTypeIndex], m_UseMutex);\n        DedicatedAllocationLinkedList& dedicatedAllocList = m_DedicatedAllocations[memTypeIndex];\n        if(!dedicatedAllocList.IsEmpty())\n        {\n            if(dedicatedAllocationsStarted == false)\n            {\n                dedicatedAllocationsStarted = true;\n                json.WriteString(\"DedicatedAllocations\");\n                json.BeginObject();\n            }\n\n            json.BeginString(\"Type \");\n            json.ContinueString(memTypeIndex);\n            json.EndString();\n\n            json.BeginArray();\n\n            for(VmaAllocation alloc = dedicatedAllocList.Front();\n                alloc != VMA_NULL; alloc = dedicatedAllocList.GetNext(alloc))\n            {\n                json.BeginObject(true);\n                alloc->PrintParameters(json);\n                json.EndObject();\n            }\n\n            json.EndArray();\n        }\n    }\n    if(dedicatedAllocationsStarted)\n    {\n        json.EndObject();\n    }\n\n    {\n        bool allocationsStarted = false;\n        for(uint32_t memTypeIndex = 0; memTypeIndex < GetMemoryTypeCount(); ++memTypeIndex)\n        {\n            if(m_pBlockVectors[memTypeIndex]->IsEmpty() == false)\n            {\n                if(allocationsStarted == false)\n                {\n                    allocationsStarted = true;\n                    json.WriteString(\"DefaultPools\");\n                    json.BeginObject();\n                }\n\n                json.BeginString(\"Type \");\n                json.ContinueString(memTypeIndex);\n                json.EndString();\n\n                m_pBlockVectors[memTypeIndex]->PrintDetailedMap(json);\n            }\n        }\n        if(allocationsStarted)\n        {\n            json.EndObject();\n        }\n    }\n\n    // Custom pools\n    {\n        VmaMutexLockRead lock(m_PoolsMutex, m_UseMutex);\n        if(!m_Pools.IsEmpty())\n        {\n            json.WriteString(\"Pools\");\n            json.BeginObject();\n            for(VmaPool pool = m_Pools.Front(); pool != VMA_NULL; pool = m_Pools.GetNext(pool))\n            {\n                json.BeginString();\n                json.ContinueString(pool->GetId());\n                json.EndString();\n\n                pool->m_BlockVector.PrintDetailedMap(json);\n            }\n            json.EndObject();\n        }\n    }\n}\n\n#endif // #if VMA_STATS_STRING_ENABLED\n\n////////////////////////////////////////////////////////////////////////////////\n// VmaVirtualBlock_T\n\nVmaVirtualBlock_T::VmaVirtualBlock_T(const VmaVirtualBlockCreateInfo& createInfo) :\n    m_AllocationCallbacksSpecified(createInfo.pAllocationCallbacks != VMA_NULL),\n    m_AllocationCallbacks(createInfo.pAllocationCallbacks != VMA_NULL ? *createInfo.pAllocationCallbacks : VmaEmptyAllocationCallbacks)\n{\n    const uint32_t algorithm = createInfo.flags & VMA_VIRTUAL_BLOCK_CREATE_ALGORITHM_MASK;\n    switch(algorithm)\n    {\n    case 0:\n        m_Metadata = vma_new(GetAllocationCallbacks(), VmaBlockMetadata_Generic)(VK_NULL_HANDLE, true);\n        break;\n    case VMA_VIRTUAL_BLOCK_CREATE_BUDDY_ALGORITHM_BIT:\n        m_Metadata = vma_new(GetAllocationCallbacks(), VmaBlockMetadata_Buddy)(VK_NULL_HANDLE, true);\n        break;\n    case VMA_VIRTUAL_BLOCK_CREATE_LINEAR_ALGORITHM_BIT:\n        m_Metadata = vma_new(GetAllocationCallbacks(), VmaBlockMetadata_Linear)(VK_NULL_HANDLE, true);\n        break;\n    default:\n        VMA_ASSERT(0);\n    }\n\n    m_Metadata->Init(createInfo.size);\n}\n\nVmaVirtualBlock_T::~VmaVirtualBlock_T()\n{\n    // This is an important assert!!!\n    // Hitting it means you have some memory leak - unreleased virtual allocations.\n    VMA_ASSERT(m_Metadata->IsEmpty() && \"Some virtual allocations were not freed before destruction of this virtual block!\");\n\n    vma_delete(GetAllocationCallbacks(), m_Metadata);\n}\n\nVkResult VmaVirtualBlock_T::Allocate(const VmaVirtualAllocationCreateInfo& createInfo, VkDeviceSize& outOffset)\n{\n    outOffset = VK_WHOLE_SIZE;\n    VmaAllocationRequest request = {};\n    if(m_Metadata->CreateAllocationRequest(\n        0, // currentFrameIndex - unimportant\n        0, // frameInUseCount - unimportant\n        1, // bufferImageGranularity\n        createInfo.size, // allocSize\n        VMA_MAX(createInfo.alignment, (VkDeviceSize)1), // allocAlignment\n        (createInfo.flags & VMA_VIRTUAL_ALLOCATION_CREATE_UPPER_ADDRESS_BIT) != 0, // upperAddress\n        VMA_SUBALLOCATION_TYPE_UNKNOWN, // allocType - unimportant\n        false, // canMakeOthersLost\n        createInfo.flags & VMA_VIRTUAL_ALLOCATION_CREATE_STRATEGY_MASK, // strategy\n        &request))\n    {\n        m_Metadata->Alloc(request,\n            VMA_SUBALLOCATION_TYPE_UNKNOWN, // type - unimportant\n            createInfo.pUserData);\n        outOffset = request.offset;\n        return VK_SUCCESS;\n    }\n    return VK_ERROR_OUT_OF_DEVICE_MEMORY;\n}\n\n#if VMA_STATS_STRING_ENABLED\nvoid VmaVirtualBlock_T::BuildStatsString(bool detailedMap, VmaStringBuilder& sb) const\n{\n    VmaJsonWriter json(GetAllocationCallbacks(), sb);\n    json.BeginObject();\n\n    VmaStatInfo stat = {};\n    CalculateStats(stat);\n\n    json.WriteString(\"Stats\");\n    VmaPrintStatInfo(json, stat);\n\n    if(detailedMap)\n    {\n        json.WriteString(\"Details\");\n        m_Metadata->PrintDetailedMap(json);\n    }\n\n    json.EndObject();\n}\n#endif // #if VMA_STATS_STRING_ENABLED\n\n////////////////////////////////////////////////////////////////////////////////\n// Public interface\n\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaCreateAllocator(\n    const VmaAllocatorCreateInfo* pCreateInfo,\n    VmaAllocator* pAllocator)\n{\n    VMA_ASSERT(pCreateInfo && pAllocator);\n    VMA_ASSERT(pCreateInfo->vulkanApiVersion == 0 ||\n        (VK_VERSION_MAJOR(pCreateInfo->vulkanApiVersion) == 1 && VK_VERSION_MINOR(pCreateInfo->vulkanApiVersion) <= 2));\n    VMA_DEBUG_LOG(\"vmaCreateAllocator\");\n    *pAllocator = vma_new(pCreateInfo->pAllocationCallbacks, VmaAllocator_T)(pCreateInfo);\n    VkResult result = (*pAllocator)->Init(pCreateInfo);\n    if(result < 0)\n    {\n        vma_delete(pCreateInfo->pAllocationCallbacks, *pAllocator);\n        *pAllocator = VK_NULL_HANDLE;\n    }\n    return result;\n}\n\nVMA_CALL_PRE void VMA_CALL_POST vmaDestroyAllocator(\n    VmaAllocator allocator)\n{\n    if(allocator != VK_NULL_HANDLE)\n    {\n        VMA_DEBUG_LOG(\"vmaDestroyAllocator\");\n        VkAllocationCallbacks allocationCallbacks = allocator->m_AllocationCallbacks; // Have to copy the callbacks when destroying.\n        vma_delete(&allocationCallbacks, allocator);\n    }\n}\n\nVMA_CALL_PRE void VMA_CALL_POST vmaGetAllocatorInfo(VmaAllocator allocator, VmaAllocatorInfo* pAllocatorInfo)\n{\n    VMA_ASSERT(allocator && pAllocatorInfo);\n    pAllocatorInfo->instance = allocator->m_hInstance;\n    pAllocatorInfo->physicalDevice = allocator->GetPhysicalDevice();\n    pAllocatorInfo->device = allocator->m_hDevice;\n}\n\nVMA_CALL_PRE void VMA_CALL_POST vmaGetPhysicalDeviceProperties(\n    VmaAllocator allocator,\n    const VkPhysicalDeviceProperties **ppPhysicalDeviceProperties)\n{\n    VMA_ASSERT(allocator && ppPhysicalDeviceProperties);\n    *ppPhysicalDeviceProperties = &allocator->m_PhysicalDeviceProperties;\n}\n\nVMA_CALL_PRE void VMA_CALL_POST vmaGetMemoryProperties(\n    VmaAllocator allocator,\n    const VkPhysicalDeviceMemoryProperties** ppPhysicalDeviceMemoryProperties)\n{\n    VMA_ASSERT(allocator && ppPhysicalDeviceMemoryProperties);\n    *ppPhysicalDeviceMemoryProperties = &allocator->m_MemProps;\n}\n\nVMA_CALL_PRE void VMA_CALL_POST vmaGetMemoryTypeProperties(\n    VmaAllocator allocator,\n    uint32_t memoryTypeIndex,\n    VkMemoryPropertyFlags* pFlags)\n{\n    VMA_ASSERT(allocator && pFlags);\n    VMA_ASSERT(memoryTypeIndex < allocator->GetMemoryTypeCount());\n    *pFlags = allocator->m_MemProps.memoryTypes[memoryTypeIndex].propertyFlags;\n}\n\nVMA_CALL_PRE void VMA_CALL_POST vmaSetCurrentFrameIndex(\n    VmaAllocator allocator,\n    uint32_t frameIndex)\n{\n    VMA_ASSERT(allocator);\n    VMA_ASSERT(frameIndex != VMA_FRAME_INDEX_LOST);\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n    allocator->SetCurrentFrameIndex(frameIndex);\n}\n\nVMA_CALL_PRE void VMA_CALL_POST vmaCalculateStats(\n    VmaAllocator allocator,\n    VmaStats* pStats)\n{\n    VMA_ASSERT(allocator && pStats);\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n    allocator->CalculateStats(pStats);\n}\n\nVMA_CALL_PRE void VMA_CALL_POST vmaGetBudget(\n    VmaAllocator allocator,\n    VmaBudget* pBudget)\n{\n    VMA_ASSERT(allocator && pBudget);\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n    allocator->GetBudget(pBudget, 0, allocator->GetMemoryHeapCount());\n}\n\n#if VMA_STATS_STRING_ENABLED\n\nVMA_CALL_PRE void VMA_CALL_POST vmaBuildStatsString(\n    VmaAllocator allocator,\n    char** ppStatsString,\n    VkBool32 detailedMap)\n{\n    VMA_ASSERT(allocator && ppStatsString);\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n    VmaStringBuilder sb(allocator->GetAllocationCallbacks());\n    {\n        VmaJsonWriter json(allocator->GetAllocationCallbacks(), sb);\n        json.BeginObject();\n\n        VmaBudget budget[VK_MAX_MEMORY_HEAPS];\n        allocator->GetBudget(budget, 0, allocator->GetMemoryHeapCount());\n\n        VmaStats stats;\n        allocator->CalculateStats(&stats);\n\n        json.WriteString(\"Total\");\n        VmaPrintStatInfo(json, stats.total);\n\n        for(uint32_t heapIndex = 0; heapIndex < allocator->GetMemoryHeapCount(); ++heapIndex)\n        {\n            json.BeginString(\"Heap \");\n            json.ContinueString(heapIndex);\n            json.EndString();\n            json.BeginObject();\n\n            json.WriteString(\"Size\");\n            json.WriteNumber(allocator->m_MemProps.memoryHeaps[heapIndex].size);\n\n            json.WriteString(\"Flags\");\n            json.BeginArray(true);\n            if((allocator->m_MemProps.memoryHeaps[heapIndex].flags & VK_MEMORY_HEAP_DEVICE_LOCAL_BIT) != 0)\n            {\n                json.WriteString(\"DEVICE_LOCAL\");\n            }\n            json.EndArray();\n\n            json.WriteString(\"Budget\");\n            json.BeginObject();\n            {\n                json.WriteString(\"BlockBytes\");\n                json.WriteNumber(budget[heapIndex].blockBytes);\n                json.WriteString(\"AllocationBytes\");\n                json.WriteNumber(budget[heapIndex].allocationBytes);\n                json.WriteString(\"Usage\");\n                json.WriteNumber(budget[heapIndex].usage);\n                json.WriteString(\"Budget\");\n                json.WriteNumber(budget[heapIndex].budget);\n            }\n            json.EndObject();\n\n            if(stats.memoryHeap[heapIndex].blockCount > 0)\n            {\n                json.WriteString(\"Stats\");\n                VmaPrintStatInfo(json, stats.memoryHeap[heapIndex]);\n            }\n\n            for(uint32_t typeIndex = 0; typeIndex < allocator->GetMemoryTypeCount(); ++typeIndex)\n            {\n                if(allocator->MemoryTypeIndexToHeapIndex(typeIndex) == heapIndex)\n                {\n                    json.BeginString(\"Type \");\n                    json.ContinueString(typeIndex);\n                    json.EndString();\n\n                    json.BeginObject();\n\n                    json.WriteString(\"Flags\");\n                    json.BeginArray(true);\n                    VkMemoryPropertyFlags flags = allocator->m_MemProps.memoryTypes[typeIndex].propertyFlags;\n                    if((flags & VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT) != 0)\n                    {\n                        json.WriteString(\"DEVICE_LOCAL\");\n                    }\n                    if((flags & VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT) != 0)\n                    {\n                        json.WriteString(\"HOST_VISIBLE\");\n                    }\n                    if((flags & VK_MEMORY_PROPERTY_HOST_COHERENT_BIT) != 0)\n                    {\n                        json.WriteString(\"HOST_COHERENT\");\n                    }\n                    if((flags & VK_MEMORY_PROPERTY_HOST_CACHED_BIT) != 0)\n                    {\n                        json.WriteString(\"HOST_CACHED\");\n                    }\n                    if((flags & VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT) != 0)\n                    {\n                        json.WriteString(\"LAZILY_ALLOCATED\");\n                    }\n#if VMA_VULKAN_VERSION >= 1001000\n                    if((flags & VK_MEMORY_PROPERTY_PROTECTED_BIT) != 0)\n                    {\n                        json.WriteString(\"PROTECTED\");\n                    }\n#endif // #if VMA_VULKAN_VERSION >= 1001000\n#if VK_AMD_device_coherent_memory\n                    if((flags & VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD_COPY) != 0)\n                    {\n                        json.WriteString(\"DEVICE_COHERENT\");\n                    }\n                    if((flags & VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD_COPY) != 0)\n                    {\n                        json.WriteString(\"DEVICE_UNCACHED\");\n                    }\n#endif // #if VK_AMD_device_coherent_memory\n                    json.EndArray();\n\n                    if(stats.memoryType[typeIndex].blockCount > 0)\n                    {\n                        json.WriteString(\"Stats\");\n                        VmaPrintStatInfo(json, stats.memoryType[typeIndex]);\n                    }\n\n                    json.EndObject();\n                }\n            }\n\n            json.EndObject();\n        }\n        if(detailedMap == VK_TRUE)\n        {\n            allocator->PrintDetailedMap(json);\n        }\n\n        json.EndObject();\n    }\n\n    *ppStatsString = VmaCreateStringCopy(allocator->GetAllocationCallbacks(), sb.GetData(), sb.GetLength());\n}\n\nVMA_CALL_PRE void VMA_CALL_POST vmaFreeStatsString(\n    VmaAllocator allocator,\n    char* pStatsString)\n{\n    if(pStatsString != VMA_NULL)\n    {\n        VMA_ASSERT(allocator);\n        VmaFreeString(allocator->GetAllocationCallbacks(), pStatsString);\n    }\n}\n\n#endif // #if VMA_STATS_STRING_ENABLED\n\n/*\nThis function is not protected by any mutex because it just reads immutable data.\n*/\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaFindMemoryTypeIndex(\n    VmaAllocator allocator,\n    uint32_t memoryTypeBits,\n    const VmaAllocationCreateInfo* pAllocationCreateInfo,\n    uint32_t* pMemoryTypeIndex)\n{\n    VMA_ASSERT(allocator != VK_NULL_HANDLE);\n    VMA_ASSERT(pAllocationCreateInfo != VMA_NULL);\n    VMA_ASSERT(pMemoryTypeIndex != VMA_NULL);\n\n    memoryTypeBits &= allocator->GetGlobalMemoryTypeBits();\n\n    if(pAllocationCreateInfo->memoryTypeBits != 0)\n    {\n        memoryTypeBits &= pAllocationCreateInfo->memoryTypeBits;\n    }\n\n    uint32_t requiredFlags = pAllocationCreateInfo->requiredFlags;\n    uint32_t preferredFlags = pAllocationCreateInfo->preferredFlags;\n    uint32_t notPreferredFlags = 0;\n\n    // Convert usage to requiredFlags and preferredFlags.\n    switch(pAllocationCreateInfo->usage)\n    {\n    case VMA_MEMORY_USAGE_UNKNOWN:\n        break;\n    case VMA_MEMORY_USAGE_GPU_ONLY:\n        if(!allocator->IsIntegratedGpu() || (preferredFlags & VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT) == 0)\n        {\n            preferredFlags |= VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT;\n        }\n        break;\n    case VMA_MEMORY_USAGE_CPU_ONLY:\n        requiredFlags |= VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT;\n        break;\n    case VMA_MEMORY_USAGE_CPU_TO_GPU:\n        requiredFlags |= VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT;\n        if(!allocator->IsIntegratedGpu() || (preferredFlags & VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT) == 0)\n        {\n            preferredFlags |= VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT;\n        }\n        break;\n    case VMA_MEMORY_USAGE_GPU_TO_CPU:\n        requiredFlags |= VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT;\n        preferredFlags |= VK_MEMORY_PROPERTY_HOST_CACHED_BIT;\n        break;\n    case VMA_MEMORY_USAGE_CPU_COPY:\n        notPreferredFlags |= VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT;\n        break;\n    case VMA_MEMORY_USAGE_GPU_LAZILY_ALLOCATED:\n        requiredFlags |= VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT;\n        break;\n    default:\n        VMA_ASSERT(0);\n        break;\n    }\n\n    // Avoid DEVICE_COHERENT unless explicitly requested.\n    if(((pAllocationCreateInfo->requiredFlags | pAllocationCreateInfo->preferredFlags) &\n        (VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD_COPY | VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD_COPY)) == 0)\n    {\n        notPreferredFlags |= VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD_COPY;\n    }\n\n    *pMemoryTypeIndex = UINT32_MAX;\n    uint32_t minCost = UINT32_MAX;\n    for(uint32_t memTypeIndex = 0, memTypeBit = 1;\n        memTypeIndex < allocator->GetMemoryTypeCount();\n        ++memTypeIndex, memTypeBit <<= 1)\n    {\n        // This memory type is acceptable according to memoryTypeBits bitmask.\n        if((memTypeBit & memoryTypeBits) != 0)\n        {\n            const VkMemoryPropertyFlags currFlags =\n                allocator->m_MemProps.memoryTypes[memTypeIndex].propertyFlags;\n            // This memory type contains requiredFlags.\n            if((requiredFlags & ~currFlags) == 0)\n            {\n                // Calculate cost as number of bits from preferredFlags not present in this memory type.\n                uint32_t currCost = VmaCountBitsSet(preferredFlags & ~currFlags) +\n                    VmaCountBitsSet(currFlags & notPreferredFlags);\n                // Remember memory type with lowest cost.\n                if(currCost < minCost)\n                {\n                    *pMemoryTypeIndex = memTypeIndex;\n                    if(currCost == 0)\n                    {\n                        return VK_SUCCESS;\n                    }\n                    minCost = currCost;\n                }\n            }\n        }\n    }\n    return (*pMemoryTypeIndex != UINT32_MAX) ? VK_SUCCESS : VK_ERROR_FEATURE_NOT_PRESENT;\n}\n\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaFindMemoryTypeIndexForBufferInfo(\n    VmaAllocator allocator,\n    const VkBufferCreateInfo* pBufferCreateInfo,\n    const VmaAllocationCreateInfo* pAllocationCreateInfo,\n    uint32_t* pMemoryTypeIndex)\n{\n    VMA_ASSERT(allocator != VK_NULL_HANDLE);\n    VMA_ASSERT(pBufferCreateInfo != VMA_NULL);\n    VMA_ASSERT(pAllocationCreateInfo != VMA_NULL);\n    VMA_ASSERT(pMemoryTypeIndex != VMA_NULL);\n\n    const VkDevice hDev = allocator->m_hDevice;\n    VkBuffer hBuffer = VK_NULL_HANDLE;\n    const VmaVulkanFunctions* funcs = &allocator->GetVulkanFunctions();\n    VkResult res = funcs->vkCreateBuffer(\n        hDev, pBufferCreateInfo, allocator->GetAllocationCallbacks(), &hBuffer);\n    if(res == VK_SUCCESS)\n    {\n        VkMemoryRequirements memReq = {};\n        funcs->vkGetBufferMemoryRequirements(\n            hDev, hBuffer, &memReq);\n\n        res = vmaFindMemoryTypeIndex(\n            allocator,\n            memReq.memoryTypeBits,\n            pAllocationCreateInfo,\n            pMemoryTypeIndex);\n\n        funcs->vkDestroyBuffer(\n            hDev, hBuffer, allocator->GetAllocationCallbacks());\n    }\n    return res;\n}\n\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaFindMemoryTypeIndexForImageInfo(\n    VmaAllocator allocator,\n    const VkImageCreateInfo* pImageCreateInfo,\n    const VmaAllocationCreateInfo* pAllocationCreateInfo,\n    uint32_t* pMemoryTypeIndex)\n{\n    VMA_ASSERT(allocator != VK_NULL_HANDLE);\n    VMA_ASSERT(pImageCreateInfo != VMA_NULL);\n    VMA_ASSERT(pAllocationCreateInfo != VMA_NULL);\n    VMA_ASSERT(pMemoryTypeIndex != VMA_NULL);\n\n    const VkDevice hDev = allocator->m_hDevice;\n    VkImage hImage = VK_NULL_HANDLE;\n    const VmaVulkanFunctions* funcs = &allocator->GetVulkanFunctions();\n    VkResult res = funcs->vkCreateImage(\n        hDev, pImageCreateInfo, allocator->GetAllocationCallbacks(), &hImage);\n    if(res == VK_SUCCESS)\n    {\n        VkMemoryRequirements memReq = {};\n        funcs->vkGetImageMemoryRequirements(\n            hDev, hImage, &memReq);\n\n        res = vmaFindMemoryTypeIndex(\n            allocator,\n            memReq.memoryTypeBits,\n            pAllocationCreateInfo,\n            pMemoryTypeIndex);\n\n        funcs->vkDestroyImage(\n            hDev, hImage, allocator->GetAllocationCallbacks());\n    }\n    return res;\n}\n\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaCreatePool(\n    VmaAllocator allocator,\n    const VmaPoolCreateInfo* pCreateInfo,\n    VmaPool* pPool)\n{\n    VMA_ASSERT(allocator && pCreateInfo && pPool);\n\n    VMA_DEBUG_LOG(\"vmaCreatePool\");\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n    VkResult res = allocator->CreatePool(pCreateInfo, pPool);\n\n#if VMA_RECORDING_ENABLED\n    if(allocator->GetRecorder() != VMA_NULL)\n    {\n        allocator->GetRecorder()->RecordCreatePool(allocator->GetCurrentFrameIndex(), *pCreateInfo, *pPool);\n    }\n#endif\n\n    return res;\n}\n\nVMA_CALL_PRE void VMA_CALL_POST vmaDestroyPool(\n    VmaAllocator allocator,\n    VmaPool pool)\n{\n    VMA_ASSERT(allocator);\n\n    if(pool == VK_NULL_HANDLE)\n    {\n        return;\n    }\n\n    VMA_DEBUG_LOG(\"vmaDestroyPool\");\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n#if VMA_RECORDING_ENABLED\n    if(allocator->GetRecorder() != VMA_NULL)\n    {\n        allocator->GetRecorder()->RecordDestroyPool(allocator->GetCurrentFrameIndex(), pool);\n    }\n#endif\n\n    allocator->DestroyPool(pool);\n}\n\nVMA_CALL_PRE void VMA_CALL_POST vmaGetPoolStats(\n    VmaAllocator allocator,\n    VmaPool pool,\n    VmaPoolStats* pPoolStats)\n{\n    VMA_ASSERT(allocator && pool && pPoolStats);\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n    allocator->GetPoolStats(pool, pPoolStats);\n}\n\nVMA_CALL_PRE void VMA_CALL_POST vmaMakePoolAllocationsLost(\n    VmaAllocator allocator,\n    VmaPool pool,\n    size_t* pLostAllocationCount)\n{\n    VMA_ASSERT(allocator && pool);\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n#if VMA_RECORDING_ENABLED\n    if(allocator->GetRecorder() != VMA_NULL)\n    {\n        allocator->GetRecorder()->RecordMakePoolAllocationsLost(allocator->GetCurrentFrameIndex(), pool);\n    }\n#endif\n\n    allocator->MakePoolAllocationsLost(pool, pLostAllocationCount);\n}\n\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaCheckPoolCorruption(VmaAllocator allocator, VmaPool pool)\n{\n    VMA_ASSERT(allocator && pool);\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n    VMA_DEBUG_LOG(\"vmaCheckPoolCorruption\");\n\n    return allocator->CheckPoolCorruption(pool);\n}\n\nVMA_CALL_PRE void VMA_CALL_POST vmaGetPoolName(\n    VmaAllocator allocator,\n    VmaPool pool,\n    const char** ppName)\n{\n    VMA_ASSERT(allocator && pool && ppName);\n\n    VMA_DEBUG_LOG(\"vmaGetPoolName\");\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n    *ppName = pool->GetName();\n}\n\nVMA_CALL_PRE void VMA_CALL_POST vmaSetPoolName(\n    VmaAllocator allocator,\n    VmaPool pool,\n    const char* pName)\n{\n    VMA_ASSERT(allocator && pool);\n\n    VMA_DEBUG_LOG(\"vmaSetPoolName\");\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n    pool->SetName(pName);\n\n#if VMA_RECORDING_ENABLED\n    if(allocator->GetRecorder() != VMA_NULL)\n    {\n        allocator->GetRecorder()->RecordSetPoolName(allocator->GetCurrentFrameIndex(), pool, pName);\n    }\n#endif\n}\n\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaAllocateMemory(\n    VmaAllocator allocator,\n    const VkMemoryRequirements* pVkMemoryRequirements,\n    const VmaAllocationCreateInfo* pCreateInfo,\n    VmaAllocation* pAllocation,\n    VmaAllocationInfo* pAllocationInfo)\n{\n    VMA_ASSERT(allocator && pVkMemoryRequirements && pCreateInfo && pAllocation);\n\n    VMA_DEBUG_LOG(\"vmaAllocateMemory\");\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n    VkResult result = allocator->AllocateMemory(\n        *pVkMemoryRequirements,\n        false, // requiresDedicatedAllocation\n        false, // prefersDedicatedAllocation\n        VK_NULL_HANDLE, // dedicatedBuffer\n        UINT32_MAX, // dedicatedBufferUsage\n        VK_NULL_HANDLE, // dedicatedImage\n        *pCreateInfo,\n        VMA_SUBALLOCATION_TYPE_UNKNOWN,\n        1, // allocationCount\n        pAllocation);\n\n#if VMA_RECORDING_ENABLED\n    if(allocator->GetRecorder() != VMA_NULL)\n    {\n        allocator->GetRecorder()->RecordAllocateMemory(\n            allocator->GetCurrentFrameIndex(),\n            *pVkMemoryRequirements,\n            *pCreateInfo,\n            *pAllocation);\n    }\n#endif\n\n    if(pAllocationInfo != VMA_NULL && result == VK_SUCCESS)\n    {\n        allocator->GetAllocationInfo(*pAllocation, pAllocationInfo);\n    }\n\n    return result;\n}\n\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaAllocateMemoryPages(\n    VmaAllocator allocator,\n    const VkMemoryRequirements* pVkMemoryRequirements,\n    const VmaAllocationCreateInfo* pCreateInfo,\n    size_t allocationCount,\n    VmaAllocation* pAllocations,\n    VmaAllocationInfo* pAllocationInfo)\n{\n    if(allocationCount == 0)\n    {\n        return VK_SUCCESS;\n    }\n\n    VMA_ASSERT(allocator && pVkMemoryRequirements && pCreateInfo && pAllocations);\n\n    VMA_DEBUG_LOG(\"vmaAllocateMemoryPages\");\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n    VkResult result = allocator->AllocateMemory(\n        *pVkMemoryRequirements,\n        false, // requiresDedicatedAllocation\n        false, // prefersDedicatedAllocation\n        VK_NULL_HANDLE, // dedicatedBuffer\n        UINT32_MAX, // dedicatedBufferUsage\n        VK_NULL_HANDLE, // dedicatedImage\n        *pCreateInfo,\n        VMA_SUBALLOCATION_TYPE_UNKNOWN,\n        allocationCount,\n        pAllocations);\n\n#if VMA_RECORDING_ENABLED\n    if(allocator->GetRecorder() != VMA_NULL)\n    {\n        allocator->GetRecorder()->RecordAllocateMemoryPages(\n            allocator->GetCurrentFrameIndex(),\n            *pVkMemoryRequirements,\n            *pCreateInfo,\n            (uint64_t)allocationCount,\n            pAllocations);\n    }\n#endif\n\n    if(pAllocationInfo != VMA_NULL && result == VK_SUCCESS)\n    {\n        for(size_t i = 0; i < allocationCount; ++i)\n        {\n            allocator->GetAllocationInfo(pAllocations[i], pAllocationInfo + i);\n        }\n    }\n\n    return result;\n}\n\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaAllocateMemoryForBuffer(\n    VmaAllocator allocator,\n    VkBuffer buffer,\n    const VmaAllocationCreateInfo* pCreateInfo,\n    VmaAllocation* pAllocation,\n    VmaAllocationInfo* pAllocationInfo)\n{\n    VMA_ASSERT(allocator && buffer != VK_NULL_HANDLE && pCreateInfo && pAllocation);\n\n    VMA_DEBUG_LOG(\"vmaAllocateMemoryForBuffer\");\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n    VkMemoryRequirements vkMemReq = {};\n    bool requiresDedicatedAllocation = false;\n    bool prefersDedicatedAllocation = false;\n    allocator->GetBufferMemoryRequirements(buffer, vkMemReq,\n        requiresDedicatedAllocation,\n        prefersDedicatedAllocation);\n\n    VkResult result = allocator->AllocateMemory(\n        vkMemReq,\n        requiresDedicatedAllocation,\n        prefersDedicatedAllocation,\n        buffer, // dedicatedBuffer\n        UINT32_MAX, // dedicatedBufferUsage\n        VK_NULL_HANDLE, // dedicatedImage\n        *pCreateInfo,\n        VMA_SUBALLOCATION_TYPE_BUFFER,\n        1, // allocationCount\n        pAllocation);\n\n#if VMA_RECORDING_ENABLED\n    if(allocator->GetRecorder() != VMA_NULL)\n    {\n        allocator->GetRecorder()->RecordAllocateMemoryForBuffer(\n            allocator->GetCurrentFrameIndex(),\n            vkMemReq,\n            requiresDedicatedAllocation,\n            prefersDedicatedAllocation,\n            *pCreateInfo,\n            *pAllocation);\n    }\n#endif\n\n    if(pAllocationInfo && result == VK_SUCCESS)\n    {\n        allocator->GetAllocationInfo(*pAllocation, pAllocationInfo);\n    }\n\n    return result;\n}\n\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaAllocateMemoryForImage(\n    VmaAllocator allocator,\n    VkImage image,\n    const VmaAllocationCreateInfo* pCreateInfo,\n    VmaAllocation* pAllocation,\n    VmaAllocationInfo* pAllocationInfo)\n{\n    VMA_ASSERT(allocator && image != VK_NULL_HANDLE && pCreateInfo && pAllocation);\n\n    VMA_DEBUG_LOG(\"vmaAllocateMemoryForImage\");\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n    VkMemoryRequirements vkMemReq = {};\n    bool requiresDedicatedAllocation = false;\n    bool prefersDedicatedAllocation  = false;\n    allocator->GetImageMemoryRequirements(image, vkMemReq,\n        requiresDedicatedAllocation, prefersDedicatedAllocation);\n\n    VkResult result = allocator->AllocateMemory(\n        vkMemReq,\n        requiresDedicatedAllocation,\n        prefersDedicatedAllocation,\n        VK_NULL_HANDLE, // dedicatedBuffer\n        UINT32_MAX, // dedicatedBufferUsage\n        image, // dedicatedImage\n        *pCreateInfo,\n        VMA_SUBALLOCATION_TYPE_IMAGE_UNKNOWN,\n        1, // allocationCount\n        pAllocation);\n\n#if VMA_RECORDING_ENABLED\n    if(allocator->GetRecorder() != VMA_NULL)\n    {\n        allocator->GetRecorder()->RecordAllocateMemoryForImage(\n            allocator->GetCurrentFrameIndex(),\n            vkMemReq,\n            requiresDedicatedAllocation,\n            prefersDedicatedAllocation,\n            *pCreateInfo,\n            *pAllocation);\n    }\n#endif\n\n    if(pAllocationInfo && result == VK_SUCCESS)\n    {\n        allocator->GetAllocationInfo(*pAllocation, pAllocationInfo);\n    }\n\n    return result;\n}\n\nVMA_CALL_PRE void VMA_CALL_POST vmaFreeMemory(\n    VmaAllocator allocator,\n    VmaAllocation allocation)\n{\n    VMA_ASSERT(allocator);\n\n    if(allocation == VK_NULL_HANDLE)\n    {\n        return;\n    }\n\n    VMA_DEBUG_LOG(\"vmaFreeMemory\");\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n#if VMA_RECORDING_ENABLED\n    if(allocator->GetRecorder() != VMA_NULL)\n    {\n        allocator->GetRecorder()->RecordFreeMemory(\n            allocator->GetCurrentFrameIndex(),\n            allocation);\n    }\n#endif\n\n    allocator->FreeMemory(\n        1, // allocationCount\n        &allocation);\n}\n\nVMA_CALL_PRE void VMA_CALL_POST vmaFreeMemoryPages(\n    VmaAllocator allocator,\n    size_t allocationCount,\n    const VmaAllocation* pAllocations)\n{\n    if(allocationCount == 0)\n    {\n        return;\n    }\n\n    VMA_ASSERT(allocator);\n\n    VMA_DEBUG_LOG(\"vmaFreeMemoryPages\");\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n#if VMA_RECORDING_ENABLED\n    if(allocator->GetRecorder() != VMA_NULL)\n    {\n        allocator->GetRecorder()->RecordFreeMemoryPages(\n            allocator->GetCurrentFrameIndex(),\n            (uint64_t)allocationCount,\n            pAllocations);\n    }\n#endif\n\n    allocator->FreeMemory(allocationCount, pAllocations);\n}\n\nVMA_CALL_PRE void VMA_CALL_POST vmaGetAllocationInfo(\n    VmaAllocator allocator,\n    VmaAllocation allocation,\n    VmaAllocationInfo* pAllocationInfo)\n{\n    VMA_ASSERT(allocator && allocation && pAllocationInfo);\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n#if VMA_RECORDING_ENABLED\n    if(allocator->GetRecorder() != VMA_NULL)\n    {\n        allocator->GetRecorder()->RecordGetAllocationInfo(\n            allocator->GetCurrentFrameIndex(),\n            allocation);\n    }\n#endif\n\n    allocator->GetAllocationInfo(allocation, pAllocationInfo);\n}\n\nVMA_CALL_PRE VkBool32 VMA_CALL_POST vmaTouchAllocation(\n    VmaAllocator allocator,\n    VmaAllocation allocation)\n{\n    VMA_ASSERT(allocator && allocation);\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n#if VMA_RECORDING_ENABLED\n    if(allocator->GetRecorder() != VMA_NULL)\n    {\n        allocator->GetRecorder()->RecordTouchAllocation(\n            allocator->GetCurrentFrameIndex(),\n            allocation);\n    }\n#endif\n\n    return allocator->TouchAllocation(allocation);\n}\n\nVMA_CALL_PRE void VMA_CALL_POST vmaSetAllocationUserData(\n    VmaAllocator allocator,\n    VmaAllocation allocation,\n    void* pUserData)\n{\n    VMA_ASSERT(allocator && allocation);\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n    allocation->SetUserData(allocator, pUserData);\n\n#if VMA_RECORDING_ENABLED\n    if(allocator->GetRecorder() != VMA_NULL)\n    {\n        allocator->GetRecorder()->RecordSetAllocationUserData(\n            allocator->GetCurrentFrameIndex(),\n            allocation,\n            pUserData);\n    }\n#endif\n}\n\nVMA_CALL_PRE void VMA_CALL_POST vmaCreateLostAllocation(\n    VmaAllocator allocator,\n    VmaAllocation* pAllocation)\n{\n    VMA_ASSERT(allocator && pAllocation);\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK;\n\n    allocator->CreateLostAllocation(pAllocation);\n\n#if VMA_RECORDING_ENABLED\n    if(allocator->GetRecorder() != VMA_NULL)\n    {\n        allocator->GetRecorder()->RecordCreateLostAllocation(\n            allocator->GetCurrentFrameIndex(),\n            *pAllocation);\n    }\n#endif\n}\n\nVMA_CALL_PRE void VMA_CALL_POST vmaGetAllocationMemoryProperties(\n    VmaAllocator VMA_NOT_NULL allocator,\n    VmaAllocation VMA_NOT_NULL allocation,\n    VkMemoryPropertyFlags* VMA_NOT_NULL pFlags)\n{\n    VMA_ASSERT(allocator && allocation && pFlags);\n    const uint32_t memTypeIndex = allocation->GetMemoryTypeIndex();\n    *pFlags = allocator->m_MemProps.memoryTypes[memTypeIndex].propertyFlags;\n}\n\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaMapMemory(\n    VmaAllocator allocator,\n    VmaAllocation allocation,\n    void** ppData)\n{\n    VMA_ASSERT(allocator && allocation && ppData);\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n    VkResult res = allocator->Map(allocation, ppData);\n\n#if VMA_RECORDING_ENABLED\n    if(allocator->GetRecorder() != VMA_NULL)\n    {\n        allocator->GetRecorder()->RecordMapMemory(\n            allocator->GetCurrentFrameIndex(),\n            allocation);\n    }\n#endif\n\n    return res;\n}\n\nVMA_CALL_PRE void VMA_CALL_POST vmaUnmapMemory(\n    VmaAllocator allocator,\n    VmaAllocation allocation)\n{\n    VMA_ASSERT(allocator && allocation);\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n#if VMA_RECORDING_ENABLED\n    if(allocator->GetRecorder() != VMA_NULL)\n    {\n        allocator->GetRecorder()->RecordUnmapMemory(\n            allocator->GetCurrentFrameIndex(),\n            allocation);\n    }\n#endif\n\n    allocator->Unmap(allocation);\n}\n\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaFlushAllocation(VmaAllocator allocator, VmaAllocation allocation, VkDeviceSize offset, VkDeviceSize size)\n{\n    VMA_ASSERT(allocator && allocation);\n\n    VMA_DEBUG_LOG(\"vmaFlushAllocation\");\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n    const VkResult res = allocator->FlushOrInvalidateAllocation(allocation, offset, size, VMA_CACHE_FLUSH);\n\n#if VMA_RECORDING_ENABLED\n    if(allocator->GetRecorder() != VMA_NULL)\n    {\n        allocator->GetRecorder()->RecordFlushAllocation(\n            allocator->GetCurrentFrameIndex(),\n            allocation, offset, size);\n    }\n#endif\n\n    return res;\n}\n\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaInvalidateAllocation(VmaAllocator allocator, VmaAllocation allocation, VkDeviceSize offset, VkDeviceSize size)\n{\n    VMA_ASSERT(allocator && allocation);\n\n    VMA_DEBUG_LOG(\"vmaInvalidateAllocation\");\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n    const VkResult res = allocator->FlushOrInvalidateAllocation(allocation, offset, size, VMA_CACHE_INVALIDATE);\n\n#if VMA_RECORDING_ENABLED\n    if(allocator->GetRecorder() != VMA_NULL)\n    {\n        allocator->GetRecorder()->RecordInvalidateAllocation(\n            allocator->GetCurrentFrameIndex(),\n            allocation, offset, size);\n    }\n#endif\n\n    return res;\n}\n\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaFlushAllocations(\n    VmaAllocator allocator,\n    uint32_t allocationCount,\n    const VmaAllocation* allocations,\n    const VkDeviceSize* offsets,\n    const VkDeviceSize* sizes)\n{\n    VMA_ASSERT(allocator);\n\n    if(allocationCount == 0)\n    {\n        return VK_SUCCESS;\n    }\n\n    VMA_ASSERT(allocations);\n\n    VMA_DEBUG_LOG(\"vmaFlushAllocations\");\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n    const VkResult res = allocator->FlushOrInvalidateAllocations(allocationCount, allocations, offsets, sizes, VMA_CACHE_FLUSH);\n\n#if VMA_RECORDING_ENABLED\n    if(allocator->GetRecorder() != VMA_NULL)\n    {\n        //TODO\n    }\n#endif\n\n    return res;\n}\n\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaInvalidateAllocations(\n    VmaAllocator allocator,\n    uint32_t allocationCount,\n    const VmaAllocation* allocations,\n    const VkDeviceSize* offsets,\n    const VkDeviceSize* sizes)\n{\n    VMA_ASSERT(allocator);\n\n    if(allocationCount == 0)\n    {\n        return VK_SUCCESS;\n    }\n\n    VMA_ASSERT(allocations);\n\n    VMA_DEBUG_LOG(\"vmaInvalidateAllocations\");\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n    const VkResult res = allocator->FlushOrInvalidateAllocations(allocationCount, allocations, offsets, sizes, VMA_CACHE_INVALIDATE);\n\n#if VMA_RECORDING_ENABLED\n    if(allocator->GetRecorder() != VMA_NULL)\n    {\n        //TODO\n    }\n#endif\n\n    return res;\n}\n\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaCheckCorruption(VmaAllocator allocator, uint32_t memoryTypeBits)\n{\n    VMA_ASSERT(allocator);\n\n    VMA_DEBUG_LOG(\"vmaCheckCorruption\");\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n    return allocator->CheckCorruption(memoryTypeBits);\n}\n\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaDefragment(\n    VmaAllocator allocator,\n    const VmaAllocation* pAllocations,\n    size_t allocationCount,\n    VkBool32* pAllocationsChanged,\n    const VmaDefragmentationInfo *pDefragmentationInfo,\n    VmaDefragmentationStats* pDefragmentationStats)\n{\n    // Deprecated interface, reimplemented using new one.\n\n    VmaDefragmentationInfo2 info2 = {};\n    info2.allocationCount = (uint32_t)allocationCount;\n    info2.pAllocations = pAllocations;\n    info2.pAllocationsChanged = pAllocationsChanged;\n    if(pDefragmentationInfo != VMA_NULL)\n    {\n        info2.maxCpuAllocationsToMove = pDefragmentationInfo->maxAllocationsToMove;\n        info2.maxCpuBytesToMove = pDefragmentationInfo->maxBytesToMove;\n    }\n    else\n    {\n        info2.maxCpuAllocationsToMove = UINT32_MAX;\n        info2.maxCpuBytesToMove = VK_WHOLE_SIZE;\n    }\n    // info2.flags, maxGpuAllocationsToMove, maxGpuBytesToMove, commandBuffer deliberately left zero.\n\n    VmaDefragmentationContext ctx;\n    VkResult res = vmaDefragmentationBegin(allocator, &info2, pDefragmentationStats, &ctx);\n    if(res == VK_NOT_READY)\n    {\n        res = vmaDefragmentationEnd( allocator, ctx);\n    }\n    return res;\n}\n\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaDefragmentationBegin(\n    VmaAllocator allocator,\n    const VmaDefragmentationInfo2* pInfo,\n    VmaDefragmentationStats* pStats,\n    VmaDefragmentationContext *pContext)\n{\n    VMA_ASSERT(allocator && pInfo && pContext);\n\n    // Degenerate case: Nothing to defragment.\n    if(pInfo->allocationCount == 0 && pInfo->poolCount == 0)\n    {\n        return VK_SUCCESS;\n    }\n\n    VMA_ASSERT(pInfo->allocationCount == 0 || pInfo->pAllocations != VMA_NULL);\n    VMA_ASSERT(pInfo->poolCount == 0 || pInfo->pPools != VMA_NULL);\n    VMA_HEAVY_ASSERT(VmaValidatePointerArray(pInfo->allocationCount, pInfo->pAllocations));\n    VMA_HEAVY_ASSERT(VmaValidatePointerArray(pInfo->poolCount, pInfo->pPools));\n\n    VMA_DEBUG_LOG(\"vmaDefragmentationBegin\");\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n    VkResult res = allocator->DefragmentationBegin(*pInfo, pStats, pContext);\n\n#if VMA_RECORDING_ENABLED\n    if(allocator->GetRecorder() != VMA_NULL)\n    {\n        allocator->GetRecorder()->RecordDefragmentationBegin(\n            allocator->GetCurrentFrameIndex(), *pInfo, *pContext);\n    }\n#endif\n\n    return res;\n}\n\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaDefragmentationEnd(\n    VmaAllocator allocator,\n    VmaDefragmentationContext context)\n{\n    VMA_ASSERT(allocator);\n\n    VMA_DEBUG_LOG(\"vmaDefragmentationEnd\");\n\n    if(context != VK_NULL_HANDLE)\n    {\n        VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n#if VMA_RECORDING_ENABLED\n        if(allocator->GetRecorder() != VMA_NULL)\n        {\n            allocator->GetRecorder()->RecordDefragmentationEnd(\n                allocator->GetCurrentFrameIndex(), context);\n        }\n#endif\n\n        return allocator->DefragmentationEnd(context);\n    }\n    else\n    {\n        return VK_SUCCESS;\n    }\n}\n\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaBeginDefragmentationPass(\n    VmaAllocator allocator,\n    VmaDefragmentationContext context,\n    VmaDefragmentationPassInfo* pInfo\n    )\n{\n    VMA_ASSERT(allocator);\n    VMA_ASSERT(pInfo);\n\n    VMA_DEBUG_LOG(\"vmaBeginDefragmentationPass\");\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n    if(context == VK_NULL_HANDLE)\n    {\n        pInfo->moveCount = 0;\n        return VK_SUCCESS;\n    }\n\n    return allocator->DefragmentationPassBegin(pInfo, context);\n}\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaEndDefragmentationPass(\n    VmaAllocator allocator,\n    VmaDefragmentationContext context)\n{\n    VMA_ASSERT(allocator);\n\n    VMA_DEBUG_LOG(\"vmaEndDefragmentationPass\");\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n    if(context == VK_NULL_HANDLE)\n        return VK_SUCCESS;\n\n    return allocator->DefragmentationPassEnd(context);\n}\n\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaBindBufferMemory(\n    VmaAllocator allocator,\n    VmaAllocation allocation,\n    VkBuffer buffer)\n{\n    VMA_ASSERT(allocator && allocation && buffer);\n\n    VMA_DEBUG_LOG(\"vmaBindBufferMemory\");\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n    return allocator->BindBufferMemory(allocation, 0, buffer, VMA_NULL);\n}\n\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaBindBufferMemory2(\n    VmaAllocator allocator,\n    VmaAllocation allocation,\n    VkDeviceSize allocationLocalOffset,\n    VkBuffer buffer,\n    const void* pNext)\n{\n    VMA_ASSERT(allocator && allocation && buffer);\n\n    VMA_DEBUG_LOG(\"vmaBindBufferMemory2\");\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n    return allocator->BindBufferMemory(allocation, allocationLocalOffset, buffer, pNext);\n}\n\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaBindImageMemory(\n    VmaAllocator allocator,\n    VmaAllocation allocation,\n    VkImage image)\n{\n    VMA_ASSERT(allocator && allocation && image);\n\n    VMA_DEBUG_LOG(\"vmaBindImageMemory\");\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n    return allocator->BindImageMemory(allocation, 0, image, VMA_NULL);\n}\n\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaBindImageMemory2(\n    VmaAllocator allocator,\n    VmaAllocation allocation,\n    VkDeviceSize allocationLocalOffset,\n    VkImage image,\n    const void* pNext)\n{\n    VMA_ASSERT(allocator && allocation && image);\n\n    VMA_DEBUG_LOG(\"vmaBindImageMemory2\");\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n        return allocator->BindImageMemory(allocation, allocationLocalOffset, image, pNext);\n}\n\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaCreateBuffer(\n    VmaAllocator allocator,\n    const VkBufferCreateInfo* pBufferCreateInfo,\n    const VmaAllocationCreateInfo* pAllocationCreateInfo,\n    VkBuffer* pBuffer,\n    VmaAllocation* pAllocation,\n    VmaAllocationInfo* pAllocationInfo)\n{\n    VMA_ASSERT(allocator && pBufferCreateInfo && pAllocationCreateInfo && pBuffer && pAllocation);\n\n    if(pBufferCreateInfo->size == 0)\n    {\n        return VK_ERROR_INITIALIZATION_FAILED;\n    }\n    if((pBufferCreateInfo->usage & VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_COPY) != 0 &&\n        !allocator->m_UseKhrBufferDeviceAddress)\n    {\n        VMA_ASSERT(0 && \"Creating a buffer with VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT is not valid if VMA_ALLOCATOR_CREATE_BUFFER_DEVICE_ADDRESS_BIT was not used.\");\n        return VK_ERROR_INITIALIZATION_FAILED;\n    }\n\n    VMA_DEBUG_LOG(\"vmaCreateBuffer\");\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n    *pBuffer = VK_NULL_HANDLE;\n    *pAllocation = VK_NULL_HANDLE;\n\n    // 1. Create VkBuffer.\n    VkResult res = (*allocator->GetVulkanFunctions().vkCreateBuffer)(\n        allocator->m_hDevice,\n        pBufferCreateInfo,\n        allocator->GetAllocationCallbacks(),\n        pBuffer);\n    if(res >= 0)\n    {\n        // 2. vkGetBufferMemoryRequirements.\n        VkMemoryRequirements vkMemReq = {};\n        bool requiresDedicatedAllocation = false;\n        bool prefersDedicatedAllocation  = false;\n        allocator->GetBufferMemoryRequirements(*pBuffer, vkMemReq,\n            requiresDedicatedAllocation, prefersDedicatedAllocation);\n\n        // 3. Allocate memory using allocator.\n        res = allocator->AllocateMemory(\n            vkMemReq,\n            requiresDedicatedAllocation,\n            prefersDedicatedAllocation,\n            *pBuffer, // dedicatedBuffer\n            pBufferCreateInfo->usage, // dedicatedBufferUsage\n            VK_NULL_HANDLE, // dedicatedImage\n            *pAllocationCreateInfo,\n            VMA_SUBALLOCATION_TYPE_BUFFER,\n            1, // allocationCount\n            pAllocation);\n\n#if VMA_RECORDING_ENABLED\n        if(allocator->GetRecorder() != VMA_NULL)\n        {\n            allocator->GetRecorder()->RecordCreateBuffer(\n                allocator->GetCurrentFrameIndex(),\n                *pBufferCreateInfo,\n                *pAllocationCreateInfo,\n                *pAllocation);\n        }\n#endif\n\n        if(res >= 0)\n        {\n            // 3. Bind buffer with memory.\n            if((pAllocationCreateInfo->flags & VMA_ALLOCATION_CREATE_DONT_BIND_BIT) == 0)\n            {\n                res = allocator->BindBufferMemory(*pAllocation, 0, *pBuffer, VMA_NULL);\n            }\n            if(res >= 0)\n            {\n                // All steps succeeded.\n                #if VMA_STATS_STRING_ENABLED\n                    (*pAllocation)->InitBufferImageUsage(pBufferCreateInfo->usage);\n                #endif\n                if(pAllocationInfo != VMA_NULL)\n                {\n                    allocator->GetAllocationInfo(*pAllocation, pAllocationInfo);\n                }\n\n                return VK_SUCCESS;\n            }\n            allocator->FreeMemory(\n                1, // allocationCount\n                pAllocation);\n            *pAllocation = VK_NULL_HANDLE;\n            (*allocator->GetVulkanFunctions().vkDestroyBuffer)(allocator->m_hDevice, *pBuffer, allocator->GetAllocationCallbacks());\n            *pBuffer = VK_NULL_HANDLE;\n            return res;\n        }\n        (*allocator->GetVulkanFunctions().vkDestroyBuffer)(allocator->m_hDevice, *pBuffer, allocator->GetAllocationCallbacks());\n        *pBuffer = VK_NULL_HANDLE;\n        return res;\n    }\n    return res;\n}\n\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaCreateBufferWithAlignment(\n    VmaAllocator allocator,\n    const VkBufferCreateInfo* pBufferCreateInfo,\n    const VmaAllocationCreateInfo* pAllocationCreateInfo,\n    VkDeviceSize minAlignment,\n    VkBuffer* pBuffer,\n    VmaAllocation* pAllocation,\n    VmaAllocationInfo* pAllocationInfo)\n{\n    VMA_ASSERT(allocator && pBufferCreateInfo && pAllocationCreateInfo && VmaIsPow2(minAlignment) && pBuffer && pAllocation);\n\n    if(pBufferCreateInfo->size == 0)\n    {\n        return VK_ERROR_INITIALIZATION_FAILED;\n    }\n    if((pBufferCreateInfo->usage & VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_COPY) != 0 &&\n        !allocator->m_UseKhrBufferDeviceAddress)\n    {\n        VMA_ASSERT(0 && \"Creating a buffer with VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT is not valid if VMA_ALLOCATOR_CREATE_BUFFER_DEVICE_ADDRESS_BIT was not used.\");\n        return VK_ERROR_INITIALIZATION_FAILED;\n    }\n\n    VMA_DEBUG_LOG(\"vmaCreateBufferWithAlignment\");\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n    *pBuffer = VK_NULL_HANDLE;\n    *pAllocation = VK_NULL_HANDLE;\n\n    // 1. Create VkBuffer.\n    VkResult res = (*allocator->GetVulkanFunctions().vkCreateBuffer)(\n        allocator->m_hDevice,\n        pBufferCreateInfo,\n        allocator->GetAllocationCallbacks(),\n        pBuffer);\n    if(res >= 0)\n    {\n        // 2. vkGetBufferMemoryRequirements.\n        VkMemoryRequirements vkMemReq = {};\n        bool requiresDedicatedAllocation = false;\n        bool prefersDedicatedAllocation  = false;\n        allocator->GetBufferMemoryRequirements(*pBuffer, vkMemReq,\n            requiresDedicatedAllocation, prefersDedicatedAllocation);\n\n        // 2a. Include minAlignment\n        vkMemReq.alignment = VMA_MAX(vkMemReq.alignment, minAlignment);\n\n        // 3. Allocate memory using allocator.\n        res = allocator->AllocateMemory(\n            vkMemReq,\n            requiresDedicatedAllocation,\n            prefersDedicatedAllocation,\n            *pBuffer, // dedicatedBuffer\n            pBufferCreateInfo->usage, // dedicatedBufferUsage\n            VK_NULL_HANDLE, // dedicatedImage\n            *pAllocationCreateInfo,\n            VMA_SUBALLOCATION_TYPE_BUFFER,\n            1, // allocationCount\n            pAllocation);\n\n#if VMA_RECORDING_ENABLED\n        if(allocator->GetRecorder() != VMA_NULL)\n        {\n            VMA_ASSERT(0 && \"Not implemented.\");\n        }\n#endif\n\n        if(res >= 0)\n        {\n            // 3. Bind buffer with memory.\n            if((pAllocationCreateInfo->flags & VMA_ALLOCATION_CREATE_DONT_BIND_BIT) == 0)\n            {\n                res = allocator->BindBufferMemory(*pAllocation, 0, *pBuffer, VMA_NULL);\n            }\n            if(res >= 0)\n            {\n                // All steps succeeded.\n                #if VMA_STATS_STRING_ENABLED\n                    (*pAllocation)->InitBufferImageUsage(pBufferCreateInfo->usage);\n                #endif\n                if(pAllocationInfo != VMA_NULL)\n                {\n                    allocator->GetAllocationInfo(*pAllocation, pAllocationInfo);\n                }\n\n                return VK_SUCCESS;\n            }\n            allocator->FreeMemory(\n                1, // allocationCount\n                pAllocation);\n            *pAllocation = VK_NULL_HANDLE;\n            (*allocator->GetVulkanFunctions().vkDestroyBuffer)(allocator->m_hDevice, *pBuffer, allocator->GetAllocationCallbacks());\n            *pBuffer = VK_NULL_HANDLE;\n            return res;\n        }\n        (*allocator->GetVulkanFunctions().vkDestroyBuffer)(allocator->m_hDevice, *pBuffer, allocator->GetAllocationCallbacks());\n        *pBuffer = VK_NULL_HANDLE;\n        return res;\n    }\n    return res;\n}\n\nVMA_CALL_PRE void VMA_CALL_POST vmaDestroyBuffer(\n    VmaAllocator allocator,\n    VkBuffer buffer,\n    VmaAllocation allocation)\n{\n    VMA_ASSERT(allocator);\n\n    if(buffer == VK_NULL_HANDLE && allocation == VK_NULL_HANDLE)\n    {\n        return;\n    }\n\n    VMA_DEBUG_LOG(\"vmaDestroyBuffer\");\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n#if VMA_RECORDING_ENABLED\n    if(allocator->GetRecorder() != VMA_NULL)\n    {\n        allocator->GetRecorder()->RecordDestroyBuffer(\n            allocator->GetCurrentFrameIndex(),\n            allocation);\n    }\n#endif\n\n    if(buffer != VK_NULL_HANDLE)\n    {\n        (*allocator->GetVulkanFunctions().vkDestroyBuffer)(allocator->m_hDevice, buffer, allocator->GetAllocationCallbacks());\n    }\n\n    if(allocation != VK_NULL_HANDLE)\n    {\n        allocator->FreeMemory(\n            1, // allocationCount\n            &allocation);\n    }\n}\n\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaCreateImage(\n    VmaAllocator allocator,\n    const VkImageCreateInfo* pImageCreateInfo,\n    const VmaAllocationCreateInfo* pAllocationCreateInfo,\n    VkImage* pImage,\n    VmaAllocation* pAllocation,\n    VmaAllocationInfo* pAllocationInfo)\n{\n    VMA_ASSERT(allocator && pImageCreateInfo && pAllocationCreateInfo && pImage && pAllocation);\n\n    if(pImageCreateInfo->extent.width == 0 ||\n        pImageCreateInfo->extent.height == 0 ||\n        pImageCreateInfo->extent.depth == 0 ||\n        pImageCreateInfo->mipLevels == 0 ||\n        pImageCreateInfo->arrayLayers == 0)\n    {\n        return VK_ERROR_INITIALIZATION_FAILED;\n    }\n\n    VMA_DEBUG_LOG(\"vmaCreateImage\");\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n    *pImage = VK_NULL_HANDLE;\n    *pAllocation = VK_NULL_HANDLE;\n\n    // 1. Create VkImage.\n    VkResult res = (*allocator->GetVulkanFunctions().vkCreateImage)(\n        allocator->m_hDevice,\n        pImageCreateInfo,\n        allocator->GetAllocationCallbacks(),\n        pImage);\n    if(res >= 0)\n    {\n        VmaSuballocationType suballocType = pImageCreateInfo->tiling == VK_IMAGE_TILING_OPTIMAL ?\n            VMA_SUBALLOCATION_TYPE_IMAGE_OPTIMAL :\n            VMA_SUBALLOCATION_TYPE_IMAGE_LINEAR;\n\n        // 2. Allocate memory using allocator.\n        VkMemoryRequirements vkMemReq = {};\n        bool requiresDedicatedAllocation = false;\n        bool prefersDedicatedAllocation  = false;\n        allocator->GetImageMemoryRequirements(*pImage, vkMemReq,\n            requiresDedicatedAllocation, prefersDedicatedAllocation);\n\n        res = allocator->AllocateMemory(\n            vkMemReq,\n            requiresDedicatedAllocation,\n            prefersDedicatedAllocation,\n            VK_NULL_HANDLE, // dedicatedBuffer\n            UINT32_MAX, // dedicatedBufferUsage\n            *pImage, // dedicatedImage\n            *pAllocationCreateInfo,\n            suballocType,\n            1, // allocationCount\n            pAllocation);\n\n#if VMA_RECORDING_ENABLED\n        if(allocator->GetRecorder() != VMA_NULL)\n        {\n            allocator->GetRecorder()->RecordCreateImage(\n                allocator->GetCurrentFrameIndex(),\n                *pImageCreateInfo,\n                *pAllocationCreateInfo,\n                *pAllocation);\n        }\n#endif\n\n        if(res >= 0)\n        {\n            // 3. Bind image with memory.\n            if((pAllocationCreateInfo->flags & VMA_ALLOCATION_CREATE_DONT_BIND_BIT) == 0)\n            {\n                res = allocator->BindImageMemory(*pAllocation, 0, *pImage, VMA_NULL);\n            }\n            if(res >= 0)\n            {\n                // All steps succeeded.\n                #if VMA_STATS_STRING_ENABLED\n                    (*pAllocation)->InitBufferImageUsage(pImageCreateInfo->usage);\n                #endif\n                if(pAllocationInfo != VMA_NULL)\n                {\n                    allocator->GetAllocationInfo(*pAllocation, pAllocationInfo);\n                }\n\n                return VK_SUCCESS;\n            }\n            allocator->FreeMemory(\n                1, // allocationCount\n                pAllocation);\n            *pAllocation = VK_NULL_HANDLE;\n            (*allocator->GetVulkanFunctions().vkDestroyImage)(allocator->m_hDevice, *pImage, allocator->GetAllocationCallbacks());\n            *pImage = VK_NULL_HANDLE;\n            return res;\n        }\n        (*allocator->GetVulkanFunctions().vkDestroyImage)(allocator->m_hDevice, *pImage, allocator->GetAllocationCallbacks());\n        *pImage = VK_NULL_HANDLE;\n        return res;\n    }\n    return res;\n}\n\nVMA_CALL_PRE void VMA_CALL_POST vmaDestroyImage(\n    VmaAllocator allocator,\n    VkImage image,\n    VmaAllocation allocation)\n{\n    VMA_ASSERT(allocator);\n\n    if(image == VK_NULL_HANDLE && allocation == VK_NULL_HANDLE)\n    {\n        return;\n    }\n\n    VMA_DEBUG_LOG(\"vmaDestroyImage\");\n\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK\n\n#if VMA_RECORDING_ENABLED\n    if(allocator->GetRecorder() != VMA_NULL)\n    {\n        allocator->GetRecorder()->RecordDestroyImage(\n            allocator->GetCurrentFrameIndex(),\n            allocation);\n    }\n#endif\n\n    if(image != VK_NULL_HANDLE)\n    {\n        (*allocator->GetVulkanFunctions().vkDestroyImage)(allocator->m_hDevice, image, allocator->GetAllocationCallbacks());\n    }\n    if(allocation != VK_NULL_HANDLE)\n    {\n        allocator->FreeMemory(\n            1, // allocationCount\n            &allocation);\n    }\n}\n\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaCreateVirtualBlock(\n    const VmaVirtualBlockCreateInfo* VMA_NOT_NULL pCreateInfo,\n    VmaVirtualBlock VMA_NULLABLE * VMA_NOT_NULL pVirtualBlock)\n{\n    VMA_ASSERT(pCreateInfo && pVirtualBlock);\n    VMA_ASSERT(pCreateInfo->size > 0);\n    VMA_DEBUG_LOG(\"vmaCreateVirtualBlock\");\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK;\n    *pVirtualBlock = vma_new(pCreateInfo->pAllocationCallbacks, VmaVirtualBlock_T)(*pCreateInfo);\n    VkResult res = (*pVirtualBlock)->Init();\n    if(res < 0)\n    {\n        vma_delete(pCreateInfo->pAllocationCallbacks, *pVirtualBlock);\n        *pVirtualBlock = VK_NULL_HANDLE;\n    }\n    return res;\n}\n\nVMA_CALL_PRE void VMA_CALL_POST vmaDestroyVirtualBlock(VmaVirtualBlock VMA_NULLABLE virtualBlock)\n{\n    if(virtualBlock != VK_NULL_HANDLE)\n    {\n        VMA_DEBUG_LOG(\"vmaDestroyVirtualBlock\");\n        VMA_DEBUG_GLOBAL_MUTEX_LOCK;\n        VkAllocationCallbacks allocationCallbacks = virtualBlock->m_AllocationCallbacks; // Have to copy the callbacks when destroying.\n        vma_delete(&allocationCallbacks, virtualBlock);\n    }\n}\n\nVMA_CALL_PRE VkBool32 VMA_CALL_POST vmaIsVirtualBlockEmpty(VmaVirtualBlock VMA_NOT_NULL virtualBlock)\n{\n    VMA_ASSERT(virtualBlock != VK_NULL_HANDLE);\n    VMA_DEBUG_LOG(\"vmaIsVirtualBlockEmpty\");\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK;\n    return virtualBlock->IsEmpty() ? VK_TRUE : VK_FALSE;\n}\n\nVMA_CALL_PRE void VMA_CALL_POST vmaGetVirtualAllocationInfo(VmaVirtualBlock VMA_NOT_NULL virtualBlock,\n    VkDeviceSize offset, VmaVirtualAllocationInfo* VMA_NOT_NULL pVirtualAllocInfo)\n{\n    VMA_ASSERT(virtualBlock != VK_NULL_HANDLE && pVirtualAllocInfo != VMA_NULL);\n    VMA_DEBUG_LOG(\"vmaGetVirtualAllocationInfo\");\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK;\n    virtualBlock->GetAllocationInfo(offset, *pVirtualAllocInfo);\n}\n\nVMA_CALL_PRE VkResult VMA_CALL_POST vmaVirtualAllocate(VmaVirtualBlock VMA_NOT_NULL virtualBlock,\n    const VmaVirtualAllocationCreateInfo* VMA_NOT_NULL pCreateInfo, VkDeviceSize* VMA_NOT_NULL pOffset)\n{\n    VMA_ASSERT(virtualBlock != VK_NULL_HANDLE && pCreateInfo != VMA_NULL && pOffset != VMA_NULL);\n    VMA_DEBUG_LOG(\"vmaVirtualAllocate\");\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK;\n    return virtualBlock->Allocate(*pCreateInfo, *pOffset);\n}\n\nVMA_CALL_PRE void VMA_CALL_POST vmaVirtualFree(VmaVirtualBlock VMA_NOT_NULL virtualBlock, VkDeviceSize offset)\n{\n    VMA_ASSERT(virtualBlock != VK_NULL_HANDLE);\n    VMA_DEBUG_LOG(\"vmaVirtualFree\");\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK;\n    virtualBlock->Free(offset);\n}\n\nVMA_CALL_PRE void VMA_CALL_POST vmaClearVirtualBlock(VmaVirtualBlock VMA_NOT_NULL virtualBlock)\n{\n    VMA_ASSERT(virtualBlock != VK_NULL_HANDLE);\n    VMA_DEBUG_LOG(\"vmaClearVirtualBlock\");\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK;\n    virtualBlock->Clear();\n}\n\nVMA_CALL_PRE void VMA_CALL_POST vmaSetVirtualAllocationUserData(VmaVirtualBlock VMA_NOT_NULL virtualBlock,\n    VkDeviceSize offset, void* VMA_NULLABLE pUserData)\n{\n    VMA_ASSERT(virtualBlock != VK_NULL_HANDLE);\n    VMA_DEBUG_LOG(\"vmaSetVirtualAllocationUserData\");\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK;\n    virtualBlock->SetAllocationUserData(offset, pUserData);\n}\n\nVMA_CALL_PRE void VMA_CALL_POST vmaCalculateVirtualBlockStats(VmaVirtualBlock VMA_NOT_NULL virtualBlock,\n    VmaStatInfo* VMA_NOT_NULL pStatInfo)\n{\n    VMA_ASSERT(virtualBlock != VK_NULL_HANDLE && pStatInfo != VMA_NULL);\n    VMA_DEBUG_LOG(\"vmaCalculateVirtualBlockStats\");\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK;\n    virtualBlock->CalculateStats(*pStatInfo);\n}\n\n#if VMA_STATS_STRING_ENABLED\n\nVMA_CALL_PRE void VMA_CALL_POST vmaBuildVirtualBlockStatsString(VmaVirtualBlock VMA_NOT_NULL virtualBlock,\n    char* VMA_NULLABLE * VMA_NOT_NULL ppStatsString, VkBool32 detailedMap)\n{\n    VMA_ASSERT(virtualBlock != VK_NULL_HANDLE && ppStatsString != VMA_NULL);\n    VMA_DEBUG_GLOBAL_MUTEX_LOCK;\n    const VkAllocationCallbacks* allocationCallbacks = virtualBlock->GetAllocationCallbacks();\n    VmaStringBuilder sb(allocationCallbacks);\n    virtualBlock->BuildStatsString(detailedMap != VK_FALSE, sb);\n    *ppStatsString = VmaCreateStringCopy(allocationCallbacks, sb.GetData(), sb.GetLength());\n}\n\n#endif // #if VMA_STATS_STRING_ENABLED\n\nVMA_CALL_PRE void VMA_CALL_POST vmaFreeVirtualBlockStatsString(VmaVirtualBlock VMA_NOT_NULL virtualBlock,\n    char* VMA_NULLABLE pStatsString)\n{\n    if(pStatsString != VMA_NULL)\n    {\n        VMA_ASSERT(virtualBlock != VK_NULL_HANDLE);\n        VMA_DEBUG_GLOBAL_MUTEX_LOCK;\n        VmaFreeString(virtualBlock->GetAllocationCallbacks(), pStatsString);\n    }\n}\n\n#endif // #ifdef VMA_IMPLEMENTATION\n\n/**\n\\page quick_start Quick start\n\n\\section quick_start_project_setup Project setup\n\nVulkan Memory Allocator comes in form of a \"stb-style\" single header file.\nYou don't need to build it as a separate library project.\nYou can add this file directly to your project and submit it to code repository next to your other source files.\n\n\"Single header\" doesn't mean that everything is contained in C/C++ declarations,\nlike it tends to be in case of inline functions or C++ templates.\nIt means that implementation is bundled with interface in a single file and needs to be extracted using preprocessor macro.\nIf you don't do it properly, you will get linker errors.\n\nTo do it properly:\n\n-# Include \"vk_mem_alloc.h\" file in each CPP file where you want to use the library.\n   This includes declarations of all members of the library.\n-# In exactly one CPP file define following macro before this include.\n   It enables also internal definitions.\n\n\\code\n#define VMA_IMPLEMENTATION\n#include \"vk_mem_alloc.h\"\n\\endcode\n\nIt may be a good idea to create dedicated CPP file just for this purpose.\n\nNote on language: This library is written in C++, but has C-compatible interface.\nThus you can include and use vk_mem_alloc.h in C or C++ code, but full\nimplementation with `VMA_IMPLEMENTATION` macro must be compiled as C++, NOT as C.\n\nPlease note that this library includes header `<vulkan/vulkan.h>`, which in turn\nincludes `<windows.h>` on Windows. If you need some specific macros defined\nbefore including these headers (like `WIN32_LEAN_AND_MEAN` or\n`WINVER` for Windows, `VK_USE_PLATFORM_WIN32_KHR` for Vulkan), you must define\nthem before every `#include` of this library.\n\nYou may need to configure the way you import Vulkan functions.\n\n- By default, VMA assumes you you link statically with Vulkan API. If this is not the case,\n  `#define VMA_STATIC_VULKAN_FUNCTIONS 0` before `#include` of the VMA implementation and use another way.\n- You can `#define VMA_DYNAMIC_VULKAN_FUNCTIONS 1` and pass only pointers to `vkGetInstanceProcAddr` and\n  `vkGetDeviceProcAddr` functions through VmaAllocatorCreateInfo::pVulkanFunctions.\n  All the remaining Vulkan functions will be fetched automatically.\n- Finally, you can provide your own pointers to all Vulkan functions needed by VMA using structure member\n  VmaAllocatorCreateInfo::pVulkanFunctions, if you fetched them in some custom way e.g. using some loader like [Volk](https://github.com/zeux/volk).\n\n\n\\section quick_start_initialization Initialization\n\nAt program startup:\n\n-# Initialize Vulkan to have `VkPhysicalDevice`, `VkDevice` and `VkInstance` object.\n-# Fill VmaAllocatorCreateInfo structure and create #VmaAllocator object by\n   calling vmaCreateAllocator().\n\n\\code\nVmaAllocatorCreateInfo allocatorInfo = {};\nallocatorInfo.vulkanApiVersion = VK_API_VERSION_1_2;\nallocatorInfo.physicalDevice = physicalDevice;\nallocatorInfo.device = device;\nallocatorInfo.instance = instance;\n\nVmaAllocator allocator;\nvmaCreateAllocator(&allocatorInfo, &allocator);\n\\endcode\n\nOnly members `physicalDevice`, `device`, `instance` are required.\nHowever, you should inform the library which Vulkan version do you use by setting\nVmaAllocatorCreateInfo::vulkanApiVersion and which extensions did you enable\nby setting VmaAllocatorCreateInfo::flags (like #VMA_ALLOCATOR_CREATE_BUFFER_DEVICE_ADDRESS_BIT for VK_KHR_buffer_device_address).\nOtherwise, VMA would use only features of Vulkan 1.0 core with no extensions.\n\n\n\\section quick_start_resource_allocation Resource allocation\n\nWhen you want to create a buffer or image:\n\n-# Fill `VkBufferCreateInfo` / `VkImageCreateInfo` structure.\n-# Fill VmaAllocationCreateInfo structure.\n-# Call vmaCreateBuffer() / vmaCreateImage() to get `VkBuffer`/`VkImage` with memory\n   already allocated and bound to it.\n\n\\code\nVkBufferCreateInfo bufferInfo = { VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO };\nbufferInfo.size = 65536;\nbufferInfo.usage = VK_BUFFER_USAGE_VERTEX_BUFFER_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT;\n\nVmaAllocationCreateInfo allocInfo = {};\nallocInfo.usage = VMA_MEMORY_USAGE_GPU_ONLY;\n\nVkBuffer buffer;\nVmaAllocation allocation;\nvmaCreateBuffer(allocator, &bufferInfo, &allocInfo, &buffer, &allocation, nullptr);\n\\endcode\n\nDon't forget to destroy your objects when no longer needed:\n\n\\code\nvmaDestroyBuffer(allocator, buffer, allocation);\nvmaDestroyAllocator(allocator);\n\\endcode\n\n\n\\page choosing_memory_type Choosing memory type\n\nPhysical devices in Vulkan support various combinations of memory heaps and\ntypes. Help with choosing correct and optimal memory type for your specific\nresource is one of the key features of this library. You can use it by filling\nappropriate members of VmaAllocationCreateInfo structure, as described below.\nYou can also combine multiple methods.\n\n-# If you just want to find memory type index that meets your requirements, you\n   can use function: vmaFindMemoryTypeIndex(), vmaFindMemoryTypeIndexForBufferInfo(),\n   vmaFindMemoryTypeIndexForImageInfo().\n-# If you want to allocate a region of device memory without association with any\n   specific image or buffer, you can use function vmaAllocateMemory(). Usage of\n   this function is not recommended and usually not needed.\n   vmaAllocateMemoryPages() function is also provided for creating multiple allocations at once,\n   which may be useful for sparse binding.\n-# If you already have a buffer or an image created, you want to allocate memory\n   for it and then you will bind it yourself, you can use function\n   vmaAllocateMemoryForBuffer(), vmaAllocateMemoryForImage().\n   For binding you should use functions: vmaBindBufferMemory(), vmaBindImageMemory()\n   or their extended versions: vmaBindBufferMemory2(), vmaBindImageMemory2().\n-# If you want to create a buffer or an image, allocate memory for it and bind\n   them together, all in one call, you can use function vmaCreateBuffer(),\n   vmaCreateImage(). This is the easiest and recommended way to use this library.\n\nWhen using 3. or 4., the library internally queries Vulkan for memory types\nsupported for that buffer or image (function `vkGetBufferMemoryRequirements()`)\nand uses only one of these types.\n\nIf no memory type can be found that meets all the requirements, these functions\nreturn `VK_ERROR_FEATURE_NOT_PRESENT`.\n\nYou can leave VmaAllocationCreateInfo structure completely filled with zeros.\nIt means no requirements are specified for memory type.\nIt is valid, although not very useful.\n\n\\section choosing_memory_type_usage Usage\n\nThe easiest way to specify memory requirements is to fill member\nVmaAllocationCreateInfo::usage using one of the values of enum #VmaMemoryUsage.\nIt defines high level, common usage types.\nFor more details, see description of this enum.\n\nFor example, if you want to create a uniform buffer that will be filled using\ntransfer only once or infrequently and used for rendering every frame, you can\ndo it using following code:\n\n\\code\nVkBufferCreateInfo bufferInfo = { VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO };\nbufferInfo.size = 65536;\nbufferInfo.usage = VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT;\n\nVmaAllocationCreateInfo allocInfo = {};\nallocInfo.usage = VMA_MEMORY_USAGE_GPU_ONLY;\n\nVkBuffer buffer;\nVmaAllocation allocation;\nvmaCreateBuffer(allocator, &bufferInfo, &allocInfo, &buffer, &allocation, nullptr);\n\\endcode\n\n\\section choosing_memory_type_required_preferred_flags Required and preferred flags\n\nYou can specify more detailed requirements by filling members\nVmaAllocationCreateInfo::requiredFlags and VmaAllocationCreateInfo::preferredFlags\nwith a combination of bits from enum `VkMemoryPropertyFlags`. For example,\nif you want to create a buffer that will be persistently mapped on host (so it\nmust be `HOST_VISIBLE`) and preferably will also be `HOST_COHERENT` and `HOST_CACHED`,\nuse following code:\n\n\\code\nVmaAllocationCreateInfo allocInfo = {};\nallocInfo.requiredFlags = VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT;\nallocInfo.preferredFlags = VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT;\nallocInfo.flags = VMA_ALLOCATION_CREATE_MAPPED_BIT;\n\nVkBuffer buffer;\nVmaAllocation allocation;\nvmaCreateBuffer(allocator, &bufferInfo, &allocInfo, &buffer, &allocation, nullptr);\n\\endcode\n\nA memory type is chosen that has all the required flags and as many preferred\nflags set as possible.\n\nIf you use VmaAllocationCreateInfo::usage, it is just internally converted to\na set of required and preferred flags.\n\n\\section choosing_memory_type_explicit_memory_types Explicit memory types\n\nIf you inspected memory types available on the physical device and you have\na preference for memory types that you want to use, you can fill member\nVmaAllocationCreateInfo::memoryTypeBits. It is a bit mask, where each bit set\nmeans that a memory type with that index is allowed to be used for the\nallocation. Special value 0, just like `UINT32_MAX`, means there are no\nrestrictions to memory type index.\n\nPlease note that this member is NOT just a memory type index.\nStill you can use it to choose just one, specific memory type.\nFor example, if you already determined that your buffer should be created in\nmemory type 2, use following code:\n\n\\code\nuint32_t memoryTypeIndex = 2;\n\nVmaAllocationCreateInfo allocInfo = {};\nallocInfo.memoryTypeBits = 1u << memoryTypeIndex;\n\nVkBuffer buffer;\nVmaAllocation allocation;\nvmaCreateBuffer(allocator, &bufferInfo, &allocInfo, &buffer, &allocation, nullptr);\n\\endcode\n\n\n\\section choosing_memory_type_custom_memory_pools Custom memory pools\n\nIf you allocate from custom memory pool, all the ways of specifying memory\nrequirements described above are not applicable and the aforementioned members\nof VmaAllocationCreateInfo structure are ignored. Memory type is selected\nexplicitly when creating the pool and then used to make all the allocations from\nthat pool. For further details, see \\ref custom_memory_pools.\n\n\\section choosing_memory_type_dedicated_allocations Dedicated allocations\n\nMemory for allocations is reserved out of larger block of `VkDeviceMemory`\nallocated from Vulkan internally. That is the main feature of this whole library.\nYou can still request a separate memory block to be created for an allocation,\njust like you would do in a trivial solution without using any allocator.\nIn that case, a buffer or image is always bound to that memory at offset 0.\nThis is called a \"dedicated allocation\".\nYou can explicitly request it by using flag #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.\nThe library can also internally decide to use dedicated allocation in some cases, e.g.:\n\n- When the size of the allocation is large.\n- When [VK_KHR_dedicated_allocation](@ref vk_khr_dedicated_allocation) extension is enabled\n  and it reports that dedicated allocation is required or recommended for the resource.\n- When allocation of next big memory block fails due to not enough device memory,\n  but allocation with the exact requested size succeeds.\n\n\n\\page memory_mapping Memory mapping\n\nTo \"map memory\" in Vulkan means to obtain a CPU pointer to `VkDeviceMemory`,\nto be able to read from it or write to it in CPU code.\nMapping is possible only of memory allocated from a memory type that has\n`VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT` flag.\nFunctions `vkMapMemory()`, `vkUnmapMemory()` are designed for this purpose.\nYou can use them directly with memory allocated by this library,\nbut it is not recommended because of following issue:\nMapping the same `VkDeviceMemory` block multiple times is illegal - only one mapping at a time is allowed.\nThis includes mapping disjoint regions. Mapping is not reference-counted internally by Vulkan.\nBecause of this, Vulkan Memory Allocator provides following facilities:\n\n\\section memory_mapping_mapping_functions Mapping functions\n\nThe library provides following functions for mapping of a specific #VmaAllocation: vmaMapMemory(), vmaUnmapMemory().\nThey are safer and more convenient to use than standard Vulkan functions.\nYou can map an allocation multiple times simultaneously - mapping is reference-counted internally.\nYou can also map different allocations simultaneously regardless of whether they use the same `VkDeviceMemory` block.\nThe way it is implemented is that the library always maps entire memory block, not just region of the allocation.\nFor further details, see description of vmaMapMemory() function.\nExample:\n\n\\code\n// Having these objects initialized:\n\nstruct ConstantBuffer\n{\n    ...\n};\nConstantBuffer constantBufferData;\n\nVmaAllocator allocator;\nVkBuffer constantBuffer;\nVmaAllocation constantBufferAllocation;\n\n// You can map and fill your buffer using following code:\n\nvoid* mappedData;\nvmaMapMemory(allocator, constantBufferAllocation, &mappedData);\nmemcpy(mappedData, &constantBufferData, sizeof(constantBufferData));\nvmaUnmapMemory(allocator, constantBufferAllocation);\n\\endcode\n\nWhen mapping, you may see a warning from Vulkan validation layer similar to this one:\n\n<i>Mapping an image with layout VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL can result in undefined behavior if this memory is used by the device. Only GENERAL or PREINITIALIZED should be used.</i>\n\nIt happens because the library maps entire `VkDeviceMemory` block, where different\ntypes of images and buffers may end up together, especially on GPUs with unified memory like Intel.\nYou can safely ignore it if you are sure you access only memory of the intended\nobject that you wanted to map.\n\n\n\\section memory_mapping_persistently_mapped_memory Persistently mapped memory\n\nKepping your memory persistently mapped is generally OK in Vulkan.\nYou don't need to unmap it before using its data on the GPU.\nThe library provides a special feature designed for that:\nAllocations made with #VMA_ALLOCATION_CREATE_MAPPED_BIT flag set in\nVmaAllocationCreateInfo::flags stay mapped all the time,\nso you can just access CPU pointer to it any time\nwithout a need to call any \"map\" or \"unmap\" function.\nExample:\n\n\\code\nVkBufferCreateInfo bufCreateInfo = { VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO };\nbufCreateInfo.size = sizeof(ConstantBuffer);\nbufCreateInfo.usage = VK_BUFFER_USAGE_TRANSFER_SRC_BIT;\n\nVmaAllocationCreateInfo allocCreateInfo = {};\nallocCreateInfo.usage = VMA_MEMORY_USAGE_CPU_ONLY;\nallocCreateInfo.flags = VMA_ALLOCATION_CREATE_MAPPED_BIT;\n\nVkBuffer buf;\nVmaAllocation alloc;\nVmaAllocationInfo allocInfo;\nvmaCreateBuffer(allocator, &bufCreateInfo, &allocCreateInfo, &buf, &alloc, &allocInfo);\n\n// Buffer is already mapped. You can access its memory.\nmemcpy(allocInfo.pMappedData, &constantBufferData, sizeof(constantBufferData));\n\\endcode\n\nThere are some exceptions though, when you should consider mapping memory only for a short period of time:\n\n- When operating system is Windows 7 or 8.x (Windows 10 is not affected because it uses WDDM2),\n  device is discrete AMD GPU,\n  and memory type is the special 256 MiB pool of `DEVICE_LOCAL + HOST_VISIBLE` memory\n  (selected when you use #VMA_MEMORY_USAGE_CPU_TO_GPU),\n  then whenever a memory block allocated from this memory type stays mapped\n  for the time of any call to `vkQueueSubmit()` or `vkQueuePresentKHR()`, this\n  block is migrated by WDDM to system RAM, which degrades performance. It doesn't\n  matter if that particular memory block is actually used by the command buffer\n  being submitted.\n- Keeping many large memory blocks mapped may impact performance or stability of some debugging tools.\n\n\\section memory_mapping_cache_control Cache flush and invalidate\n\nMemory in Vulkan doesn't need to be unmapped before using it on GPU,\nbut unless a memory types has `VK_MEMORY_PROPERTY_HOST_COHERENT_BIT` flag set,\nyou need to manually **invalidate** cache before reading of mapped pointer\nand **flush** cache after writing to mapped pointer.\nMap/unmap operations don't do that automatically.\nVulkan provides following functions for this purpose `vkFlushMappedMemoryRanges()`,\n`vkInvalidateMappedMemoryRanges()`, but this library provides more convenient\nfunctions that refer to given allocation object: vmaFlushAllocation(),\nvmaInvalidateAllocation(),\nor multiple objects at once: vmaFlushAllocations(), vmaInvalidateAllocations().\n\nRegions of memory specified for flush/invalidate must be aligned to\n`VkPhysicalDeviceLimits::nonCoherentAtomSize`. This is automatically ensured by the library.\nIn any memory type that is `HOST_VISIBLE` but not `HOST_COHERENT`, all allocations\nwithin blocks are aligned to this value, so their offsets are always multiply of\n`nonCoherentAtomSize` and two different allocations never share same \"line\" of this size.\n\nPlease note that memory allocated with #VMA_MEMORY_USAGE_CPU_ONLY is guaranteed to be `HOST_COHERENT`.\n\nAlso, Windows drivers from all 3 **PC** GPU vendors (AMD, Intel, NVIDIA)\ncurrently provide `HOST_COHERENT` flag on all memory types that are\n`HOST_VISIBLE`, so on this platform you may not need to bother.\n\n\\section memory_mapping_finding_if_memory_mappable Finding out if memory is mappable\n\nIt may happen that your allocation ends up in memory that is `HOST_VISIBLE` (available for mapping)\ndespite it wasn't explicitly requested.\nFor example, application may work on integrated graphics with unified memory (like Intel) or\nallocation from video memory might have failed, so the library chose system memory as fallback.\n\nYou can detect this case and map such allocation to access its memory on CPU directly,\ninstead of launching a transfer operation.\nIn order to do that: call vmaGetAllocationMemoryProperties()\nand look for `VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT` flag.\n\n\\code\nVkBufferCreateInfo bufCreateInfo = { VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO };\nbufCreateInfo.size = sizeof(ConstantBuffer);\nbufCreateInfo.usage = VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT;\n\nVmaAllocationCreateInfo allocCreateInfo = {};\nallocCreateInfo.usage = VMA_MEMORY_USAGE_GPU_ONLY;\nallocCreateInfo.preferredFlags = VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT;\n\nVkBuffer buf;\nVmaAllocation alloc;\nvmaCreateBuffer(allocator, &bufCreateInfo, &allocCreateInfo, &buf, &alloc, nullptr);\n\nVkMemoryPropertyFlags memFlags;\nvmaGetAllocationMemoryProperties(allocator, alloc, &memFlags);\nif((memFlags & VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT) != 0)\n{\n    // Allocation ended up in mappable memory. You can map it and access it directly.\n    void* mappedData;\n    vmaMapMemory(allocator, alloc, &mappedData);\n    memcpy(mappedData, &constantBufferData, sizeof(constantBufferData));\n    vmaUnmapMemory(allocator, alloc);\n}\nelse\n{\n    // Allocation ended up in non-mappable memory.\n    // You need to create CPU-side buffer in VMA_MEMORY_USAGE_CPU_ONLY and make a transfer.\n}\n\\endcode\n\nYou can even use #VMA_ALLOCATION_CREATE_MAPPED_BIT flag while creating allocations\nthat are not necessarily `HOST_VISIBLE` (e.g. using #VMA_MEMORY_USAGE_GPU_ONLY).\nIf the allocation ends up in memory type that is `HOST_VISIBLE`, it will be persistently mapped and you can use it directly.\nIf not, the flag is just ignored.\nExample:\n\n\\code\nVkBufferCreateInfo bufCreateInfo = { VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO };\nbufCreateInfo.size = sizeof(ConstantBuffer);\nbufCreateInfo.usage = VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT;\n\nVmaAllocationCreateInfo allocCreateInfo = {};\nallocCreateInfo.usage = VMA_MEMORY_USAGE_GPU_ONLY;\nallocCreateInfo.flags = VMA_ALLOCATION_CREATE_MAPPED_BIT;\n\nVkBuffer buf;\nVmaAllocation alloc;\nVmaAllocationInfo allocInfo;\nvmaCreateBuffer(allocator, &bufCreateInfo, &allocCreateInfo, &buf, &alloc, &allocInfo);\n\nif(allocInfo.pMappedData != nullptr)\n{\n    // Allocation ended up in mappable memory.\n    // It is persistently mapped. You can access it directly.\n    memcpy(allocInfo.pMappedData, &constantBufferData, sizeof(constantBufferData));\n}\nelse\n{\n    // Allocation ended up in non-mappable memory.\n    // You need to create CPU-side buffer in VMA_MEMORY_USAGE_CPU_ONLY and make a transfer.\n}\n\\endcode\n\n\n\\page staying_within_budget Staying within budget\n\nWhen developing a graphics-intensive game or program, it is important to avoid allocating\nmore GPU memory than it is physically available. When the memory is over-committed,\nvarious bad things can happen, depending on the specific GPU, graphics driver, and\noperating system:\n\n- It may just work without any problems.\n- The application may slow down because some memory blocks are moved to system RAM\n  and the GPU has to access them through PCI Express bus.\n- A new allocation may take very long time to complete, even few seconds, and possibly\n  freeze entire system.\n- The new allocation may fail with `VK_ERROR_OUT_OF_DEVICE_MEMORY`.\n- It may even result in GPU crash (TDR), observed as `VK_ERROR_DEVICE_LOST`\n  returned somewhere later.\n\n\\section staying_within_budget_querying_for_budget Querying for budget\n\nTo query for current memory usage and available budget, use function vmaGetBudget().\nReturned structure #VmaBudget contains quantities expressed in bytes, per Vulkan memory heap.\n\nPlease note that this function returns different information and works faster than\nvmaCalculateStats(). vmaGetBudget() can be called every frame or even before every\nallocation, while vmaCalculateStats() is intended to be used rarely,\nonly to obtain statistical information, e.g. for debugging purposes.\n\nIt is recommended to use <b>VK_EXT_memory_budget</b> device extension to obtain information\nabout the budget from Vulkan device. VMA is able to use this extension automatically.\nWhen not enabled, the allocator behaves same way, but then it estimates current usage\nand available budget based on its internal information and Vulkan memory heap sizes,\nwhich may be less precise. In order to use this extension:\n\n1. Make sure extensions VK_EXT_memory_budget and VK_KHR_get_physical_device_properties2\n   required by it are available and enable them. Please note that the first is a device\n   extension and the second is instance extension!\n2. Use flag #VMA_ALLOCATOR_CREATE_EXT_MEMORY_BUDGET_BIT when creating #VmaAllocator object.\n3. Make sure to call vmaSetCurrentFrameIndex() every frame. Budget is queried from\n   Vulkan inside of it to avoid overhead of querying it with every allocation.\n\n\\section staying_within_budget_controlling_memory_usage Controlling memory usage\n\nThere are many ways in which you can try to stay within the budget.\n\nFirst, when making new allocation requires allocating a new memory block, the library\ntries not to exceed the budget automatically. If a block with default recommended size\n(e.g. 256 MB) would go over budget, a smaller block is allocated, possibly even\ndedicated memory for just this resource.\n\nIf the size of the requested resource plus current memory usage is more than the\nbudget, by default the library still tries to create it, leaving it to the Vulkan\nimplementation whether the allocation succeeds or fails. You can change this behavior\nby using #VMA_ALLOCATION_CREATE_WITHIN_BUDGET_BIT flag. With it, the allocation is\nnot made if it would exceed the budget or if the budget is already exceeded.\nSome other allocations become lost instead to make room for it, if the mechanism of\n[lost allocations](@ref lost_allocations) is used.\nIf that is not possible, the allocation fails with `VK_ERROR_OUT_OF_DEVICE_MEMORY`.\nExample usage pattern may be to pass the #VMA_ALLOCATION_CREATE_WITHIN_BUDGET_BIT flag\nwhen creating resources that are not essential for the application (e.g. the texture\nof a specific object) and not to pass it when creating critically important resources\n(e.g. render targets).\n\nFinally, you can also use #VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT flag to make sure\na new allocation is created only when it fits inside one of the existing memory blocks.\nIf it would require to allocate a new block, if fails instead with `VK_ERROR_OUT_OF_DEVICE_MEMORY`.\nThis also ensures that the function call is very fast because it never goes to Vulkan\nto obtain a new block.\n\nPlease note that creating \\ref custom_memory_pools with VmaPoolCreateInfo::minBlockCount\nset to more than 0 will try to allocate memory blocks without checking whether they\nfit within budget.\n\n\n\\page resource_aliasing Resource aliasing (overlap)\n\nNew explicit graphics APIs (Vulkan and Direct3D 12), thanks to manual memory\nmanagement, give an opportunity to alias (overlap) multiple resources in the\nsame region of memory - a feature not available in the old APIs (Direct3D 11, OpenGL).\nIt can be useful to save video memory, but it must be used with caution.\n\nFor example, if you know the flow of your whole render frame in advance, you\nare going to use some intermediate textures or buffers only during a small range of render passes,\nand you know these ranges don't overlap in time, you can bind these resources to\nthe same place in memory, even if they have completely different parameters (width, height, format etc.).\n\n![Resource aliasing (overlap)](../gfx/Aliasing.png)\n\nSuch scenario is possible using VMA, but you need to create your images manually.\nThen you need to calculate parameters of an allocation to be made using formula:\n\n- allocation size = max(size of each image)\n- allocation alignment = max(alignment of each image)\n- allocation memoryTypeBits = bitwise AND(memoryTypeBits of each image)\n\nFollowing example shows two different images bound to the same place in memory,\nallocated to fit largest of them.\n\n\\code\n// A 512x512 texture to be sampled.\nVkImageCreateInfo img1CreateInfo = { VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO };\nimg1CreateInfo.imageType = VK_IMAGE_TYPE_2D;\nimg1CreateInfo.extent.width = 512;\nimg1CreateInfo.extent.height = 512;\nimg1CreateInfo.extent.depth = 1;\nimg1CreateInfo.mipLevels = 10;\nimg1CreateInfo.arrayLayers = 1;\nimg1CreateInfo.format = VK_FORMAT_R8G8B8A8_SRGB;\nimg1CreateInfo.tiling = VK_IMAGE_TILING_OPTIMAL;\nimg1CreateInfo.initialLayout = VK_IMAGE_LAYOUT_UNDEFINED;\nimg1CreateInfo.usage = VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT;\nimg1CreateInfo.samples = VK_SAMPLE_COUNT_1_BIT;\n\n// A full screen texture to be used as color attachment.\nVkImageCreateInfo img2CreateInfo = { VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO };\nimg2CreateInfo.imageType = VK_IMAGE_TYPE_2D;\nimg2CreateInfo.extent.width = 1920;\nimg2CreateInfo.extent.height = 1080;\nimg2CreateInfo.extent.depth = 1;\nimg2CreateInfo.mipLevels = 1;\nimg2CreateInfo.arrayLayers = 1;\nimg2CreateInfo.format = VK_FORMAT_R8G8B8A8_UNORM;\nimg2CreateInfo.tiling = VK_IMAGE_TILING_OPTIMAL;\nimg2CreateInfo.initialLayout = VK_IMAGE_LAYOUT_UNDEFINED;\nimg2CreateInfo.usage = VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT;\nimg2CreateInfo.samples = VK_SAMPLE_COUNT_1_BIT;\n\nVkImage img1;\nres = vkCreateImage(device, &img1CreateInfo, nullptr, &img1);\nVkImage img2;\nres = vkCreateImage(device, &img2CreateInfo, nullptr, &img2);\n\nVkMemoryRequirements img1MemReq;\nvkGetImageMemoryRequirements(device, img1, &img1MemReq);\nVkMemoryRequirements img2MemReq;\nvkGetImageMemoryRequirements(device, img2, &img2MemReq);\n\nVkMemoryRequirements finalMemReq = {};\nfinalMemReq.size = std::max(img1MemReq.size, img2MemReq.size);\nfinalMemReq.alignment = std::max(img1MemReq.alignment, img2MemReq.alignment);\nfinalMemReq.memoryTypeBits = img1MemReq.memoryTypeBits & img2MemReq.memoryTypeBits;\n// Validate if(finalMemReq.memoryTypeBits != 0)\n\nVmaAllocationCreateInfo allocCreateInfo = {};\nallocCreateInfo.usage = VMA_MEMORY_USAGE_GPU_ONLY;\n\nVmaAllocation alloc;\nres = vmaAllocateMemory(allocator, &finalMemReq, &allocCreateInfo, &alloc, nullptr);\n\nres = vmaBindImageMemory(allocator, alloc, img1);\nres = vmaBindImageMemory(allocator, alloc, img2);\n\n// You can use img1, img2 here, but not at the same time!\n\nvmaFreeMemory(allocator, alloc);\nvkDestroyImage(allocator, img2, nullptr);\nvkDestroyImage(allocator, img1, nullptr);\n\\endcode\n\nRemember that using resources that alias in memory requires proper synchronization.\nYou need to issue a memory barrier to make sure commands that use `img1` and `img2`\ndon't overlap on GPU timeline.\nYou also need to treat a resource after aliasing as uninitialized - containing garbage data.\nFor example, if you use `img1` and then want to use `img2`, you need to issue\nan image memory barrier for `img2` with `oldLayout` = `VK_IMAGE_LAYOUT_UNDEFINED`.\n\nAdditional considerations:\n\n- Vulkan also allows to interpret contents of memory between aliasing resources consistently in some cases.\nSee chapter 11.8. \"Memory Aliasing\" of Vulkan specification or `VK_IMAGE_CREATE_ALIAS_BIT` flag.\n- You can create more complex layout where different images and buffers are bound\nat different offsets inside one large allocation. For example, one can imagine\na big texture used in some render passes, aliasing with a set of many small buffers\nused between in some further passes. To bind a resource at non-zero offset of an allocation,\nuse vmaBindBufferMemory2() / vmaBindImageMemory2().\n- Before allocating memory for the resources you want to alias, check `memoryTypeBits`\nreturned in memory requirements of each resource to make sure the bits overlap.\nSome GPUs may expose multiple memory types suitable e.g. only for buffers or\nimages with `COLOR_ATTACHMENT` usage, so the sets of memory types supported by your\nresources may be disjoint. Aliasing them is not possible in that case.\n\n\n\\page custom_memory_pools Custom memory pools\n\nA memory pool contains a number of `VkDeviceMemory` blocks.\nThe library automatically creates and manages default pool for each memory type available on the device.\nDefault memory pool automatically grows in size.\nSize of allocated blocks is also variable and managed automatically.\n\nYou can create custom pool and allocate memory out of it.\nIt can be useful if you want to:\n\n- Keep certain kind of allocations separate from others.\n- Enforce particular, fixed size of Vulkan memory blocks.\n- Limit maximum amount of Vulkan memory allocated for that pool.\n- Reserve minimum or fixed amount of Vulkan memory always preallocated for that pool.\n- Use extra parameters for a set of your allocations that are available in #VmaPoolCreateInfo but not in\n  #VmaAllocationCreateInfo - e.g., custom minimum alignment, custom `pNext` chain.\n\nTo use custom memory pools:\n\n-# Fill VmaPoolCreateInfo structure.\n-# Call vmaCreatePool() to obtain #VmaPool handle.\n-# When making an allocation, set VmaAllocationCreateInfo::pool to this handle.\n   You don't need to specify any other parameters of this structure, like `usage`.\n\nExample:\n\n\\code\n// Create a pool that can have at most 2 blocks, 128 MiB each.\nVmaPoolCreateInfo poolCreateInfo = {};\npoolCreateInfo.memoryTypeIndex = ...\npoolCreateInfo.blockSize = 128ull * 1024 * 1024;\npoolCreateInfo.maxBlockCount = 2;\n\nVmaPool pool;\nvmaCreatePool(allocator, &poolCreateInfo, &pool);\n\n// Allocate a buffer out of it.\nVkBufferCreateInfo bufCreateInfo = { VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO };\nbufCreateInfo.size = 1024;\nbufCreateInfo.usage = VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT;\n\nVmaAllocationCreateInfo allocCreateInfo = {};\nallocCreateInfo.pool = pool;\n\nVkBuffer buf;\nVmaAllocation alloc;\nVmaAllocationInfo allocInfo;\nvmaCreateBuffer(allocator, &bufCreateInfo, &allocCreateInfo, &buf, &alloc, &allocInfo);\n\\endcode\n\nYou have to free all allocations made from this pool before destroying it.\n\n\\code\nvmaDestroyBuffer(allocator, buf, alloc);\nvmaDestroyPool(allocator, pool);\n\\endcode\n\n\\section custom_memory_pools_MemTypeIndex Choosing memory type index\n\nWhen creating a pool, you must explicitly specify memory type index.\nTo find the one suitable for your buffers or images, you can use helper functions\nvmaFindMemoryTypeIndexForBufferInfo(), vmaFindMemoryTypeIndexForImageInfo().\nYou need to provide structures with example parameters of buffers or images\nthat you are going to create in that pool.\n\n\\code\nVkBufferCreateInfo exampleBufCreateInfo = { VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO };\nexampleBufCreateInfo.size = 1024; // Whatever.\nexampleBufCreateInfo.usage = VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT; // Change if needed.\n\nVmaAllocationCreateInfo allocCreateInfo = {};\nallocCreateInfo.usage = VMA_MEMORY_USAGE_GPU_ONLY; // Change if needed.\n\nuint32_t memTypeIndex;\nvmaFindMemoryTypeIndexForBufferInfo(allocator, &exampleBufCreateInfo, &allocCreateInfo, &memTypeIndex);\n\nVmaPoolCreateInfo poolCreateInfo = {};\npoolCreateInfo.memoryTypeIndex = memTypeIndex;\n// ...\n\\endcode\n\nWhen creating buffers/images allocated in that pool, provide following parameters:\n\n- `VkBufferCreateInfo`: Prefer to pass same parameters as above.\n  Otherwise you risk creating resources in a memory type that is not suitable for them, which may result in undefined behavior.\n  Using different `VK_BUFFER_USAGE_` flags may work, but you shouldn't create images in a pool intended for buffers\n  or the other way around.\n- VmaAllocationCreateInfo: You don't need to pass same parameters. Fill only `pool` member.\n  Other members are ignored anyway.\n\n\\section linear_algorithm Linear allocation algorithm\n\nEach Vulkan memory block managed by this library has accompanying metadata that\nkeeps track of used and unused regions. By default, the metadata structure and\nalgorithm tries to find best place for new allocations among free regions to\noptimize memory usage. This way you can allocate and free objects in any order.\n\n![Default allocation algorithm](../gfx/Linear_allocator_1_algo_default.png)\n\nSometimes there is a need to use simpler, linear allocation algorithm. You can\ncreate custom pool that uses such algorithm by adding flag\n#VMA_POOL_CREATE_LINEAR_ALGORITHM_BIT to VmaPoolCreateInfo::flags while creating\n#VmaPool object. Then an alternative metadata management is used. It always\ncreates new allocations after last one and doesn't reuse free regions after\nallocations freed in the middle. It results in better allocation performance and\nless memory consumed by metadata.\n\n![Linear allocation algorithm](../gfx/Linear_allocator_2_algo_linear.png)\n\nWith this one flag, you can create a custom pool that can be used in many ways:\nfree-at-once, stack, double stack, and ring buffer. See below for details.\nYou don't need to specify explicitly which of these options you are going to use - it is detected automatically.\n\n\\subsection linear_algorithm_free_at_once Free-at-once\n\nIn a pool that uses linear algorithm, you still need to free all the allocations\nindividually, e.g. by using vmaFreeMemory() or vmaDestroyBuffer(). You can free\nthem in any order. New allocations are always made after last one - free space\nin the middle is not reused. However, when you release all the allocation and\nthe pool becomes empty, allocation starts from the beginning again. This way you\ncan use linear algorithm to speed up creation of allocations that you are going\nto release all at once.\n\n![Free-at-once](../gfx/Linear_allocator_3_free_at_once.png)\n\nThis mode is also available for pools created with VmaPoolCreateInfo::maxBlockCount\nvalue that allows multiple memory blocks.\n\n\\subsection linear_algorithm_stack Stack\n\nWhen you free an allocation that was created last, its space can be reused.\nThanks to this, if you always release allocations in the order opposite to their\ncreation (LIFO - Last In First Out), you can achieve behavior of a stack.\n\n![Stack](../gfx/Linear_allocator_4_stack.png)\n\nThis mode is also available for pools created with VmaPoolCreateInfo::maxBlockCount\nvalue that allows multiple memory blocks.\n\n\\subsection linear_algorithm_double_stack Double stack\n\nThe space reserved by a custom pool with linear algorithm may be used by two\nstacks:\n\n- First, default one, growing up from offset 0.\n- Second, \"upper\" one, growing down from the end towards lower offsets.\n\nTo make allocation from the upper stack, add flag #VMA_ALLOCATION_CREATE_UPPER_ADDRESS_BIT\nto VmaAllocationCreateInfo::flags.\n\n![Double stack](../gfx/Linear_allocator_7_double_stack.png)\n\nDouble stack is available only in pools with one memory block -\nVmaPoolCreateInfo::maxBlockCount must be 1. Otherwise behavior is undefined.\n\nWhen the two stacks' ends meet so there is not enough space between them for a\nnew allocation, such allocation fails with usual\n`VK_ERROR_OUT_OF_DEVICE_MEMORY` error.\n\n\\subsection linear_algorithm_ring_buffer Ring buffer\n\nWhen you free some allocations from the beginning and there is not enough free space\nfor a new one at the end of a pool, allocator's \"cursor\" wraps around to the\nbeginning and starts allocation there. Thanks to this, if you always release\nallocations in the same order as you created them (FIFO - First In First Out),\nyou can achieve behavior of a ring buffer / queue.\n\n![Ring buffer](../gfx/Linear_allocator_5_ring_buffer.png)\n\nPools with linear algorithm support [lost allocations](@ref lost_allocations) when used as ring buffer.\nIf there is not enough free space for a new allocation, but existing allocations\nfrom the front of the queue can become lost, they become lost and the allocation\nsucceeds.\n\n![Ring buffer with lost allocations](../gfx/Linear_allocator_6_ring_buffer_lost.png)\n\nRing buffer is available only in pools with one memory block -\nVmaPoolCreateInfo::maxBlockCount must be 1. Otherwise behavior is undefined.\n\n\\section buddy_algorithm Buddy allocation algorithm\n\nThere is another allocation algorithm that can be used with custom pools, called\n\"buddy\". Its internal data structure is based on a binary tree of blocks, each having\nsize that is a power of two and a half of its parent's size. When you want to\nallocate memory of certain size, a free node in the tree is located. If it is too\nlarge, it is recursively split into two halves (called \"buddies\"). However, if\nrequested allocation size is not a power of two, the size of the allocation is\naligned up to the nearest power of two and the remaining space is wasted. When\ntwo buddy nodes become free, they are merged back into one larger node.\n\n![Buddy allocator](../gfx/Buddy_allocator.png)\n\nThe advantage of buddy allocation algorithm over default algorithm is faster\nallocation and deallocation, as well as smaller external fragmentation. The\ndisadvantage is more wasted space (internal fragmentation).\nFor more information, please search the Internet for \"Buddy memory allocation\" -\nsources that describe this concept in general.\n\nTo use buddy allocation algorithm with a custom pool, add flag\n#VMA_POOL_CREATE_BUDDY_ALGORITHM_BIT to VmaPoolCreateInfo::flags while creating\n#VmaPool object.\n\nSeveral limitations apply to pools that use buddy algorithm:\n\n- It is recommended to use VmaPoolCreateInfo::blockSize that is a power of two.\n  Otherwise, only largest power of two smaller than the size is used for\n  allocations. The remaining space always stays unused.\n- [Margins](@ref debugging_memory_usage_margins) and\n  [corruption detection](@ref debugging_memory_usage_corruption_detection)\n  don't work in such pools.\n- [Lost allocations](@ref lost_allocations) don't work in such pools. You can\n  use them, but they never become lost. Support may be added in the future.\n- [Defragmentation](@ref defragmentation) doesn't work with allocations made from\n  such pool.\n\n\\page defragmentation Defragmentation\n\nInterleaved allocations and deallocations of many objects of varying size can\ncause fragmentation over time, which can lead to a situation where the library is unable\nto find a continuous range of free memory for a new allocation despite there is\nenough free space, just scattered across many small free ranges between existing\nallocations.\n\nTo mitigate this problem, you can use defragmentation feature:\nstructure #VmaDefragmentationInfo2, function vmaDefragmentationBegin(), vmaDefragmentationEnd().\nGiven set of allocations,\nthis function can move them to compact used memory, ensure more continuous free\nspace and possibly also free some `VkDeviceMemory` blocks.\n\nWhat the defragmentation does is:\n\n- Updates #VmaAllocation objects to point to new `VkDeviceMemory` and offset.\n  After allocation has been moved, its VmaAllocationInfo::deviceMemory and/or\n  VmaAllocationInfo::offset changes. You must query them again using\n  vmaGetAllocationInfo() if you need them.\n- Moves actual data in memory.\n\nWhat it doesn't do, so you need to do it yourself:\n\n- Recreate buffers and images that were bound to allocations that were defragmented and\n  bind them with their new places in memory.\n  You must use `vkDestroyBuffer()`, `vkDestroyImage()`,\n  `vkCreateBuffer()`, `vkCreateImage()`, vmaBindBufferMemory(), vmaBindImageMemory()\n  for that purpose and NOT vmaDestroyBuffer(),\n  vmaDestroyImage(), vmaCreateBuffer(), vmaCreateImage(), because you don't need to\n  destroy or create allocation objects!\n- Recreate views and update descriptors that point to these buffers and images.\n\n\\section defragmentation_cpu Defragmenting CPU memory\n\nFollowing example demonstrates how you can run defragmentation on CPU.\nOnly allocations created in memory types that are `HOST_VISIBLE` can be defragmented.\nOthers are ignored.\n\nThe way it works is:\n\n- It temporarily maps entire memory blocks when necessary.\n- It moves data using `memmove()` function.\n\n\\code\n// Given following variables already initialized:\nVkDevice device;\nVmaAllocator allocator;\nstd::vector<VkBuffer> buffers;\nstd::vector<VmaAllocation> allocations;\n\n\nconst uint32_t allocCount = (uint32_t)allocations.size();\nstd::vector<VkBool32> allocationsChanged(allocCount);\n\nVmaDefragmentationInfo2 defragInfo = {};\ndefragInfo.allocationCount = allocCount;\ndefragInfo.pAllocations = allocations.data();\ndefragInfo.pAllocationsChanged = allocationsChanged.data();\ndefragInfo.maxCpuBytesToMove = VK_WHOLE_SIZE; // No limit.\ndefragInfo.maxCpuAllocationsToMove = UINT32_MAX; // No limit.\n\nVmaDefragmentationContext defragCtx;\nvmaDefragmentationBegin(allocator, &defragInfo, nullptr, &defragCtx);\nvmaDefragmentationEnd(allocator, defragCtx);\n\nfor(uint32_t i = 0; i < allocCount; ++i)\n{\n    if(allocationsChanged[i])\n    {\n        // Destroy buffer that is immutably bound to memory region which is no longer valid.\n        vkDestroyBuffer(device, buffers[i], nullptr);\n\n        // Create new buffer with same parameters.\n        VkBufferCreateInfo bufferInfo = ...;\n        vkCreateBuffer(device, &bufferInfo, nullptr, &buffers[i]);\n\n        // You can make dummy call to vkGetBufferMemoryRequirements here to silence validation layer warning.\n\n        // Bind new buffer to new memory region. Data contained in it is already moved.\n        VmaAllocationInfo allocInfo;\n        vmaGetAllocationInfo(allocator, allocations[i], &allocInfo);\n        vmaBindBufferMemory(allocator, allocations[i], buffers[i]);\n    }\n}\n\\endcode\n\nSetting VmaDefragmentationInfo2::pAllocationsChanged is optional.\nThis output array tells whether particular allocation in VmaDefragmentationInfo2::pAllocations at the same index\nhas been modified during defragmentation.\nYou can pass null, but you then need to query every allocation passed to defragmentation\nfor new parameters using vmaGetAllocationInfo() if you might need to recreate and rebind a buffer or image associated with it.\n\nIf you use [Custom memory pools](@ref choosing_memory_type_custom_memory_pools),\nyou can fill VmaDefragmentationInfo2::poolCount and VmaDefragmentationInfo2::pPools\ninstead of VmaDefragmentationInfo2::allocationCount and VmaDefragmentationInfo2::pAllocations\nto defragment all allocations in given pools.\nYou cannot use VmaDefragmentationInfo2::pAllocationsChanged in that case.\nYou can also combine both methods.\n\n\\section defragmentation_gpu Defragmenting GPU memory\n\nIt is also possible to defragment allocations created in memory types that are not `HOST_VISIBLE`.\nTo do that, you need to pass a command buffer that meets requirements as described in\nVmaDefragmentationInfo2::commandBuffer. The way it works is:\n\n- It creates temporary buffers and binds them to entire memory blocks when necessary.\n- It issues `vkCmdCopyBuffer()` to passed command buffer.\n\nExample:\n\n\\code\n// Given following variables already initialized:\nVkDevice device;\nVmaAllocator allocator;\nVkCommandBuffer commandBuffer;\nstd::vector<VkBuffer> buffers;\nstd::vector<VmaAllocation> allocations;\n\n\nconst uint32_t allocCount = (uint32_t)allocations.size();\nstd::vector<VkBool32> allocationsChanged(allocCount);\n\nVkCommandBufferBeginInfo cmdBufBeginInfo = ...;\nvkBeginCommandBuffer(commandBuffer, &cmdBufBeginInfo);\n\nVmaDefragmentationInfo2 defragInfo = {};\ndefragInfo.allocationCount = allocCount;\ndefragInfo.pAllocations = allocations.data();\ndefragInfo.pAllocationsChanged = allocationsChanged.data();\ndefragInfo.maxGpuBytesToMove = VK_WHOLE_SIZE; // Notice it is \"GPU\" this time.\ndefragInfo.maxGpuAllocationsToMove = UINT32_MAX; // Notice it is \"GPU\" this time.\ndefragInfo.commandBuffer = commandBuffer;\n\nVmaDefragmentationContext defragCtx;\nvmaDefragmentationBegin(allocator, &defragInfo, nullptr, &defragCtx);\n\nvkEndCommandBuffer(commandBuffer);\n\n// Submit commandBuffer.\n// Wait for a fence that ensures commandBuffer execution finished.\n\nvmaDefragmentationEnd(allocator, defragCtx);\n\nfor(uint32_t i = 0; i < allocCount; ++i)\n{\n    if(allocationsChanged[i])\n    {\n        // Destroy buffer that is immutably bound to memory region which is no longer valid.\n        vkDestroyBuffer(device, buffers[i], nullptr);\n\n        // Create new buffer with same parameters.\n        VkBufferCreateInfo bufferInfo = ...;\n        vkCreateBuffer(device, &bufferInfo, nullptr, &buffers[i]);\n\n        // You can make dummy call to vkGetBufferMemoryRequirements here to silence validation layer warning.\n\n        // Bind new buffer to new memory region. Data contained in it is already moved.\n        VmaAllocationInfo allocInfo;\n        vmaGetAllocationInfo(allocator, allocations[i], &allocInfo);\n        vmaBindBufferMemory(allocator, allocations[i], buffers[i]);\n    }\n}\n\\endcode\n\nYou can combine these two methods by specifying non-zero `maxGpu*` as well as `maxCpu*` parameters.\nThe library automatically chooses best method to defragment each memory pool.\n\nYou may try not to block your entire program to wait until defragmentation finishes,\nbut do it in the background, as long as you carefully fullfill requirements described\nin function vmaDefragmentationBegin().\n\n\\section defragmentation_additional_notes Additional notes\n\nIt is only legal to defragment allocations bound to:\n\n- buffers\n- images created with `VK_IMAGE_CREATE_ALIAS_BIT`, `VK_IMAGE_TILING_LINEAR`, and\n  being currently in `VK_IMAGE_LAYOUT_GENERAL` or `VK_IMAGE_LAYOUT_PREINITIALIZED`.\n\nDefragmentation of images created with `VK_IMAGE_TILING_OPTIMAL` or in any other\nlayout may give undefined results.\n\nIf you defragment allocations bound to images, new images to be bound to new\nmemory region after defragmentation should be created with `VK_IMAGE_LAYOUT_PREINITIALIZED`\nand then transitioned to their original layout from before defragmentation if\nneeded using an image memory barrier.\n\nWhile using defragmentation, you may experience validation layer warnings, which you just need to ignore.\nSee [Validation layer warnings](@ref general_considerations_validation_layer_warnings).\n\nPlease don't expect memory to be fully compacted after defragmentation.\nAlgorithms inside are based on some heuristics that try to maximize number of Vulkan\nmemory blocks to make totally empty to release them, as well as to maximize continuous\nempty space inside remaining blocks, while minimizing the number and size of allocations that\nneed to be moved. Some fragmentation may still remain - this is normal.\n\n\\section defragmentation_custom_algorithm Writing custom defragmentation algorithm\n\nIf you want to implement your own, custom defragmentation algorithm,\nthere is infrastructure prepared for that,\nbut it is not exposed through the library API - you need to hack its source code.\nHere are steps needed to do this:\n\n-# Main thing you need to do is to define your own class derived from base abstract\n   class `VmaDefragmentationAlgorithm` and implement your version of its pure virtual methods.\n   See definition and comments of this class for details.\n-# Your code needs to interact with device memory block metadata.\n   If you need more access to its data than it is provided by its public interface,\n   declare your new class as a friend class e.g. in class `VmaBlockMetadata_Generic`.\n-# If you want to create a flag that would enable your algorithm or pass some additional\n   flags to configure it, add them to `VmaDefragmentationFlagBits` and use them in\n   VmaDefragmentationInfo2::flags.\n-# Modify function `VmaBlockVectorDefragmentationContext::Begin` to create object\n   of your new class whenever needed.\n\n\n\\page lost_allocations Lost allocations\n\nIf your game oversubscribes video memory, if may work OK in previous-generation\ngraphics APIs (DirectX 9, 10, 11, OpenGL) because resources are automatically\npaged to system RAM. In Vulkan you can't do it because when you run out of\nmemory, an allocation just fails. If you have more data (e.g. textures) that can\nfit into VRAM and you don't need it all at once, you may want to upload them to\nGPU on demand and \"push out\" ones that are not used for a long time to make room\nfor the new ones, effectively using VRAM (or a cartain memory pool) as a form of\ncache. Vulkan Memory Allocator can help you with that by supporting a concept of\n\"lost allocations\".\n\nTo create an allocation that can become lost, include #VMA_ALLOCATION_CREATE_CAN_BECOME_LOST_BIT\nflag in VmaAllocationCreateInfo::flags. Before using a buffer or image bound to\nsuch allocation in every new frame, you need to query it if it is not lost.\nTo check it, call vmaTouchAllocation().\nIf the allocation is lost, you should not use it or buffer/image bound to it.\nYou mustn't forget to destroy this allocation and this buffer/image.\nvmaGetAllocationInfo() can also be used for checking status of the allocation.\nAllocation is lost when returned VmaAllocationInfo::deviceMemory == `VK_NULL_HANDLE`.\n\nTo create an allocation that can make some other allocations lost to make room\nfor it, use #VMA_ALLOCATION_CREATE_CAN_MAKE_OTHER_LOST_BIT flag. You will\nusually use both flags #VMA_ALLOCATION_CREATE_CAN_MAKE_OTHER_LOST_BIT and\n#VMA_ALLOCATION_CREATE_CAN_BECOME_LOST_BIT at the same time.\n\nWarning! Current implementation uses quite naive, brute force algorithm,\nwhich can make allocation calls that use #VMA_ALLOCATION_CREATE_CAN_MAKE_OTHER_LOST_BIT\nflag quite slow. A new, more optimal algorithm and data structure to speed this\nup is planned for the future.\n\n<b>Q: When interleaving creation of new allocations with usage of existing ones,\nhow do you make sure that an allocation won't become lost while it is used in the\ncurrent frame?</b>\n\nIt is ensured because vmaTouchAllocation() / vmaGetAllocationInfo() not only returns allocation\nstatus/parameters and checks whether it is not lost, but when it is not, it also\natomically marks it as used in the current frame, which makes it impossible to\nbecome lost in that frame. It uses lockless algorithm, so it works fast and\ndoesn't involve locking any internal mutex.\n\n<b>Q: What if my allocation may still be in use by the GPU when it is rendering a\nprevious frame while I already submit new frame on the CPU?</b>\n\nYou can make sure that allocations \"touched\" by vmaTouchAllocation() / vmaGetAllocationInfo() will not\nbecome lost for a number of additional frames back from the current one by\nspecifying this number as VmaAllocatorCreateInfo::frameInUseCount (for default\nmemory pool) and VmaPoolCreateInfo::frameInUseCount (for custom pool).\n\n<b>Q: How do you inform the library when new frame starts?</b>\n\nYou need to call function vmaSetCurrentFrameIndex().\n\nExample code:\n\n\\code\nstruct MyBuffer\n{\n    VkBuffer m_Buf = nullptr;\n    VmaAllocation m_Alloc = nullptr;\n\n    // Called when the buffer is really needed in the current frame.\n    void EnsureBuffer();\n};\n\nvoid MyBuffer::EnsureBuffer()\n{\n    // Buffer has been created.\n    if(m_Buf != VK_NULL_HANDLE)\n    {\n        // Check if its allocation is not lost + mark it as used in current frame.\n        if(vmaTouchAllocation(allocator, m_Alloc))\n        {\n            // It is all OK - safe to use m_Buf.\n            return;\n        }\n    }\n\n    // Buffer not yet exists or lost - destroy and recreate it.\n\n    vmaDestroyBuffer(allocator, m_Buf, m_Alloc);\n\n    VkBufferCreateInfo bufCreateInfo = { VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO };\n    bufCreateInfo.size = 1024;\n    bufCreateInfo.usage = VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT;\n\n    VmaAllocationCreateInfo allocCreateInfo = {};\n    allocCreateInfo.usage = VMA_MEMORY_USAGE_GPU_ONLY;\n    allocCreateInfo.flags = VMA_ALLOCATION_CREATE_CAN_BECOME_LOST_BIT |\n        VMA_ALLOCATION_CREATE_CAN_MAKE_OTHER_LOST_BIT;\n\n    vmaCreateBuffer(allocator, &bufCreateInfo, &allocCreateInfo, &m_Buf, &m_Alloc, nullptr);\n}\n\\endcode\n\nWhen using lost allocations, you may see some Vulkan validation layer warnings\nabout overlapping regions of memory bound to different kinds of buffers and\nimages. This is still valid as long as you implement proper handling of lost\nallocations (like in the example above) and don't use them.\n\nYou can create an allocation that is already in lost state from the beginning using function\nvmaCreateLostAllocation(). It may be useful if you need a \"dummy\" allocation that is not null.\n\nYou can call function vmaMakePoolAllocationsLost() to set all eligible allocations\nin a specified custom pool to lost state.\nAllocations that have been \"touched\" in current frame or VmaPoolCreateInfo::frameInUseCount frames back\ncannot become lost.\n\n<b>Q: Can I touch allocation that cannot become lost?</b>\n\nYes, although it has no visible effect.\nCalls to vmaGetAllocationInfo() and vmaTouchAllocation() update last use frame index\nalso for allocations that cannot become lost, but the only way to observe it is to dump\ninternal allocator state using vmaBuildStatsString().\nYou can use this feature for debugging purposes to explicitly mark allocations that you use\nin current frame and then analyze JSON dump to see for how long each allocation stays unused.\n\n\n\\page statistics Statistics\n\nThis library contains functions that return information about its internal state,\nespecially the amount of memory allocated from Vulkan.\nPlease keep in mind that these functions need to traverse all internal data structures\nto gather these information, so they may be quite time-consuming.\nDon't call them too often.\n\n\\section statistics_numeric_statistics Numeric statistics\n\nYou can query for overall statistics of the allocator using function vmaCalculateStats().\nInformation are returned using structure #VmaStats.\nIt contains #VmaStatInfo - number of allocated blocks, number of allocations\n(occupied ranges in these blocks), number of unused (free) ranges in these blocks,\nnumber of bytes used and unused (but still allocated from Vulkan) and other information.\nThey are summed across memory heaps, memory types and total for whole allocator.\n\nYou can query for statistics of a custom pool using function vmaGetPoolStats().\nInformation are returned using structure #VmaPoolStats.\n\nYou can query for information about specific allocation using function vmaGetAllocationInfo().\nIt fill structure #VmaAllocationInfo.\n\n\\section statistics_json_dump JSON dump\n\nYou can dump internal state of the allocator to a string in JSON format using function vmaBuildStatsString().\nThe result is guaranteed to be correct JSON.\nIt uses ANSI encoding.\nAny strings provided by user (see [Allocation names](@ref allocation_names))\nare copied as-is and properly escaped for JSON, so if they use UTF-8, ISO-8859-2 or any other encoding,\nthis JSON string can be treated as using this encoding.\nIt must be freed using function vmaFreeStatsString().\n\nThe format of this JSON string is not part of official documentation of the library,\nbut it will not change in backward-incompatible way without increasing library major version number\nand appropriate mention in changelog.\n\nThe JSON string contains all the data that can be obtained using vmaCalculateStats().\nIt can also contain detailed map of allocated memory blocks and their regions -\nfree and occupied by allocations.\nThis allows e.g. to visualize the memory or assess fragmentation.\n\n\n\\page allocation_annotation Allocation names and user data\n\n\\section allocation_user_data Allocation user data\n\nYou can annotate allocations with your own information, e.g. for debugging purposes.\nTo do that, fill VmaAllocationCreateInfo::pUserData field when creating\nan allocation. It is an opaque `void*` pointer. You can use it e.g. as a pointer,\nsome handle, index, key, ordinal number or any other value that would associate\nthe allocation with your custom metadata.\n\n\\code\nVkBufferCreateInfo bufferInfo = { VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO };\n// Fill bufferInfo...\n\nMyBufferMetadata* pMetadata = CreateBufferMetadata();\n\nVmaAllocationCreateInfo allocCreateInfo = {};\nallocCreateInfo.usage = VMA_MEMORY_USAGE_GPU_ONLY;\nallocCreateInfo.pUserData = pMetadata;\n\nVkBuffer buffer;\nVmaAllocation allocation;\nvmaCreateBuffer(allocator, &bufferInfo, &allocCreateInfo, &buffer, &allocation, nullptr);\n\\endcode\n\nThe pointer may be later retrieved as VmaAllocationInfo::pUserData:\n\n\\code\nVmaAllocationInfo allocInfo;\nvmaGetAllocationInfo(allocator, allocation, &allocInfo);\nMyBufferMetadata* pMetadata = (MyBufferMetadata*)allocInfo.pUserData;\n\\endcode\n\nIt can also be changed using function vmaSetAllocationUserData().\n\nValues of (non-zero) allocations' `pUserData` are printed in JSON report created by\nvmaBuildStatsString(), in hexadecimal form.\n\n\\section allocation_names Allocation names\n\nThere is alternative mode available where `pUserData` pointer is used to point to\na null-terminated string, giving a name to the allocation. To use this mode,\nset #VMA_ALLOCATION_CREATE_USER_DATA_COPY_STRING_BIT flag in VmaAllocationCreateInfo::flags.\nThen `pUserData` passed as VmaAllocationCreateInfo::pUserData or argument to\nvmaSetAllocationUserData() must be either null or pointer to a null-terminated string.\nThe library creates internal copy of the string, so the pointer you pass doesn't need\nto be valid for whole lifetime of the allocation. You can free it after the call.\n\n\\code\nVkImageCreateInfo imageInfo = { VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO };\n// Fill imageInfo...\n\nstd::string imageName = \"Texture: \";\nimageName += fileName;\n\nVmaAllocationCreateInfo allocCreateInfo = {};\nallocCreateInfo.usage = VMA_MEMORY_USAGE_GPU_ONLY;\nallocCreateInfo.flags = VMA_ALLOCATION_CREATE_USER_DATA_COPY_STRING_BIT;\nallocCreateInfo.pUserData = imageName.c_str();\n\nVkImage image;\nVmaAllocation allocation;\nvmaCreateImage(allocator, &imageInfo, &allocCreateInfo, &image, &allocation, nullptr);\n\\endcode\n\nThe value of `pUserData` pointer of the allocation will be different than the one\nyou passed when setting allocation's name - pointing to a buffer managed\ninternally that holds copy of the string.\n\n\\code\nVmaAllocationInfo allocInfo;\nvmaGetAllocationInfo(allocator, allocation, &allocInfo);\nconst char* imageName = (const char*)allocInfo.pUserData;\nprintf(\"Image name: %s\\n\", imageName);\n\\endcode\n\nThat string is also printed in JSON report created by vmaBuildStatsString().\n\n\\note Passing string name to VMA allocation doesn't automatically set it to the Vulkan buffer or image created with it.\nYou must do it manually using an extension like VK_EXT_debug_utils, which is independent of this library.\n\n\n\\page virtual_allocator Virtual allocator\n\nAs an extra feature, the core allocation algorithm of the library is exposed through a simple and convenient API of \"virtual allocator\".\nIt doesn't allocate any real GPU memory. It just keeps track of used and free regions of a \"virtual block\".\nYou can use it to allocate your own memory or other objects, even completely unrelated to Vulkan.\nA common use case is sub-allocation of pieces of one large GPU buffer.\n\n\\section virtual_allocator_creating_virtual_block Creating virtual block\n\nTo use this functionality, there is no main \"allocator\" object.\nYou don't need to have #VmaAllocator object created.\nAll you need to do is to create a separate #VmaVirtualBlock object for each block of memory you want to be managed by the allocator:\n\n-# Fill in #VmaVirtualBlockCreateInfo structure.\n-# Call vmaCreateVirtualBlock(). Get new #VmaVirtualBlock object.\n\nExample:\n\n\\code\nVmaVirtualBlockCreateInfo blockCreateInfo = {};\nblockCreateInfo.size = 1048576; // 1 MB\n\nVmaVirtualBlock block;\nVkResult res = vmaCreateVirtualBlock(&blockCreateInfo, &block);\n\\endcode\n\n\\section virtual_allocator_making_virtual_allocations Making virtual allocations\n\n#VmaVirtualBlock object contains internal data structure that keeps track of free and occupied regions\nusing the same code as the main Vulkan memory allocator.\nHowever, there is no \"virtual allocation\" object.\nWhen you request a new allocation, a `VkDeviceSize` number is returned.\nIt is an offset inside the block where the allocation has been placed, but it also uniquely identifies the allocation within this block.\n\nIn order to make an allocation:\n\n-# Fill in #VmaVirtualAllocationCreateInfo structure.\n-# Call vmaVirtualAllocate(). Get new `VkDeviceSize offset` that identifies the allocation.\n\nExample:\n\n\\code\nVmaVirtualAllocationCreateInfo allocCreateInfo = {};\nallocCreateInfo.size = 4096; // 4 KB\n\nVkDeviceSize allocOffset;\nres = vmaVirtualAllocate(block, &allocCreateInfo, &allocOffset);\nif(res == VK_SUCCESS)\n{\n    // Use the 4 KB of your memory starting at allocOffset.\n}\nelse\n{\n    // Allocation failed - no space for it could be found. Handle this error!\n}\n\\endcode\n\n\\section virtual_allocator_deallocation Deallocation\n\nWhen no longer needed, an allocation can be freed by calling vmaVirtualFree().\nYou can only pass to this function the exact offset that was previously returned by vmaVirtualAllocate()\nand not any other location within the memory.\n\nWhen whole block is no longer needed, the block object can be released by calling vmaDestroyVirtualBlock().\nAll allocations must be freed before the block is destroyed, which is checked internally by an assert.\nHowever, if you don't want to call vmaVirtualFree() for each allocation, you can use vmaClearVirtualBlock() to free them all at once -\na feature not available in normal Vulkan memory allocator. Example:\n\n\\code\nvmaVirtualFree(block, allocOffset);\nvmaDestroyVirtualBlock(block);\n\\endcode\n\n\\section virtual_allocator_allocation_parameters Allocation parameters\n\nYou can attach a custom pointer to each allocation by using vmaSetVirtualAllocationUserData().\nIts default value is null.\nIt can be used to store any data that needs to be associated with that allocation - e.g. an index, a handle, or a pointer to some\nlarger data structure containing more information. Example:\n\n\\code\nstruct CustomAllocData\n{\n    std::string m_AllocName;\n};\nCustomAllocData* allocData = new CustomAllocData();\nallocData->m_AllocName = \"My allocation 1\";\nvmaSetVirtualAllocationUserData(block, allocOffset, allocData);\n\\endcode\n\nThe pointer can later be fetched, along with allocation size, by passing the allocation offset to function\nvmaGetVirtualAllocationInfo() and inspecting returned structure #VmaVirtualAllocationInfo.\nIf you allocated a new object to be used as the custom pointer, don't forget to delete that object before freeing the allocation!\nExample:\n\n\\code\nVmaVirtualAllocationInfo allocInfo;\nvmaGetVirtualAllocationInfo(block, allocOffset, &allocInfo);\ndelete (CustomAllocData*)allocInfo.pUserData;\n\nvmaVirtualFree(block, allocOffset);\n\\endcode\n\n\\section virtual_allocator_alignment_and_units Alignment and units\n\nIt feels natural to express sizes and offsets in bytes.\nIf an offset of an allocation needs to be aligned to a multiply of some number (e.g. 4 bytes), you can fill optional member\nVmaVirtualAllocationCreateInfo::alignment to request it. Example:\n\n\\code\nVmaVirtualAllocationCreateInfo allocCreateInfo = {};\nallocCreateInfo.size = 4096; // 4 KB\nallocCreateInfo.alignment = 4; // Returned offset must be a multiply of 4 B\n\nVkDeviceSize allocOffset;\nres = vmaVirtualAllocate(block, &allocCreateInfo, &allocOffset);\n\\endcode\n\nAlignments of different allocations made from one block may vary.\nHowever, if all alignments and sizes are always multiply of some size e.g. 4 B or `sizeof(MyDataStruct)`,\nyou can express all sizes, alignments, and offsets in multiples of that size instead of individual bytes.\nIt might be more convenient, but you need to make sure to use this new unit consistently in all the places:\n\n- VmaVirtualBlockCreateInfo::size\n- VmaVirtualAllocationCreateInfo::size and VmaVirtualAllocationCreateInfo::alignment\n- Using offset returned by vmaVirtualAllocate()\n\n\\section virtual_allocator_statistics Statistics\n\nYou can obtain statistics of a virtual block using vmaCalculateVirtualBlockStats().\nThe function fills structure #VmaStatInfo - same as used by the normal Vulkan memory allocator.\nExample:\n\n\\code\nVmaStatInfo statInfo;\nvmaCalculateVirtualBlockStats(block, &statInfo);\nprintf(\"My virtual block has %llu bytes used by %u virtual allocations\\n\",\n    statInfo.usedBytes, statInfo.allocationCount);\n\\endcode\n\nYou can also request a full list of allocations and free regions as a string in JSON format by calling\nvmaBuildVirtualBlockStatsString().\nReturned string must be later freed using vmaFreeVirtualBlockStatsString().\nThe format of this string differs from the one returned by the main Vulkan allocator, but it is similar.\n\n\\section virtual_allocator_additional_considerations Additional considerations\n\nThe \"virtual allocator\" functionality is implemented on a level of individual memory blocks.\nKeeping track of a whole collection of blocks, allocating new ones when out of free space,\ndeleting empty ones, and deciding which one to try first for a new allocation must be implemented by the user.\n\nAlternative allocation algorithms are supported, just like in custom pools of the real GPU memory.\nSee enum #VmaVirtualBlockCreateFlagBits to learn how to specify them (e.g. #VMA_VIRTUAL_BLOCK_CREATE_LINEAR_ALGORITHM_BIT).\nYou can find their description in chapter \\ref custom_memory_pools.\nAllocation strategies are also supported.\nSee enum #VmaVirtualAllocationCreateFlagBits to learn how to specify them (e.g. #VMA_VIRTUAL_ALLOCATION_CREATE_STRATEGY_MIN_TIME_BIT).\n\nFollowing features are supported only by the allocator of the real GPU memory and not by virtual allocations:\nbuffer-image granularity, \\ref lost_allocations, `VMA_DEBUG_MARGIN`, `VMA_MIN_ALIGNMENT`.\n\n\n\\page debugging_memory_usage Debugging incorrect memory usage\n\nIf you suspect a bug with memory usage, like usage of uninitialized memory or\nmemory being overwritten out of bounds of an allocation,\nyou can use debug features of this library to verify this.\n\n\\section debugging_memory_usage_initialization Memory initialization\n\nIf you experience a bug with incorrect and nondeterministic data in your program and you suspect uninitialized memory to be used,\nyou can enable automatic memory initialization to verify this.\nTo do it, define macro `VMA_DEBUG_INITIALIZE_ALLOCATIONS` to 1.\n\n\\code\n#define VMA_DEBUG_INITIALIZE_ALLOCATIONS 1\n#include \"vk_mem_alloc.h\"\n\\endcode\n\nIt makes memory of all new allocations initialized to bit pattern `0xDCDCDCDC`.\nBefore an allocation is destroyed, its memory is filled with bit pattern `0xEFEFEFEF`.\nMemory is automatically mapped and unmapped if necessary.\n\nIf you find these values while debugging your program, good chances are that you incorrectly\nread Vulkan memory that is allocated but not initialized, or already freed, respectively.\n\nMemory initialization works only with memory types that are `HOST_VISIBLE`.\nIt works also with dedicated allocations.\nIt doesn't work with allocations created with #VMA_ALLOCATION_CREATE_CAN_BECOME_LOST_BIT flag,\nas they cannot be mapped.\n\n\\section debugging_memory_usage_margins Margins\n\nBy default, allocations are laid out in memory blocks next to each other if possible\n(considering required alignment, `bufferImageGranularity`, and `nonCoherentAtomSize`).\n\n![Allocations without margin](../gfx/Margins_1.png)\n\nDefine macro `VMA_DEBUG_MARGIN` to some non-zero value (e.g. 16) to enforce specified\nnumber of bytes as a margin before and after every allocation.\n\n\\code\n#define VMA_DEBUG_MARGIN 16\n#include \"vk_mem_alloc.h\"\n\\endcode\n\n![Allocations with margin](../gfx/Margins_2.png)\n\nIf your bug goes away after enabling margins, it means it may be caused by memory\nbeing overwritten outside of allocation boundaries. It is not 100% certain though.\nChange in application behavior may also be caused by different order and distribution\nof allocations across memory blocks after margins are applied.\n\nThe margin is applied also before first and after last allocation in a block.\nIt may occur only once between two adjacent allocations.\n\nMargins work with all types of memory.\n\nMargin is applied only to allocations made out of memory blocks and not to dedicated\nallocations, which have their own memory block of specific size.\nIt is thus not applied to allocations made using #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT flag\nor those automatically decided to put into dedicated allocations, e.g. due to its\nlarge size or recommended by VK_KHR_dedicated_allocation extension.\nMargins are also not active in custom pools created with #VMA_POOL_CREATE_BUDDY_ALGORITHM_BIT flag.\n\nMargins appear in [JSON dump](@ref statistics_json_dump) as part of free space.\n\nNote that enabling margins increases memory usage and fragmentation.\n\n\\section debugging_memory_usage_corruption_detection Corruption detection\n\nYou can additionally define macro `VMA_DEBUG_DETECT_CORRUPTION` to 1 to enable validation\nof contents of the margins.\n\n\\code\n#define VMA_DEBUG_MARGIN 16\n#define VMA_DEBUG_DETECT_CORRUPTION 1\n#include \"vk_mem_alloc.h\"\n\\endcode\n\nWhen this feature is enabled, number of bytes specified as `VMA_DEBUG_MARGIN`\n(it must be multiply of 4) before and after every allocation is filled with a magic number.\nThis idea is also know as \"canary\".\nMemory is automatically mapped and unmapped if necessary.\n\nThis number is validated automatically when the allocation is destroyed.\nIf it is not equal to the expected value, `VMA_ASSERT()` is executed.\nIt clearly means that either CPU or GPU overwritten the memory outside of boundaries of the allocation,\nwhich indicates a serious bug.\n\nYou can also explicitly request checking margins of all allocations in all memory blocks\nthat belong to specified memory types by using function vmaCheckCorruption(),\nor in memory blocks that belong to specified custom pool, by using function\nvmaCheckPoolCorruption().\n\nMargin validation (corruption detection) works only for memory types that are\n`HOST_VISIBLE` and `HOST_COHERENT`.\n\n\n\\page record_and_replay Record and replay\n\n\\section record_and_replay_introduction Introduction\n\nWhile using the library, sequence of calls to its functions together with their\nparameters can be recorded to a file and later replayed using standalone player\napplication. It can be useful to:\n\n- Test correctness - check if same sequence of calls will not cause crash or\n  failures on a target platform.\n- Gather statistics - see number of allocations, peak memory usage, number of\n  calls etc.\n- Benchmark performance - see how much time it takes to replay the whole\n  sequence.\n\n\\section record_and_replay_usage Usage\n\nRecording functionality is disabled by default.\nTo enable it, define following macro before every include of this library:\n\n\\code\n#define VMA_RECORDING_ENABLED 1\n\\endcode\n\n<b>To record sequence of calls to a file:</b> Fill in\nVmaAllocatorCreateInfo::pRecordSettings member while creating #VmaAllocator\nobject. File is opened and written during whole lifetime of the allocator.\n\n<b>To replay file:</b> Use VmaReplay - standalone command-line program.\nPrecompiled binary can be found in \"bin\" directory.\nIts source can be found in \"src/VmaReplay\" directory.\nIts project is generated by Premake.\nCommand line syntax is printed when the program is launched without parameters.\nBasic usage:\n\n    VmaReplay.exe MyRecording.csv\n\n<b>Documentation of file format</b> can be found in file: \"docs/Recording file format.md\".\nIt is a human-readable, text file in CSV format (Comma Separated Values).\n\n\\section record_and_replay_additional_considerations Additional considerations\n\n- Replaying file that was recorded on a different GPU (with different parameters\n  like `bufferImageGranularity`, `nonCoherentAtomSize`, and especially different\n  set of memory heaps and types) may give different performance and memory usage\n  results, as well as issue some warnings and errors.\n- Current implementation of recording in VMA, as well as VmaReplay application, is\n  coded and tested only on Windows. Inclusion of recording code is driven by\n  `VMA_RECORDING_ENABLED` macro. Support for other platforms should be easy to\n  add. Contributions are welcomed.\n\n\n\\page opengl_interop OpenGL Interop\n\nVMA provides some features that help with interoperability with OpenGL.\n\n\\section opengl_interop_exporting_memory Exporting memory\n\nIf you want to attach `VkExportMemoryAllocateInfoKHR` structure to `pNext` chain of memory allocations made by the library:\n\nIt is recommended to create \\ref custom_memory_pools for such allocations.\nDefine and fill in your `VkExportMemoryAllocateInfoKHR` structure and attach it to VmaPoolCreateInfo::pMemoryAllocateNext\nwhile creating the custom pool.\nPlease note that the structure must remain alive and unchanged for the whole lifetime of the #VmaPool,\nnot only while creating it, as no copy of the structure is made,\nbut its original pointer is used for each allocation instead.\n\nIf you want to export all memory allocated by the library from certain memory types,\nalso dedicated allocations or other allocations made from default pools,\nan alternative solution is to fill in VmaAllocatorCreateInfo::pTypeExternalMemoryHandleTypes.\nIt should point to an array with `VkExternalMemoryHandleTypeFlagsKHR` to be automatically passed by the library\nthrough `VkExportMemoryAllocateInfoKHR` on each allocation made from a specific memory type.\nThis is currently the only method to use if you need exported dedicated allocations, as they cannot be created out of custom pools.\nThis will change in future versions of the library though.\n\nYou should not mix these two methods in a way that allows to apply both to the same memory type.\nOtherwise, `VkExportMemoryAllocateInfoKHR` structure would be attached twice to the `pNext` chain of `VkMemoryAllocateInfo`.\n\n\n\\section opengl_interop_custom_alignment Custom alignment\n\nBuffers or images exported to a different API like OpenGL may require a different alignment,\nhigher than the one used by the library automatically, queried from functions like `vkGetBufferMemoryRequirements`.\nTo impose such alignment:\n\nIt is recommended to create \\ref custom_memory_pools for such allocations.\nSet VmaPoolCreateInfo::minAllocationAlignment member to the minimum alignment required for each allocation\nto be made out of this pool.\nThe alignment actually used will be the maximum of this member and the alignment returned for the specific buffer or image\nfrom a function like `vkGetBufferMemoryRequirements`, which is called by VMA automatically.\n\nIf you want to create a buffer with a specific minimum alignment out of default pools,\nuse special function vmaCreateBufferWithAlignment(), which takes additional parameter `minAlignment`.\nThis is currently the only method to use if you need exported dedicated allocations, as they cannot be created out of custom pools.\nThis will change in future versions of the library though.\n\nNote the problem of alignment affects only resources placed inside bigger `VkDeviceMemory` blocks and not dedicated\nallocations, as these, by definition, always have alignment = 0 because the resource is bound to the beginning of its dedicated block.\nContrary to Direct3D 12, Vulkan doesn't have a concept of alignment of the entire memory block passed on its allocation.\n\n\n\\page usage_patterns Recommended usage patterns\n\nSee also slides from talk:\n[Sawicki, Adam. Advanced Graphics Techniques Tutorial: Memory management in Vulkan and DX12. Game Developers Conference, 2018](https://www.gdcvault.com/play/1025458/Advanced-Graphics-Techniques-Tutorial-New)\n\n\n\\section usage_patterns_common_mistakes Common mistakes\n\n<b>Use of CPU_TO_GPU instead of CPU_ONLY memory</b>\n\n#VMA_MEMORY_USAGE_CPU_TO_GPU is recommended only for resources that will be\nmapped and written by the CPU, as well as read directly by the GPU - like some\nbuffers or textures updated every frame (dynamic). If you create a staging copy\nof a resource to be written by CPU and then used as a source of transfer to\nanother resource placed in the GPU memory, that staging resource should be\ncreated with #VMA_MEMORY_USAGE_CPU_ONLY. Please read the descriptions of these\nenums carefully for details.\n\n<b>Unnecessary use of custom pools</b>\n\n\\ref custom_memory_pools may be useful for special purposes - when you want to\nkeep certain type of resources separate e.g. to reserve minimum amount of memory\nfor them, limit maximum amount of memory they can occupy, or make some of them\npush out the other through the mechanism of \\ref lost_allocations. For most\nresources this is not needed and so it is not recommended to create #VmaPool\nobjects and allocations out of them. Allocating from the default pool is sufficient.\n\n\\section usage_patterns_simple Simple patterns\n\n\\subsection usage_patterns_simple_render_targets Render targets\n\n<b>When:</b>\nAny resources that you frequently write and read on GPU,\ne.g. images used as color attachments (aka \"render targets\"), depth-stencil attachments,\nimages/buffers used as storage image/buffer (aka \"Unordered Access View (UAV)\").\n\n<b>What to do:</b>\nCreate them in video memory that is fastest to access from GPU using\n#VMA_MEMORY_USAGE_GPU_ONLY.\n\nConsider using [VK_KHR_dedicated_allocation](@ref vk_khr_dedicated_allocation) extension\nand/or manually creating them as dedicated allocations using #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT,\nespecially if they are large or if you plan to destroy and recreate them e.g. when\ndisplay resolution changes.\nPrefer to create such resources first and all other GPU resources (like textures and vertex buffers) later.\n\n\\subsection usage_patterns_simple_immutable_resources Immutable resources\n\n<b>When:</b>\nAny resources that you fill on CPU only once (aka \"immutable\") or infrequently\nand then read frequently on GPU,\ne.g. textures, vertex and index buffers, constant buffers that don't change often.\n\n<b>What to do:</b>\nCreate them in video memory that is fastest to access from GPU using\n#VMA_MEMORY_USAGE_GPU_ONLY.\n\nTo initialize content of such resource, create a CPU-side (aka \"staging\") copy of it\nin system memory - #VMA_MEMORY_USAGE_CPU_ONLY, map it, fill it,\nand submit a transfer from it to the GPU resource.\nYou can keep the staging copy if you need it for another upload transfer in the future.\nIf you don't, you can destroy it or reuse this buffer for uploading different resource\nafter the transfer finishes.\n\nPrefer to create just buffers in system memory rather than images, even for uploading textures.\nUse `vkCmdCopyBufferToImage()`.\nDont use images with `VK_IMAGE_TILING_LINEAR`.\n\n\\subsection usage_patterns_dynamic_resources Dynamic resources\n\n<b>When:</b>\nAny resources that change frequently (aka \"dynamic\"), e.g. every frame or every draw call,\nwritten on CPU, read on GPU.\n\n<b>What to do:</b>\nCreate them using #VMA_MEMORY_USAGE_CPU_TO_GPU.\nYou can map it and write to it directly on CPU, as well as read from it on GPU.\n\nThis is a more complex situation. Different solutions are possible,\nand the best one depends on specific GPU type, but you can use this simple approach for the start.\nPrefer to write to such resource sequentially (e.g. using `memcpy`).\nDon't perform random access or any reads from it on CPU, as it may be very slow.\nAlso note that textures written directly from the host through a mapped pointer need to be in LINEAR not OPTIMAL layout.\n\n\\subsection usage_patterns_readback Readback\n\n<b>When:</b>\nResources that contain data written by GPU that you want to read back on CPU,\ne.g. results of some computations.\n\n<b>What to do:</b>\nCreate them using #VMA_MEMORY_USAGE_GPU_TO_CPU.\nYou can write to them directly on GPU, as well as map and read them on CPU.\n\n\\section usage_patterns_advanced Advanced patterns\n\n\\subsection usage_patterns_integrated_graphics Detecting integrated graphics\n\nYou can support integrated graphics (like Intel HD Graphics, AMD APU) better\nby detecting it in Vulkan.\nTo do it, call `vkGetPhysicalDeviceProperties()`, inspect\n`VkPhysicalDeviceProperties::deviceType` and look for `VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU`.\nWhen you find it, you can assume that memory is unified and all memory types are comparably fast\nto access from GPU, regardless of `VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT`.\n\nYou can then sum up sizes of all available memory heaps and treat them as useful for\nyour GPU resources, instead of only `DEVICE_LOCAL` ones.\nYou can also prefer to create your resources in memory types that are `HOST_VISIBLE` to map them\ndirectly instead of submitting explicit transfer (see below).\n\n\\subsection usage_patterns_direct_vs_transfer Direct access versus transfer\n\nFor resources that you frequently write on CPU and read on GPU, many solutions are possible:\n\n-# Create one copy in video memory using #VMA_MEMORY_USAGE_GPU_ONLY,\n   second copy in system memory using #VMA_MEMORY_USAGE_CPU_ONLY and submit explicit transfer each time.\n-# Create just a single copy using #VMA_MEMORY_USAGE_CPU_TO_GPU, map it and fill it on CPU,\n   read it directly on GPU.\n-# Create just a single copy using #VMA_MEMORY_USAGE_CPU_ONLY, map it and fill it on CPU,\n   read it directly on GPU.\n\nWhich solution is the most efficient depends on your resource and especially on the GPU.\nIt is best to measure it and then make the decision.\nSome general recommendations:\n\n- On integrated graphics use (2) or (3) to avoid unnecessary time and memory overhead\n  related to using a second copy and making transfer.\n- For small resources (e.g. constant buffers) use (2).\n  Discrete AMD cards have special 256 MiB pool of video memory that is directly mappable.\n  Even if the resource ends up in system memory, its data may be cached on GPU after first\n  fetch over PCIe bus.\n- For larger resources (e.g. textures), decide between (1) and (2).\n  You may want to differentiate NVIDIA and AMD, e.g. by looking for memory type that is\n  both `DEVICE_LOCAL` and `HOST_VISIBLE`. When you find it, use (2), otherwise use (1).\n\nSimilarly, for resources that you frequently write on GPU and read on CPU, multiple\nsolutions are possible:\n\n-# Create one copy in video memory using #VMA_MEMORY_USAGE_GPU_ONLY,\n   second copy in system memory using #VMA_MEMORY_USAGE_GPU_TO_CPU and submit explicit tranfer each time.\n-# Create just single copy using #VMA_MEMORY_USAGE_GPU_TO_CPU, write to it directly on GPU,\n   map it and read it on CPU.\n\nYou should take some measurements to decide which option is faster in case of your specific\nresource.\n\nNote that textures accessed directly from the host through a mapped pointer need to be in LINEAR layout,\nwhich may slow down their usage on the device.\nTextures accessed only by the device and transfer operations can use OPTIMAL layout.\n\nIf you don't want to specialize your code for specific types of GPUs, you can still make\nan simple optimization for cases when your resource ends up in mappable memory to use it\ndirectly in this case instead of creating CPU-side staging copy.\nFor details see [Finding out if memory is mappable](@ref memory_mapping_finding_if_memory_mappable).\n\n\n\\page configuration Configuration\n\nPlease check \"CONFIGURATION SECTION\" in the code to find macros that you can define\nbefore each include of this file or change directly in this file to provide\nyour own implementation of basic facilities like assert, `min()` and `max()` functions,\nmutex, atomic etc.\nThe library uses its own implementation of containers by default, but you can switch to using\nSTL containers instead.\n\nFor example, define `VMA_ASSERT(expr)` before including the library to provide\ncustom implementation of the assertion, compatible with your project.\nBy default it is defined to standard C `assert(expr)` in `_DEBUG` configuration\nand empty otherwise.\n\n\\section config_Vulkan_functions Pointers to Vulkan functions\n\nThere are multiple ways to import pointers to Vulkan functions in the library.\nIn the simplest case you don't need to do anything.\nIf the compilation or linking of your program or the initialization of the #VmaAllocator\ndoesn't work for you, you can try to reconfigure it.\n\nFirst, the allocator tries to fetch pointers to Vulkan functions linked statically,\nlike this:\n\n\\code\nm_VulkanFunctions.vkAllocateMemory = (PFN_vkAllocateMemory)vkAllocateMemory;\n\\endcode\n\nIf you want to disable this feature, set configuration macro: `#define VMA_STATIC_VULKAN_FUNCTIONS 0`.\n\nSecond, you can provide the pointers yourself by setting member VmaAllocatorCreateInfo::pVulkanFunctions.\nYou can fetch them e.g. using functions `vkGetInstanceProcAddr` and `vkGetDeviceProcAddr` or\nby using a helper library like [volk](https://github.com/zeux/volk).\n\nThird, VMA tries to fetch remaining pointers that are still null by calling\n`vkGetInstanceProcAddr` and `vkGetDeviceProcAddr` on its own.\nIf you want to disable this feature, set configuration macro: `#define VMA_DYNAMIC_VULKAN_FUNCTIONS 0`.\n\nFinally, all the function pointers required by the library (considering selected\nVulkan version and enabled extensions) are checked with `VMA_ASSERT` if they are not null.\n\n\n\\section custom_memory_allocator Custom host memory allocator\n\nIf you use custom allocator for CPU memory rather than default operator `new`\nand `delete` from C++, you can make this library using your allocator as well\nby filling optional member VmaAllocatorCreateInfo::pAllocationCallbacks. These\nfunctions will be passed to Vulkan, as well as used by the library itself to\nmake any CPU-side allocations.\n\n\\section allocation_callbacks Device memory allocation callbacks\n\nThe library makes calls to `vkAllocateMemory()` and `vkFreeMemory()` internally.\nYou can setup callbacks to be informed about these calls, e.g. for the purpose\nof gathering some statistics. To do it, fill optional member\nVmaAllocatorCreateInfo::pDeviceMemoryCallbacks.\n\n\\section heap_memory_limit Device heap memory limit\n\nWhen device memory of certain heap runs out of free space, new allocations may\nfail (returning error code) or they may succeed, silently pushing some existing\nmemory blocks from GPU VRAM to system RAM (which degrades performance). This\nbehavior is implementation-dependent - it depends on GPU vendor and graphics\ndriver.\n\nOn AMD cards it can be controlled while creating Vulkan device object by using\nVK_AMD_memory_overallocation_behavior extension, if available.\n\nAlternatively, if you want to test how your program behaves with limited amount of Vulkan device\nmemory available without switching your graphics card to one that really has\nsmaller VRAM, you can use a feature of this library intended for this purpose.\nTo do it, fill optional member VmaAllocatorCreateInfo::pHeapSizeLimit.\n\n\n\n\\page vk_khr_dedicated_allocation VK_KHR_dedicated_allocation\n\nVK_KHR_dedicated_allocation is a Vulkan extension which can be used to improve\nperformance on some GPUs. It augments Vulkan API with possibility to query\ndriver whether it prefers particular buffer or image to have its own, dedicated\nallocation (separate `VkDeviceMemory` block) for better efficiency - to be able\nto do some internal optimizations.\n\nThe extension is supported by this library. It will be used automatically when\nenabled. To enable it:\n\n1 . When creating Vulkan device, check if following 2 device extensions are\nsupported (call `vkEnumerateDeviceExtensionProperties()`).\nIf yes, enable them (fill `VkDeviceCreateInfo::ppEnabledExtensionNames`).\n\n- VK_KHR_get_memory_requirements2\n- VK_KHR_dedicated_allocation\n\nIf you enabled these extensions:\n\n2 . Use #VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT flag when creating\nyour #VmaAllocator`to inform the library that you enabled required extensions\nand you want the library to use them.\n\n\\code\nallocatorInfo.flags |= VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT;\n\nvmaCreateAllocator(&allocatorInfo, &allocator);\n\\endcode\n\nThat is all. The extension will be automatically used whenever you create a\nbuffer using vmaCreateBuffer() or image using vmaCreateImage().\n\nWhen using the extension together with Vulkan Validation Layer, you will receive\nwarnings like this:\n\n    vkBindBufferMemory(): Binding memory to buffer 0x33 but vkGetBufferMemoryRequirements() has not been called on that buffer.\n\nIt is OK, you should just ignore it. It happens because you use function\n`vkGetBufferMemoryRequirements2KHR()` instead of standard\n`vkGetBufferMemoryRequirements()`, while the validation layer seems to be\nunaware of it.\n\nTo learn more about this extension, see:\n\n- [VK_KHR_dedicated_allocation in Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/chap50.html#VK_KHR_dedicated_allocation)\n- [VK_KHR_dedicated_allocation unofficial manual](http://asawicki.info/articles/VK_KHR_dedicated_allocation.php5)\n\n\n\n\\page vk_amd_device_coherent_memory VK_AMD_device_coherent_memory\n\nVK_AMD_device_coherent_memory is a device extension that enables access to\nadditional memory types with `VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD` and\n`VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD` flag. It is useful mostly for\nallocation of buffers intended for writing \"breadcrumb markers\" in between passes\nor draw calls, which in turn are useful for debugging GPU crash/hang/TDR cases.\n\nWhen the extension is available but has not been enabled, Vulkan physical device\nstill exposes those memory types, but their usage is forbidden. VMA automatically\ntakes care of that - it returns `VK_ERROR_FEATURE_NOT_PRESENT` when an attempt\nto allocate memory of such type is made.\n\nIf you want to use this extension in connection with VMA, follow these steps:\n\n\\section vk_amd_device_coherent_memory_initialization Initialization\n\n1) Call `vkEnumerateDeviceExtensionProperties` for the physical device.\nCheck if the extension is supported - if returned array of `VkExtensionProperties` contains \"VK_AMD_device_coherent_memory\".\n\n2) Call `vkGetPhysicalDeviceFeatures2` for the physical device instead of old `vkGetPhysicalDeviceFeatures`.\nAttach additional structure `VkPhysicalDeviceCoherentMemoryFeaturesAMD` to `VkPhysicalDeviceFeatures2::pNext` to be returned.\nCheck if the device feature is really supported - check if `VkPhysicalDeviceCoherentMemoryFeaturesAMD::deviceCoherentMemory` is true.\n\n3) While creating device with `vkCreateDevice`, enable this extension - add \"VK_AMD_device_coherent_memory\"\nto the list passed as `VkDeviceCreateInfo::ppEnabledExtensionNames`.\n\n4) While creating the device, also don't set `VkDeviceCreateInfo::pEnabledFeatures`.\nFill in `VkPhysicalDeviceFeatures2` structure instead and pass it as `VkDeviceCreateInfo::pNext`.\nEnable this device feature - attach additional structure `VkPhysicalDeviceCoherentMemoryFeaturesAMD` to\n`VkPhysicalDeviceFeatures2::pNext` and set its member `deviceCoherentMemory` to `VK_TRUE`.\n\n5) While creating #VmaAllocator with vmaCreateAllocator() inform VMA that you\nhave enabled this extension and feature - add #VMA_ALLOCATOR_CREATE_AMD_DEVICE_COHERENT_MEMORY_BIT\nto VmaAllocatorCreateInfo::flags.\n\n\\section vk_amd_device_coherent_memory_usage Usage\n\nAfter following steps described above, you can create VMA allocations and custom pools\nout of the special `DEVICE_COHERENT` and `DEVICE_UNCACHED` memory types on eligible\ndevices. There are multiple ways to do it, for example:\n\n- You can request or prefer to allocate out of such memory types by adding\n  `VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD` to VmaAllocationCreateInfo::requiredFlags\n  or VmaAllocationCreateInfo::preferredFlags. Those flags can be freely mixed with\n  other ways of \\ref choosing_memory_type, like setting VmaAllocationCreateInfo::usage.\n- If you manually found memory type index to use for this purpose, force allocation\n  from this specific index by setting VmaAllocationCreateInfo::memoryTypeBits `= 1u << index`.\n\n\\section vk_amd_device_coherent_memory_more_information More information\n\nTo learn more about this extension, see [VK_AMD_device_coherent_memory in Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_device_coherent_memory.html)\n\nExample use of this extension can be found in the code of the sample and test suite\naccompanying this library.\n\n\n\\page enabling_buffer_device_address Enabling buffer device address\n\nDevice extension VK_KHR_buffer_device_address\nallow to fetch raw GPU pointer to a buffer and pass it for usage in a shader code.\nIt is promoted to core Vulkan 1.2.\n\nIf you want to use this feature in connection with VMA, follow these steps:\n\n\\section enabling_buffer_device_address_initialization Initialization\n\n1) (For Vulkan version < 1.2) Call `vkEnumerateDeviceExtensionProperties` for the physical device.\nCheck if the extension is supported - if returned array of `VkExtensionProperties` contains\n\"VK_KHR_buffer_device_address\".\n\n2) Call `vkGetPhysicalDeviceFeatures2` for the physical device instead of old `vkGetPhysicalDeviceFeatures`.\nAttach additional structure `VkPhysicalDeviceBufferDeviceAddressFeatures*` to `VkPhysicalDeviceFeatures2::pNext` to be returned.\nCheck if the device feature is really supported - check if `VkPhysicalDeviceBufferDeviceAddressFeatures::bufferDeviceAddress` is true.\n\n3) (For Vulkan version < 1.2) While creating device with `vkCreateDevice`, enable this extension - add\n\"VK_KHR_buffer_device_address\" to the list passed as `VkDeviceCreateInfo::ppEnabledExtensionNames`.\n\n4) While creating the device, also don't set `VkDeviceCreateInfo::pEnabledFeatures`.\nFill in `VkPhysicalDeviceFeatures2` structure instead and pass it as `VkDeviceCreateInfo::pNext`.\nEnable this device feature - attach additional structure `VkPhysicalDeviceBufferDeviceAddressFeatures*` to\n`VkPhysicalDeviceFeatures2::pNext` and set its member `bufferDeviceAddress` to `VK_TRUE`.\n\n5) While creating #VmaAllocator with vmaCreateAllocator() inform VMA that you\nhave enabled this feature - add #VMA_ALLOCATOR_CREATE_BUFFER_DEVICE_ADDRESS_BIT\nto VmaAllocatorCreateInfo::flags.\n\n\\section enabling_buffer_device_address_usage Usage\n\nAfter following steps described above, you can create buffers with `VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT*` using VMA.\nThe library automatically adds `VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT*` to\nallocated memory blocks wherever it might be needed.\n\nPlease note that the library supports only `VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT*`.\nThe second part of this functionality related to \"capture and replay\" is not supported,\nas it is intended for usage in debugging tools like RenderDoc, not in everyday Vulkan usage.\n\n\\section enabling_buffer_device_address_more_information More information\n\nTo learn more about this extension, see [VK_KHR_buffer_device_address in Vulkan specification](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/chap46.html#VK_KHR_buffer_device_address)\n\nExample use of this extension can be found in the code of the sample and test suite\naccompanying this library.\n\n\\page general_considerations General considerations\n\n\\section general_considerations_thread_safety Thread safety\n\n- The library has no global state, so separate #VmaAllocator objects can be used\n  independently.\n  There should be no need to create multiple such objects though - one per `VkDevice` is enough.\n- By default, all calls to functions that take #VmaAllocator as first parameter\n  are safe to call from multiple threads simultaneously because they are\n  synchronized internally when needed.\n- When the allocator is created with #VMA_ALLOCATOR_CREATE_EXTERNALLY_SYNCHRONIZED_BIT\n  flag, calls to functions that take such #VmaAllocator object must be\n  synchronized externally.\n- Access to a #VmaAllocation object must be externally synchronized. For example,\n  you must not call vmaGetAllocationInfo() and vmaMapMemory() from different\n  threads at the same time if you pass the same #VmaAllocation object to these\n  functions.\n\n\\section general_considerations_validation_layer_warnings Validation layer warnings\n\nWhen using this library, you can meet following types of warnings issued by\nVulkan validation layer. They don't necessarily indicate a bug, so you may need\nto just ignore them.\n\n- *vkBindBufferMemory(): Binding memory to buffer 0xeb8e4 but vkGetBufferMemoryRequirements() has not been called on that buffer.*\n  - It happens when VK_KHR_dedicated_allocation extension is enabled.\n    `vkGetBufferMemoryRequirements2KHR` function is used instead, while validation layer seems to be unaware of it.\n- *Mapping an image with layout VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL can result in undefined behavior if this memory is used by the device. Only GENERAL or PREINITIALIZED should be used.*\n  - It happens when you map a buffer or image, because the library maps entire\n    `VkDeviceMemory` block, where different types of images and buffers may end\n    up together, especially on GPUs with unified memory like Intel.\n- *Non-linear image 0xebc91 is aliased with linear buffer 0xeb8e4 which may indicate a bug.*\n  - It happens when you use lost allocations, and a new image or buffer is\n    created in place of an existing object that became lost.\n  - It may happen also when you use [defragmentation](@ref defragmentation).\n\n\\section general_considerations_allocation_algorithm Allocation algorithm\n\nThe library uses following algorithm for allocation, in order:\n\n-# Try to find free range of memory in existing blocks.\n-# If failed, try to create a new block of `VkDeviceMemory`, with preferred block size.\n-# If failed, try to create such block with size/2, size/4, size/8.\n-# If failed and #VMA_ALLOCATION_CREATE_CAN_MAKE_OTHER_LOST_BIT flag was\n   specified, try to find space in existing blocks, possilby making some other\n   allocations lost.\n-# If failed, try to allocate separate `VkDeviceMemory` for this allocation,\n   just like when you use #VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT.\n-# If failed, choose other memory type that meets the requirements specified in\n   VmaAllocationCreateInfo and go to point 1.\n-# If failed, return `VK_ERROR_OUT_OF_DEVICE_MEMORY`.\n\n\\section general_considerations_features_not_supported Features not supported\n\nFeatures deliberately excluded from the scope of this library:\n\n- **Data transfer.** Uploading (streaming) and downloading data of buffers and images\n  between CPU and GPU memory and related synchronization is responsibility of the user.\n  Defining some \"texture\" object that would automatically stream its data from a\n  staging copy in CPU memory to GPU memory would rather be a feature of another,\n  higher-level library implemented on top of VMA.\n- **Recreation of buffers and images.** Although the library has functions for\n  buffer and image creation (vmaCreateBuffer(), vmaCreateImage()), you need to\n  recreate these objects yourself after defragmentation. That is because the big\n  structures `VkBufferCreateInfo`, `VkImageCreateInfo` are not stored in\n  #VmaAllocation object.\n- **Handling CPU memory allocation failures.** When dynamically creating small C++\n  objects in CPU memory (not Vulkan memory), allocation failures are not checked\n  and handled gracefully, because that would complicate code significantly and\n  is usually not needed in desktop PC applications anyway.\n  Success of an allocation is just checked with an assert.\n- **Code free of any compiler warnings.** Maintaining the library to compile and\n  work correctly on so many different platforms is hard enough. Being free of\n  any warnings, on any version of any compiler, is simply not feasible.\n  There are many preprocessor macros that make some variables unused, function parameters unreferenced,\n  or conditional expressions constant in some configurations.\n  The code of this library should not be bigger or more complicated just to silence these warnings.\n  It is recommended to disable such warnings instead.\n- This is a C++ library with C interface. **Bindings or ports to any other programming languages** are welcome as external projects but\n  are not going to be included into this repository.\n*/",
			"file": "build_external/include/VulkanMemoryAllocator/vk_mem_alloc.h",
			"file_size": 775484,
			"file_write_time": 132828819621308737,
			"settings":
			{
				"buffer_size": 754801,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/FalcorVK.h",
			"settings":
			{
				"buffer_size": 6800,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFYMAAAAAAAAVwwAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVgwAAAAAAABWDAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"paste",
					null,
					"AQAAAFcMAAAAAAAAsAwAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVwwAAAAAAABXDAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "extern"
					},
					"BgAAAFcMAAAAAAAAWAwAAAAAAAAAAAAAWAwAAAAAAABZDAAAAAAAAAAAAABZDAAAAAAAAFoMAAAAAAAAAAAAAFoMAAAAAAAAWwwAAAAAAAAAAAAAWwwAAAAAAABcDAAAAAAAAAAAAABcDAAAAAAAAF0MAAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVwwAAAAAAABXDAAAAAAAAAAAAAAAAAAA"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAF0MAAAAAAAAXgwAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXQwAAAAAAABdDAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"left_delete",
					null,
					"AQAAALEMAAAAAAAAsQwAAAAAAAAEAAAAID0gMA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsQwAAAAAAAC1DAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"paste",
					null,
					"AQAAALMMAAAAAAAAGA8AAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAswwAAAAAAACzDAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAALMMAAAAAAAAtAwAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAswwAAAAAAACzDAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"paste",
					null,
					"AQAAALQMAAAAAAAAuwwAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtAwAAAAAAAC0DAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"paste",
					null,
					"AQAAAAINAAAAAAAACQ0AAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAg0AAAAAAAACDQAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"paste",
					null,
					"AQAAAFINAAAAAAAAWQ0AAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUg0AAAAAAABSDQAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"paste",
					null,
					"AQAAAK4NAAAAAAAAtQ0AAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArg0AAAAAAACuDQAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"paste",
					null,
					"AQAAABAOAAAAAAAAFw4AAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEA4AAAAAAAAQDgAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"paste",
					null,
					"AQAAAGQOAAAAAAAAaw4AAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZA4AAAAAAABkDgAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"paste",
					null,
					"AQAAALIOAAAAAAAAuQ4AAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsg4AAAAAAACyDgAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"paste",
					null,
					"AQAAAAgPAAAAAAAADw8AAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACA8AAAAAAAAIDwAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"left_delete",
					null,
					"AQAAAFcMAAAAAAAAVwwAAAAAAABcAAAAZXh0ZXJuIFBGTl92a0dldEFjY2VsZXJhdGlvblN0cnVjdHVyZUJ1aWxkU2l6ZXNLSFIgdmtHZXRBY2NlbGVyYXRpb25TdHJ1Y3R1cmVCdWlsZFNpemVzS0hSOwo",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVwwAAAAAAACzDAAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"left_delete",
					null,
					"AQAAACYMAAAAAAAAJgwAAAAAAAABAAAACg",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJwwAAAAAAAAnDAAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAACYMAAAAAAAAJwwAAAAAAAAAAAAAJwwAAAAAAAAoDAAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJgwAAAAAAAAmDAAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"left_delete",
					null,
					"AQAAAFcMAAAAAAAAVwwAAAAAAAABAAAACg",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWAwAAAAAAABYDAAAAAAAAAAAAAAAAAAA"
				],
				[
					108,
					4,
					"left_delete",
					null,
					"BAAAAPcIAAAAAAAA9wgAAAAAAADVAgAALy9QRk5fdmtHZXRCdWZmZXJEZXZpY2VBZGRyZXNzS0hSIHZrR2V0QnVmZmVyRGV2aWNlQWRkcmVzc0tIUjsKLy9QRk5fdmtDbWRUcmFjZVJheXNLSFIgdmtDbWRUcmFjZVJheXNLSFI7Ci8qClBGTl92a0NyZWF0ZUFjY2VsZXJhdGlvblN0cnVjdHVyZUtIUiB2a0NyZWF0ZUFjY2VsZXJhdGlvblN0cnVjdHVyZUtIUjsKUEZOX3ZrRGVzdHJveUFjY2VsZXJhdGlvblN0cnVjdHVyZUtIUiB2a0Rlc3Ryb3lBY2NlbGVyYXRpb25TdHJ1Y3R1cmVLSFI7ClBGTl92a0dldEFjY2VsZXJhdGlvblN0cnVjdHVyZUJ1aWxkU2l6ZXNLSFIgdmtHZXRBY2NlbGVyYXRpb25TdHJ1Y3R1cmVCdWlsZFNpemVzS0hSOwpQRk5fdmtHZXRBY2NlbGVyYXRpb25TdHJ1Y3R1cmVEZXZpY2VBZGRyZXNzS0hSIHZrR2V0QWNjZWxlcmF0aW9uU3RydWN0dXJlRGV2aWNlQWRkcmVzc0tIUjsKUEZOX3ZrQ21kQnVpbGRBY2NlbGVyYXRpb25TdHJ1Y3R1cmVzS0hSIHZrQ21kQnVpbGRBY2NlbGVyYXRpb25TdHJ1Y3R1cmVzS0hSOwpQRk5fdmtCdWlsZEFjY2VsZXJhdGlvblN0cnVjdHVyZXNLSFIgdmtCdWlsZEFjY2VsZXJhdGlvblN0cnVjdHVyZXNLSFI7ClBGTl92a0dldFJheVRyYWNpbmdTaGFkZXJHcm91cEhhbmRsZXNLSFIgdmtHZXRSYXlUcmFjaW5nU2hhZGVyR3JvdXBIYW5kbGVzS0hSOwpQRk5fdmtDcmVhdGVSYXlUcmFjaW5nUGlwZWxpbmVzS0hSIHZrQ3JlYXRlUmF5VHJhY2luZ1BpcGVsaW5lc0tIUjsKKi/2CAAAAAAAAPYIAAAAAAAAAQAAAAr1CAAAAAAAAPUIAAAAAAAAAQAAAAr0CAAAAAAAAPQIAAAAAAAAAQAAAAo",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzAsAAAAAAAD3CAAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAANQLAAAAAAAA1QsAAAAAAAAAAAAA1QsAAAAAAADWCwAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1AsAAAAAAADUCwAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "\nextern"
					},
					"BwAAANMLAAAAAAAA1AsAAAAAAAAAAAAA1AsAAAAAAADVCwAAAAAAAAAAAADVCwAAAAAAANYLAAAAAAAAAAAAANYLAAAAAAAA1wsAAAAAAAAAAAAA1wsAAAAAAADYCwAAAAAAAAAAAADYCwAAAAAAANkLAAAAAAAAAAAAANkLAAAAAAAA2gsAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0wsAAAAAAADTCwAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " PFN"
					},
					"BAAAANoLAAAAAAAA2wsAAAAAAAAAAAAA2wsAAAAAAADcCwAAAAAAAAAAAADcCwAAAAAAAN0LAAAAAAAAAAAAAN0LAAAAAAAA3gsAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2gsAAAAAAADaCwAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAN4LAAAAAAAA3wsAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3gsAAAAAAADeCwAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"paste",
					null,
					"AQAAAN8LAAAAAAAADAwAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3wsAAAAAAADfCwAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAwMAAAAAAAADQwAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADAwAAAAAAAAMDAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"paste",
					null,
					"AQAAAA0MAAAAAAAAOgwAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADQwAAAAAAAANDAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADoMAAAAAAAAOwwAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOgwAAAAAAAA6DAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAADsMAAAAAAAAPAwAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOwwAAAAAAAA7DAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANQLAAAAAAAA1QsAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1AsAAAAAAADUCwAAAAAAAAAAAAAAAAAA"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "extern"
					},
					"BgAAAD0MAAAAAAAAPgwAAAAAAAAAAAAAPgwAAAAAAAA/DAAAAAAAAAAAAAA/DAAAAAAAAEAMAAAAAAAAAAAAAEAMAAAAAAAAQQwAAAAAAAAAAAAAQQwAAAAAAABCDAAAAAAAAAAAAABCDAAAAAAAAEMMAAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPQwAAAAAAAA9DAAAAAAAAAAAAAAAAAAA"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " P"
					},
					"AgAAAEMMAAAAAAAARAwAAAAAAAAAAAAARAwAAAAAAABFDAAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQwwAAAAAAABDDAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "FN_"
					},
					"AwAAAEUMAAAAAAAARgwAAAAAAAAAAAAARgwAAAAAAABHDAAAAAAAAAAAAABHDAAAAAAAAEgMAAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARQwAAAAAAABFDAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"paste",
					null,
					"AQAAAEgMAAAAAAAAaQwAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASAwAAAAAAABIDAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGkMAAAAAAAAagwAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaQwAAAAAAABpDAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"paste",
					null,
					"AQAAAGoMAAAAAAAAiwwAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAagwAAAAAAABqDAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIsMAAAAAAAAjAwAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiwwAAAAAAACLDAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": "\nextger"
					},
					"BwAAANQLAAAAAAAA1QsAAAAAAAAAAAAA1QsAAAAAAADWCwAAAAAAAAAAAADWCwAAAAAAANcLAAAAAAAAAAAAANcLAAAAAAAA2AsAAAAAAAAAAAAA2AsAAAAAAADZCwAAAAAAAAAAAADZCwAAAAAAANoLAAAAAAAAAAAAANoLAAAAAAAA2wsAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANQLAAAAAAAA1AsAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					3,
					"left_delete",
					null,
					"AwAAANoLAAAAAAAA2gsAAAAAAAABAAAActkLAAAAAAAA2QsAAAAAAAABAAAAZdgLAAAAAAAA2AsAAAAAAAABAAAAZw",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANsLAAAAAAAA2wsAAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "ern"
					},
					"AwAAANgLAAAAAAAA2QsAAAAAAAAAAAAA2QsAAAAAAADaCwAAAAAAAAAAAADaCwAAAAAAANsLAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANgLAAAAAAAA2AsAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": " PF"
					},
					"AwAAANsLAAAAAAAA3AsAAAAAAAAAAAAA3AsAAAAAAADdCwAAAAAAAAAAAADdCwAAAAAAAN4LAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANsLAAAAAAAA2wsAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "N_"
					},
					"AgAAAN4LAAAAAAAA3wsAAAAAAAAAAAAA3wsAAAAAAADgCwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN4LAAAAAAAA3gsAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"paste",
					null,
					"AQAAAOALAAAAAAAACgwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOALAAAAAAAA4AsAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAoMAAAAAAAACwwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAoMAAAAAAAACgwAAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"paste",
					null,
					"AQAAAAsMAAAAAAAANQwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAsMAAAAAAAACwwAAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADUMAAAAAAAANgwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADUMAAAAAAAANQwAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"AwAAAO4MAAAAAAAA7wwAAAAAAAAAAAAA7wwAAAAAAADwDAAAAAAAAAAAAADwDAAAAAAAAPEMAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuDAAAAAAAAO4MAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "extern"
					},
					"BgAAAPAMAAAAAAAA8QwAAAAAAAAAAAAA8QwAAAAAAADyDAAAAAAAAAAAAADyDAAAAAAAAPMMAAAAAAAAAAAAAPMMAAAAAAAA9AwAAAAAAAAAAAAA9AwAAAAAAAD1DAAAAAAAAAAAAAD1DAAAAAAAAPYMAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwDAAAAAAAAPAMAAAAAAAAAAAAAAAAAAA"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPYMAAAAAAAA9wwAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2DAAAAAAAAPYMAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"paste",
					null,
					"AQAAAPcMAAAAAAAAbw0AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3DAAAAAAAAPcMAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"right_delete",
					null,
					"AQAAAPcMAAAAAAAA9wwAAAAAAAABAAAAYA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3DAAAAAAAAPcMAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"right_delete",
					null,
					"AQAAABENAAAAAAAAEQ0AAAAAAAABAAAAJw",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAARDQAAAAAAABENAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABENAAAAAAAAEg0AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAARDQAAAAAAABENAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "\nextern"
					},
					"BwAAABINAAAAAAAAEw0AAAAAAAAAAAAAEw0AAAAAAAAUDQAAAAAAAAAAAAAUDQAAAAAAABUNAAAAAAAAAAAAABUNAAAAAAAAFg0AAAAAAAAAAAAAFg0AAAAAAAAXDQAAAAAAAAAAAAAXDQAAAAAAABgNAAAAAAAAAAAAABgNAAAAAAAAGQ0AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASDQAAAAAAABINAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABkNAAAAAAAAGg0AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAZDQAAAAAAABkNAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"paste",
					null,
					"AQAAABoNAAAAAAAAOQ0AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAaDQAAAAAAABoNAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADkNAAAAAAAAOg0AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5DQAAAAAAADkNAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "PFN"
					},
					"AwAAAPcMAAAAAAAA+AwAAAAAAAAAAAAA+AwAAAAAAAD5DAAAAAAAAAAAAAD5DAAAAAAAAPoMAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3DAAAAAAAAPcMAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPoMAAAAAAAA+wwAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6DAAAAAAAAPoMAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"left_delete",
					null,
					"AQAAAPoMAAAAAAAA+gwAAAAAAAABAAAAIA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD7DAAAAAAAAPsMAAAAAAAAAAAAAAAA8L8"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "_+"
					},
					"AgAAAPoMAAAAAAAA+wwAAAAAAAAAAAAA+wwAAAAAAAD8DAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6DAAAAAAAAPoMAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"left_delete",
					null,
					"AQAAAPsMAAAAAAAA+wwAAAAAAAABAAAAKw",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD8DAAAAAAAAPwMAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"paste",
					null,
					"AQAAAPsMAAAAAAAAFQ0AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD7DAAAAAAAAPsMAAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABUNAAAAAAAAFg0AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAVDQAAAAAAABUNAAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "PFN_"
					},
					"BAAAADkNAAAAAAAAOg0AAAAAAAAAAAAAOg0AAAAAAAA7DQAAAAAAAAAAAAA7DQAAAAAAADwNAAAAAAAAAAAAADwNAAAAAAAAPQ0AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5DQAAAAAAADkNAAAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					1,
					"paste",
					null,
					"AQAAAD0NAAAAAAAAVw0AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA9DQAAAAAAAD0NAAAAAAAAAAAAAAAA8L8"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFcNAAAAAAAAWA0AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABXDQAAAAAAAFcNAAAAAAAAAAAAAAAA8L8"
				],
				[
					65,
					1,
					"paste",
					null,
					"AgAAADkNAAAAAAAAWA0AAAAAAAAAAAAAWA0AAAAAAABYDQAAAAAAAB4AAABQRk5fdmtEZWZlcnJlZE9wZXJhdGlvbkpvaW5LSFI",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5DQAAAAAAAFcNAAAAAAAAAAAAAAAA8L8"
				],
				[
					71,
					1,
					"left_delete",
					null,
					"AQAAAHoNAAAAAAAAeg0AAAAAAABbAAAALi4vLi4vZGVidWcvbGliL2xpYmZhbGNvcl9saWIuc286IHVuZGVmaW5lZCByZWZlcmVuY2UgdG8gYHZrR2V0RGVmZXJyZWRPcGVyYXRpb25SZXN1bHRLSFInCg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB6DQAAAAAAANUNAAAAAAAAAAAAAAAA8L8"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "PFN_"
					},
					"BAAAADkNAAAAAAAAOg0AAAAAAAAAAAAAOg0AAAAAAAA7DQAAAAAAAAAAAAA7DQAAAAAAADwNAAAAAAAAAAAAADwNAAAAAAAAPQ0AAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5DQAAAAAAADkNAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					2,
					"right_delete",
					null,
					"AgAAAIANAAAAAAAAgA0AAAAAAAABAAAAL4ANAAAAAAAAgA0AAAAAAAABAAAALw",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIANAAAAAAAAgA0AAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					1,
					"left_delete",
					null,
					"AQAAAH4NAAAAAAAAfg0AAAAAAAABAAAACg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH8NAAAAAAAAfw0AAAAAAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKRenderContext.cpp",
			"settings":
			{
				"buffer_size": 17866,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/RenderContext.h",
			"settings":
			{
				"buffer_size": 12254,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": "false"
					},
					"BgAAAOkSAAAAAAAA6hIAAAAAAAAAAAAA6hIAAAAAAADqEgAAAAAAAAQAAAB0cnVl6hIAAAAAAADrEgAAAAAAAAAAAADrEgAAAAAAAOwSAAAAAAAAAAAAAOwSAAAAAAAA7RIAAAAAAAAAAAAA7RIAAAAAAADuEgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO0SAAAAAAAA6RIAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "src/Falcor/Core/BufferTypes/ParameterBlock.h",
			"settings":
			{
				"buffer_size": 20722,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					6,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAGUpAAAAAAAAZikAAAAAAAAAAAAAZikAAAAAAABqKQAAAAAAAAAAAABqKQAAAAAAAGspAAAAAAAAAAAAAGspAAAAAAAAbykAAAAAAAAAAAAAZikAAAAAAABmKQAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAABAAAAZSkAAAAAAABlKQAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"paste",
					null,
					"AQAAAGspAAAAAAAAXyoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaykAAAAAAABrKQAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "Accelera"
					},
					"CQAAAHcpAAAAAAAAeCkAAAAAAAAAAAAAeCkAAAAAAAB4KQAAAAAAAAMAAABTUlZ4KQAAAAAAAHkpAAAAAAAAAAAAAHkpAAAAAAAAeikAAAAAAAAAAAAAeikAAAAAAAB7KQAAAAAAAAAAAAB7KQAAAAAAAHwpAAAAAAAAAAAAAHwpAAAAAAAAfSkAAAAAAAAAAAAAfSkAAAAAAAB+KQAAAAAAAAAAAAB+KQAAAAAAAH8pAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdykAAAAAAAB6KQAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "tion"
					},
					"BAAAAH8pAAAAAAAAgCkAAAAAAAAAAAAAgCkAAAAAAACBKQAAAAAAAAAAAACBKQAAAAAAAIIpAAAAAAAAAAAAAIIpAAAAAAAAgykAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfykAAAAAAAB/KQAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " S"
					},
					"AgAAAIMpAAAAAAAAhCkAAAAAAAAAAAAAhCkAAAAAAACFKQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgykAAAAAAACDKQAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					2,
					"left_delete",
					null,
					"AgAAAIQpAAAAAAAAhCkAAAAAAAABAAAAU4MpAAAAAAAAgykAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAhSkAAAAAAACFKQAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIMpAAAAAAAAhCkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgykAAAAAAACDKQAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"left_delete",
					null,
					"AQAAAIMpAAAAAAAAgykAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAhCkAAAAAAACEKQAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " struc"
					},
					"BgAAAIMpAAAAAAAAhCkAAAAAAAAAAAAAhCkAAAAAAACFKQAAAAAAAAAAAACFKQAAAAAAAIYpAAAAAAAAAAAAAIYpAAAAAAAAhykAAAAAAAAAAAAAhykAAAAAAACIKQAAAAAAAAAAAACIKQAAAAAAAIkpAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgykAAAAAAACDKQAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "ture"
					},
					"BAAAAIkpAAAAAAAAiikAAAAAAAAAAAAAiikAAAAAAACLKQAAAAAAAAAAAACLKQAAAAAAAIwpAAAAAAAAAAAAAIwpAAAAAAAAjSkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiSkAAAAAAACJKQAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"right_delete",
					null,
					"AQAAAHcpAAAAAAAAdykAAAAAAAABAAAAQQ",
					"AQAAAAAAAAABAAAAdykAAAAAAAB3KQAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAHcpAAAAAAAAeCkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdykAAAAAAAB3KQAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"paste",
					null,
					"AgAAAEcqAAAAAAAAYSoAAAAAAAAAAAAAYSoAAAAAAABhKgAAAAAAACkAAABjb25zdCBTaGFkZXJSZXNvdXJjZVZpZXc6OlNoYXJlZFB0ciYgcFNydg",
					"AQAAAAAAAAABAAAARyoAAAAAAABwKgAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " as"
					},
					"AwAAAGEqAAAAAAAAYioAAAAAAAAAAAAAYioAAAAAAABjKgAAAAAAAAAAAABjKgAAAAAAAGQqAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYSoAAAAAAABhKgAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"left_delete",
					null,
					"AQAAAGMqAAAAAAAAYyoAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAZCoAAAAAAABkKgAAAAAAAAAAAAAAOIZA"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "ccel"
					},
					"BAAAAGMqAAAAAAAAZCoAAAAAAAAAAAAAZCoAAAAAAABlKgAAAAAAAAAAAABlKgAAAAAAAGYqAAAAAAAAAAAAAGYqAAAAAAAAZyoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYyoAAAAAAABjKgAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"right_delete",
					null,
					"AQAAAHcpAAAAAAAAdykAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAdykAAAAAAAB3KQAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAHcpAAAAAAAAeCkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdykAAAAAAAB3KQAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "A"
					},
					"AQAAACEqAAAAAAAAIioAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAISoAAAAAAAAhKgAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					2,
					"right_delete",
					null,
					"AgAAACMqAAAAAAAAIyoAAAAAAAABAAAAciMqAAAAAAAAIyoAAAAAAAABAAAAdg",
					"AQAAAAAAAAABAAAAIyoAAAAAAAAjKgAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAKJHAAAAAAAAo0cAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAokcAAAAAAACiRwAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"reindent",
					null,
					"AQAAAKJHAAAAAAAApkcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAokcAAAAAAACiRwAAAAAAAAAAAAAAAAAA"
				],
				[
					59,
					1,
					"paste",
					null,
					"AQAAAKZHAAAAAAAAwEcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApkcAAAAAAACmRwAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "              m"
					},
					"DwAAAMBHAAAAAAAAwUcAAAAAAAAAAAAAwUcAAAAAAADCRwAAAAAAAAAAAADCRwAAAAAAAMNHAAAAAAAAAAAAAMNHAAAAAAAAxEcAAAAAAAAAAAAAxEcAAAAAAADFRwAAAAAAAAAAAADFRwAAAAAAAMZHAAAAAAAAAAAAAMZHAAAAAAAAx0cAAAAAAAAAAAAAx0cAAAAAAADIRwAAAAAAAAAAAADIRwAAAAAAAMlHAAAAAAAAAAAAAMlHAAAAAAAAykcAAAAAAAAAAAAAykcAAAAAAADLRwAAAAAAAAAAAADLRwAAAAAAAMxHAAAAAAAAAAAAAMxHAAAAAAAAzUcAAAAAAAAAAAAAzUcAAAAAAADORwAAAAAAAAAAAADORwAAAAAAAM9HAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwEcAAAAAAADARwAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "Accel;"
					},
					"BgAAAM9HAAAAAAAA0EcAAAAAAAAAAAAA0EcAAAAAAADRRwAAAAAAAAAAAADRRwAAAAAAANJHAAAAAAAAAAAAANJHAAAAAAAA00cAAAAAAAAAAAAA00cAAAAAAADURwAAAAAAAAAAAADURwAAAAAAANVHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAz0cAAAAAAADPRwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/RenderPasses/SkyBox/SkyBox.slang",
			"settings":
			{
				"buffer_size": 2906,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					8,
					1,
					"left_delete",
					null,
					"AQAAALMJAAAAAAAAswkAAAAAAAAfAAAAICAgIHJldHVybiBmbG9hdDQoMSwgMCwgMCwgMSk7Cg",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSCQAAAAAAALMJAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/RenderPasses/DepthPass/DepthPass.ps.slang",
			"settings":
			{
				"buffer_size": 3019,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					6,
					1,
					"left_delete",
					null,
					"AQAAAKkKAAAAAAAAqQoAAAAAAAApAAAAICAgIGlmICgwLjUgPCBzYW1wbGVOZXh0MUQoc2cpKSBkaXNjYXJkOwo",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpCgAAAAAAANIKAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/lava_lib/renderer.cpp",
			"settings":
			{
				"buffer_size": 25771,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					2,
					"right_delete",
					null,
					"AgAAABIxAAAAAAAAEjEAAAAAAAABAAAALxIxAAAAAAAAEjEAAAAAAAABAAAALw",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASMQAAAAAAABIxAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAEk0AAAAAAAASjQAAAAAAAAAAAAASjQAAAAAAABLNAAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABJNAAAAAAAAEk0AAAAAAAAAAAAAAAAQkA"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAABIxAAAAAAAAEzEAAAAAAAAAAAAAEzEAAAAAAAAUMQAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEjEAAAAAAAASMQAAAAAAAAAAAAAAAEJA"
				],
				[
					13,
					2,
					"right_delete",
					null,
					"AgAAAPYzAAAAAAAA9jMAAAAAAAABAAAAL/YzAAAAAAAA9jMAAAAAAAABAAAALw",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9jMAAAAAAAD2MwAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAD4wAAAAAAAAPzAAAAAAAAAAAAAAPzAAAAAAAABAMAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD4wAAAAAAAAPjAAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAIUwAAAAAAAAhjAAAAAAAAAAAAAAhjAAAAAAAACHMAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIUwAAAAAAAAhTAAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAM8wAAAAAAAA0DAAAAAAAAAAAAAA0DAAAAAAAADRMAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM8wAAAAAAAAzzAAAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAM40AAAAAAAAzzQAAAAAAAAAAAAAzzQAAAAAAADTNAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM40AAAAAAAAzjQAAAAAAAAAAAAAAADwvw"
				],
				[
					33,
					1,
					"paste",
					null,
					"AQAAANM0AAAAAAAABjUAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANM0AAAAAAAA0zQAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"paste",
					null,
					"AgAAAO40AAAAAAAACTUAAAAAAAAAAAAACTUAAAAAAAAJNQAAAAAAABUAAABBY2N1bXVsYXRlUGFzcy5vdXRwdXQ",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO40AAAAAAAAAzUAAAAAAAAAAAAAAADwvw"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAJs0AAAAAAAAnDQAAAAAAAAAAAAAnDQAAAAAAACdNAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJs0AAAAAAAAmzQAAAAAAAAAAAAAAADwvw"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADdaAAAAAAAAOFoAAAAAAAAAAAAAOFoAAAAAAABEWgAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADdaAAAAAAAAN1oAAAAAAAAAAAAAAADwvw"
				],
				[
					55,
					1,
					"paste",
					null,
					"AQAAAERaAAAAAAAAYVoAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAERaAAAAAAAARFoAAAAAAAAAAAAAAADwvw"
				],
				[
					61,
					1,
					"paste",
					null,
					"AQAAAERaAAAAAAAArloAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAERaAAAAAAAARFoAAAAAAAAAAAAAAADwvw"
				],
				[
					62,
					1,
					"right_delete",
					null,
					"AQAAAK5aAAAAAAAArloAAAAAAAABAAAAIg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK5aAAAAAAAArloAAAAAAAAAAAAAAADwvw"
				],
				[
					68,
					1,
					"paste",
					null,
					"AQAAAMpaAAAAAAAAzVoAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMpaAAAAAAAAyloAAAAAAAAAAAAAAADwvw"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAACVZAAAAAAAAJlkAAAAAAAAAAAAAJlkAAAAAAAAnWQAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACVZAAAAAAAAJVkAAAAAAAAAAAAAAADwvw"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAEZaAAAAAAAAR1oAAAAAAAAAAAAAR1oAAAAAAABIWgAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEZaAAAAAAAARloAAAAAAAAAAAAAAADwvw"
				],
				[
					83,
					2,
					"left_delete",
					null,
					"AgAAACZZAAAAAAAAJlkAAAAAAAABAAAALyVZAAAAAAAAJVkAAAAAAAABAAAALw",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACdZAAAAAAAAJ1kAAAAAAAAAAAAAAIBfQA"
				],
				[
					87,
					2,
					"right_delete",
					null,
					"AgAAAJs0AAAAAAAAmzQAAAAAAAABAAAAL5s0AAAAAAAAmzQAAAAAAAABAAAALw",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJs0AAAAAAAAmzQAAAAAAAAAAAAAAADwvw"
				],
				[
					90,
					1,
					"left_delete",
					null,
					"AQAAANM0AAAAAAAA0zQAAAAAAAA+AAAAbXBSZW5kZXJHcmFwaC0+bWFya091dHB1dCgiTWluaW1hbFBhdGhUcmFjZXJQYXNzLmNvbG9yIik7CiAgICA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANM0AAAAAAAAETUAAAAAAAAAAAAAAABCQA"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAosAAAAAAAACywAAAAAAAAAAAAACywAAAAAAAAPLAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAosAAAAAAAACiwAAAAAAAAAAAAAAADwvw"
				],
				[
					108,
					1,
					"paste",
					null,
					"AQAAAA8sAAAAAAAAQCwAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA8sAAAAAAAADywAAAAAAAAAAAAAAADwvw"
				],
				[
					139,
					2,
					"left_delete",
					null,
					"AgAAAA8sAAAAAAAADywAAAAAAAAxAAAAbXBMaWdodGluZ1Bhc3MtPnNldFNjZW5lKHBSZW5kZXJDb250ZXh0LCBwU2NlbmUpOwssAAAAAAAACywAAAAAAAAEAAAAICAgIA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA8sAAAAAAAAQCwAAAAAAAAAAAAAAADwvw"
				],
				[
					141,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAKwrAAAAAAAArSsAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKwrAAAAAAAArCsAAAAAAAAAAAAAAAAAAA"
				],
				[
					143,
					1,
					"reindent",
					null,
					"AQAAAKwrAAAAAAAAsCsAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKwrAAAAAAAArCsAAAAAAAAAAAAAAAAAAA"
				],
				[
					144,
					1,
					"paste",
					null,
					"AQAAALArAAAAAAAA4SsAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALArAAAAAAAAsCsAAAAAAAAAAAAAAADwvw"
				],
				[
					152,
					1,
					"paste",
					null,
					"AgAAALArAAAAAAAAwysAAAAAAAAAAAAAwysAAAAAAADDKwAAAAAAAA4AAABtcExpZ2h0aW5nUGFzcw",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALArAAAAAAAAvisAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"indent",
					null,
					"CwAAAGBbAAAAAAAAZFsAAAAAAAAAAAAAl1sAAAAAAACbWwAAAAAAAAAAAAC6WwAAAAAAAL5bAAAAAAAAAAAAAOxbAAAAAAAA8FsAAAAAAAAAAAAAG1wAAAAAAAAfXAAAAAAAAAAAAABvXAAAAAAAAHNcAAAAAAAAAAAAAKRcAAAAAAAAqFwAAAAAAAAAAAAAAV0AAAAAAAAFXQAAAAAAAAAAAAASXQAAAAAAABZdAAAAAAAAAAAAAKhdAAAAAAAArF0AAAAAAAAAAAAAG14AAAAAAAAfXgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB1eAAAAAAAAYFsAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": "/*"
					},
					"AgAAAJ0xAAAAAAAAnjEAAAAAAAAAAAAAnjEAAAAAAACfMQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnTEAAAAAAACdMQAAAAAAAAAAAAAAAAAA"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAIk0AAAAAAAAijQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiTQAAAAAAACJNAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "/*"
					},
					"AgAAAIk0AAAAAAAAijQAAAAAAAAAAAAAijQAAAAAAACLNAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiTQAAAAAAACJNAAAAAAAAAAAAAAAAAAA"
				],
				[
					10,
					2,
					"left_delete",
					null,
					"AgAAAIo0AAAAAAAAijQAAAAAAAABAAAAKok0AAAAAAAAiTQAAAAAAAABAAAALw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAizQAAAAAAACLNAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "*/"
					},
					"AgAAAIk0AAAAAAAAijQAAAAAAAAAAAAAijQAAAAAAACLNAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiTQAAAAAAACJNAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					2,
					"right_delete",
					null,
					"AgAAAJA0AAAAAAAAkDQAAAAAAAABAAAAL5A0AAAAAAAAkDQAAAAAAAABAAAALw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkDQAAAAAAACQNAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					2,
					"right_delete",
					null,
					"AgAAAHowAAAAAAAAejAAAAAAAAABAAAAL3owAAAAAAAAejAAAAAAAAABAAAALw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAejAAAAAAAAB6MAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					2,
					"right_delete",
					null,
					"AgAAAL8wAAAAAAAAvzAAAAAAAAABAAAAL78wAAAAAAAAvzAAAAAAAAABAAAALw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvzAAAAAAAAC/MAAAAAAAAAAAAAAAAEJA"
				],
				[
					24,
					2,
					"right_delete",
					null,
					"AgAAAAcxAAAAAAAABzEAAAAAAAABAAAALwcxAAAAAAAABzEAAAAAAAABAAAALw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABzEAAAAAAAAHMQAAAAAAAAAAAAAAAEJA"
				],
				[
					26,
					2,
					"right_delete",
					null,
					"AgAAAE4xAAAAAAAATjEAAAAAAAABAAAAL04xAAAAAAAATjEAAAAAAAABAAAALw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATjEAAAAAAABOMQAAAAAAAAAAAAAAAEJA"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAIg0AAAAAAAAiTQAAAAAAAAAAAAAiTQAAAAAAACKNAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiDQAAAAAAACINAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/lava_lib/render_engine.cpp",
			"settings":
			{
				"buffer_size": 2837,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "class RenderEngine {"
			},
			"undo_stack":
			[
				[
					324,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAH8FAAAAAAAAgAUAAAAAAAAAAAAAgAUAAAAAAACIBQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH8FAAAAAAAAfwUAAAAAAAAAAAAAAADwvw"
				],
				[
					328,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AgAAAHUAAAAAAAAAdgAAAAAAAAAAAAAAgQUAAAAAAACBBQAAAAAAAAgAAAAgICAgICAgIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHUAAAAAAAAAdQAAAAAAAAAAAAAAAADwvw"
				],
				[
					330,
					4,
					"right_delete",
					null,
					"BAAAALwAAAAAAAAAvAAAAAAAAAABAAAAILwAAAAAAAAAvAAAAAAAAAABAAAAILwAAAAAAAAAvAAAAAAAAAABAAAAILwAAAAAAAAAvAAAAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALwAAAAAAAAAvAAAAAAAAAAAAAAAAABCQA"
				],
				[
					331,
					1,
					"right_delete",
					null,
					"AQAAALwAAAAAAAAAvAAAAAAAAAABAAAAbQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALwAAAAAAAAAvAAAAAAAAAAAAAAAAADwvw"
				],
				[
					332,
					1,
					"insert",
					{
						"characters": "auto"
					},
					"BAAAALwAAAAAAAAAvQAAAAAAAAAAAAAAvQAAAAAAAAC+AAAAAAAAAAAAAAC+AAAAAAAAAL8AAAAAAAAAAAAAAL8AAAAAAAAAwAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALwAAAAAAAAAvAAAAAAAAAAAAAAAAADwvw"
				],
				[
					333,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMAAAAAAAAAAwQAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMAAAAAAAAAAwAAAAAAAAAAAAAAAAADwvw"
				],
				[
					336,
					4,
					"left_delete",
					null,
					"BAAAAEcBAAAAAAAARwEAAAAAAAABAAAAIEYBAAAAAAAARgEAAAAAAAABAAAAIEUBAAAAAAAARQEAAAAAAAABAAAAIEQBAAAAAAAARAEAAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEgBAAAAAAAASAEAAAAAAAAAAAAAAADwvw"
				],
				[
					338,
					4,
					"right_delete",
					null,
					"BAAAAFoBAAAAAAAAWgEAAAAAAAABAAAAIFoBAAAAAAAAWgEAAAAAAAABAAAAIFoBAAAAAAAAWgEAAAAAAAABAAAAIFoBAAAAAAAAWgEAAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFoBAAAAAAAAWgEAAAAAAAAAAAAAAABCQA"
				],
				[
					340,
					4,
					"right_delete",
					null,
					"BAAAAIkBAAAAAAAAiQEAAAAAAAABAAAAIIkBAAAAAAAAiQEAAAAAAAABAAAAIIkBAAAAAAAAiQEAAAAAAAABAAAAIIkBAAAAAAAAiQEAAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIkBAAAAAAAAiQEAAAAAAAAAAAAAAABCQA"
				],
				[
					342,
					5,
					"right_delete",
					null,
					"BQAAAO0BAAAAAAAA7QEAAAAAAAABAAAAIO0BAAAAAAAA7QEAAAAAAAABAAAAIO0BAAAAAAAA7QEAAAAAAAABAAAAIO0BAAAAAAAA7QEAAAAAAAABAAAAIO0BAAAAAAAA7QEAAAAAAAABAAAAYQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO0BAAAAAAAA7QEAAAAAAAAAAAAAAABCQA"
				],
				[
					344,
					4,
					"right_delete",
					null,
					"BAAAAEACAAAAAAAAQAIAAAAAAAABAAAAIEACAAAAAAAAQAIAAAAAAAABAAAAIEACAAAAAAAAQAIAAAAAAAABAAAAIEACAAAAAAAAQAIAAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEACAAAAAAAAQAIAAAAAAAAAAAAAAABCQA"
				],
				[
					346,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAO0BAAAAAAAA7gEAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO0BAAAAAAAA7QEAAAAAAAAAAAAAAABCQA"
				],
				[
					349,
					4,
					"right_delete",
					null,
					"BAAAAIQCAAAAAAAAhAIAAAAAAAABAAAAIIQCAAAAAAAAhAIAAAAAAAABAAAAIIQCAAAAAAAAhAIAAAAAAAABAAAAIIQCAAAAAAAAhAIAAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIQCAAAAAAAAhAIAAAAAAAAAAAAAAADwvw"
				],
				[
					351,
					4,
					"right_delete",
					null,
					"BAAAALkCAAAAAAAAuQIAAAAAAAABAAAAILkCAAAAAAAAuQIAAAAAAAABAAAAILkCAAAAAAAAuQIAAAAAAAABAAAAILkCAAAAAAAAuQIAAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALkCAAAAAAAAuQIAAAAAAAAAAAAAAABCQA"
				],
				[
					353,
					5,
					"right_delete",
					null,
					"BQAAAOMCAAAAAAAA4wIAAAAAAAABAAAAIOMCAAAAAAAA4wIAAAAAAAABAAAAIOMCAAAAAAAA4wIAAAAAAAABAAAAIOMCAAAAAAAA4wIAAAAAAAABAAAAIOMCAAAAAAAA4wIAAAAAAAABAAAAbQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOMCAAAAAAAA4wIAAAAAAAAAAAAAAABCQA"
				],
				[
					355,
					4,
					"right_delete",
					null,
					"BAAAACsDAAAAAAAAKwMAAAAAAAABAAAAICsDAAAAAAAAKwMAAAAAAAABAAAAICsDAAAAAAAAKwMAAAAAAAABAAAAICsDAAAAAAAAKwMAAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACsDAAAAAAAAKwMAAAAAAAAAAAAAAABCQA"
				],
				[
					357,
					4,
					"right_delete",
					null,
					"BAAAAFADAAAAAAAAUAMAAAAAAAABAAAAIFADAAAAAAAAUAMAAAAAAAABAAAAIFADAAAAAAAAUAMAAAAAAAABAAAAIFADAAAAAAAAUAMAAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFADAAAAAAAAUAMAAAAAAAAAAAAAAABCQA"
				],
				[
					359,
					4,
					"right_delete",
					null,
					"BAAAAJkDAAAAAAAAmQMAAAAAAAABAAAAIJkDAAAAAAAAmQMAAAAAAAABAAAAIJkDAAAAAAAAmQMAAAAAAAABAAAAIJkDAAAAAAAAmQMAAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJkDAAAAAAAAmQMAAAAAAAAAAAAAAABCQA"
				],
				[
					361,
					4,
					"right_delete",
					null,
					"BAAAAPEDAAAAAAAA8QMAAAAAAAABAAAAIPEDAAAAAAAA8QMAAAAAAAABAAAAIPEDAAAAAAAA8QMAAAAAAAABAAAAIPEDAAAAAAAA8QMAAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPEDAAAAAAAA8QMAAAAAAAAAAAAAAABCQA"
				],
				[
					364,
					4,
					"right_delete",
					null,
					"BAAAAC8EAAAAAAAALwQAAAAAAAABAAAAIC8EAAAAAAAALwQAAAAAAAABAAAAIC8EAAAAAAAALwQAAAAAAAABAAAAIC8EAAAAAAAALwQAAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC8EAAAAAAAALwQAAAAAAAAAAAAAAABCQA"
				],
				[
					366,
					4,
					"right_delete",
					null,
					"BAAAAI8EAAAAAAAAjwQAAAAAAAABAAAAII8EAAAAAAAAjwQAAAAAAAABAAAAII8EAAAAAAAAjwQAAAAAAAABAAAAII8EAAAAAAAAjwQAAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI8EAAAAAAAAjwQAAAAAAAAAAAAAAABCQA"
				],
				[
					369,
					4,
					"right_delete",
					null,
					"BAAAAOMEAAAAAAAA4wQAAAAAAAABAAAAIOMEAAAAAAAA4wQAAAAAAAABAAAAIOMEAAAAAAAA4wQAAAAAAAABAAAAIOMEAAAAAAAA4wQAAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOMEAAAAAAAA4wQAAAAAAAAAAAAAAABCQA"
				],
				[
					372,
					1,
					"insert",
					{
						"characters": "auto"
					},
					"BAAAAFADAAAAAAAAUQMAAAAAAAAAAAAAUQMAAAAAAABSAwAAAAAAAAAAAABSAwAAAAAAAFMDAAAAAAAAAAAAAFMDAAAAAAAAVAMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFADAAAAAAAAUAMAAAAAAAAAAAAAAADwvw"
				],
				[
					373,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFQDAAAAAAAAVQMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFQDAAAAAAAAVAMAAAAAAAAAAAAAAADwvw"
				],
				[
					374,
					1,
					"right_delete",
					null,
					"AQAAAFUDAAAAAAAAVQMAAAAAAAABAAAAbQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFUDAAAAAAAAVQMAAAAAAAAAAAAAAADwvw"
				],
				[
					377,
					1,
					"right_delete",
					null,
					"AQAAAJ0DAAAAAAAAnQMAAAAAAAABAAAAbQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ0DAAAAAAAAnQMAAAAAAAAAAAAAAADwvw"
				],
				[
					379,
					1,
					"right_delete",
					null,
					"AQAAAPQDAAAAAAAA9AMAAAAAAAABAAAAbQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPQDAAAAAAAA9AMAAAAAAAAAAAAAAABCQA"
				],
				[
					381,
					1,
					"right_delete",
					null,
					"AQAAADEEAAAAAAAAMQQAAAAAAAABAAAAbQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADEEAAAAAAAAMQQAAAAAAAAAAAAAAABCQA"
				],
				[
					383,
					1,
					"right_delete",
					null,
					"AQAAAJAEAAAAAAAAkAQAAAAAAAABAAAAbQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJAEAAAAAAAAkAQAAAAAAAAAAAAAAABCQA"
				],
				[
					385,
					1,
					"right_delete",
					null,
					"AQAAAOMEAAAAAAAA4wQAAAAAAAABAAAAbQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOMEAAAAAAAA4wQAAAAAAAAAAAAAAABCQA"
				],
				[
					389,
					1,
					"right_delete",
					null,
					"AQAAAFQEAAAAAAAAVAQAAAAAAAABAAAAbQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFQEAAAAAAAAVAQAAAAAAAAAAAAAAADwvw"
				],
				[
					392,
					1,
					"paste",
					null,
					"AQAAABsAAAAAAAAAXQAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABsAAAAAAAAAGwAAAAAAAAAAAAAAAADwvw"
				],
				[
					397,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAF4AAAAAAAAAXwAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF4AAAAAAAAAXgAAAAAAAAAAAAAAAADwvw"
				],
				[
					399,
					1,
					"paste",
					null,
					"AQAAAF4AAAAAAAAAcAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF4AAAAAAAAAXgAAAAAAAAAAAAAAAAAAAA"
				],
				[
					401,
					6,
					"left_delete",
					null,
					"BgAAAG0AAAAAAAAAbQAAAAAAAAABAAAAcmwAAAAAAAAAbAAAAAAAAAABAAAAb2sAAAAAAAAAawAAAAAAAAABAAAAY2oAAAAAAAAAagAAAAAAAAABAAAAbGkAAAAAAAAAaQAAAAAAAAABAAAAYWgAAAAAAAAAaAAAAAAAAAABAAAARg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG4AAAAAAAAAbgAAAAAAAAAAAAAAAADwvw"
				],
				[
					402,
					1,
					"insert",
					{
						"characters": "lava"
					},
					"BAAAAGgAAAAAAAAAaQAAAAAAAAAAAAAAaQAAAAAAAABqAAAAAAAAAAAAAABqAAAAAAAAAGsAAAAAAAAAAAAAAGsAAAAAAAAAbAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGgAAAAAAAAAaAAAAAAAAAAAAAAAAADwvw"
				],
				[
					405,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAALAFAAAAAAAAsQUAAAAAAAAAAAAAsQUAAAAAAACyBQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALAFAAAAAAAAsAUAAAAAAAAAAAAAAADwvw"
				],
				[
					407,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAALEFAAAAAAAAsgUAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALEFAAAAAAAAsQUAAAAAAAAAAAAAAAAAAA"
				],
				[
					408,
					1,
					"insert",
					{
						"characters": "  //"
					},
					"BAAAALIFAAAAAAAAswUAAAAAAAAAAAAAswUAAAAAAAC0BQAAAAAAAAAAAAC0BQAAAAAAALUFAAAAAAAAAAAAALUFAAAAAAAAtgUAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALIFAAAAAAAAsgUAAAAAAAAAAAAAAADwvw"
				],
				[
					409,
					1,
					"insert",
					{
						"characters": " namespace"
					},
					"CgAAALYFAAAAAAAAtwUAAAAAAAAAAAAAtwUAAAAAAAC4BQAAAAAAAAAAAAC4BQAAAAAAALkFAAAAAAAAAAAAALkFAAAAAAAAugUAAAAAAAAAAAAAugUAAAAAAAC7BQAAAAAAAAAAAAC7BQAAAAAAALwFAAAAAAAAAAAAALwFAAAAAAAAvQUAAAAAAAAAAAAAvQUAAAAAAAC+BQAAAAAAAAAAAAC+BQAAAAAAAL8FAAAAAAAAAAAAAL8FAAAAAAAAwAUAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALYFAAAAAAAAtgUAAAAAAAAAAAAAAADwvw"
				],
				[
					410,
					1,
					"insert",
					{
						"characters": " lava"
					},
					"BQAAAMAFAAAAAAAAwQUAAAAAAAAAAAAAwQUAAAAAAADCBQAAAAAAAAAAAADCBQAAAAAAAMMFAAAAAAAAAAAAAMMFAAAAAAAAxAUAAAAAAAAAAAAAxAUAAAAAAADFBQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMAFAAAAAAAAwAUAAAAAAAAAAAAAAADwvw"
				],
				[
					416,
					2,
					"right_delete",
					null,
					"AgAAAHAAAAAAAAAAcAAAAAAAAAATAAAAbmFtZXNwYWNlIEZhbGNvciB7CnAAAAAAAAAAcAAAAAAAAAABAAAACg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHAAAAAAAAAAgwAAAAAAAAAAAAAAAADwvw"
				],
				[
					422,
					2,
					"left_delete",
					null,
					"AgAAAIUFAAAAAAAAhQUAAAAAAAAXAAAAfSAgLy8gbmFtZXNwYWNlIEZhbGNvcgqEBQAAAAAAAIQFAAAAAAAAAQAAAAo",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIUFAAAAAAAAnAUAAAAAAAAAAAAAAADwvw"
				],
				[
					425,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAG8AAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAABxAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG8AAAAAAAAAbwAAAAAAAAAAAAAAAADwvw"
				],
				[
					427,
					1,
					"paste",
					null,
					"AQAAAHAAAAAAAAAA0QAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHAAAAAAAAAAcAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					433,
					1,
					"paste",
					null,
					"AQAAAI8AAAAAAAAAnQAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI8AAAAAAAAAjwAAAAAAAAAAAAAAAADwvw"
				],
				[
					436,
					1,
					"right_delete",
					null,
					"AQAAAHAAAAAAAAAAcAAAAAAAAAAHAAAAc3RhdGljIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHcAAAAAAAAAcAAAAAAAAAAAAAAAAADwvw"
				],
				[
					439,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAANYAAAAAAAAA1wAAAAAAAAAAAAAA1wAAAAAAAADXAAAAAAAAAAIAAAA7IA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANYAAAAAAAAA2AAAAAAAAAAAAAAAAADwvw"
				],
				[
					440,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAANcAAAAAAAAA2QAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANcAAAAAAAAA1wAAAAAAAAAAAAAAAADwvw"
				],
				[
					441,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAANgAAAAAAAAA2QAAAAAAAAAAAAAA2QAAAAAAAADaAAAAAAAAAAAAAADZAAAAAAAAANoAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANgAAAAAAAAA2AAAAAAAAAAAAAAAAADwvw"
				],
				[
					446,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAANoAAAAAAAAA2wAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANoAAAAAAAAA2gAAAAAAAAAAAAAAAADwvw"
				],
				[
					447,
					1,
					"left_delete",
					null,
					"AQAAANoAAAAAAAAA2gAAAAAAAAABAAAAcg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANsAAAAAAAAA2wAAAAAAAAAAAAAAAADwvw"
				],
				[
					448,
					1,
					"insert",
					{
						"characters": "swit"
					},
					"BAAAANoAAAAAAAAA2wAAAAAAAAAAAAAA2wAAAAAAAADcAAAAAAAAAAAAAADcAAAAAAAAAN0AAAAAAAAAAAAAAN0AAAAAAAAA3gAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANoAAAAAAAAA2gAAAAAAAAAAAAAAAADwvw"
				],
				[
					449,
					1,
					"insert_completion",
					{
						"completion": "switch",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "switch"
					},
					"AgAAANoAAAAAAAAA2gAAAAAAAAAEAAAAc3dpdNoAAAAAAAAA4AAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN4AAAAAAAAA3gAAAAAAAAAAAAAAAADwvw"
				],
				[
					450,
					1,
					"insert",
					{
						"characters": " ty"
					},
					"AwAAAOAAAAAAAAAA4QAAAAAAAAAAAAAA4QAAAAAAAADiAAAAAAAAAAAAAADiAAAAAAAAAOMAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOAAAAAAAAAA4AAAAAAAAAAAAAAAAADwvw"
				],
				[
					451,
					1,
					"insert_completion",
					{
						"completion": "type",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "type"
					},
					"AgAAAOEAAAAAAAAA4QAAAAAAAAACAAAAdHnhAAAAAAAAAOUAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOMAAAAAAAAA4wAAAAAAAAAAAAAAAADwvw"
				],
				[
					452,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAOUAAAAAAAAA5gAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOUAAAAAAAAA5QAAAAAAAAAAAAAAAADwvw"
				],
				[
					455,
					1,
					"paste",
					null,
					"AgAAANoAAAAAAAAAHwMAAAAAAAAAAAAAHwMAAAAAAAAfAwAAAAAAAAwAAABzd2l0Y2ggdHlwZTo",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANoAAAAAAAAA5gAAAAAAAAAAAAAAAADwvw"
				],
				[
					463,
					1,
					"paste",
					null,
					"AgAAAPgAAAAAAAAAAgEAAAAAAAAAAAAAAgEAAAAAAAACAQAAAAAAABQAAABDYW1lcmFDb250cm9sbGVyVHlwZQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPgAAAAAAAAADAEAAAAAAAAAAAAAAADwvw"
				],
				[
					467,
					1,
					"insert",
					{
						"characters": "Rasterizer"
					},
					"CwAAAAQBAAAAAAAABQEAAAAAAAAAAAAABQEAAAAAAAAFAQAAAAAAAAsAAABGaXJzdFBlcnNvbgUBAAAAAAAABgEAAAAAAAAAAAAABgEAAAAAAAAHAQAAAAAAAAAAAAAHAQAAAAAAAAgBAAAAAAAAAAAAAAgBAAAAAAAACQEAAAAAAAAAAAAACQEAAAAAAAAKAQAAAAAAAAAAAAAKAQAAAAAAAAsBAAAAAAAAAAAAAAsBAAAAAAAADAEAAAAAAAAAAAAADAEAAAAAAAANAQAAAAAAAAAAAAANAQAAAAAAAA4BAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAQBAAAAAAAADwEAAAAAAAAAAAAAAADwvw"
				],
				[
					472,
					1,
					"left_delete",
					null,
					"AQAAANoAAAAAAAAA2gAAAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANsAAAAAAAAA2wAAAAAAAAAAAAAAAADwvw"
				],
				[
					475,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAANoAAAAAAAAA2wAAAAAAAAAAAAAA2wAAAAAAAADcAAAAAAAAAAAAAADcAAAAAAAAAN0AAAAAAAAAAAAAAN0AAAAAAAAA3gAAAAAAAAAAAAAA2wAAAAAAAADbAAAAAAAAAAEAAAAJ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANoAAAAAAAAA2gAAAAAAAAAAAAAAAABCQA"
				],
				[
					477,
					1,
					"insert",
					{
						"characters": "Re"
					},
					"AgAAANoAAAAAAAAA2wAAAAAAAAAAAAAA2wAAAAAAAADcAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANoAAAAAAAAA2gAAAAAAAAAAAAAAAABCQA"
				],
				[
					478,
					1,
					"insert_completion",
					{
						"completion": "RenderEngine",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "RenderEngine"
					},
					"AgAAANoAAAAAAAAA2gAAAAAAAAACAAAAUmXaAAAAAAAAAOYAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANwAAAAAAAAA3AAAAAAAAAAAAAAAAADwvw"
				],
				[
					479,
					1,
					"insert",
					{
						"characters": "::S"
					},
					"AwAAAOYAAAAAAAAA5wAAAAAAAAAAAAAA5wAAAAAAAADoAAAAAAAAAAAAAADoAAAAAAAAAOkAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOYAAAAAAAAA5gAAAAAAAAAAAAAAAADwvw"
				],
				[
					480,
					1,
					"insert_completion",
					{
						"completion": "SharedPtr",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "SharedPtr"
					},
					"AgAAAOgAAAAAAAAA6AAAAAAAAAABAAAAU+gAAAAAAAAA8QAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOkAAAAAAAAA6QAAAAAAAAAAAAAAAADwvw"
				],
				[
					481,
					1,
					"insert",
					{
						"characters": " p"
					},
					"AgAAAPEAAAAAAAAA8gAAAAAAAAAAAAAA8gAAAAAAAADzAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPEAAAAAAAAA8QAAAAAAAAAAAAAAAADwvw"
				],
				[
					482,
					1,
					"insert",
					{
						"characters": "Engine"
					},
					"BgAAAPMAAAAAAAAA9AAAAAAAAAAAAAAA9AAAAAAAAAD1AAAAAAAAAAAAAAD1AAAAAAAAAPYAAAAAAAAAAAAAAPYAAAAAAAAA9wAAAAAAAAAAAAAA9wAAAAAAAAD4AAAAAAAAAAAAAAD4AAAAAAAAAPkAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPMAAAAAAAAA8wAAAAAAAAAAAAAAAADwvw"
				],
				[
					483,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAPkAAAAAAAAA+gAAAAAAAAAAAAAA+gAAAAAAAAD7AAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPkAAAAAAAAA+QAAAAAAAAAAAAAAAADwvw"
				],
				[
					484,
					1,
					"insert",
					{
						"characters": " n"
					},
					"AgAAAPsAAAAAAAAA/AAAAAAAAAAAAAAA/AAAAAAAAAD9AAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPsAAAAAAAAA+wAAAAAAAAAAAAAAAADwvw"
				],
				[
					485,
					1,
					"insert_completion",
					{
						"completion": "nullptr",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "nullptr"
					},
					"AgAAAPwAAAAAAAAA/AAAAAAAAAABAAAAbvwAAAAAAAAAAwEAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP0AAAAAAAAA/QAAAAAAAAAAAAAAAADwvw"
				],
				[
					486,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAAAMBAAAAAAAABAEAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAMBAAAAAAAAAwEAAAAAAAAAAAAAAADwvw"
				],
				[
					487,
					1,
					"left_delete",
					null,
					"AQAAAAMBAAAAAAAAAwEAAAAAAAABAAAAJw",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAQBAAAAAAAABAEAAAAAAAAAAAAAAADwvw"
				],
				[
					488,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAAMBAAAAAAAABAEAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAMBAAAAAAAAAwEAAAAAAAAAAAAAAADwvw"
				],
				[
					490,
					1,
					"insert",
					{
						"characters": "\n\nretun"
					},
					"CgAAAEADAAAAAAAAQQMAAAAAAAAAAAAAQQMAAAAAAABFAwAAAAAAAAAAAABFAwAAAAAAAEYDAAAAAAAAAAAAAEYDAAAAAAAASgMAAAAAAAAAAAAAQQMAAAAAAABBAwAAAAAAAAQAAAAgICAgRgMAAAAAAABHAwAAAAAAAAAAAABHAwAAAAAAAEgDAAAAAAAAAAAAAEgDAAAAAAAASQMAAAAAAAAAAAAASQMAAAAAAABKAwAAAAAAAAAAAABKAwAAAAAAAEsDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEADAAAAAAAAQAMAAAAAAAAAAAAAAOB5QA"
				],
				[
					491,
					1,
					"insert",
					{
						"characters": " p"
					},
					"AgAAAEsDAAAAAAAATAMAAAAAAAAAAAAATAMAAAAAAABNAwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEsDAAAAAAAASwMAAAAAAAAAAAAAAADwvw"
				],
				[
					492,
					3,
					"left_delete",
					null,
					"AwAAAEwDAAAAAAAATAMAAAAAAAABAAAAcEsDAAAAAAAASwMAAAAAAAABAAAAIEoDAAAAAAAASgMAAAAAAAABAAAAbg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE0DAAAAAAAATQMAAAAAAAAAAAAAAADwvw"
				],
				[
					493,
					1,
					"insert",
					{
						"characters": "rn"
					},
					"AgAAAEoDAAAAAAAASwMAAAAAAAAAAAAASwMAAAAAAABMAwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEoDAAAAAAAASgMAAAAAAAAAAAAAAADwvw"
				],
				[
					494,
					1,
					"insert",
					{
						"characters": " pE"
					},
					"AwAAAEwDAAAAAAAATQMAAAAAAAAAAAAATQMAAAAAAABOAwAAAAAAAAAAAABOAwAAAAAAAE8DAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEwDAAAAAAAATAMAAAAAAAAAAAAAAADwvw"
				],
				[
					495,
					1,
					"insert_completion",
					{
						"completion": "pEngine",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "pEngine"
					},
					"AgAAAE0DAAAAAAAATQMAAAAAAAACAAAAcEVNAwAAAAAAAFQDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE8DAAAAAAAATwMAAAAAAAAAAAAAAADwvw"
				],
				[
					496,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFQDAAAAAAAAVQMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFQDAAAAAAAAVAMAAAAAAAAAAAAAAADwvw"
				],
				[
					505,
					1,
					"paste",
					null,
					"AgAAAEgBAAAAAAAATwEAAAAAAAAAAAAATwEAAAAAAABPAQAAAAAAAAkAAABtcENhbUN0cmw",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEgBAAAAAAAAUQEAAAAAAAAAAAAAAADwvw"
				],
				[
					509,
					1,
					"insert",
					{
						"characters": "pD"
					},
					"AwAAAHYBAAAAAAAAdwEAAAAAAAAAAAAAdwEAAAAAAAB3AQAAAAAAAAYAAABjYW1lcmF3AQAAAAAAAHgBAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHYBAAAAAAAAfAEAAAAAAAAAAAAAAADwvw"
				],
				[
					510,
					1,
					"insert_completion",
					{
						"completion": "pDevice",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "pDevice"
					},
					"AgAAAHYBAAAAAAAAdgEAAAAAAAACAAAAcER2AQAAAAAAAH0BAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHgBAAAAAAAAeAEAAAAAAAAAAAAAAADwvw"
				],
				[
					516,
					1,
					"paste",
					null,
					"AgAAAMsBAAAAAAAAAgIAAAAAAAAAAAAAAgIAAAAAAAACAgAAAAAAAKkAAABtcENhbUN0cmwgPSBPcmJpdGVyQ2FtZXJhQ29udHJvbGxlcjo6Y3JlYXRlKGNhbWVyYSk7CiAgICAgICAgICAgICgoT3JiaXRlckNhbWVyYUNvbnRyb2xsZXIqKW1wQ2FtQ3RybC5nZXQoKSktPnNldE1vZGVsUGFyYW1zKG1TY2VuZUJCLmNlbnRlcigpLCBtU2NlbmVCQi5yYWRpdXMoKSwgMy41Zik7",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMsBAAAAAAAAdAIAAAAAAAAAAAAAAADwvw"
				],
				[
					519,
					1,
					"paste",
					null,
					"AgAAAE0CAAAAAAAAhAIAAAAAAAAAAAAAhAIAAAAAAACEAgAAAAAAADMAAABtcENhbUN0cmwgPSBTaXhEb0ZDYW1lcmFDb250cm9sbGVyOjpjcmVhdGUoY2FtZXJhKTs",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE0CAAAAAAAAgAIAAAAAAAAAAAAAAADwvw"
				],
				[
					523,
					1,
					"paste",
					null,
					"AgAAALYBAAAAAAAAvAEAAAAAAAAAAAAAvAEAAAAAAAC8AQAAAAAAAAcAAABPcmJpdGVy",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL0BAAAAAAAAtgEAAAAAAAAAAAAAAADwvw"
				],
				[
					527,
					1,
					"paste",
					null,
					"AgAAADgCAAAAAAAAQQIAAAAAAAAAAAAAQQIAAAAAAABBAgAAAAAAAAYAAABTaXhET0Y",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADgCAAAAAAAAPgIAAAAAAAAAAAAAAADwvw"
				],
				[
					535,
					1,
					"paste",
					null,
					"AgAAAKABAAAAAAAAqgEAAAAAAAAAAAAAqgEAAAAAAACqAQAAAAAAABQAAABDYW1lcmFDb250cm9sbGVyVHlwZQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKABAAAAAAAAtAEAAAAAAAAAAAAAAADwvw"
				],
				[
					539,
					1,
					"paste",
					null,
					"AgAAABgCAAAAAAAAIgIAAAAAAAAAAAAAIgIAAAAAAAAiAgAAAAAAABQAAABDYW1lcmFDb250cm9sbGVyVHlwZQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABgCAAAAAAAALAIAAAAAAAAAAAAAAADwvw"
				],
				[
					547,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADcCAAAAAAAAOAIAAAAAAAAAAAAAOAIAAAAAAABAAgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADcCAAAAAAAANwIAAAAAAAAAAAAAAADwvw"
				],
				[
					549,
					1,
					"paste",
					null,
					"AQAAADcCAAAAAAAAPwIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADcCAAAAAAAANwIAAAAAAAAAAAAAAABSQA"
				],
				[
					555,
					1,
					"left_delete",
					null,
					"AQAAAC8CAAAAAAAALwIAAAAAAAARAAAAICAgICAgICBkZWZhdWx0Ogo",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC8CAAAAAAAAQAIAAAAAAAAAAAAAAADwvw"
				],
				[
					559,
					2,
					"left_delete",
					null,
					"AgAAAJMBAAAAAAAAkwEAAAAAAAB3AAAAICAgICAgICBjYXNlIEVuZ2luZVR5cGU6Okh5YnJpZDoKICAgICAgICAgICAgcEVuZ2luZSA9IEZpcnN0UGVyc29uQ2FtZXJhQ29udHJvbGxlcjo6Y3JlYXRlKHBEZXZpY2UpOwogICAgICAgICAgICBicmVhazuSAQAAAAAAAJIBAAAAAAAAAQAAAAo",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAoCAAAAAAAAkwEAAAAAAAAAAAAAAADwvw"
				],
				[
					561,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAA0CAAAAAAAADgIAAAAAAAAAAAAADgIAAAAAAAAaAgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA0CAAAAAAAADQIAAAAAAAAAAAAAAEBkQA"
				],
				[
					562,
					4,
					"left_delete",
					null,
					"BAAAABkCAAAAAAAAGQIAAAAAAAABAAAAIBgCAAAAAAAAGAIAAAAAAAABAAAAIBcCAAAAAAAAFwIAAAAAAAABAAAAIBYCAAAAAAAAFgIAAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABoCAAAAAAAAGgIAAAAAAAAAAAAAAADwvw"
				],
				[
					563,
					1,
					"paste",
					null,
					"AQAAABYCAAAAAAAAjQIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABYCAAAAAAAAFgIAAAAAAAAAAAAAAADwvw"
				],
				[
					566,
					8,
					"left_delete",
					null,
					"CAAAAB0CAAAAAAAAHQIAAAAAAAABAAAAIBwCAAAAAAAAHAIAAAAAAAABAAAAIBsCAAAAAAAAGwIAAAAAAAABAAAAIBoCAAAAAAAAGgIAAAAAAAABAAAAIBkCAAAAAAAAGQIAAAAAAAABAAAAIBgCAAAAAAAAGAIAAAAAAAABAAAAIBcCAAAAAAAAFwIAAAAAAAABAAAAIBYCAAAAAAAAFgIAAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB4CAAAAAAAAHgIAAAAAAAAAAAAAAADwvw"
				],
				[
					571,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADcCAAAAAAAAOAIAAAAAAAAAAAAAOAIAAAAAAABAAgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADcCAAAAAAAANwIAAAAAAAAAAAAAAABSQA"
				],
				[
					573,
					1,
					"paste",
					null,
					"AQAAADcCAAAAAAAAPwIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADcCAAAAAAAANwIAAAAAAAAAAAAAAABSQA"
				],
				[
					576,
					2,
					"left_delete",
					null,
					"AgAAAJcCAAAAAAAAlwIAAAAAAAAzAAAAICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICBzaG91bGRfbm90X2dldF9oZXJlKCk7lgIAAAAAAACWAgAAAAAAAAEAAAAK",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMoCAAAAAAAAlwIAAAAAAAAAAAAAAADwvw"
				],
				[
					580,
					1,
					"insert",
					{
						"characters": "Rasteri"
					},
					"CAAAAFIBAAAAAAAAUwEAAAAAAAAAAAAAUwEAAAAAAABTAQAAAAAAABsAAABGaXJzdFBlcnNvbkNhbWVyYUNvbnRyb2xsZXJTAQAAAAAAAFQBAAAAAAAAAAAAAFQBAAAAAAAAVQEAAAAAAAAAAAAAVQEAAAAAAABWAQAAAAAAAAAAAABWAQAAAAAAAFcBAAAAAAAAAAAAAFcBAAAAAAAAWAEAAAAAAAAAAAAAWAEAAAAAAABZAQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFIBAAAAAAAAbQEAAAAAAAAAAAAAAADwvw"
				],
				[
					581,
					1,
					"insert",
					{
						"characters": "zerEngine"
					},
					"CQAAAFkBAAAAAAAAWgEAAAAAAAAAAAAAWgEAAAAAAABbAQAAAAAAAAAAAABbAQAAAAAAAFwBAAAAAAAAAAAAAFwBAAAAAAAAXQEAAAAAAAAAAAAAXQEAAAAAAABeAQAAAAAAAAAAAABeAQAAAAAAAF8BAAAAAAAAAAAAAF8BAAAAAAAAYAEAAAAAAAAAAAAAYAEAAAAAAABhAQAAAAAAAAAAAABhAQAAAAAAAGIBAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFkBAAAAAAAAWQEAAAAAAAAAAAAAAADwvw"
				],
				[
					589,
					1,
					"paste",
					null,
					"AgAAAMIBAAAAAAAAywEAAAAAAAAAAAAAywEAAAAAAADLAQAAAAAAABsAAABGaXJzdFBlcnNvbkNhbWVyYUNvbnRyb2xsZXI",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMIBAAAAAAAA3QEAAAAAAAAAAAAAAADwvw"
				],
				[
					590,
					1,
					"insert",
					{
						"characters": "Engine"
					},
					"BgAAAMsBAAAAAAAAzAEAAAAAAAAAAAAAzAEAAAAAAADNAQAAAAAAAAAAAADNAQAAAAAAAM4BAAAAAAAAAAAAAM4BAAAAAAAAzwEAAAAAAAAAAAAAzwEAAAAAAADQAQAAAAAAAAAAAADQAQAAAAAAANEBAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMsBAAAAAAAAywEAAAAAAAAAAAAAAADwvw"
				],
				[
					598,
					1,
					"paste",
					null,
					"AgAAAD8CAAAAAAAARQIAAAAAAAAAAAAARQIAAAAAAABFAgAAAAAAABsAAABGaXJzdFBlcnNvbkNhbWVyYUNvbnRyb2xsZXI",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD8CAAAAAAAAWgIAAAAAAAAAAAAAAADwvw"
				],
				[
					599,
					1,
					"insert",
					{
						"characters": "EW"
					},
					"AgAAAEUCAAAAAAAARgIAAAAAAAAAAAAARgIAAAAAAABHAgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEUCAAAAAAAARQIAAAAAAAAAAAAAAADwvw"
				],
				[
					600,
					1,
					"left_delete",
					null,
					"AQAAAEYCAAAAAAAARgIAAAAAAAABAAAAVw",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEcCAAAAAAAARwIAAAAAAAAAAAAAAADwvw"
				],
				[
					601,
					1,
					"insert",
					{
						"characters": "ngine"
					},
					"BQAAAEYCAAAAAAAARwIAAAAAAAAAAAAARwIAAAAAAABIAgAAAAAAAAAAAABIAgAAAAAAAEkCAAAAAAAAAAAAAEkCAAAAAAAASgIAAAAAAAAAAAAASgIAAAAAAABLAgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEYCAAAAAAAARgIAAAAAAAAAAAAAAADwvw"
				],
				[
					608,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAF0AAAAAAAAAXgAAAAAAAAAAAAAAXgAAAAAAAABfAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF0AAAAAAAAAXQAAAAAAAAAAAAAAAADwvw"
				],
				[
					610,
					1,
					"insert",
					{
						"characters": "#incu"
					},
					"BQAAAF4AAAAAAAAAXwAAAAAAAAAAAAAAXwAAAAAAAABgAAAAAAAAAAAAAABgAAAAAAAAAGEAAAAAAAAAAAAAAGEAAAAAAAAAYgAAAAAAAAAAAAAAYgAAAAAAAABjAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF4AAAAAAAAAXgAAAAAAAAAAAAAAAAAAAA"
				],
				[
					611,
					1,
					"insert_completion",
					{
						"completion": "include",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "include"
					},
					"AgAAAF8AAAAAAAAAXwAAAAAAAAAEAAAAaW5jdV8AAAAAAAAAZgAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGMAAAAAAAAAYwAAAAAAAAAAAAAAAADwvw"
				],
				[
					612,
					1,
					"insert",
					{
						"characters": " en"
					},
					"AwAAAGYAAAAAAAAAZwAAAAAAAAAAAAAAZwAAAAAAAABoAAAAAAAAAAAAAABoAAAAAAAAAGkAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGYAAAAAAAAAZgAAAAAAAAAAAAAAAADwvw"
				],
				[
					613,
					2,
					"left_delete",
					null,
					"AgAAAGgAAAAAAAAAaAAAAAAAAAABAAAAbmcAAAAAAAAAZwAAAAAAAAABAAAAZQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGkAAAAAAAAAaQAAAAAAAAAAAAAAAADwvw"
				],
				[
					614,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAGcAAAAAAAAAaQAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGcAAAAAAAAAZwAAAAAAAAAAAAAAAADwvw"
				],
				[
					615,
					1,
					"insert",
					{
						"characters": "en"
					},
					"AgAAAGgAAAAAAAAAaQAAAAAAAAAAAAAAaQAAAAAAAABqAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGgAAAAAAAAAaAAAAAAAAAAAAAAAAADwvw"
				],
				[
					616,
					2,
					"left_delete",
					null,
					"AgAAAGkAAAAAAAAAaQAAAAAAAAABAAAAbmgAAAAAAAAAaAAAAAAAAAABAAAAZQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGoAAAAAAAAAagAAAAAAAAAAAAAAAADwvw"
				],
				[
					617,
					1,
					"insert",
					{
						"characters": "render"
					},
					"BgAAAGgAAAAAAAAAaQAAAAAAAAAAAAAAaQAAAAAAAABqAAAAAAAAAAAAAABqAAAAAAAAAGsAAAAAAAAAAAAAAGsAAAAAAAAAbAAAAAAAAAAAAAAAbAAAAAAAAABtAAAAAAAAAAAAAABtAAAAAAAAAG4AAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGgAAAAAAAAAaAAAAAAAAAAAAAAAAADwvw"
				],
				[
					618,
					1,
					"insert_completion",
					{
						"completion": "RenderEngine",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "RenderEngine"
					},
					"AgAAAGgAAAAAAAAAaAAAAAAAAAAGAAAAcmVuZGVyaAAAAAAAAAB0AAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG4AAAAAAAAAbgAAAAAAAAAAAAAAAADwvw"
				],
				[
					619,
					12,
					"left_delete",
					null,
					"DAAAAHMAAAAAAAAAcwAAAAAAAAABAAAAZXIAAAAAAAAAcgAAAAAAAAABAAAAbnEAAAAAAAAAcQAAAAAAAAABAAAAaXAAAAAAAAAAcAAAAAAAAAABAAAAZ28AAAAAAAAAbwAAAAAAAAABAAAAbm4AAAAAAAAAbgAAAAAAAAABAAAARW0AAAAAAAAAbQAAAAAAAAABAAAAcmwAAAAAAAAAbAAAAAAAAAABAAAAZWsAAAAAAAAAawAAAAAAAAABAAAAZGoAAAAAAAAAagAAAAAAAAABAAAAbmkAAAAAAAAAaQAAAAAAAAABAAAAZWgAAAAAAAAAaAAAAAAAAAABAAAAUg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHQAAAAAAAAAdAAAAAAAAAAAAAAAAADwvw"
				],
				[
					620,
					1,
					"insert",
					{
						"characters": "render_eni"
					},
					"CgAAAGgAAAAAAAAAaQAAAAAAAAAAAAAAaQAAAAAAAABqAAAAAAAAAAAAAABqAAAAAAAAAGsAAAAAAAAAAAAAAGsAAAAAAAAAbAAAAAAAAAAAAAAAbAAAAAAAAABtAAAAAAAAAAAAAABtAAAAAAAAAG4AAAAAAAAAAAAAAG4AAAAAAAAAbwAAAAAAAAAAAAAAbwAAAAAAAABwAAAAAAAAAAAAAABwAAAAAAAAAHEAAAAAAAAAAAAAAHEAAAAAAAAAcgAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGgAAAAAAAAAaAAAAAAAAAAAAAAAAADwvw"
				],
				[
					621,
					1,
					"left_delete",
					null,
					"AQAAAHEAAAAAAAAAcQAAAAAAAAABAAAAaQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHIAAAAAAAAAcgAAAAAAAAAAAAAAAADwvw"
				],
				[
					622,
					1,
					"insert",
					{
						"characters": "gine"
					},
					"BAAAAHEAAAAAAAAAcgAAAAAAAAAAAAAAcgAAAAAAAABzAAAAAAAAAAAAAABzAAAAAAAAAHQAAAAAAAAAAAAAAHQAAAAAAAAAdQAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHEAAAAAAAAAcQAAAAAAAAAAAAAAAADwvw"
				],
				[
					625,
					3,
					"left_delete",
					null,
					"AwAAAF4AAAAAAAAAXgAAAAAAAAAYAAAAI2luY2x1ZGUgInJlbmRlcl9lbmdpbmUiXQAAAAAAAABdAAAAAAAAAAEAAAAKXAAAAAAAAABcAAAAAAAAAAEAAAAK",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHYAAAAAAAAAXgAAAAAAAAAAAAAAAADwvw"
				],
				[
					628,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAKIHAAAAAAAAowcAAAAAAAAAAAAAowcAAAAAAACkBwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKIHAAAAAAAAogcAAAAAAAAAAAAAAADwvw"
				],
				[
					629,
					1,
					"paste",
					null,
					"AQAAAKQHAAAAAAAA+wcAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKQHAAAAAAAApAcAAAAAAAAAAAAAAADwvw"
				],
				[
					632,
					1,
					"left_delete",
					null,
					"AQAAAKQHAAAAAAAApAcAAAAAAAAVAAAAICBwdWJsaWM6CiAgICBzdGF0aWMg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALkHAAAAAAAApAcAAAAAAAAAAAAAAADwvw"
				],
				[
					633,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAKQHAAAAAAAApQcAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKQHAAAAAAAApAcAAAAAAAAAAAAAAADwvw"
				],
				[
					639,
					1,
					"paste",
					null,
					"AQAAAL0HAAAAAAAAzwcAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL0HAAAAAAAAvQcAAAAAAAAAAAAAAADwvw"
				],
				[
					644,
					1,
					"left_delete",
					null,
					"AQAAAPgHAAAAAAAA+AcAAAAAAAABAAAAOw",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPkHAAAAAAAA+QcAAAAAAAAAAAAAAADwvw"
				],
				[
					645,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPgHAAAAAAAA+QcAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPgHAAAAAAAA+AcAAAAAAAAAAAAAAADwvw"
				],
				[
					646,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAPkHAAAAAAAA+wcAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPkHAAAAAAAA+QcAAAAAAAAAAAAAAADwvw"
				],
				[
					647,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAPoHAAAAAAAA+wcAAAAAAAAAAAAA+wcAAAAAAAD8BwAAAAAAAAAAAAD7BwAAAAAAAPwHAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPoHAAAAAAAA+gcAAAAAAAAAAAAAAADwvw"
				],
				[
					653,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AwAAAP8HAAAAAAAAAAgAAAAAAAAAAAAA+wcAAAAAAAD7BwAAAAAAAAEAAAAJ/wcAAAAAAAAACAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP8HAAAAAAAA/wcAAAAAAAAAAAAAAADwvw"
				],
				[
					655,
					1,
					"paste",
					null,
					"AQAAAP8HAAAAAAAAWAgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP8HAAAAAAAA/wcAAAAAAAAAAAAAAAAAAA"
				],
				[
					656,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAFgIAAAAAAAAWQgAAAAAAAAAAAAAWQgAAAAAAABaCAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFgIAAAAAAAAWAgAAAAAAAAAAAAAAADwvw"
				],
				[
					657,
					1,
					"paste",
					null,
					"AQAAAFoIAAAAAAAAswgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFoIAAAAAAAAWggAAAAAAAAAAAAAAADwvw"
				],
				[
					658,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAALMIAAAAAAAAtAgAAAAAAAAAAAAAtAgAAAAAAAC1CAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALMIAAAAAAAAswgAAAAAAAAAAAAAAADwvw"
				],
				[
					659,
					1,
					"paste",
					null,
					"AQAAALUIAAAAAAAADgkAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALUIAAAAAAAAtQgAAAAAAAAAAAAAAADwvw"
				],
				[
					667,
					1,
					"paste",
					null,
					"AgAAABcIAAAAAAAAJggAAAAAAAAAAAAAJggAAAAAAAAmCAAAAAAAABAAAABSYXN0ZXJpemVyRW5naW5l",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABcIAAAAAAAAJwgAAAAAAAAAAAAAAADwvw"
				],
				[
					675,
					1,
					"paste",
					null,
					"AgAAAHEIAAAAAAAAfQgAAAAAAAAAAAAAfQgAAAAAAAB9CAAAAAAAABAAAABSYXN0ZXJpemVyRW5naW5l",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHEIAAAAAAAAgQgAAAAAAAAAAAAAAADwvw"
				],
				[
					678,
					2,
					"left_delete",
					null,
					"AgAAALAIAAAAAAAAsAgAAAAAAABZAAAAUmVuZGVyRW5naW5lOjpTaGFyZWRQdHIgUmFzdGVyaXplckVuZ2luZTo6Y3JlYXRlKEZhbGNvcjo6RGV2aWNlOjpTaGFyZWRQdHIgcERldmljZSkgewoJCn2vCAAAAAAAAK8IAAAAAAAAAQAAAAo",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAkJAAAAAAAAsAgAAAAAAAAAAAAAAADwvw"
				],
				[
					684,
					1,
					"paste",
					null,
					"AQAAAM8CAAAAAAAA7AIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM8CAAAAAAAAzwIAAAAAAAAAAAAAAADwvw"
				],
				[
					687,
					1,
					"insert",
					{
						"characters": "Falcor::"
					},
					"CAAAAI8CAAAAAAAAkAIAAAAAAAAAAAAAkAIAAAAAAACRAgAAAAAAAAAAAACRAgAAAAAAAJICAAAAAAAAAAAAAJICAAAAAAAAkwIAAAAAAAAAAAAAkwIAAAAAAACUAgAAAAAAAAAAAACUAgAAAAAAAJUCAAAAAAAAAAAAAJUCAAAAAAAAlgIAAAAAAAAAAAAAlgIAAAAAAACXAgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI8CAAAAAAAAjwIAAAAAAAAAAAAAAADwvw"
				],
				[
					690,
					1,
					"insert",
					{
						"characters": "Scene::"
					},
					"BwAAAN8CAAAAAAAA4AIAAAAAAAAAAAAA4AIAAAAAAADhAgAAAAAAAAAAAADhAgAAAAAAAOICAAAAAAAAAAAAAOICAAAAAAAA4wIAAAAAAAAAAAAA4wIAAAAAAADkAgAAAAAAAAAAAADkAgAAAAAAAOUCAAAAAAAAAAAAAOUCAAAAAAAA5gIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8CAAAAAAAA3wIAAAAAAAAAAAAAAADwvw"
				],
				[
					693,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAAADAAAAAAAAAQMAAAAAAAAAAAAAAQMAAAAAAAACAwAAAAAAAAAAAAACAwAAAAAAAAMDAAAAAAAAAAAAAAMDAAAAAAAABAMAAAAAAAAAAAAAAQMAAAAAAAABAwAAAAAAAAEAAAAJ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAADAAAAAAAAAAMAAAAAAAAAAAAAAADwvw"
				],
				[
					695,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAAADAAAAAAAAAQMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAADAAAAAAAAAAMAAAAAAAAAAAAAAABCQA"
				],
				[
					696,
					1,
					"left_delete",
					null,
					"AQAAAAADAAAAAAAAAAMAAAAAAAABAAAACQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAEDAAAAAAAAAQMAAAAAAAAAAAAAAADwvw"
				],
				[
					697,
					1,
					"insert",
					{
						"characters": "auto"
					},
					"BAAAAAADAAAAAAAAAQMAAAAAAAAAAAAAAQMAAAAAAAACAwAAAAAAAAAAAAACAwAAAAAAAAMDAAAAAAAAAAAAAAMDAAAAAAAABAMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAADAAAAAAAAAAMAAAAAAAAAAAAAAADwvw"
				],
				[
					698,
					1,
					"insert",
					{
						"characters": " pRender"
					},
					"CAAAAAQDAAAAAAAABQMAAAAAAAAAAAAABQMAAAAAAAAGAwAAAAAAAAAAAAAGAwAAAAAAAAcDAAAAAAAAAAAAAAcDAAAAAAAACAMAAAAAAAAAAAAACAMAAAAAAAAJAwAAAAAAAAAAAAAJAwAAAAAAAAoDAAAAAAAAAAAAAAoDAAAAAAAACwMAAAAAAAAAAAAACwMAAAAAAAAMAwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAQDAAAAAAAABAMAAAAAAAAAAAAAAADwvw"
				],
				[
					699,
					1,
					"insert_completion",
					{
						"completion": "pRenderContext",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "pRenderContext"
					},
					"AgAAAAUDAAAAAAAABQMAAAAAAAAHAAAAcFJlbmRlcgUDAAAAAAAAEwMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAwDAAAAAAAADAMAAAAAAAAAAAAAAADwvw"
				],
				[
					700,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAABMDAAAAAAAAFAMAAAAAAAAAAAAAFAMAAAAAAAAVAwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABMDAAAAAAAAEwMAAAAAAAAAAAAAAADwvw"
				],
				[
					701,
					1,
					"left_delete",
					null,
					"AQAAABQDAAAAAAAAFAMAAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABUDAAAAAAAAFQMAAAAAAAAAAAAAAADwvw"
				],
				[
					702,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAABQDAAAAAAAAFQMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABQDAAAAAAAAFAMAAAAAAAAAAAAAAADwvw"
				],
				[
					703,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABUDAAAAAAAAFgMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABUDAAAAAAAAFQMAAAAAAAAAAAAAAADwvw"
				],
				[
					704,
					1,
					"paste",
					null,
					"AQAAABYDAAAAAAAAJgMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABYDAAAAAAAAFgMAAAAAAAAAAAAAAADwvw"
				],
				[
					705,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACYDAAAAAAAAKAMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACYDAAAAAAAAJgMAAAAAAAAAAAAAAADwvw"
				],
				[
					707,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAACgDAAAAAAAAKQMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACgDAAAAAAAAKAMAAAAAAAAAAAAAAADwvw"
				],
				[
					709,
					1,
					"insert",
					{
						"characters": "mpDevice-"
					},
					"CQAAABYDAAAAAAAAFwMAAAAAAAAAAAAAFwMAAAAAAAAYAwAAAAAAAAAAAAAYAwAAAAAAABkDAAAAAAAAAAAAABkDAAAAAAAAGgMAAAAAAAAAAAAAGgMAAAAAAAAbAwAAAAAAAAAAAAAbAwAAAAAAABwDAAAAAAAAAAAAABwDAAAAAAAAHQMAAAAAAAAAAAAAHQMAAAAAAAAeAwAAAAAAAAAAAAAeAwAAAAAAAB8DAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABYDAAAAAAAAFgMAAAAAAAAAAAAAAADwvw"
				],
				[
					710,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAAB8DAAAAAAAAIAMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB8DAAAAAAAAHwMAAAAAAAAAAAAAAADwvw"
				],
				[
					715,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABsAAAAAAAAAHAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABsAAAAAAAAAGwAAAAAAAAAAAAAAAADwvw"
				],
				[
					717,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABsAAAAAAAAAHAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABsAAAAAAAAAGwAAAAAAAAAAAAAAAAAAAA"
				],
				[
					718,
					1,
					"paste",
					null,
					"AQAAABwAAAAAAAAAXQAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABwAAAAAAAAAHAAAAAAAAAAAAAAAAADwvw"
				],
				[
					720,
					15,
					"left_delete",
					null,
					"DwAAAEEAAAAAAAAAQQAAAAAAAAABAAAAZUAAAAAAAAAAQAAAAAAAAAABAAAAdj8AAAAAAAAAPwAAAAAAAAABAAAAbD4AAAAAAAAAPgAAAAAAAAABAAAAbz0AAAAAAAAAPQAAAAAAAAABAAAAczwAAAAAAAAAPAAAAAAAAAABAAAAZTsAAAAAAAAAOwAAAAAAAAABAAAAUjoAAAAAAAAAOgAAAAAAAAABAAAAczkAAAAAAAAAOQAAAAAAAAABAAAAZTgAAAAAAAAAOAAAAAAAAAABAAAAcjcAAAAAAAAANwAAAAAAAAABAAAAdTYAAAAAAAAANgAAAAAAAAABAAAAdDUAAAAAAAAANQAAAAAAAAABAAAAeDQAAAAAAAAANAAAAAAAAAABAAAAZTMAAAAAAAAAMwAAAAAAAAABAAAAVA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEIAAAAAAAAAQgAAAAAAAAAAAAAAAADwvw"
				],
				[
					721,
					1,
					"insert",
					{
						"characters": "Depth"
					},
					"BQAAADMAAAAAAAAANAAAAAAAAAAAAAAANAAAAAAAAAA1AAAAAAAAAAAAAAA1AAAAAAAAADYAAAAAAAAAAAAAADYAAAAAAAAANwAAAAAAAAAAAAAANwAAAAAAAAA4AAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADMAAAAAAAAAMwAAAAAAAAAAAAAAAADwvw"
				],
				[
					729,
					1,
					"paste",
					null,
					"AgAAAD0AAAAAAAAARgAAAAAAAAAAAAAARgAAAAAAAABGAAAAAAAAABMAAABUZXh0dXJlc1Jlc29sdmVQYXNz",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD0AAAAAAAAAUAAAAAAAAAAAAAAAAADwvw"
				],
				[
					732,
					1,
					"right_delete",
					null,
					"AQAAABsDAAAAAAAAGwMAAAAAAAAFAAAAQ29uc3Q",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABsDAAAAAAAAIAMAAAAAAAAAAAAAAADwvw"
				],
				[
					735,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAAAYDAAAAAAAABwMAAAAAAAAAAAAABwMAAAAAAAAIAwAAAAAAAAAAAAAIAwAAAAAAAAkDAAAAAAAAAAAAAAkDAAAAAAAACgMAAAAAAAAAAAAACgMAAAAAAAALAwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAYDAAAAAAAABgMAAAAAAAAAAAAAAADwvw"
				],
				[
					736,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAsDAAAAAAAADAMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAsDAAAAAAAACwMAAAAAAAAAAAAAAADwvw"
				],
				[
					739,
					1,
					"paste",
					null,
					"AgAAAAYDAAAAAAAALAMAAAAAAAAAAAAALAMAAAAAAAAsAwAAAAAAACUAAABjb25zdCBGYWxjb3I6OlNjZW5lOjpTaGFyZWRQdHIgcFNjZW5l",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAYDAAAAAAAAKwMAAAAAAAAAAAAAAADwvw"
				],
				[
					746,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAADMIAAAAAAAANAgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADMIAAAAAAAAMwgAAAAAAAAAAAAAAADwvw"
				],
				[
					747,
					1,
					"reindent",
					null,
					"AQAAADQIAAAAAAAAOAgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADQIAAAAAAAANAgAAAAAAAAAAAAAAADwvw"
				],
				[
					748,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAADgIAAAAAAAAOQgAAAAAAAAAAAAAOQgAAAAAAAA6CAAAAAAAAAAAAAA6CAAAAAAAADsIAAAAAAAAAAAAADsIAAAAAAAAPAgAAAAAAAAAAAAAPAgAAAAAAAA9CAAAAAAAAAAAAAA9CAAAAAAAAD4IAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADgIAAAAAAAAOAgAAAAAAAAAAAAAAADwvw"
				],
				[
					749,
					1,
					"insert",
					{
						"characters": " pT"
					},
					"AwAAAD4IAAAAAAAAPwgAAAAAAAAAAAAAPwgAAAAAAABACAAAAAAAAAAAAABACAAAAAAAAEEIAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD4IAAAAAAAAPggAAAAAAAAAAAAAAADwvw"
				],
				[
					750,
					1,
					"insert_completion",
					{
						"completion": "pTexturesResolvePassGraph",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "pTexturesResolvePassGraph"
					},
					"AgAAAD8IAAAAAAAAPwgAAAAAAAACAAAAcFQ/CAAAAAAAAFgIAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEEIAAAAAAAAQQgAAAAAAAAAAAAAAADwvw"
				],
				[
					751,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAAFgIAAAAAAAAWQgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFgIAAAAAAAAWAgAAAAAAAAAAAAAAADwvw"
				],
				[
					752,
					1,
					"left_delete",
					null,
					"AQAAAFgIAAAAAAAAWAgAAAAAAAABAAAAJw",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFkIAAAAAAAAWQgAAAAAAAAAAAAAAADwvw"
				],
				[
					753,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFgIAAAAAAAAWQgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFgIAAAAAAAAWAgAAAAAAAAAAAAAAADwvw"
				],
				[
					756,
					1,
					"paste",
					null,
					"AQAAAAQBAAAAAAAALAEAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAQBAAAAAAAABAEAAAAAAAAAAAAAAADwvw"
				],
				[
					763,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAMkBAAAAAAAAygEAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMkBAAAAAAAAyQEAAAAAAAAAAAAAAADwvw"
				],
				[
					764,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMoBAAAAAAAAywEAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMoBAAAAAAAAygEAAAAAAAAAAAAAAADwvw"
				],
				[
					765,
					1,
					"paste",
					null,
					"AQAAAMsBAAAAAAAA1gEAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMsBAAAAAAAAywEAAAAAAAAAAAAAAADwvw"
				],
				[
					768,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEUCAAAAAAAARgIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEUCAAAAAAAARQIAAAAAAAAAAAAAAADwvw"
				],
				[
					769,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEYCAAAAAAAARwIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEYCAAAAAAAARgIAAAAAAAAAAAAAAADwvw"
				],
				[
					770,
					1,
					"paste",
					null,
					"AQAAAEcCAAAAAAAAUgIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEcCAAAAAAAARwIAAAAAAAAAAAAAAADwvw"
				],
				[
					773,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAMwCAAAAAAAAzQIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMwCAAAAAAAAzAIAAAAAAAAAAAAAAADwvw"
				],
				[
					774,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAM0CAAAAAAAAzgIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM0CAAAAAAAAzQIAAAAAAAAAAAAAAADwvw"
				],
				[
					775,
					1,
					"paste",
					null,
					"AQAAAM4CAAAAAAAA2QIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM4CAAAAAAAAzgIAAAAAAAAAAAAAAADwvw"
				],
				[
					781,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAAwDAAAAAAAADQMAAAAAAAAAAAAADQMAAAAAAAAOAwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAwDAAAAAAAADAMAAAAAAAAAAAAAAADwvw"
				],
				[
					783,
					1,
					"paste",
					null,
					"AQAAAA0DAAAAAAAAZQMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA0DAAAAAAAADQMAAAAAAAAAAAAAAAAAAA"
				],
				[
					784,
					1,
					"left_delete",
					null,
					"AQAAAGQDAAAAAAAAZAMAAAAAAAABAAAAOw",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGUDAAAAAAAAZQMAAAAAAAAAAAAAAADwvw"
				],
				[
					785,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGQDAAAAAAAAZQMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGQDAAAAAAAAZAMAAAAAAAAAAAAAAADwvw"
				],
				[
					786,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAGUDAAAAAAAAZwMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGUDAAAAAAAAZQMAAAAAAAAAAAAAAADwvw"
				],
				[
					787,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAGYDAAAAAAAAZwMAAAAAAAAAAAAAZwMAAAAAAABoAwAAAAAAAAAAAABnAwAAAAAAAGgDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGYDAAAAAAAAZgMAAAAAAAAAAAAAAADwvw"
				],
				[
					793,
					1,
					"paste",
					null,
					"AQAAAA0DAAAAAAAAGwMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA0DAAAAAAAADQMAAAAAAAAAAAAAAADwvw"
				],
				[
					796,
					1,
					"insert",
					{
						"characters": "mpD"
					},
					"AwAAAHYDAAAAAAAAdwMAAAAAAAAAAAAAdwMAAAAAAAB4AwAAAAAAAAAAAAB4AwAAAAAAAHkDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHYDAAAAAAAAdgMAAAAAAAAAAAAAAADwvw"
				],
				[
					797,
					1,
					"insert_completion",
					{
						"completion": "mpDevice",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mpDevice"
					},
					"AgAAAHYDAAAAAAAAdgMAAAAAAAADAAAAbXBEdgMAAAAAAAB+AwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHkDAAAAAAAAeQMAAAAAAAAAAAAAAADwvw"
				],
				[
					798,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAH4DAAAAAAAAfwMAAAAAAAAAAAAAfwMAAAAAAACAAwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH4DAAAAAAAAfgMAAAAAAAAAAAAAAADwvw"
				],
				[
					799,
					1,
					"insert",
					{
						"characters": " p"
					},
					"AgAAAIADAAAAAAAAgQMAAAAAAAAAAAAAgQMAAAAAAACCAwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIADAAAAAAAAgAMAAAAAAAAAAAAAAADwvw"
				],
				[
					801,
					1,
					"insert_completion",
					{
						"completion": "pDevice",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "pDevice"
					},
					"AgAAAIEDAAAAAAAAgQMAAAAAAAABAAAAcIEDAAAAAAAAiAMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIIDAAAAAAAAggMAAAAAAAAAAAAAAADwvw"
				],
				[
					802,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIgDAAAAAAAAiQMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIgDAAAAAAAAiAMAAAAAAAAAAAAAAADwvw"
				],
				[
					803,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIkDAAAAAAAAigMAAAAAAAAAAAAAigMAAAAAAACLAwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIkDAAAAAAAAiQMAAAAAAAAAAAAAAADwvw"
				],
				[
					804,
					1,
					"insert",
					{
						"characters": "mpConfi"
					},
					"BwAAAIsDAAAAAAAAjAMAAAAAAAAAAAAAjAMAAAAAAACNAwAAAAAAAAAAAACNAwAAAAAAAI4DAAAAAAAAAAAAAI4DAAAAAAAAjwMAAAAAAAAAAAAAjwMAAAAAAACQAwAAAAAAAAAAAACQAwAAAAAAAJEDAAAAAAAAAAAAAJEDAAAAAAAAkgMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIsDAAAAAAAAiwMAAAAAAAAAAAAAAADwvw"
				],
				[
					805,
					1,
					"insert",
					{
						"characters": "gStore"
					},
					"BgAAAJIDAAAAAAAAkwMAAAAAAAAAAAAAkwMAAAAAAACUAwAAAAAAAAAAAACUAwAAAAAAAJUDAAAAAAAAAAAAAJUDAAAAAAAAlgMAAAAAAAAAAAAAlgMAAAAAAACXAwAAAAAAAAAAAACXAwAAAAAAAJgDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJIDAAAAAAAAkgMAAAAAAAAAAAAAAADwvw"
				],
				[
					806,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAJgDAAAAAAAAmQMAAAAAAAAAAAAAmQMAAAAAAACaAwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJgDAAAAAAAAmAMAAAAAAAAAAAAAAADwvw"
				],
				[
					807,
					1,
					"insert",
					{
						"characters": " c"
					},
					"AgAAAJoDAAAAAAAAmwMAAAAAAAAAAAAAmwMAAAAAAACcAwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJoDAAAAAAAAmgMAAAAAAAAAAAAAAADwvw"
				],
				[
					808,
					1,
					"insert_completion",
					{
						"completion": "configStore",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "configStore"
					},
					"AgAAAJsDAAAAAAAAmwMAAAAAAAABAAAAY5sDAAAAAAAApgMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJwDAAAAAAAAnAMAAAAAAAAAAAAAAADwvw"
				],
				[
					809,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKYDAAAAAAAApwMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKYDAAAAAAAApgMAAAAAAAAAAAAAAADwvw"
				],
				[
					812,
					1,
					"right_delete",
					null,
					"AQAAAIwDAAAAAAAAjAMAAAAAAAABAAAAcA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIwDAAAAAAAAjAMAAAAAAAAAAAAAAADwvw"
				],
				[
					817,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKYDAAAAAAAApwMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKYDAAAAAAAApgMAAAAAAAAAAAAAAADwvw"
				],
				[
					818,
					1,
					"left_delete",
					null,
					"AQAAAKYDAAAAAAAApgMAAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKcDAAAAAAAApwMAAAAAAAAAAAAAAADwvw"
				],
				[
					822,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAAIwDAAAAAAAAjQMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIwDAAAAAAAAjAMAAAAAAAAAAAAAAADwvw"
				],
				[
					828,
					1,
					"insert",
					{
						"characters": " std::sha"
					},
					"CQAAAJsDAAAAAAAAnAMAAAAAAAAAAAAAnAMAAAAAAACdAwAAAAAAAAAAAACdAwAAAAAAAJ4DAAAAAAAAAAAAAJ4DAAAAAAAAnwMAAAAAAAAAAAAAnwMAAAAAAACgAwAAAAAAAAAAAACgAwAAAAAAAKEDAAAAAAAAAAAAAKEDAAAAAAAAogMAAAAAAAAAAAAAogMAAAAAAACjAwAAAAAAAAAAAACjAwAAAAAAAKQDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJsDAAAAAAAAmwMAAAAAAAAAAAAAAADwvw"
				],
				[
					829,
					1,
					"insert",
					{
						"characters": "red_"
					},
					"BAAAAKQDAAAAAAAApQMAAAAAAAAAAAAApQMAAAAAAACmAwAAAAAAAAAAAACmAwAAAAAAAKcDAAAAAAAAAAAAAKcDAAAAAAAAqAMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKQDAAAAAAAApAMAAAAAAAAAAAAAAADwvw"
				],
				[
					830,
					1,
					"insert",
					{
						"characters": "ptr<c"
					},
					"BQAAAKgDAAAAAAAAqQMAAAAAAAAAAAAAqQMAAAAAAACqAwAAAAAAAAAAAACqAwAAAAAAAKsDAAAAAAAAAAAAAKsDAAAAAAAArAMAAAAAAAAAAAAArAMAAAAAAACtAwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKgDAAAAAAAAqAMAAAAAAAAAAAAAAADwvw"
				],
				[
					831,
					1,
					"insert",
					{
						"characters": "onst"
					},
					"BAAAAK0DAAAAAAAArgMAAAAAAAAAAAAArgMAAAAAAACvAwAAAAAAAAAAAACvAwAAAAAAALADAAAAAAAAAAAAALADAAAAAAAAsQMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0DAAAAAAAArQMAAAAAAAAAAAAAAADwvw"
				],
				[
					832,
					1,
					"insert",
					{
						"characters": " Config"
					},
					"BwAAALEDAAAAAAAAsgMAAAAAAAAAAAAAsgMAAAAAAACzAwAAAAAAAAAAAACzAwAAAAAAALQDAAAAAAAAAAAAALQDAAAAAAAAtQMAAAAAAAAAAAAAtQMAAAAAAAC2AwAAAAAAAAAAAAC2AwAAAAAAALcDAAAAAAAAAAAAALcDAAAAAAAAuAMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALEDAAAAAAAAsQMAAAAAAAAAAAAAAADwvw"
				],
				[
					833,
					1,
					"insert",
					{
						"characters": "Store("
					},
					"BgAAALgDAAAAAAAAuQMAAAAAAAAAAAAAuQMAAAAAAAC6AwAAAAAAAAAAAAC6AwAAAAAAALsDAAAAAAAAAAAAALsDAAAAAAAAvAMAAAAAAAAAAAAAvAMAAAAAAAC9AwAAAAAAAAAAAAC9AwAAAAAAAL4DAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALgDAAAAAAAAuAMAAAAAAAAAAAAAAADwvw"
				],
				[
					834,
					1,
					"left_delete",
					null,
					"AQAAAL0DAAAAAAAAvQMAAAAAAAABAAAAKA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL4DAAAAAAAAvgMAAAAAAAAAAAAAAADwvw"
				],
				[
					835,
					1,
					"insert",
					{
						"characters": ">("
					},
					"AgAAAL0DAAAAAAAAvgMAAAAAAAAAAAAAvgMAAAAAAAC/AwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL0DAAAAAAAAvQMAAAAAAAAAAAAAAADwvw"
				],
				[
					836,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAL8DAAAAAAAAwAMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL8DAAAAAAAAvwMAAAAAAAAAAAAAAADwvw"
				],
				[
					838,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAMsDAAAAAAAAzAMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMsDAAAAAAAAywMAAAAAAAAAAAAAAADwvw"
				],
				[
					841,
					1,
					"right_delete",
					null,
					"AQAAAJsDAAAAAAAAmwMAAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJsDAAAAAAAAmwMAAAAAAAAAAAAAAADwvw"
				],
				[
					844,
					1,
					"right_delete",
					null,
					"AQAAAJsDAAAAAAAAmwMAAAAAAAAjAAAAc3RkOjpzaGFyZWRfcHRyPGNvbnN0IENvbmZpZ1N0b3JlPig",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJsDAAAAAAAAvgMAAAAAAAAAAAAAAADwvw"
				],
				[
					847,
					1,
					"right_delete",
					null,
					"AQAAAKcDAAAAAAAApwMAAAAAAAABAAAAKQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKcDAAAAAAAApwMAAAAAAAAAAAAAAADwvw"
				],
				[
					849,
					1,
					"insert",
					{
						"characters": " //"
					},
					"AwAAAKgDAAAAAAAAqQMAAAAAAAAAAAAAqQMAAAAAAACqAwAAAAAAAAAAAACqAwAAAAAAAKsDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKgDAAAAAAAAqAMAAAAAAAAAAAAAAADwvw"
				],
				[
					850,
					1,
					"insert",
					{
						"characters": " cn"
					},
					"AwAAAKsDAAAAAAAArAMAAAAAAAAAAAAArAMAAAAAAACtAwAAAAAAAAAAAACtAwAAAAAAAK4DAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKsDAAAAAAAAqwMAAAAAAAAAAAAAAADwvw"
				],
				[
					851,
					1,
					"left_delete",
					null,
					"AQAAAK0DAAAAAAAArQMAAAAAAAABAAAAbg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK4DAAAAAAAArgMAAAAAAAAAAAAAAADwvw"
				],
				[
					852,
					1,
					"insert",
					{
						"characters": "onfig"
					},
					"BQAAAK0DAAAAAAAArgMAAAAAAAAAAAAArgMAAAAAAACvAwAAAAAAAAAAAACvAwAAAAAAALADAAAAAAAAAAAAALADAAAAAAAAsQMAAAAAAAAAAAAAsQMAAAAAAACyAwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0DAAAAAAAArQMAAAAAAAAAAAAAAADwvw"
				],
				[
					853,
					1,
					"insert",
					{
						"characters": "Store"
					},
					"BQAAALIDAAAAAAAAswMAAAAAAAAAAAAAswMAAAAAAAC0AwAAAAAAAAAAAAC0AwAAAAAAALUDAAAAAAAAAAAAALUDAAAAAAAAtgMAAAAAAAAAAAAAtgMAAAAAAAC3AwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALIDAAAAAAAAsgMAAAAAAAAAAAAAAADwvw"
				],
				[
					854,
					1,
					"insert",
					{
						"characters": " is"
					},
					"AwAAALcDAAAAAAAAuAMAAAAAAAAAAAAAuAMAAAAAAAC5AwAAAAAAAAAAAAC5AwAAAAAAALoDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALcDAAAAAAAAtwMAAAAAAAAAAAAAAADwvw"
				],
				[
					855,
					1,
					"insert",
					{
						"characters": " a"
					},
					"AgAAALoDAAAAAAAAuwMAAAAAAAAAAAAAuwMAAAAAAAC8AwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALoDAAAAAAAAugMAAAAAAAAAAAAAAADwvw"
				],
				[
					856,
					1,
					"insert",
					{
						"characters": " sigleton"
					},
					"CQAAALwDAAAAAAAAvQMAAAAAAAAAAAAAvQMAAAAAAAC+AwAAAAAAAAAAAAC+AwAAAAAAAL8DAAAAAAAAAAAAAL8DAAAAAAAAwAMAAAAAAAAAAAAAwAMAAAAAAADBAwAAAAAAAAAAAADBAwAAAAAAAMIDAAAAAAAAAAAAAMIDAAAAAAAAwwMAAAAAAAAAAAAAwwMAAAAAAADEAwAAAAAAAAAAAADEAwAAAAAAAMUDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALwDAAAAAAAAvAMAAAAAAAAAAAAAAADwvw"
				],
				[
					857,
					1,
					"insert",
					{
						"characters": " so"
					},
					"AwAAAMUDAAAAAAAAxgMAAAAAAAAAAAAAxgMAAAAAAADHAwAAAAAAAAAAAADHAwAAAAAAAMgDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMUDAAAAAAAAxQMAAAAAAAAAAAAAAADwvw"
				],
				[
					858,
					1,
					"insert",
					{
						"characters": " it's"
					},
					"BQAAAMgDAAAAAAAAyQMAAAAAAAAAAAAAyQMAAAAAAADKAwAAAAAAAAAAAADKAwAAAAAAAMsDAAAAAAAAAAAAAMsDAAAAAAAAzAMAAAAAAAAAAAAAzAMAAAAAAADNAwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMgDAAAAAAAAyAMAAAAAAAAAAAAAAADwvw"
				],
				[
					859,
					1,
					"insert",
					{
						"characters": " safe"
					},
					"BQAAAM0DAAAAAAAAzgMAAAAAAAAAAAAAzgMAAAAAAADPAwAAAAAAAAAAAADPAwAAAAAAANADAAAAAAAAAAAAANADAAAAAAAA0QMAAAAAAAAAAAAA0QMAAAAAAADSAwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM0DAAAAAAAAzQMAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAbUA"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "#ifndef"
					},
					"BwAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAYAAAAAAAAAAAAAAAYAAAAAAAAABwAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAcAAAAAAAAACAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAHAAAAAAAAAAcAAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"paste",
					null,
					"AQAAAAgAAAAAAAAALwAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAIAAAAAAAAAAgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					11,
					"left_delete",
					null,
					"CwAAABIAAAAAAAAAEgAAAAAAAAABAAAAIBEAAAAAAAAAEQAAAAAAAAABAAAALxAAAAAAAAAAEAAAAAAAAAABAAAALw8AAAAAAAAADwAAAAAAAAABAAAAIA4AAAAAAAAADgAAAAAAAAABAAAAIA0AAAAAAAAADQAAAAAAAAABAAAAZgwAAAAAAAAADAAAAAAAAAABAAAAaQsAAAAAAAAACwAAAAAAAAABAAAAZAoAAAAAAAAACgAAAAAAAAABAAAAbgkAAAAAAAAACQAAAAAAAAABAAAAZQgAAAAAAAAACAAAAAAAAAABAAAAIw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATAAAAAAAAABMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"AwAAACUAAAAAAAAAJgAAAAAAAAAAAAAAJgAAAAAAAAAnAAAAAAAAAAAAAAAnAAAAAAAAACgAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAlAAAAAAAAACUAAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "#define"
					},
					"BwAAACUAAAAAAAAAJgAAAAAAAAAAAAAAJgAAAAAAAAAnAAAAAAAAAAAAAAAnAAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAAKQAAAAAAAAAAAAAAKQAAAAAAAAAqAAAAAAAAAAAAAAAqAAAAAAAAACsAAAAAAAAAAAAAACsAAAAAAAAALAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAlAAAAAAAAACUAAAAAAAAAAAAAAAAAAAA"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACwAAAAAAAAALQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAsAAAAAAAAACwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"paste",
					null,
					"AQAAAC0AAAAAAAAAVAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAtAAAAAAAAAC0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					11,
					"left_delete",
					null,
					"CwAAADcAAAAAAAAANwAAAAAAAAABAAAAIDYAAAAAAAAANgAAAAAAAAABAAAALzUAAAAAAAAANQAAAAAAAAABAAAALzQAAAAAAAAANAAAAAAAAAABAAAAIDMAAAAAAAAAMwAAAAAAAAABAAAAIDIAAAAAAAAAMgAAAAAAAAABAAAAZjEAAAAAAAAAMQAAAAAAAAABAAAAaTAAAAAAAAAAMAAAAAAAAAABAAAAZC8AAAAAAAAALwAAAAAAAAABAAAAbi4AAAAAAAAALgAAAAAAAAABAAAAZS0AAAAAAAAALQAAAAAAAAABAAAAIw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA4AAAAAAAAADgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"reindent",
					null,
					"AQAAABgKAAAAAAAAHAoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAYCgAAAAAAABgKAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"paste",
					null,
					"AQAAABQKAAAAAAAAPAoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAUCgAAAAAAABQKAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"paste",
					null,
					"AQAAAJkKAAAAAAAAwQoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZCgAAAAAAAJkKAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"paste",
					null,
					"AQAAABgLAAAAAAAAQAsAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAYCwAAAAAAABgLAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEoAAAAAAAAASwAAAAAAAAAAAAAAQQoAAAAAAABBCgAAAAAAAAQAAAAgICAg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABKAAAAAAAAAEoAAAAAAAAAAAAAAAAA8L8"
				],
				[
					54,
					1,
					"right_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAABNAAAAI2lmbmRlZiBTUkNfTEFWQV9MSUJfUkVOREVSRU5HSU5FX0hfCiNkZWZpbmUgU1JDX0xBVkFfTElCX1JFTkRFUkVOR0lORV9IXwoKCgo",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAE0AAAAAAAAAAAAAAAAAAAA"
				],
				[
					60,
					2,
					"left_delete",
					null,
					"AgAAABALAAAAAAAAEAsAAAAAAAAnAAAAI2VuZGlmICAvLyBTUkNfTEFWQV9MSUJfUkVOREVSRU5HSU5FX0hfDwsAAAAAAAAPCwAAAAAAAAEAAAAK",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQCwAAAAAAADcLAAAAAAAAAAAAAAAA8L8"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "*/"
					},
					"AgAAAA8LAAAAAAAAEAsAAAAAAAAAAAAAEAsAAAAAAAARCwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPCwAAAAAAAA8LAAAAAAAAAAAAAAAA8L8"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAABsAAAAAAAAAHAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbAAAAAAAAABsAAAAAAAAAAAAAAAAA8L8"
				],
				[
					65,
					1,
					"left_delete",
					null,
					"AQAAABsAAAAAAAAAGwAAAAAAAAABAAAAKg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcAAAAAAAAABwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "/*"
					},
					"AgAAABsAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAdAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbAAAAAAAAABsAAAAAAAAAAAAAAAAA8L8"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAB4AAAAAAAAAHwAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAeAAAAAAAAAB4AAAAAAAAAAAAAAAAAAAA"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABsAAAAAAAAAHAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbAAAAAAAAABsAAAAAAAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "src/lava_lib/render_engine.h",
			"settings":
			{
				"buffer_size": 2395,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAOkAAAAAAAAA6gAAAAAAAAAAAAAA6gAAAAAAAADrAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOkAAAAAAAAA6QAAAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEABAAAAAAAAQQEAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEABAAAAAAAAQAEAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					2,
					"left_delete",
					null,
					"AgAAAEABAAAAAAAAQAEAAAAAAAABAAAACj8BAAAAAAAAPwEAAAAAAAABAAAACg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEEBAAAAAAAAQQEAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"AwAAAJABAAAAAAAAkQEAAAAAAAAAAAAAkQEAAAAAAACSAQAAAAAAAAAAAACSAQAAAAAAAJMBAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJABAAAAAAAAkAEAAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"reindent",
					null,
					"AQAAAJEBAAAAAAAAlQEAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJEBAAAAAAAAkQEAAAAAAAAAAAAAAAAAAA"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "virtual"
					},
					"BwAAAJUBAAAAAAAAlgEAAAAAAAAAAAAAlgEAAAAAAACXAQAAAAAAAAAAAACXAQAAAAAAAJgBAAAAAAAAAAAAAJgBAAAAAAAAmQEAAAAAAAAAAAAAmQEAAAAAAACaAQAAAAAAAAAAAACaAQAAAAAAAJsBAAAAAAAAAAAAAJsBAAAAAAAAnAEAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJUBAAAAAAAAlQEAAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJwBAAAAAAAAnQEAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJwBAAAAAAAAnAEAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "RenderGrp"
					},
					"CQAAAJ0BAAAAAAAAngEAAAAAAAAAAAAAngEAAAAAAACfAQAAAAAAAAAAAACfAQAAAAAAAKABAAAAAAAAAAAAAKABAAAAAAAAoQEAAAAAAAAAAAAAoQEAAAAAAACiAQAAAAAAAAAAAACiAQAAAAAAAKMBAAAAAAAAAAAAAKMBAAAAAAAApAEAAAAAAAAAAAAApAEAAAAAAAClAQAAAAAAAAAAAAClAQAAAAAAAKYBAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ0BAAAAAAAAnQEAAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "ah"
					},
					"AgAAAKYBAAAAAAAApwEAAAAAAAAAAAAApwEAAAAAAACoAQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKYBAAAAAAAApgEAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					3,
					"left_delete",
					null,
					"AwAAAKcBAAAAAAAApwEAAAAAAAABAAAAaKYBAAAAAAAApgEAAAAAAAABAAAAYaUBAAAAAAAApQEAAAAAAAABAAAAcA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKgBAAAAAAAAqAEAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "aph::"
					},
					"BQAAAKUBAAAAAAAApgEAAAAAAAAAAAAApgEAAAAAAACnAQAAAAAAAAAAAACnAQAAAAAAAKgBAAAAAAAAAAAAAKgBAAAAAAAAqQEAAAAAAAAAAAAAqQEAAAAAAACqAQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKUBAAAAAAAApQEAAAAAAAAAAAAAAADwvw"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AQAAAKoBAAAAAAAAqwEAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKoBAAAAAAAAqgEAAAAAAAAAAAAAAADwvw"
				],
				[
					20,
					1,
					"insert_completion",
					{
						"completion": "SharedPtr",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "SharedPtr"
					},
					"AgAAAKoBAAAAAAAAqgEAAAAAAAABAAAAU6oBAAAAAAAAswEAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKsBAAAAAAAAqwEAAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " crea"
					},
					"BQAAALMBAAAAAAAAtAEAAAAAAAAAAAAAtAEAAAAAAAC1AQAAAAAAAAAAAAC1AQAAAAAAALYBAAAAAAAAAAAAALYBAAAAAAAAtwEAAAAAAAAAAAAAtwEAAAAAAAC4AQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALMBAAAAAAAAswEAAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "te"
					},
					"AgAAALgBAAAAAAAAuQEAAAAAAAAAAAAAuQEAAAAAAAC6AQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALgBAAAAAAAAuAEAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "Textures"
					},
					"CAAAALoBAAAAAAAAuwEAAAAAAAAAAAAAuwEAAAAAAAC8AQAAAAAAAAAAAAC8AQAAAAAAAL0BAAAAAAAAAAAAAL0BAAAAAAAAvgEAAAAAAAAAAAAAvgEAAAAAAAC/AQAAAAAAAAAAAAC/AQAAAAAAAMABAAAAAAAAAAAAAMABAAAAAAAAwQEAAAAAAAAAAAAAwQEAAAAAAADCAQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALoBAAAAAAAAugEAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "Resolc"
					},
					"BgAAAMIBAAAAAAAAwwEAAAAAAAAAAAAAwwEAAAAAAADEAQAAAAAAAAAAAADEAQAAAAAAAMUBAAAAAAAAAAAAAMUBAAAAAAAAxgEAAAAAAAAAAAAAxgEAAAAAAADHAQAAAAAAAAAAAADHAQAAAAAAAMgBAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMIBAAAAAAAAwgEAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAMgBAAAAAAAAyQEAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMgBAAAAAAAAyAEAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					2,
					"left_delete",
					null,
					"AgAAAMgBAAAAAAAAyAEAAAAAAAABAAAAZccBAAAAAAAAxwEAAAAAAAABAAAAYw",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMkBAAAAAAAAyQEAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "veGrap"
					},
					"BgAAAMcBAAAAAAAAyAEAAAAAAAAAAAAAyAEAAAAAAADJAQAAAAAAAAAAAADJAQAAAAAAAMoBAAAAAAAAAAAAAMoBAAAAAAAAywEAAAAAAAAAAAAAywEAAAAAAADMAQAAAAAAAAAAAADMAQAAAAAAAM0BAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMcBAAAAAAAAxwEAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAAM0BAAAAAAAAzgEAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM0BAAAAAAAAzQEAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAM4BAAAAAAAA0AEAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM4BAAAAAAAAzgEAAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANABAAAAAAAA0QEAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANABAAAAAAAA0AEAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAH4AAAAAAAAAfwAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH4AAAAAAAAAfgAAAAAAAAAAAAAAAAAAAA"
				],
				[
					40,
					1,
					"paste",
					null,
					"AQAAAH8AAAAAAAAAjwAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH8AAAAAAAAAfwAAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAP8BAAAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAABAgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP8BAAAAAAAA/wEAAAAAAAAAAAAAAABiQA"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAAACAAAAAAAAAQIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAACAAAAAAAAAAIAAAAAAAAAAAAAAAAAAA"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "  //"
					},
					"BAAAAAECAAAAAAAAAgIAAAAAAAAAAAAAAgIAAAAAAAADAgAAAAAAAAAAAAADAgAAAAAAAAQCAAAAAAAAAAAAAAQCAAAAAAAABQIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAECAAAAAAAAAQIAAAAAAAAAAAAAAADwvw"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": " nmae"
					},
					"BQAAAAUCAAAAAAAABgIAAAAAAAAAAAAABgIAAAAAAAAHAgAAAAAAAAAAAAAHAgAAAAAAAAgCAAAAAAAAAAAAAAgCAAAAAAAACQIAAAAAAAAAAAAACQIAAAAAAAAKAgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAUCAAAAAAAABQIAAAAAAAAAAAAAAADwvw"
				],
				[
					48,
					3,
					"left_delete",
					null,
					"AwAAAAkCAAAAAAAACQIAAAAAAAABAAAAZQgCAAAAAAAACAIAAAAAAAABAAAAYQcCAAAAAAAABwIAAAAAAAABAAAAbQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAoCAAAAAAAACgIAAAAAAAAAAAAAAADwvw"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "a,e"
					},
					"AwAAAAcCAAAAAAAACAIAAAAAAAAAAAAACAIAAAAAAAAJAgAAAAAAAAAAAAAJAgAAAAAAAAoCAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAcCAAAAAAAABwIAAAAAAAAAAAAAAADwvw"
				],
				[
					50,
					2,
					"left_delete",
					null,
					"AgAAAAkCAAAAAAAACQIAAAAAAAABAAAAZQgCAAAAAAAACAIAAAAAAAABAAAALA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAoCAAAAAAAACgIAAAAAAAAAAAAAAADwvw"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "mespace"
					},
					"BwAAAAgCAAAAAAAACQIAAAAAAAAAAAAACQIAAAAAAAAKAgAAAAAAAAAAAAAKAgAAAAAAAAsCAAAAAAAAAAAAAAsCAAAAAAAADAIAAAAAAAAAAAAADAIAAAAAAAANAgAAAAAAAAAAAAANAgAAAAAAAA4CAAAAAAAAAAAAAA4CAAAAAAAADwIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAgCAAAAAAAACAIAAAAAAAAAAAAAAADwvw"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": " lava"
					},
					"BQAAAA8CAAAAAAAAEAIAAAAAAAAAAAAAEAIAAAAAAAARAgAAAAAAAAAAAAARAgAAAAAAABICAAAAAAAAAAAAABICAAAAAAAAEwIAAAAAAAAAAAAAEwIAAAAAAAAUAgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA8CAAAAAAAADwIAAAAAAAAAAAAAAADwvw"
				],
				[
					55,
					1,
					"paste",
					null,
					"AgAAAK4BAAAAAAAAzAEAAAAAAAAAAAAAzAEAAAAAAADMAQAAAAAAABYAAABSZW5kZXJHcmFwaDo6U2hhcmVkUHRy",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK4BAAAAAAAAxAEAAAAAAAAAAAAAAADwvw"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAH4AAAAAAAAAfwAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH4AAAAAAAAAfgAAAAAAAAAAAAAAAADwvw"
				],
				[
					62,
					1,
					"paste",
					null,
					"AQAAAH4AAAAAAAAAnQAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH4AAAAAAAAAfgAAAAAAAAAAAAAAAAAAAA"
				],
				[
					65,
					5,
					"right_delete",
					null,
					"BQAAAI8AAAAAAAAAjwAAAAAAAAABAAAAU48AAAAAAAAAjwAAAAAAAAABAAAAY48AAAAAAAAAjwAAAAAAAAABAAAAZY8AAAAAAAAAjwAAAAAAAAABAAAAbo8AAAAAAAAAjwAAAAAAAAABAAAAZQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI8AAAAAAAAAjwAAAAAAAAAAAAAAAADwvw"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "Render"
					},
					"BgAAAI8AAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACRAAAAAAAAAAAAAACRAAAAAAAAAJIAAAAAAAAAAAAAAJIAAAAAAAAAkwAAAAAAAAAAAAAAkwAAAAAAAACUAAAAAAAAAAAAAACUAAAAAAAAAJUAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI8AAAAAAAAAjwAAAAAAAAAAAAAAAADwvw"
				],
				[
					68,
					1,
					"insert_completion",
					{
						"completion": "RenderGraph",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "RenderGraph"
					},
					"AgAAAI8AAAAAAAAAjwAAAAAAAAAGAAAAUmVuZGVyjwAAAAAAAACaAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJUAAAAAAAAAlQAAAAAAAAAAAAAAAADwvw"
				],
				[
					70,
					5,
					"right_delete",
					null,
					"BQAAAJsAAAAAAAAAmwAAAAAAAAABAAAAU5sAAAAAAAAAmwAAAAAAAAABAAAAY5sAAAAAAAAAmwAAAAAAAAABAAAAZZsAAAAAAAAAmwAAAAAAAAABAAAAbpsAAAAAAAAAmwAAAAAAAAABAAAAZQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJsAAAAAAAAAmwAAAAAAAAAAAAAAAADwvw"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "Render"
					},
					"BgAAAJsAAAAAAAAAnAAAAAAAAAAAAAAAnAAAAAAAAACdAAAAAAAAAAAAAACdAAAAAAAAAJ4AAAAAAAAAAAAAAJ4AAAAAAAAAnwAAAAAAAAAAAAAAnwAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAAKEAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJsAAAAAAAAAmwAAAAAAAAAAAAAAAADwvw"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "Gr"
					},
					"AgAAAKEAAAAAAAAAogAAAAAAAAAAAAAAogAAAAAAAACjAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKEAAAAAAAAAoQAAAAAAAAAAAAAAAADwvw"
				],
				[
					75,
					1,
					"insert_completion",
					{
						"completion": "RenderGraph",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "RenderGraph"
					},
					"AgAAAJsAAAAAAAAAmwAAAAAAAAAIAAAAUmVuZGVyR3KbAAAAAAAAAKYAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKMAAAAAAAAAowAAAAAAAAAAAAAAAADwvw"
				],
				[
					78,
					3,
					"right_delete",
					null,
					"AwAAAL0AAAAAAAAAvQAAAAAAAAASAAAAbmFtZXNwYWNlIEZhbGNvciB7vQAAAAAAAAC9AAAAAAAAAAEAAAAKvQAAAAAAAAC9AAAAAAAAAAEAAAAK",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM8AAAAAAAAAvQAAAAAAAAAAAAAAAADwvw"
				],
				[
					81,
					1,
					"left_delete",
					null,
					"AQAAAAcCAAAAAAAABwIAAAAAAAAYAAAACn0gIC8vIG5hbWVzcGFjZSBGYWxjb3IK",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAcCAAAAAAAAHwIAAAAAAAAAAAAAAAAAAA"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "Scene"
					},
					"BQAAALUBAAAAAAAAtgEAAAAAAAAAAAAAtgEAAAAAAAC3AQAAAAAAAAAAAAC3AQAAAAAAALgBAAAAAAAAAAAAALgBAAAAAAAAuQEAAAAAAAAAAAAAuQEAAAAAAAC6AQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALUBAAAAAAAAtQEAAAAAAAAAAAAAAADwvw"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": "::"
					},
					"AgAAALoBAAAAAAAAuwEAAAAAAAAAAAAAuwEAAAAAAAC8AQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALoBAAAAAAAAugEAAAAAAAAAAAAAAADwvw"
				],
				[
					88,
					1,
					"insert_completion",
					{
						"completion": "SharedPtr",
						"format": "text",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "SharedPtr"
					},
					"AQAAALwBAAAAAAAAxQEAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALwBAAAAAAAAvAEAAAAAAAAAAAAAAADwvw"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": " pS"
					},
					"AwAAAMUBAAAAAAAAxgEAAAAAAAAAAAAAxgEAAAAAAADHAQAAAAAAAAAAAADHAQAAAAAAAMgBAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMUBAAAAAAAAxQEAAAAAAAAAAAAAAADwvw"
				],
				[
					90,
					1,
					"insert_completion",
					{
						"completion": "pScene",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "pScene"
					},
					"AgAAAMYBAAAAAAAAxgEAAAAAAAACAAAAcFPGAQAAAAAAAMwBAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMgBAAAAAAAAyAEAAAAAAAAAAAAAAADwvw"
				],
				[
					93,
					1,
					"paste",
					null,
					"AgAAALUBAAAAAAAAzwEAAAAAAAAAAAAAzwEAAAAAAADPAQAAAAAAABAAAABTY2VuZTo6U2hhcmVkUHRy",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALUBAAAAAAAAxQEAAAAAAAAAAAAAAADwvw"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": "Scene"
					},
					"BgAAAMsBAAAAAAAAzAEAAAAAAAAAAAAAzAEAAAAAAADMAQAAAAAAAAMAAABpbnTMAQAAAAAAAM0BAAAAAAAAAAAAAM0BAAAAAAAAzgEAAAAAAAAAAAAAzgEAAAAAAADPAQAAAAAAAAAAAADPAQAAAAAAANABAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMsBAAAAAAAAzgEAAAAAAAAAAAAAAADwvw"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": "Falcor::"
					},
					"CAAAAMsBAAAAAAAAzAEAAAAAAAAAAAAAzAEAAAAAAADNAQAAAAAAAAAAAADNAQAAAAAAAM4BAAAAAAAAAAAAAM4BAAAAAAAAzwEAAAAAAAAAAAAAzwEAAAAAAADQAQAAAAAAAAAAAADQAQAAAAAAANEBAAAAAAAAAAAAANEBAAAAAAAA0gEAAAAAAAAAAAAA0gEAAAAAAADTAQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMsBAAAAAAAAywEAAAAAAAAAAAAAAADwvw"
				],
				[
					110,
					1,
					"paste",
					null,
					"AQAAACsCAAAAAAAAVgIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACsCAAAAAAAAKwIAAAAAAAAAAAAAAADwvw"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAF0AAAAAAAAAXgAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF0AAAAAAAAAXQAAAAAAAAAAAAAAAADwvw"
				],
				[
					116,
					1,
					"paste",
					null,
					"AQAAAF4AAAAAAAAAfQAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF4AAAAAAAAAXgAAAAAAAAAAAAAAAADwvw"
				],
				[
					119,
					1,
					"insert",
					{
						"characters": "Core/A"
					},
					"BgAAAG8AAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAABxAAAAAAAAAAAAAABxAAAAAAAAAHIAAAAAAAAAAAAAAHIAAAAAAAAAcwAAAAAAAAAAAAAAcwAAAAAAAAB0AAAAAAAAAAAAAAB0AAAAAAAAAHUAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG8AAAAAAAAAbwAAAAAAAAAAAAAAAADwvw"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": "PI"
					},
					"AgAAAHUAAAAAAAAAdgAAAAAAAAAAAAAAdgAAAAAAAAB3AAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHUAAAAAAAAAdQAAAAAAAAAAAAAAAADwvw"
				],
				[
					121,
					5,
					"right_delete",
					null,
					"BQAAAHcAAAAAAAAAdwAAAAAAAAABAAAAU3cAAAAAAAAAdwAAAAAAAAABAAAAY3cAAAAAAAAAdwAAAAAAAAABAAAAZXcAAAAAAAAAdwAAAAAAAAABAAAAbncAAAAAAAAAdwAAAAAAAAABAAAAZQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHcAAAAAAAAAdwAAAAAAAAAAAAAAAADwvw"
				],
				[
					123,
					5,
					"right_delete",
					null,
					"BQAAAHgAAAAAAAAAeAAAAAAAAAABAAAAU3gAAAAAAAAAeAAAAAAAAAABAAAAY3gAAAAAAAAAeAAAAAAAAAABAAAAZXgAAAAAAAAAeAAAAAAAAAABAAAAbngAAAAAAAAAeAAAAAAAAAABAAAAZQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHgAAAAAAAAAeAAAAAAAAAAAAAAAAADwvw"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "Device"
					},
					"BgAAAHgAAAAAAAAAeQAAAAAAAAAAAAAAeQAAAAAAAAB6AAAAAAAAAAAAAAB6AAAAAAAAAHsAAAAAAAAAAAAAAHsAAAAAAAAAfAAAAAAAAAAAAAAAfAAAAAAAAAB9AAAAAAAAAAAAAAB9AAAAAAAAAH4AAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHgAAAAAAAAAeAAAAAAAAAAAAAAAAADwvw"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "Devic"
					},
					"BgAAANkBAAAAAAAA2gEAAAAAAAAAAAAA2gEAAAAAAADaAQAAAAAAACsAAABzdGQ6OnNoYXJlZF9wdHI8Y29uc3QgRmFsY29yOjpTY2VuZT4gcFNjZW5l2gEAAAAAAADbAQAAAAAAAAAAAADbAQAAAAAAANwBAAAAAAAAAAAAANwBAAAAAAAA3QEAAAAAAAAAAAAA3QEAAAAAAADeAQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANkBAAAAAAAABAIAAAAAAAAAAAAAAADwvw"
				],
				[
					130,
					1,
					"insert_completion",
					{
						"completion": "Device",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Device"
					},
					"AgAAANkBAAAAAAAA2QEAAAAAAAAFAAAARGV2aWPZAQAAAAAAAN8BAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN4BAAAAAAAA3gEAAAAAAAAAAAAAAADwvw"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": "L:"
					},
					"AgAAAN8BAAAAAAAA4AEAAAAAAAAAAAAA4AEAAAAAAADhAQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8BAAAAAAAA3wEAAAAAAAAAAAAAAADwvw"
				],
				[
					132,
					2,
					"left_delete",
					null,
					"AgAAAOABAAAAAAAA4AEAAAAAAAABAAAAOt8BAAAAAAAA3wEAAAAAAAABAAAATA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOEBAAAAAAAA4QEAAAAAAAAAAAAAAADwvw"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": "::S"
					},
					"AwAAAN8BAAAAAAAA4AEAAAAAAAAAAAAA4AEAAAAAAADhAQAAAAAAAAAAAADhAQAAAAAAAOIBAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8BAAAAAAAA3wEAAAAAAAAAAAAAAADwvw"
				],
				[
					134,
					1,
					"insert_completion",
					{
						"completion": "SharedPtr",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "SharedPtr"
					},
					"AgAAAOEBAAAAAAAA4QEAAAAAAAABAAAAU+EBAAAAAAAA6gEAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOIBAAAAAAAA4gEAAAAAAAAAAAAAAADwvw"
				],
				[
					135,
					1,
					"insert",
					{
						"characters": " p"
					},
					"AgAAAOoBAAAAAAAA6wEAAAAAAAAAAAAA6wEAAAAAAADsAQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOoBAAAAAAAA6gEAAAAAAAAAAAAAAADwvw"
				],
				[
					136,
					1,
					"insert_completion",
					{
						"completion": "pDevice",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "pDevice"
					},
					"AgAAAOsBAAAAAAAA6wEAAAAAAAABAAAAcOsBAAAAAAAA8gEAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOwBAAAAAAAA7AEAAAAAAAAAAAAAAADwvw"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "Falcor::"
					},
					"CAAAANkBAAAAAAAA2gEAAAAAAAAAAAAA2gEAAAAAAADbAQAAAAAAAAAAAADbAQAAAAAAANwBAAAAAAAAAAAAANwBAAAAAAAA3QEAAAAAAAAAAAAA3QEAAAAAAADeAQAAAAAAAAAAAADeAQAAAAAAAN8BAAAAAAAAAAAAAN8BAAAAAAAA4AEAAAAAAAAAAAAA4AEAAAAAAADhAQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANkBAAAAAAAA2QEAAAAAAAAAAAAAAADwvw"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": "\n\nclass"
					},
					"BwAAAHYCAAAAAAAAdwIAAAAAAAAAAAAAdwIAAAAAAAB4AgAAAAAAAAAAAAB4AgAAAAAAAHkCAAAAAAAAAAAAAHkCAAAAAAAAegIAAAAAAAAAAAAAegIAAAAAAAB7AgAAAAAAAAAAAAB7AgAAAAAAAHwCAAAAAAAAAAAAAHwCAAAAAAAAfQIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHYCAAAAAAAAdgIAAAAAAAAAAAAAAADwvw"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAH0CAAAAAAAAfgIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH0CAAAAAAAAfQIAAAAAAAAAAAAAAADwvw"
				],
				[
					155,
					1,
					"insert",
					{
						"characters": "Raster"
					},
					"BgAAAH4CAAAAAAAAfwIAAAAAAAAAAAAAfwIAAAAAAACAAgAAAAAAAAAAAACAAgAAAAAAAIECAAAAAAAAAAAAAIECAAAAAAAAggIAAAAAAAAAAAAAggIAAAAAAACDAgAAAAAAAAAAAACDAgAAAAAAAIQCAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH4CAAAAAAAAfgIAAAAAAAAAAAAAAADwvw"
				],
				[
					156,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAIQCAAAAAAAAhQIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIQCAAAAAAAAhAIAAAAAAAAAAAAAAADwvw"
				],
				[
					157,
					1,
					"insert",
					{
						"characters": "er"
					},
					"AgAAAIUCAAAAAAAAhgIAAAAAAAAAAAAAhgIAAAAAAACHAgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIUCAAAAAAAAhQIAAAAAAAAAAAAAAADwvw"
				],
				[
					158,
					1,
					"left_delete",
					null,
					"AQAAAIYCAAAAAAAAhgIAAAAAAAABAAAAcg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIcCAAAAAAAAhwIAAAAAAAAAAAAAAADwvw"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": "z"
					},
					"AQAAAIYCAAAAAAAAhwIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIYCAAAAAAAAhgIAAAAAAAAAAAAAAADwvw"
				],
				[
					160,
					2,
					"left_delete",
					null,
					"AgAAAIYCAAAAAAAAhgIAAAAAAAABAAAAeoUCAAAAAAAAhQIAAAAAAAABAAAAZQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIcCAAAAAAAAhwIAAAAAAAAAAAAAAADwvw"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": "zerNe"
					},
					"BQAAAIUCAAAAAAAAhgIAAAAAAAAAAAAAhgIAAAAAAACHAgAAAAAAAAAAAACHAgAAAAAAAIgCAAAAAAAAAAAAAIgCAAAAAAAAiQIAAAAAAAAAAAAAiQIAAAAAAACKAgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIUCAAAAAAAAhQIAAAAAAAAAAAAAAADwvw"
				],
				[
					162,
					2,
					"left_delete",
					null,
					"AgAAAIkCAAAAAAAAiQIAAAAAAAABAAAAZYgCAAAAAAAAiAIAAAAAAAABAAAATg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIoCAAAAAAAAigIAAAAAAAAAAAAAAADwvw"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": "Engine"
					},
					"BgAAAIgCAAAAAAAAiQIAAAAAAAAAAAAAiQIAAAAAAACKAgAAAAAAAAAAAACKAgAAAAAAAIsCAAAAAAAAAAAAAIsCAAAAAAAAjAIAAAAAAAAAAAAAjAIAAAAAAACNAgAAAAAAAAAAAACNAgAAAAAAAI4CAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIgCAAAAAAAAiAIAAAAAAAAAAAAAAADwvw"
				],
				[
					164,
					1,
					"insert",
					{
						"characters": " P"
					},
					"AgAAAI4CAAAAAAAAjwIAAAAAAAAAAAAAjwIAAAAAAACQAgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI4CAAAAAAAAjgIAAAAAAAAAAAAAAADwvw"
				],
				[
					165,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJACAAAAAAAAkgIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJACAAAAAAAAkAIAAAAAAAAAAAAAAADwvw"
				],
				[
					166,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAJACAAAAAAAAkAIAAAAAAAABAAAAe5ACAAAAAAAAkAIAAAAAAAABAAAAfQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJECAAAAAAAAkQIAAAAAAAAAAAAAAADwvw"
				],
				[
					167,
					1,
					"left_delete",
					null,
					"AQAAAI8CAAAAAAAAjwIAAAAAAAABAAAAUA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJACAAAAAAAAkAIAAAAAAAAAAAAAAADwvw"
				],
				[
					168,
					1,
					"left_delete",
					null,
					"AQAAAI4CAAAAAAAAjgIAAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI8CAAAAAAAAjwIAAAAAAAAAAAAAAADwvw"
				],
				[
					171,
					1,
					"paste",
					null,
					"AQAAAPQAAAAAAAAAJQEAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPQAAAAAAAAA9AAAAAAAAAAAAAAAAADwvw"
				],
				[
					172,
					1,
					"right_delete",
					null,
					"AQAAACUBAAAAAAAAJQEAAAAAAAABAAAAew",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACUBAAAAAAAAJQEAAAAAAAAAAAAAAADwvw"
				],
				[
					180,
					1,
					"paste",
					null,
					"AgAAABoBAAAAAAAAJgEAAAAAAAAAAAAAJgEAAAAAAAAmAQAAAAAAAAgAAABSZXNvdXJjZQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABoBAAAAAAAAIgEAAAAAAAAAAAAAAADwvw"
				],
				[
					183,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAMICAAAAAAAAwwIAAAAAAAAAAAAAwwIAAAAAAADEAgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMICAAAAAAAAwgIAAAAAAAAAAAAAAADwvw"
				],
				[
					184,
					1,
					"paste",
					null,
					"AQAAAMQCAAAAAAAACgMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMQCAAAAAAAAxAIAAAAAAAAAAAAAAADwvw"
				],
				[
					187,
					1,
					"right_delete",
					null,
					"AQAAAMQCAAAAAAAAxAIAAAAAAAABAAAAOg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMQCAAAAAAAAxAIAAAAAAAAAAAAAAADwvw"
				],
				[
					195,
					1,
					"paste",
					null,
					"AgAAAMwCAAAAAAAA2AIAAAAAAAAAAAAA2AIAAAAAAADYAgAAAAAAAAgAAABSZXNvdXJjZQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMwCAAAAAAAA1AIAAAAAAAAAAAAAAADwvw"
				],
				[
					199,
					1,
					"paste",
					null,
					"AgAAAPoCAAAAAAAABgMAAAAAAAAAAAAABgMAAAAAAAAGAwAAAAAAAAgAAABSZXNvdXJjZQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPoCAAAAAAAAAgMAAAAAAAAAAAAAAADwvw"
				],
				[
					207,
					1,
					"paste",
					null,
					"AgAAAAgDAAAAAAAAGAMAAAAAAAAAAAAAGAMAAAAAAAAYAwAAAAAAAAYAAABCdWZmZXI",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA4DAAAAAAAACAMAAAAAAAAAAAAAAADwvw"
				],
				[
					211,
					1,
					"insert",
					{
						"characters": "Falcro::"
					},
					"CAAAAOECAAAAAAAA4gIAAAAAAAAAAAAA4gIAAAAAAADjAgAAAAAAAAAAAADjAgAAAAAAAOQCAAAAAAAAAAAAAOQCAAAAAAAA5QIAAAAAAAAAAAAA5QIAAAAAAADmAgAAAAAAAAAAAADmAgAAAAAAAOcCAAAAAAAAAAAAAOcCAAAAAAAA6AIAAAAAAAAAAAAA6AIAAAAAAADpAgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOECAAAAAAAA4QIAAAAAAAAAAAAAAADwvw"
				],
				[
					212,
					4,
					"left_delete",
					null,
					"BAAAAOgCAAAAAAAA6AIAAAAAAAABAAAAOucCAAAAAAAA5wIAAAAAAAABAAAAOuYCAAAAAAAA5gIAAAAAAAABAAAAb+UCAAAAAAAA5QIAAAAAAAABAAAAcg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOkCAAAAAAAA6QIAAAAAAAAAAAAAAADwvw"
				],
				[
					213,
					1,
					"insert",
					{
						"characters": "or::"
					},
					"BAAAAOUCAAAAAAAA5gIAAAAAAAAAAAAA5gIAAAAAAADnAgAAAAAAAAAAAADnAgAAAAAAAOgCAAAAAAAAAAAAAOgCAAAAAAAA6QIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOUCAAAAAAAA5QIAAAAAAAAAAAAAAADwvw"
				],
				[
					217,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"AwAAACQDAAAAAAAAJQMAAAAAAAAAAAAAJQMAAAAAAAAmAwAAAAAAAAAAAAAmAwAAAAAAACcDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACQDAAAAAAAAJAMAAAAAAAAAAAAAAIBmQA"
				],
				[
					219,
					1,
					"insert",
					{
						"characters": "};"
					},
					"AgAAACYDAAAAAAAAJwMAAAAAAAAAAAAAJwMAAAAAAAAoAwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACYDAAAAAAAAJgMAAAAAAAAAAAAAAAAAAA"
				],
				[
					222,
					1,
					"insert",
					{
						"characters": "  public"
					},
					"CAAAACQDAAAAAAAAJQMAAAAAAAAAAAAAJQMAAAAAAAAmAwAAAAAAAAAAAAAmAwAAAAAAACcDAAAAAAAAAAAAACcDAAAAAAAAKAMAAAAAAAAAAAAAKAMAAAAAAAApAwAAAAAAAAAAAAApAwAAAAAAACoDAAAAAAAAAAAAACoDAAAAAAAAKwMAAAAAAAAAAAAAKwMAAAAAAAAsAwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACQDAAAAAAAAJAMAAAAAAAAAAAAAAAAiQA"
				],
				[
					223,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAACwDAAAAAAAALQMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACwDAAAAAAAALAMAAAAAAAAAAAAAAADwvw"
				],
				[
					224,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAC0DAAAAAAAALgMAAAAAAAAAAAAALgMAAAAAAAAwAwAAAAAAAAAAAAAwAwAAAAAAADIDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC0DAAAAAAAALQMAAAAAAAAAAAAAAADwvw"
				],
				[
					225,
					1,
					"paste",
					null,
					"AQAAADIDAAAAAAAAXAMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADIDAAAAAAAAMgMAAAAAAAAAAAAAAADwvw"
				],
				[
					233,
					1,
					"paste",
					null,
					"AgAAAFQDAAAAAAAAZAMAAAAAAAAAAAAAZAMAAAAAAABkAwAAAAAAAAYAAABCdWZmZXI",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFQDAAAAAAAAWgMAAAAAAAAAAAAAAADwvw"
				],
				[
					238,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAGoDAAAAAAAAawMAAAAAAAAAAAAAawMAAAAAAABsAwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGoDAAAAAAAAagMAAAAAAAAAAAAAAADwvw"
				],
				[
					239,
					1,
					"paste",
					null,
					"AQAAAGwDAAAAAAAAKgQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGwDAAAAAAAAbAMAAAAAAAAAAAAAAADwvw"
				],
				[
					242,
					1,
					"insert",
					{
						"characters": "ytracer"
					},
					"CAAAAHQDAAAAAAAAdQMAAAAAAAAAAAAAdQMAAAAAAAB1AwAAAAAAAAgAAABzdGVyaXplcnUDAAAAAAAAdgMAAAAAAAAAAAAAdgMAAAAAAAB3AwAAAAAAAAAAAAB3AwAAAAAAAHgDAAAAAAAAAAAAAHgDAAAAAAAAeQMAAAAAAAAAAAAAeQMAAAAAAAB6AwAAAAAAAAAAAAB6AwAAAAAAAHsDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHQDAAAAAAAAfAMAAAAAAAAAAAAAAADwvw"
				],
				[
					250,
					1,
					"paste",
					null,
					"AgAAAM8DAAAAAAAA3gMAAAAAAAAAAAAA3gMAAAAAAADeAwAAAAAAABAAAABSYXN0ZXJpemVyRW5naW5l",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM8DAAAAAAAA3wMAAAAAAAAAAAAAAADwvw"
				],
				[
					254,
					1,
					"paste",
					null,
					"AgAAABIEAAAAAAAAIQQAAAAAAAAAAAAAIQQAAAAAAAAhBAAAAAAAABAAAABSYXN0ZXJpemVyRW5naW5l",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABIEAAAAAAAAIgQAAAAAAAAAAAAAAADwvw"
				],
				[
					259,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAACcEAAAAAAAAKAQAAAAAAAAAAAAAKAQAAAAAAAApBAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACcEAAAAAAAAJwQAAAAAAAAAAAAAAADwvw"
				],
				[
					260,
					1,
					"paste",
					null,
					"AQAAACkEAAAAAAAA5AQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACkEAAAAAAAAKQQAAAAAAAAAAAAAAADwvw"
				],
				[
					263,
					1,
					"insert",
					{
						"characters": "HYbrid"
					},
					"BwAAAC8EAAAAAAAAMAQAAAAAAAAAAAAAMAQAAAAAAAAwBAAAAAAAAAkAAABSYXl0cmFjZXIwBAAAAAAAADEEAAAAAAAAAAAAADEEAAAAAAAAMgQAAAAAAAAAAAAAMgQAAAAAAAAzBAAAAAAAAAAAAAAzBAAAAAAAADQEAAAAAAAAAAAAADQEAAAAAAAANQQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC8EAAAAAAAAOAQAAAAAAAAAAAAAAADwvw"
				],
				[
					265,
					1,
					"right_delete",
					null,
					"AQAAADAEAAAAAAAAMAQAAAAAAAABAAAAWQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADAEAAAAAAAAMAQAAAAAAAAAAAAAAADwvw"
				],
				[
					266,
					1,
					"insert",
					{
						"characters": "y"
					},
					"AQAAADAEAAAAAAAAMQQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADAEAAAAAAAAMAQAAAAAAAAAAAAAAADwvw"
				],
				[
					274,
					1,
					"paste",
					null,
					"AgAAAIkEAAAAAAAAlQQAAAAAAAAAAAAAlQQAAAAAAACVBAAAAAAAAA8AAABSYXl0cmFjZXJFbmdpbmU",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJgEAAAAAAAAiQQAAAAAAAAAAAAAAADwvw"
				],
				[
					278,
					1,
					"paste",
					null,
					"AgAAAMkEAAAAAAAA1QQAAAAAAAAAAAAA1QQAAAAAAADVBAAAAAAAAA8AAABSYXl0cmFjZXJFbmdpbmU",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMkEAAAAAAAA2AQAAAAAAAAAAAAAAADwvw"
				],
				[
					283,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAANsEAAAAAAAA3AQAAAAAAAAAAAAA3AQAAAAAAADdBAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANsEAAAAAAAA2wQAAAAAAAAAAAAAAADwvw"
				],
				[
					284,
					1,
					"paste",
					null,
					"AQAAAN0EAAAAAAAAjwUAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN0EAAAAAAAA3QQAAAAAAAAAAAAAAADwvw"
				],
				[
					287,
					1,
					"insert",
					{
						"characters": "NPR"
					},
					"BAAAAOMEAAAAAAAA5AQAAAAAAAAAAAAA5AQAAAAAAADkBAAAAAAAAAYAAABIeWJyaWTkBAAAAAAAAOUEAAAAAAAAAAAAAOUEAAAAAAAA5gQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOMEAAAAAAAA6QQAAAAAAAAAAAAAAADwvw"
				],
				[
					288,
					3,
					"left_delete",
					null,
					"AwAAAOUEAAAAAAAA5QQAAAAAAAABAAAAUuQEAAAAAAAA5AQAAAAAAAABAAAAUOMEAAAAAAAA4wQAAAAAAAABAAAATg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOYEAAAAAAAA5gQAAAAAAAAAAAAAAADwvw"
				],
				[
					289,
					1,
					"insert",
					{
						"characters": "Toon"
					},
					"BAAAAOMEAAAAAAAA5AQAAAAAAAAAAAAA5AQAAAAAAADlBAAAAAAAAAAAAADlBAAAAAAAAOYEAAAAAAAAAAAAAOYEAAAAAAAA5wQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOMEAAAAAAAA4wQAAAAAAAAAAAAAAADwvw"
				],
				[
					297,
					1,
					"paste",
					null,
					"AgAAADsFAAAAAAAARQUAAAAAAAAAAAAARQUAAAAAAABFBQAAAAAAAAwAAABIeWJyaWRFbmdpbmU",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADsFAAAAAAAARwUAAAAAAAAAAAAAAADwvw"
				],
				[
					301,
					1,
					"paste",
					null,
					"AgAAAHkFAAAAAAAAgwUAAAAAAAAAAAAAgwUAAAAAAACDBQAAAAAAAAwAAABIeWJyaWRFbmdpbmU",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIUFAAAAAAAAeQUAAAAAAAAAAAAAAADwvw"
				],
				[
					306,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKYCAAAAAAAApwIAAAAAAAAAAAAApwIAAAAAAACrAgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKYCAAAAAAAApgIAAAAAAAAAAAAAAADwvw"
				],
				[
					308,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADICAAAAAAAAMwIAAAAAAAAAAAAAqAIAAAAAAACoAgAAAAAAAAQAAAAgICAg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADICAAAAAAAAMgIAAAAAAAAAAAAAAABCQA"
				],
				[
					309,
					1,
					"reindent",
					null,
					"AQAAADMCAAAAAAAANwIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADMCAAAAAAAAMwIAAAAAAAAAAAAAAADwvw"
				],
				[
					310,
					1,
					"paste",
					null,
					"AQAAADcCAAAAAAAApgIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADcCAAAAAAAANwIAAAAAAAAAAAAAAADwvw"
				],
				[
					313,
					1,
					"insert",
					{
						"characters": "Renderi"
					},
					"CAAAAGQCAAAAAAAAZQIAAAAAAAAAAAAAZQIAAAAAAABlAgAAAAAAAA8AAABUZXh0dXJlc1Jlc29sdmVlAgAAAAAAAGYCAAAAAAAAAAAAAGYCAAAAAAAAZwIAAAAAAAAAAAAAZwIAAAAAAABoAgAAAAAAAAAAAABoAgAAAAAAAGkCAAAAAAAAAAAAAGkCAAAAAAAAagIAAAAAAAAAAAAAagIAAAAAAABrAgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGQCAAAAAAAAcwIAAAAAAAAAAAAAAADwvw"
				],
				[
					314,
					1,
					"insert",
					{
						"characters": "ng"
					},
					"AgAAAGsCAAAAAAAAbAIAAAAAAAAAAAAAbAIAAAAAAABtAgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGsCAAAAAAAAawIAAAAAAAAAAAAAAADwvw"
				],
				[
					317,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABUDAAAAAAAAFgMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABUDAAAAAAAAFQMAAAAAAAAAAAAAAADwvw"
				],
				[
					318,
					1,
					"reindent",
					null,
					"AQAAABYDAAAAAAAAGgMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABYDAAAAAAAAFgMAAAAAAAAAAAAAAADwvw"
				],
				[
					319,
					1,
					"left_delete",
					null,
					"AQAAABgDAAAAAAAAGAMAAAAAAAACAAAAICA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABoDAAAAAAAAGgMAAAAAAAAAAAAAAADwvw"
				],
				[
					320,
					1,
					"insert",
					{
						"characters": "pro"
					},
					"AwAAABgDAAAAAAAAGQMAAAAAAAAAAAAAGQMAAAAAAAAaAwAAAAAAAAAAAAAaAwAAAAAAABsDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABgDAAAAAAAAGAMAAAAAAAAAAAAAAADwvw"
				],
				[
					322,
					1,
					"insert_completion",
					{
						"completion": "protected",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "protected"
					},
					"AgAAABgDAAAAAAAAGAMAAAAAAAADAAAAcHJvGAMAAAAAAAAhAwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABsDAAAAAAAAGwMAAAAAAAAAAAAAAADwvw"
				],
				[
					323,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAACEDAAAAAAAAIgMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACEDAAAAAAAAIQMAAAAAAAAAAAAAAADwvw"
				],
				[
					324,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAACIDAAAAAAAAIwMAAAAAAAAAAAAAIwMAAAAAAAAlAwAAAAAAAAAAAAAlAwAAAAAAACcDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACIDAAAAAAAAIgMAAAAAAAAAAAAAAADwvw"
				],
				[
					325,
					1,
					"insert",
					{
						"characters": "mpDe"
					},
					"BAAAACcDAAAAAAAAKAMAAAAAAAAAAAAAKAMAAAAAAAApAwAAAAAAAAAAAAApAwAAAAAAACoDAAAAAAAAAAAAACoDAAAAAAAAKwMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACcDAAAAAAAAJwMAAAAAAAAAAAAAAADwvw"
				],
				[
					326,
					4,
					"left_delete",
					null,
					"BAAAACoDAAAAAAAAKgMAAAAAAAABAAAAZSkDAAAAAAAAKQMAAAAAAAABAAAARCgDAAAAAAAAKAMAAAAAAAABAAAAcCcDAAAAAAAAJwMAAAAAAAABAAAAbQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACsDAAAAAAAAKwMAAAAAAAAAAAAAAADwvw"
				],
				[
					327,
					1,
					"insert",
					{
						"characters": "Fa"
					},
					"AgAAACcDAAAAAAAAKAMAAAAAAAAAAAAAKAMAAAAAAAApAwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACcDAAAAAAAAJwMAAAAAAAAAAAAAAADwvw"
				],
				[
					328,
					1,
					"insert_completion",
					{
						"completion": "Falcor",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Falcor"
					},
					"AgAAACcDAAAAAAAAJwMAAAAAAAACAAAARmEnAwAAAAAAAC0DAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACkDAAAAAAAAKQMAAAAAAAAAAAAAAADwvw"
				],
				[
					329,
					1,
					"insert",
					{
						"characters": "::De"
					},
					"BAAAAC0DAAAAAAAALgMAAAAAAAAAAAAALgMAAAAAAAAvAwAAAAAAAAAAAAAvAwAAAAAAADADAAAAAAAAAAAAADADAAAAAAAAMQMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC0DAAAAAAAALQMAAAAAAAAAAAAAAADwvw"
				],
				[
					330,
					1,
					"insert_completion",
					{
						"completion": "Device",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Device"
					},
					"AgAAAC8DAAAAAAAALwMAAAAAAAACAAAARGUvAwAAAAAAADUDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADEDAAAAAAAAMQMAAAAAAAAAAAAAAADwvw"
				],
				[
					331,
					1,
					"insert",
					{
						"characters": "::Sh"
					},
					"BAAAADUDAAAAAAAANgMAAAAAAAAAAAAANgMAAAAAAAA3AwAAAAAAAAAAAAA3AwAAAAAAADgDAAAAAAAAAAAAADgDAAAAAAAAOQMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADUDAAAAAAAANQMAAAAAAAAAAAAAAADwvw"
				],
				[
					332,
					1,
					"insert_completion",
					{
						"completion": "SharedPtr",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "SharedPtr"
					},
					"AgAAADcDAAAAAAAANwMAAAAAAAACAAAAU2g3AwAAAAAAAEADAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADkDAAAAAAAAOQMAAAAAAAAAAAAAAADwvw"
				],
				[
					333,
					1,
					"insert",
					{
						"characters": " mp"
					},
					"AwAAAEADAAAAAAAAQQMAAAAAAAAAAAAAQQMAAAAAAABCAwAAAAAAAAAAAABCAwAAAAAAAEMDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEADAAAAAAAAQAMAAAAAAAAAAAAAAADwvw"
				],
				[
					334,
					1,
					"insert_completion",
					{
						"completion": "mpDevice",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mpDevice"
					},
					"AgAAAEEDAAAAAAAAQQMAAAAAAAACAAAAbXBBAwAAAAAAAEkDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEMDAAAAAAAAQwMAAAAAAAAAAAAAAADwvw"
				],
				[
					335,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAEkDAAAAAAAASgMAAAAAAAAAAAAASgMAAAAAAABLAwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEkDAAAAAAAASQMAAAAAAAAAAAAAAADwvw"
				],
				[
					336,
					1,
					"insert",
					{
						"characters": " nu"
					},
					"AwAAAEsDAAAAAAAATAMAAAAAAAAAAAAATAMAAAAAAABNAwAAAAAAAAAAAABNAwAAAAAAAE4DAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEsDAAAAAAAASwMAAAAAAAAAAAAAAADwvw"
				],
				[
					337,
					1,
					"insert_completion",
					{
						"completion": "nullptr",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "nullptr"
					},
					"AgAAAEwDAAAAAAAATAMAAAAAAAACAAAAbnVMAwAAAAAAAFMDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE4DAAAAAAAATgMAAAAAAAAAAAAAAADwvw"
				],
				[
					338,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFMDAAAAAAAAVAMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFMDAAAAAAAAUwMAAAAAAAAAAAAAAADwvw"
				],
				[
					346,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAABQEAAAAAAAAFQQAAAAAAAAAAAAAFQQAAAAAAAAZBAAAAAAAAAAAAAAZBAAAAAAAABoEAAAAAAAAAAAAABoEAAAAAAAAHgQAAAAAAAAAAAAAFQQAAAAAAAAVBAAAAAAAAAQAAAAgICAg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABQEAAAAAAAAFAQAAAAAAAAAAAAAAADwvw"
				],
				[
					347,
					1,
					"left_delete",
					null,
					"AQAAABgEAAAAAAAAGAQAAAAAAAACAAAAICA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABoEAAAAAAAAGgQAAAAAAAAAAAAAAADwvw"
				],
				[
					348,
					1,
					"paste",
					null,
					"AQAAABgEAAAAAAAAhAQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABgEAAAAAAAAGAQAAAAAAAAAAAAAAADwvw"
				],
				[
					351,
					1,
					"right_delete",
					null,
					"AQAAAEkEAAAAAAAASQQAAAAAAAAGAAAARW5naW5l",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEkEAAAAAAAATwQAAAAAAAAAAAAAAADwvw"
				],
				[
					353,
					17,
					"right_delete",
					null,
					"EQAAAEoEAAAAAAAASgQAAAAAAAABAAAARUoEAAAAAAAASgQAAAAAAAABAAAAbkoEAAAAAAAASgQAAAAAAAABAAAAZ0oEAAAAAAAASgQAAAAAAAABAAAAaUoEAAAAAAAASgQAAAAAAAABAAAAbkoEAAAAAAAASgQAAAAAAAABAAAAZUoEAAAAAAAASgQAAAAAAAABAAAAVEoEAAAAAAAASgQAAAAAAAABAAAAeUoEAAAAAAAASgQAAAAAAAABAAAAcEoEAAAAAAAASgQAAAAAAAABAAAAZUoEAAAAAAAASgQAAAAAAAABAAAAIEoEAAAAAAAASgQAAAAAAAABAAAAdEoEAAAAAAAASgQAAAAAAAABAAAAeUoEAAAAAAAASgQAAAAAAAABAAAAcEoEAAAAAAAASgQAAAAAAAABAAAAZUoEAAAAAAAASgQAAAAAAAABAAAALEoEAAAAAAAASgQAAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEoEAAAAAAAASgQAAAAAAAAAAAAAAADwvw"
				],
				[
					359,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAACsFAAAAAAAALAUAAAAAAAAAAAAALAUAAAAAAAAtBQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACsFAAAAAAAAKwUAAAAAAAAAAAAAAADwvw"
				],
				[
					361,
					1,
					"paste",
					null,
					"AQAAACwFAAAAAAAAgwUAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACwFAAAAAAAALAUAAAAAAAAAAAAAAAAAAA"
				],
				[
					363,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAADgGAAAAAAAAOQYAAAAAAAAAAAAAOQYAAAAAAAA6BgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADgGAAAAAAAAOAYAAAAAAAAAAAAAAKiFQA"
				],
				[
					365,
					1,
					"paste",
					null,
					"AQAAADkGAAAAAAAAkAYAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADkGAAAAAAAAOQYAAAAAAAAAAAAAAAAAAA"
				],
				[
					367,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAD8HAAAAAAAAQAcAAAAAAAAAAAAAQAcAAAAAAABBBwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD8HAAAAAAAAPwcAAAAAAAAAAAAAAKiFQA"
				],
				[
					369,
					1,
					"paste",
					null,
					"AQAAAEAHAAAAAAAAlwcAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEAHAAAAAAAAQAcAAAAAAAAAAAAAAAAAAA"
				],
				[
					376,
					1,
					"paste",
					null,
					"AgAAAJECAAAAAAAAnwIAAAAAAAAAAAAAnwIAAAAAAACfAgAAAAAAAAUAAABTY2VuZQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJECAAAAAAAAlgIAAAAAAAAAAAAAAADwvw"
				],
				[
					379,
					1,
					"left_delete",
					null,
					"AQAAAHMCAAAAAAAAcwIAAAAAAAAWAAAAc3RkOjpzaGFyZWRfcHRyPGNvbnN0IA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIkCAAAAAAAAcwIAAAAAAAAAAAAAAADwvw"
				],
				[
					384,
					1,
					"left_delete",
					null,
					"AQAAAIkCAAAAAAAAiQIAAAAAAAABAAAAPg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIoCAAAAAAAAigIAAAAAAAAAAAAAAADwvw"
				],
				[
					387,
					1,
					"paste",
					null,
					"AgAAANoCAAAAAAAA6AIAAAAAAAAAAAAA6AIAAAAAAADoAgAAAAAAACMAAAB0ZDo6c2hhcmVkX3B0cjxjb25zdCBGYWxjb3I6OlNjZW5lPg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANoCAAAAAAAA/QIAAAAAAAAAAAAAAADwvw"
				],
				[
					390,
					1,
					"insert",
					{
						"characters": "Falcor::"
					},
					"CAAAANkCAAAAAAAA2gIAAAAAAAAAAAAA2gIAAAAAAADbAgAAAAAAAAAAAADbAgAAAAAAANwCAAAAAAAAAAAAANwCAAAAAAAA3QIAAAAAAAAAAAAA3QIAAAAAAADeAgAAAAAAAAAAAADeAgAAAAAAAN8CAAAAAAAAAAAAAN8CAAAAAAAA4AIAAAAAAAAAAAAA4AIAAAAAAADhAgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANkCAAAAAAAA2QIAAAAAAAAAAAAAAADwvw"
				],
				[
					391,
					1,
					"right_delete",
					null,
					"AQAAAOECAAAAAAAA4QIAAAAAAAABAAAAcw",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOECAAAAAAAA4QIAAAAAAAAAAAAAAADwvw"
				],
				[
					398,
					1,
					"insert",
					{
						"characters": "Scene::"
					},
					"BwAAAHsCAAAAAAAAfAIAAAAAAAAAAAAAfAIAAAAAAAB9AgAAAAAAAAAAAAB9AgAAAAAAAH4CAAAAAAAAAAAAAH4CAAAAAAAAfwIAAAAAAAAAAAAAfwIAAAAAAACAAgAAAAAAAAAAAACAAgAAAAAAAIECAAAAAAAAAAAAAIECAAAAAAAAggIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHsCAAAAAAAAewIAAAAAAAAAAAAAAADwvw"
				],
				[
					401,
					1,
					"insert",
					{
						"characters": "Scene:::"
					},
					"CAAAAOgCAAAAAAAA6QIAAAAAAAAAAAAA6QIAAAAAAADqAgAAAAAAAAAAAADqAgAAAAAAAOsCAAAAAAAAAAAAAOsCAAAAAAAA7AIAAAAAAAAAAAAA7AIAAAAAAADtAgAAAAAAAAAAAADtAgAAAAAAAO4CAAAAAAAAAAAAAO4CAAAAAAAA7wIAAAAAAAAAAAAA7wIAAAAAAADwAgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOgCAAAAAAAA6AIAAAAAAAAAAAAAAADwvw"
				],
				[
					402,
					1,
					"left_delete",
					null,
					"AQAAAO8CAAAAAAAA7wIAAAAAAAABAAAAOg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPACAAAAAAAA8AIAAAAAAAAAAAAAAADwvw"
				],
				[
					405,
					1,
					"right_delete",
					null,
					"AQAAAIgCAAAAAAAAiAIAAAAAAAAFAAAAQ29uc3Q",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIgCAAAAAAAAjQIAAAAAAAAAAAAAAADwvw"
				],
				[
					408,
					6,
					"right_delete",
					null,
					"BgAAAPACAAAAAAAA8AIAAAAAAAABAAAAQ/ACAAAAAAAA8AIAAAAAAAABAAAAb/ACAAAAAAAA8AIAAAAAAAABAAAAbvACAAAAAAAA8AIAAAAAAAABAAAAc/ACAAAAAAAA8AIAAAAAAAABAAAAdPACAAAAAAAA8AIAAAAAAAABAAAAUA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPACAAAAAAAA8AIAAAAAAAAAAAAAAADwvw"
				],
				[
					409,
					1,
					"insert",
					{
						"characters": "P"
					},
					"AQAAAPACAAAAAAAA8QIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPACAAAAAAAA8AIAAAAAAAAAAAAAAADwvw"
				],
				[
					412,
					1,
					"paste",
					null,
					"AgAAAHMCAAAAAAAAkQIAAAAAAAAAAAAAkQIAAAAAAACRAgAAAAAAAB8AAABGYWxjb3I6OlNjZW5lOjpTaGFyZWRQdHIgcFNjZW5l",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHMCAAAAAAAAkgIAAAAAAAAAAAAAAADwvw"
				],
				[
					415,
					1,
					"insert",
					{
						"characters": "Falcor::"
					},
					"CAAAAHkCAAAAAAAAegIAAAAAAAAAAAAAegIAAAAAAAB7AgAAAAAAAAAAAAB7AgAAAAAAAHwCAAAAAAAAAAAAAHwCAAAAAAAAfQIAAAAAAAAAAAAAfQIAAAAAAAB+AgAAAAAAAAAAAAB+AgAAAAAAAH8CAAAAAAAAAAAAAH8CAAAAAAAAgAIAAAAAAAAAAAAAgAIAAAAAAACBAgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHkCAAAAAAAAeQIAAAAAAAAAAAAAAADwvw"
				],
				[
					421,
					1,
					"paste",
					null,
					"AgAAAOICAAAAAAAACAMAAAAAAAAAAAAACAMAAAAAAAAIAwAAAAAAAB8AAABGYWxjb3I6OlNjZW5lOjpTaGFyZWRQdHIgcFNjZW5l",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAEDAAAAAAAA4gIAAAAAAAAAAAAAAADwvw"
				],
				[
					424,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAC4CAAAAAAAALwIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC4CAAAAAAAALgIAAAAAAAAAAAAAAADwvw"
				],
				[
					425,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAC8CAAAAAAAAMAIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC8CAAAAAAAALwIAAAAAAAAAAAAAAADwvw"
				],
				[
					426,
					1,
					"paste",
					null,
					"AQAAADACAAAAAAAAVwIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADACAAAAAAAAMAIAAAAAAAAAAAAAAADwvw"
				],
				[
					430,
					4,
					"right_delete",
					null,
					"BAAAADcCAAAAAAAANwIAAAAAAAAKAAAAY29uZmdTdG9yZTcCAAAAAAAANwIAAAAAAAABAAAAIDcCAAAAAAAANwIAAAAAAAABAAAAPTcCAAAAAAAANwIAAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADcCAAAAAAAAQQIAAAAAAAAAAAAAAADwvw"
				],
				[
					434,
					1,
					"insert",
					{
						"characters": " con"
					},
					"BAAAAEoCAAAAAAAASwIAAAAAAAAAAAAASwIAAAAAAABMAgAAAAAAAAAAAABMAgAAAAAAAE0CAAAAAAAAAAAAAE0CAAAAAAAATgIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEoCAAAAAAAASgIAAAAAAAAAAAAAAADwvw"
				],
				[
					435,
					1,
					"insert",
					{
						"characters": "figStor"
					},
					"BwAAAE4CAAAAAAAATwIAAAAAAAAAAAAATwIAAAAAAABQAgAAAAAAAAAAAABQAgAAAAAAAFECAAAAAAAAAAAAAFECAAAAAAAAUgIAAAAAAAAAAAAAUgIAAAAAAABTAgAAAAAAAAAAAABTAgAAAAAAAFQCAAAAAAAAAAAAAFQCAAAAAAAAVQIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE4CAAAAAAAATgIAAAAAAAAAAAAAAADwvw"
				],
				[
					436,
					1,
					"insert",
					{
						"characters": "re"
					},
					"AgAAAFUCAAAAAAAAVgIAAAAAAAAAAAAAVgIAAAAAAABXAgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFUCAAAAAAAAVQIAAAAAAAAAAAAAAADwvw"
				],
				[
					437,
					2,
					"left_delete",
					null,
					"AgAAAFYCAAAAAAAAVgIAAAAAAAABAAAAZVUCAAAAAAAAVQIAAAAAAAABAAAAcg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFcCAAAAAAAAVwIAAAAAAAAAAAAAAADwvw"
				],
				[
					438,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAFUCAAAAAAAAVgIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFUCAAAAAAAAVQIAAAAAAAAAAAAAAADwvw"
				],
				[
					450,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAM0AAAAAAAAAzgAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM0AAAAAAAAAzQAAAAAAAAAAAAAAAADwvw"
				],
				[
					451,
					1,
					"paste",
					null,
					"AQAAAM4AAAAAAAAA+QAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM4AAAAAAAAAzgAAAAAAAAAAAAAAAADwvw"
				],
				[
					453,
					11,
					"left_delete",
					null,
					"CwAAAOkAAAAAAAAA6QAAAAAAAAABAAAAaOgAAAAAAAAA6AAAAAAAAAABAAAAcOcAAAAAAAAA5wAAAAAAAAABAAAAYeYAAAAAAAAA5gAAAAAAAAABAAAAcuUAAAAAAAAA5QAAAAAAAAABAAAAR+QAAAAAAAAA5AAAAAAAAAABAAAAcuMAAAAAAAAA4wAAAAAAAAABAAAAZeIAAAAAAAAA4gAAAAAAAAABAAAAZOEAAAAAAAAA4QAAAAAAAAABAAAAbuAAAAAAAAAA4AAAAAAAAAABAAAAZd8AAAAAAAAA3wAAAAAAAAABAAAAUg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOoAAAAAAAAA6gAAAAAAAAAAAAAAAADwvw"
				],
				[
					454,
					1,
					"insert",
					{
						"characters": "Utils"
					},
					"BQAAAN8AAAAAAAAA4AAAAAAAAAAAAAAA4AAAAAAAAADhAAAAAAAAAAAAAADhAAAAAAAAAOIAAAAAAAAAAAAAAOIAAAAAAAAA4wAAAAAAAAAAAAAA4wAAAAAAAADkAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8AAAAAAAAA3wAAAAAAAAAAAAAAAADwvw"
				],
				[
					456,
					11,
					"right_delete",
					null,
					"CwAAAOUAAAAAAAAA5QAAAAAAAAABAAAAUuUAAAAAAAAA5QAAAAAAAAABAAAAZeUAAAAAAAAA5QAAAAAAAAABAAAAbuUAAAAAAAAA5QAAAAAAAAABAAAAZOUAAAAAAAAA5QAAAAAAAAABAAAAZeUAAAAAAAAA5QAAAAAAAAABAAAAcuUAAAAAAAAA5QAAAAAAAAABAAAAR+UAAAAAAAAA5QAAAAAAAAABAAAAcuUAAAAAAAAA5QAAAAAAAAABAAAAYeUAAAAAAAAA5QAAAAAAAAABAAAAcOUAAAAAAAAA5QAAAAAAAAABAAAAaA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOUAAAAAAAAA5QAAAAAAAAAAAAAAAADwvw"
				],
				[
					457,
					1,
					"insert",
					{
						"characters": "Config"
					},
					"BgAAAOUAAAAAAAAA5gAAAAAAAAAAAAAA5gAAAAAAAADnAAAAAAAAAAAAAADnAAAAAAAAAOgAAAAAAAAAAAAAAOgAAAAAAAAA6QAAAAAAAAAAAAAA6QAAAAAAAADqAAAAAAAAAAAAAADqAAAAAAAAAOsAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOUAAAAAAAAA5QAAAAAAAAAAAAAAAADwvw"
				],
				[
					458,
					1,
					"insert_completion",
					{
						"completion": "ConfigStore",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "ConfigStore"
					},
					"AgAAAOUAAAAAAAAA5QAAAAAAAAAGAAAAQ29uZmln5QAAAAAAAADwAAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOsAAAAAAAAA6wAAAAAAAAAAAAAAAADwvw"
				],
				[
					463,
					1,
					"right_delete",
					null,
					"AQAAAFsCAAAAAAAAWwIAAAAAAAABAAAAJg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFsCAAAAAAAAWwIAAAAAAAAAAAAAAADwvw"
				],
				[
					465,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAG8CAAAAAAAAcAIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG8CAAAAAAAAbwIAAAAAAAAAAAAAAADwvw"
				],
				[
					467,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAG8CAAAAAAAAcAIAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG8CAAAAAAAAbwIAAAAAAAAAAAAAAADwvw"
				],
				[
					469,
					1,
					"right_delete",
					null,
					"AQAAAHECAAAAAAAAcQIAAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHECAAAAAAAAcQIAAAAAAAAAAAAAAADwvw"
				],
				[
					475,
					1,
					"paste",
					null,
					"AQAAAK8EAAAAAAAA1wQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK8EAAAAAAAArwQAAAAAAAAAAAAAAADwvw"
				],
				[
					478,
					1,
					"paste",
					null,
					"AQAAAO0FAAAAAAAAFQYAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO0FAAAAAAAA7QUAAAAAAAAAAAAAAADwvw"
				],
				[
					481,
					1,
					"paste",
					null,
					"AQAAACIHAAAAAAAASgcAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACIHAAAAAAAAIgcAAAAAAAAAAAAAAADwvw"
				],
				[
					484,
					1,
					"paste",
					null,
					"AQAAAFEIAAAAAAAAeQgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFEIAAAAAAAAUQgAAAAAAAAAAAAAAADwvw"
				],
				[
					488,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAFkDAAAAAAAAWgMAAAAAAAAAAAAAWgMAAAAAAABbAwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFkDAAAAAAAAWQMAAAAAAAAAAAAAAABbQA"
				],
				[
					490,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAFoDAAAAAAAAWwMAAAAAAAAAAAAAWwMAAAAAAABcAwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFoDAAAAAAAAWgMAAAAAAAAAAAAAAAAAAA"
				],
				[
					491,
					1,
					"insert",
					{
						"characters": "private:"
					},
					"CAAAAFwDAAAAAAAAXQMAAAAAAAAAAAAAXQMAAAAAAABeAwAAAAAAAAAAAABeAwAAAAAAAF8DAAAAAAAAAAAAAF8DAAAAAAAAYAMAAAAAAAAAAAAAYAMAAAAAAABhAwAAAAAAAAAAAABhAwAAAAAAAGIDAAAAAAAAAAAAAGIDAAAAAAAAYwMAAAAAAAAAAAAAYwMAAAAAAABkAwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFwDAAAAAAAAXAMAAAAAAAAAAAAAAADwvw"
				],
				[
					492,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAGQDAAAAAAAAZQMAAAAAAAAAAAAAZQMAAAAAAABnAwAAAAAAAAAAAABnAwAAAAAAAGkDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGQDAAAAAAAAZAMAAAAAAAAAAAAAAADwvw"
				],
				[
					493,
					1,
					"insert",
					{
						"characters": "Re"
					},
					"AgAAAGkDAAAAAAAAagMAAAAAAAAAAAAAagMAAAAAAABrAwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGkDAAAAAAAAaQMAAAAAAAAAAAAAAADwvw"
				],
				[
					494,
					1,
					"insert_completion",
					{
						"completion": "RenderEngine",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "RenderEngine"
					},
					"AgAAAGkDAAAAAAAAaQMAAAAAAAACAAAAUmVpAwAAAAAAAHUDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGsDAAAAAAAAawMAAAAAAAAAAAAAAADwvw"
				],
				[
					495,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHUDAAAAAAAAdwMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHUDAAAAAAAAdQMAAAAAAAAAAAAAAADwvw"
				],
				[
					501,
					1,
					"paste",
					null,
					"AQAAAHYDAAAAAAAAvwMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHYDAAAAAAAAdgMAAAAAAAAAAAAAAADwvw"
				],
				[
					504,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAMADAAAAAAAAwQMAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMADAAAAAAAAwAMAAAAAAAAAAAAAAADwvw"
				],
				[
					510,
					1,
					"insert",
					{
						"characters": "\nFa"
					},
					"BAAAAAEEAAAAAAAAAgQAAAAAAAAAAAAAAgQAAAAAAAAGBAAAAAAAAAAAAAAGBAAAAAAAAAcEAAAAAAAAAAAAAAcEAAAAAAAACAQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAEEAAAAAAAAAQQAAAAAAAAAAAAAAADwvw"
				],
				[
					511,
					1,
					"insert_completion",
					{
						"completion": "Falcor",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Falcor"
					},
					"AgAAAAYEAAAAAAAABgQAAAAAAAACAAAARmEGBAAAAAAAAAwEAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAgEAAAAAAAACAQAAAAAAAAAAAAAAADwvw"
				],
				[
					512,
					1,
					"insert",
					{
						"characters": "::Co"
					},
					"BAAAAAwEAAAAAAAADQQAAAAAAAAAAAAADQQAAAAAAAAOBAAAAAAAAAAAAAAOBAAAAAAAAA8EAAAAAAAAAAAAAA8EAAAAAAAAEAQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAwEAAAAAAAADAQAAAAAAAAAAAAAAADwvw"
				],
				[
					513,
					1,
					"insert_completion",
					{
						"completion": "ConfigStore",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "ConfigStore"
					},
					"AgAAAA4EAAAAAAAADgQAAAAAAAACAAAAQ28OBAAAAAAAABkEAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABAEAAAAAAAAEAQAAAAAAAAAAAAAAADwvw"
				],
				[
					514,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABkEAAAAAAAAGgQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABkEAAAAAAAAGQQAAAAAAAAAAAAAAADwvw"
				],
				[
					515,
					1,
					"insert",
					{
						"characters": "&c"
					},
					"AgAAABoEAAAAAAAAGwQAAAAAAAAAAAAAGwQAAAAAAAAcBAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABoEAAAAAAAAGgQAAAAAAAAAAAAAAADwvw"
				],
				[
					516,
					1,
					"insert_completion",
					{
						"completion": "configStore",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "configStore"
					},
					"AgAAABsEAAAAAAAAGwQAAAAAAAABAAAAYxsEAAAAAAAAJgQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABwEAAAAAAAAHAQAAAAAAAAAAAAAAADwvw"
				],
				[
					518,
					1,
					"insert",
					{
						"characters": "mC"
					},
					"AgAAABsEAAAAAAAAHAQAAAAAAAAAAAAAHAQAAAAAAAAdBAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABsEAAAAAAAAGwQAAAAAAAAAAAAAAADwvw"
				],
				[
					519,
					1,
					"right_delete",
					null,
					"AQAAAB0EAAAAAAAAHQQAAAAAAAABAAAAYw",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB0EAAAAAAAAHQQAAAAAAAAAAAAAAADwvw"
				],
				[
					521,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAACcEAAAAAAAAKAQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACcEAAAAAAAAJwQAAAAAAAAAAAAAAADwvw"
				],
				[
					524,
					1,
					"insert",
					{
						"characters": "std::s"
					},
					"BgAAAAYEAAAAAAAABwQAAAAAAAAAAAAABwQAAAAAAAAIBAAAAAAAAAAAAAAIBAAAAAAAAAkEAAAAAAAAAAAAAAkEAAAAAAAACgQAAAAAAAAAAAAACgQAAAAAAAALBAAAAAAAAAAAAAALBAAAAAAAAAwEAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAYEAAAAAAAABgQAAAAAAAAAAAAAAADwvw"
				],
				[
					525,
					1,
					"insert",
					{
						"characters": "hared_p"
					},
					"BwAAAAwEAAAAAAAADQQAAAAAAAAAAAAADQQAAAAAAAAOBAAAAAAAAAAAAAAOBAAAAAAAAA8EAAAAAAAAAAAAAA8EAAAAAAAAEAQAAAAAAAAAAAAAEAQAAAAAAAARBAAAAAAAAAAAAAARBAAAAAAAABIEAAAAAAAAAAAAABIEAAAAAAAAEwQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAwEAAAAAAAADAQAAAAAAAAAAAAAAADwvw"
				],
				[
					526,
					1,
					"insert",
					{
						"characters": "tr<cos"
					},
					"BgAAABMEAAAAAAAAFAQAAAAAAAAAAAAAFAQAAAAAAAAVBAAAAAAAAAAAAAAVBAAAAAAAABYEAAAAAAAAAAAAABYEAAAAAAAAFwQAAAAAAAAAAAAAFwQAAAAAAAAYBAAAAAAAAAAAAAAYBAAAAAAAABkEAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABMEAAAAAAAAEwQAAAAAAAAAAAAAAADwvw"
				],
				[
					527,
					1,
					"left_delete",
					null,
					"AQAAABgEAAAAAAAAGAQAAAAAAAABAAAAcw",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABkEAAAAAAAAGQQAAAAAAAAAAAAAAADwvw"
				],
				[
					528,
					1,
					"insert",
					{
						"characters": "nst"
					},
					"AwAAABgEAAAAAAAAGQQAAAAAAAAAAAAAGQQAAAAAAAAaBAAAAAAAAAAAAAAaBAAAAAAAABsEAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABgEAAAAAAAAGAQAAAAAAAAAAAAAAADwvw"
				],
				[
					529,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABsEAAAAAAAAHAQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABsEAAAAAAAAGwQAAAAAAAAAAAAAAADwvw"
				],
				[
					531,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAAC8EAAAAAAAAMAQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC8EAAAAAAAALwQAAAAAAAAAAAAAAADwvw"
				],
				[
					533,
					1,
					"right_delete",
					null,
					"AQAAADEEAAAAAAAAMQQAAAAAAAABAAAAJg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADEEAAAAAAAAMQQAAAAAAAAAAAAAAADwvw"
				],
				[
					535,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAADIEAAAAAAAAMwQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADIEAAAAAAAAMgQAAAAAAAAAAAAAAADwvw"
				],
				[
					538,
					1,
					"right_delete",
					null,
					"AQAAAAYEAAAAAAAABgQAAAAAAAAWAAAAc3RkOjpzaGFyZWRfcHRyPGNvbnN0IA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABwEAAAAAAAABgQAAAAAAAAAAAAAAADwvw"
				],
				[
					540,
					1,
					"insert",
					{
						"characters": " const"
					},
					"BgAAABkEAAAAAAAAGgQAAAAAAAAAAAAAGgQAAAAAAAAbBAAAAAAAAAAAAAAbBAAAAAAAABwEAAAAAAAAAAAAABwEAAAAAAAAHQQAAAAAAAAAAAAAHQQAAAAAAAAeBAAAAAAAAAAAAAAeBAAAAAAAAB8EAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABkEAAAAAAAAGQQAAAAAAAAAAAAAAADwvw"
				],
				[
					541,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAAB8EAAAAAAAAIAQAAAAAAAAAAAAAIAQAAAAAAAAhBAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB8EAAAAAAAAHwQAAAAAAAAAAAAAAADwvw"
				],
				[
					542,
					2,
					"right_delete",
					null,
					"AgAAACEEAAAAAAAAIQQAAAAAAAABAAAAPiEEAAAAAAAAIQQAAAAAAAABAAAAIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACEEAAAAAAAAIQQAAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "/*"
					},
					"AgAAAAYBAAAAAAAABwEAAAAAAAAAAAAABwEAAAAAAAAIAQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAGAQAAAAAAAAYBAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "*/"
					},
					"AgAAAC8JAAAAAAAAMAkAAAAAAAAAAAAAMAkAAAAAAAAxCQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAvCQAAAAAAAC8JAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"left_delete",
					null,
					"AQAAAAYBAAAAAAAABgEAAAAAAAACAAAALyo",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAIAQAAAAAAAAYBAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAEoAAAAAAAAASwAAAAAAAAAAAAAASwAAAAAAAABMAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABKAAAAAAAAAEoAAAAAAAAAAAAAAAAAAAA"
				],
				[
					14,
					1,
					"paste",
					null,
					"AQAAAEsAAAAAAAAATQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABLAAAAAAAAAEsAAAAAAAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "falcor.sublime-project",
			"settings":
			{
				"buffer_size": 4240,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"",
					null,
					"BQAAALwMAAAAAAAAwAwAAAAAAAAOAAAAYnVpbGRfZXh0ZXJuYWxxCgAAAAAAAHUKAAAAAAAADgAAAGJ1aWxkX2V4dGVybmFsKgYAAAAAAAAuBgAAAAAAAA4AAABidWlsZF9leHRlcm5hbCIEAAAAAAAAJgQAAAAAAAAOAAAAYnVpbGRfZXh0ZXJuYWwcAgAAAAAAACACAAAAAAAADgAAAGJ1aWxkX2V4dGVybmFs",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACIEAAAAAAAAMAQAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAQCAAAAAAAABQIAAAAAAAAAAAAABQIAAAAAAAALAgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAEAgAAAAAAAAQCAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"paste",
					null,
					"AQAAAAsCAAAAAAAAIQIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALAgAAAAAAAAsCAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAACECAAAAAAAAIwIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhAgAAAAAAACECAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACICAAAAAAAAIwIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiAgAAAAAAACICAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"right_delete",
					null,
					"AQAAACMCAAAAAAAAIwIAAAAAAAABAAAAIg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjAgAAAAAAACMCAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAB0GAAAAAAAAHgYAAAAAAAAAAAAAHgYAAAAAAAAkBgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAdBgAAAAAAAB0GAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"paste",
					null,
					"AQAAACQGAAAAAAAAPAYAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkBgAAAAAAACQGAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAB8EAAAAAAAAIAQAAAAAAAAAAAAAIAQAAAAAAAAmBAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfBAAAAAAAAB8EAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"paste",
					null,
					"AQAAACYEAAAAAAAAPgQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAmBAAAAAAAACYEAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJAKAAAAAAAAkQoAAAAAAAAAAAAAkQoAAAAAAACfCgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACQCgAAAAAAAJAKAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"paste",
					null,
					"AQAAAJ8KAAAAAAAAtwoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACfCgAAAAAAAJ8KAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPgMAAAAAAAA+QwAAAAAAAAAAAAA+QwAAAAAAAAHDQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD4DAAAAAAAAPgMAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"paste",
					null,
					"AQAAAAcNAAAAAAAAHw0AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAHDQAAAAAAAAcNAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACMCAAAAAAAAJAIAAAAAAAAAAAAAJAIAAAAAAAAqAgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjAgAAAAAAACMCAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"paste",
					null,
					"AQAAACoCAAAAAAAAQgIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAqAgAAAAAAACoCAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "nvp"
					},
					"AwAAAEACAAAAAAAAQQIAAAAAAAAAAAAAQQIAAAAAAABCAgAAAAAAAAAAAABCAgAAAAAAAEMCAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABAAgAAAAAAAEACAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEUCAAAAAAAARgIAAAAAAAAAAAAARgIAAAAAAABMAgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABFAgAAAAAAAEUCAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"paste",
					null,
					"AQAAAEwCAAAAAAAAZAIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMAgAAAAAAAEwCAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "nvh"
					},
					"AwAAAGICAAAAAAAAYwIAAAAAAAAAAAAAYwIAAAAAAABkAgAAAAAAAAAAAABkAgAAAAAAAGUCAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABiAgAAAAAAAGICAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGcCAAAAAAAAaAIAAAAAAAAAAAAAaAIAAAAAAABuAgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABnAgAAAAAAAGcCAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"paste",
					null,
					"AQAAAG4CAAAAAAAAhgIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABuAgAAAAAAAG4CAAAAAAAAAAAAAAAA8L8"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "nvvk"
					},
					"BAAAAIQCAAAAAAAAhQIAAAAAAAAAAAAAhQIAAAAAAACGAgAAAAAAAAAAAACGAgAAAAAAAIcCAAAAAAAAAAAAAIcCAAAAAAAAiAIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACEAgAAAAAAAIQCAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIoCAAAAAAAAiwIAAAAAAAAAAAAAiwIAAAAAAACRAgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACKAgAAAAAAAIoCAAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					1,
					"paste",
					null,
					"AQAAAJECAAAAAAAAqQIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACRAgAAAAAAAJECAAAAAAAAAAAAAAAA8L8"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "nvna"
					},
					"BAAAAKcCAAAAAAAAqAIAAAAAAAAAAAAAqAIAAAAAAACpAgAAAAAAAAAAAACpAgAAAAAAAKoCAAAAAAAAAAAAAKoCAAAAAAAAqwIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACnAgAAAAAAAKcCAAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					1,
					"left_delete",
					null,
					"AQAAAKoCAAAAAAAAqgIAAAAAAAABAAAAYQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACrAgAAAAAAAKsCAAAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "amth"
					},
					"BAAAAKoCAAAAAAAAqwIAAAAAAAAAAAAAqwIAAAAAAACsAgAAAAAAAAAAAACsAgAAAAAAAK0CAAAAAAAAAAAAAK0CAAAAAAAArgIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACqAgAAAAAAAKoCAAAAAAAAAAAAAAAA8L8"
				],
				[
					58,
					2,
					"right_delete",
					null,
					"AgAAAKkCAAAAAAAAqQIAAAAAAAABAAAAbqkCAAAAAAAAqQIAAAAAAAABAAAAYQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpAgAAAAAAAKkCAAAAAAAAAAAAAAAA8L8"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAKoCAAAAAAAAqwIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACqAgAAAAAAAKoCAAAAAAAAAAAAAAAA8L8"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMoEAAAAAAAAywQAAAAAAAAAAAAAywQAAAAAAADRBAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKBAAAAAAAAMoEAAAAAAAAAAAAAAAA8L8"
				],
				[
					67,
					1,
					"paste",
					null,
					"AQAAANEEAAAAAAAAXAUAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADRBAAAAAAAANEEAAAAAAAAAAAAAAAA8L8"
				],
				[
					71,
					3,
					"left_delete",
					null,
					"AwAAANUEAAAAAAAA1QQAAAAAAAACAAAAICDTBAAAAAAAANMEAAAAAAAAAgAAACAg0QQAAAAAAADRBAAAAAAAAAIAAAAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXBAAAAAAAANcEAAAAAAAAAAAAAAAA8L8"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHMHAAAAAAAAdAcAAAAAAAAAAAAAdAcAAAAAAAB6BwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABzBwAAAAAAAHMHAAAAAAAAAAAAAAAA8L8"
				],
				[
					75,
					1,
					"paste",
					null,
					"AQAAAHoHAAAAAAAABQgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB6BwAAAAAAAHoHAAAAAAAAAAAAAAAA8L8"
				],
				[
					78,
					3,
					"left_delete",
					null,
					"AwAAAH4HAAAAAAAAfgcAAAAAAAACAAAAICB8BwAAAAAAAHwHAAAAAAAAAgAAACAgegcAAAAAAAB6BwAAAAAAAAIAAAAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACABwAAAAAAAIAHAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPMOAAAAAAAA9A4AAAAAAAAAAAAA9A4AAAAAAAACDwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8w4AAAAAAADzDgAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAAAIPAAAAAAAAIw8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAg8AAAAAAAACDwAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "VulkanMem"
					},
					"CQAAACAPAAAAAAAAIQ8AAAAAAAAAAAAAIQ8AAAAAAAAiDwAAAAAAAAAAAAAiDwAAAAAAACMPAAAAAAAAAAAAACMPAAAAAAAAJA8AAAAAAAAAAAAAJA8AAAAAAAAlDwAAAAAAAAAAAAAlDwAAAAAAACYPAAAAAAAAAAAAACYPAAAAAAAAJw8AAAAAAAAAAAAAJw8AAAAAAAAoDwAAAAAAAAAAAAAoDwAAAAAAACkPAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIA8AAAAAAAAgDwAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "oryAllo"
					},
					"BwAAACkPAAAAAAAAKg8AAAAAAAAAAAAAKg8AAAAAAAArDwAAAAAAAAAAAAArDwAAAAAAACwPAAAAAAAAAAAAACwPAAAAAAAALQ8AAAAAAAAAAAAALQ8AAAAAAAAuDwAAAAAAAAAAAAAuDwAAAAAAAC8PAAAAAAAAAAAAAC8PAAAAAAAAMA8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKQ8AAAAAAAApDwAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "cator"
					},
					"BQAAADAPAAAAAAAAMQ8AAAAAAAAAAAAAMQ8AAAAAAAAyDwAAAAAAAAAAAAAyDwAAAAAAADMPAAAAAAAAAAAAADMPAAAAAAAANA8AAAAAAAAAAAAANA8AAAAAAAA1DwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMA8AAAAAAAAwDwAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIsMAAAAAAAAjAwAAAAAAAAAAAAAjAwAAAAAAACaDAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiwwAAAAAAACLDAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"paste",
					null,
					"AQAAAJoMAAAAAAAA0AwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmgwAAAAAAACaDAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACcIAAAAAAAAKAgAAAAAAAAAAAAAKAgAAAAAAAAuCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJwgAAAAAAAAnCAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"paste",
					null,
					"AQAAAC4IAAAAAAAAZAgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALggAAAAAAAAuCAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAH4FAAAAAAAAfwUAAAAAAAAAAAAAfwUAAAAAAACFBQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfgUAAAAAAAB+BQAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"paste",
					null,
					"AQAAAIUFAAAAAAAAuwUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhQUAAAAAAACFBQAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANcCAAAAAAAA2AIAAAAAAAAAAAAA2AIAAAAAAADeAgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1wIAAAAAAADXAgAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"paste",
					null,
					"AQAAAN4CAAAAAAAAFAMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3gIAAAAAAADeAgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/RenderPasses/MinimalPathTracer/MinimalPathTracer.cpp",
			"settings":
			{
				"buffer_size": 11194,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"left_delete",
					null,
					"AQAAAOkPAAAAAAAA6Q8AAAAAAAABAAAACg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOoPAAAAAAAA6g8AAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOkPAAAAAAAA6g8AAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOkPAAAAAAAA6Q8AAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOsPAAAAAAAA7A8AAAAAAAAAAAAA7A8AAAAAAADwDwAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOsPAAAAAAAA6w8AAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"paste",
					null,
					"AQAAAPAPAAAAAAAAIxAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPAPAAAAAAAA8A8AAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACMQAAAAAAAAJBAAAAAAAAAAAAAAJBAAAAAAAAAoEAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACMQAAAAAAAAIxAAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"paste",
					null,
					"AgAAAPoPAAAAAAAAExAAAAAAAAAAAAAAExAAAAAAAAATEAAAAAAAACYAAABObyByZXF1aXJlZCBkZXB0aCBjaGFubmVsIHByb3ZpZGVkICEhIQ",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACAQAAAAAAAA+g8AAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPkGAAAAAAAA+gYAAAAAAAAAAAAAGBAAAAAAAAAYEAAAAAAAAAQAAAAgICAg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPkGAAAAAAAA+QYAAAAAAAAAAAAAAADwvw"
				],
				[
					19,
					1,
					"paste",
					null,
					"AQAAAPoGAAAAAAAAHwcAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPoGAAAAAAAA+gYAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"left_delete",
					null,
					"AQAAAPoQAAAAAAAA+hAAAAAAAAABAAAACg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPsQAAAAAAAA+xAAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPoQAAAAAAAA+xAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPoQAAAAAAAA+hAAAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					1,
					"left_delete",
					null,
					"AQAAAN4RAAAAAAAA3hEAAAAAAAABAAAACg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8RAAAAAAAA3xEAAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAN4RAAAAAAAA3xEAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN4RAAAAAAAA3hEAAAAAAAAAAAAAAADwvw"
				],
				[
					37,
					2,
					"left_delete",
					null,
					"AgAAALoSAAAAAAAAuhIAAAAAAAAEAAAAICAgILkSAAAAAAAAuRIAAAAAAAABAAAACg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL4SAAAAAAAAvhIAAAAAAAAAAAAAAADwvw"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALkSAAAAAAAAuhIAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALkSAAAAAAAAuRIAAAAAAAAAAAAAAADwvw"
				],
				[
					41,
					1,
					"left_delete",
					null,
					"AQAAAOETAAAAAAAA4RMAAAAAAAABAAAACg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOITAAAAAAAA4hMAAAAAAAAAAAAAAADwvw"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOETAAAAAAAA4hMAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOETAAAAAAAA4RMAAAAAAAAAAAAAAADwvw"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOMTAAAAAAAA5BMAAAAAAAAAAAAA5BMAAAAAAADoEwAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOMTAAAAAAAA4xMAAAAAAAAAAAAAAADwvw"
				],
				[
					45,
					1,
					"paste",
					null,
					"AQAAAOgTAAAAAAAADhQAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOgTAAAAAAAA6BMAAAAAAAAAAAAAAADwvw"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAA4UAAAAAAAADxQAAAAAAAAAAAAADxQAAAAAAAATFAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA4UAAAAAAAADhQAAAAAAAAAAAAAAADwvw"
				],
				[
					50,
					1,
					"left_delete",
					null,
					"AgAAAEIVAAAAAAAAQhUAAAAAAAABAAAACg8UAAAAAAAADxQAAAAAAAAEAAAAICAgIA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEMVAAAAAAAAQxUAAAAAAAAAAAAAAADwvw"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAD4VAAAAAAAAPxUAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD4VAAAAAAAAPhUAAAAAAAAAAAAAAADwvw"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEAVAAAAAAAAQRUAAAAAAAAAAAAAQRUAAAAAAABFFQAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEAVAAAAAAAAQBUAAAAAAAAAAAAAAADwvw"
				],
				[
					54,
					1,
					"paste",
					null,
					"AQAAAEUVAAAAAAAAaxUAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEUVAAAAAAAARRUAAAAAAAAAAAAAAADwvw"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGsVAAAAAAAAbBUAAAAAAAAAAAAAbBUAAAAAAABwFQAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGsVAAAAAAAAaxUAAAAAAAAAAAAAAADwvw"
				],
				[
					63,
					1,
					"paste",
					null,
					"AgAAAAUUAAAAAAAADBQAAAAAAAAAAAAADBQAAAAAAAAMFAAAAAAAAAYAAABjcmVhdGU",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAUUAAAAAAAACxQAAAAAAAAAAAAAAADwvw"
				],
				[
					71,
					1,
					"paste",
					null,
					"AgAAAGMVAAAAAAAAahUAAAAAAAAAAAAAahUAAAAAAABqFQAAAAAAAAYAAABjcmVhdGU",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGMVAAAAAAAAaRUAAAAAAAAAAAAAAADwvw"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAO8VAAAAAAAA8BUAAAAAAAAAAAAA8BUAAAAAAAD0FQAAAAAAAAAAAABuFQAAAAAAAG4VAAAAAAAABAAAACAgICA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO8VAAAAAAAA7xUAAAAAAAAAAAAAAADwvw"
				],
				[
					76,
					2,
					"left_delete",
					null,
					"AgAAAAUWAAAAAAAABRYAAAAAAAAEAAAAICAgIAQWAAAAAAAABBYAAAAAAAABAAAACg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAkWAAAAAAAACRYAAAAAAAAAAAAAAABCQA"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAQWAAAAAAAABRYAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAQWAAAAAAAABBYAAAAAAAAAAAAAAADwvw"
				],
				[
					82,
					2,
					"left_delete",
					null,
					"AgAAAEkXAAAAAAAASRcAAAAAAAAEAAAAICAgIEgXAAAAAAAASBcAAAAAAAABAAAACg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE0XAAAAAAAATRcAAAAAAAAAAAAAAADwvw"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEgXAAAAAAAASRcAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEgXAAAAAAAASBcAAAAAAAAAAAAAAADwvw"
				],
				[
					86,
					3,
					"left_delete",
					null,
					"AwAAAHcXAAAAAAAAdxcAAAAAAAAEAAAAICAgIHMXAAAAAAAAcxcAAAAAAAAEAAAAICAgIHIXAAAAAAAAchcAAAAAAAABAAAACg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHsXAAAAAAAAexcAAAAAAAAAAAAAAADwvw"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHIXAAAAAAAAcxcAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHIXAAAAAAAAchcAAAAAAAAAAAAAAADwvw"
				],
				[
					90,
					2,
					"left_delete",
					null,
					"AgAAAGAYAAAAAAAAYBgAAAAAAAAEAAAAICAgIF8YAAAAAAAAXxgAAAAAAAABAAAACg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGQYAAAAAAAAZBgAAAAAAAAAAAAAAADwvw"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAF8YAAAAAAAAYBgAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF8YAAAAAAAAXxgAAAAAAAAAAAAAAADwvw"
				],
				[
					96,
					2,
					"left_delete",
					null,
					"AgAAAE4ZAAAAAAAAThkAAAAAAAAEAAAAICAgIE0ZAAAAAAAATRkAAAAAAAABAAAACg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFIZAAAAAAAAUhkAAAAAAAAAAAAAAADwvw"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAE0ZAAAAAAAAThkAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE0ZAAAAAAAATRkAAAAAAAAAAAAAAADwvw"
				],
				[
					102,
					2,
					"left_delete",
					null,
					"AgAAAC4aAAAAAAAALhoAAAAAAAAEAAAAICAgIC0aAAAAAAAALRoAAAAAAAABAAAACg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADIaAAAAAAAAMhoAAAAAAAAAAAAAAADwvw"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAC0aAAAAAAAALhoAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC0aAAAAAAAALRoAAAAAAAAAAAAAAADwvw"
				],
				[
					108,
					2,
					"left_delete",
					null,
					"AgAAAOsgAAAAAAAA6yAAAAAAAAAEAAAAICAgIOogAAAAAAAA6iAAAAAAAAABAAAACg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO8gAAAAAAAA7yAAAAAAAAAAAAAAAADwvw"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOogAAAAAAAA6yAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOogAAAAAAAA6iAAAAAAAAAAAAAAAADwvw"
				],
				[
					112,
					3,
					"left_delete",
					null,
					"AwAAABQhAAAAAAAAFCEAAAAAAAAEAAAAICAgIBAhAAAAAAAAECEAAAAAAAAEAAAAICAgIA8hAAAAAAAADyEAAAAAAAABAAAACg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABghAAAAAAAAGCEAAAAAAAAAAAAAAADwvw"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAA8hAAAAAAAAECEAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA8hAAAAAAAADyEAAAAAAAAAAAAAAADwvw"
				],
				[
					117,
					1,
					"left_delete",
					null,
					"AQAAAF8jAAAAAAAAXyMAAAAAAAABAAAACg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGAjAAAAAAAAYCMAAAAAAAAAAAAAAADwvw"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAF8jAAAAAAAAYCMAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF8jAAAAAAAAXyMAAAAAAAAAAAAAAADwvw"
				],
				[
					123,
					3,
					"left_delete",
					null,
					"AwAAANckAAAAAAAA1yQAAAAAAAAEAAAAICAgINMkAAAAAAAA0yQAAAAAAAAEAAAAICAgINIkAAAAAAAA0iQAAAAAAAABAAAACg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANskAAAAAAAA2yQAAAAAAAAAAAAAAADwvw"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANIkAAAAAAAA0yQAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANIkAAAAAAAA0iQAAAAAAAAAAAAAAADwvw"
				],
				[
					139,
					1,
					"left_delete",
					null,
					"AQAAAC0pAAAAAAAALSkAAAAAAAABAAAACg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC4pAAAAAAAALikAAAAAAAAAAAAAAADwvw"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAC0pAAAAAAAALikAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC0pAAAAAAAALSkAAAAAAAAAAAAAAADwvw"
				],
				[
					155,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMAoAAAAAAAAwSgAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMAoAAAAAAAAwCgAAAAAAAAAAAAAAADwvw"
				],
				[
					156,
					1,
					"reindent",
					null,
					"AQAAAMEoAAAAAAAAySgAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMEoAAAAAAAAwSgAAAAAAAAAAAAAAADwvw"
				],
				[
					157,
					1,
					"paste",
					null,
					"AQAAAMkoAAAAAAAA8CgAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMkoAAAAAAAAySgAAAAAAAAAAAAAAADwvw"
				],
				[
					161,
					4,
					"left_delete",
					null,
					"BAAAAMkoAAAAAAAAySgAAAAAAAAnAAAATE9HX1dBUk4oIk1pbmltYWxQYXRoVHJhY2VyOjpleGVjdXRlIik7xSgAAAAAAADFKAAAAAAAAAQAAAAgICAgwSgAAAAAAADBKAAAAAAAAAQAAAAgICAgwCgAAAAAAADAKAAAAAAAAAEAAAAK",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPAoAAAAAAAAySgAAAAAAAAAAAAAAADwvw"
				],
				[
					173,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGEjAAAAAAAAYiMAAAAAAAAAAAAAYiMAAAAAAABmIwAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGEjAAAAAAAAYSMAAAAAAAAAAAAAAADwvw"
				],
				[
					174,
					1,
					"paste",
					null,
					"AQAAAGYjAAAAAAAAjSMAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGYjAAAAAAAAZiMAAAAAAAAAAAAAAADwvw"
				],
				[
					175,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAI0jAAAAAAAAjiMAAAAAAAAAAAAAjiMAAAAAAACSIwAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI0jAAAAAAAAjSMAAAAAAAAAAAAAAADwvw"
				],
				[
					181,
					1,
					"paste",
					null,
					"AgAAAHAjAAAAAAAAiyMAAAAAAAAAAAAAiyMAAAAAAACLIwAAAAAAABoAAABNaW5pbWFsUGF0aFRyYWNlcjo6ZXhlY3V0ZQ",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHAjAAAAAAAAiiMAAAAAAAAAAAAAAADwvw"
				],
				[
					187,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AwAAAFgZAAAAAAAAWRkAAAAAAAAAAAAAkCMAAAAAAACQIwAAAAAAAAQAAAAgICAgWRkAAAAAAABaGQAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFgZAAAAAAAAWBkAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "src/Falcor/Scene/Raytracing.slang",
			"settings":
			{
				"buffer_size": 5978,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAWhcAAAAAAAAAAAAAWhcAAAAAAABaFwAAAAAAAI8VAAAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAjIENvcHlyaWdodCAoYykgMjAyMCwgTlZJRElBIENPUlBPUkFUSU9OLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogIwogIyBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQKICMgbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zCiAjIGFyZSBtZXQ6CiAjICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0CiAjICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci4KICMgICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQKICMgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZQogIyAgICBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLgogIyAgKiBOZWl0aGVyIHRoZSBuYW1lIG9mIE5WSURJQSBDT1JQT1JBVElPTiBub3IgdGhlIG5hbWVzIG9mIGl0cwogIyAgICBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQKICMgICAgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLgogIwogIyBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBgYEFTIElTJycgQU5EIEFOWQogIyBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRQogIyBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIKICMgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgT1dORVIgT1IKICMgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsCiAjIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywKICMgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SCiAjIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkKICMgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUCiAjIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRQogIyBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLgogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCl9fZXhwb3J0ZWQgaW1wb3J0IFNjZW5lLlNjZW5lOwpfX2V4cG9ydGVkIGltcG9ydCBTY2VuZS5TaGFkaW5nRGF0YTsKX19leHBvcnRlZCBpbXBvcnQgVXRpbHMuSGVscGVyczsKCmltcG9ydCBFeHBlcmltZW50YWwuU2NlbmUuTWF0ZXJpYWwuVGV4TE9ESGVscGVyczsKClJheXRyYWNpbmdBY2NlbGVyYXRpb25TdHJ1Y3R1cmUgZ1J0U2NlbmU7CgpjYnVmZmVyIER4clBlckZyYW1lCnsKICAgIHVpbnQgaGl0UHJvZ3JhbUNvdW50Owp9OwoKc3RydWN0IEhpdFNoYWRlclBhcmFtcwp7CiAgICB1aW50IGdlb21ldHJ5SW5kZXg7CgogICAgLyoqIFJldHVybnMgdGhlIGdsb2JhbCBoaXQgSUQgKD0gbWVzaCBpbnN0YW5jZSBJRCBpbiB0aGUgc2NlbmUpLgogICAgICAgIFRoaXMgZnVuY3Rpb24gY2FuIG9ubHkgYmUgY2FsbGVkIGZyb20gYSByYXkgdHJhY2luZyBoaXQgcHJvZ3JhbS4KICAgICAgICBccmV0dXJuIEdsb2JhbCBoaXQgSUQuCiAgICAqLwogICAgdWludCBnZXRHbG9iYWxIaXRJRCgpCiAgICB7CiAgICAgICAgcmV0dXJuIEluc3RhbmNlSUQoKSArIGdlb21ldHJ5SW5kZXg7CiAgICB9Cn07CgovKiogUmV0dXJucyBpbnRlcnBvbGF0ZWQgdmVydGV4IGF0dHJpYnV0ZXMgaW4gYSByYXkgdHJhY2luZyBoaXQgcHJvZ3JhbS4KICAgIFxwYXJhbVtpbl0gdHJpYW5nbGVJbmRleCBJbmRleCBvZiB0aGUgdHJpYW5nbGUgaW4gdGhlIGN1cnJlbnQgbWVzaCAoPSBQcmltaXRpdmVJbmRleCgpKS4KICAgIFxwYXJhbVtpbl0gYXR0cmlicyBJbnRlcnNlY3Rpb24gYXR0cmlidXRlcyBwcm92aWRlZCBieSBEWFIuCiAgICBccmV0dXJuIEludGVycG9sYXRlZCB2ZXJ0ZXggYXR0cmlidXRlcy4KKi8KVmVydGV4RGF0YSBnZXRWZXJ0ZXhEYXRhKEhpdFNoYWRlclBhcmFtcyBoaXRQYXJhbXMsIHVpbnQgdHJpYW5nbGVJbmRleCwgQnVpbHRJblRyaWFuZ2xlSW50ZXJzZWN0aW9uQXR0cmlidXRlcyBhdHRyaWJzKQp7CiAgICBmbG9hdDMgYmFyeWNlbnRyaWNzID0gZmxvYXQzKDEuMCAtIGF0dHJpYnMuYmFyeWNlbnRyaWNzLnggLSBhdHRyaWJzLmJhcnljZW50cmljcy55LCBhdHRyaWJzLmJhcnljZW50cmljcy54LCBhdHRyaWJzLmJhcnljZW50cmljcy55KTsKICAgIHJldHVybiBnU2NlbmUuZ2V0VmVydGV4RGF0YShoaXRQYXJhbXMuZ2V0R2xvYmFsSGl0SUQoKSwgdHJpYW5nbGVJbmRleCwgYmFyeWNlbnRyaWNzKTsKfQoKLyoqIFJldHVybnMgaW50ZXJwb2xhdGVkIHZlcnRleCBhdHRyaWJ1dGVzIGluIGEgcmF5IHRyYWNpbmcgaGl0IHByb2dyYW0gd2hlbiByYXkgY29uZXMgYXJlIHVzZWQgZm9yIHRleHR1cmUgTE9ELgogICAgXHBhcmFtW2luXSBoaXRQYXJhbXMgUGFybWF0ZXJzIGZvciBoaXQgc2hhZGVyCiAgICBccGFyYW1baW5dIHRyaWFuZ2xlSW5kZXggSW5kZXggb2YgdGhlIHRyaWFuZ2xlIGluIHRoZSBjdXJyZW50IG1lc2ggKD0gUHJpbWl0aXZlSW5kZXgoKSkuCiAgICBccGFyYW1baW5dIGF0dHJpYnMgSW50ZXJzZWN0aW9uIGF0dHJpYnV0ZXMgcHJvdmlkZWQgYnkgRFhSLgogICAgXHJldHVybiBJbnRlcnBvbGF0ZWQgdmVydGV4IGF0dHJpYnV0ZXMuCiovClZlcnRleERhdGEgZ2V0VmVydGV4RGF0YVJheUNvbmVzKEhpdFNoYWRlclBhcmFtcyBoaXRQYXJhbXMsIHVpbnQgdHJpYW5nbGVJbmRleCwgQnVpbHRJblRyaWFuZ2xlSW50ZXJzZWN0aW9uQXR0cmlidXRlcyBhdHRyaWJzKQp7CiAgICBmbG9hdDMgYmFyeWNlbnRyaWNzID0gZmxvYXQzKDEuMCAtIGF0dHJpYnMuYmFyeWNlbnRyaWNzLnggLSBhdHRyaWJzLmJhcnljZW50cmljcy55LCBhdHRyaWJzLmJhcnljZW50cmljcy54LCBhdHRyaWJzLmJhcnljZW50cmljcy55KTsKICAgIHJldHVybiBnU2NlbmUuZ2V0VmVydGV4RGF0YVJheUNvbmVzKGhpdFBhcmFtcy5nZXRHbG9iYWxIaXRJRCgpLCB0cmlhbmdsZUluZGV4LCBiYXJ5Y2VudHJpY3MpOwp9CgovKiogUmV0dXJucyBpbnRlcnBvbGF0ZWQgdmVydGV4IGF0dHJpYnV0ZXMgaW4gYSByYXkgdHJhY2luZyBoaXQgcHJvZ3JhbSB3aGVuIHJheSBkaWZmZXJlbnRpYWxzIGFyZSB1c2VkIGZvciB0ZXh0dXJlIExPRC4KICAgIFxwYXJhbVtpbl0gaGl0UGFyYW1zIFBhcm1hdGVycyBmb3IgaGl0IHNoYWRlcgogICAgXHBhcmFtW2luXSB0cmlhbmdsZUluZGV4IEluZGV4IG9mIHRoZSB0cmlhbmdsZSBpbiB0aGUgY3VycmVudCBtZXNoICg9IFByaW1pdGl2ZUluZGV4KCkpLgogICAgXHBhcmFtW2luXSBhdHRyaWJzIEludGVyc2VjdGlvbiBhdHRyaWJ1dGVzIHByb3ZpZGVkIGJ5IERYUi4KICAgIFxwYXJhbVtpbl0gcmF5RGlyIFJheSBkaXJlY3Rpb24uCiAgICBccGFyYW1baW5dIGhpdFQgRGlzdGFuY2UgdG8gaGl0IHBvaW50LgogICAgXHBhcmFtW2luLG91dF0gcmF5RGlmZiBUaGUgcmF5IGRpZmZlcmVudGlhbCB1c2VkIGFzIGlucHV0IGFuZCBvdXRwdXQuCiAgICBccGFyYW1bb3V0XSBkVVZkeCBUaGUgZGlmZmVyZW50aWFsIG9mIHRoZSB0ZXh0dXJlIGNvb3JkaW5hdGVzIGluIHBpeGVsIGNvb3JkaW5hdGUgeC4KICAgIFxwYXJhbVtvdXRdIGRVVmR5IFRoZSBkaWZmZXJlbnRpYWwgb2YgdGhlIHRleHR1cmUgY29vcmRpbmF0ZXMgaW4gcGl4ZWwgY29vcmRpbmF0ZSB5LgogICAgXHJldHVybiBJbnRlcnBvbGF0ZWQgdmVydGV4IGF0dHJpYnV0ZXMuCiovClZlcnRleERhdGEgZ2V0VmVydGV4RGF0YVJheURpZmYoSGl0U2hhZGVyUGFyYW1zIGhpdFBhcmFtcywgdWludCB0cmlhbmdsZUluZGV4LCBCdWlsdEluVHJpYW5nbGVJbnRlcnNlY3Rpb25BdHRyaWJ1dGVzIGF0dHJpYnMsIGluIGZsb2F0MyByYXlEaXIsIGluIGZsb2F0IGhpdFQsCiAgICBpbm91dCBSYXlEaWZmIHJheURpZmYsIG91dCBmbG9hdDIgZFVWZHgsIG91dCBmbG9hdDIgZFVWZHkpCnsKICAgIGZsb2F0MyBiYXJ5Y2VudHJpY3MgPSBmbG9hdDMoMS4wIC0gYXR0cmlicy5iYXJ5Y2VudHJpY3MueCAtIGF0dHJpYnMuYmFyeWNlbnRyaWNzLnksIGF0dHJpYnMuYmFyeWNlbnRyaWNzLngsIGF0dHJpYnMuYmFyeWNlbnRyaWNzLnkpOwogICAgcmV0dXJuIGdTY2VuZS5nZXRWZXJ0ZXhEYXRhUmF5RGlmZihoaXRQYXJhbXMuZ2V0R2xvYmFsSGl0SUQoKSwgdHJpYW5nbGVJbmRleCwgYmFyeWNlbnRyaWNzLCByYXlEaXIsIGhpdFQsIHJheURpZmYsIGRVVmR4LCBkVVZkeSk7Cn0KCi8qKiBSZXR1cm5zIGludGVycG9sYXRlZCBwb3NpdGlvbiBvbiBhIHRyaWFuZ2xlIGluIHdvcmxkIHNwYWNlIGZvciB0aGUgcHJldmlvdXMgZnJhbWUuCiAgICBccGFyYW1baW5dIHRyaWFuZ2xlSW5kZXggSW5kZXggb2YgdGhlIHRyaWFuZ2xlIGluIHRoZSBjdXJyZW50IG1lc2ggKD0gUHJpbWl0aXZlSW5kZXgoKSkuCiAgICBccGFyYW1baW5dIGF0dHJpYnMgSW50ZXJzZWN0aW9uIGF0dHJpYnV0ZXMgcHJvdmlkZWQgYnkgRFhSLgogICAgXHJldHVybiBJbnRlcnBvbGF0ZWQgcG9zaXRpb24gaW4gd29ybGQgc3BhY2UgZm9yIHRoZSBwcmV2aW91cyBmcmFtZS4KKi8KZmxvYXQzIGdldFByZXZQb3NXKAogICAgSGl0U2hhZGVyUGFyYW1zIGhpdFBhcmFtcywKICAgIHVpbnQgdHJpYW5nbGVJbmRleCwKICAgIEJ1aWx0SW5UcmlhbmdsZUludGVyc2VjdGlvbkF0dHJpYnV0ZXMgYXR0cmlicykKewogICAgZmxvYXQzIGJhcnljZW50cmljcyA9IGZsb2F0MygxLjAgLSBhdHRyaWJzLmJhcnljZW50cmljcy54IC0gYXR0cmlicy5iYXJ5Y2VudHJpY3MueSwgYXR0cmlicy5iYXJ5Y2VudHJpY3MueCwgYXR0cmlicy5iYXJ5Y2VudHJpY3MueSk7CiAgICByZXR1cm4gZ1NjZW5lLmdldFByZXZQb3NXKGhpdFBhcmFtcy5nZXRHbG9iYWxIaXRJRCgpLCB0cmlhbmdsZUluZGV4LCBiYXJ5Y2VudHJpY3MpOwp9Cg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAjxUAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "src/Falcor/Scene/RaytracingInline.slang",
			"settings":
			{
				"buffer_size": 13738,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "src/RenderPasses/MinimalPathTracer/MinimalPathTracer.h",
			"settings":
			{
				"buffer_size": 4105,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					7,
					2,
					"left_delete",
					null,
					"AgAAACoPAAAAAAAAKg8AAAAAAAAEAAAAICAgICkPAAAAAAAAKQ8AAAAAAAABAAAACg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC4PAAAAAAAALg8AAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACkPAAAAAAAAKg8AAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACkPAAAAAAAAKQ8AAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "src/RenderPasses/SkyBox/SkyBox.h",
			"settings":
			{
				"buffer_size": 4138,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"paste",
					null,
					"AQAAAHIHAAAAAAAAkgcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcgcAAAAAAAByBwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/Utils/Sampling/SampleGenerator.h",
			"settings":
			{
				"buffer_size": 3957,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_utils_lib/logging.h",
			"settings":
			{
				"buffer_size": 2525,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraph.h",
			"settings":
			{
				"buffer_size": 11565,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"insert",
					{
						"characters": "\nclass"
					},
					"BgAAABMIAAAAAAAAFAgAAAAAAAAAAAAAFAgAAAAAAAAVCAAAAAAAAAAAAAAVCAAAAAAAABYIAAAAAAAAAAAAABYIAAAAAAAAFwgAAAAAAAAAAAAAFwgAAAAAAAAYCAAAAAAAAAAAAAAYCAAAAAAAABkIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEwgAAAAAAAATCAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": " Scee"
					},
					"BQAAABkIAAAAAAAAGggAAAAAAAAAAAAAGggAAAAAAAAbCAAAAAAAAAAAAAAbCAAAAAAAABwIAAAAAAAAAAAAABwIAAAAAAAAHQgAAAAAAAAAAAAAHQgAAAAAAAAeCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGQgAAAAAAAAZCAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"left_delete",
					null,
					"AQAAAB0IAAAAAAAAHQgAAAAAAAABAAAAZQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHggAAAAAAAAeCAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "nbe"
					},
					"AwAAAB0IAAAAAAAAHggAAAAAAAAAAAAAHggAAAAAAAAfCAAAAAAAAAAAAAAfCAAAAAAAACAIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHQgAAAAAAAAdCAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					2,
					"left_delete",
					null,
					"AgAAAB8IAAAAAAAAHwgAAAAAAAABAAAAZR4IAAAAAAAAHggAAAAAAAABAAAAYg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIAgAAAAAAAAgCAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "e;"
					},
					"AgAAAB4IAAAAAAAAHwgAAAAAAAAAAAAAHwgAAAAAAAAgCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHggAAAAAAAAeCAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"left_delete",
					null,
					"AQAAAEoHAAAAAAAASgcAAAAAAAAgAAAAI2luY2x1ZGUgIkZhbGNvci9TY2VuZS9TY2VuZS5oIgo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASgcAAAAAAABqBwAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAAwHAAAAAAAADQcAAAAAAAAAAAAADQcAAAAAAAAOBwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADAcAAAAAAAAMBwAAAAAAAAAAAAAAAAAA"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "#include"
					},
					"CAAAAA0HAAAAAAAADgcAAAAAAAAAAAAADgcAAAAAAAAPBwAAAAAAAAAAAAAPBwAAAAAAABAHAAAAAAAAAAAAABAHAAAAAAAAEQcAAAAAAAAAAAAAEQcAAAAAAAASBwAAAAAAAAAAAAASBwAAAAAAABMHAAAAAAAAAAAAABMHAAAAAAAAFAcAAAAAAAAAAAAAFAcAAAAAAAAVBwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADQcAAAAAAAANBwAAAAAAAAAAAAAAAAAA"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABUHAAAAAAAAFgcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFQcAAAAAAAAVBwAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert_snippet",
					{
						"contents": "<$0>"
					},
					"AQAAABYHAAAAAAAAGAcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFgcAAAAAAAAWBwAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "mem"
					},
					"AwAAABcHAAAAAAAAGAcAAAAAAAAAAAAAGAcAAAAAAAAZBwAAAAAAAAAAAAAZBwAAAAAAABoHAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFwcAAAAAAAAXBwAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert_completion",
					{
						"completion": "memory",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "memory"
					},
					"AgAAABcHAAAAAAAAFwcAAAAAAAADAAAAbWVtFwcAAAAAAAAdBwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGgcAAAAAAAAaBwAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"paste",
					null,
					"AQAAAKYLAAAAAAAAtgsAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApgsAAAAAAACmCwAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAALsLAAAAAAAAvAsAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuwsAAAAAAAC7CwAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					11,
					"right_delete",
					null,
					"CwAAALwLAAAAAAAAvAsAAAAAAAABAAAAOrwLAAAAAAAAvAsAAAAAAAABAAAAOrwLAAAAAAAAvAsAAAAAAAABAAAAU7wLAAAAAAAAvAsAAAAAAAABAAAAaLwLAAAAAAAAvAsAAAAAAAABAAAAYbwLAAAAAAAAvAsAAAAAAAABAAAAcrwLAAAAAAAAvAsAAAAAAAABAAAAZbwLAAAAAAAAvAsAAAAAAAABAAAAZLwLAAAAAAAAvAsAAAAAAAABAAAAULwLAAAAAAAAvAsAAAAAAAABAAAAdLwLAAAAAAAAvAsAAAAAAAABAAAAcg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvAsAAAAAAAC8CwAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"paste",
					null,
					"AQAAACIpAAAAAAAAMikAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIikAAAAAAAAiKQAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAADcpAAAAAAAAOCkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANykAAAAAAAA3KQAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					11,
					"right_delete",
					null,
					"CwAAADgpAAAAAAAAOCkAAAAAAAABAAAAOjgpAAAAAAAAOCkAAAAAAAABAAAAOjgpAAAAAAAAOCkAAAAAAAABAAAAUzgpAAAAAAAAOCkAAAAAAAABAAAAaDgpAAAAAAAAOCkAAAAAAAABAAAAYTgpAAAAAAAAOCkAAAAAAAABAAAAcjgpAAAAAAAAOCkAAAAAAAABAAAAZTgpAAAAAAAAOCkAAAAAAAABAAAAZDgpAAAAAAAAOCkAAAAAAAABAAAAUDgpAAAAAAAAOCkAAAAAAAABAAAAdDgpAAAAAAAAOCkAAAAAAAABAAAAcg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOCkAAAAAAAA4KQAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"paste",
					null,
					"AQAAAD0fAAAAAAAATR8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPR8AAAAAAAA9HwAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAAFIfAAAAAAAAUx8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUh8AAAAAAABSHwAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					11,
					"right_delete",
					null,
					"CwAAAFMfAAAAAAAAUx8AAAAAAAABAAAAOlMfAAAAAAAAUx8AAAAAAAABAAAAOlMfAAAAAAAAUx8AAAAAAAABAAAAU1MfAAAAAAAAUx8AAAAAAAABAAAAaFMfAAAAAAAAUx8AAAAAAAABAAAAYVMfAAAAAAAAUx8AAAAAAAABAAAAclMfAAAAAAAAUx8AAAAAAAABAAAAZVMfAAAAAAAAUx8AAAAAAAABAAAAZFMfAAAAAAAAUx8AAAAAAAABAAAAUFMfAAAAAAAAUx8AAAAAAAABAAAAdFMfAAAAAAAAUx8AAAAAAAABAAAAcg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUx8AAAAAAABTHwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraph.cpp",
			"settings":
			{
				"buffer_size": 31296,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHwHAAAAAAAAfQcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfAcAAAAAAAB8BwAAAAAAAAAAAAAAAGtA"
				],
				[
					7,
					1,
					"paste",
					null,
					"AQAAAHwHAAAAAAAApgcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfAcAAAAAAAB8BwAAAAAAAAAAAAAAAAAA"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "Scene"
					},
					"BQAAAI0HAAAAAAAAjgcAAAAAAAAAAAAAjgcAAAAAAACPBwAAAAAAAAAAAACPBwAAAAAAAJAHAAAAAAAAAAAAAJAHAAAAAAAAkQcAAAAAAAAAAAAAkQcAAAAAAACSBwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjQcAAAAAAACNBwAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					8,
					"right_delete",
					null,
					"CAAAAJIHAAAAAAAAkgcAAAAAAAABAAAAQ5IHAAAAAAAAkgcAAAAAAAABAAAAb5IHAAAAAAAAkgcAAAAAAAABAAAAcpIHAAAAAAAAkgcAAAAAAAABAAAAZZIHAAAAAAAAkgcAAAAAAAABAAAAL5IHAAAAAAAAkgcAAAAAAAABAAAAQZIHAAAAAAAAkgcAAAAAAAABAAAAUJIHAAAAAAAAkgcAAAAAAAABAAAASQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkgcAAAAAAACSBwAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "Scene.h"
					},
					"BwAAAJMHAAAAAAAAlAcAAAAAAAAAAAAAlAcAAAAAAACVBwAAAAAAAAAAAACVBwAAAAAAAJYHAAAAAAAAAAAAAJYHAAAAAAAAlwcAAAAAAAAAAAAAlwcAAAAAAACYBwAAAAAAAAAAAACYBwAAAAAAAJkHAAAAAAAAAAAAAJkHAAAAAAAAmgcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkwcAAAAAAACTBwAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					13,
					"right_delete",
					null,
					"DQAAAJoHAAAAAAAAmgcAAAAAAAABAAAARJoHAAAAAAAAmgcAAAAAAAABAAAAZZoHAAAAAAAAmgcAAAAAAAABAAAAdpoHAAAAAAAAmgcAAAAAAAABAAAAaZoHAAAAAAAAmgcAAAAAAAABAAAAY5oHAAAAAAAAmgcAAAAAAAABAAAAZZoHAAAAAAAAmgcAAAAAAAABAAAATZoHAAAAAAAAmgcAAAAAAAABAAAAYZoHAAAAAAAAmgcAAAAAAAABAAAAbpoHAAAAAAAAmgcAAAAAAAABAAAAYZoHAAAAAAAAmgcAAAAAAAABAAAAZ5oHAAAAAAAAmgcAAAAAAAABAAAAZZoHAAAAAAAAmgcAAAAAAAABAAAAcg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmgcAAAAAAACaBwAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					2,
					"right_delete",
					null,
					"AgAAAJoHAAAAAAAAmgcAAAAAAAABAAAALpoHAAAAAAAAmgcAAAAAAAABAAAAaA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmgcAAAAAAACaBwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraphExe.cpp",
			"settings":
			{
				"buffer_size": 4110,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKDescriptorData.h",
			"settings":
			{
				"buffer_size": 2552,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAAO0HAAAAAAAA7gcAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtBwAAAAAAAO0HAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"right_delete",
					null,
					"AQAAAO4HAAAAAAAA7gcAAAAAAAABAAAAZA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuBwAAAAAAAO4HAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "D"
					},
					"AQAAAO4HAAAAAAAA7wcAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuBwAAAAAAAO4HAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"paste",
					null,
					"AgAAAF0IAAAAAAAAZAgAAAAAAAAAAAAAZAgAAAAAAABkCAAAAAAAAAYAAABkZXZpY2U",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABdCAAAAAAAAGMIAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/Falcor/Core/Program/ProgramVars.cpp",
			"settings":
			{
				"buffer_size": 14498,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "src/Falcor/Raytracing/RtProgram/RtProgram.cpp",
			"settings":
			{
				"buffer_size": 6321,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"left_delete",
					null,
					"AQAAAJYHAAAAAAAAlgcAAAAAAAABAAAANg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcHAAAAAAAAlwcAAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "5"
					},
					"AQAAAJYHAAAAAAAAlwcAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJYHAAAAAAAAlgcAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIgNAAAAAAAAiQ0AAAAAAAAAAAAAiQ0AAAAAAACNDQAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIgNAAAAAAAAiA0AAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"paste",
					null,
					"AQAAAI0NAAAAAAAAtA0AAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI0NAAAAAAAAjQ0AAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALQNAAAAAAAAtQ0AAAAAAAAAAAAAtQ0AAAAAAAC5DQAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALQNAAAAAAAAtA0AAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					4,
					"right_delete",
					null,
					"BQAAAPQNAAAAAAAA9A0AAAAAAAABAAAAILUNAAAAAAAAtQ0AAAAAAAAEAAAAICAgIPANAAAAAAAA8A0AAAAAAAABAAAAIPANAAAAAAAA8A0AAAAAAAABAAAAIPANAAAAAAAA8A0AAAAAAAABAAAAIA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPQNAAAAAAAA9A0AAAAAAAAAAAAAAABCQA"
				],
				[
					16,
					1,
					"paste",
					null,
					"AQAAAAIHAAAAAAAAKAcAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAIHAAAAAAAAAgcAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "src/Falcor/Raytracing/RtStateObject.cpp",
			"settings":
			{
				"buffer_size": 11788,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "pIss"
					},
					"BQAAALoMAAAAAAAAuwwAAAAAAAAAAAAAuwwAAAAAAAC7DAAAAAAAABEAAABwSW50ZXJzZWN0aW9uQmxvYrsMAAAAAAAAvAwAAAAAAAAAAAAAvAwAAAAAAAC9DAAAAAAAAAAAAAC9DAAAAAAAAL4MAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALoMAAAAAAAAywwAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "Blob"
					},
					"BAAAAL4MAAAAAAAAvwwAAAAAAAAAAAAAvwwAAAAAAADADAAAAAAAAAAAAADADAAAAAAAAMEMAAAAAAAAAAAAAMEMAAAAAAAAwgwAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL4MAAAAAAAAvgwAAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "pIss"
					},
					"BQAAAJoLAAAAAAAAmwsAAAAAAAAAAAAAmwsAAAAAAACbCwAAAAAAAA0AAABwSW50ZXJzZWN0aW9umwsAAAAAAACcCwAAAAAAAAAAAACcCwAAAAAAAJ0LAAAAAAAAAAAAAJ0LAAAAAAAAngsAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJoLAAAAAAAApwsAAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					1,
					"paste",
					null,
					"AgAAALwMAAAAAAAAwAwAAAAAAAAAAAAAwAwAAAAAAADADAAAAAAAAA0AAABwSW50ZXJzZWN0aW9u",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALwMAAAAAAAAyQwAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"paste",
					null,
					"AgAAAMMMAAAAAAAAxwwAAAAAAAAAAAAAxwwAAAAAAADHDAAAAAAAAA0AAABwSW50ZXJzZWN0aW9u",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMMMAAAAAAAA0AwAAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "ss"
					},
					"AwAAAB4OAAAAAAAAHw4AAAAAAAAAAAAAHw4AAAAAAAAfDgAAAAAAAAsAAABudGVyc2VjdGlvbh8OAAAAAAAAIA4AAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB4OAAAAAAAAKQ4AAAAAAAAAAAAAAADwvw"
				],
				[
					40,
					1,
					"paste",
					null,
					"AgAAACkOAAAAAAAALQ4AAAAAAAAAAAAALQ4AAAAAAAAtDgAAAAAAAA0AAABwSW50ZXJzZWN0aW9u",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACkOAAAAAAAANg4AAAAAAAAAAAAAAADwvw"
				],
				[
					44,
					1,
					"paste",
					null,
					"AgAAAEEOAAAAAAAARQ4AAAAAAAAAAAAARQ4AAAAAAABFDgAAAAAAAA0AAABwSW50ZXJzZWN0aW9u",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEEOAAAAAAAATg4AAAAAAAAAAAAAAADwvw"
				],
				[
					57,
					1,
					"paste",
					null,
					"AgAAAJEPAAAAAAAAmQ8AAAAAAAAAAAAAmQ8AAAAAAACZDwAAAAAAABEAAABwSW50ZXJzZWN0aW9uQmxvYg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJEPAAAAAAAAog8AAAAAAAAAAAAAAADwvw"
				],
				[
					65,
					1,
					"paste",
					null,
					"AgAAAJsPAAAAAAAApA8AAAAAAAAAAAAApA8AAAAAAACkDwAAAAAAABIAAABpbnRlcnNlY3Rpb25FeHBvcnQ",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJsPAAAAAAAArQ8AAAAAAAAAAAAAAADwvw"
				],
				[
					69,
					1,
					"paste",
					null,
					"AgAAAM4PAAAAAAAA1w8AAAAAAAAAAAAA1w8AAAAAAADXDwAAAAAAABIAAABpbnRlcnNlY3Rpb25FeHBvcnQ",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM4PAAAAAAAA4A8AAAAAAAAAAAAAAADwvw"
				],
				[
					73,
					1,
					"paste",
					null,
					"AgAAAB4QAAAAAAAAJxAAAAAAAAAAAAAAJxAAAAAAAAAnEAAAAAAAABIAAABpbnRlcnNlY3Rpb25FeHBvcnQ",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB4QAAAAAAAAMBAAAAAAAAAAAAAAAADwvw"
				],
				[
					77,
					1,
					"paste",
					null,
					"AgAAALAQAAAAAAAAuRAAAAAAAAAAAAAAuRAAAAAAAAC5EAAAAAAAABIAAABpbnRlcnNlY3Rpb25FeHBvcnQ",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALAQAAAAAAAAwhAAAAAAAAAAAAAAAADwvw"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAP0XAAAAAAAA/hcAAAAAAAAAAAAA/hcAAAAAAAACGAAAAAAAAAAAAAACGAAAAAAAAAMYAAAAAAAAAAAAAAMYAAAAAAAABxgAAAAAAAAAAAAA/hcAAAAAAAD+FwAAAAAAAAQAAAAgICAg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP0XAAAAAAAA/RcAAAAAAAAAAAAAAADwvw"
				],
				[
					81,
					1,
					"paste",
					null,
					"AQAAAAMYAAAAAAAAAxsAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAMYAAAAAAAAAxgAAAAAAAAAAAAAAADwvw"
				],
				[
					93,
					1,
					"unindent",
					null,
					"AgAAAAYYAAAAAAAABhgAAAAAAAAEAAAAICAgIC4YAAAAAAAALhgAAAAAAAAEAAAAICAgIA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADwYAAAAAAAABhgAAAAAAAAAAAAAAADwvw"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGEHAAAAAAAAYgcAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGEHAAAAAAAAYQcAAAAAAAAAAAAAAADwvw"
				],
				[
					98,
					1,
					"paste",
					null,
					"AQAAAGIHAAAAAAAAjgcAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGIHAAAAAAAAYgcAAAAAAAAAAAAAAADwvw"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAI4HAAAAAAAAjwcAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI4HAAAAAAAAjgcAAAAAAAAAAAAAAADwvw"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGIHAAAAAAAAYwcAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGIHAAAAAAAAYgcAAAAAAAAAAAAAAAAAAA"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAC0YAAAAAAAALhgAAAAAAAAAAAAALhgAAAAAAAAvGAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC0YAAAAAAAALRgAAAAAAAAAAAAAAADwvw"
				],
				[
					109,
					1,
					"paste",
					null,
					"AQAAAC4YAAAAAAAAgiEAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC4YAAAAAAAALhgAAAAAAAAAAAAAAAAAAA"
				],
				[
					112,
					1,
					"unindent",
					null,
					"KAAAAC4YAAAAAAAALhgAAAAAAAAEAAAAICAgIDUYAAAAAAAANRgAAAAAAAAEAAAAICAgIF0YAAAAAAAAXRgAAAAAAAAEAAAAICAgIGQYAAAAAAAAZBgAAAAAAAAEAAAAICAgIKQYAAAAAAAApBgAAAAAAAAEAAAAICAgIMAYAAAAAAAAwBgAAAAAAAAEAAAAICAgIMYYAAAAAAAAxhgAAAAAAAAEAAAAICAgIEgZAAAAAAAASBkAAAAAAAAEAAAAICAgIIQZAAAAAAAAhBkAAAAAAAAEAAAAICAgINwZAAAAAAAA3BkAAAAAAAAEAAAAICAgICUaAAAAAAAAJRoAAAAAAAAEAAAAICAgIHkaAAAAAAAAeRoAAAAAAAAEAAAAICAgILYaAAAAAAAAthoAAAAAAAAEAAAAICAgIO8aAAAAAAAA7xoAAAAAAAAEAAAAICAgIC4bAAAAAAAALhsAAAAAAAAEAAAAICAgIFsbAAAAAAAAWxsAAAAAAAAEAAAAICAgIGIbAAAAAAAAYhsAAAAAAAAEAAAAICAgIHQbAAAAAAAAdBsAAAAAAAAEAAAAICAgIHobAAAAAAAAehsAAAAAAAAEAAAAICAgIPkbAAAAAAAA+RsAAAAAAAAEAAAAICAgIDUcAAAAAAAANRwAAAAAAAAEAAAAICAgII0cAAAAAAAAjRwAAAAAAAAEAAAAICAgINYcAAAAAAAA1hwAAAAAAAAEAAAAICAgICodAAAAAAAAKh0AAAAAAAAEAAAAICAgIGcdAAAAAAAAZx0AAAAAAAAEAAAAICAgIKAdAAAAAAAAoB0AAAAAAAAEAAAAICAgIN8dAAAAAAAA3x0AAAAAAAAEAAAAICAgIAweAAAAAAAADB4AAAAAAAAEAAAAICAgIBMeAAAAAAAAEx4AAAAAAAAEAAAAICAgICweAAAAAAAALB4AAAAAAAAEAAAAICAgIDIeAAAAAAAAMh4AAAAAAAAEAAAAICAgIL4eAAAAAAAAvh4AAAAAAAAEAAAAICAgIPoeAAAAAAAA+h4AAAAAAAAEAAAAICAgIFIfAAAAAAAAUh8AAAAAAAAEAAAAICAgIKcfAAAAAAAApx8AAAAAAAAEAAAAICAgIOEfAAAAAAAA4R8AAAAAAAAEAAAAICAgIDggAAAAAAAAOCAAAAAAAAAEAAAAICAgIHEgAAAAAAAAcSAAAAAAAAAEAAAAICAgILAgAAAAAAAAsCAAAAAAAAAEAAAAICAgIN0gAAAAAAAA3SAAAAAAAAAEAAAAICAgIA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIIhAAAAAAAALhgAAAAAAAAAAAAAAADwvw"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAC0YAAAAAAAALhgAAAAAAAAAAAAALhgAAAAAAAAvGAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC0YAAAAAAAALRgAAAAAAAAAAAAAAADwvw"
				],
				[
					117,
					1,
					"paste",
					null,
					"AQAAAC4YAAAAAAAAJhsAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC4YAAAAAAAALhgAAAAAAAAAAAAAAAAAAA"
				],
				[
					120,
					1,
					"unindent",
					null,
					"CgAAAC4YAAAAAAAALhgAAAAAAAAEAAAAICAgIGsYAAAAAAAAaxgAAAAAAAAEAAAAICAgIMIYAAAAAAAAwhgAAAAAAAAEAAAAICAgIBMZAAAAAAAAExkAAAAAAAAEAAAAICAgIEoZAAAAAAAAShkAAAAAAAAEAAAAICAgILwZAAAAAAAAvBkAAAAAAAAEAAAAICAgIO8ZAAAAAAAA7xkAAAAAAAAEAAAAICAgIDsaAAAAAAAAOxoAAAAAAAAEAAAAICAgIGQaAAAAAAAAZBoAAAAAAAAEAAAAICAgIJ0aAAAAAAAAnRoAAAAAAAAEAAAAICAgIA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACYbAAAAAAAALhgAAAAAAAAAAAAAAADwvw"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACwYAAAAAAAALRgAAAAAAAAAAAAALRgAAAAAAAAxGAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACwYAAAAAAAALBgAAAAAAAAAAAAAAADwvw"
				],
				[
					124,
					1,
					"left_delete",
					null,
					"AQAAAC0YAAAAAAAALRgAAAAAAAAEAAAAICAgIA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADEYAAAAAAAAMRgAAAAAAAAAAAAAAADwvw"
				],
				[
					125,
					1,
					"paste",
					null,
					"AQAAAC0YAAAAAAAA7BwAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC0YAAAAAAAALRgAAAAAAAAAAAAAAADwvw"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAC0YAAAAAAAAMRgAAAAAAAAAAAAAMRgAAAAAAAA1GAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC0YAAAAAAAALRgAAAAAAAAAAAAAAADwvw"
				],
				[
					131,
					1,
					"left_delete",
					null,
					"AQAAAO0cAAAAAAAA7RwAAAAAAAAEAAAAICAgIA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPEcAAAAAAAA8RwAAAAAAAAAAAAAAADwvw"
				],
				[
					134,
					1,
					"unindent",
					null,
					"FAAAAC0YAAAAAAAALRgAAAAAAAAEAAAAICAgIHQYAAAAAAAAdBgAAAAAAAAEAAAAICAgIKgYAAAAAAAAqBgAAAAAAAAEAAAAICAgIA8ZAAAAAAAADxkAAAAAAAAEAAAAICAgIEsZAAAAAAAASxkAAAAAAAAEAAAAICAgIKAZAAAAAAAAoBkAAAAAAAAEAAAAICAgIN0ZAAAAAAAA3RkAAAAAAAAEAAAAICAgIAcaAAAAAAAABxoAAAAAAAAEAAAAICAgIFcaAAAAAAAAVxoAAAAAAAAEAAAAICAgIIkaAAAAAAAAiRoAAAAAAAAEAAAAICAgINQaAAAAAAAA1BoAAAAAAAAEAAAAICAgIA0bAAAAAAAADRsAAAAAAAAEAAAAICAgIDMbAAAAAAAAMxsAAAAAAAAEAAAAICAgIIAbAAAAAAAAgBsAAAAAAAAEAAAAICAgIK4bAAAAAAAArhsAAAAAAAAEAAAAICAgIPUbAAAAAAAA9RsAAAAAAAAEAAAAICAgIC4cAAAAAAAALhwAAAAAAAAEAAAAICAgIFocAAAAAAAAWhwAAAAAAAAEAAAAICAgIHwcAAAAAAAAfBwAAAAAAAAEAAAAICAgIJkcAAAAAAAAmRwAAAAAAAAEAAAAICAgIA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPAcAAAAAAAALRgAAAAAAAAAAAAAAADwvw"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAC0YAAAAAAAALhgAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC0YAAAAAAAALRgAAAAAAAAAAAAAAAAAAA"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": "pD"
					},
					"AwAAAO8dAAAAAAAA8B0AAAAAAAAAAAAA8B0AAAAAAADwHQAAAAAAAAYAAABkZXZpY2XwHQAAAAAAAPEdAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO8dAAAAAAAA9R0AAAAAAAAAAAAAAADwvw"
				],
				[
					146,
					1,
					"insert_completion",
					{
						"completion": "pDevice",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "pDevice"
					},
					"AgAAAO8dAAAAAAAA7x0AAAAAAAACAAAAcETvHQAAAAAAAPYdAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPEdAAAAAAAA8R0AAAAAAAAAAAAAAADwvw"
				],
				[
					147,
					1,
					"insert",
					{
						"characters": "->"
					},
					"AgAAAPYdAAAAAAAA9x0AAAAAAAAAAAAA9x0AAAAAAAD4HQAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPYdAAAAAAAA9h0AAAAAAAAAAAAAAADwvw"
				],
				[
					148,
					1,
					"insert_completion",
					{
						"completion": "getApiHandle",
						"format": "text",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "getApiHandle"
					},
					"AQAAAPgdAAAAAAAABB4AAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPgdAAAAAAAA+B0AAAAAAAAAAAAAAADwvw"
				],
				[
					149,
					1,
					"insert",
					{
						"characters": "(_"
					},
					"AgAAAAQeAAAAAAAABR4AAAAAAAAAAAAABR4AAAAAAAAGHgAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAQeAAAAAAAABB4AAAAAAAAAAAAAAADwvw"
				],
				[
					150,
					1,
					"left_delete",
					null,
					"AQAAAAUeAAAAAAAABR4AAAAAAAABAAAAXw",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAYeAAAAAAAABh4AAAAAAAAAAAAAAADwvw"
				],
				[
					151,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAAUeAAAAAAAABh4AAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAUeAAAAAAAABR4AAAAAAAAAAAAAAADwvw"
				],
				[
					157,
					1,
					"paste",
					null,
					"AQAAAFQfAAAAAAAAZB8AAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFQfAAAAAAAAVB8AAAAAAAAAAAAAAADwvw"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAEkrAAAAAAAASisAAAAAAAAAAAAASisAAAAAAABLKwAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEkrAAAAAAAASSsAAAAAAAAAAAAAAAAAAA"
				],
				[
					168,
					1,
					"reindent",
					null,
					"AQAAAEorAAAAAAAAUisAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEorAAAAAAAASisAAAAAAAAAAAAAAAAAAA"
				],
				[
					169,
					1,
					"left_delete",
					null,
					"AQAAAE4rAAAAAAAATisAAAAAAAAEAAAAICAgIA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFIrAAAAAAAAUisAAAAAAAAAAAAAAADwvw"
				],
				[
					170,
					1,
					"paste",
					null,
					"AQAAAE4rAAAAAAAAgSsAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE4rAAAAAAAATisAAAAAAAAAAAAAAADwvw"
				],
				[
					173,
					1,
					"unindent",
					null,
					"CQAAAIIoAAAAAAAAgigAAAAAAAAEAAAAICAgIMAoAAAAAAAAwCgAAAAAAAAEAAAAICAgIBkpAAAAAAAAGSkAAAAAAAAEAAAAICAgIGspAAAAAAAAaykAAAAAAAAEAAAAICAgIKMpAAAAAAAAoykAAAAAAAAEAAAAICAgIPUpAAAAAAAA9SkAAAAAAAAEAAAAICAgIC0qAAAAAAAALSoAAAAAAAAEAAAAICAgIGgqAAAAAAAAaCoAAAAAAAAEAAAAICAgIJoqAAAAAAAAmioAAAAAAAAEAAAAICAgIA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEgrAAAAAAAAgigAAAAAAAAAAAAAAADwvw"
				],
				[
					176,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAIIoAAAAAAAAgygAAAAAAAAAAAAAgygAAAAAAACEKAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIIoAAAAAAAAgigAAAAAAAAAAAAAAAAAAA"
				],
				[
					178,
					1,
					"reindent",
					null,
					"AQAAAIIoAAAAAAAAhigAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIIoAAAAAAAAgigAAAAAAAAAAAAAAAAAAA"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": "VK"
					},
					"AgAAAIYoAAAAAAAAhygAAAAAAAAAAAAAhygAAAAAAACIKAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIYoAAAAAAAAhigAAAAAAAAAAAAAAADwvw"
				],
				[
					182,
					1,
					"left_delete",
					null,
					"AQAAAIcoAAAAAAAAhygAAAAAAAABAAAASw",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIgoAAAAAAAAiCgAAAAAAAAAAAAAAADwvw"
				],
				[
					183,
					1,
					"insert",
					{
						"characters": "kPi"
					},
					"AwAAAIcoAAAAAAAAiCgAAAAAAAAAAAAAiCgAAAAAAACJKAAAAAAAAAAAAACJKAAAAAAAAIooAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIcoAAAAAAAAhygAAAAAAAAAAAAAAADwvw"
				],
				[
					184,
					1,
					"insert_completion",
					{
						"completion": "VkPipeline",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "VkPipeline"
					},
					"AgAAAIYoAAAAAAAAhigAAAAAAAAEAAAAVmtQaYYoAAAAAAAAkCgAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIooAAAAAAAAiigAAAAAAAAAAAAAAADwvw"
				],
				[
					185,
					1,
					"insert",
					{
						"characters": " pipe"
					},
					"BQAAAJAoAAAAAAAAkSgAAAAAAAAAAAAAkSgAAAAAAACSKAAAAAAAAAAAAACSKAAAAAAAAJMoAAAAAAAAAAAAAJMoAAAAAAAAlCgAAAAAAAAAAAAAlCgAAAAAAACVKAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJAoAAAAAAAAkCgAAAAAAAAAAAAAAADwvw"
				],
				[
					186,
					1,
					"insert_completion",
					{
						"completion": "pipeline",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "pipeline"
					},
					"AgAAAJEoAAAAAAAAkSgAAAAAAAAEAAAAcGlwZZEoAAAAAAAAmSgAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJUoAAAAAAAAlSgAAAAAAAAAAAAAAADwvw"
				],
				[
					187,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAJkoAAAAAAAAmigAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJkoAAAAAAAAmSgAAAAAAAAAAAAAAADwvw"
				],
				[
					188,
					1,
					"left_delete",
					null,
					"AQAAAJkoAAAAAAAAmSgAAAAAAAABAAAAbA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJooAAAAAAAAmigAAAAAAAAAAAAAAADwvw"
				],
				[
					189,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAJkoAAAAAAAAmigAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJkoAAAAAAAAmSgAAAAAAAAAAAAAAADwvw"
				],
				[
					190,
					1,
					"left_delete",
					null,
					"AQAAAJkoAAAAAAAAmSgAAAAAAAABAAAAbA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJooAAAAAAAAmigAAAAAAAAAAAAAAADwvw"
				],
				[
					191,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJkoAAAAAAAAmigAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJkoAAAAAAAAmSgAAAAAAAAAAAAAAADwvw"
				],
				[
					198,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAUJAAAAAAAABgkAAAAAAAAAAAAABgkAAAAAAAAKCQAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAUJAAAAAAAABQkAAAAAAAAAAAAAAADwvw"
				],
				[
					199,
					1,
					"paste",
					null,
					"AQAAAAoJAAAAAAAALwkAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAoJAAAAAAAACgkAAAAAAAAAAAAAAADwvw"
				],
				[
					200,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAC8JAAAAAAAAMAkAAAAAAAAAAAAAMAkAAAAAAAA0CQAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC8JAAAAAAAALwkAAAAAAAAAAAAAAADwvw"
				],
				[
					206,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJAHAAAAAAAAkQcAAAAAAAAAAAAAMQkAAAAAAAAxCQAAAAAAAAQAAAAgICAg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJAHAAAAAAAAkAcAAAAAAAAAAAAAAADwvw"
				],
				[
					208,
					1,
					"paste",
					null,
					"AQAAAJAHAAAAAAAAvAcAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJAHAAAAAAAAkAcAAAAAAAAAAAAAAAAAAA"
				],
				[
					211,
					1,
					"insert",
					{
						"characters": "Utils"
					},
					"BQAAAKEHAAAAAAAAogcAAAAAAAAAAAAAogcAAAAAAACjBwAAAAAAAAAAAACjBwAAAAAAAKQHAAAAAAAAAAAAAKQHAAAAAAAApQcAAAAAAAAAAAAApQcAAAAAAACmBwAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKEHAAAAAAAAoQcAAAAAAAAAAAAAAADwvw"
				],
				[
					212,
					4,
					"right_delete",
					null,
					"BAAAAKYHAAAAAAAApgcAAAAAAAABAAAAQ6YHAAAAAAAApgcAAAAAAAABAAAAb6YHAAAAAAAApgcAAAAAAAABAAAAcqYHAAAAAAAApgcAAAAAAAABAAAAZQ",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKYHAAAAAAAApgcAAAAAAAAAAAAAAADwvw"
				],
				[
					214,
					1,
					"insert",
					{
						"characters": "Debug"
					},
					"BQAAAKcHAAAAAAAAqAcAAAAAAAAAAAAAqAcAAAAAAACpBwAAAAAAAAAAAACpBwAAAAAAAKoHAAAAAAAAAAAAAKoHAAAAAAAAqwcAAAAAAAAAAAAAqwcAAAAAAACsBwAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKcHAAAAAAAApwcAAAAAAAAAAAAAAADwvw"
				],
				[
					215,
					10,
					"right_delete",
					null,
					"CgAAAKwHAAAAAAAArAcAAAAAAAABAAAAQawHAAAAAAAArAcAAAAAAAABAAAAUKwHAAAAAAAArAcAAAAAAAABAAAASawHAAAAAAAArAcAAAAAAAABAAAAL6wHAAAAAAAArAcAAAAAAAABAAAAVqwHAAAAAAAArAcAAAAAAAABAAAAdawHAAAAAAAArAcAAAAAAAABAAAAbKwHAAAAAAAArAcAAAAAAAABAAAAa6wHAAAAAAAArAcAAAAAAAABAAAAYawHAAAAAAAArAcAAAAAAAABAAAAbg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKwHAAAAAAAArAcAAAAAAAAAAAAAAADwvw"
				],
				[
					217,
					1,
					"insert",
					{
						"characters": "debug"
					},
					"BQAAAK0HAAAAAAAArgcAAAAAAAAAAAAArgcAAAAAAACvBwAAAAAAAAAAAACvBwAAAAAAALAHAAAAAAAAAAAAALAHAAAAAAAAsQcAAAAAAAAAAAAAsQcAAAAAAACyBwAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0HAAAAAAAArQcAAAAAAAAAAAAAAADwvw"
				],
				[
					218,
					8,
					"right_delete",
					null,
					"CAAAALIHAAAAAAAAsgcAAAAAAAABAAAARrIHAAAAAAAAsgcAAAAAAAABAAAAYbIHAAAAAAAAsgcAAAAAAAABAAAAbLIHAAAAAAAAsgcAAAAAAAABAAAAY7IHAAAAAAAAsgcAAAAAAAABAAAAb7IHAAAAAAAAsgcAAAAAAAABAAAAcrIHAAAAAAAAsgcAAAAAAAABAAAAVrIHAAAAAAAAsgcAAAAAAAABAAAASw",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALIHAAAAAAAAsgcAAAAAAAAAAAAAAADwvw"
				],
				[
					225,
					1,
					"paste",
					null,
					"AgAAADkJAAAAAAAATgkAAAAAAAAAAAAATgkAAAAAAABOCQAAAAAAABkAAABjcmVhdGVEZXNjcmlwdG9yU2V0TGF5b3V0",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADkJAAAAAAAAUgkAAAAAAAAAAAAAAADwvw"
				],
				[
					228,
					1,
					"insert",
					{
						"characters": "/*"
					},
					"AgAAAHoYAAAAAAAAexgAAAAAAAAAAAAAexgAAAAAAAB8GAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHoYAAAAAAAAehgAAAAAAAAAAAAAAADwvw"
				],
				[
					231,
					1,
					"insert",
					{
						"characters": "*/"
					},
					"AgAAAMcrAAAAAAAAyCsAAAAAAAAAAAAAyCsAAAAAAADJKwAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMcrAAAAAAAAxysAAAAAAAAAAAAAAADwvw"
				],
				[
					232,
					2,
					"left_delete",
					null,
					"AgAAAMgrAAAAAAAAyCsAAAAAAAABAAAAL8crAAAAAAAAxysAAAAAAAABAAAAKg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMkrAAAAAAAAySsAAAAAAAAAAAAAAADwvw"
				],
				[
					235,
					2,
					"right_delete",
					null,
					"AgAAAJ8oAAAAAAAAnygAAAAAAAABAAAAL58oAAAAAAAAnygAAAAAAAABAAAAKg",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ8oAAAAAAAAnygAAAAAAAAAAAAAAADwvw"
				],
				[
					238,
					1,
					"right_delete",
					null,
					"AQAAAMwoAAAAAAAAzCgAAAAAAAAHAAAAKi8KICAgIA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMwoAAAAAAAA0ygAAAAAAAAAAAAAAABCQA"
				],
				[
					240,
					4,
					"right_delete",
					null,
					"BAAAAKQoAAAAAAAApCgAAAAAAAABAAAAIKQoAAAAAAAApCgAAAAAAAABAAAAIKQoAAAAAAAApCgAAAAAAAABAAAAIKQoAAAAAAAApCgAAAAAAAABAAAAIA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKQoAAAAAAAApCgAAAAAAAAAAAAAAABCQA"
				],
				[
					241,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAKQoAAAAAAAApSgAAAAAAAAAAAAApSgAAAAAAACmKAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKQoAAAAAAAApCgAAAAAAAAAAAAAAADwvw"
				],
				[
					242,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKYoAAAAAAAApygAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKYoAAAAAAAApigAAAAAAAAAAAAAAADwvw"
				],
				[
					247,
					10,
					"right_delete",
					null,
					"CgAAAOkfAAAAAAAA6R8AAAAAAAABAAAAL+kfAAAAAAAA6R8AAAAAAAABAAAAKukfAAAAAAAA6R8AAAAAAAABAAAACukfAAAAAAAA6R8AAAAAAAABAAAAIOkfAAAAAAAA6R8AAAAAAAABAAAAIOkfAAAAAAAA6R8AAAAAAAABAAAAIOkfAAAAAAAA6R8AAAAAAAABAAAAIOkfAAAAAAAA6R8AAAAAAAABAAAAIOkfAAAAAAAA6R8AAAAAAAABAAAAIOkfAAAAAAAA6R8AAAAAAAABAAAAIA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOkfAAAAAAAA6R8AAAAAAAAAAAAAAADwvw"
				],
				[
					248,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAOkfAAAAAAAA6h8AAAAAAAAAAAAA6h8AAAAAAADrHwAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOkfAAAAAAAA6R8AAAAAAAAAAAAAAADwvw"
				],
				[
					253,
					1,
					"right_delete",
					null,
					"AQAAABAgAAAAAAAAECAAAAAAAAAHAAAAKi8KICAgIA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABAgAAAAAAAAFyAAAAAAAAAAAAAAAABCQA"
				],
				[
					256,
					1,
					"insert",
					{
						"characters": "*/"
					},
					"AgAAAK4rAAAAAAAArysAAAAAAAAAAAAArysAAAAAAACwKwAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK4rAAAAAAAArisAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "src/Falcor/Core/Program/ProgramVars.h",
			"settings":
			{
				"buffer_size": 6798,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 320.0,
		"history":
		[
			"cd /home/max/dev"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/mnt/misc_hdd/dev/Lava",
		"/mnt/misc_hdd/dev/Lava/deps",
		"/mnt/misc_hdd/dev/Lava/deps/include",
		"/mnt/misc_hdd/dev/Lava/deps/include/VulkanMemoryAllocator",
		"/mnt/misc_hdd/dev/Lava/src",
		"/mnt/misc_hdd/dev/Lava/src/Falcor",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/BufferTypes",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/Program",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Lights",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/RenderPasses",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Animation",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Image",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Textures",
		"/mnt/misc_hdd/dev/Lava/src/lava_cmd",
		"/mnt/misc_hdd/dev/Lava/src/lava_lib",
		"/mnt/misc_hdd/dev/Lava/src/nvpro_core",
		"/mnt/misc_hdd/dev/Lava/src/nvpro_core/nvvk",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/AccumulatePass",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/Antialiasing",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/DepthPass",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/ForwardLightingPass",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/MinimalPathTracer",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/SkyBox",
		"/mnt/misc_hdd/dev/Lava/third_party",
		"/mnt/misc_hdd/dev/Lava/third_party/external",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/examples",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/examples/ray-tracing",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/examples/ray-tracing-pipeline"
	],
	"file_history":
	[
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/CopyContext.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Raytracing/RtProgramVarsHelper.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan/VKCopyContext.cpp",
		"/mnt/misc_hdd/dev/Lava/falcor.sublime-project",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan/VkSmartHandle.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/VAO.cpp",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/ForwardLightingPass/ForwardLightingPass.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/DepthPass/DepthPass.cpp",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/GBuffer/GBufferRaster.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Device.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/ResourceViews.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/BufferTypes/ParameterBlock.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/SceneRaytrace.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/SampleGenerators/HaltonSamplePattern.cpp",
		"/mnt/misc_hdd/dev/Lava/src/lava_cmd/bin/lava_app_init.sh.in",
		"/mnt/misc_hdd/dev/Lava/cmake/modules/Findassimp.cmake",
		"/mnt/misc_hdd/dev/Lava/cmake/modules/FindLZ4.cmake",
		"/mnt/misc_hdd/dev/Lava/third_party/CMakeLists.txt",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/CMakeLists.txt",
		"/mnt/misc_hdd/dev/Lava/CMakeLists.txt",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/Platform/ProgressBar.cpp",
		"/mnt/misc_hdd/dev/Lava/third_party/external/lz4_stream/src/LZ4_Stream/include/lz4_stream.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/Program/GraphicsProgram.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Lights/EmissivePowerSampler.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/MegakernelPathTracer/PathTracer.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Math/MathHelpers.slang",
		"/opt/houdini18.5/houdini/OPmenu.xml",
		"/mnt/misc_hdd/dev/Lava/src/houdini/python2.7libs/slangviewer/__init__.py",
		"/mnt/misc_hdd/dev/Lava/src/houdini/python2.7libs/slangviewer/window.py",
		"/mnt/misc_hdd/dev/Lava/src/houdini/python2.7libs/slangvopadapters/code/base.py",
		"/opt/houdini18.5/houdini/config/Hotkeys/h.pane.wsheet.opmenu",
		"/opt/houdini18.5/houdini/python2.7libs/hou.py",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/AccumulatePass/Accumulate.cs.slang",
		"/mnt/misc_hdd/dev/Lava/third_party/slang/docs/stdlib-doc.md",
		"/mnt/misc_hdd/dev/Lava/third_party/slang/external/spirv-tools-generated/core.insts-unified1.inc",
		"/mnt/misc_hdd/dev/Lava/src/lava_lib/display.cpp",
		"/mnt/misc_hdd/dev/Lava/src/lava_lib/display.h",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/Utils/GaussianBlur/GaussianBlur.ps.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/SVGFPass/SVGFCommon.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/RenderPasses/Shared/PathTracer/PathTracerParams.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/RenderPasses/Shared/PathTracer/PathTracerHelpers.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/RenderPasses/Shared/PathTracer/PixelStats.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/RenderPasses/Shared/PathTracer/PathTracer.cpp",
		"/mnt/misc_hdd/dev/Lava/src/houdini/soho/python2.7/LSDmisc.py",
		"/opt/houdini18.5/houdini/soho/python2.7/IFDarchive.py",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Importers/SceneImporter.cpp",
		"/mnt/misc_hdd/dev/Lava/third_party/slang/tests/cross-compile/texture-load.slang.expected",
		"/home/max/Desktop/envlight.ifd",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Material/BxDFConfig.slangh",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Math/Common.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Math/MathConstants.slangh",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/PixelInspectorPass/PixelInspector.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Sampling/SampleGeneratorInterface.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Sampling/UniformSampleGenerator.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Sampling/TinyUniformSampleGenerator.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Sampling/SampleGenerator.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/RenderPasses/Shared/PathTracer/PixelStats.cpp",
		"/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/check_bgeo/check_bgeo.cpp",
		"/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/bgeo/parser/compression.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/ParticleSystem/ParticleEmit.cs.slang",
		"/mnt/misc_hdd/dev/Lava/third_party/zlib/CMakeLists.txt",
		"/mnt/misc_hdd/dev/Lava/third_party/OpenEXR/CMakeLists.txt",
		"/mnt/misc_hdd/dev/Lava/third_party/OpenImageIO/src/cmake/checked_find_package.cmake",
		"/mnt/misc_hdd/dev/Lava/third_party/OpenImageIO/build/CMakeFiles/Makefile.cmake",
		"/mnt/misc_hdd/dev/Lava/third_party/slang/external/glslang/SPIRV/doc.cpp",
		"/mnt/misc_hdd/dev/Lava/third_party/slang/external/glslang/SPIRV/GlslangToSpv.cpp",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/DebugPasses/InvalidPixelDetectionPass/InvalidPixelDetection.ps.slang",
		"/mnt/misc_hdd/dev/Lava/third_party/slang/external/glslang/glslang/HLSL/hlslParseHelper.cpp",
		"/mnt/misc_hdd/dev/Lava/third_party/slang/tools/gfx/d3d12/render-d3d12.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Raytracing.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/WhittedRayTracer/WhittedRayTracer.rt.slang",
		"/mnt/misc_hdd/dev/Lava/third_party/slang/external/glslang/glslang/MachineIndependent/Initialize.cpp",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/MegakernelPathTracer/PathTracer.rt.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/ForwardLightingPass/ForwardLightingHelpers.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan/VKFormats.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan/VKDescriptorPool.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan/VKDescriptorSet.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Buffer.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Resource.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan/VKSmartHandle.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan/VKRootSignature.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Lights/Lights.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/BRDFCommon.slangh",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Lights/LightProbeIntegration.ps.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Lights/LightHelpers.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Lights/MeshLightData.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Lights/UpdateTriangleVertices.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Lights/LightBVHSamplerSharedDefinitions.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Lights/LightBVHSampler.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Lights/LightBVHTypes.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/SceneTypes.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Math/PackedFormats.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Math/Vector.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/HostDeviceShared.slangh",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Raster.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/TexturesResolvePass/TexturesResolveCommon.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/HBAO/HBAO.slangh",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/TexturesResolvePass/TexturesResolvePass.ps.slang",
		"/mnt/misc_hdd/dev/Lava/third_party/ri_display/d_houdini.cpp",
		"/mnt/misc_hdd/dev/Lava/src/lava_lib/houdini_display/d_houdini.cpp",
		"/home/max/dev/popentest/test.cpp",
		"/opt/houdini18.5/houdini/public/ri_display/d_houdini.C",
		"/mnt/misc_hdd/dev/Lava/third_party/ri_display/d_houdini.h",
		"/mnt/misc_hdd/dev/Lava/src/lava_lib/houdini_display/d_houdini.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Algorithm/BitonicSort.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Algorithm/ComputeParallelReduction.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/ShadingData.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Material/IBxDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/TextureSampler.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Helpers.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Scene.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Lights/EnvMap.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Lights/EnvMapData.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Camera/Camera.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Camera/CameraData.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Shading.slang.old",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Shading.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Lights/EnvMapLighting.slang",
		"/mnt/misc_hdd/dev/Lava/src/houdini/soho/python2.7/shader_adapters/functions.py",
		"/mnt/misc_hdd/dev/Lava/src/houdini/soho/python2.7/shader_adapters/utils.py",
		"/mnt/misc_hdd/dev/Lava/src/houdini/soho/python2.7/shader_adapters/adapters/vop_subnetconnector.py",
		"/mnt/misc_hdd/dev/Lava/src/houdini/soho/python2.7/shader_adapters/adapters/vop_suboutput.py",
		"/mnt/misc_hdd/dev/Lava/src/houdini/soho/python2.7/shader_adapters/adapters/vop_subinput.py",
		"/mnt/misc_hdd/dev/Lava/src/houdini/soho/python2.7/shader_adapters/code/base.py",
		"/mnt/misc_hdd/dev/Lava/third_party/OpenImageIO/src/field3d.imageio/field3doutput.cpp",
		"/mnt/misc_hdd/dev/Lava/src/houdini/soho/python2.7/shader_adapters/__init__.py",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/ForwardLightingPass/ForwardLightingPass.slang.old",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/BRDF.slang"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 125.0,
		"where_history":
		[
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/RenderPasses,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/slang,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/BufferTypes,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/slang,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/Program,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/slang,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/nvpro_core/nvvk,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/nvpro_core/nvvk,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/nvpro_core,<project filters>",
			"/mnt/misc_hdd/dev/Lava/deps,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/D3D12,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/tbb/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/boost/src/Boost,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/boost,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/D3D12,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/RenderPasses,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core,<project filters>",
			"/mnt/misc_hdd/dev/Lava,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/openvdb/src/OpenVDB,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/openvdb/src/OpenVDB/nanovdb,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/openvdb,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/tbb,<project filters>",
			"/mnt/misc_hdd/dev/Lava/cmake,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/oiio,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/c-blosc2,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/openvdb,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Vulkan,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/Program,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Falcor_4.4/Falcor/Source",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Falcor_4.4/Falcor/Source",
			"/mnt/misc_hdd/dev/Lava/third_party/openvdb,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/RenderPasses,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/slang,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/slang,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/openvdb/nanovdb/nanovdb,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene,<project filters>",
			"/mnt/misc_hdd/dev/Lava/src/Falcor",
			"/mnt/misc_hdd/dev/Lava/third_party/slang",
			"/mnt/misc_hdd/dev/Lava/src/Falcor",
			"/mnt/misc_hdd/dev/Lava/third_party/slang",
			"/home/max/dev/Lava/src/Falcor",
			"/opt/houdini18.5/houdini",
			"/home/max/dev/Lava/src/houdini/soho/python2.7/shader_adapters",
			"/home/max/dev/Lava/src/Falcor",
			"/home/max/dev/Lava/src/RenderPasses",
			"/home/max/dev/Lava/src/Falcor",
			"/home/max/dev/Lava/src/houdini/soho/python2.7/shader_adapters",
			"/home/max/dev/Lava/src/houdini/soho/python2.7",
			"/home/max/dev/Lava/src/Falcor/RenderGraph",
			"/home/max/dev/Lava/src/Falcor",
			"/home/max/dev/Lava/src/RenderPasses",
			"/home/max/dev/Lava/src/Falcor",
			"/home/max/dev/Lava/src/RenderPasses",
			"/home/max/dev/Lava/src/Falcor/Core/API/Vulkan",
			"/home/max/dev/Lava/src/Falcor",
			"/home/max/dev/Lava/third_party/slang",
			"/home/max/dev/Lava/src/Falcor",
			"/home/max/dev/Lava/third_party/slang",
			"/home/max/dev/Lava/src/Falcor",
			"/home/max/dev/Lava/src/RenderPasses",
			"/home/max/dev/Lava/src/Falcor",
			"/home/max/dev/Lava/third_party/slang",
			"/home/max/dev/Lava/src/Falcor",
			"/home/max/dev/Lava/third_party/slang",
			"/home/max/dev/Lava/src/Falcor",
			"/home/max/dev/Lava/src/RenderPasses"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"uniform",
			"TraceRayInline",
			"RayDesc",
			"traceVisibilityRay",
			"rayTypeCount",
			"RayDesc",
			"RayData",
			"prepareDescriptorSets",
			"DescriptorSet::Type::AccelerationStructureSrv",
			"TypeReflection",
			"ReflectionType",
			"ResourceType",
			"RaytracingAccelerationStructure",
			"bindResourcesIntoDescriptorSet",
			"VK_DESCRIPTOR_TYPE_STORAGE_IMAGE",
			"glm",
			"createTop",
			"~Scene",
			"[[vk::binding",
			"load_",
			"createBo",
			"m_cmdPool",
			"VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR",
			"COMPACT",
			"Scene.h",
			"NVVK_DEFAULT_STAGING_BLOCKSIZE",
			"VmaAllocator",
			"nvprintfLevel",
			"checkResult",
			"DeviceMemoryAllocator::init",
			"DeviceMemoryAllocator",
			"cmdBarrierImageLayout",
			"DeviceMemoryAllocator",
			"flush",
			"mpASBuffer",
			"mBuildInfo.type",
			"mCreateInfo.mode",
			"setSrcAccelerationStructure",
			"VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR",
			"VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR",
			"mBlasData",
			"fillInstanceDesc",
			"mInstanceDescs",
			"createInternal",
			"VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR",
			"vkGetAccelerationStructureBuildSizesKHR",
			"GraphicsStateObject::create",
			"VkPipelineLayoutCreateInfo",
			"VK_OBJECT_TYPE_INSTANCE",
			"andle",
			"vkCmdClearDepthStencilImage",
			"debugReportCallback",
			"vkCreateAccelerationStructureKHR",
			"pBuildInfo-",
			"mPro",
			"setCommandList",
			"CommandListHandle",
			"resourceBa",
			"rasterize",
			"raytrace",
			"mCmdQueues",
			"mMeshInstanceData",
			"mpBlasScratch",
			"_1",
			"GpuFence",
			"build_external",
			"EXTERNALS_BUILD_DIR",
			"external",
			"tbb_build_dir",
			"--build",
			"BUILD_DIR",
			"EXTERNALS_BUILD_DIR",
			"VkAccelerationStructureBuildRangeInfoKHR",
			"Querying blas compacted size",
			"mpVao",
			"VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT",
			"VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV",
			"VK_KHR_get_physical_device_properties2",
			"loader_validate_device_extensions",
			"NonPi",
			"vkCreateCommandPool",
			"VK_FAILED",
			"LowLevelContextData::create",
			"createCommandBuffer",
			"VkCommandBuffer",
			"flush",
			"vkQueueSubmit",
			"vkQueueWaitIdle",
			"VkPhysicalDeviceAccelerationStructureFeaturesKHR",
			"vkCmdWriteAccelerationStructuresPropertiesKHR",
			"pAccelerationStructures",
			"initGeom",
			"postBuildInfoSize",
			"CompactedSizeInBytes",
			"buildTlas",
			"syncCpu",
			"vkFence",
			"vkWaitForFences",
			"VkAccelerationStructureBuildRangeInfoKHR",
			"AccelerationStructureCompactedSize",
			"NonPixelShader",
			"getRtso",
			"RtStateObject::create",
			"::rayt",
			"VK_PIPELINE_STAGE",
			"dstStageMask",
			"VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT",
			"VK_PIPELINE_STAGE_NONE_KHR",
			"!!!!!!!!!!!!!!!!setRaytracingShaderData",
			"VK_PIPELINE_STAGE",
			"VkPhysicalDeviceFeatures",
			".build(",
			"scrat",
			".prebuildInfo",
			"geometry.triangles",
			"VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR",
			"built",
			"vkCmdBuildAccelerationStructuresKHR",
			"assert(pBlas",
			"Acceleration structure build failed for BLAS",
			"scratchByteSize",
			"properties",
			"QueryH",
			"VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO",
			"QueryHeap",
			"VkQueryPool",
			"create_info",
			"build_info"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"deps",
			"DEPS_BINARY_DIR",
			"BINARY_DIR",
			"EXTERNALS_INSTALL_DIR",
			"postBuildInfoCompactedSize",
			"mBuilt",
			"mProperties",
			"mCreateInfo",
			"mBuildInfo",
			"TopLevelAccelerationStructure",
			"BottomLevelAccelerationStructure",
			"AccelerationStructure",
			"slang",
			"SLANG",
			"Slang",
			"EXTERNAL_BOOST_VERSION",
			"LAVA_3RD_LIB_LINK_WITH_STATIC",
			"vsOut",
			"MAX_HIZ_LOD",
			"HiZ",
			"lsdtype",
			"lv_",
			"mSuperSampleCount",
			"_getMaxHorizonGrouped",
			"float2",
			"float4",
			"float3",
			"float2",
			"gMaxZBuffer",
			"gAoDistance",
			"gAoQuality",
			"gAOQuality",
			"float2",
			"float3",
			"float4",
			"float3",
			"float2",
			"mpDepthSampler",
			"float2",
			"int3",
			"float2",
			"float3",
			"float2",
			"float3",
			"float2",
			"float3",
			"pComputeHBAOPass",
			"kAoOut",
			"kHorizonMap",
			"HBAO",
			"pagesCountZ",
			"pagesCountY",
			"pagesCountX",
			"CACAO",
			"ResourceManager",
			"LAVA_3RDPARTY_INSTALL_DIR",
			"LAVA_3RDPARTY_SOURCE_DIR",
			"partialPageDims",
			"mInitialized",
			"sparseResourceManager",
			"SparseResourceManager",
			"materialSparseTextures",
			"imageCreateInfo",
			"unique_points",
			"geometry_name",
			"uv_coords",
			"Mesh",
			"outColor",
			"lsd",
			"LAVA_VEX_DISABLE_AUXPLANE",
			"LAVA",
			"Lava",
			"lv_",
			"lava",
			"lv_",
			"ExprValue",
			"ctx",
			"context",
			"LSD",
			"cmd_",
			"lv_",
			"li_",
			"LSD",
			"cmd_",
			"LSD",
			"cmd_",
			"LSD",
			"cmd_",
			"LSD",
			"cmd_",
			"LSD",
			"cmd_",
			"ROP_Lava",
			"Lava",
			"lava",
			"mRenderer",
			"RENDERER",
			"LAVA",
			"Lava",
			"LAVA",
			"Lava",
			"LAVA",
			"HdLava",
			"HDLAVA",
			"HdLava",
			"HDLAVA",
			"HdLava",
			"HDLAVA",
			"HdLava",
			"HDLAVA",
			"HdLava",
			"HDLAVA",
			"HdLava",
			"HDLAVA",
			"HdLava",
			"Lava",
			"mSceneVersion",
			"mModelVersion",
			"mSceneVersion",
			"mRenderer",
			"Falcor::LavaRenderer",
			"Lava",
			"LAVA",
			"Lava",
			"LAVA",
			"mSceneVersion",
			"mSettingDescriptors",
			"mLastCommittedModelVersion"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/Falcor/Core/API/Vulkan/VKDescriptorSet.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10338,
						"regions":
						{
						},
						"selection":
						[
							[
								6195,
								6195
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1884.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/Falcor/Core/API/DescriptorSet.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5947,
						"regions":
						{
						},
						"selection":
						[
							[
								4435,
								4435
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1290.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/Falcor/Core/BufferTypes/ParameterBlock.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 67365,
						"regions":
						{
						},
						"selection":
						[
							[
								30265,
								30265
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12744.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/Falcor/Core/Program/ProgramReflection.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 55071,
						"regions":
						{
						},
						"selection":
						[
							[
								18721,
								18721
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 26750.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/Falcor/Core/API/Vulkan/VKRootSignature.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6803,
						"regions":
						{
						},
						"selection":
						[
							[
								5416,
								5416
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 321.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/Falcor/Core/API/Vulkan/VKSmartHandle.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11578,
						"regions":
						{
						},
						"selection":
						[
							[
								5874,
								5874
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1758.0,
						"zoom_level": 1.0
					},
					"stack_index": 125,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/Falcor/Scene/Scene.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 41056,
						"regions":
						{
						},
						"selection":
						[
							[
								2900,
								2931
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 594.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/Falcor/Scene/Scene.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 136796,
						"regions":
						{
						},
						"selection":
						[
							[
								12872,
								12872
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3997.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/RenderPasses/DepthPass/DepthPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10285,
						"regions":
						{
						},
						"selection":
						[
							[
								6181,
								6181
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2106.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "src/Falcor/Core/Program/ShaderVar.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17330,
						"regions":
						{
						},
						"selection":
						[
							[
								16902,
								16955
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6156.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/Falcor/Core/Program/ShaderVar.cpp",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15662,
						"regions":
						{
						},
						"selection":
						[
							[
								13302,
								13302
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4914.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "src/Falcor/Scene/Animation/AnimationController.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8084,
						"regions":
						{
						},
						"selection":
						[
							[
								4694,
								4694
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1491.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "third_party/glm/glm/fwd.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27546,
						"regions":
						{
						},
						"selection":
						[
							[
								15860,
								15860
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 8799.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "third_party/glm/glm/detail/type_mat2x2.inl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13967,
						"regions":
						{
						},
						"selection":
						[
							[
								205,
								205
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 7506.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "third_party/glm/glm/ext/matrix_float4x4.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 710,
						"regions":
						{
						},
						"selection":
						[
							[
								678,
								678
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "src/nvpro_core/nvvk/extensions_vk.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1519,
						"regions":
						{
						},
						"selection":
						[
							[
								1369,
								1369
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 138.0,
						"zoom_level": 1.0
					},
					"stack_index": 45,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "src/nvpro_core/nvvk/extensions_vk.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 153893,
						"regions":
						{
						},
						"selection":
						[
							[
								110344,
								110490
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 47017.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 17,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 246280,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions": "",
								"scope": ""
							}
						},
						"selection":
						[
							[
								179082,
								179082
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 19,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 105192.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "third_party/external/slang/src/Slang/tests/compute/ray-tracing-inline.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1179,
						"regions":
						{
						},
						"selection":
						[
							[
								660,
								660
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "third_party/external/slang/src/Slang/examples/ray-tracing/shaders.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3942,
						"regions":
						{
						},
						"selection":
						[
							[
								653,
								869
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 756.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "src/Falcor/Scene/NullTrace.cs.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2291,
						"regions":
						{
						},
						"selection":
						[
							[
								1891,
								2289
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRT.rt.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9447,
						"regions":
						{
						},
						"selection":
						[
							[
								2791,
								2490
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 424.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "third_party/external/slang/src/Slang/slang.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 183518,
						"regions":
						{
						},
						"selection":
						[
							[
								90480,
								90480
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 39924.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "src/Falcor/Core/Program/ProgramReflection.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 87821,
						"regions":
						{
						},
						"selection":
						[
							[
								37749,
								37749
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 15057.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "third_party/external/slang/src/Slang/docs/api-users-guide.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18702,
						"regions":
						{
						},
						"selection":
						[
							[
								13695,
								13695
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5320.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "src/Falcor/Experimental/Scene/Lights/EnvMapIntegration.ps.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9114,
						"regions":
						{
						},
						"selection":
						[
							[
								1844,
								1844
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 41,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "src/nvpro_core/nvvk/raytraceKHR_vk.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20890,
						"regions":
						{
						},
						"selection":
						[
							[
								2914,
								2923
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 786.0,
						"zoom_level": 1.0
					},
					"stack_index": 49,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "src/Falcor/RenderGraph/RenderPass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6850,
						"regions":
						{
						},
						"selection":
						[
							[
								1811,
								1811
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 61,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "src/Falcor/RenderGraph/BasePasses/RasterScenePass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4098,
						"regions":
						{
						},
						"selection":
						[
							[
								3996,
								3996
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 216.0,
						"zoom_level": 1.0
					},
					"stack_index": 58,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "src/Falcor/RenderGraph/BasePasses/RasterScenePass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3210,
						"regions":
						{
						},
						"selection":
						[
							[
								1798,
								1798
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 57,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "src/Falcor/Scene/Animation/AnimatedVertexCache.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11980,
						"regions":
						{
						},
						"selection":
						[
							[
								1819,
								1819
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 56,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "src/Falcor/Scene/SceneCache.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5085,
						"regions":
						{
						},
						"selection":
						[
							[
								1922,
								1922
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 378.0,
						"zoom_level": 1.0
					},
					"stack_index": 55,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "src/RenderPasses/AccumulatePass/AccumulatePass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5613,
						"regions":
						{
						},
						"selection":
						[
							[
								1753,
								1785
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 54.0,
						"zoom_level": 1.0
					},
					"stack_index": 54,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "src/RenderPasses/DepthPass/DepthPass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4506,
						"regions":
						{
						},
						"selection":
						[
							[
								1994,
								1994
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 53,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "src/RenderPasses/ForwardLightingPass/ForwardLightingPass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5997,
						"regions":
						{
						},
						"selection":
						[
							[
								4756,
								4768
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1458.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 35,
					"file": "src/RenderPasses/GBuffer/GBufferBase.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4310,
						"regions":
						{
						},
						"selection":
						[
							[
								1880,
								1880
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 52,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 36,
					"file": "src/Falcor/RenderGraph/RenderPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2631,
						"regions":
						{
						},
						"selection":
						[
							[
								1791,
								1791
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 62,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "src/Falcor/Falcor.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6228,
						"regions":
						{
						},
						"selection":
						[
							[
								1990,
								1990
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 171.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 38,
					"file": "src/nvpro_core/nvvk/stagingmemorymanager_vk.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11011,
						"regions":
						{
						},
						"selection":
						[
							[
								887,
								959
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 74,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 39,
					"file": "src/Falcor/Core/State/GraphicsState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8532,
						"regions":
						{
						},
						"selection":
						[
							[
								2410,
								2410
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 591.0,
						"zoom_level": 1.0
					},
					"stack_index": 97,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 40,
					"file": "third_party/external/tbb/src/Tbb/cmake/README.rst",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20718,
						"regions":
						{
						},
						"selection":
						[
							[
								20216,
								20216
							]
						],
						"settings":
						{
							"syntax": "Packages/RestructuredText/reStructuredText.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5806.0,
						"zoom_level": 1.0
					},
					"stack_index": 106,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 41,
					"file": "third_party/external/boost/src/Boost/Jamroot",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11934,
						"regions":
						{
						},
						"selection":
						[
							[
								1544,
								1544
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 54.0,
						"zoom_level": 1.0
					},
					"stack_index": 107,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 42,
					"file": "src/Falcor/Core/API/Vulkan/VKComputeStateObject.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2823,
						"regions":
						{
						},
						"selection":
						[
							[
								2552,
								2561
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 334.0,
						"zoom_level": 1.0
					},
					"stack_index": 111,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 43,
					"file": "src/Falcor/Core/API/Vulkan/VKLowLevelContextData.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5608,
						"regions":
						{
						},
						"selection":
						[
							[
								4941,
								4946
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1257.0,
						"zoom_level": 1.0
					},
					"stack_index": 84,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 44,
					"file": "src/Falcor/Core/API/CopyContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7171,
						"regions":
						{
						},
						"selection":
						[
							[
								2377,
								2382
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 324.0,
						"zoom_level": 1.0
					},
					"stack_index": 85,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 45,
					"file": "src/Falcor/Core/API/Vulkan/VKTexture.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25231,
						"regions":
						{
						},
						"selection":
						[
							[
								8759,
								8759
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2574.0,
						"zoom_level": 1.0
					},
					"stack_index": 112,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 46,
					"file": "src/Falcor/Core/API/Vulkan/VKGpuFence.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10246,
						"regions":
						{
						},
						"selection":
						[
							[
								9133,
								9133
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3262.0,
						"zoom_level": 1.0
					},
					"stack_index": 103,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 47,
					"file": "src/Falcor/Core/API/D3D12/D3D12Resource.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6227,
						"regions":
						{
						},
						"selection":
						[
							[
								5394,
								5440
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1442.0,
						"zoom_level": 1.0
					},
					"stack_index": 113,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 48,
					"file": "src/Falcor/Core/API/D3D12/D3D12RenderContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25032,
						"regions":
						{
						},
						"selection":
						[
							[
								18782,
								18782
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6165.0,
						"zoom_level": 1.0
					},
					"stack_index": 114,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 49,
					"file": "src/Falcor/Core/API/Device.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13100,
						"regions":
						{
						},
						"selection":
						[
							[
								9921,
								9972
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1944.0,
						"zoom_level": 1.0
					},
					"stack_index": 73,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 50,
					"file": "src/Falcor/Core/API/GpuTimer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4545,
						"regions":
						{
						},
						"selection":
						[
							[
								2493,
								2556
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 316.0,
						"zoom_level": 1.0
					},
					"stack_index": 118,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 51,
					"file": "src/Falcor/Core/API/Vulkan/VkQueryHeap.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3092,
						"regions":
						{
						},
						"selection":
						[
							[
								2291,
								2346
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 200.0,
						"zoom_level": 1.0
					},
					"stack_index": 108,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 52,
					"file": "src/Falcor/Core/API/QueryHeap.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3623,
						"regions":
						{
						},
						"selection":
						[
							[
								2483,
								2483
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 470.0,
						"zoom_level": 1.0
					},
					"stack_index": 109,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 53,
					"file": "src/Falcor/Core/API/ResourceManager.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13336,
						"regions":
						{
						},
						"selection":
						[
							[
								2502,
								2502
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 761.0,
						"zoom_level": 1.0
					},
					"stack_index": 120,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 54,
					"file": "src/Falcor/Core/API/Vulkan/VKDescriptorPool.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5195,
						"regions":
						{
						},
						"selection":
						[
							[
								2306,
								2306
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 212.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 55,
					"file": "src/RenderPasses/MinimalPathTracer/MinimalPathTracer.rt.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17351,
						"regions":
						{
						},
						"selection":
						[
							[
								3174,
								3150
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 270.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 56,
					"file": "src/RenderPasses/ForwardLightingPass/ForwardLightingPass.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6508,
						"regions":
						{
						},
						"selection":
						[
							[
								2620,
								2620
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 540.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 57,
					"file": "src/RenderPasses/ForwardLightingPass/ForwardLightingPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12782,
						"regions":
						{
						},
						"selection":
						[
							[
								10650,
								10650
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3510.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 58,
					"file": "src/Falcor/Scene/Scene.cpp.old.2",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 122057,
						"regions":
						{
						},
						"selection":
						[
							[
								95797,
								95832
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 41321.0,
						"zoom_level": 1.0
					},
					"stack_index": 95,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 59,
					"file": "src/Falcor/Core/API/LowLevelContextData.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4073,
						"regions":
						{
						},
						"selection":
						[
							[
								2213,
								2213
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 281.0,
						"zoom_level": 1.0
					},
					"stack_index": 66,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 60,
					"file": "src/Falcor/Scene/Scene.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 58676,
						"regions":
						{
						},
						"selection":
						[
							[
								28537,
								28537
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10070.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 61,
					"file": "src/Falcor/Scene/Scene.cpp.6",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 129985,
						"regions":
						{
						},
						"selection":
						[
							[
								110584,
								110584
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 46458.0,
						"zoom_level": 1.0
					},
					"stack_index": 77,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 62,
					"file": "src/Falcor/Core/API/CopyContext.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8686,
						"regions":
						{
						},
						"selection":
						[
							[
								7888,
								7888
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1350.0,
						"zoom_level": 1.0
					},
					"stack_index": 86,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 63,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 316,
						"regions":
						{
						},
						"selection":
						[
							[
								48,
								49
							]
						],
						"settings":
						{
							"auto_name": "(Logger::Level::Info)Initiating BLAS build for 1",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 94,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 64,
					"file": "src/nvpro_core/nvvk/raytraceKHR_vk.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11142,
						"regions":
						{
						},
						"selection":
						[
							[
								3061,
								3074
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 879.0,
						"zoom_level": 1.0
					},
					"stack_index": 40,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 65,
					"file": "src/nvpro_core/nvmath/nvmath.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18289,
						"regions":
						{
						},
						"selection":
						[
							[
								16952,
								16954
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3641.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 66,
					"file": "src/nvpro_core/nvmath/nvmath_types.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 23994,
						"regions":
						{
						},
						"selection":
						[
							[
								1165,
								1165
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 249.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 67,
					"file": "src/nvpro_core/nvvk/raytraceNV_vk.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15648,
						"regions":
						{
						},
						"selection":
						[
							[
								570,
								570
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 702.0,
						"zoom_level": 1.0
					},
					"stack_index": 102,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 68,
					"file": "src/Falcor/Core/API/Vulkan/VKDevice.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 55255,
						"regions":
						{
						},
						"selection":
						[
							[
								47732,
								47732
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 17605.0,
						"zoom_level": 1.0
					},
					"stack_index": 42,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 69,
					"file": "src/Falcor/Core/API/Vulkan/nvvk_memallocator_vma_vk.inl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1640,
						"regions":
						{
						},
						"selection":
						[
							[
								79,
								79
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 71,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 70,
					"file": "src/Falcor/Core/API/Vulkan/nvvk_memallocator_vma_vk.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2227,
						"regions":
						{
						},
						"selection":
						[
							[
								1911,
								1941
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 216.0,
						"zoom_level": 1.0
					},
					"stack_index": 72,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 71,
					"file": "src/nvpro_core/nvvk/memallocator_vma_vk.inl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6368,
						"regions":
						{
						},
						"selection":
						[
							[
								2278,
								2278
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 76,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 72,
					"file": "src/nvpro_core/nvvk/memallocator_vma_vk.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3661,
						"regions":
						{
						},
						"selection":
						[
							[
								1402,
								1402
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 153.0,
						"zoom_level": 1.0
					},
					"stack_index": 75,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 73,
					"file": "src/Falcor/Scene/AccelerationStructure.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8150,
						"regions":
						{
						},
						"selection":
						[
							[
								4060,
								4070
							]
						],
						"settings":
						{
							"auto_name": "#pragma once",
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2268.0,
						"zoom_level": 1.0
					},
					"stack_index": 89,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 74,
					"file": "src/Falcor/Scene/AccelerationStructure.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19748,
						"regions":
						{
						},
						"selection":
						[
							[
								6366,
								6378
							]
						],
						"settings":
						{
							"auto_name": "#include <algorithm>",
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2862.0,
						"zoom_level": 1.0
					},
					"stack_index": 83,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 75,
					"file": "src/Falcor/Core/API/Vulkan/VKCopyContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 28574,
						"regions":
						{
						},
						"selection":
						[
							[
								18007,
								18012
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8892.0,
						"zoom_level": 1.0
					},
					"stack_index": 87,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 76,
					"file": "src/Falcor/Core/API/VAO.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5144,
						"regions":
						{
						},
						"selection":
						[
							[
								4954,
								4959
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1319.0,
						"zoom_level": 1.0
					},
					"stack_index": 110,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 77,
					"file": "src/Falcor/Core/API/GpuMemoryHeap.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5126,
						"regions":
						{
						},
						"selection":
						[
							[
								3345,
								3345
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 730.0,
						"zoom_level": 1.0
					},
					"stack_index": 121,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 78,
					"file": "src/Falcor/Core/Framework.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13035,
						"regions":
						{
						},
						"selection":
						[
							[
								5038,
								4785
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1638.0,
						"zoom_level": 1.0
					},
					"stack_index": 93,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 79,
					"file": "src/Falcor/Core/API/Vulkan/VKState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27439,
						"regions":
						{
						},
						"selection":
						[
							[
								3203,
								3203
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 92,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 80,
					"file": "src/Falcor/Core/API/ResourceViews.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10217,
						"regions":
						{
						},
						"selection":
						[
							[
								5473,
								5473
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1676.0,
						"zoom_level": 1.0
					},
					"stack_index": 105,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 81,
					"file": "src/Falcor/Core/API/Buffer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19315,
						"regions":
						{
						},
						"selection":
						[
							[
								2683,
								2688
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 65,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 82,
					"file": "src/Falcor/Core/API/Buffer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12692,
						"regions":
						{
						},
						"selection":
						[
							[
								3528,
								3528
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 486.0,
						"zoom_level": 1.0
					},
					"stack_index": 99,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 83,
					"file": "/usr/include/vulkan/vulkan.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1477,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 101,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 84,
					"file": "/usr/include/vulkan/vulkan_xlib.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1784,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 100,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 85,
					"file": "/usr/include/vulkan/vulkan_core.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 669211,
						"regions":
						{
						},
						"selection":
						[
							[
								326,
								326
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 486.0,
						"zoom_level": 1.0
					},
					"stack_index": 78,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 86,
					"file": "src/Falcor/Core/API/Resource.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7888,
						"regions":
						{
						},
						"selection":
						[
							[
								6559,
								6559
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2410.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 87,
					"file": "src/Falcor/Core/API/Resource.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5611,
						"regions":
						{
						},
						"selection":
						[
							[
								4623,
								4623
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1595.0,
						"zoom_level": 1.0
					},
					"stack_index": 90,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 88,
					"file": "src/Falcor/Core/API/Formats.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14146,
						"regions":
						{
						},
						"selection":
						[
							[
								13349,
								12895
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2702.0,
						"zoom_level": 1.0
					},
					"stack_index": 91,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 89,
					"file": "src/Falcor/Scene/Scene.cpp.5",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 135008,
						"regions":
						{
						},
						"selection":
						[
							[
								121733,
								121733
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 44246.0,
						"zoom_level": 1.0
					},
					"stack_index": 96,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 90,
					"file": "src/Falcor/Core/API/Vulkan/VKBuffer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8057,
						"regions":
						{
						},
						"selection":
						[
							[
								4664,
								4664
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 594.0,
						"zoom_level": 1.0
					},
					"stack_index": 88,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 91,
					"file": "src/Falcor/Core/API/Vulkan/VKResourceViews.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15456,
						"regions":
						{
						},
						"selection":
						[
							[
								10670,
								10670
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3990.0,
						"zoom_level": 1.0
					},
					"stack_index": 124,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 92,
					"file": "src/Falcor/Core/API/DescriptorSet.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2808,
						"regions":
						{
						},
						"selection":
						[
							[
								2213,
								2213
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 159.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 93,
					"file": "src/Falcor/Core/API/Device.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14936,
						"regions":
						{
						},
						"selection":
						[
							[
								6500,
								6500
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 234.0,
						"zoom_level": 1.0
					},
					"stack_index": 60,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 94,
					"file": "src/Falcor/Core/API/Vulkan/VKDevice.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3368,
						"regions":
						{
						},
						"selection":
						[
							[
								3263,
								3263
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 702.0,
						"zoom_level": 1.0
					},
					"stack_index": 43,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 95,
					"file": "third_party/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16722,
						"regions":
						{
						},
						"selection":
						[
							[
								11811,
								11811
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7128.0,
						"zoom_level": 1.0
					},
					"stack_index": 79,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 96,
					"file": "CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5288,
						"regions":
						{
						},
						"selection":
						[
							[
								807,
								807
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 47,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 97,
					"file": "src/Falcor/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6555,
						"regions":
						{
						},
						"selection":
						[
							[
								107,
								163
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 48,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 98,
					"file": "src/RenderPasses/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4214,
						"regions":
						{
						},
						"selection":
						[
							[
								316,
								316
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 68,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 99,
					"file": "src/lava_lib/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1294,
						"regions":
						{
						},
						"selection":
						[
							[
								113,
								113
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 69,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 100,
					"file": "src/lava_cmd/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1782,
						"regions":
						{
						},
						"selection":
						[
							[
								213,
								213
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 70,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 101,
					"file": "third_party/vma_install_files.cmake",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 208,
						"regions":
						{
						},
						"selection":
						[
							[
								153,
								160
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 82,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 102,
					"file": "build_external/include/VulkanMemoryAllocator/vk_mem_alloc.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 754801,
						"regions":
						{
						},
						"selection":
						[
							[
								20989,
								21000
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7585.0,
						"zoom_level": 1.0
					},
					"stack_index": 119,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 103,
					"file": "src/Falcor/Core/API/Vulkan/FalcorVK.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6800,
						"regions":
						{
						},
						"selection":
						[
							[
								4471,
								4471
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 353.0,
						"zoom_level": 1.0
					},
					"stack_index": 44,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 104,
					"file": "src/Falcor/Core/API/Vulkan/VKRenderContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17866,
						"regions":
						{
						},
						"selection":
						[
							[
								9984,
								10035
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1336.0,
						"zoom_level": 1.0
					},
					"stack_index": 67,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 105,
					"file": "src/Falcor/Core/API/RenderContext.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12254,
						"regions":
						{
						},
						"selection":
						[
							[
								3577,
								3577
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1264.0,
						"zoom_level": 1.0
					},
					"stack_index": 98,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 106,
					"file": "src/Falcor/Core/BufferTypes/ParameterBlock.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20722,
						"regions":
						{
						},
						"selection":
						[
							[
								18342,
								18389
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5304.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 107,
					"file": "src/RenderPasses/SkyBox/SkyBox.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2906,
						"regions":
						{
						},
						"selection":
						[
							[
								2483,
								2483
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 432.0,
						"zoom_level": 1.0
					},
					"stack_index": 126,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 108,
					"file": "src/RenderPasses/DepthPass/DepthPass.ps.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3019,
						"regions":
						{
						},
						"selection":
						[
							[
								2735,
								2741
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 270.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 109,
					"file": "src/lava_lib/renderer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25771,
						"regions":
						{
						},
						"selection":
						[
							[
								13450,
								13450
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5976.0,
						"zoom_level": 1.0
					},
					"stack_index": 46,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 110,
					"file": "src/lava_lib/render_engine.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2837,
						"regions":
						{
						},
						"selection":
						[
							[
								28,
								28
							]
						],
						"settings":
						{
							"auto_name": "class RenderEngine {",
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 80,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 111,
					"file": "src/lava_lib/render_engine.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2395,
						"regions":
						{
						},
						"selection":
						[
							[
								77,
								77
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 81,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 112,
					"file": "falcor.sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4240,
						"regions":
						{
						},
						"selection":
						[
							[
								788,
								788
							]
						],
						"settings":
						{
							"syntax": "Packages/JSON/JSON.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 59,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 113,
					"file": "src/RenderPasses/MinimalPathTracer/MinimalPathTracer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11194,
						"regions":
						{
						},
						"selection":
						[
							[
								5446,
								5454
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1674.0,
						"zoom_level": 1.0
					},
					"stack_index": 117,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 114,
					"file": "src/Falcor/Scene/Raytracing.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5978,
						"regions":
						{
						},
						"selection":
						[
							[
								1876,
								1876
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1026.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 115,
					"file": "src/Falcor/Scene/RaytracingInline.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13738,
						"regions":
						{
						},
						"selection":
						[
							[
								4023,
								4023
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 910.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 116,
					"file": "src/RenderPasses/MinimalPathTracer/MinimalPathTracer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4105,
						"regions":
						{
						},
						"selection":
						[
							[
								1954,
								1954
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 432.0,
						"zoom_level": 1.0
					},
					"stack_index": 51,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 117,
					"file": "src/RenderPasses/SkyBox/SkyBox.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4138,
						"regions":
						{
						},
						"selection":
						[
							[
								1938,
								1938
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 50,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 118,
					"file": "src/Falcor/Utils/Sampling/SampleGenerator.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3957,
						"regions":
						{
						},
						"selection":
						[
							[
								2682,
								2682
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 316.0,
						"zoom_level": 1.0
					},
					"stack_index": 122,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 119,
					"file": "src/lava_utils_lib/logging.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2525,
						"regions":
						{
						},
						"selection":
						[
							[
								1033,
								1033
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 123,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 120,
					"file": "src/Falcor/RenderGraph/RenderGraph.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11565,
						"regions":
						{
						},
						"selection":
						[
							[
								7997,
								8019
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 324.0,
						"zoom_level": 1.0
					},
					"stack_index": 64,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 121,
					"file": "src/Falcor/RenderGraph/RenderGraph.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31296,
						"regions":
						{
						},
						"selection":
						[
							[
								1946,
								1946
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 63,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 122,
					"file": "src/Falcor/RenderGraph/RenderGraphExe.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4110,
						"regions":
						{
						},
						"selection":
						[
							[
								2343,
								2343
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 154.0,
						"zoom_level": 1.0
					},
					"stack_index": 104,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 123,
					"file": "src/Falcor/Core/API/Vulkan/VKDescriptorData.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2552,
						"regions":
						{
						},
						"selection":
						[
							[
								2148,
								2148
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 378.0,
						"zoom_level": 1.0
					},
					"stack_index": 127,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 124,
					"file": "src/Falcor/Core/Program/ProgramVars.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14498,
						"regions":
						{
						},
						"selection":
						[
							[
								13352,
								13370
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 532.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 125,
					"file": "src/Falcor/Raytracing/RtProgram/RtProgram.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6321,
						"regions":
						{
						},
						"selection":
						[
							[
								5288,
								5288
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1962.0,
						"zoom_level": 1.0
					},
					"stack_index": 115,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 126,
					"file": "src/Falcor/Raytracing/RtStateObject.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11788,
						"regions":
						{
						},
						"selection":
						[
							[
								2279,
								2300
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 561.0,
						"zoom_level": 1.0
					},
					"stack_index": 116,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 127,
					"file": "src/Falcor/Core/Program/ProgramVars.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6798,
						"regions":
						{
						},
						"selection":
						[
							[
								5483,
								5483
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1104.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 32.0
	},
	"output.unsaved_changes":
	{
		"height": 31.0
	},
	"pinned_build_system": "Packages/Makefile/Make.sublime-build",
	"project": "falcor.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 454.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
