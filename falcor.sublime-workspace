{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"e",
				"env_p"
			],
			[
				"de",
				"developmentDirectories"
			],
			[
				"LLO",
				"LLOG_ERR"
			],
			[
				"mF",
				"mFailed"
			],
			[
				"Bu",
				"Buffer"
			],
			[
				"U",
				"UINT32_MAX"
			],
			[
				"UIN",
				"UINT32_MAX"
			],
			[
				"mp",
				"mpComputeRasterizerPass"
			],
			[
				"Ras",
				"Rasterizer"
			],
			[
				"S",
				"SharedPtr"
			],
			[
				"pTe",
				"pTexture"
			],
			[
				"s",
				"size_t"
			],
			[
				"tex",
				"texture"
			],
			[
				"f",
				"false"
			],
			[
				"ba",
				"back"
			],
			[
				"t",
				"textureHandle"
			],
			[
				"mate",
				"materialResolveData"
			],
			[
				"mpV",
				"mpVirtualPagesDataBuffer"
			],
			[
				"ui",
				"uint8_t"
			],
			[
				"virt",
				"virtualTexturesData"
			],
			[
				"res",
				"resize"
			],
			[
				"virtu",
				"virtualPagesData"
			],
			[
				"se",
				"setBuffer"
			],
			[
				"mip",
				"mipBases"
			],
			[
				"i",
				"isSparse"
			],
			[
				"pT",
				"pTex"
			],
			[
				"con",
				"continue"
			],
			[
				"uin",
				"uint8_t"
			],
			[
				"k",
				"kLtxPageSize"
			],
			[
				"set",
				"setBuffer"
			],
			[
				"mIs",
				"mIsSparse"
			],
			[
				"a",
				"any_cast"
			],
			[
				"kEx",
				"kExtendedHandlesDataName"
			],
			[
				"is",
				"isSparse"
			],
			[
				"st",
				"std"
			],
			[
				"isS",
				"isSparse"
			],
			[
				"to",
				"totalPagesToUpdateCountAligned"
			],
			[
				"h",
				"header"
			],
			[
				"LLOG",
				"LLOG_WRN"
			],
			[
				"cu",
				"currentPageOffset"
			],
			[
				"L",
				"LTX_Bitmap"
			],
			[
				"siz",
				"size_t"
			],
			[
				"FI",
				"FILE"
			],
			[
				"p",
				"pLtxBitmap"
			],
			[
				"kP",
				"kOnePageTailData"
			],
			[
				"F",
				"Flags"
			],
			[
				"getM",
				"getMipTailStart"
			],
			[
				"Te",
				"Texture"
			],
			[
				"co",
				"continue"
			],
			[
				"z",
				"size"
			],
			[
				"tail",
				"tail_data"
			],
			[
				"pSc",
				"pScratchBufferData"
			],
			[
				"re",
				"reserve"
			],
			[
				"m",
				"mipTailStart"
			],
			[
				"u",
				"uint8_t"
			],
			[
				"Con",
				"Constant"
			],
			[
				"d",
				"data"
			],
			[
				"mem",
				"memset"
			],
			[
				"ta",
				"tangents"
			],
			[
				"non-",
				"non-indexed"
			],
			[
				"mM",
				"mMesh"
			],
			[
				"inde",
				"indexCount"
			],
			[
				"ver",
				"vertices"
			],
			[
				"mMes",
				"mMeshletGroups"
			],
			[
				"mesh",
				"meshletsMemoryInBytes"
			],
			[
				"meshl",
				"meshLightCount"
			],
			[
				"LL",
				"LLOG_INF"
			],
			[
				"meshle",
				"meshletSpec"
			],
			[
				"meshlet",
				"meshletSpecs"
			],
			[
				"c",
				"constexpr"
			],
			[
				"prim",
				"primitiveIndices"
			],
			[
				"Mesh",
				"MeshletDraw"
			],
			[
				"mMesh",
				"mMeshletGroups"
			],
			[
				"Meshl",
				"Meshlet"
			],
			[
				"mes",
				"meshlets_count"
			],
			[
				"kInval",
				"kInvalidMeshletID"
			],
			[
				"kI",
				"kInvalidExportedID"
			],
			[
				"me",
				"meshletVertices"
			],
			[
				"local_",
				"local_vert_count"
			],
			[
				"mesh_",
				"mesh_start_index"
			],
			[
				"bre",
				"break"
			],
			[
				"la",
				"last_index"
			],
			[
				"gr",
				"groupSpec"
			],
			[
				"mMeshlet",
				"mMeshletGroups"
			],
			[
				"Genet",
				"Generating"
			],
			[
				"gene",
				"generateMeshlets"
			],
			[
				"Scen",
				"SceneTypes"
			],
			[
				"inn",
				"inner_indices"
			],
			[
				"te",
				"tesselatePolySimple"
			],
			[
				"in",
				"indices"
			],
			[
				"triang",
				"triangles"
			],
			[
				"use16",
				"use16BitIndices"
			],
			[
				"tr",
				"triangles_count"
			],
			[
				"tria",
				"triangles_count"
			],
			[
				"mesl",
				"meshlets"
			],
			[
				"pus",
				"push_back"
			],
			[
				"meshlets",
				"meshlets_count"
			],
			[
				"meshletGe",
				"meshletGeoInst"
			],
			[
				"Mes",
				"MeshletGeometryInstance"
			],
			[
				"inst",
				"instanceData"
			],
			[
				"Ge",
				"GeometryInstanceData"
			],
			[
				"mehs",
				"meshletGeometryInstances"
			],
			[
				"R",
				"R32Uint"
			],
			[
				"Sh",
				"SharedPtr"
			],
			[
				"T",
				"Texture"
			],
			[
				"mpMe",
				"mpMeshletsVertexBuffer"
			],
			[
				"cons",
				"constexpr"
			],
			[
				"page",
				"pageIndex"
			],
			[
				"inc",
				"include"
			],
			[
				"sh",
				"shadingPassType"
			],
			[
				"mU",
				"mUseVariance"
			],
			[
				"mUs",
				"mUseSTBN"
			],
			[
				"mRa",
				"mRayContribThreshold"
			],
			[
				"mR",
				"mRussRouletteLevel"
			],
			[
				"mSA",
				"mSampleNumber"
			],
			[
				"pM",
				"pMaterial"
			],
			[
				"str",
				"stringstream"
			],
			[
				"pP",
				"pPass"
			],
			[
				"RenderP",
				"RenderPass"
			],
			[
				"pC",
				"pCryptomattePass"
			],
			[
				"mMet",
				"mMetaData"
			],
			[
				"typeN",
				"typeName"
			],
			[
				"mT",
				"mTypeName"
			],
			[
				"mTyp",
				"mTypeName"
			],
			[
				"typ",
				"typeName"
			],
			[
				"C",
				"CryptoMaterial"
			],
			[
				"mTy",
				"mTypeName"
			],
			[
				"type",
				"type_name"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/Falcor/Utils/Image/TextureManager.cpp",
			"settings":
			{
				"buffer_size": 34240,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIgZAAAAAAAAiRkAAAAAAAAAAAAAiRkAAAAAAACMGQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIgZAAAAAAAAiBkAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"paste",
					null,
					"AQAAAIwZAAAAAAAAzBkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIwZAAAAAAAAjBkAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"left_delete",
					null,
					"AQAAAIwZAAAAAAAAjBkAAAAAAABEAAAATExPR19FUlIgPDwgIlRleHR1cmUgIiA8PCBzcmNGaWxlbmFtZSA8PCAiIGNvbnZlcnNpb24gZmFpbGVkLlxuIgoJCQk",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIwZAAAAAAAA0BkAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"paste",
					null,
					"AQAAAO1EAAAAAAAACkUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO1EAAAAAAAA7UQAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAApFAAAAAAAAC0UAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAApFAAAAAAAACkUAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " hande"
					},
					"BgAAAAtFAAAAAAAADEUAAAAAAAAAAAAADEUAAAAAAAANRQAAAAAAAAAAAAANRQAAAAAAAA5FAAAAAAAAAAAAAA5FAAAAAAAAD0UAAAAAAAAAAAAAD0UAAAAAAAAQRQAAAAAAAAAAAAAQRQAAAAAAABFFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAtFAAAAAAAAC0UAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"left_delete",
					null,
					"AQAAABBFAAAAAAAAEEUAAAAAAAABAAAAZQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABFFAAAAAAAAEUUAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "le,"
					},
					"AwAAABBFAAAAAAAAEUUAAAAAAAAAAAAAEUUAAAAAAAASRQAAAAAAAAAAAAASRQAAAAAAABNFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABBFAAAAAAAAEEUAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABNFAAAAAAAAFEUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABNFAAAAAAAAE0UAAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "bool"
					},
					"BQAAALNEAAAAAAAAtEQAAAAAAAAAAAAAtEQAAAAAAAC0RAAAAAAAAB0AAABUZXh0dXJlTWFuYWdlcjo6VGV4dHVyZUhhbmRsZbREAAAAAAAAtUQAAAAAAAAAAAAAtUQAAAAAAAC2RAAAAAAAAAAAAAC2RAAAAAAAALdEAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANBEAAAAAAAAs0QAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"left_delete",
					null,
					"AQAAAJhFAAAAAAAAmEUAAAAAAAAYAAAAVGV4dHVyZUhhbmRsZSBoYW5kbGU7CgoJ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJhFAAAAAAAAsEUAAAAAAAAAAAAAAAAyQA"
				],
				[
					42,
					6,
					"left_delete",
					null,
					"BgAAAIdHAAAAAAAAh0cAAAAAAAABAAAAZYZHAAAAAAAAhkcAAAAAAAABAAAAbIVHAAAAAAAAhUcAAAAAAAABAAAAZIRHAAAAAAAAhEcAAAAAAAABAAAAboNHAAAAAAAAg0cAAAAAAAABAAAAYYJHAAAAAAAAgkcAAAAAAAABAAAAaA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIhHAAAAAAAAiEcAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "flase"
					},
					"BQAAAIJHAAAAAAAAg0cAAAAAAAAAAAAAg0cAAAAAAACERwAAAAAAAAAAAACERwAAAAAAAIVHAAAAAAAAAAAAAIVHAAAAAAAAhkcAAAAAAAAAAAAAhkcAAAAAAACHRwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIJHAAAAAAAAgkcAAAAAAAAAAAAAAADwvw"
				],
				[
					44,
					4,
					"left_delete",
					null,
					"BAAAAIZHAAAAAAAAhkcAAAAAAAABAAAAZYVHAAAAAAAAhUcAAAAAAAABAAAAc4RHAAAAAAAAhEcAAAAAAAABAAAAYYNHAAAAAAAAg0cAAAAAAAABAAAAbA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIdHAAAAAAAAh0cAAAAAAAAAAAAAAADwvw"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAINHAAAAAAAAhEcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAINHAAAAAAAAg0cAAAAAAAAAAAAAAADwvw"
				],
				[
					46,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "false"
					},
					"AgAAAIJHAAAAAAAAgkcAAAAAAAACAAAAZmGCRwAAAAAAAIdHAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIRHAAAAAAAAhEcAAAAAAAAAAAAAAADwvw"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "\nre"
					},
					"BAAAANRPAAAAAAAA1U8AAAAAAAAAAAAA1U8AAAAAAADaTwAAAAAAAAAAAADaTwAAAAAAANtPAAAAAAAAAAAAANtPAAAAAAAA3E8AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANRPAAAAAAAA1E8AAAAAAAAAAAAAAADwvw"
				],
				[
					50,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAANpPAAAAAAAA2k8AAAAAAAACAAAAcmXaTwAAAAAAAOBPAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANxPAAAAAAAA3E8AAAAAAAAAAAAAAADwvw"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": " f"
					},
					"AgAAAOBPAAAAAAAA4U8AAAAAAAAAAAAA4U8AAAAAAADiTwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOBPAAAAAAAA4E8AAAAAAAAAAAAAAADwvw"
				],
				[
					52,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "false"
					},
					"AgAAAOFPAAAAAAAA4U8AAAAAAAABAAAAZuFPAAAAAAAA5k8AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOJPAAAAAAAA4k8AAAAAAAAAAAAAAADwvw"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOZPAAAAAAAA508AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOZPAAAAAAAA5k8AAAAAAAAAAAAAAADwvw"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "tr"
					},
					"AwAAAC5bAAAAAAAAL1sAAAAAAAAAAAAAL1sAAAAAAAAvWwAAAAAAAAYAAABoYW5kbGUvWwAAAAAAADBbAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC5bAAAAAAAANFsAAAAAAAAAAAAAAADwvw"
				],
				[
					58,
					1,
					"insert_completion",
					{
						"completion": "true",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "true"
					},
					"AgAAAC5bAAAAAAAALlsAAAAAAAACAAAAdHIuWwAAAAAAADJbAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADBbAAAAAAAAMFsAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "src/Falcor/Utils/Image/TextureManager.h",
			"settings":
			{
				"buffer_size": 12764,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"paste",
					null,
					"AQAAAGEWAAAAAAAAbhYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGEWAAAAAAAAYRYAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAG4WAAAAAAAAbxYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG4WAAAAAAAAbhYAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " handle"
					},
					"BwAAAG8WAAAAAAAAcBYAAAAAAAAAAAAAcBYAAAAAAABxFgAAAAAAAAAAAABxFgAAAAAAAHIWAAAAAAAAAAAAAHIWAAAAAAAAcxYAAAAAAAAAAAAAcxYAAAAAAAB0FgAAAAAAAAAAAAB0FgAAAAAAAHUWAAAAAAAAAAAAAHUWAAAAAAAAdhYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG8WAAAAAAAAbxYAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAHYWAAAAAAAAdxYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHYWAAAAAAAAdhYAAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHcWAAAAAAAAeBYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHcWAAAAAAAAdxYAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "bool"
					},
					"BQAAAEcWAAAAAAAASBYAAAAAAAAAAAAASBYAAAAAAABIFgAAAAAAAA0AAABUZXh0dXJlSGFuZGxlSBYAAAAAAABJFgAAAAAAAAAAAABJFgAAAAAAAEoWAAAAAAAAAAAAAEoWAAAAAAAASxYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEcWAAAAAAAAVBYAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "src/Falcor/Scene/Material/MaterialTextureLoader.cpp",
			"settings":
			{
				"buffer_size": 3574,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					11,
					3,
					"left_delete",
					null,
					"AwAAALoKAAAAAAAAugoAAAAAAAABAAAAILkKAAAAAAAAuQoAAAAAAAABAAAAPbgKAAAAAAAAuAoAAAAAAAABAAAAIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALsKAAAAAAAAuwoAAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "\nif("
					},
					"BQAAALgKAAAAAAAAuQoAAAAAAAAAAAAAuQoAAAAAAAC6CgAAAAAAAAAAAAC6CgAAAAAAALsKAAAAAAAAAAAAALsKAAAAAAAAvAoAAAAAAAAAAAAAvAoAAAAAAAC9CgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALgKAAAAAAAAuAoAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "!"
					},
					"AQAAAL0KAAAAAAAAvgoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL0KAAAAAAAAvQoAAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALgKAAAAAAAAuQoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALgKAAAAAAAAuAoAAAAAAAAAAAAAAKB3QA"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "handle.l"
					},
					"CAAAAN0KAAAAAAAA3goAAAAAAAAAAAAA3goAAAAAAADfCgAAAAAAAAAAAADfCgAAAAAAAOAKAAAAAAAAAAAAAOAKAAAAAAAA4QoAAAAAAAAAAAAA4QoAAAAAAADiCgAAAAAAAAAAAADiCgAAAAAAAOMKAAAAAAAAAAAAAOMKAAAAAAAA5AoAAAAAAAAAAAAA5AoAAAAAAADlCgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN0KAAAAAAAA3QoAAAAAAAAAAAAAAADwvw"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOUKAAAAAAAA5goAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOUKAAAAAAAA5QoAAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					3,
					"left_delete",
					null,
					"AwAAAOUKAAAAAAAA5QoAAAAAAAABAAAAIOQKAAAAAAAA5AoAAAAAAAABAAAAbOMKAAAAAAAA4woAAAAAAAABAAAALg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOYKAAAAAAAA5goAAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOMKAAAAAAAA5AoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOMKAAAAAAAA4woAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOQKAAAAAAAA5QoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOQKAAAAAAAA5AoAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"left_delete",
					null,
					"AQAAADQLAAAAAAAANAsAAAAAAAABAAAAOw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADULAAAAAAAANQsAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAADQLAAAAAAAANQsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADQLAAAAAAAANAsAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADULAAAAAAAANgsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADULAAAAAAAANQsAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAADYLAAAAAAAAOAsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADYLAAAAAAAANgsAAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAADcLAAAAAAAAOAsAAAAAAAAAAAAAOAsAAAAAAAA5CwAAAAAAAAAAAAA5CwAAAAAAADoLAAAAAAAAAAAAADoLAAAAAAAAOwsAAAAAAAAAAAAAOAsAAAAAAAA4CwAAAAAAAAEAAAAJOAsAAAAAAAA6CwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADcLAAAAAAAANwsAAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "re"
					},
					"AgAAADoLAAAAAAAAOwsAAAAAAAAAAAAAOwsAAAAAAAA8CwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADoLAAAAAAAAOgsAAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAADoLAAAAAAAAOgsAAAAAAAACAAAAcmU6CwAAAAAAAEALAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADwLAAAAAAAAPAsAAAAAAAAAAAAAAADwvw"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " f"
					},
					"AgAAAEALAAAAAAAAQQsAAAAAAAAAAAAAQQsAAAAAAABCCwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEALAAAAAAAAQAsAAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "false"
					},
					"AgAAAEELAAAAAAAAQQsAAAAAAAABAAAAZkELAAAAAAAARgsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEILAAAAAAAAQgsAAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEYLAAAAAAAARwsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEYLAAAAAAAARgsAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGUMAAAAAAAAZgwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGUMAAAAAAAAZQwAAAAAAAAAAAAAAADwvw"
				],
				[
					41,
					1,
					"reindent",
					null,
					"AQAAAGUMAAAAAAAAZgwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGUMAAAAAAAAZQwAAAAAAAAAAAAAAAAAAA"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "re"
					},
					"AgAAAGYMAAAAAAAAZwwAAAAAAAAAAAAAZwwAAAAAAABoDAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGYMAAAAAAAAZgwAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAAGYMAAAAAAAAZgwAAAAAAAACAAAAcmVmDAAAAAAAAGwMAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGgMAAAAAAAAaAwAAAAAAAAAAAAAAADwvw"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": " t"
					},
					"AgAAAGwMAAAAAAAAbQwAAAAAAAAAAAAAbQwAAAAAAABuDAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGwMAAAAAAAAbAwAAAAAAAAAAAAAAADwvw"
				],
				[
					45,
					1,
					"insert_completion",
					{
						"completion": "true",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "true"
					},
					"AgAAAG0MAAAAAAAAbQwAAAAAAAABAAAAdG0MAAAAAAAAcQwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG4MAAAAAAAAbgwAAAAAAAAAAAAAAADwvw"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAHEMAAAAAAAAcgwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHEMAAAAAAAAcQwAAAAAAAAAAAAAAADwvw"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "bool"
					},
					"BQAAAAEIAAAAAAAAAggAAAAAAAAAAAAAAggAAAAAAAACCAAAAAAAAAQAAAB2b2lkAggAAAAAAAADCAAAAAAAAAAAAAADCAAAAAAAAAQIAAAAAAAAAAAAAAQIAAAAAAAABQgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAEIAAAAAAAABQgAAAAAAAAAAAAAAADwvw"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": " f"
					},
					"AgAAAIQJAAAAAAAAhQkAAAAAAAAAAAAAhQkAAAAAAACGCQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIQJAAAAAAAAhAkAAAAAAAAAAAAAAADwvw"
				],
				[
					55,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "false"
					},
					"AgAAAIUJAAAAAAAAhQkAAAAAAAABAAAAZoUJAAAAAAAAigkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIYJAAAAAAAAhgkAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "src/Falcor/Scene/Material/Material.cpp",
			"settings":
			{
				"buffer_size": 13617,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Material/MaterialTextureLoader.h",
			"settings":
			{
				"buffer_size": 3259,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "bool"
					},
					"BQAAAIQKAAAAAAAAhQoAAAAAAAAAAAAAhQoAAAAAAACFCgAAAAAAAAQAAAB2b2lkhQoAAAAAAACGCgAAAAAAAAAAAACGCgAAAAAAAIcKAAAAAAAAAAAAAIcKAAAAAAAAiAoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIQKAAAAAAAAiAoAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "src/Falcor/Scene/SceneBuilder.cpp",
			"settings":
			{
				"buffer_size": 124509,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"insert",
					{
						"characters": "bool"
					},
					"BQAAAHGMAAAAAAAAcowAAAAAAAAAAAAAcowAAAAAAAByjAAAAAAAAAQAAAB2b2lkcowAAAAAAABzjAAAAAAAAAAAAABzjAAAAAAAAHSMAAAAAAAAAAAAAHSMAAAAAAAAdYwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHGMAAAAAAAAdYwAAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAAMmNAAAAAAAAyo0AAAAAAAAAAAAAyo0AAAAAAADLjQAAAAAAAAAAAADLjQAAAAAAAMyNAAAAAAAAAAAAAMyNAAAAAAAAzY0AAAAAAAAAAAAAzY0AAAAAAADOjQAAAAAAAAAAAADOjQAAAAAAAM+NAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMmNAAAAAAAAyY0AAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAM+NAAAAAAAA0I0AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM+NAAAAAAAAz40AAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "src/Falcor/Scene/SceneBuilder.h",
			"settings":
			{
				"buffer_size": 38086,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": "bii"
					},
					"BAAAAL1eAAAAAAAAvl4AAAAAAAAAAAAAvl4AAAAAAAC+XgAAAAAAAAQAAAB2b2lkvl4AAAAAAAC/XgAAAAAAAAAAAAC/XgAAAAAAAMBeAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL1eAAAAAAAAwV4AAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					2,
					"left_delete",
					null,
					"AgAAAL9eAAAAAAAAv14AAAAAAAABAAAAab5eAAAAAAAAvl4AAAAAAAABAAAAaQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMBeAAAAAAAAwF4AAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "ool"
					},
					"AwAAAL5eAAAAAAAAv14AAAAAAAAAAAAAv14AAAAAAADAXgAAAAAAAAAAAADAXgAAAAAAAMFeAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL5eAAAAAAAAvl4AAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "src/lava_lib/reader_lsd/session.cpp",
			"settings":
			{
				"buffer_size": 54659,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "if(!"
					},
					"BAAAAFzHAAAAAAAAXccAAAAAAAAAAAAAXccAAAAAAABexwAAAAAAAAAAAABexwAAAAAAAF/HAAAAAAAAAAAAAF/HAAAAAAAAYMcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFzHAAAAAAAAXMcAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"left_delete",
					null,
					"AQAAAO7HAAAAAAAA7scAAAAAAAABAAAAOw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO/HAAAAAAAA78cAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAO7HAAAAAAAA78cAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO7HAAAAAAAA7scAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAO/HAAAAAAAA8McAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO/HAAAAAAAA78cAAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAPDHAAAAAAAA8scAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPDHAAAAAAAA8McAAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAPHHAAAAAAAA8scAAAAAAAAAAAAA8scAAAAAAAD4xwAAAAAAAAAAAAD4xwAAAAAAAPnHAAAAAAAAAAAAAPnHAAAAAAAA/8cAAAAAAAAAAAAA8scAAAAAAADyxwAAAAAAAAYAAAAJICAgIAnyxwAAAAAAAPnHAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPHHAAAAAAAA8ccAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "re"
					},
					"AgAAAPnHAAAAAAAA+scAAAAAAAAAAAAA+scAAAAAAAD7xwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPnHAAAAAAAA+ccAAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAAPnHAAAAAAAA+ccAAAAAAAACAAAAcmX5xwAAAAAAAP/HAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPvHAAAAAAAA+8cAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " f"
					},
					"AgAAAP/HAAAAAAAAAMgAAAAAAAAAAAAAAMgAAAAAAAAByAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP/HAAAAAAAA/8cAAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "false"
					},
					"AgAAAADIAAAAAAAAAMgAAAAAAAABAAAAZgDIAAAAAAAABcgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAHIAAAAAAAAAcgAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAAXIAAAAAAAABsgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAXIAAAAAAAABcgAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAP7IAAAAAAAA/8gAAAAAAAAAAAAA/8gAAAAAAAAEyQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP7IAAAAAAAA/sgAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAP7IAAAAAAAA/8gAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP7IAAAAAAAA/sgAAAAAAAAAAAAAAABSQA"
				],
				[
					26,
					1,
					"paste",
					null,
					"AQAAAP/IAAAAAAAAFMkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP/IAAAAAAAA/8gAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAP/IAAAAAAAAAMkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP/IAAAAAAAA/8gAAAAAAAAAAAAAAABbQA"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAbKAAAAAAAAB8oAAAAAAAAAAAAAB8oAAAAAAAAMygAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAbKAAAAAAAABsoAAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAAbKAAAAAAAAB8oAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAbKAAAAAAAABsoAAAAAAAAAAAAAAABSQA"
				],
				[
					35,
					1,
					"paste",
					null,
					"AQAAAAfKAAAAAAAAHMoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAfKAAAAAAAAB8oAAAAAAAAAAAAAAADwvw"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAAfKAAAAAAAACMoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAfKAAAAAAAAB8oAAAAAAAAAAAAAAADwvw"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABHLAAAAAAAAEssAAAAAAAAAAAAAEssAAAAAAAAXywAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABHLAAAAAAAAEcsAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAABHLAAAAAAAAEssAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABHLAAAAAAAAEcsAAAAAAAAAAAAAAABSQA"
				],
				[
					44,
					1,
					"paste",
					null,
					"AQAAABLLAAAAAAAAJ8sAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABLLAAAAAAAAEssAAAAAAAAAAAAAAADwvw"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAABLLAAAAAAAAE8sAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABLLAAAAAAAAEssAAAAAAAAAAAAAAADwvw"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAB/MAAAAAAAAIMwAAAAAAAAAAAAAIMwAAAAAAAAlzAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB/MAAAAAAAAH8wAAAAAAAAAAAAAAADwvw"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAB/MAAAAAAAAIMwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB/MAAAAAAAAH8wAAAAAAAAAAAAAAABSQA"
				],
				[
					53,
					1,
					"paste",
					null,
					"AQAAACDMAAAAAAAANcwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACDMAAAAAAAAIMwAAAAAAAAAAAAAAADwvw"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAACDMAAAAAAAAIcwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACDMAAAAAAAAIMwAAAAAAAAAAAAAAABbQA"
				],
				[
					64,
					1,
					"paste",
					null,
					"AQAAAGzIAAAAAAAAcMgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGzIAAAAAAAAbMgAAAAAAAAAAAAAAADwvw"
				],
				[
					67,
					1,
					"paste",
					null,
					"AQAAAHjJAAAAAAAAfMkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHjJAAAAAAAAeMkAAAAAAAAAAAAAAADwvw"
				],
				[
					70,
					1,
					"paste",
					null,
					"AQAAAIXKAAAAAAAAicoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIXKAAAAAAAAhcoAAAAAAAAAAAAAAADwvw"
				],
				[
					73,
					1,
					"paste",
					null,
					"AQAAAJjLAAAAAAAAnMsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJjLAAAAAAAAmMsAAAAAAAAAAAAAAADwvw"
				],
				[
					79,
					1,
					"paste",
					null,
					"AgAAAPvIAAAAAAAA/sgAAAAAAAAAAAAA/sgAAAAAAAD+yAAAAAAAAAEAAAA7",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPvIAAAAAAAA/MgAAAAAAAAAAAAAAADwvw"
				],
				[
					82,
					1,
					"paste",
					null,
					"AgAAAAnKAAAAAAAADMoAAAAAAAAAAAAADMoAAAAAAAAMygAAAAAAAAEAAAA7",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAnKAAAAAAAACsoAAAAAAAAAAAAAAADwvw"
				],
				[
					85,
					1,
					"paste",
					null,
					"AgAAABrLAAAAAAAAHcsAAAAAAAAAAAAAHcsAAAAAAAAdywAAAAAAAAEAAAA7",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABrLAAAAAAAAG8sAAAAAAAAAAAAAAADwvw"
				],
				[
					88,
					1,
					"paste",
					null,
					"AgAAAC7MAAAAAAAAMcwAAAAAAAAAAAAAMcwAAAAAAAAxzAAAAAAAAAEAAAA7",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC7MAAAAAAAAL8wAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "retur"
					},
					"BgAAALmTAAAAAAAAupMAAAAAAAAAAAAAupMAAAAAAAC6kwAAAAAAAAQAAABpZighupMAAAAAAAC7kwAAAAAAAAAAAAC7kwAAAAAAALyTAAAAAAAAAAAAALyTAAAAAAAAvZMAAAAAAAAAAAAAvZMAAAAAAAC+kwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5kwAAAAAAAL2TAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAL6TAAAAAAAAv5MAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+kwAAAAAAAL6TAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAL+TAAAAAAAAwJMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC/kwAAAAAAAL+TAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"left_delete",
					null,
					"AQAAAN+TAAAAAAAA35MAAAAAAAAOAAAAKSByZXR1cm4gZmFsc2U",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfkwAAAAAAAO2TAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAEseAAAAAAAATB4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABLHgAAAAAAAEseAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAALUeAAAAAAAAth4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1HgAAAAAAALUeAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "if!"
					},
					"BAAAALuTAAAAAAAAvJMAAAAAAAAAAAAAvJMAAAAAAAC8kwAAAAAAAAcAAAByZXR1cm4gvJMAAAAAAAC9kwAAAAAAAAAAAAC9kwAAAAAAAL6TAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCkwAAAAAAALuTAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"left_delete",
					null,
					"AQAAAL2TAAAAAAAAvZMAAAAAAAABAAAAIQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+kwAAAAAAAL6TAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "(!"
					},
					"AgAAAL2TAAAAAAAAvpMAAAAAAAAAAAAAvpMAAAAAAAC/kwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9kwAAAAAAAL2TAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"left_delete",
					null,
					"AQAAAN6TAAAAAAAA3pMAAAAAAAABAAAAOw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfkwAAAAAAAN+TAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAN6TAAAAAAAA35MAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADekwAAAAAAAN6TAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAN+TAAAAAAAA4JMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfkwAAAAAAAN+TAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAOCTAAAAAAAA4pMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADgkwAAAAAAAOCTAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAOGTAAAAAAAA4pMAAAAAAAAAAAAA4pMAAAAAAADmkwAAAAAAAAAAAADmkwAAAAAAAOeTAAAAAAAAAAAAAOeTAAAAAAAA65MAAAAAAAAAAAAA4pMAAAAAAADikwAAAAAAAAQAAAAJCQkJ4pMAAAAAAADnkwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhkwAAAAAAAOGTAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "mf"
					},
					"AgAAAOeTAAAAAAAA6JMAAAAAAAAAAAAA6JMAAAAAAADpkwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnkwAAAAAAAOeTAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"insert_completion",
					{
						"completion": "mFailed",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mFailed"
					},
					"AgAAAOeTAAAAAAAA55MAAAAAAAACAAAAbWbnkwAAAAAAAO6TAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADpkwAAAAAAAOmTAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAO6TAAAAAAAA75MAAAAAAAAAAAAA75MAAAAAAADwkwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADukwAAAAAAAO6TAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": " tr"
					},
					"AwAAAPCTAAAAAAAA8ZMAAAAAAAAAAAAA8ZMAAAAAAADykwAAAAAAAAAAAADykwAAAAAAAPOTAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwkwAAAAAAAPCTAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					1,
					"insert_completion",
					{
						"completion": "true",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "true"
					},
					"AgAAAPGTAAAAAAAA8ZMAAAAAAAACAAAAdHLxkwAAAAAAAPWTAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADzkwAAAAAAAPOTAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAPWTAAAAAAAA9pMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD1kwAAAAAAAPWTAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "\nre"
					},
					"BAAAAPaTAAAAAAAA95MAAAAAAAAAAAAA95MAAAAAAAD8kwAAAAAAAAAAAAD8kwAAAAAAAP2TAAAAAAAAAAAAAP2TAAAAAAAA/pMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2kwAAAAAAAPaTAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAAPyTAAAAAAAA/JMAAAAAAAACAAAAcmX8kwAAAAAAAAKUAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD+kwAAAAAAAP6TAAAAAAAAAAAAAAAA8L8"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": " f"
					},
					"AgAAAAKUAAAAAAAAA5QAAAAAAAAAAAAAA5QAAAAAAAAElAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAClAAAAAAAAAKUAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "false"
					},
					"AgAAAAOUAAAAAAAAA5QAAAAAAAABAAAAZgOUAAAAAAAACJQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAElAAAAAAAAASUAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAAiUAAAAAAAACZQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAIlAAAAAAAAAiUAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/lava_lib/reader_lsd/visitor.cpp",
			"settings":
			{
				"buffer_size": 7719,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAO4PAAAAAAAA7w8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuDwAAAAAAAO4PAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"wrap_block",
					{
						"begin": "{",
						"end": "}"
					},
					"AgAAAO8PAAAAAAAA8A8AAAAAAAAAAAAANRAAAAAAAAA7EAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvDwAAAAAAAO8PAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAPkPAAAAAAAA+g8AAAAAAAAAAAAA+g8AAAAAAAD7DwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5DwAAAAAAAPkPAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					2,
					"left_delete",
					null,
					"AgAAAN0UAAAAAAAA3RQAAAAAAAAtAQAAICAgIC8qCiAgICAgZWxzZSB7CiAgICAgICAgYXV0byBmdWxscGF0aCA9IG1wU2Vzc2lvbi0+Z2V0RXhwYW5kZWRTdHJpbmcoYy5maWxlbmFtZSk7CiAgICAgICAgcEJnZW8tPnJlYWRHZW9Gcm9tRmlsZShmdWxscGF0aC5jX3N0cigpLCBmYWxzZSk7IC8vIEZJWE1FOiBkb24ndCBjaGVjayB2ZXJzaW9uIGZvciBub3cKCiAgICAgICAgaWYoYy50ZW1wb3JhcnkpIHsKICAgICAgICAgICAgZnM6OnJlbW92ZShmdWxscGF0aCk7CiAgICAgICAgfQoKICAgICAgICBwQmdlby0+cHJlQ2FjaGVQcmltaXRpdmVzKCk7CiAgICB9CiAgICAqL9wUAAAAAAAA3BQAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAKFgAAAAAAAN0UAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "\nmFa"
					},
					"BgAAAPAPAAAAAAAA8Q8AAAAAAAAAAAAA8Q8AAAAAAAD1DwAAAAAAAAAAAAD1DwAAAAAAAPkPAAAAAAAAAAAAAPkPAAAAAAAA+g8AAAAAAAAAAAAA+g8AAAAAAAD7DwAAAAAAAAAAAAD7DwAAAAAAAPwPAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwDwAAAAAAAPAPAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "il"
					},
					"AgAAAPwPAAAAAAAA/Q8AAAAAAAAAAAAA/Q8AAAAAAAD+DwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD8DwAAAAAAAPwPAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "ed"
					},
					"AgAAAP4PAAAAAAAA/w8AAAAAAAAAAAAA/w8AAAAAAAAAEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD+DwAAAAAAAP4PAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAAAQAAAAAAAAARAAAAAAAAAAAAAAARAAAAAAAAACEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " tr"
					},
					"AwAAAAIQAAAAAAAAAxAAAAAAAAAAAAAAAxAAAAAAAAAEEAAAAAAAAAAAAAAEEAAAAAAAAAUQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACEAAAAAAAAAIQAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert_completion",
					{
						"completion": "true",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "true"
					},
					"AgAAAAMQAAAAAAAAAxAAAAAAAAACAAAAdHIDEAAAAAAAAAcQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAFEAAAAAAAAAUQAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAAcQAAAAAAAACBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAHEAAAAAAAAAcQAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "LLO"
					},
					"BAAAAPkPAAAAAAAA+g8AAAAAAAAAAAAA+g8AAAAAAAD6DwAAAAAAADMAAABtRmFpbGVkID0gdHJ1ZTsKICAgICAgICAvL3Rocm93IHN0ZDo6cnVudGltZV9lcnJvcij6DwAAAAAAAPsPAAAAAAAAAAAAAPsPAAAAAAAA/A8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAsEAAAAAAAAPkPAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"insert_completion",
					{
						"completion": "LLOG_ERR",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "LLOG_ERR"
					},
					"AgAAAPkPAAAAAAAA+Q8AAAAAAAADAAAATExP+Q8AAAAAAAABEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD8DwAAAAAAAPwPAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": " <<"
					},
					"AwAAAAEQAAAAAAAAAhAAAAAAAAAAAAAAAhAAAAAAAAADEAAAAAAAAAAAAAADEAAAAAAAAAQQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABEAAAAAAAAAEQAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAQQAAAAAAAABRAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAEEAAAAAAAAAQQAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"right_delete",
					null,
					"AQAAACUQAAAAAAAAJRAAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAlEAAAAAAAACUQAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "\n\nbool"
					},
					"BgAAAGMMAAAAAAAAZAwAAAAAAAAAAAAAZAwAAAAAAABlDAAAAAAAAAAAAABlDAAAAAAAAGYMAAAAAAAAAAAAAGYMAAAAAAAAZwwAAAAAAAAAAAAAZwwAAAAAAABoDAAAAAAAAAAAAABoDAAAAAAAAGkMAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjDAAAAAAAAGMMAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGkMAAAAAAAAagwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABpDAAAAAAAAGkMAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"paste",
					null,
					"AQAAAGoMAAAAAAAAswwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqDAAAAAAAAGoMAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"paste",
					null,
					"AgAAAGsMAAAAAAAAdAwAAAAAAAAAAAAAdAwAAAAAAAB0DAAAAAAAAAUAAABib29sIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrDAAAAAAAAHAMAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"right_delete",
					null,
					"AQAAAGoMAAAAAAAAagwAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqDAAAAAAAAGoMAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "third_party/freeimage_install_files.cmake",
			"settings":
			{
				"buffer_size": 606,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n\n\n"
					},
					"CwAAABsBAAAAAAAAHAEAAAAAAAAAAAAAHAEAAAAAAAAdAQAAAAAAAAAAAAAdAQAAAAAAAB4BAAAAAAAAAAAAAB4BAAAAAAAAHwEAAAAAAAAAAAAAHAEAAAAAAAAcAQAAAAAAAAEAAAAJHgEAAAAAAAAfAQAAAAAAAAAAAAAfAQAAAAAAACABAAAAAAAAAAAAAB0BAAAAAAAAHQEAAAAAAAABAAAACR8BAAAAAAAAIAEAAAAAAAAAAAAAIAEAAAAAAAAhAQAAAAAAAAAAAAAeAQAAAAAAAB4BAAAAAAAAAQAAAAk",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbAQAAAAAAABsBAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"reindent",
					null,
					"AQAAAB4BAAAAAAAAHwEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAeAQAAAAAAAB4BAAAAAAAAAAAAAAAAQkA"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAAB8BAAAAAAAAmQEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfAQAAAAAAAB8BAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"right_delete",
					null,
					"AgAAAB8BAAAAAAAAHwEAAAAAAAAOAAAASU5TVEFMTChDT0RFICKMAQAAAAAAAIwBAAAAAAAAAQAAAAk",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAtAQAAAAAAAB8BAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					6,
					"left_delete",
					null,
					"BgAAADUBAAAAAAAANQEAAAAAAAABAAAAIDQBAAAAAAAANAEAAAAAAAABAAAAIDMBAAAAAAAAMwEAAAAAAAABAAAAIDIBAAAAAAAAMgEAAAAAAAABAAAAIDEBAAAAAAAAMQEAAAAAAAABAAAACjABAAAAAAAAMAEAAAAAAAABAAAAXA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2AQAAAAAAADYBAAAAAAAAAAAAAAAAQkA"
				],
				[
					14,
					6,
					"left_delete",
					null,
					"BgAAAGABAAAAAAAAYAEAAAAAAAABAAAAIF8BAAAAAAAAXwEAAAAAAAABAAAAIF4BAAAAAAAAXgEAAAAAAAABAAAAIF0BAAAAAAAAXQEAAAAAAAABAAAAIFwBAAAAAAAAXAEAAAAAAAABAAAAClsBAAAAAAAAWwEAAAAAAAABAAAAXA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABhAQAAAAAAAGEBAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					4,
					"left_delete",
					null,
					"BAAAAHUBAAAAAAAAdQEAAAAAAAABAAAAXHQBAAAAAAAAdAEAAAAAAAABAAAAIHMBAAAAAAAAcwEAAAAAAAABAAAAIHIBAAAAAAAAcgEAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB2AQAAAAAAAHYBAAAAAAAAAAAAAAAAgkA"
				],
				[
					18,
					6,
					"left_delete",
					null,
					"BgAAAGoBAAAAAAAAagEAAAAAAAABAAAAIGkBAAAAAAAAaQEAAAAAAAABAAAAIGgBAAAAAAAAaAEAAAAAAAABAAAAIGcBAAAAAAAAZwEAAAAAAAABAAAAIGYBAAAAAAAAZgEAAAAAAAABAAAACmUBAAAAAAAAZQEAAAAAAAABAAAAXA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrAQAAAAAAAGsBAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"left_delete",
					null,
					"AQAAAHIBAAAAAAAAcgEAAAAAAAABAAAAIg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABzAQAAAAAAAHMBAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					5,
					"left_delete",
					null,
					"BQAAAHABAAAAAAAAcAEAAAAAAAABAAAAIG8BAAAAAAAAbwEAAAAAAAABAAAAIG4BAAAAAAAAbgEAAAAAAAABAAAAIG0BAAAAAAAAbQEAAAAAAAABAAAAIGwBAAAAAAAAbAEAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABxAQAAAAAAAHEBAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGwBAAAAAAAAbQEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABsAQAAAAAAAGwBAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJAAAAAAAAAAkQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACQAAAAAAAAAJAAAAAAAAAAAAAAAAAQh0A"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJEAAAAAAAAAkgAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACRAAAAAAAAAJEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJEAAAAAAAAAkgAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACRAAAAAAAAAJEAAAAAAAAAAAAAAAAAAAA"
				],
				[
					31,
					1,
					"reindent",
					null,
					"AQAAAJIAAAAAAAAAkwAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACSAAAAAAAAAJIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "SET"
					},
					"AwAAAJMAAAAAAAAAlAAAAAAAAAAAAAAAlAAAAAAAAACVAAAAAAAAAAAAAACVAAAAAAAAAJYAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACTAAAAAAAAAJMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJYAAAAAAAAAmAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWAAAAAAAAAJYAAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "TARGET"
					},
					"BgAAAJcAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAACZAAAAAAAAAAAAAACZAAAAAAAAAJoAAAAAAAAAAAAAAJoAAAAAAAAAmwAAAAAAAAAAAAAAmwAAAAAAAACcAAAAAAAAAAAAAACcAAAAAAAAAJ0AAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACXAAAAAAAAAJcAAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "+:"
					},
					"AgAAAJ0AAAAAAAAAngAAAAAAAAAAAAAAngAAAAAAAACfAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdAAAAAAAAAJ0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					2,
					"left_delete",
					null,
					"AgAAAJ4AAAAAAAAAngAAAAAAAAABAAAAOp0AAAAAAAAAnQAAAAAAAAABAAAAKw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACfAAAAAAAAAJ8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "_LIB"
					},
					"BAAAAJ0AAAAAAAAAngAAAAAAAAAAAAAAngAAAAAAAACfAAAAAAAAAAAAAACfAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAAoQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdAAAAAAAAAJ0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKEAAAAAAAAAogAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChAAAAAAAAAKEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					1,
					"paste",
					null,
					"AQAAAKIAAAAAAAAAwwAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACiAAAAAAAAAKIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					1,
					"paste",
					null,
					"AgAAAAgBAAAAAAAAEgEAAAAAAAAAAAAAEgEAAAAAAAASAQAAAAAAAAcAAABTUkNfRElS",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAIAQAAAAAAAA8BAAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					1,
					"right_delete",
					null,
					"AQAAABMBAAAAAAAAEwEAAAAAAAAXAAAAL2xpYmZyZWVpbWFnZS0zLjE4LjAuc28",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATAQAAAAAAACoBAAAAAAAAAAAAAAAA8L8"
				],
				[
					63,
					1,
					"paste",
					null,
					"AgAAAH4BAAAAAAAAiAEAAAAAAAAAAAAAiAEAAAAAAACIAQAAAAAAAAYAAAB0YXJnZXQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB+AQAAAAAAAIQBAAAAAAAAAAAAAAAA8L8"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "\nSET"
					},
					"BQAAAMQAAAAAAAAAxQAAAAAAAAAAAAAAxQAAAAAAAADGAAAAAAAAAAAAAADGAAAAAAAAAMcAAAAAAAAAAAAAAMcAAAAAAAAAyAAAAAAAAAAAAAAAyAAAAAAAAADJAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADEAAAAAAAAAMQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					67,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMkAAAAAAAAAywAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADJAAAAAAAAAMkAAAAAAAAAAAAAAAAA8L8"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "LINK_"
					},
					"BQAAAMoAAAAAAAAAywAAAAAAAAAAAAAAywAAAAAAAADMAAAAAAAAAAAAAADMAAAAAAAAAM0AAAAAAAAAAAAAAM0AAAAAAAAAzgAAAAAAAAAAAAAAzgAAAAAAAADPAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKAAAAAAAAAMoAAAAAAAAAAAAAAAAA8L8"
				],
				[
					70,
					1,
					"left_delete",
					null,
					"AQAAAM8AAAAAAAAAzwAAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADQAAAAAAAAANAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "LIB"
					},
					"AwAAAM8AAAAAAAAA0AAAAAAAAAAAAAAA0AAAAAAAAADRAAAAAAAAAAAAAADRAAAAAAAAANIAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADPAAAAAAAAAM8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANIAAAAAAAAA0wAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSAAAAAAAAANIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					73,
					1,
					"paste",
					null,
					"AQAAANMAAAAAAAAA5AAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADTAAAAAAAAANMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					79,
					1,
					"paste",
					null,
					"AQAAANMAAAAAAAAA3gAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADTAAAAAAAAANMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAO8AAAAAAAAA8AAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvAAAAAAAAAO8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					90,
					1,
					"paste",
					null,
					"AgAAALgBAAAAAAAAwAEAAAAAAAAAAAAAwAEAAAAAAADAAQAAAAAAAAQAAABsaW5r",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4AQAAAAAAALwBAAAAAAAAAAAAAAAA8L8"
				],
				[
					93,
					2,
					"left_delete",
					null,
					"AgAAAGkBAAAAAAAAaQEAAAAAAAABAAAACmgBAAAAAAAAaAEAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqAQAAAAAAAGoBAAAAAAAAAAAAAAAA8L8"
				],
				[
					96,
					1,
					"left_delete",
					null,
					"AQAAAMIBAAAAAAAAwgEAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDAQAAAAAAAMMBAAAAAAAAAAAAAAAEkUA"
				],
				[
					98,
					2,
					"left_delete",
					null,
					"AgAAAMIBAAAAAAAAwgEAAAAAAAABAAAACsEBAAAAAAAAwQEAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDAQAAAAAAAMMBAAAAAAAAAAAAAAAAAAA"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMEBAAAAAAAAwgEAAAAAAAAAAAAAwgEAAAAAAADDAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBAQAAAAAAAMEBAAAAAAAAAAAAAAAA8L8"
				],
				[
					105,
					1,
					"paste",
					null,
					"AgAAADIBAAAAAAAAUwEAAAAAAAAAAAAAUwEAAAAAAABTAQAAAAAAAA0AAAAke1RBUkdFVF9MSUJ9",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAyAQAAAAAAAD8BAAAAAAAAAAAAAAAA8L8"
				],
				[
					109,
					1,
					"left_delete",
					null,
					"AgAAAJIAAAAAAAAAkgAAAAAAAABeAAAACVNFVChUQVJHRVRfTElCICR7U1JDX0RJUn0vbGliZnJlZWltYWdlLTMuMTguMC5zbykKCVNFVChMSU5LX0xJQiAke1NSQ19ESVJ9L2xpYmZyZWVpbWFnZS5zby4zKXgBAAAAAAAAeAEAAAAAAAABAAAACQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwAAAAAAAAAJIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					111,
					3,
					"left_delete",
					null,
					"AwAAAJIAAAAAAAAAkgAAAAAAAAABAAAACpEAAAAAAAAAkQAAAAAAAAABAAAACpAAAAAAAAAAkAAAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACTAAAAAAAAAJMAAAAAAAAAAAAAAAAAAAA"
				],
				[
					113,
					1,
					"left_delete",
					null,
					"AQAAAHQBAAAAAAAAdAEAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB1AQAAAAAAAHUBAAAAAAAAAAAAAAAAS0A"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAB0BAAAAAAAAHgEAAAAAAAAAAAAAHgEAAAAAAAAfAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAdAQAAAAAAAB0BAAAAAAAAAAAAAAAA8L8"
				],
				[
					120,
					1,
					"paste",
					null,
					"AQAAAB0BAAAAAAAAewEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAdAQAAAAAAAB0BAAAAAAAAAAAAAAAAQkA"
				],
				[
					125,
					1,
					"left_delete",
					null,
					"AQAAAB0BAAAAAAAAHQEAAAAAAAABAAAACQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAeAQAAAAAAAB4BAAAAAAAAAAAAAAAA8L8"
				],
				[
					131,
					1,
					"paste",
					null,
					"AgAAACwBAAAAAAAAUgEAAAAAAAAAAAAAUgEAAAAAAABSAQAAAAAAACEAAAAke1NSQ19ESVJ9L2xpYmZyZWVpbWFnZS0zLjE4LjAuc28",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAsAQAAAAAAAE0BAAAAAAAAAAAAAAAA8L8"
				],
				[
					134,
					1,
					"paste",
					null,
					"AgAAAGIBAAAAAAAAiAEAAAAAAAAAAAAAiAEAAAAAAACIAQAAAAAAAAsAAAAke1NSQ19ESVJ9Lw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABiAQAAAAAAAG0BAAAAAAAAAAAAAAAA8L8"
				],
				[
					135,
					22,
					"left_delete",
					null,
					"FgAAAIcBAAAAAAAAhwEAAAAAAAABAAAAb4YBAAAAAAAAhgEAAAAAAAABAAAAc4UBAAAAAAAAhQEAAAAAAAABAAAALoQBAAAAAAAAhAEAAAAAAAABAAAAMIMBAAAAAAAAgwEAAAAAAAABAAAALoIBAAAAAAAAggEAAAAAAAABAAAAOIEBAAAAAAAAgQEAAAAAAAABAAAAMYABAAAAAAAAgAEAAAAAAAABAAAALn8BAAAAAAAAfwEAAAAAAAABAAAAM34BAAAAAAAAfgEAAAAAAAABAAAALX0BAAAAAAAAfQEAAAAAAAABAAAAZXwBAAAAAAAAfAEAAAAAAAABAAAAZ3sBAAAAAAAAewEAAAAAAAABAAAAYXoBAAAAAAAAegEAAAAAAAABAAAAbXkBAAAAAAAAeQEAAAAAAAABAAAAaXgBAAAAAAAAeAEAAAAAAAABAAAAZXcBAAAAAAAAdwEAAAAAAAABAAAAZXYBAAAAAAAAdgEAAAAAAAABAAAAcnUBAAAAAAAAdQEAAAAAAAABAAAAZnQBAAAAAAAAdAEAAAAAAAABAAAAYnMBAAAAAAAAcwEAAAAAAAABAAAAaXIBAAAAAAAAcgEAAAAAAAABAAAAbA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACIAQAAAAAAAIgBAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/Falcor/Core/Platform/OS.cpp",
			"settings":
			{
				"buffer_size": 13554,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"left_delete",
					null,
					"AQAAADQJAAAAAAAANAkAAAAAAAAwAQAAIC8vIEZpcnN0IHdlIHNlYXJjaCBpbiBzb3VyY2UgZm9sZGVycy4KICAgICAgICAvL3N0ZDo6c3RyaW5nKFBST0pFQ1RfRElSKSwKICAgICAgICAvL3N0ZDo6c3RyaW5nKFBST0pFQ1RfRElSKSArICIuLi8iLAogICAgICAgIC8vc3RkOjpzdHJpbmcoUFJPSkVDVF9ESVIpICsgIi4uL1Rvb2xzL0ZhbGNvclRlc3QvIiwKICAgICAgICAKICAgICAgICAvLyBUaGVuIHdlIHNlYXJjaCBpbiBkZXBsb3ltZW50IGZvbGRlcnMgKG5lY2Vzc2FyeSB0byBwaWNrdXAgTlZBUEkgYW5kIG90aGVyIHRoaXJkLXBhcnR5IHNoYWRlcnMpLgogICAgICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA0CQAAAAAAAGQKAAAAAAAAAAAAAAAA8L8"
				],
				[
					4,
					2,
					"left_delete",
					null,
					"AgAAADEJAAAAAAAAMQkAAAAAAAADAAAAICAgLQkAAAAAAAAtCQAAAAAAAAQAAAAgICAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA0CQAAAAAAADQJAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAC0JAAAAAAAAMQkAAAAAAAAAAAAAMQkAAAAAAAA1CQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAtCQAAAAAAAC0JAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGAJAAAAAAAAYQkAAAAAAAAAAAAAYQkAAAAAAABpCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABgCQAAAAAAAGAJAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"paste",
					null,
					"AQAAAGkJAAAAAAAAlwkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABpCQAAAAAAAGkJAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"paste",
					null,
					"AgAAAIUJAAAAAAAAjQkAAAAAAAAAAAAAjQkAAAAAAACNCQAAAAAAABAAAAAuLi9yZW5kZXJfcGFzc2Vz",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACFCQAAAAAAAJUJAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAP8JAAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAICgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/CQAAAAAAAP8JAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"paste",
					null,
					"AQAAAAgKAAAAAAAALgoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAICgAAAAAAAAgKAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": ".."
					},
					"AgAAACQKAAAAAAAAJQoAAAAAAAAAAAAAJQoAAAAAAAAmCgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkCgAAAAAAACQKAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": ".."
					},
					"AgAAAIUJAAAAAAAAhgkAAAAAAAAAAAAAhgkAAAAAAACHCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACFCQAAAAAAAIUJAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJEJAAAAAAAAkgkAAAAAAAAAAAAAkgkAAAAAAACaCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACRCQAAAAAAAJEJAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"paste",
					null,
					"AQAAAJoJAAAAAAAAxQkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaCQAAAAAAAJoJAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					4,
					"left_delete",
					null,
					"BAAAAMEJAAAAAAAAwQkAAAAAAAABAAAASMAJAAAAAAAAwAkAAAAAAAABAAAAVL8JAAAAAAAAvwkAAAAAAAABAAAAQb4JAAAAAAAAvgkAAAAAAAABAAAAUA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCCQAAAAAAAMIJAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "LA"
					},
					"AgAAAL4JAAAAAAAAvwkAAAAAAAAAAAAAvwkAAAAAAADACQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+CQAAAAAAAL4JAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"insert_completion",
					{
						"completion": "LAVA_HOME",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "LAVA_HOME"
					},
					"AgAAAL4JAAAAAAAAvgkAAAAAAAACAAAATEG+CQAAAAAAAMcJAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADACQAAAAAAAMAJAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMoJAAAAAAAAywkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKCQAAAAAAAMoJAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					4,
					"left_delete",
					null,
					"BAAAAJoJAAAAAAAAmgkAAAAAAAAxAAAAaWYoY29uc3QgY2hhciogZW52X3AgPSBzdGQ6OmdldGVudigiTEFWQV9IT01FIikpIJYJAAAAAAAAlgkAAAAAAAAEAAAAICAgIJIJAAAAAAAAkgkAAAAAAAAEAAAAICAgIJEJAAAAAAAAkQkAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaCQAAAAAAAMsJAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAADkKAAAAAAAAOgoAAAAAAAAAAAAAOgoAAAAAAAA+CgAAAAAAAAAAAAA+CgAAAAAAAD8KAAAAAAAAAAAAAD8KAAAAAAAAQwoAAAAAAAAAAAAAOgoAAAAAAAA6CgAAAAAAAAQAAAAgICAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5CgAAAAAAADkKAAAAAAAAAAAAAAAAe0A"
				],
				[
					48,
					1,
					"paste",
					null,
					"AQAAAD8KAAAAAAAAcAoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA/CgAAAAAAAD8KAAAAAAAAAAAAAAAA8L8"
				],
				[
					49,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAHAKAAAAAAAAcgoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABwCgAAAAAAAHAKAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAHEKAAAAAAAAcgoAAAAAAAAAAAAAcgoAAAAAAAB2CgAAAAAAAAAAAAB2CgAAAAAAAHcKAAAAAAAAAAAAAHcKAAAAAAAAewoAAAAAAAAAAAAAcgoAAAAAAAByCgAAAAAAAAQAAAAgICAgcgoAAAAAAAB6CgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABxCgAAAAAAAHEKAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "de"
					},
					"AgAAAHoKAAAAAAAAewoAAAAAAAAAAAAAewoAAAAAAAB8CgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB6CgAAAAAAAHoKAAAAAAAAAAAAAAAA8L8"
				],
				[
					54,
					1,
					"insert_completion",
					{
						"completion": "developmentDirectories",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "developmentDirectories"
					},
					"AgAAAHoKAAAAAAAAegoAAAAAAAACAAAAZGV6CgAAAAAAAJAKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB8CgAAAAAAAHwKAAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": ".p"
					},
					"AgAAAJAKAAAAAAAAkQoAAAAAAAAAAAAAkQoAAAAAAACSCgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACQCgAAAAAAAJAKAAAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					1,
					"insert_completion",
					{
						"completion": "push_back",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "push_back"
					},
					"AgAAAJEKAAAAAAAAkQoAAAAAAAABAAAAcJEKAAAAAAAAmgoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACSCgAAAAAAAJIKAAAAAAAAAAAAAAAA8L8"
				],
				[
					57,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJoKAAAAAAAAnAoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaCgAAAAAAAJoKAAAAAAAAAAAAAAAA8L8"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAJsKAAAAAAAAnAoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACbCgAAAAAAAJsKAAAAAAAAAAAAAAAA8L8"
				],
				[
					59,
					1,
					"left_delete",
					null,
					"AQAAAJsKAAAAAAAAmwoAAAAAAAABAAAAcw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACcCgAAAAAAAJwKAAAAAAAAAAAAAAAA8L8"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "std"
					},
					"AwAAAJsKAAAAAAAAnAoAAAAAAAAAAAAAnAoAAAAAAACdCgAAAAAAAAAAAACdCgAAAAAAAJ4KAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACbCgAAAAAAAJsKAAAAAAAAAAAAAAAA8L8"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "::s"
					},
					"AwAAAJ4KAAAAAAAAnwoAAAAAAAAAAAAAnwoAAAAAAACgCgAAAAAAAAAAAACgCgAAAAAAAKEKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACeCgAAAAAAAJ4KAAAAAAAAAAAAAAAA8L8"
				],
				[
					62,
					1,
					"insert_completion",
					{
						"completion": "string",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "string"
					},
					"AgAAAKAKAAAAAAAAoAoAAAAAAAABAAAAc6AKAAAAAAAApgoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChCgAAAAAAAKEKAAAAAAAAAAAAAAAA8L8"
				],
				[
					63,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKYKAAAAAAAAqAoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACmCgAAAAAAAKYKAAAAAAAAAAAAAAAA8L8"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAKcKAAAAAAAAqAoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACnCgAAAAAAAKcKAAAAAAAAAAAAAAAA8L8"
				],
				[
					67,
					1,
					"insert_completion",
					{
						"completion": "env_p",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "env_p"
					},
					"AgAAAKcKAAAAAAAApwoAAAAAAAABAAAAZacKAAAAAAAArAoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACoCgAAAAAAAKgKAAAAAAAAAAAAAAAA8L8"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": " +"
					},
					"AgAAAK0KAAAAAAAArgoAAAAAAAAAAAAArgoAAAAAAACvCgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtCgAAAAAAAK0KAAAAAAAAAAAAAAAA8L8"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAK8KAAAAAAAAsAoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvCgAAAAAAAK8KAAAAAAAAAAAAAAAA8L8"
				],
				[
					71,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAALAKAAAAAAAAsgoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwCgAAAAAAALAKAAAAAAAAAAAAAAAA8L8"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "/shaders"
					},
					"CAAAALEKAAAAAAAAsgoAAAAAAAAAAAAAsgoAAAAAAACzCgAAAAAAAAAAAACzCgAAAAAAALQKAAAAAAAAAAAAALQKAAAAAAAAtQoAAAAAAAAAAAAAtQoAAAAAAAC2CgAAAAAAAAAAAAC2CgAAAAAAALcKAAAAAAAAAAAAALcKAAAAAAAAuAoAAAAAAAAAAAAAuAoAAAAAAAC5CgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxCgAAAAAAALEKAAAAAAAAAAAAAAAA8L8"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALsKAAAAAAAAvAoAAAAAAAAAAAAAvAoAAAAAAADECgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7CgAAAAAAALsKAAAAAAAAAAAAAAAA8L8"
				],
				[
					79,
					1,
					"paste",
					null,
					"AQAAAMQKAAAAAAAABQsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADECgAAAAAAAMQKAAAAAAAAAAAAAAAA8L8"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAAULAAAAAAAABgsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAFCwAAAAAAAAULAAAAAAAAAAAAAAAA8L8"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALsKAAAAAAAAvAoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7CgAAAAAAALsKAAAAAAAAAAAAAADQhEA"
				],
				[
					90,
					1,
					"paste",
					null,
					"AgAAAMUKAAAAAAAA2goAAAAAAAAAAAAA2goAAAAAAADaCgAAAAAAABYAAABkZXZlbG9wbWVudERpcmVjdG9yaWVz",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADFCgAAAAAAANsKAAAAAAAAAAAAAAAA8L8"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAMsNAAAAAAAAzA0AAAAAAAAAAAAAzA0AAAAAAADQDQAAAAAAAAAAAADQDQAAAAAAANENAAAAAAAAAAAAANENAAAAAAAA1Q0AAAAAAAAAAAAAzA0AAAAAAADMDQAAAAAAAAQAAAAgICAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLDQAAAAAAAMsNAAAAAAAAAAAAAAAA8L8"
				],
				[
					97,
					1,
					"paste",
					null,
					"AQAAANENAAAAAAAAng4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADRDQAAAAAAANENAAAAAAAAAAAAAAAA8L8"
				],
				[
					111,
					1,
					"paste",
					null,
					"AgAAAEQOAAAAAAAAUQ4AAAAAAAAAAAAAUQ4AAAAAAABRDgAAAAAAAAcAAABzaGFkZXJz",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABEDgAAAAAAAEsOAAAAAAAAAAAAAAAA8L8"
				],
				[
					115,
					1,
					"paste",
					null,
					"AgAAAJQOAAAAAAAAoQ4AAAAAAAAAAAAAoQ4AAAAAAAChDgAAAAAAAAcAAABzaGFkZXJz",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACUDgAAAAAAAJsOAAAAAAAAAAAAAAAA8L8"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAFURAAAAAAAAVhEAAAAAAAAAAAAAVhEAAAAAAABXEQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABVEQAAAAAAAFURAAAAAAAAAAAAAAAA8L8"
				],
				[
					124,
					1,
					"reindent",
					null,
					"AQAAAFYRAAAAAAAAWhEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABWEQAAAAAAAFYRAAAAAAAAAAAAAAAAAAA"
				],
				[
					125,
					1,
					"paste",
					null,
					"AQAAAFoRAAAAAAAANxIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABaEQAAAAAAAFoRAAAAAAAAAAAAAAAA8L8"
				],
				[
					128,
					1,
					"left_delete",
					null,
					"AQAAAFoRAAAAAAAAWhEAAAAAAAAEAAAAICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeEQAAAAAAAF4RAAAAAAAAAAAAAAAA8L8"
				],
				[
					136,
					1,
					"paste",
					null,
					"AgAAAM0RAAAAAAAA0REAAAAAAAAAAAAA0REAAAAAAADREQAAAAAAAA0AAAByZW5kZXJfcGFzc2Vz",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNEQAAAAAAANoRAAAAAAAAAAAAAAAA8L8"
				],
				[
					140,
					1,
					"paste",
					null,
					"AgAAABQSAAAAAAAAGBIAAAAAAAAAAAAAGBIAAAAAAAAYEgAAAAAAAA0AAAByZW5kZXJfcGFzc2Vz",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAUEgAAAAAAACESAAAAAAAAAAAAAAAA8L8"
				],
				[
					150,
					1,
					"right_delete",
					null,
					"AQAAACwQAAAAAAAALBAAAAAAAAAuAAAALy9zdGQ6OnN0cmluZyhQUk9KRUNUX0RJUikgKyAiL0RhdGEiLAogICAgICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAsEAAAAAAAAFoQAAAAAAAAAAAAAAAAUkA"
				],
				[
					156,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOsPAAAAAAAA7A8AAAAAAAAAAAAA7A8AAAAAAADwDwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADrDwAAAAAAAOsPAAAAAAAAAAAAAAAA8L8"
				],
				[
					157,
					1,
					"paste",
					null,
					"AQAAAPAPAAAAAAAAHxAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwDwAAAAAAAPAPAAAAAAAAAAAAAAAA8L8"
				],
				[
					158,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAB8QAAAAAAAAIBAAAAAAAAAAAAAAIBAAAAAAAAAkEAAAAAAAAAAAAAAkEAAAAAAAACUQAAAAAAAAAAAAACUQAAAAAAAAKRAAAAAAAAAAAAAAIBAAAAAAAAAgEAAAAAAAAAQAAAAgICAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfEAAAAAAAAB8QAAAAAAAAAAAAAAAA8L8"
				],
				[
					164,
					1,
					"reindent",
					null,
					"AQAAACAQAAAAAAAAJBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgEAAAAAAAACAQAAAAAAAAAAAAAAAA8L8"
				],
				[
					165,
					1,
					"paste",
					null,
					"AQAAACQQAAAAAAAAUhAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkEAAAAAAAACQQAAAAAAAAAAAAAAAA8L8"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": "ж"
					},
					"AgAAAFIQAAAAAAAAUxAAAAAAAAAAAAAAVBAAAAAAAABUEAAAAAAAAAQAAAAgICAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSEAAAAAAAAFIQAAAAAAAAAAAAAAAA8L8"
				],
				[
					169,
					1,
					"insert",
					{
						"characters": "ж"
					},
					"AQAAAB8QAAAAAAAAIBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfEAAAAAAAAB8QAAAAAAAAAAAAAAAA8L8"
				],
				[
					170,
					1,
					"left_delete",
					null,
					"AQAAAB8QAAAAAAAAHxAAAAAAAAACAAAA0LY",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgEAAAAAAAACAQAAAAAAAAAAAAAAAA8L8"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAB8QAAAAAAAAIBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfEAAAAAAAAB8QAAAAAAAAAAAAAAAA8L8"
				],
				[
					174,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AgAAAFMQAAAAAAAAVBAAAAAAAAAAAAAAVBAAAAAAAABUEAAAAAAAAAIAAADQtg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABTEAAAAAAAAFQQAAAAAAAAAAAAAAAA8L8"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": "static"
					},
					"BgAAAPAPAAAAAAAA8Q8AAAAAAAAAAAAA8Q8AAAAAAADyDwAAAAAAAAAAAADyDwAAAAAAAPMPAAAAAAAAAAAAAPMPAAAAAAAA9A8AAAAAAAAAAAAA9A8AAAAAAAD1DwAAAAAAAAAAAAD1DwAAAAAAAPYPAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwDwAAAAAAAPAPAAAAAAAAAAAAAAAA8L8"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPYPAAAAAAAA9w8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2DwAAAAAAAPYPAAAAAAAAAAAAAAAA8L8"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": "static"
					},
					"BgAAACwQAAAAAAAALRAAAAAAAAAAAAAALRAAAAAAAAAuEAAAAAAAAAAAAAAuEAAAAAAAAC8QAAAAAAAAAAAAAC8QAAAAAAAAMBAAAAAAAAAAAAAAMBAAAAAAAAAxEAAAAAAAAAAAAAAxEAAAAAAAADIQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAsEAAAAAAAACwQAAAAAAAAAAAAAAAA8L8"
				],
				[
					182,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADIQAAAAAAAAMxAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAyEAAAAAAAADIQAAAAAAAAAAAAAAAA8L8"
				],
				[
					184,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAGMQAAAAAAAAZBAAAAAAAAAAAAAAZBAAAAAAAABlEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjEAAAAAAAAGMQAAAAAAAAAAAAAADAWEA"
				],
				[
					186,
					1,
					"reindent",
					null,
					"AQAAAGQQAAAAAAAAaBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABkEAAAAAAAAGQQAAAAAAAAAAAAAAAAAAA"
				],
				[
					187,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAGgQAAAAAAAAaRAAAAAAAAAAAAAAaRAAAAAAAABqEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoEAAAAAAAAGgQAAAAAAAAAAAAAAAA8L8"
				],
				[
					188,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGoQAAAAAAAAbBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqEAAAAAAAAGoQAAAAAAAAAAAAAAAA8L8"
				],
				[
					189,
					1,
					"insert",
					{
						"characters": " d"
					},
					"AgAAAGsQAAAAAAAAbBAAAAAAAAAAAAAAbBAAAAAAAABtEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrEAAAAAAAAGsQAAAAAAAAAAAAAAAA8L8"
				],
				[
					190,
					1,
					"insert_completion",
					{
						"completion": "developmentDirectories",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "developmentDirectories"
					},
					"AgAAAGwQAAAAAAAAbBAAAAAAAAABAAAAZGwQAAAAAAAAghAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABtEAAAAAAAAG0QAAAAAAAAAAAAAAAA8L8"
				],
				[
					191,
					1,
					"insert",
					{
						"characters": ".em"
					},
					"AwAAAIIQAAAAAAAAgxAAAAAAAAAAAAAAgxAAAAAAAACEEAAAAAAAAAAAAACEEAAAAAAAAIUQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCEAAAAAAAAIIQAAAAAAAAAAAAAAAA8L8"
				],
				[
					192,
					1,
					"insert_completion",
					{
						"completion": "empty",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "empty"
					},
					"AgAAAIMQAAAAAAAAgxAAAAAAAAACAAAAZW2DEAAAAAAAAIgQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACFEAAAAAAAAIUQAAAAAAAAAAAAAAAA8L8"
				],
				[
					193,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIgQAAAAAAAAihAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACIEAAAAAAAAIgQAAAAAAAAAAAAAAAA8L8"
				],
				[
					195,
					1,
					"insert",
					{
						"characters": " ||"
					},
					"AwAAAIoQAAAAAAAAixAAAAAAAAAAAAAAixAAAAAAAACMEAAAAAAAAAAAAACMEAAAAAAAAI0QAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACKEAAAAAAAAIoQAAAAAAAAAAAAAAAA8L8"
				],
				[
					196,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAI0QAAAAAAAAjhAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNEAAAAAAAAI0QAAAAAAAAAAAAAAAA8L8"
				],
				[
					197,
					1,
					"insert",
					{
						"characters": "depl"
					},
					"BAAAAI4QAAAAAAAAjxAAAAAAAAAAAAAAjxAAAAAAAACQEAAAAAAAAAAAAACQEAAAAAAAAJEQAAAAAAAAAAAAAJEQAAAAAAAAkhAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACOEAAAAAAAAI4QAAAAAAAAAAAAAAAA8L8"
				],
				[
					198,
					1,
					"insert_completion",
					{
						"completion": "deploymentDirectories",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "deploymentDirectories"
					},
					"AgAAAI4QAAAAAAAAjhAAAAAAAAAEAAAAZGVwbI4QAAAAAAAAoxAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACSEAAAAAAAAJIQAAAAAAAAAAAAAAAA8L8"
				],
				[
					199,
					1,
					"insert",
					{
						"characters": ".em"
					},
					"AwAAAKMQAAAAAAAApBAAAAAAAAAAAAAApBAAAAAAAAClEAAAAAAAAAAAAAClEAAAAAAAAKYQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjEAAAAAAAAKMQAAAAAAAAAAAAAAAA8L8"
				],
				[
					200,
					1,
					"insert_completion",
					{
						"completion": "empty",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "empty"
					},
					"AgAAAKQQAAAAAAAApBAAAAAAAAACAAAAZW2kEAAAAAAAAKkQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACmEAAAAAAAAKYQAAAAAAAAAAAAAAAA8L8"
				],
				[
					201,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKkQAAAAAAAAqxAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpEAAAAAAAAKkQAAAAAAAAAAAAAAAA8L8"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKwQAAAAAAAArRAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsEAAAAAAAAKwQAAAAAAAAAAAAAAAA8L8"
				],
				[
					204,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAK0QAAAAAAAArxAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtEAAAAAAAAK0QAAAAAAAAAAAAAAAA8L8"
				],
				[
					205,
					1,
					"right_delete",
					null,
					"AQAAAK4QAAAAAAAArhAAAAAAAAABAAAAfQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACuEAAAAAAAAK4QAAAAAAAAAAAAAAAA8L8"
				],
				[
					210,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BQAAALcSAAAAAAAAuBIAAAAAAAAAAAAAuBIAAAAAAAC8EgAAAAAAAAAAAAC8EgAAAAAAAL0SAAAAAAAAAAAAALgSAAAAAAAAuBIAAAAAAAAEAAAAICAgILgSAAAAAAAAuBIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3EgAAAAAAALcSAAAAAAAAAAAAAADQhEA"
				],
				[
					213,
					1,
					"indent",
					null,
					"DQAAALAQAAAAAAAAtBAAAAAAAAAAAAAA7BAAAAAAAADwEAAAAAAAAAAAAAAhEQAAAAAAACURAAAAAAAAAAAAAFMRAAAAAAAAVxEAAAAAAAAAAAAAXxEAAAAAAABjEQAAAAAAAAAAAACaEQAAAAAAAJ4RAAAAAAAAAAAAAM8RAAAAAAAA0xEAAAAAAAAAAAAAABIAAAAAAAAEEgAAAAAAAAAAAAAMEgAAAAAAABASAAAAAAAAAAAAAEcSAAAAAAAASxIAAAAAAAAAAAAAkxIAAAAAAACXEgAAAAAAAAAAAADeEgAAAAAAAOISAAAAAAAAAAAAAOgSAAAAAAAA7BIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5EgAAAAAAALAQAAAAAAAAAAAAAAAA8L8"
				],
				[
					215,
					1,
					"left_delete",
					null,
					"AQAAAK4QAAAAAAAArhAAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvEAAAAAAAAK8QAAAAAAAAAAAAAAAA8L8"
				],
				[
					221,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAEMAAAAAAAAAgwAAAAAAAAAAAAAAgwAAAAAAAAGDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABDAAAAAAAAAEMAAAAAAAAAAAAAAAA8L8"
				],
				[
					222,
					1,
					"paste",
					null,
					"AQAAAAYMAAAAAAAAeAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAGDAAAAAAAAAYMAAAAAAAAAAAAAAAA8L8"
				],
				[
					223,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHgMAAAAAAAAeQwAAAAAAAAAAAAAeQwAAAAAAAB9DAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4DAAAAAAAAHgMAAAAAAAAAAAAAAAA8L8"
				],
				[
					229,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAH0MAAAAAAAAfgwAAAAAAAAAAAAAfgwAAAAAAACCDAAAAAAAAAAAAAB5DAAAAAAAAHkMAAAAAAAABAAAACAgICA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB9DAAAAAAAAH0MAAAAAAAAAAAAAAAA8L8"
				],
				[
					230,
					1,
					"paste",
					null,
					"AQAAAH4MAAAAAAAAxAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB+DAAAAAAAAH4MAAAAAAAAAAAAAAAA8L8"
				],
				[
					232,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BQAAAG0PAAAAAAAAbg8AAAAAAAAAAAAAbg8AAAAAAAByDwAAAAAAAAAAAAByDwAAAAAAAHMPAAAAAAAAAAAAAG4PAAAAAAAAbg8AAAAAAAAEAAAAICAgIG4PAAAAAAAAbg8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABtDwAAAAAAAG0PAAAAAAAAAAAAAADQhEA"
				],
				[
					235,
					1,
					"indent",
					null,
					"DgAAAMUMAAAAAAAAyQwAAAAAAAAAAAAAAQ0AAAAAAAAFDQAAAAAAAAAAAABwDQAAAAAAAHQNAAAAAAAAAAAAAK4NAAAAAAAAsg0AAAAAAAAAAAAA6Q0AAAAAAADtDQAAAAAAAAAAAAD1DQAAAAAAAPkNAAAAAAAAAAAAADAOAAAAAAAANA4AAAAAAAAAAAAAbg4AAAAAAAByDgAAAAAAAAAAAACoDgAAAAAAAKwOAAAAAAAAAAAAALQOAAAAAAAAuA4AAAAAAAAAAAAA7w4AAAAAAADzDgAAAAAAAAAAAABEDwAAAAAAAEgPAAAAAAAAAAAAAJgPAAAAAAAAnA8AAAAAAAAAAAAAog8AAAAAAACmDwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABvDwAAAAAAAMUMAAAAAAAAAAAAAAAA8L8"
				],
				[
					240,
					1,
					"right_delete",
					null,
					"AQAAAM0MAAAAAAAAzQwAAAAAAAAZAAAAc3RkOjp2ZWN0b3I8c3RkOjpzdHJpbmc+IA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmDAAAAAAAAM0MAAAAAAAAAAAAAAAA8L8"
				],
				[
					243,
					23,
					"right_delete",
					null,
					"FwAAAOQNAAAAAAAA5A0AAAAAAAABAAAAc+QNAAAAAAAA5A0AAAAAAAABAAAAdOQNAAAAAAAA5A0AAAAAAAABAAAAZOQNAAAAAAAA5A0AAAAAAAABAAAAOuQNAAAAAAAA5A0AAAAAAAABAAAAOuQNAAAAAAAA5A0AAAAAAAABAAAAduQNAAAAAAAA5A0AAAAAAAABAAAAZeQNAAAAAAAA5A0AAAAAAAABAAAAY+QNAAAAAAAA5A0AAAAAAAABAAAAdOQNAAAAAAAA5A0AAAAAAAABAAAAb+QNAAAAAAAA5A0AAAAAAAABAAAAcuQNAAAAAAAA5A0AAAAAAAABAAAAPOQNAAAAAAAA5A0AAAAAAAABAAAAc+QNAAAAAAAA5A0AAAAAAAABAAAAdOQNAAAAAAAA5A0AAAAAAAABAAAAZOQNAAAAAAAA5A0AAAAAAAABAAAAOuQNAAAAAAAA5A0AAAAAAAABAAAAOuQNAAAAAAAA5A0AAAAAAAABAAAAc+QNAAAAAAAA5A0AAAAAAAABAAAAdOQNAAAAAAAA5A0AAAAAAAABAAAAcuQNAAAAAAAA5A0AAAAAAAABAAAAaeQNAAAAAAAA5A0AAAAAAAABAAAAbuQNAAAAAAAA5A0AAAAAAAABAAAAZw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADkDQAAAAAAAOQNAAAAAAAAAAAAAAAAUkA"
				],
				[
					244,
					2,
					"right_delete",
					null,
					"AgAAAOQNAAAAAAAA5A0AAAAAAAABAAAAPuQNAAAAAAAA5A0AAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADkDQAAAAAAAOQNAAAAAAAAAAAAAAAA8L8"
				],
				[
					247,
					1,
					"right_delete",
					null,
					"AQAAAIIRAAAAAAAAghEAAAAAAAAZAAAAc3RkOjp2ZWN0b3I8c3RkOjpzdHJpbmc+IA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCEQAAAAAAAJsRAAAAAAAAAAAAAAAA8L8"
				],
				[
					249,
					24,
					"right_delete",
					null,
					"GAAAABgSAAAAAAAAGBIAAAAAAAABAAAAcxgSAAAAAAAAGBIAAAAAAAABAAAAdBgSAAAAAAAAGBIAAAAAAAABAAAAZBgSAAAAAAAAGBIAAAAAAAABAAAAOhgSAAAAAAAAGBIAAAAAAAABAAAAOhgSAAAAAAAAGBIAAAAAAAABAAAAdhgSAAAAAAAAGBIAAAAAAAABAAAAZRgSAAAAAAAAGBIAAAAAAAABAAAAYxgSAAAAAAAAGBIAAAAAAAABAAAAdBgSAAAAAAAAGBIAAAAAAAABAAAAbxgSAAAAAAAAGBIAAAAAAAABAAAAchgSAAAAAAAAGBIAAAAAAAABAAAAPBgSAAAAAAAAGBIAAAAAAAABAAAAcxgSAAAAAAAAGBIAAAAAAAABAAAAdBgSAAAAAAAAGBIAAAAAAAABAAAAZBgSAAAAAAAAGBIAAAAAAAABAAAAOhgSAAAAAAAAGBIAAAAAAAABAAAAOhgSAAAAAAAAGBIAAAAAAAABAAAAcxgSAAAAAAAAGBIAAAAAAAABAAAAdBgSAAAAAAAAGBIAAAAAAAABAAAAchgSAAAAAAAAGBIAAAAAAAABAAAAaRgSAAAAAAAAGBIAAAAAAAABAAAAbhgSAAAAAAAAGBIAAAAAAAABAAAAZxgSAAAAAAAAGBIAAAAAAAABAAAAPg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAYEgAAAAAAABgSAAAAAAAAAAAAAAAAUkA"
				],
				[
					250,
					1,
					"right_delete",
					null,
					"AQAAABgSAAAAAAAAGBIAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAYEgAAAAAAABgSAAAAAAAAAAAAAAAA8L8"
				],
				[
					256,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAPcIAAAAAAAA+AgAAAAAAAAAAAAA+AgAAAAAAAD8CAAAAAAAAAAAAAD8CAAAAAAAAP0IAAAAAAAAAAAAAP0IAAAAAAAAAQkAAAAAAAAAAAAA+AgAAAAAAAD4CAAAAAAAAAQAAAAgICAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3CAAAAAAAAPcIAAAAAAAAAAAAAAAA8L8"
				],
				[
					257,
					1,
					"paste",
					null,
					"AQAAAP0IAAAAAAAAuwkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD9CAAAAAAAAP0IAAAAAAAAAAAAAAAA8L8"
				],
				[
					260,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BQAAANALAAAAAAAA0QsAAAAAAAAAAAAA0QsAAAAAAADVCwAAAAAAAAAAAADVCwAAAAAAANYLAAAAAAAAAAAAANELAAAAAAAA0QsAAAAAAAAEAAAAICAgINELAAAAAAAA0QsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADQCwAAAAAAANALAAAAAAAAAAAAAADQhEA"
				],
				[
					263,
					1,
					"indent",
					null,
					"DQAAALwJAAAAAAAAwAkAAAAAAAAAAAAA9QkAAAAAAAD5CQAAAAAAAAAAAAAtCgAAAAAAADEKAAAAAAAAAAAAAGIKAAAAAAAAZgoAAAAAAAAAAAAAbgoAAAAAAAByCgAAAAAAAAAAAACmCgAAAAAAAKoKAAAAAAAAAAAAAN4KAAAAAAAA4goAAAAAAAAAAAAAEwsAAAAAAAAXCwAAAAAAAAAAAAAfCwAAAAAAACMLAAAAAAAAAAAAAFoLAAAAAAAAXgsAAAAAAAAAAAAAqQsAAAAAAACtCwAAAAAAAAAAAAD3CwAAAAAAAPsLAAAAAAAAAAAAAAEMAAAAAAAABQwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSCwAAAAAAALwJAAAAAAAAAAAAAAAA8L8"
				],
				[
					268,
					22,
					"right_delete",
					null,
					"FgAAAMQJAAAAAAAAxAkAAAAAAAABAAAAc8QJAAAAAAAAxAkAAAAAAAABAAAAdMQJAAAAAAAAxAkAAAAAAAABAAAAZMQJAAAAAAAAxAkAAAAAAAABAAAAOsQJAAAAAAAAxAkAAAAAAAABAAAAOsQJAAAAAAAAxAkAAAAAAAABAAAAdsQJAAAAAAAAxAkAAAAAAAABAAAAZcQJAAAAAAAAxAkAAAAAAAABAAAAY8QJAAAAAAAAxAkAAAAAAAABAAAAdMQJAAAAAAAAxAkAAAAAAAABAAAAb8QJAAAAAAAAxAkAAAAAAAABAAAAcsQJAAAAAAAAxAkAAAAAAAABAAAAPMQJAAAAAAAAxAkAAAAAAAABAAAAZsQJAAAAAAAAxAkAAAAAAAABAAAAc8QJAAAAAAAAxAkAAAAAAAABAAAAOsQJAAAAAAAAxAkAAAAAAAABAAAAOsQJAAAAAAAAxAkAAAAAAAABAAAAcMQJAAAAAAAAxAkAAAAAAAABAAAAYcQJAAAAAAAAxAkAAAAAAAABAAAAdMQJAAAAAAAAxAkAAAAAAAABAAAAaMQJAAAAAAAAxAkAAAAAAAABAAAAPsQJAAAAAAAAxAkAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADECQAAAAAAAMQJAAAAAAAAAAAAAAAA8L8"
				],
				[
					270,
					21,
					"right_delete",
					null,
					"FQAAAGAKAAAAAAAAYAoAAAAAAAABAAAAc2AKAAAAAAAAYAoAAAAAAAABAAAAdGAKAAAAAAAAYAoAAAAAAAABAAAAZGAKAAAAAAAAYAoAAAAAAAABAAAAOmAKAAAAAAAAYAoAAAAAAAABAAAAOmAKAAAAAAAAYAoAAAAAAAABAAAAdmAKAAAAAAAAYAoAAAAAAAABAAAAZWAKAAAAAAAAYAoAAAAAAAABAAAAY2AKAAAAAAAAYAoAAAAAAAABAAAAdGAKAAAAAAAAYAoAAAAAAAABAAAAb2AKAAAAAAAAYAoAAAAAAAABAAAAcmAKAAAAAAAAYAoAAAAAAAABAAAAPGAKAAAAAAAAYAoAAAAAAAABAAAAZmAKAAAAAAAAYAoAAAAAAAABAAAAc2AKAAAAAAAAYAoAAAAAAAABAAAAOmAKAAAAAAAAYAoAAAAAAAABAAAAOmAKAAAAAAAAYAoAAAAAAAABAAAAcGAKAAAAAAAAYAoAAAAAAAABAAAAYWAKAAAAAAAAYAoAAAAAAAABAAAAdGAKAAAAAAAAYAoAAAAAAAABAAAAaGAKAAAAAAAAYAoAAAAAAAABAAAAPg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABgCgAAAAAAAGAKAAAAAAAAAAAAAAAAUkA"
				],
				[
					271,
					1,
					"right_delete",
					null,
					"AQAAAGAKAAAAAAAAYAoAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABgCgAAAAAAAGAKAAAAAAAAAAAAAAAA8L8"
				],
				[
					277,
					1,
					"paste",
					null,
					"AgAAABAJAAAAAAAAGAkAAAAAAAAAAAAAGAkAAAAAAAAYCQAAAAAAAAsAAABzdGQ6OnN0cmluZw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQCQAAAAAAABsJAAAAAAAAAAAAAAAA8L8"
				],
				[
					280,
					1,
					"paste",
					null,
					"AgAAAEkJAAAAAAAAUQkAAAAAAAAAAAAAUQkAAAAAAABRCQAAAAAAAAsAAABzdGQ6OnN0cmluZw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABUCQAAAAAAAEkJAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "Searching 59 files for \"USE_OPENCV\" (case sensitive)\n\n0 matches\n\nSearching 1308 files for \"OpenCV_INCLUDE_DIR\" (case sensitive)\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/cmake/modules/FindOpenCV.cmake:\n   10  # variable or an environment variable).\n   11  \n   12: find_path (OpenCV_INCLUDE_DIR\n   13             NAMES opencv4/opencv2/opencv.hpp opencv2/opencv.hpp\n   14             PATHS\n   ..\n   19             )\n   20  \n   21: set (_ocv_include_root \"${OpenCV_INCLUDE_DIR}\")\n   22: if (OpenCV_INCLUDE_DIR AND EXISTS \"${OpenCV_INCLUDE_DIR}/opencv4/opencv2/core/version.hpp\")\n   23:     set (OpenCV_INCLUDE_DIR \"${OpenCV_INCLUDE_DIR}/opencv4\")\n   24  endif ()\n   25: set (_ocv_version_file \"${OpenCV_INCLUDE_DIR}/opencv2/core/version.hpp\")\n   26  if (EXISTS \"${_ocv_version_file}\")\n   27      file (STRINGS \"${_ocv_version_file}\" TMP REGEX \"^#define CV_VERSION_EPOCH .*$\")\n   ..\n   68  include (FindPackageHandleStandardArgs)\n   69  FIND_PACKAGE_HANDLE_STANDARD_ARGS (OpenCV\n   70:                 REQUIRED_VARS OpenCV_LIBS OpenCV_INCLUDE_DIR OpenCV_VERSION\n   71                  VERSION_VAR   OpenCV_VERSION )\n   72  \n   73  if (OPENCV_FOUND)\n   74:     set (OpenCV_INCLUDES ${OpenCV_INCLUDE_DIR})\n   75      set (OpenCV_LIBRARIES ${OpenCV_LIBS})\n   76  endif ()\n   77  \n   78: MARK_AS_ADVANCED (OpenCV_INCLUDE_DIR OpenCV_LIBS)\n   79  unset (_ocv_version_file)\n   80  unset (_ocv_include_root)\n\n10 matches in 1 file\n\n\nSearching 1308 files for \"OpenCV_LIBS\" (case sensitive)\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/cmake/modules/FindOpenCV.cmake:\n   62                    HINTS ${libdirs})\n   63      if (${component}_lib)\n   64:         set (OpenCV_LIBS ${OpenCV_LIBS} ${${component}_lib})\n   65      endif ()\n   66  endforeach ()\n   ..\n   68  include (FindPackageHandleStandardArgs)\n   69  FIND_PACKAGE_HANDLE_STANDARD_ARGS (OpenCV\n   70:                 REQUIRED_VARS OpenCV_LIBS OpenCV_INCLUDE_DIR OpenCV_VERSION\n   71                  VERSION_VAR   OpenCV_VERSION )\n   72  \n   73  if (OPENCV_FOUND)\n   74      set (OpenCV_INCLUDES ${OpenCV_INCLUDE_DIR})\n   75:     set (OpenCV_LIBRARIES ${OpenCV_LIBS})\n   76  endif ()\n   77  \n   78: MARK_AS_ADVANCED (OpenCV_INCLUDE_DIR OpenCV_LIBS)\n   79  unset (_ocv_version_file)\n   80  unset (_ocv_include_root)\n\n5 matches in 1 file\n\n\nSearching 1308 files for \"OpenCV\" (case sensitive)\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/CHANGES.md:\n  645    (2.2.2)\n  646  * Avoid possible link errors by fully hiding IBA functions taking IplImage\n  647:   parameters, when no OpenCV headers are encountered. #2568 (2.2.2)\n  648  * In (obsolete) FindOpenImageIO.cmake, avoid CMake warnings by changing\n  649    the name `OPENIMAGEIO_FOUND` -> `OpenImageIO_FOUND`. #2578 (2.2.3)\n  ...\n 1793        as having unasociated alpha already, they will not bracket the color\n 1794        conversion with the requested unpremult/premult. #1864 (1.9.2)\n 1795:     * Updated the OpenCV interoperability with new functions to_OpenCV (make\n 1796:       an ImageBuf out of a cv::Mat) and from_OpenCV (fill in a cv::Mat with\n 1797        the contents of an ImageBuf). Deprecated the old from_IplImage and\n 1798:       to_IplImage, which are very OpenCV-1.x-centric. (2.0.2)\n 1799  * **ImageCache/TextureSystem:**\n 1800      * ImageCache and TextureSystem now have `close(filename)` and\n ....\n 2156  * Fixes for Windows when making Unicode builds, and fix Plugin::dlopen\n 2157    on Windows to properly support UTF-8 filenames. #1454 (2.0.1)\n 2158: * Support added for OpenCV 4.0. (2.0.1)\n 2159  \n 2160  Developer goodies / internals:\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/INSTALL.md:\n   45         through 2021)\n   46       * Note that OpenVDB 8.0+ requires C++14 or higher.\n   47:  * If you want support for converting to and from OpenCV data structures,\n   48     or for capturing images from a camera:\n   49:      * OpenCV 2.x, 3.x, or 4.x (tested through 4.5)\n   50   * If you want support for GIF images:\n   51       * giflib >= 4.1 (tested through 5.2; 5.0+ is strongly recommended for\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/Makefile:\n  394  \t@echo \"      Note that it is case sensitive! The list of package names is:\"\n  395  \t@echo \"          DCMTK  FFmpeg  Field3D  Freetype  GIF  JPEGTurbo\"\n  396: \t@echo \"          LibRaw  OpenColorIO  OpenCV  OpenGL  OpenJpeg  OpenVDB\"\n  397  \t@echo \"          PTex  R3DSDK  TBB  TIFF  Webp\"\n  398  \t@echo \"  Finding and Using Dependencies:\"\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/.github/workflows/ci.yml:\n  498    linux-oldest:\n  499      # Oldest versions of the dependencies that we can muster, and various\n  500:     # things disabled (no SSE, OCIO, or OpenCV, don't embed plugins).\n  501      name: \"Linux oldest/hobbled: gcc4.8/C++11 py2.7 boost-1.66 exr-2.2 no-sse no-ocio\"\n  502      runs-on: ubuntu-latest\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/cmake/externalpackages.cmake:\n  166  checked_find_package (OpenColorIO\n  167                     DEFINITIONS  -DUSE_OCIO=1 -DUSE_OPENCOLORIO=1)\n  168: checked_find_package (OpenCV\n  169                     DEFINITIONS  -DUSE_OPENCV=1)\n  170  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/cmake/modules/FindOpenCV.cmake:\n    1: # - Find OpenCV\n    2: # Find the OpenCV library\n    3  # This module defines\n    4: #  OpenCV_VERSION, the version string of OpenCV\n    5: #  OpenCV_INCLUDES, where to find header files\n    6: #  OpenCV_LIBRARIES, the libraries needed to use OpenCV\n    7: #  OpenCV_DEFINITIONS, the definitions needed to use OpenCV\n    8  #\n    9: # You can provide a location hint with OpenCV_ROOT (either a defined CMake\n   10  # variable or an environment variable).\n   11  \n   12: find_path (OpenCV_INCLUDE_DIR\n   13             NAMES opencv4/opencv2/opencv.hpp opencv2/opencv.hpp\n   14             PATHS\n   ..\n   19             )\n   20  \n   21: set (_ocv_include_root \"${OpenCV_INCLUDE_DIR}\")\n   22: if (OpenCV_INCLUDE_DIR AND EXISTS \"${OpenCV_INCLUDE_DIR}/opencv4/opencv2/core/version.hpp\")\n   23:     set (OpenCV_INCLUDE_DIR \"${OpenCV_INCLUDE_DIR}/opencv4\")\n   24  endif ()\n   25: set (_ocv_version_file \"${OpenCV_INCLUDE_DIR}/opencv2/core/version.hpp\")\n   26  if (EXISTS \"${_ocv_version_file}\")\n   27      file (STRINGS \"${_ocv_version_file}\" TMP REGEX \"^#define CV_VERSION_EPOCH .*$\")\n   ..\n   36      string (REGEX MATCHALL \"[0-9]+\" CV_VERSION_REVISION ${TMP})\n   37      if (CV_VERSION_EPOCH)\n   38:         set (OpenCV_VERSION \"${CV_VERSION_EPOCH}.${CV_VERSION_MAJOR}.${CV_VERSION_MINOR}\")\n   39      else ()\n   40:         set (OpenCV_VERSION \"${CV_VERSION_MAJOR}.${CV_VERSION_MINOR}.${CV_VERSION_REVISION}\")\n   41      endif ()\n   42  endif ()\n   ..\n   50               )\n   51  \n   52: if (NOT ${OpenCV_VERSION} VERSION_LESS 4.0.0)\n   53      set (opencv_components opencv_core opencv_imgproc opencv_videoio)\n   54: elseif (NOT ${OpenCV_VERSION} VERSION_LESS 3.0.0)\n   55      set (opencv_components opencv_videoio opencv_imgproc opencv_core)\n   56: else (NOT ${OpenCV_VERSION} VERSION_LESS 2.0.0)\n   57      set (opencv_components opencv_highgui opencv_imgproc opencv_core)\n   58  endif ()\n   ..\n   62                    HINTS ${libdirs})\n   63      if (${component}_lib)\n   64:         set (OpenCV_LIBS ${OpenCV_LIBS} ${${component}_lib})\n   65      endif ()\n   66  endforeach ()\n   67  \n   68  include (FindPackageHandleStandardArgs)\n   69: FIND_PACKAGE_HANDLE_STANDARD_ARGS (OpenCV\n   70:                 REQUIRED_VARS OpenCV_LIBS OpenCV_INCLUDE_DIR OpenCV_VERSION\n   71:                 VERSION_VAR   OpenCV_VERSION )\n   72  \n   73  if (OPENCV_FOUND)\n   74:     set (OpenCV_INCLUDES ${OpenCV_INCLUDE_DIR})\n   75:     set (OpenCV_LIBRARIES ${OpenCV_LIBS})\n   76  endif ()\n   77  \n   78: MARK_AS_ADVANCED (OpenCV_INCLUDE_DIR OpenCV_LIBS)\n   79  unset (_ocv_version_file)\n   80  unset (_ocv_include_root)\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/doc/CHANGES-1.x.md:\n 1222     the flag to compile with libc++ is now always called USE_LIBCPLUSPLUS,\n 1223     not sometimes OIIO_BUILD_LIBCPLUSPLUS. #1404 (1.7.3)\n 1224:  * Overhaul OpenCV dependency finding and make it work with OpenCV 3.x.\n 1225     #1409 (1.7.3/1.6.13)\n 1226   * Allow custom JPEG_PATH to hint location of JPEG library. #1411\n ....\n 1355  * Remove old embedded Ptex, now must find Ptex externally. Also modified\n 1356    the build scripts to correctly handle newer versions of Ptex. #1400\n 1357: * Overhaul OpenCV dependency finding and make it work with OpenCV 3.x. #1409\n 1358  * Allow custom JPEG_PATH to hint location of JPEG library. #1411\n 1359  \n ....\n 1875   * Fix signed/unsigned comparison error. #1186 (1.6.4)\n 1876   * Top-level Makefile option USE_OPENCV=0 to turn off even searching for\n 1877:    OpenCV components. #1194 (1.6.4/1.5.18)\n 1878   * If a system-installed (external) PTex implementation is found, use\n 1879     it.  Only use the \"bundled\" version if no other is found. Also add a\n ....\n 2022    read with very old versions of libtiff. #1185\n 2023  * Top-level Makefile option USE_OPENCV=0 to turn off even searching for\n 2024:   OpenCV components. #1194\n 2025  \n 2026  Release 1.5.17 (13 Jul 2015) -- compared to 1.5.16)\n ....\n 3608      tile cache rather than unique locks).\n 3609  * New ImageBufAlgo functions:\n 3610:     * `fromIplImage()` : converts/copies an OpenCV image to an ImageBuf.\n 3611:     * `capture_image()` : captures from a camera device (only if OpenCV is found)\n 3612      * `over()` : Porter/Duff \"over\" compositing operation\n 3613      * `render_text()` : render text into an image\n ....\n 3617      * `channels()` : select, shuffle, truncate, or extend channels of an image.\n 3618  * New oiiotool commands:\n 3619:     * `--capture` : captures from a camera device (only if OpenCV is found)\n 3620      * `--pattern` constant : creates a constant-color image\n 3621      * `--over` : Porter/Duff \"over\" compositing operation\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/doc/imagebufalgo.rst:\n 1752  |\n 1753  \n 1754: OpenCV interoperability is performed by the `from_OpenCV()` and\n 1755: `to_OpenCV()` functions:\n 1756  \n 1757: .. doxygenfunction:: from_OpenCV\n 1758: .. doxygenfunction:: to_OpenCV\n 1759  \n 1760  .. doxygenfunction:: capture_image(int, TypeDesc)\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/doc/imagebufalgo.tex:\n 2642  \n 2643  \n 2644: \\apiitem{ImageBuf {\\ce from_OpenCV} (const cv::Mat\\& mat, TypeDesc convert=TypeUnknown, \\\\\n 2645          \\bigspc  ROI roi=\\{\\}, int nthreads=0)}\n 2646: \\index{ImageBufAlgo!from_OpenCV} \\indexapi{from_OpenCV}\n 2647: \\index{OpenCV}\n 2648: Convert an OpenCV {\\cf cv::Mat} into an \\ImageBuf, copying the pixels\n 2649  (optionally converting to the pixel data type specified by {\\cf convert}, if\n 2650  not {\\cf UNKNOWN}, which means to preserve the original data type if\n 2651  possible).  Return true if ok, false if it couldn't figure out how to\n 2652  make the conversion from Mat to ImageBuf. If OpenImageIO was compiled\n 2653: without OpenCV support, this function will return an empty image with\n 2654  error message set.\n 2655  \n ....\n 2663  \n 2664  \n 2665: \\apiitem{bool {\\ce to_OpenCV} (cv::Mat\\& dst, const ImageBuf\\& src,\\\\\n 2666          \\bigspc  ROI roi=\\{\\}, int nthreads=0)}\n 2667: \\index{ImageBufAlgo!to_OpenCV} \\indexapi{to_OpenCV}\n 2668: \\index{OpenCV}\n 2669: Construct an OpenCV {\\cf cv::Mat} containing the contents of \\ImageBuf src,\n 2670  and return true. If it is not possible, or if OpenImageIO was compiled\n 2671: without OpenCV support, then return false. Note that OpenCV only supports up\n 2672  to 4 channels, so images with more than 4 channels will be truncated in the\n 2673  conversion.\n ....\n 2686  Capture a still image from a designated camera.  If able to do so,\n 2687  store the image in {\\cf dst} and return {\\cf true}.  If there is no such device,\n 2688: or support for camera capture is not available (such as if OpenCV\n 2689  support was not enabled at compile time), return {\\cf false} and do not\n 2690  alter {\\cf dst}.\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/include/OpenImageIO/imagebufalgo.h:\n   24  \n   25  #if !defined(__OPENCV_CORE_TYPES_H__) && !defined(OPENCV_CORE_TYPES_H)\n   26: struct IplImage;  // Forward declaration; used by Intel Image lib & OpenCV\n   27  namespace cv {\n   28      class Mat;\n   ..\n 2053  \n 2054  \n 2055: /// Convert an OpenCV cv::Mat into an ImageBuf, copying the pixels\n 2056  /// (optionally converting to the pixel data type specified by `convert`, if\n 2057  /// not UNKNOWN, which means to preserve the original data type if\n 2058  /// possible).  Return true if ok, false if it couldn't figure out how to\n 2059  /// make the conversion from Mat to ImageBuf. If OpenImageIO was compiled\n 2060: /// without OpenCV support, this function will return an empty image with\n 2061  /// error message set.\n 2062  OIIO_API ImageBuf\n 2063: from_OpenCV (const cv::Mat& mat, TypeDesc convert = TypeUnknown,\n 2064               ROI roi={}, int nthreads=0);\n 2065  \n 2066: /// Construct an OpenCV cv::Mat containing the contents of ImageBuf src, and\n 2067  /// return true. If it is not possible, or if OpenImageIO was compiled\n 2068: /// without OpenCV support, then return false. Note that OpenCV only\n 2069  /// supports up to 4 channels, so >4 channel images will be truncated in the\n 2070  /// conversion.\n 2071: OIIO_API bool to_OpenCV (cv::Mat& dst, const ImageBuf& src,\n 2072                           ROI roi={}, int nthreads=0);\n 2073  \n ....\n 2075  /// Capture a still image from a designated camera.  If able to do so,\n 2076  /// store the image in dst and return true.  If there is no such device,\n 2077: /// or support for camera capture is not available (such as if OpenCV\n 2078  /// support was not enabled at compile time), return false and do not\n 2079  /// alter dst.\n ....\n 2093  \n 2094  #if defined(__OPENCV_CORE_TYPES_H__) || defined(OPENCV_CORE_TYPES_H)\n 2095: // These declarations are only visible if the OpenCV headers have already\n 2096  // been encountered.\n 2097  \n 2098  #ifndef DOXYGEN_SHOULD_SKIP_THIS\n 2099: // DEPRECATED(2.0). The OpenCV 1.x era IplImage-based functions should be\n 2100: // avoided, giving preference to from_OpenCV.\n 2101  ImageBuf OIIO_API from_IplImage (const IplImage *ipl,\n 2102                                   TypeDesc convert=TypeUnknown);\n ....\n 2108  }\n 2109  \n 2110: // DEPRECATED(2.0). The OpenCV 1.x era IplImage-based functions should be\n 2111: // avoided, giving preference to from_OpenCV.\n 2112  OIIO_API IplImage* to_IplImage (const ImageBuf &src);\n 2113  #endif  // DOXYGEN_SHOULD_SKIP_THIS\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/libOpenImageIO/CMakeLists.txt:\n  124                                  ${CMAKE_INSTALL_FULL_INCLUDEDIR}\n  125                                  ${IMATH_INCLUDES} ${OPENEXR_INCLUDES}\n  126:                                 ${OpenCV_INCLUDES}\n  127                              PRIVATE\n  128                                  ${ROBINMAP_INCLUDES}\n  ...\n  154              # For OpenEXR <= 2.3:\n  155              ${OPENEXR_LIBRARIES}\n  156:             ${OpenCV_LIBRARIES}\n  157              ${SANITIZE_LIBRARIES}\n  158              ${format_plugin_libs} # Add all the target link libraries from the plugins\n  ...\n  243  \n  244      add_executable (imagebufalgo_test imagebufalgo_test.cpp)\n  245:     target_link_libraries (imagebufalgo_test PRIVATE OpenImageIO ${OpenCV_LIBRARIES})\n  246      set_target_properties (imagebufalgo_test PROPERTIES FOLDER \"Unit Tests\")\n  247      add_test (unit_imagebufalgo ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/imagebufalgo_test)\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/libOpenImageIO/imagebufalgo_opencv.cpp:\n    5  \n    6  /// \\file\n    7: /// Implementation of ImageBufAlgo algorithms related to OpenCV.\n    8: /// These are nonfunctional if OpenCV is not found at build time.\n    9  \n   10  #include <OpenImageIO/platform.h>\n   ..\n   79      TypeDesc dstformat = (convert != TypeDesc::UNKNOWN) ? convert : srcformat;\n   80      ImageSpec spec(ipl->width, ipl->height, ipl->nChannels, dstformat);\n   81:     // N.B. The OpenCV headers say that ipl->alphaChannel,\n   82:     // ipl->colorModel, and ipl->channelSeq are ignored by OpenCV.\n   83  \n   84      if (ipl->dataOrder != IPL_DATA_ORDER_PIXEL) {\n   85:         // We don't handle separate color channels, and OpenCV doesn't either\n   86          dst.errorf(\"Unsupported IplImage data order %d\", (int)ipl->dataOrder);\n   87          return dst;\n   ..\n   98                    dstformat, spec.pixel_bytes(), spec.scanline_bytes(), 0);\n   99      // FIXME - honor dataOrder.  I'm not sure if it is ever used by\n  100:     // OpenCV.  Fix when it becomes a problem.\n  101  \n  102:     // OpenCV uses BGR ordering\n  103      // FIXME: what do they do with alpha?\n  104      if (spec.nchannels >= 3) {\n  ...\n  119  #else\n  120      dst.errorf(\n  121:         \"fromIplImage not supported -- no OpenCV support at compile time\");\n  122  #endif\n  123  \n  ...\n  158      } else if (spec.format == TypeDesc(TypeDesc::HALF)) {\n  159          dstFormat = IPL_DEPTH_32F;\n  160:         // OpenCV does not support half types. Switch to float instead.\n  161          dstSpecFormat = TypeDesc(TypeDesc::FLOAT);\n  162      } else if (spec.format == TypeDesc(TypeDesc::FLOAT)) {\n  ...\n  194      }\n  195  \n  196:     // OpenCV uses BGR ordering\n  197      if (spec.nchannels == 3) {\n  198          cvCvtColor(ipl, ipl, CV_RGB2BGR);\n  ...\n  229  \n  230  ImageBuf\n  231: ImageBufAlgo::from_OpenCV(const cv::Mat& mat, TypeDesc convert, ROI roi,\n  232                            int nthreads)\n  233  {\n  234:     pvt::LoggedTimer logtime(\"IBA::from_OpenCV\");\n  235      ImageBuf dst;\n  236  #ifdef USE_OPENCV\n  ...\n  244      case CV_64F: srcformat = TypeDesc::DOUBLE; break;\n  245      default:\n  246:         dst.errorf(\"Unsupported OpenCV data type, depth=%d\", mat.depth());\n  247          return dst;\n  248      }\n  ...\n  262                             nthreads);\n  263  \n  264:     // OpenCV uses BGR ordering\n  265      if (spec.nchannels >= 3) {\n  266          OIIO_MAYBE_UNUSED bool ok = true;\n  267:         OIIO_DISPATCH_TYPES(ok, \"from_OpenCV R/B swap\", RBswap, dstformat, dst,\n  268                              roi, nthreads);\n  269      }\n  ...\n  271  #else\n  272      dst.errorf(\n  273:         \"from_OpenCV() not supported -- no OpenCV support at compile time\");\n  274  #endif\n  275  \n  ...\n  280  \n  281  bool\n  282: ImageBufAlgo::to_OpenCV(cv::Mat& dst, const ImageBuf& src, ROI roi,\n  283                          int nthreads)\n  284  {\n  285:     pvt::LoggedTimer logtime(\"IBA::to_OpenCV\");\n  286  #ifdef USE_OPENCV\n  287      if (!roi.defined())\n  ...\n  336      }\n  337  \n  338:     // OpenCV uses BGR ordering\n  339      if (chans == 3) {\n  340          cv::cvtColor(mat, mat, cv::COLOR_RGB2BGR);\n  ...\n  396          auto cvcam = cameras[cameranum];\n  397          if (!cvcam) {\n  398:             dst.errorf(\"Could not create a capture camera (OpenCV error)\");\n  399              return dst;  // failed somehow\n  400          }\n  401          (*cvcam) >> frame;\n  402          if (frame.empty()) {\n  403:             dst.errorf(\"Could not cvQueryFrame (OpenCV error)\");\n  404              return dst;  // failed somehow\n  405          }\n  ...\n  407  \n  408      logtime.stop();\n  409:     dst = from_OpenCV(frame, convert);\n  410      logtime.start();\n  411      if (!dst.has_error()) {\n  ...\n  423  #else\n  424      dst.errorf(\n  425:         \"capture_image not supported -- no OpenCV support at compile time\");\n  426  #endif\n  427      return dst;\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/libOpenImageIO/imagebufalgo_test.cpp:\n  943  {\n  944  #if USE_OPENCV\n  945:     std::cout << \"Testing OpenCV round trip\\n\";\n  946:     // Make a gradient RGB image, convert to OpenCV cv::Mat, then convert\n  947      // that back to ImageBuf, make sure the round trip has the same pixels\n  948      // as the original image.\n  ...\n  952                               ROI(0, 64, 0, 64, 0, 1, 0, 3));\n  953      cv::Mat mat;\n  954:     ImageBufAlgo::to_OpenCV(mat, src);\n  955      OIIO_CHECK_ASSERT(!mat.empty());\n  956:     ImageBuf dst = ImageBufAlgo::from_OpenCV(mat);\n  957      OIIO_CHECK_ASSERT(!dst.has_error());\n  958      auto comp = ImageBufAlgo::compare(src, dst, 0.0f, 0.0f);\n\n119 matches across 13 files\n\n\nSearching 1308 files for \"squish\" (case sensitive)\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/CHANGES.md:\n  855    to auto-download if pybind11 is found on the system already but is not an\n  856    adequately new version. #2453\n  857: * If libsquish is found on the system at build time, use it, rather than\n  858    the \"embedded\" copy. This can improve build times of OIIO, and also helps\n  859    us comply with Debian packaging rules that forbid using embedded versions\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/conanfile.txt:\n   25  # ptex\n   26  # qt5\n   27: # libsquish\n   28  \n   29  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/INSTALL.md:\n   56       * Avoid libheif 1.10 on Mac, it is very broken. Libheif 1.11 is fine.\n   57   * If you want support for DDS files:\n   58:      * libsquish >= 1.13 (tested through 1.15)\n   59       * But... if not found on the system, an embedded version will be used.\n   60   * If you want support for DICOM medical image files:\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/THIRD-PARTY.md:\n  105  * Squish\n  106    Copyright 2006 Simon Brown si@sjbrown.co.uk\n  107:   http://sjbrown.co.uk/?code=squish\n  108  \n  109  * PugiXML http://pugixml.org/ https://github.com/zeux/pugixml\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/ext/fmt/ChangeLog.rst:\n  202         log(__FILE__, __LINE__, FMT_STRING(format), __VA_ARGS__)\n  203  \n  204:      MY_LOG(\"invalid squishiness: {}\", 42);\n  205  \n  206  * Replaced ``snprintf`` fallback with a faster internal IEEE 754 ``float`` and\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/ext/fmt/doc/api.rst:\n   93        log(__FILE__, __LINE__, FMT_STRING(format), __VA_ARGS__)\n   94  \n   95:     MY_LOG(\"invalid squishiness: {}\", 42);\n   96  \n   97  Note that ``vlog`` is not parameterized on argument types which improves compile\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/build-scripts/gh-installdeps.bash:\n   34          libtiff-dev libgif-dev libpng-dev libraw-dev libwebp-dev \\\n   35          libavcodec-dev libavformat-dev libswscale-dev libavutil-dev \\\n   36:         dcmtk libsquish-dev libopenvdb-dev \\\n   37          libfreetype6-dev \\\n   38          locales wget \\\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/build-scripts/gh-win-installdeps.bash:\n   67  # vcpkg install libraw:x64-windows\n   68  # vcpkg install openjpeg:x64-windows\n   69: # vcpkg install libsquish:x64-windows\n   70  # # vcpkg install ffmpeg:x64-windows   # takes FOREVER!\n   71  # # vcpkg install webp:x64-windows  # No such vcpkg package?a\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/build-scripts/install_homebrew_deps.bash:\n   33  brew install --display-times -q libpng giflib webp jpeg-turbo openjpeg\n   34  brew install --display-times -q freetype libraw dcmtk pybind11 numpy || true\n   35: brew install --display-times -q ffmpeg libheif libsquish ptex || true\n   36  brew install --display-times -q tbb || true\n   37  # No OpenVDB until it's upgraded to use Imath 3\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/cmake/compiler.cmake:\n  446                                 \"src/dpx.imageio/libdpx/*\"\n  447                                 \"src/cineon.imageio/libcineon/*\"\n  448:                                \"src/dds.imageio/squish/*\"\n  449                                 \"src/gif.imageio/gif.h\"\n  450                                 \"src/hdr.imageio/rgbe.cpp\"\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/cmake/externalpackages.cmake:\n  300  \n  301  ###########################################################################\n  302: # libsquish\n  303  \n  304  option (USE_EMBEDDED_LIBSQUISH\n  305:         \"Force use of embedded Libsquish, even if external is found\" OFF)\n  306  if (NOT USE_EMBEDDED_LIBSQUISH)\n  307:     checked_find_package (Libsquish)\n  308  endif ()\n  309  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/cmake/modules/FindLibsquish.cmake:\n    1: # Module to find Libsquish\n    2  #\n    3  # This module will first look into the directories defined by the variables:\n    4: #   - Libsquish_ROOT, LIBSQUISH_INCLUDE_PATH, LIBSQUISH_LIBRARY_PATH\n    5  #\n    6  # This module defines the following variables:\n    7  #\n    8: # Libsquish_FOUND            True if Libsquish was found.\n    9: # LIBSQUISH_INCLUDES         Where to find Libsquish headers\n   10: # LIBSQUISH_LIBRARIES        List of libraries to link against when using Libsquish\n   11: # LIBSQUISH_VERSION          Version of Libsquish (e.g., 3.6.2)\n   12  \n   13  include (FindPackageHandleStandardArgs)\n   14  \n   15: find_path (LIBSQUISH_INCLUDE_DIR squish.h\n   16             HINTS\n   17                 ${LIBSQUISH_INCLUDE_PATH}\n   18                 ENV LIBSQUISH_INCLUDE_PATH\n   19:            DOC \"The directory where Libsquish headers reside\")\n   20  \n   21: find_library (LIBSQUISH_LIBRARY squish\n   22                HINTS\n   23                    ${LIBSQUISH_LIBRARY_PATH}\n   24                    ENV LIBSQUISH_LIBRARY_PATH\n   25:               DOC \"The Libsquish libraries\")\n   26  \n   27: find_package_handle_standard_args (Libsquish\n   28      REQUIRED_VARS\n   29          LIBSQUISH_INCLUDE_DIR\n   ..\n   31      )\n   32  \n   33: if (Libsquish_FOUND)\n   34      set (LIBSQUISH_INCLUDES ${LIBSQUISH_INCLUDE_DIR})\n   35      set (LIBSQUISH_LIBRARIES ${LIBSQUISH_LIBRARY})\n   36  \n   37:     if (NOT TARGET Libsquish::Libsquish)\n   38:         add_library(Libsquish::Libsquish UNKNOWN IMPORTED)\n   39:         set_target_properties(Libsquish::Libsquish PROPERTIES\n   40              INTERFACE_INCLUDE_DIRECTORIES \"${LIBSQUISH_INCLUDES}\")\n   41  \n   42:         set_property(TARGET Libsquish::Libsquish APPEND PROPERTY\n   43              IMPORTED_LOCATION \"${LIBSQUISH_LIBRARIES}\")\n   44      endif ()\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/CMakeLists.txt:\n    3  # https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md\n    4  \n    5: if (Libsquish_FOUND)\n    6:     # External libsquish was found -- use it\n    7      add_oiio_plugin (ddsinput.cpp\n    8:                      LINK_LIBRARIES Libsquish::Libsquish\n    9                       )\n   10  else ()\n   11:     # No external libsquish was found -- use the embedded version.\n   12:     add_oiio_plugin (ddsinput.cpp squish/alpha.cpp squish/clusterfit.cpp\n   13:                  squish/colourblock.cpp squish/colourfit.cpp squish/colourset.cpp\n   14:                  squish/maths.cpp squish/rangefit.cpp squish/singlecolourfit.cpp\n   15:                  squish/squish.cpp\n   16:         INCLUDE_DIRS \"${CMAKE_CURRENT_SOURCE_DIR}/squish\")\n   17  endif ()\n   18  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/ddsinput.cpp:\n   14  \n   15  #include \"dds_pvt.h\"\n   16: #include \"squish.h\"\n   17  \n   18  OIIO_PLUGIN_NAMESPACE_BEGIN\n   ..\n  253      // determine the number of channels we have\n  254      if (m_dds.fmt.flags & DDS_PF_FOURCC) {\n  255:         // squish decompresses everything to RGBA anyway\n  256          /*if (m_dds.fmt.fourCC == DDS_4CC_DXT1)\n  257              m_nchans = 3; // no alpha in DXT1\n  ...\n  351                      // only check for DXT1 - all other formats have same block\n  352                      // size\n  353:                     len = squish::GetStorageRequirements(w, h,\n  354                                                           m_dds.fmt.fourCC\n  355                                                                   == DDS_4CC_DXT1\n  356:                                                              ? squish::kDxt1\n  357:                                                              : squish::kDxt5);\n  358                  else\n  359                      len = w * h * d * m_Bpp;\n  ...\n  365              if (m_dds.fmt.flags & DDS_PF_FOURCC)\n  366                  // only check for DXT1 - all other formats have same block size\n  367:                 len = squish::GetStorageRequirements(w, h,\n  368                                                       m_dds.fmt.fourCC\n  369                                                               == DDS_4CC_DXT1\n  370:                                                          ? squish::kDxt1\n  371:                                                          : squish::kDxt5);\n  372              else\n  373                  len = w * h * d * m_Bpp;\n  ...\n  514          int flags = 0;\n  515          switch (m_dds.fmt.fourCC) {\n  516:         case DDS_4CC_DXT1: flags = squish::kDxt1; break;\n  517          // DXT2 and 3 are the same, only 2 has pre-multiplied alpha\n  518          case DDS_4CC_DXT2:\n  519:         case DDS_4CC_DXT3: flags = squish::kDxt3; break;\n  520          // DXT4 and 5 are the same, only 4 has pre-multiplied alpha\n  521          case DDS_4CC_DXT4:\n  522:         case DDS_4CC_DXT5: flags = squish::kDxt5; break;\n  523          }\n  524          // create source buffer\n  525:         std::vector<squish::u8> tmp(\n  526:             squish::GetStorageRequirements(w, h, flags));\n  527          // load image into buffer\n  528          if (!fread(&tmp[0], tmp.size(), 1))\n  529              return false;\n  530          // decompress image\n  531:         squish::DecompressImage(dst, w, h, &tmp[0], flags);\n  532          tmp.clear();\n  533          // correct pre-multiplied alpha, if necessary\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/alpha.cpp:\n   28  #include <algorithm>\n   29  \n   30: namespace squish {\n   31  \n   32  static int FloatToInt( float a, int limit )\n   ..\n  347  }\n  348  \n  349: } // namespace squish\n  350  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/alpha.h:\n   27  #define SQUISH_ALPHA_H\n   28  \n   29: #include \"squish.h\"\n   30  \n   31: namespace squish {\n   32  \n   33  void CompressAlphaDxt3( u8 const* rgba, int mask, void* block );\n   ..\n   37  void DecompressAlphaDxt5( u8* rgba, void const* block );\n   38  \n   39: } // namespace squish\n   40  \n   41  #endif // ndef SQUISH_ALPHA_H\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/ChangeLog:\n   12  1.8\n   13  * Switched from using floor to trunc for much better SSE performance (again)\n   14: * Xcode build now expects libpng in /usr/local for extra/squishpng\n   15  \n   16  1.7\n   ..\n   37  1.2\n   38  * Added provably optimal single colour compressor\n   39: * Added extra/squishgen.cpp that generates single colour lookup tables\n   40  \n   41  1.1\n   ..\n   45  * Added CompressImage function\n   46  * Added DecompressImage function\n   47: * Moved squishtool.cpp to extra/squishpng.cpp\n   48: * Added extra/squishtest.cpp\n   49  \n   50  1.0\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/clusterfit.cpp:\n   30  #include <cfloat>\n   31  \n   32: namespace squish {\n   33  \n   34  ClusterFit::ClusterFit( ColourSet const* colours, int flags, float* metric ) \n   ..\n  390  }\n  391  \n  392: } // namespace squish\n  393  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/clusterfit.h:\n   28  #define SQUISH_CLUSTERFIT_H\n   29  \n   30: #include \"squish.h\"\n   31  #include \"maths.h\"\n   32  #include \"simd.h\"\n   33  #include \"colourfit.h\"\n   34  \n   35: namespace squish {\n   36  \n   37  class ClusterFit : public ColourFit\n   ..\n   57  };\n   58  \n   59: } // namespace squish\n   60  \n   61  #endif // ndef SQUISH_CLUSTERFIT_H\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/colourblock.cpp:\n   26  #include \"colourblock.h\"\n   27  \n   28: namespace squish {\n   29  \n   30  static int FloatToInt( float a, int limit )\n   ..\n  212  }\n  213  \n  214: } // namespace squish\n  215  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/colourblock.h:\n   27  #define SQUISH_COLOURBLOCK_H\n   28  \n   29: #include \"squish.h\"\n   30  #include \"maths.h\"\n   31  \n   32: namespace squish {\n   33  \n   34  void WriteColourBlock3( Vec3::Arg start, Vec3::Arg end, u8 const* indices, void* block );\n   ..\n   37  void DecompressColour( u8* rgba, void const* block, bool isDxt1 );\n   38  \n   39: } // namespace squish\n   40  \n   41  #endif // ndef SQUISH_COLOURBLOCK_H\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/colourfit.cpp:\n   27  #include \"colourset.h\"\n   28  \n   29: namespace squish {\n   30  \n   31  ColourFit::ColourFit( ColourSet const* colours, int flags ) \n   ..\n   52  }\n   53  \n   54: } // namespace squish\n   55  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/colourfit.h:\n   27  #define SQUISH_COLOURFIT_H\n   28  \n   29: #include \"squish.h\"\n   30  #include <climits>\n   31  #include \"maths.h\"\n   32  \n   33: namespace squish {\n   34  \n   35  class ColourSet;\n   ..\n   51  };\n   52  \n   53: } // namespace squish\n   54  \n   55  #endif // ndef SQUISH_COLOURFIT_H\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/colourset.cpp:\n   26  #include \"colourset.h\"\n   27  \n   28: namespace squish {\n   29  \n   30  ColourSet::ColourSet( u8 const* rgba, int mask, int flags )\n   ..\n  119  }\n  120  \n  121: } // namespace squish\n  122  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/colourset.h:\n   27  #define SQUISH_COLOURSET_H\n   28  \n   29: #include \"squish.h\"\n   30  #include \"maths.h\"\n   31  \n   32: namespace squish {\n   33  \n   34  /*! @brief Represents a set of block colours\n   ..\n   54  };\n   55  \n   56: } // namespace squish\n   57  \n   58  #endif // ndef SQUISH_COLOURSET_H\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/config.h:\n   27  #define SQUISH_CONFIG_H\n   28  \n   29: // Set to 1 when building squish to use Altivec instructions.\n   30  #ifndef SQUISH_USE_ALTIVEC\n   31  #define SQUISH_USE_ALTIVEC 0\n   32  #endif\n   33  \n   34: // Set to 1 or 2 when building squish to use SSE or SSE2 instructions.\n   35  #ifndef SQUISH_USE_SSE\n   36  #define SQUISH_USE_SSE 0\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/maths.cpp:\n   34  #include <cfloat>\n   35  \n   36: namespace squish {\n   37  \n   38  Sym3x3 ComputeWeightedCovariance( int n, Vec3 const* points, float const* weights )\n   ..\n  257  #endif\n  258  \n  259: } // namespace squish\n  260  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/maths.h:\n   31  #include \"config.h\"\n   32  \n   33: namespace squish {\n   34  \n   35  class Vec3\n   ..\n  229  Vec3 ComputePrincipleComponent( Sym3x3 const& matrix );\n  230  \n  231: } // namespace squish\n  232  \n  233  #endif // ndef SQUISH_MATHS_H\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/rangefit.cpp:\n   29  #include <cfloat>\n   30  \n   31: namespace squish {\n   32  \n   33  RangeFit::RangeFit( ColourSet const* colours, int flags, float* metric ) \n   ..\n  199  }\n  200  \n  201: } // namespace squish\n  202  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/rangefit.h:\n   27  #define SQUISH_RANGEFIT_H\n   28  \n   29: #include \"squish.h\"\n   30  #include \"colourfit.h\"\n   31  #include \"maths.h\"\n   32  \n   33: namespace squish {\n   34  \n   35  class ColourSet;\n   ..\n   50  };\n   51  \n   52: } // squish\n   53  \n   54  #endif // ndef SQUISH_RANGEFIT_H\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/README:\n    2  -------\n    3  \n    4: The squish library is distributed under the terms and conditions of the MIT\n    5  license. This license is specified at the top of each source file and must be\n    6  preserved in its entirety.\n    .\n   31  Feedback can be sent to Simon Brown (the developer) at si@sjbrown.co.uk\n   32  \n   33: New releases are announced on the squish library homepage at\n   34: http://sjbrown.co.uk/?code=squish\n   35  \n   36  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/simd_float.h:\n   29  #include <algorithm>\n   30  \n   31: namespace squish {\n   32  \n   33  #define VEC4_CONST( X ) Vec4( X )\n   ..\n  178  };\n  179  \n  180: } // namespace squish\n  181  \n  182  #endif // ndef SQUISH_SIMD_FLOAT_H\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/simd_sse.h:\n   38  \t( ( x ) | ( ( y ) << 2 ) | ( ( z ) << 4 ) | ( ( w ) << 6 ) )\n   39  \n   40: namespace squish {\n   41  \n   42  #define VEC4_CONST( X ) Vec4( X )\n   ..\n  176  };\n  177  \n  178: } // namespace squish\n  179  \n  180  #endif // ndef SQUISH_SIMD_SSE_H\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/simd_ve.h:\n   30  #undef bool\n   31  \n   32: namespace squish {\n   33  \n   34  #define VEC4_CONST( X ) Vec4( ( vector float ){ X } )\n   ..\n  162  };\n  163  \n  164: } // namespace squish\n  165  \n  166  #endif // ndef SQUISH_SIMD_VE_H\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/singlecolourfit.cpp:\n   28  #include \"colourblock.h\"\n   29  \n   30: namespace squish {\n   31  \n   32  struct SourceBlock\n   ..\n  170  }\n  171  \n  172: } // namespace squish\n  173  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/singlecolourfit.h:\n   27  #define SQUISH_SINGLECOLOURFIT_H\n   28  \n   29: #include \"squish.h\"\n   30  #include \"colourfit.h\"\n   31  \n   32: namespace squish {\n   33  \n   34  class ColourSet;\n   ..\n   54  };\n   55  \n   56: } // namespace squish\n   57  \n   58  #endif // ndef SQUISH_SINGLECOLOURFIT_H\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/squish.cpp:\n   24     -------------------------------------------------------------------------- */\n   25     \n   26: #include \"squish.h\"\n   27  #include \"colourset.h\"\n   28  #include \"maths.h\"\n   ..\n   33  #include \"singlecolourfit.h\"\n   34  \n   35: namespace squish {\n   36  \n   37  static int FixFlags( int flags )\n   ..\n  228  }\n  229  \n  230: } // namespace squish\n  231  \n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/dds.imageio/squish/squish.h:\n   27  #define SQUISH_H\n   28  \n   29: //! All squish API functions live in this namespace.\n   30: namespace squish {\n   31  \n   32  // -----------------------------------------------------------------------------\n   ..\n  144  \t\n  145  \tThis method is an inline that calls CompressMasked with a mask of 0xffff, \n  146: \tprovided for compatibility with older versions of squish.\n  147  */\n  148  inline void Compress( u8 const* rgba, void* block, int flags, float* metric = 0 )\n  ...\n  226  \tcontiguous array of 3 floats.\n  227  \t\n  228: \tInternally this function calls squish::CompressMasked for each block, which \n  229  \tallows for pixels outside the image to take arbitrary values. The function \n  230: \tsquish::GetStorageRequirements can be called to compute the amount of memory\n  231  \tto allocate for the compressed output.\n  232  */\n  ...\n  252  \tare ignored.\n  253  \n  254: \tInternally this function calls squish::Decompress for each block.\n  255  */\n  256  void DecompressImage( u8* rgba, int width, int height, void const* blocks, int flags );\n  ...\n  258  // -----------------------------------------------------------------------------\n  259  \n  260: } // namespace squish\n  261  \n  262  #endif // ndef SQUISH_H\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/doc/oiiointro.rst:\n  225  \n  226  * The SHA-1 implemenation we use is public domain by Dominik Reichl  http://www.dominik-reichl.de/\n  227: * Squish © 2006 Simon Brown, MIT license. http://sjbrown.co.uk/?code=squish\n  228  * PugiXML © 2006-2009 by Arseny Kapoulkine (based on work © 2003 Kristen Wegner), MIT license. http://pugixml.org/\n  229  * DPX reader/writer © 2009 Patrick A. Palmer, BSD 3-clause license. https://github.com/patrickpalmer/dpx}\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/doc/oiiointro.tex:\n  228  Dominik Reichl \\\\ \\url{http://www.dominik-reichl.de/}\n  229  \\item Squish \\copyright\\ 2006 Simon Brown, MIT license.\n  230: \\url{http://sjbrown.co.uk/?code=squish}\n  231  \\item PugiXML \\copyright\\ 2006-2009 by Arseny Kapoulkine (based on work\n  232  \\copyright\\ 2003 Kristen Wegner), MIT license. \\url{http://pugixml.org/}\n\n131 matches across 40 files\n\n\nSearching 1308 files for \"USE_DDS\" (case sensitive)\n\n0 matches\n\nSearching 1308 files for \"dds.imageio\" (case sensitive)\n\n/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/cmake/compiler.cmake:\n  446                                 \"src/dpx.imageio/libdpx/*\"\n  447                                 \"src/cineon.imageio/libcineon/*\"\n  448:                                \"src/dds.imageio/squish/*\"\n  449                                 \"src/gif.imageio/gif.h\"\n  450                                 \"src/hdr.imageio/rgbe.cpp\"\n\n1 match in 1 file\n",
			"settings":
			{
				"buffer_size": 42080,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			},
			"undo_stack":
			[
			]
		},
		{
			"contents": "# Copyright 2008-present Contributors to the OpenImageIO project.\n# SPDX-License-Identifier: BSD-3-Clause\n# https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md\n\n###########################################################################\n#\n# This file contains compiler-related detection, options, and actions.\n#\n# Each option declaration is kept close to the related logic for that\n# option.\n#\n###########################################################################\n\n\n###########################################################################\n# Print some basic status about the system and compiler\n#\nif (VERBOSE)\n    message (STATUS \"CMAKE_SYSTEM_NAME      = ${CMAKE_SYSTEM_NAME}\")\n    message (STATUS \"CMAKE_SYSTEM_VERSION   = ${CMAKE_SYSTEM_VERSION}\")\n    message (STATUS \"CMAKE_SYSTEM_PROCESSOR = ${CMAKE_SYSTEM_PROCESSOR}\")\nendif ()\nmessage (STATUS \"CMAKE_CXX_COMPILER     = ${CMAKE_CXX_COMPILER}\")\nmessage (STATUS \"CMAKE_CXX_COMPILER_ID  = ${CMAKE_CXX_COMPILER_ID}\")\n\n\n###########################################################################\n# C++ language standard\n#\nset (CMAKE_CXX_STANDARD 11 CACHE STRING\n     \"C++ standard to prefer (11, 14, 17, 20, etc.)\")\nset (CMAKE_CXX_STANDARD_REQUIRED ON)\nset (CMAKE_CXX_EXTENSIONS OFF)\nmessage (STATUS \"Building for C++${CMAKE_CXX_STANDARD}\")\n\n\n###########################################################################\n# Figure out which compiler we're using\n#\n\nif (CMAKE_COMPILER_IS_GNUCC)\n    execute_process (COMMAND ${CMAKE_CXX_COMPILER} -dumpversion\n                     OUTPUT_VARIABLE GCC_VERSION\n                     OUTPUT_STRIP_TRAILING_WHITESPACE)\n    if (VERBOSE)\n        message (STATUS \"Using gcc ${GCC_VERSION} as the compiler\")\n    endif ()\nelse ()\n    set (GCC_VERSION 0)\nendif ()\n\nif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" OR CMAKE_CXX_COMPILER MATCHES \"[Cc]lang\")\n    # If using any flavor of clang, set CMAKE_COMPILER_IS_CLANG. If it's\n    # Apple's variety, set CMAKE_COMPILER_IS_APPLECLANG and\n    # APPLECLANG_VERSION_STRING, otherwise for generic clang set\n    # CLANG_VERSION_STRING.\n    set (CMAKE_COMPILER_IS_CLANG 1)\n    EXECUTE_PROCESS( COMMAND ${CMAKE_CXX_COMPILER} --version OUTPUT_VARIABLE clang_full_version_string )\n    if (clang_full_version_string MATCHES \"Apple\")\n        set (CMAKE_CXX_COMPILER_ID \"AppleClang\")\n        set (CMAKE_COMPILER_IS_APPLECLANG 1)\n        string (REGEX REPLACE \".* version ([0-9]+\\\\.[0-9]+).*\" \"\\\\1\" APPLECLANG_VERSION_STRING ${clang_full_version_string})\n        if (VERBOSE)\n            message (STATUS \"The compiler is Clang: ${CMAKE_CXX_COMPILER_ID} version ${APPLECLANG_VERSION_STRING}\")\n        endif ()\n    else ()\n        string (REGEX REPLACE \".* version ([0-9]+\\\\.[0-9]+).*\" \"\\\\1\" CLANG_VERSION_STRING ${clang_full_version_string})\n        if (VERBOSE)\n            message (STATUS \"The compiler is Clang: ${CMAKE_CXX_COMPILER_ID} version ${CLANG_VERSION_STRING}\")\n        endif ()\n    endif ()\nelseif (CMAKE_CXX_COMPILER_ID MATCHES \"Intel\")\n    set (CMAKE_COMPILER_IS_INTEL 1)\n    if (VERBOSE)\n        message (STATUS \"Using Intel as the compiler\")\n    endif ()\nendif ()\n\n\n###########################################################################\n# Turn on more detailed warnings and optionally consider warnings as errors\n#\nif (${PROJECT_NAME}_SUPPORTED_RELEASE)\n    option (STOP_ON_WARNING \"Stop building if there are any compiler warnings\" OFF)\nelse ()\n    option (STOP_ON_WARNING \"Stop building if there are any compiler warnings\" ON)\nendif()\noption (EXTRA_WARNINGS \"Enable lots of extra pedantic warnings\" OFF)\nif (NOT MSVC)\n    add_compile_options (\"-Wall\")\n    if (EXTRA_WARNINGS)\n        add_compile_options (\"-Wextra\")\n    endif ()\n    if (STOP_ON_WARNING OR DEFINED ENV{CI})\n        add_compile_options (\"-Werror\")\n        # N.B. Force CI builds to use -Werror, even if STOP_ON_WARNING has\n        # been switched off by default, which we may do in release\n        # branches.\n    endif ()\nendif ()\n\n\n###########################################################################\n# Control symbol visibility\n#\n# We try hard to make default symbol visibility be \"hidden\", except for\n# symbols that are part of the public API, which should be marked in the\n# source code with a special decorator, OIIO_API.\n#\n# Additionally, there is a hidesymbols.map file that on some platforms may\n# give more fine-grained control for hiding symbols, because sometimes\n# dependent libraries may not be well behaved and need extra hiding.\n#\nset (CXX_VISIBILITY_PRESET \"hidden\" CACHE STRING \"Symbol visibility (hidden or default\")\noption (VISIBILITY_INLINES_HIDDEN \"Hide symbol visibility of inline functions\" ON)\nset (VISIBILITY_MAP_FILE \"${PROJECT_SOURCE_DIR}/src/build-scripts/hidesymbols.map\" CACHE FILEPATH \"Visibility map file\")\nset (C_VISIBILITY_PRESET ${CXX_VISIBILITY_PRESET})\nif (${CXX_VISIBILITY_PRESET} STREQUAL \"hidden\" AND\n    (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_CLANG) AND\n    (CMAKE_SYSTEM_NAME MATCHES \"Linux|kFreeBSD\" OR CMAKE_SYSTEM_NAME STREQUAL \"GNU\"))\n    # Linux/FreeBSD/Hurd: also hide all the symbols of dependent libraries\n    # to prevent clashes if an app using this project is linked against\n    # other versions of our dependencies.\n    set (VISIBILITY_MAP_COMMAND \"-Wl,--version-script=${VISIBILITY_MAP_FILE}\")\nendif ()\n\n\n###########################################################################\n# Compiler-specific and platform-specific options.\n#\n# Here is where we add a whole bunch of options for specific compilers or\n# platforms. Usually this is to suppress false-positive compiler warnings.\n#\nif (CMAKE_COMPILER_IS_CLANG OR CMAKE_COMPILER_IS_APPLECLANG)\n    # Clang-specific options\n    add_compile_options (\"-Wno-unused-function\")\n    add_compile_options (\"-Wno-overloaded-virtual\")\n    add_compile_options (\"-Wno-unneeded-internal-declaration\")\n    add_compile_options (\"-Wno-unused-private-field\")\n    add_compile_options (\"-Wno-tautological-compare\")\n    # disable warning about unused command line arguments\n    add_compile_options (\"-Qunused-arguments\")\n    # Don't warn if we ask it not to warn about warnings it doesn't know\n    add_compile_options (\"-Wunknown-warning-option\")\n    if (CLANG_VERSION_STRING VERSION_GREATER_EQUAL 3.6 OR\n        APPLECLANG_VERSION_STRING VERSION_GREATER 6.1)\n        add_compile_options (\"-Wno-unused-local-typedefs\")\n    endif ()\n    if (CLANG_VERSION_STRING VERSION_GREATER_EQUAL 3.9)\n        # Don't warn about using unknown preprocessor symbols in `#if`\n        add_compile_options (\"-Wno-expansion-to-defined\")\n    endif ()\nendif ()\n\nif (CMAKE_COMPILER_IS_GNUCC AND NOT (CMAKE_COMPILER_IS_CLANG OR CMAKE_COMPILER_IS_APPLECLANG))\n    # gcc specific options\n    add_compile_options (\"-Wno-unused-local-typedefs\")\n    add_compile_options (\"-Wno-unused-result\")\n    if (NOT ${GCC_VERSION} VERSION_LESS 7.0)\n        add_compile_options (\"-Wno-aligned-new\")\n        add_compile_options (\"-Wno-noexcept-type\")\n    endif ()\nendif ()\n\nif (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_CLANG)\n    # Options common to gcc and clang\n\n    # Ensure this macro is set for stdint.h\n    add_definitions (\"-D__STDC_LIMIT_MACROS\")\n    add_definitions (\"-D__STDC_CONSTANT_MACROS\")\n    # this allows native instructions to be used for sqrtf instead of a function call\n    add_compile_options (\"-fno-math-errno\")\nendif ()\n\nif (MSVC)\n    # Microsoft specific options\n    add_compile_options (/W1)\n    add_definitions (-D_CRT_SECURE_NO_DEPRECATE)\n    add_definitions (-D_CRT_SECURE_NO_WARNINGS)\n    add_definitions (-D_CRT_NONSTDC_NO_WARNINGS)\n    add_definitions (-D_SCL_SECURE_NO_WARNINGS)\n    add_definitions (-DJAS_WIN_MSVC_BUILD)\nendif (MSVC)\n\nif (${CMAKE_SYSTEM_NAME} STREQUAL \"FreeBSD\"\n    AND ${CMAKE_SYSTEM_PROCESSOR} STREQUAL \"i386\")\n    # For FreeBSD, minimum arch of i586 is needed for atomic cpu instructions\n    add_compile_options (-march=i586)\nendif ()\n\n\n###########################################################################\n# Use ccache if found\n#\n# This can really speed up compilation by caching object files that have\n# been compiled previously with identical arguments and inputs. Putting this\n# logic here makes it work even if the user is unaware of ccache. If it's\n# not found on the system, it will simply be silently not used.\noption (USE_CCACHE \"Use ccache if found\" ON)\nfind_program (CCACHE_FOUND ccache)\nif (CCACHE_FOUND AND USE_CCACHE)\n    if (CMAKE_COMPILER_IS_CLANG AND USE_QT AND (NOT DEFINED ENV{CCACHE_CPP2}))\n        message (STATUS \"Ignoring ccache because clang + Qt + env CCACHE_CPP2 is not set\")\n    else ()\n        set_property (GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)\n        set_property (GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)\n    endif ()\nendif ()\n\n\n###########################################################################\n# Option to force use of libc++ (the LLVM project's alternate C++ standard\n# library). Currently this only has an effect if using clang as the\n# compiler. Maybe it would also work for g++? Investigate.\noption (USE_LIBCPLUSPLUS \"Compile with clang libc++\" OFF)\nif (USE_LIBCPLUSPLUS AND CMAKE_COMPILER_IS_CLANG)\n    message (STATUS \"Using libc++\")\n    set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -stdlib=libc++\")\nendif ()\n\n\n###########################################################################\n# For gcc >= 5, allow an option to force which version of the C++ ABI to\n# use (mostly this affects the implementation of std::string).\n#\n# FIXME: In theory, this should also be needed for clang, if compiling with\n# the gcc libstdc++ toolchain. In practice, I could not get things to build\n# with clang properly when using this option, and I haven't yet seen a case\n# where it's needed. We can return to this and fix for clang if it becomes a\n# legit problem later.\n#\nset (GLIBCXX_USE_CXX11_ABI \"\" CACHE STRING \"For gcc, use the new C++11 library ABI (0|1)\")\nif (CMAKE_COMPILER_IS_GNUCC AND ${GCC_VERSION} VERSION_GREATER_EQUAL 5.0)\n    if (NOT ${GLIBCXX_USE_CXX11_ABI} STREQUAL \"\")\n        add_definitions (\"-D_GLIBCXX_USE_CXX11_ABI=${GLIBCXX_USE_CXX11_ABI}\")\n    endif ()\nendif ()\n\n\n###########################################################################\n# SIMD and machine architecture options.\n#\n# The USE_SIMD option may be set to a comma-separated list of machine /\n# instruction set options, such as \"avx3,f16c\". The list will be parsed and\n# the proper compiler directives added to generate code for those ISA\n# capabilities.\n#\nset (USE_SIMD \"\" CACHE STRING \"Use SIMD directives (0, sse2, sse3, ssse3, sse4.1, sse4.2, avx, avx2, avx512f, f16c, aes)\")\nset (SIMD_COMPILE_FLAGS \"\")\nif (NOT USE_SIMD STREQUAL \"\")\n    message (STATUS \"Compiling with SIMD level ${USE_SIMD}\")\n    if (USE_SIMD STREQUAL \"0\")\n        set (SIMD_COMPILE_FLAGS ${SIMD_COMPILE_FLAGS} \"-DOIIO_NO_SSE=1\")\n    else ()\n        string (REPLACE \",\" \";\" SIMD_FEATURE_LIST ${USE_SIMD})\n        foreach (feature ${SIMD_FEATURE_LIST})\n            if (VERBOSE)\n                message (STATUS \"SIMD feature: ${feature}\")\n            endif ()\n            if (MSVC OR CMAKE_COMPILER_IS_INTEL)\n                set (SIMD_COMPILE_FLAGS ${SIMD_COMPILE_FLAGS} \"/arch:${feature}\")\n            else ()\n                set (SIMD_COMPILE_FLAGS ${SIMD_COMPILE_FLAGS} \"-m${feature}\")\n            endif ()\n            if (feature STREQUAL \"fma\" AND (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_CLANG))\n                # If fma is requested, for numerical accuracy sake, turn it\n                # off by default except when we explicitly use madd. At some\n                # future time, we should look at this again carefully and\n                # see if we want to use it more widely by ffp-contract=fast.\n                add_compile_options (\"-ffp-contract=off\")\n            endif ()\n        endforeach()\n    endif ()\n    add_compile_options (${SIMD_COMPILE_FLAGS})\nendif ()\n\n\n###########################################################################\n# Preparation to test for compiler/language features\nif (NOT VERBOSE)\n    set (CMAKE_REQUIRED_QUIET 1)\nendif ()\ninclude (CMakePushCheckState)\ninclude (CheckCXXSourceRuns)\ninclude (CheckLibraryExists)\n\n###########################################################################\n# Find out if it's safe for us to use std::regex or if we need boost.regex.\n# This is primarily about gcc 4.8 having a broken regex implementation.\n# This will be obsolete once our minimum supported gcc is >= 4.9.\n#\ncmake_push_check_state ()\ncheck_cxx_source_runs(\"\n      #include <regex>\n      int main() {\n          std::string r = std::regex_replace(std::string(\\\"abc\\\"), std::regex(\\\"b\\\"), \\\" \\\");\n          return r == \\\"a c\\\" ? 0 : -1;\n      }\"\n      USE_STD_REGEX)\ncmake_pop_check_state ()\nif (USE_STD_REGEX)\n    add_definitions (-DUSE_STD_REGEX)\nelse ()\n    add_definitions (-DUSE_BOOST_REGEX)\nendif ()\n\n###########################################################################\n# Check if we need libatomic on this platform.  We shouldn't on mainstream\n# x86/x86_64, but might on some other platforms.\n#\nif (NOT MSVC AND NOT APPLE)\n    cmake_push_check_state ()\n    check_cxx_source_runs(\n       \"#include <atomic>\n        #include <cstdint>\n        std::atomic<uint64_t> x {0};\n        int main() {\n            uint64_t i = x.load(std::memory_order_relaxed);\n            return 0;\n        }\"\n        COMPILER_SUPPORTS_ATOMIC_WITHOUT_LIBATOMIC)\n    cmake_pop_check_state ()\n    if (NOT COMPILER_SUPPORTS_ATOMIC_WITHOUT_LIBATOMIC)\n        check_library_exists (atomic __atomic_load_8 \"\" LIBATOMIC_WORKS)\n        if (LIBATOMIC_WORKS)\n            list (APPEND GCC_ATOMIC_LIBRARIES \"-latomic\")\n            message (STATUS \"Compiler needs libatomic, added\")\n        else ()\n            message (FATAL_ERROR \"Compiler needs libatomic, but not found\")\n        endif ()\n    else ()\n        if (VERBOSE)\n            message (STATUS \"Compiler supports std::atomic, no libatomic necessary\")\n        endif ()\n    endif ()\nendif ()\n\n\n###########################################################################\n# Code coverage options\n#\noption (CODECOV \"Build code coverage tests\" OFF)\nif (CODECOV AND (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_CLANG))\n    message (STATUS \"Compiling for code coverage analysis\")\n    add_compile_options (\"-ftest-coverage -fprofile-arcs -O0\")\n    add_definitions (\"-D${PROJ_NAME}_CODE_COVERAGE=1\")\n    set (CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -ftest-coverage -fprofile-arcs\")\n    set (CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS} -ftest-coverage -fprofile-arcs\")\n    set (CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -ftest-coverage -fprofile-arcs\")\nendif ()\n\n\n###########################################################################\n# Sanitizer options\n#\nset (SANITIZE \"\" CACHE STRING \"Build code using sanitizer (address, thread)\")\nif (SANITIZE AND (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_CLANG))\n    message (STATUS \"Compiling for sanitizer=${SANITIZE}\")\n    string (REPLACE \",\" \";\" SANITIZE_FEATURE_LIST ${SANITIZE})\n    foreach (feature ${SANITIZE_FEATURE_LIST})\n        message (STATUS \"  sanitize feature: ${feature}\")\n        add_compile_options (-fsanitize=${feature})\n        set (CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fsanitize=${feature}\")\n        set (CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS} -fsanitize=${feature}\")\n        set (CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -fsanitize=${feature}\")\n    endforeach()\n    add_compile_options (-g -fno-omit-frame-pointer)\n    if (${CMAKE_SYSTEM_NAME} STREQUAL \"Linux\")\n        set (SANITIZE_ON_LINUX 1)\n    endif ()\n    if (CMAKE_COMPILER_IS_GNUCC AND ${CMAKE_SYSTEM_NAME} STREQUAL \"Linux\")\n        add_compile_options (\"-fuse-ld=gold\")\n        set (CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=gold\")\n        set (CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS} -fuse-ld=gold\")\n        set (CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -fuse-ld=gold\")\n        set (SANITIZE_LIBRARIES \"asan;pthread\")\n        # set (SANITIZE_LIBRARIES \"asan\" \"ubsan\")\n    endif()\n    if (CMAKE_COMPILER_IS_GNUCC)\n        # turn on glibcxx extra annotations to find vector writes past end\n        add_definitions (\"-D_GLIBCXX_SANITIZE_VECTOR=1\")\n    endif ()\n    add_definitions (\"-D${PROJECT_NAME}_SANITIZE=1\")\nendif ()\n\n\n###########################################################################\n# clang-tidy options\n#\n# clang-tidy is a static analyzer that is part of the LLVM tools. It has a\n# variety of the usual bug and security tests, linting, and also tests for\n# things like finding (and correcting!) use of older language constructs.\n#\n# If clang-tidy is found and enabled, a \"clang-tidy\" build target will be\n# enabled. The set of tests can be customized both here and through\n# the .clang-tidy file that is part of this project.\n#\noption (CLANG_TIDY \"Enable clang-tidy\" OFF)\nset (CLANG_TIDY_CHECKS \"-*\" CACHE STRING \"clang-tidy checks to perform (none='-*')\")\nset (CLANG_TIDY_ARGS \"\" CACHE STRING \"clang-tidy args\")\noption (CLANG_TIDY_FIX \"Have clang-tidy fix source\" OFF)\nif (CLANG_TIDY)\n    find_program(CLANG_TIDY_EXE NAMES \"clang-tidy\"\n                 DOC \"Path to clang-tidy executable\")\n    message (STATUS \"CLANG_TIDY_EXE ${CLANG_TIDY_EXE}\")\n    if (CLANG_TIDY_EXE AND NOT ${CMAKE_VERSION} VERSION_LESS 3.6)\n        set (CMAKE_CXX_CLANG_TIDY\n             \"${CLANG_TIDY_EXE}\"\n             )\n        if (CLANG_TIDY_ARGS)\n            list (APPEND CMAKE_CXX_CLANG_TIDY ${CLANG_TIDY_ARGS})\n        endif ()\n        if (CLANG_TIDY_CHECKS)\n            list (APPEND CMAKE_CXX_CLANG_TIDY -checks=\"${CLANG_TIDY_CHECKS}\")\n        endif ()\n        execute_process (COMMAND ${CMAKE_CXX_CLANG_TIDY} -list-checks\n                         OUTPUT_VARIABLE tidy_checks\n                         OUTPUT_STRIP_TRAILING_WHITESPACE)\n        if (CLANG_TIDY_FIX)\n            list (APPEND CMAKE_CXX_CLANG_TIDY \"-fix\")\n        endif ()\n        message (STATUS \"clang-tidy command line is: ${CMAKE_CXX_CLANG_TIDY}\")\n        message (STATUS \"${tidy_checks}\")\n    else ()\n        message (STATUS \"Cannot run clang-tidy as requested\")\n    endif ()\n    # Hint: run with CLANG_TIDY_ARGS=-list-checks to list all the checks\nendif ()\n\n\n###########################################################################\n# clang-format options\n#\n# clang-format is a source code reformatter that is part of the LLVM tools.\n# It can be used to check adherence to project code formatting rules and\n# correct any deviations. If clang-format is found on the system, a\n# \"clang-format\" build target will trigger a reformatting.\n#\n# Note: skip all of this checking, setup, and cmake-format target if this\n# is being built as a subproject.\nif (NOT ${PROJECT_NAME}_IS_SUBPROJECT)\n    set (CLANG_FORMAT_EXE_HINT \"\" CACHE PATH \"clang-format executable's directory (will search if not specified\")\n    set (CLANG_FORMAT_INCLUDES \"src/*.h\" \"src/*.cpp\"\n        CACHE STRING \"Glob patterns to include for clang-format\")\n    set (CLANG_FORMAT_EXCLUDES \"*pugixml*\" \"*SHA1*\" \"*/farmhash.cpp\"\n                               \"src/dpx.imageio/libdpx/*\"\n                               \"src/cineon.imageio/libcineon/*\"\n                               \"src/dds.imageio/squish/*\"\n                               \"src/gif.imageio/gif.h\"\n                               \"src/hdr.imageio/rgbe.cpp\"\n                               \"src/libutil/stb_sprintf.h\"\n         CACHE STRING \"Glob patterns to exclude for clang-format\")\n    find_program (CLANG_FORMAT_EXE\n                  NAMES clang-format bin/clang-format\n                  HINTS ${CLANG_FORMAT_EXE_HINT} ENV CLANG_FORMAT_EXE_HINT\n                        ENV LLVM_DIRECTORY\n                  NO_DEFAULT_PATH\n                  DOC \"Path to clang-format executable\")\n    find_program (CLANG_FORMAT_EXE NAMES clang-format bin/clang-format)\n    if (CLANG_FORMAT_EXE)\n        message (STATUS \"clang-format found: ${CLANG_FORMAT_EXE}\")\n        # Start with the list of files to include when formatting...\n        file (GLOB_RECURSE FILES_TO_FORMAT ${CLANG_FORMAT_INCLUDES})\n        # ... then process any list of excludes we are given\n        foreach (_pat ${CLANG_FORMAT_EXCLUDES})\n            file (GLOB_RECURSE _excl ${_pat})\n            list (REMOVE_ITEM FILES_TO_FORMAT ${_excl})\n        endforeach ()\n        #message (STATUS \"clang-format file list: ${FILES_TO_FORMAT}\")\n        file (COPY ${CMAKE_CURRENT_SOURCE_DIR}/.clang-format\n              DESTINATION ${CMAKE_CURRENT_BINARY_DIR})\n        add_custom_target (clang-format\n            COMMAND \"${CLANG_FORMAT_EXE}\" -i -style=file ${FILES_TO_FORMAT} )\n    else ()\n        message (STATUS \"clang-format not found.\")\n    endif ()\nendif ()\n\n###########################################################################\n# Another way to sneak in custom compiler and DSO linking flags.\n#\nset (EXTRA_CPP_ARGS \"\" CACHE STRING \"Extra C++ command line definitions\")\nif (EXTRA_CPP_ARGS)\n    message (STATUS \"Extra C++ args: ${EXTRA_CPP_ARGS}\")\n    add_compile_options (\"${EXTRA_CPP_ARGS}\")\nendif()\nset (EXTRA_DSO_LINK_ARGS \"\" CACHE STRING \"Extra command line definitions when building DSOs\")\n\n\n###########################################################################\n# Set the versioning for shared libraries.\n#\nif (${PROJECT_NAME}_SUPPORTED_RELEASE)\n    # Supported releases guarantee ABI back-compatibility within the release\n    # family, so SO versioning is major.minor.\n    set (SOVERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}\n         CACHE STRING \"Set the SO version for dynamic libraries\")\nelse ()\n    # Development master makes no ABI stability guarantee, so we make the\n    # SO naming capture down to the major.minor.patch level.\n    set (SOVERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}\n         CACHE STRING \"Set the SO version for dynamic libraries\")\nendif ()\nif (VERBOSE)\n    message(STATUS \"Setting SOVERSION to: ${SOVERSION}\")\nendif ()\n\n\n###########################################################################\n# BUILD_SHARED_LIBS, if turned off, will disable building of .so/.dll\n# dynamic libraries and instead only build static libraries.\n#\noption (BUILD_SHARED_LIBS \"Build shared libraries (set to OFF to build static libs)\" ON)\nif (NOT BUILD_SHARED_LIBS)\n    add_definitions (-D${PROJ_NAME}_STATIC_DEFINE=1)\nendif ()\n\n\n###########################################################################\n# LINKSTATIC, if enabled, will cause us to favor linking static versions\n# of library dependencies, if they are available.\n#\noption (LINKSTATIC  \"Link with static external libraries when possible\" OFF)\nif (LINKSTATIC)\n    #set (_orig_link_suffixes ${CMAKE_FIND_LIBRARY_SUFFIXES})\n    message (STATUS \"Statically linking external libraries when possible\")\n    if (WIN32)\n        set (CMAKE_FIND_LIBRARY_SUFFIXES .lib .a ${CMAKE_FIND_LIBRARY_SUFFIXES})\n    else ()\n        set (CMAKE_FIND_LIBRARY_SUFFIXES .a ${CMAKE_FIND_LIBRARY_SUFFIXES})\n    endif ()\nendif ()\n\n\n###########################################################################\n# Any extra logic to be run only for CI builds goes here.\n#\nif (DEFINED ENV{CI} OR DEFINED ENV{GITHUB_ACTIONS})\n    add_definitions (\"-D${PROJ_NAME}_CI=1\" \"-DBUILD_CI=1\")\n    if (APPLE)\n        # Keep Mono framework from being incorrectly searched for include\n        # files on GitHub Actions CI.\n        set(CMAKE_FIND_FRAMEWORK LAST)\n    endif ()\nendif ()\n\n\n###########################################################################\n# Rpath handling at the install step\n#\nset (MACOSX_RPATH ON)\nif (CMAKE_SKIP_RPATH)\n    # We need to disallow the user from truly setting CMAKE_SKIP_RPATH, since\n    # we want to run the generated executables from the build tree in order to\n    # generate the manual page documentation.  However, we make sure the\n    # install rpath is unset so that the install tree is still free of rpaths\n    # for linux packaging purposes.\n    set (CMAKE_SKIP_RPATH FALSE)\n    unset (CMAKE_INSTALL_RPATH)\nelse ()\n    if (NOT CMAKE_INSTALL_RPATH)\n        set (CMAKE_INSTALL_RPATH \"${CMAKE_INSTALL_FULL_LIBDIR}\")\n    endif ()\n    # add the automatically determined parts of the RPATH that\n    # point to directories outside the build tree to the install RPATH\n    set (CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\n    if (VERBOSE)\n        message (STATUS \"CMAKE_INSTALL_RPATH = ${CMAKE_INSTALL_RPATH}\")\n    endif ()\nendif ()\n\n\n\n###########################################################################\n# Macro to install targets to the appropriate locations.  Use this instead\n# of the install(TARGETS ...) signature. Note that it adds it to the\n# export targets list for when we generate config files.\n#\n# Usage:\n#\n#    install_targets (target1 [target2 ...])\n#\nmacro (install_targets)\n    install (TARGETS ${ARGN}\n             EXPORT ${PROJ_NAME}_EXPORTED_TARGETS\n             RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\" COMPONENT user\n             LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}\" COMPONENT user\n             ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\" COMPONENT developer)\nendmacro()\n",
			"file": "third_party/external/openimageio/src/OpenImageIO/src/cmake/compiler.cmake",
			"file_size": 25040,
			"file_write_time": 133342539413326128,
			"settings":
			{
				"buffer_size": 25040,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"contents": "# Module to find Libsquish\n#\n# This module will first look into the directories defined by the variables:\n#   - Libsquish_ROOT, LIBSQUISH_INCLUDE_PATH, LIBSQUISH_LIBRARY_PATH\n#\n# This module defines the following variables:\n#\n# Libsquish_FOUND            True if Libsquish was found.\n# LIBSQUISH_INCLUDES         Where to find Libsquish headers\n# LIBSQUISH_LIBRARIES        List of libraries to link against when using Libsquish\n# LIBSQUISH_VERSION          Version of Libsquish (e.g., 3.6.2)\n\ninclude (FindPackageHandleStandardArgs)\n\nfind_path (LIBSQUISH_INCLUDE_DIR squish.h\n           HINTS\n               ${LIBSQUISH_INCLUDE_PATH}\n               ENV LIBSQUISH_INCLUDE_PATH\n           DOC \"The directory where Libsquish headers reside\")\n\nfind_library (LIBSQUISH_LIBRARY squish\n              HINTS\n                  ${LIBSQUISH_LIBRARY_PATH}\n                  ENV LIBSQUISH_LIBRARY_PATH\n              DOC \"The Libsquish libraries\")\n\nfind_package_handle_standard_args (Libsquish\n    REQUIRED_VARS\n        LIBSQUISH_INCLUDE_DIR\n        LIBSQUISH_LIBRARY\n    )\n\nif (Libsquish_FOUND)\n    set (LIBSQUISH_INCLUDES ${LIBSQUISH_INCLUDE_DIR})\n    set (LIBSQUISH_LIBRARIES ${LIBSQUISH_LIBRARY})\n\n    if (NOT TARGET Libsquish::Libsquish)\n        add_library(Libsquish::Libsquish UNKNOWN IMPORTED)\n        set_target_properties(Libsquish::Libsquish PROPERTIES\n            INTERFACE_INCLUDE_DIRECTORIES \"${LIBSQUISH_INCLUDES}\")\n\n        set_property(TARGET Libsquish::Libsquish APPEND PROPERTY\n            IMPORTED_LOCATION \"${LIBSQUISH_LIBRARIES}\")\n    endif ()\nendif ()\n\nmark_as_advanced (\n    LIBSQUISH_INCLUDE_DIR\n    LIBSQUISH_LIBRARY\n    )\n",
			"file": "third_party/external/openimageio/src/OpenImageIO/src/cmake/modules/FindLibsquish.cmake",
			"file_size": 1635,
			"file_write_time": 133342539413326128,
			"settings":
			{
				"buffer_size": 1635,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "third_party/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 38582,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\nCMAEK"
					},
					"BwAAAIFSAAAAAAAAglIAAAAAAAAAAAAAglIAAAAAAACGUgAAAAAAAAAAAACGUgAAAAAAAIdSAAAAAAAAAAAAAIdSAAAAAAAAiFIAAAAAAAAAAAAAiFIAAAAAAACJUgAAAAAAAAAAAACJUgAAAAAAAIpSAAAAAAAAAAAAAIpSAAAAAAAAi1IAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBUgAAAAAAAIFSAAAAAAAAAAAAAAAA8L8"
				],
				[
					4,
					2,
					"left_delete",
					null,
					"AgAAAIpSAAAAAAAAilIAAAAAAAABAAAAS4lSAAAAAAAAiVIAAAAAAAABAAAARQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACLUgAAAAAAAItSAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "KE_ATR"
					},
					"BgAAAIlSAAAAAAAAilIAAAAAAAAAAAAAilIAAAAAAACLUgAAAAAAAAAAAACLUgAAAAAAAIxSAAAAAAAAAAAAAIxSAAAAAAAAjVIAAAAAAAAAAAAAjVIAAAAAAACOUgAAAAAAAAAAAACOUgAAAAAAAI9SAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJUgAAAAAAAIlSAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					2,
					"left_delete",
					null,
					"AgAAAI5SAAAAAAAAjlIAAAAAAAABAAAAUo1SAAAAAAAAjVIAAAAAAAABAAAAVA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPUgAAAAAAAI9SAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "RGS"
					},
					"AwAAAI1SAAAAAAAAjlIAAAAAAAAAAAAAjlIAAAAAAACPUgAAAAAAAAAAAACPUgAAAAAAAJBSAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNUgAAAAAAAI1SAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": " -D"
					},
					"AwAAAJBSAAAAAAAAkVIAAAAAAAAAAAAAkVIAAAAAAACSUgAAAAAAAAAAAACSUgAAAAAAAJNSAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACQUgAAAAAAAJBSAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJNSAAAAAAAAlFIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACTUgAAAAAAAJNSAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"paste",
					null,
					"AQAAAJRSAAAAAAAAoFIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACUUgAAAAAAAJRSAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					2,
					"right_delete",
					null,
					"AgAAAJRSAAAAAAAAlFIAAAAAAAABAAAALZRSAAAAAAAAlFIAAAAAAAABAAAARA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACUUgAAAAAAAJRSAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": ":BOOL-="
					},
					"BwAAAJ5SAAAAAAAAn1IAAAAAAAAAAAAAn1IAAAAAAACgUgAAAAAAAAAAAACgUgAAAAAAAKFSAAAAAAAAAAAAAKFSAAAAAAAAolIAAAAAAAAAAAAAolIAAAAAAACjUgAAAAAAAAAAAACjUgAAAAAAAKRSAAAAAAAAAAAAAKRSAAAAAAAApVIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACeUgAAAAAAAJ5SAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					2,
					"left_delete",
					null,
					"AgAAAKRSAAAAAAAApFIAAAAAAAABAAAAPaNSAAAAAAAAo1IAAAAAAAABAAAALQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClUgAAAAAAAKVSAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "=OFF"
					},
					"BAAAAKNSAAAAAAAApFIAAAAAAAAAAAAApFIAAAAAAAClUgAAAAAAAAAAAAClUgAAAAAAAKZSAAAAAAAAAAAAAKZSAAAAAAAAp1IAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjUgAAAAAAAKNSAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAHBRAAAAAAAAcVEAAAAAAAAAAAAAcVEAAAAAAAB1UQAAAAAAAAAAAAB1UQAAAAAAAHZRAAAAAAAAAAAAAHZRAAAAAAAAelEAAAAAAAAAAAAAcVEAAAAAAABxUQAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAABAAAAcFEAAAAAAABwUQAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"paste",
					null,
					"AQAAAHJRAAAAAAAAd1EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdlEAAAAAAAB2UQAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAAHtRAAAAAAAAuVEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAe1EAAAAAAAB7UQAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"paste",
					null,
					"AQAAAHtRAAAAAAAAiVEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAe1EAAAAAAAB7UQAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"left_delete",
					null,
					"AQAAAJdRAAAAAAAAl1EAAAAAAAACAAAALCA",
					"AQAAAAAAAAABAAAAl1EAAAAAAACZUQAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJdRAAAAAAAAmFEAAAAAAAAAAAAAmFEAAAAAAACcUQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAl1EAAAAAAACXUQAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"paste",
					null,
					"AQAAAJxRAAAAAAAAqlEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnFEAAAAAAACcUQAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					2,
					"left_delete",
					null,
					"AgAAAMFRAAAAAAAAwVEAAAAAAAABAAAAIMBRAAAAAAAAwFEAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAwlEAAAAAAADCUQAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMBRAAAAAAAAwVEAAAAAAAAAAAAAwVEAAAAAAADFUQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwFEAAAAAAADAUQAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"paste",
					null,
					"AQAAAMVRAAAAAAAA01EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxVEAAAAAAADFUQAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "ЖЗ"
					},
					"AgAAAJdRAAAAAAAAmFEAAAAAAAAAAAAAmFEAAAAAAACZUQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAl1EAAAAAAACXUQAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					2,
					"left_delete",
					null,
					"AgAAAJhRAAAAAAAAmFEAAAAAAAACAAAA0JeXUQAAAAAAAJdRAAAAAAAAAgAAANCW",
					"AQAAAAAAAAABAAAAmVEAAAAAAACZUQAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": ":PATH="
					},
					"BgAAAJdRAAAAAAAAmFEAAAAAAAAAAAAAmFEAAAAAAACZUQAAAAAAAAAAAACZUQAAAAAAAJpRAAAAAAAAAAAAAJpRAAAAAAAAm1EAAAAAAAAAAAAAm1EAAAAAAACcUQAAAAAAAAAAAACcUQAAAAAAAJ1RAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAl1EAAAAAAACXUQAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAJ1RAAAAAAAAn1EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnVEAAAAAAACdUQAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "disable"
					},
					"BwAAAJ5RAAAAAAAAn1EAAAAAAAAAAAAAn1EAAAAAAACgUQAAAAAAAAAAAACgUQAAAAAAAKFRAAAAAAAAAAAAAKFRAAAAAAAAolEAAAAAAAAAAAAAolEAAAAAAACjUQAAAAAAAAAAAACjUQAAAAAAAKRRAAAAAAAAAAAAAKRRAAAAAAAApVEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnlEAAAAAAACeUQAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					7,
					"left_delete",
					null,
					"BwAAAKRRAAAAAAAApFEAAAAAAAABAAAAZaNRAAAAAAAAo1EAAAAAAAABAAAAbKJRAAAAAAAAolEAAAAAAAABAAAAYqFRAAAAAAAAoVEAAAAAAAABAAAAYaBRAAAAAAAAoFEAAAAAAAABAAAAc59RAAAAAAAAn1EAAAAAAAABAAAAaZ5RAAAAAAAAnlEAAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAApVEAAAAAAAClUQAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "/goto/e"
					},
					"BwAAAJ5RAAAAAAAAn1EAAAAAAAAAAAAAn1EAAAAAAACgUQAAAAAAAAAAAACgUQAAAAAAAKFRAAAAAAAAAAAAAKFRAAAAAAAAolEAAAAAAAAAAAAAolEAAAAAAACjUQAAAAAAAAAAAACjUQAAAAAAAKRRAAAAAAAAAAAAAKRRAAAAAAAApVEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnlEAAAAAAACeUQAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAAKVRAAAAAAAAplEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApVEAAAAAAAClUQAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					2,
					"left_delete",
					null,
					"AgAAAKVRAAAAAAAApVEAAAAAAAABAAAAaKRRAAAAAAAApFEAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAplEAAAAAAACmUQAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "hell"
					},
					"BAAAAKRRAAAAAAAApVEAAAAAAAAAAAAApVEAAAAAAACmUQAAAAAAAAAAAACmUQAAAAAAAKdRAAAAAAAAAAAAAKdRAAAAAAAAqFEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApFEAAAAAAACkUQAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"paste",
					null,
					"AQAAANJRAAAAAAAA5FEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0lEAAAAAAADSUQAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"paste",
					null,
					"AQAAAA1SAAAAAAAAH1IAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADVIAAAAAAAANUgAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAG9NAAAAAAAAcE0AAAAAAAAAAAAAcE0AAAAAAABxTQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAb00AAAAAAABvTQAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"reindent",
					null,
					"AQAAAHBNAAAAAAAAck0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcE0AAAAAAABwTQAAAAAAAAAAAAAAAAAA"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "unset"
					},
					"BQAAAHJNAAAAAAAAc00AAAAAAAAAAAAAc00AAAAAAAB0TQAAAAAAAAAAAAB0TQAAAAAAAHVNAAAAAAAAAAAAAHVNAAAAAAAAdk0AAAAAAAAAAAAAdk0AAAAAAAB3TQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAck0AAAAAAAByTQAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHdNAAAAAAAAeU0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAd00AAAAAAAB3TQAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"paste",
					null,
					"AQAAAHhNAAAAAAAAjk0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeE0AAAAAAAB4TQAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAI9NAAAAAAAAkE0AAAAAAAAAAAAAkE0AAAAAAACSTQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAj00AAAAAAACPTQAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"paste",
					null,
					"AQAAAJJNAAAAAAAAr00AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkk0AAAAAAACSTQAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"paste",
					null,
					"AgAAAJhNAAAAAAAArk0AAAAAAAAAAAAArk0AAAAAAACuTQAAAAAAABYAAABMSUJTUVVJU0hfSU5DTFVERV9QQVRI",
					"AQAAAAAAAAABAAAAmE0AAAAAAACuTQAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAALdRAAAAAAAAuFEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAt1EAAAAAAAC3UQAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": " D"
					},
					"AgAAALhRAAAAAAAAuVEAAAAAAAAAAAAAuVEAAAAAAAC6UQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuFEAAAAAAAC4UQAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "onb"
					},
					"AwAAALpRAAAAAAAAu1EAAAAAAAAAAAAAu1EAAAAAAAC8UQAAAAAAAAAAAAC8UQAAAAAAAL1RAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAulEAAAAAAAC6UQAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"left_delete",
					null,
					"AQAAALxRAAAAAAAAvFEAAAAAAAABAAAAYg",
					"AQAAAAAAAAABAAAAvVEAAAAAAAC9UQAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "'t"
					},
					"AgAAALxRAAAAAAAAvVEAAAAAAAAAAAAAvVEAAAAAAAC+UQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvFEAAAAAAAC8UQAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": " user"
					},
					"BQAAAL5RAAAAAAAAv1EAAAAAAAAAAAAAv1EAAAAAAADAUQAAAAAAAAAAAADAUQAAAAAAAMFRAAAAAAAAAAAAAMFRAAAAAAAAwlEAAAAAAAAAAAAAwlEAAAAAAADDUQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvlEAAAAAAAC+UQAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": " system"
					},
					"BwAAAMNRAAAAAAAAxFEAAAAAAAAAAAAAxFEAAAAAAADFUQAAAAAAAAAAAADFUQAAAAAAAMZRAAAAAAAAAAAAAMZRAAAAAAAAx1EAAAAAAAAAAAAAx1EAAAAAAADIUQAAAAAAAAAAAADIUQAAAAAAAMlRAAAAAAAAAAAAAMlRAAAAAAAAylEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAw1EAAAAAAADDUQAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": " libs"
					},
					"BQAAAMpRAAAAAAAAy1EAAAAAAAAAAAAAy1EAAAAAAADMUQAAAAAAAAAAAADMUQAAAAAAAM1RAAAAAAAAAAAAAM1RAAAAAAAAzlEAAAAAAAAAAAAAzlEAAAAAAADPUQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAylEAAAAAAADKUQAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "quish"
					},
					"BQAAAM9RAAAAAAAA0FEAAAAAAAAAAAAA0FEAAAAAAADRUQAAAAAAAAAAAADRUQAAAAAAANJRAAAAAAAAAAAAANJRAAAAAAAA01EAAAAAAAAAAAAA01EAAAAAAADUUQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAz1EAAAAAAADPUQAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAANRRAAAAAAAA1VEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1FEAAAAAAADUUQAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANVRAAAAAAAA1lEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1VEAAAAAAADVUQAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"left_delete",
					null,
					"AQAAANVRAAAAAAAA1VEAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA1lEAAAAAAADWUQAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "use"
					},
					"AwAAANVRAAAAAAAA1lEAAAAAAAAAAAAA1lEAAAAAAADXUQAAAAAAAAAAAADXUQAAAAAAANhRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1VEAAAAAAADVUQAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": " embedded"
					},
					"CQAAANhRAAAAAAAA2VEAAAAAAAAAAAAA2VEAAAAAAADaUQAAAAAAAAAAAADaUQAAAAAAANtRAAAAAAAAAAAAANtRAAAAAAAA3FEAAAAAAAAAAAAA3FEAAAAAAADdUQAAAAAAAAAAAADdUQAAAAAAAN5RAAAAAAAAAAAAAN5RAAAAAAAA31EAAAAAAAAAAAAA31EAAAAAAADgUQAAAAAAAAAAAADgUQAAAAAAAOFRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2FEAAAAAAADYUQAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAG9NAAAAAAAAcE0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAb00AAAAAAABvTQAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"reindent",
					null,
					"AQAAAHBNAAAAAAAAck0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcE0AAAAAAABwTQAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"paste",
					null,
					"AQAAAHJNAAAAAAAAnE0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAck0AAAAAAAByTQAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					3,
					"left_delete",
					null,
					"AwAAAOBRAAAAAAAA4FEAAAAAAADXAAAAICAgICMgRG9uJ3QgdXNlciBzeXN0ZW0gbGlic3F1aXNoL3VzZSBlbWJlZGRlZAogICAgQ01BS0VfQVJHUyAtRCBMaWJzcXVpc2hfUk9PVDpQQVRIPScvZ290by9oZWxsJwogICAgQ01BS0VfQVJHUyAtRCBMSUJTUVVJU0hfSU5DTFVERV9QQVRIOlBBVEg9Jy9nb3RvL2hlbGwnCiAgICBDTUFLRV9BUkdTIC1EIExJQlNRVUlTSF9MSUJSQVJZX1BBVEg6UEFUSD0nL2dvdG8vaGVsbCffUQAAAAAAAN9RAAAAAAAAAQAAAAreUQAAAAAAAN5RAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAt1IAAAAAAADgUQAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					3,
					"left_delete",
					null,
					"AwAAAHBNAAAAAAAAcE0AAAAAAABsAAAAICAjIERvbid0IHVzZXIgc3lzdGVtIGxpYnNxdWlzaC91c2UgZW1iZWRkZWQKICB1bnNldChMSUJTUVVJU0hfSU5DTFVERV9QQVRIKQogIHVuc2V0KExJQlNRVUlTSF9MSUJSQVJZX1BBVEgpb00AAAAAAABvTQAAAAAAAAEAAAAKbk0AAAAAAABuTQAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAA3E0AAAAAAABwTQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/lava_lib/reader_lsd/reader_lsd.cpp",
			"settings":
			{
				"buffer_size": 2883,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAHgJAAAAAAAAeQkAAAAAAAAAAAAAeQkAAAAAAAB6CQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4CQAAAAAAAHgJAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"reindent",
					null,
					"AQAAAHkJAAAAAAAAhQkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB5CQAAAAAAAHkJAAAAAAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAIUJAAAAAAAAhgkAAAAAAAAAAAAAhgkAAAAAAACHCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACFCQAAAAAAAIUJAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIcJAAAAAAAAiQkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACHCQAAAAAAAIcJAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAIgJAAAAAAAAiQkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACICQAAAAAAAIgJAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert_completion",
					{
						"completion": "mpVisitor",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mpVisitor"
					},
					"AgAAAIgJAAAAAAAAiAkAAAAAAAABAAAAbYgJAAAAAAAAkQkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJCQAAAAAAAIkJAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "->failed"
					},
					"CAAAAJEJAAAAAAAAkgkAAAAAAAAAAAAAkgkAAAAAAACTCQAAAAAAAAAAAACTCQAAAAAAAJQJAAAAAAAAAAAAAJQJAAAAAAAAlQkAAAAAAAAAAAAAlQkAAAAAAACWCQAAAAAAAAAAAACWCQAAAAAAAJcJAAAAAAAAAAAAAJcJAAAAAAAAmAkAAAAAAAAAAAAAmAkAAAAAAACZCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACRCQAAAAAAAJEJAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJkJAAAAAAAAmwkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZCQAAAAAAAJkJAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJwJAAAAAAAAnQkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACcCQAAAAAAAJwJAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJ0JAAAAAAAAnwkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdCQAAAAAAAJ0JAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAJ4JAAAAAAAAnwkAAAAAAAAAAAAAnwkAAAAAAACrCQAAAAAAAAAAAACrCQAAAAAAAKwJAAAAAAAAAAAAAKwJAAAAAAAAuAkAAAAAAAAAAAAAnwkAAAAAAACfCQAAAAAAAAwAAAAgICAgICAgICAgICCfCQAAAAAAAK8JAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACeCQAAAAAAAJ4JAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "ret"
					},
					"AwAAAK8JAAAAAAAAsAkAAAAAAAAAAAAAsAkAAAAAAACxCQAAAAAAAAAAAACxCQAAAAAAALIJAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvCQAAAAAAAK8JAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAAK8JAAAAAAAArwkAAAAAAAADAAAAcmV0rwkAAAAAAAC1CQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyCQAAAAAAALIJAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " f"
					},
					"AgAAALUJAAAAAAAAtgkAAAAAAAAAAAAAtgkAAAAAAAC3CQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1CQAAAAAAALUJAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "false"
					},
					"AgAAALYJAAAAAAAAtgkAAAAAAAABAAAAZrYJAAAAAAAAuwkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3CQAAAAAAALcJAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALsJAAAAAAAAvAkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7CQAAAAAAALsJAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/lava_lib/reader_lsd/visitor.h",
			"settings":
			{
				"buffer_size": 4649,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					6,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEMIAAAAAAAARAgAAAAAAAAAAAAARAgAAAAAAABICAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABDCAAAAAAAAEMIAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"paste",
					null,
					"AQAAAEgIAAAAAAAAeggAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABICAAAAAAAAEgIAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "faile"
					},
					"BgAAAFQIAAAAAAAAVQgAAAAAAAAAAAAAVQgAAAAAAABVCAAAAAAAAAsAAAByZWFkeVRvUXVpdFUIAAAAAAAAVggAAAAAAAAAAAAAVggAAAAAAABXCAAAAAAAAAAAAABXCAAAAAAAAFgIAAAAAAAAAAAAAFgIAAAAAAAAWQgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABUCAAAAAAAAF8IAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert_completion",
					{
						"completion": "failed",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "failed"
					},
					"AgAAAFQIAAAAAAAAVAgAAAAAAAAFAAAAZmFpbGVUCAAAAAAAAFoIAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABZCAAAAAAAAFkIAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "Failed"
					},
					"BgAAAG0IAAAAAAAAbggAAAAAAAAAAAAAbggAAAAAAABvCAAAAAAAAAAAAABvCAAAAAAAAHAIAAAAAAAAAAAAAHAIAAAAAAAAcQgAAAAAAAAAAAAAcQgAAAAAAAByCAAAAAAAAAAAAAByCAAAAAAAAHMIAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABtCAAAAAAAAG0IAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					4,
					"right_delete",
					null,
					"BAAAAHMIAAAAAAAAcwgAAAAAAAABAAAAUXMIAAAAAAAAcwgAAAAAAAABAAAAdXMIAAAAAAAAcwgAAAAAAAABAAAAaXMIAAAAAAAAcwgAAAAAAAABAAAAdA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABzCAAAAAAAAHMIAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "\nbo"
					},
					"BAAAACcJAAAAAAAAKAkAAAAAAAAAAAAAKAkAAAAAAAAsCQAAAAAAAAAAAAAsCQAAAAAAAC0JAAAAAAAAAAAAAC0JAAAAAAAALgkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAnCQAAAAAAACcJAAAAAAAAAAAAAABwekA"
				],
				[
					17,
					1,
					"insert_completion",
					{
						"completion": "bool",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "bool"
					},
					"AgAAACwJAAAAAAAALAkAAAAAAAACAAAAYm8sCQAAAAAAADAJAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAuCQAAAAAAAC4JAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " mF"
					},
					"AwAAADAJAAAAAAAAMQkAAAAAAAAAAAAAMQkAAAAAAAAyCQAAAAAAAAAAAAAyCQAAAAAAADMJAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwCQAAAAAAADAJAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"insert_completion",
					{
						"completion": "mFailed",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mFailed"
					},
					"AgAAADEJAAAAAAAAMQkAAAAAAAACAAAAbUYxCQAAAAAAADgJAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAzCQAAAAAAADMJAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAADgJAAAAAAAAOQkAAAAAAAAAAAAAOQkAAAAAAAA6CQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA4CQAAAAAAADgJAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADoJAAAAAAAAOwkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6CQAAAAAAADoJAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "false"
					},
					"AQAAADsJAAAAAAAAQAkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7CQAAAAAAADsJAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEAJAAAAAAAAQQkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABACQAAAAAAAEAJAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "mpSes"
					},
					"BgAAAGwIAAAAAAAAbQgAAAAAAAAAAAAAbQgAAAAAAABtCAAAAAAAAAcAAABtRmFpbGVkbQgAAAAAAABuCAAAAAAAAAAAAABuCAAAAAAAAG8IAAAAAAAAAAAAAG8IAAAAAAAAcAgAAAAAAAAAAAAAcAgAAAAAAABxCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABsCAAAAAAAAHMIAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert_completion",
					{
						"completion": "mpSession",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mpSession"
					},
					"AgAAAGwIAAAAAAAAbAgAAAAAAAAFAAAAbXBTZXNsCAAAAAAAAHUIAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABxCAAAAAAAAHEIAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAHUIAAAAAAAAdggAAAAAAAAAAAAAdggAAAAAAAB3CAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB1CAAAAAAAAHUIAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHcIAAAAAAAAeAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB3CAAAAAAAAHcIAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "no"
					},
					"AgAAAHgIAAAAAAAAeQgAAAAAAAAAAAAAeQgAAAAAAAB6CAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4CAAAAAAAAHgIAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					2,
					"left_delete",
					null,
					"AgAAAHkIAAAAAAAAeQgAAAAAAAABAAAAb3gIAAAAAAAAeAgAAAAAAAABAAAAbg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB6CAAAAAAAAHoIAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "mpSe"
					},
					"BAAAAHgIAAAAAAAAeQgAAAAAAAAAAAAAeQgAAAAAAAB6CAAAAAAAAAAAAAB6CAAAAAAAAHsIAAAAAAAAAAAAAHsIAAAAAAAAfAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4CAAAAAAAAHgIAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"insert_completion",
					{
						"completion": "mpSession",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mpSession"
					},
					"AgAAAHgIAAAAAAAAeAgAAAAAAAAEAAAAbXBTZXgIAAAAAAAAgQgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB8CAAAAAAAAHwIAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "-<>"
					},
					"AwAAAIEIAAAAAAAAgggAAAAAAAAAAAAAgggAAAAAAACDCAAAAAAAAAAAAACDCAAAAAAAAIQIAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBCAAAAAAAAIEIAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					2,
					"left_delete",
					null,
					"AgAAAIMIAAAAAAAAgwgAAAAAAAABAAAAPoIIAAAAAAAAgggAAAAAAAABAAAAPA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACECAAAAAAAAIQIAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": ">faile"
					},
					"BgAAAIIIAAAAAAAAgwgAAAAAAAAAAAAAgwgAAAAAAACECAAAAAAAAAAAAACECAAAAAAAAIUIAAAAAAAAAAAAAIUIAAAAAAAAhggAAAAAAAAAAAAAhggAAAAAAACHCAAAAAAAAAAAAACHCAAAAAAAAIgIAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCCAAAAAAAAIIIAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"insert_completion",
					{
						"completion": "failed",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "failed"
					},
					"AgAAAIMIAAAAAAAAgwgAAAAAAAAFAAAAZmFpbGWDCAAAAAAAAIkIAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACICAAAAAAAAIgIAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIkIAAAAAAAAiwgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJCAAAAAAAAIkIAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAIsIAAAAAAAAjAgAAAAAAAAAAAAAjAgAAAAAAACNCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACLCAAAAAAAAIsIAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": " fa"
					},
					"AwAAAI0IAAAAAAAAjggAAAAAAAAAAAAAjggAAAAAAACPCAAAAAAAAAAAAACPCAAAAAAAAJAIAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNCAAAAAAAAI0IAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "false"
					},
					"AgAAAI4IAAAAAAAAjggAAAAAAAACAAAAZmGOCAAAAAAAAJMIAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACQCAAAAAAAAJAIAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					2,
					"left_delete",
					null,
					"AgAAAEgJAAAAAAAASAkAAAAAAAAZAAAAICAgIGJvb2wgbUZhaWxlZCA9IGZhbHNlO0cJAAAAAAAARwkAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABhCQAAAAAAAEgJAAAAAAAAAAAAAAAA8L8"
				],
				[
					63,
					1,
					"right_delete",
					null,
					"AQAAAGIIAAAAAAAAYggAAAAAAAA0AAAAIHsgcmV0dXJuIG1wU2Vzc2lvbiA/IG1wU2Vzc2lvbi0+ZmFpbGVkKCkgOiBmYWxzZTsgfQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABiCAAAAAAAAJYIAAAAAAAAAAAAAAAA8L8"
				],
				[
					66,
					7,
					"right_delete",
					null,
					"BwAAAEgIAAAAAAAASAgAAAAAAAABAAAAaUgIAAAAAAAASAgAAAAAAAABAAAAbkgIAAAAAAAASAgAAAAAAAABAAAAbEgIAAAAAAAASAgAAAAAAAABAAAAaUgIAAAAAAAASAgAAAAAAAABAAAAbkgIAAAAAAAASAgAAAAAAAABAAAAZUgIAAAAAAAASAgAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABICAAAAAAAAEgIAAAAAAAAAAAAAAAA8L8"
				],
				[
					68,
					7,
					"right_delete",
					null,
					"BwAAABEIAAAAAAAAEQgAAAAAAAABAAAAaREIAAAAAAAAEQgAAAAAAAABAAAAbhEIAAAAAAAAEQgAAAAAAAABAAAAbBEIAAAAAAAAEQgAAAAAAAABAAAAaREIAAAAAAAAEQgAAAAAAAABAAAAbhEIAAAAAAAAEQgAAAAAAAABAAAAZREIAAAAAAAAEQgAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAARCAAAAAAAABEIAAAAAAAAAAAAAAAAQkA"
				],
				[
					70,
					7,
					"right_delete",
					null,
					"BwAAAM0HAAAAAAAAzQcAAAAAAAABAAAAac0HAAAAAAAAzQcAAAAAAAABAAAAbs0HAAAAAAAAzQcAAAAAAAABAAAAbM0HAAAAAAAAzQcAAAAAAAABAAAAac0HAAAAAAAAzQcAAAAAAAABAAAAbs0HAAAAAAAAzQcAAAAAAAABAAAAZc0HAAAAAAAAzQcAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNBwAAAAAAAM0HAAAAAAAAAAAAAAAAQkA"
				]
			]
		},
		{
			"file": "src/lava_lib/reader_lsd/session.h",
			"settings":
			{
				"buffer_size": 6197,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\nbool"
					},
					"BwAAAOUPAAAAAAAA5g8AAAAAAAAAAAAA5g8AAAAAAADoDwAAAAAAAAAAAADoDwAAAAAAAOoPAAAAAAAAAAAAAOoPAAAAAAAA6w8AAAAAAAAAAAAA6w8AAAAAAADsDwAAAAAAAAAAAADsDwAAAAAAAO0PAAAAAAAAAAAAAO0PAAAAAAAA7g8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADlDwAAAAAAAOUPAAAAAAAAAAAAAAAA8L8"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": " fail"
					},
					"BQAAAO4PAAAAAAAA7w8AAAAAAAAAAAAA7w8AAAAAAADwDwAAAAAAAAAAAADwDwAAAAAAAPEPAAAAAAAAAAAAAPEPAAAAAAAA8g8AAAAAAAAAAAAA8g8AAAAAAADzDwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuDwAAAAAAAO4PAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"insert_completion",
					{
						"completion": "failed",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "failed"
					},
					"AgAAAO8PAAAAAAAA7w8AAAAAAAAEAAAAZmFpbO8PAAAAAAAA9Q8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADzDwAAAAAAAPMPAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAPUPAAAAAAAA9g8AAAAAAAAAAAAA9g8AAAAAAAD3DwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD1DwAAAAAAAPUPAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPcPAAAAAAAA+A8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3DwAAAAAAAPcPAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					9,
					"left_delete",
					null,
					"CQAAAPcPAAAAAAAA9w8AAAAAAAABAAAAIPYPAAAAAAAA9g8AAAAAAAABAAAAPfUPAAAAAAAA9Q8AAAAAAAABAAAAIPQPAAAAAAAA9A8AAAAAAAABAAAAZPMPAAAAAAAA8w8AAAAAAAABAAAAZfIPAAAAAAAA8g8AAAAAAAABAAAAbPEPAAAAAAAA8Q8AAAAAAAABAAAAafAPAAAAAAAA8A8AAAAAAAABAAAAYe8PAAAAAAAA7w8AAAAAAAABAAAAZg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD4DwAAAAAAAPgPAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "mFail"
					},
					"BQAAAO8PAAAAAAAA8A8AAAAAAAAAAAAA8A8AAAAAAADxDwAAAAAAAAAAAADxDwAAAAAAAPIPAAAAAAAAAAAAAPIPAAAAAAAA8w8AAAAAAAAAAAAA8w8AAAAAAAD0DwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvDwAAAAAAAO8PAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "ed"
					},
					"AgAAAPQPAAAAAAAA9Q8AAAAAAAAAAAAA9Q8AAAAAAAD2DwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD0DwAAAAAAAPQPAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAPYPAAAAAAAA9w8AAAAAAAAAAAAA9w8AAAAAAAD4DwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2DwAAAAAAAPYPAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPgPAAAAAAAA+Q8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD4DwAAAAAAAPgPAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "false"
					},
					"AQAAAPkPAAAAAAAA/g8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5DwAAAAAAAPkPAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAP4PAAAAAAAA/w8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD+DwAAAAAAAP4PAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAANoPAAAAAAAA2w8AAAAAAAAAAAAA2w8AAAAAAADcDwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADaDwAAAAAAANoPAAAAAAAAAAAAAAAgbEA"
				],
				[
					18,
					1,
					"reindent",
					null,
					"AQAAANsPAAAAAAAA3w8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADbDwAAAAAAANsPAAAAAAAAAAAAAAAAAAA"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "bool"
					},
					"BAAAAN8PAAAAAAAA4A8AAAAAAAAAAAAA4A8AAAAAAADhDwAAAAAAAAAAAADhDwAAAAAAAOIPAAAAAAAAAAAAAOIPAAAAAAAA4w8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfDwAAAAAAAN8PAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " fail"
					},
					"BQAAAOMPAAAAAAAA5A8AAAAAAAAAAAAA5A8AAAAAAADlDwAAAAAAAAAAAADlDwAAAAAAAOYPAAAAAAAAAAAAAOYPAAAAAAAA5w8AAAAAAAAAAAAA5w8AAAAAAADoDwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADjDwAAAAAAAOMPAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert_completion",
					{
						"completion": "failed",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "failed"
					},
					"AgAAAOQPAAAAAAAA5A8AAAAAAAAEAAAAZmFpbOQPAAAAAAAA6g8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADoDwAAAAAAAOgPAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOoPAAAAAAAA7A8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADqDwAAAAAAAOoPAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": " c"
					},
					"AgAAAOwPAAAAAAAA7Q8AAAAAAAAAAAAA7Q8AAAAAAADuDwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsDwAAAAAAAOwPAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert_completion",
					{
						"completion": "const",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "const"
					},
					"AgAAAO0PAAAAAAAA7Q8AAAAAAAABAAAAY+0PAAAAAAAA8g8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuDwAAAAAAAO4PAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " P"
					},
					"AgAAAPIPAAAAAAAA8w8AAAAAAAAAAAAA8w8AAAAAAAD0DwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADyDwAAAAAAAPIPAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"left_delete",
					null,
					"AQAAAPMPAAAAAAAA8w8AAAAAAAABAAAAUA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD0DwAAAAAAAPQPAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAPMPAAAAAAAA9Q8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADzDwAAAAAAAPMPAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " re"
					},
					"AwAAAPQPAAAAAAAA9Q8AAAAAAAAAAAAA9Q8AAAAAAAD2DwAAAAAAAAAAAAD2DwAAAAAAAPcPAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD0DwAAAAAAAPQPAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAAPUPAAAAAAAA9Q8AAAAAAAACAAAAcmX1DwAAAAAAAPsPAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3DwAAAAAAAPcPAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " mF"
					},
					"AwAAAPsPAAAAAAAA/A8AAAAAAAAAAAAA/A8AAAAAAAD9DwAAAAAAAAAAAAD9DwAAAAAAAP4PAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD7DwAAAAAAAPsPAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert_completion",
					{
						"completion": "mFailed",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "mFailed"
					},
					"AgAAAPwPAAAAAAAA/A8AAAAAAAACAAAAbUb8DwAAAAAAAAMQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD+DwAAAAAAAP4PAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAAMQAAAAAAAABBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAADEAAAAAAAAAMQAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAQQAAAAAAAABRAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAEEAAAAAAAAAQQAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					3,
					"left_delete",
					null,
					"AwAAANsPAAAAAAAA2w8AAAAAAAArAAAAICAgIGJvb2wgZmFpbGVkKCkgY29uc3QgeyByZXR1cm4gbUZhaWxlZDsgfdoPAAAAAAAA2g8AAAAAAAABAAAACtkPAAAAAAAA2Q8AAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAGEAAAAAAAANsPAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAG0NAAAAAAAAbg0AAAAAAAAAAAAAbg0AAAAAAABvDQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABtDQAAAAAAAG0NAAAAAAAAAAAAAADgiUA"
				],
				[
					43,
					1,
					"reindent",
					null,
					"AQAAAG4NAAAAAAAAcg0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABuDQAAAAAAAG4NAAAAAAAAAAAAAAAAAAA"
				],
				[
					44,
					1,
					"paste",
					null,
					"AQAAAHINAAAAAAAAnQ0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAByDQAAAAAAAHINAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					2,
					"left_delete",
					null,
					"AgAAAHQNAAAAAAAAdA0AAAAAAAACAAAAICByDQAAAAAAAHINAAAAAAAAAgAAACAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB2DQAAAAAAAHYNAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/Falcor/Core/API/GFX/GFXTexture.cpp",
			"settings":
			{
				"buffer_size": 7847,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/GFX/GFXDevice.cpp",
			"settings":
			{
				"buffer_size": 20734,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/DeferredLightingPass/DeferredLightingPass.cs.slang",
			"settings":
			{
				"buffer_size": 25072,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					2,
					"right_delete",
					null,
					"AgAAAINPAAAAAAAAg08AAAAAAAABAAAAL4NPAAAAAAAAg08AAAAAAAABAAAALw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAINPAAAAAAAAg08AAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAMBPAAAAAAAAwU8AAAAAAAAAAAAAwU8AAAAAAADCTwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMBPAAAAAAAAwE8AAAAAAAAAAAAAAABCQA"
				]
			]
		},
		{
			"file": "src/Falcor/Utils/Image/LTX_Bitmap.cpp",
			"settings":
			{
				"buffer_size": 26475,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					6,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BAAAAItIAAAAAAAAjEgAAAAAAAAAAAAAjEgAAAAAAACNSAAAAAAAAAAAAACNSAAAAAAAAI5IAAAAAAAAAAAAAI5IAAAAAAAAj0gAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAItIAAAAAAAAi0gAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAI9IAAAAAAAAkUgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI9IAAAAAAAAj0gAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "!p"
					},
					"AgAAAJBIAAAAAAAAkUgAAAAAAAAAAAAAkUgAAAAAAACSSAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJBIAAAAAAAAkEgAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "F"
					},
					"AQAAAJJIAAAAAAAAk0gAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJJIAAAAAAAAkkgAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"insert_completion",
					{
						"completion": "pFile",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "pFile"
					},
					"AgAAAJFIAAAAAAAAkUgAAAAAAAACAAAAcEaRSAAAAAAAAJZIAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJNIAAAAAAAAk0gAAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJdIAAAAAAAAmEgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJdIAAAAAAAAl0gAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJhIAAAAAAAAmkgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJhIAAAAAAAAmEgAAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAJlIAAAAAAAAmkgAAAAAAAAAAAAAmkgAAAAAAACbSAAAAAAAAAAAAACbSAAAAAAAAJxIAAAAAAAAAAAAAJxIAAAAAAAAnUgAAAAAAAAAAAAAmkgAAAAAAACaSAAAAAAAAAEAAAAJmkgAAAAAAACcSAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJlIAAAAAAAAmUgAAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAJ9IAAAAAAAAoEgAAAAAAAAAAAAAoEgAAAAAAAChSAAAAAAAAAAAAACaSAAAAAAAAJpIAAAAAAAAAgAAAAkJ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ9IAAAAAAAAn0gAAAAAAAAAAAAAAABSQA"
				],
				[
					18,
					1,
					"reindent",
					null,
					"AQAAAJpIAAAAAAAAnEgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJpIAAAAAAAAmkgAAAAAAAAAAAAAAABCQA"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "LLO"
					},
					"BAAAAJxIAAAAAAAAnUgAAAAAAAAAAAAAoUgAAAAAAAChSAAAAAAAAAEAAAAJnUgAAAAAAACeSAAAAAAAAAAAAACeSAAAAAAAAJ9IAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJxIAAAAAAAAnEgAAAAAAAAAAAAAAADwvw"
				],
				[
					20,
					1,
					"insert_completion",
					{
						"completion": "LLOG_ERR",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "LLOG_ERR"
					},
					"AgAAAJxIAAAAAAAAnEgAAAAAAAADAAAATExPnEgAAAAAAACkSAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ9IAAAAAAAAn0gAAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKRIAAAAAAAApUgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKRIAAAAAAAApEgAAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					4,
					"left_delete",
					null,
					"BAAAAKRIAAAAAAAApEgAAAAAAAABAAAAIKNIAAAAAAAAo0gAAAAAAAABAAAAUqJIAAAAAAAAokgAAAAAAAABAAAAUqFIAAAAAAAAoUgAAAAAAAABAAAARQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKVIAAAAAAAApUgAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "ERR"
					},
					"AwAAAKFIAAAAAAAAokgAAAAAAAAAAAAAokgAAAAAAACjSAAAAAAAAAAAAACjSAAAAAAAAKRIAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKFIAAAAAAAAoUgAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": " <<"
					},
					"AwAAAKRIAAAAAAAApUgAAAAAAAAAAAAApUgAAAAAAACmSAAAAAAAAAAAAACmSAAAAAAAAKdIAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKRIAAAAAAAApEgAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKdIAAAAAAAAqEgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKdIAAAAAAAAp0gAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAKhIAAAAAAAAqkgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKhIAAAAAAAAqEgAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "Er"
					},
					"AgAAAKlIAAAAAAAAqkgAAAAAAAAAAAAAqkgAAAAAAACrSAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKlIAAAAAAAAqUgAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"insert_completion",
					{
						"completion": "Error",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Error"
					},
					"AgAAAKlIAAAAAAAAqUgAAAAAAAACAAAARXKpSAAAAAAAAK5IAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKtIAAAAAAAAq0gAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " ope"
					},
					"BAAAAK5IAAAAAAAAr0gAAAAAAAAAAAAAr0gAAAAAAACwSAAAAAAAAAAAAACwSAAAAAAAALFIAAAAAAAAAAAAALFIAAAAAAAAskgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK5IAAAAAAAArkgAAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					1,
					"insert_completion",
					{
						"completion": "opening",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "opening"
					},
					"AgAAAK9IAAAAAAAAr0gAAAAAAAADAAAAb3Blr0gAAAAAAAC2SAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALJIAAAAAAAAskgAAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " file"
					},
					"BQAAALZIAAAAAAAAt0gAAAAAAAAAAAAAt0gAAAAAAAC4SAAAAAAAAAAAAAC4SAAAAAAAALlIAAAAAAAAAAAAALlIAAAAAAAAukgAAAAAAAAAAAAAukgAAAAAAAC7SAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALZIAAAAAAAAtkgAAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALtIAAAAAAAAvEgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALtIAAAAAAAAu0gAAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAALdIAAAAAAAAuEgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALdIAAAAAAAAt0gAAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					1,
					"left_delete",
					null,
					"AQAAALdIAAAAAAAAt0gAAAAAAAABAAAAbA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALhIAAAAAAAAuEgAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": " <<"
					},
					"AwAAAL1IAAAAAAAAvkgAAAAAAAAAAAAAvkgAAAAAAAC/SAAAAAAAAAAAAAC/SAAAAAAAAMBIAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL1IAAAAAAAAvUgAAAAAAAAAAAAAAADwvw"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": " d"
					},
					"AgAAAMBIAAAAAAAAwUgAAAAAAAAAAAAAwUgAAAAAAADCSAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMBIAAAAAAAAwEgAAAAAAAAAAAAAAADwvw"
				],
				[
					41,
					1,
					"insert_completion",
					{
						"completion": "dstFilename",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "dstFilename"
					},
					"AgAAAMFIAAAAAAAAwUgAAAAAAAABAAAAZMFIAAAAAAAAzEgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMJIAAAAAAAAwkgAAAAAAAAAAAAAAADwvw"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": " <<"
					},
					"AwAAAMxIAAAAAAAAzUgAAAAAAAAAAAAAzUgAAAAAAADOSAAAAAAAAAAAAADOSAAAAAAAAM9IAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMxIAAAAAAAAzEgAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAM9IAAAAAAAA0EgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM9IAAAAAAAAz0gAAAAAAAAAAAAAAADwvw"
				],
				[
					44,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAANBIAAAAAAAA0kgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANBIAAAAAAAA0EgAAAAAAAAAAAAAAADwvw"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAANFIAAAAAAAA0kgAAAAAAAAAAAAA0kgAAAAAAADTSAAAAAAAAAAAAADTSAAAAAAAANRIAAAAAAAAAAAAANRIAAAAAAAA1UgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANFIAAAAAAAA0UgAAAAAAAAAAAAAAADwvw"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " writing"
					},
					"CAAAANVIAAAAAAAA1kgAAAAAAAAAAAAA1kgAAAAAAADXSAAAAAAAAAAAAADXSAAAAAAAANhIAAAAAAAAAAAAANhIAAAAAAAA2UgAAAAAAAAAAAAA2UgAAAAAAADaSAAAAAAAAAAAAADaSAAAAAAAANtIAAAAAAAAAAAAANtIAAAAAAAA3EgAAAAAAAAAAAAA3EgAAAAAAADdSAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANVIAAAAAAAA1UgAAAAAAAAAAAAAAADwvw"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": " !!!"
					},
					"BAAAAN1IAAAAAAAA3kgAAAAAAAAAAAAA3kgAAAAAAADfSAAAAAAAAAAAAADfSAAAAAAAAOBIAAAAAAAAAAAAAOBIAAAAAAAA4UgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN1IAAAAAAAA3UgAAAAAAAAAAAAAAADwvw"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAOJIAAAAAAAA40gAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOJIAAAAAAAA4kgAAAAAAAAAAAAAAADwvw"
				],
				[
					50,
					1,
					"left_delete",
					null,
					"AQAAAOJIAAAAAAAA4kgAAAAAAAABAAAAbA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAONIAAAAAAAA40gAAAAAAAAAAAAAAADwvw"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOJIAAAAAAAA40gAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOJIAAAAAAAA4kgAAAAAAAAAAAAAAADwvw"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "\\n"
					},
					"AgAAAOFIAAAAAAAA4kgAAAAAAAAAAAAA4kgAAAAAAADjSAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOFIAAAAAAAA4UgAAAAAAAAAAAAAAADwvw"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": " Text"
					},
					"BQAAAONIAAAAAAAA5EgAAAAAAAAAAAAA5EgAAAAAAADlSAAAAAAAAAAAAADlSAAAAAAAAOZIAAAAAAAAAAAAAOZIAAAAAAAA50gAAAAAAAAAAAAA50gAAAAAAADoSAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAONIAAAAAAAA40gAAAAAAAAAAAAAAADwvw"
				],
				[
					58,
					1,
					"insert_completion",
					{
						"completion": "Texture",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Texture"
					},
					"AgAAAORIAAAAAAAA5EgAAAAAAAAEAAAAVGV4dORIAAAAAAAA60gAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOhIAAAAAAAA6EgAAAAAAAAAAAAAAADwvw"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": " conver"
					},
					"BwAAAOtIAAAAAAAA7EgAAAAAAAAAAAAA7EgAAAAAAADtSAAAAAAAAAAAAADtSAAAAAAAAO5IAAAAAAAAAAAAAO5IAAAAAAAA70gAAAAAAAAAAAAA70gAAAAAAADwSAAAAAAAAAAAAADwSAAAAAAAAPFIAAAAAAAAAAAAAPFIAAAAAAAA8kgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOtIAAAAAAAA60gAAAAAAAAAAAAAAADwvw"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "sion"
					},
					"BAAAAPJIAAAAAAAA80gAAAAAAAAAAAAA80gAAAAAAAD0SAAAAAAAAAAAAAD0SAAAAAAAAPVIAAAAAAAAAAAAAPVIAAAAAAAA9kgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPJIAAAAAAAA8kgAAAAAAAAAAAAAAADwvw"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": " failer"
					},
					"BwAAAPZIAAAAAAAA90gAAAAAAAAAAAAA90gAAAAAAAD4SAAAAAAAAAAAAAD4SAAAAAAAAPlIAAAAAAAAAAAAAPlIAAAAAAAA+kgAAAAAAAAAAAAA+kgAAAAAAAD7SAAAAAAAAAAAAAD7SAAAAAAAAPxIAAAAAAAAAAAAAPxIAAAAAAAA/UgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPZIAAAAAAAA9kgAAAAAAAAAAAAAAADwvw"
				],
				[
					62,
					1,
					"left_delete",
					null,
					"AQAAAPxIAAAAAAAA/EgAAAAAAAABAAAAcg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP1IAAAAAAAA/UgAAAAAAAAAAAAAAADwvw"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": "d."
					},
					"AgAAAPxIAAAAAAAA/UgAAAAAAAAAAAAA/UgAAAAAAAD+SAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPxIAAAAAAAA/EgAAAAAAAAAAAAAAADwvw"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "\""
					},
					"AQAAAOxIAAAAAAAA7UgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOxIAAAAAAAA7EgAAAAAAAAAAAAAAADwvw"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": " \""
					},
					"AgAAAO1IAAAAAAAA7kgAAAAAAAAAAAAA7kgAAAAAAADvSAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO1IAAAAAAAA7UgAAAAAAAAAAAAAAADwvw"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAO9IAAAAAAAA8EgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO9IAAAAAAAA70gAAAAAAAAAAAAAAADwvw"
				],
				[
					73,
					1,
					"left_delete",
					null,
					"AQAAAOJIAAAAAAAA4kgAAAAAAAAgAAAAbiBUZXh0dXJlICIgIiBjb252ZXJzaW9uIGZhaWxlZC4",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOJIAAAAAAAAAkkAAAAAAAAAAAAAAADwvw"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOJIAAAAAAAA40gAAAAAAAAAAAAA40gAAAAAAADlSAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOJIAAAAAAAA4kgAAAAAAAAAAAAAAADwvw"
				],
				[
					75,
					4,
					"left_delete",
					null,
					"BAAAAORIAAAAAAAA5EgAAAAAAAABAAAACeNIAAAAAAAA40gAAAAAAAABAAAACeJIAAAAAAAA4kgAAAAAAAABAAAACuFIAAAAAAAA4UgAAAAAAAABAAAAXA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOVIAAAAAAAA5UgAAAAAAAAAAAAAAADwvw"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKVIAAAAAAAApkgAAAAAAAAAAAAApkgAAAAAAACoSAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKVIAAAAAAAApUgAAAAAAAAAAAAAAADwvw"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAKhIAAAAAAAAqUgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKhIAAAAAAAAqEgAAAAAAAAAAAAAAADwvw"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": " <<"
					},
					"AwAAAKRIAAAAAAAApUgAAAAAAAAAAAAApUgAAAAAAACmSAAAAAAAAAAAAACmSAAAAAAAAKdIAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKRIAAAAAAAApEgAAAAAAAAAAAAAAADwvw"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKdIAAAAAAAAqEgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKdIAAAAAAAAp0gAAAAAAAAAAAAAAADwvw"
				],
				[
					89,
					1,
					"paste",
					null,
					"AQAAAKhIAAAAAAAAyEgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKhIAAAAAAAAqEgAAAAAAAAAAAAAAADwvw"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "\""
					},
					"AQAAAKhIAAAAAAAAqUgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKhIAAAAAAAAqEgAAAAAAAAAAAAAAADwvw"
				],
				[
					92,
					2,
					"right_delete",
					null,
					"AgAAAKlIAAAAAAAAqUgAAAAAAAABAAAAbqlIAAAAAAAAqUgAAAAAAAABAAAAIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKlIAAAAAAAAqUgAAAAAAAAAAAAAAADwvw"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": "\""
					},
					"AQAAAMdIAAAAAAAAyEgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMdIAAAAAAAAx0gAAAAAAAAAAAAAAADwvw"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": " <<"
					},
					"AwAAALJIAAAAAAAAs0gAAAAAAAAAAAAAs0gAAAAAAAC0SAAAAAAAAAAAAAC0SAAAAAAAALVIAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALJIAAAAAAAAskgAAAAAAAAAAAAAAADwvw"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": " <<"
					},
					"AwAAALVIAAAAAAAAtkgAAAAAAAAAAAAAtkgAAAAAAAC3SAAAAAAAAAAAAAC3SAAAAAAAALhIAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALVIAAAAAAAAtUgAAAAAAAAAAAAAAADwvw"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALhIAAAAAAAAuUgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALhIAAAAAAAAuEgAAAAAAAAAAAAAAADwvw"
				],
				[
					102,
					1,
					"left_delete",
					null,
					"AQAAALhIAAAAAAAAuEgAAAAAAAABAAAAIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALlIAAAAAAAAuUgAAAAAAAAAAAAAAADwvw"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": "\\n"
					},
					"AgAAAM1IAAAAAAAAzkgAAAAAAAAAAAAAzkgAAAAAAADPSAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM1IAAAAAAAAzUgAAAAAAAAAAAAAAADwvw"
				],
				[
					116,
					1,
					"paste",
					null,
					"AQAAALZIAAAAAAAAwUgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALZIAAAAAAAAtkgAAAAAAAAAAAAAAADwvw"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMFIAAAAAAAAwkgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMFIAAAAAAAAwUgAAAAAAAAAAAAAAADwvw"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAP48AAAAAAAA/zwAAAAAAAAAAAAA/zwAAAAAAAAAPQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP48AAAAAAAA/jwAAAAAAAAAAAAAAADwvw"
				],
				[
					125,
					1,
					"reindent",
					null,
					"AQAAAP88AAAAAAAAAD0AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP88AAAAAAAA/zwAAAAAAAAAAAAAAAAAAA"
				],
				[
					126,
					1,
					"paste",
					null,
					"AQAAAAA9AAAAAAAA5j0AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAA9AAAAAAAAAD0AAAAAAAAAAAAAAADwvw"
				],
				[
					128,
					2,
					"right_delete",
					null,
					"AgAAAAA9AAAAAAAAAD0AAAAAAAABAAAACQA9AAAAAAAAAD0AAAAAAAABAAAALw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAA9AAAAAAAAAD0AAAAAAAAAAAAAAIBGQA"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAAA9AAAAAAAAAT0AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAA9AAAAAAAAAD0AAAAAAAAAAAAAAADwvw"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": "ltx"
					},
					"AwAAAAg9AAAAAAAACT0AAAAAAAAAAAAACT0AAAAAAAAKPQAAAAAAAAAAAAAKPQAAAAAAAAs9AAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAg9AAAAAAAACD0AAAAAAAAAAAAAAADwvw"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": " texture"
					},
					"CAAAAAs9AAAAAAAADD0AAAAAAAAAAAAADD0AAAAAAAANPQAAAAAAAAAAAAANPQAAAAAAAA49AAAAAAAAAAAAAA49AAAAAAAADz0AAAAAAAAAAAAADz0AAAAAAAAQPQAAAAAAAAAAAAAQPQAAAAAAABE9AAAAAAAAAAAAABE9AAAAAAAAEj0AAAAAAAAAAAAAEj0AAAAAAAATPQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAs9AAAAAAAACz0AAAAAAAAAAAAAAADwvw"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABM9AAAAAAAAFD0AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABM9AAAAAAAAEz0AAAAAAAAAAAAAAADwvw"
				],
				[
					136,
					17,
					"right_delete",
					null,
					"EQAAABg9AAAAAAAAGD0AAAAAAAABAAAAIBg9AAAAAAAAGD0AAAAAAAABAAAAYRg9AAAAAAAAGD0AAAAAAAABAAAAbhg9AAAAAAAAGD0AAAAAAAABAAAAZBg9AAAAAAAAGD0AAAAAAAABAAAAIBg9AAAAAAAAGD0AAAAAAAABAAAAdxg9AAAAAAAAGD0AAAAAAAABAAAAchg9AAAAAAAAGD0AAAAAAAABAAAAaRg9AAAAAAAAGD0AAAAAAAABAAAAdBg9AAAAAAAAGD0AAAAAAAABAAAAZRg9AAAAAAAAGD0AAAAAAAABAAAAIBg9AAAAAAAAGD0AAAAAAAABAAAAaBg9AAAAAAAAGD0AAAAAAAABAAAAZRg9AAAAAAAAGD0AAAAAAAABAAAAYRg9AAAAAAAAGD0AAAAAAAABAAAAZBg9AAAAAAAAGD0AAAAAAAABAAAAZRg9AAAAAAAAGD0AAAAAAAABAAAAcg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABg9AAAAAAAAGD0AAAAAAAAAAAAAAADwvw"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAN09AAAAAAAA3j0AAAAAAAAAAAAA3j0AAAAAAADhPQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN09AAAAAAAA3T0AAAAAAAAAAAAAAADwvw"
				],
				[
					140,
					1,
					"left_delete",
					null,
					"AQAAAOA9AAAAAAAA4D0AAAAAAAABAAAACQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOE9AAAAAAAA4T0AAAAAAAAAAAAAAADwvw"
				],
				[
					141,
					1,
					"insert",
					{
						"characters": "re"
					},
					"AgAAAOA9AAAAAAAA4T0AAAAAAAAAAAAA4T0AAAAAAADiPQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOA9AAAAAAAA4D0AAAAAAAAAAAAAAADwvw"
				],
				[
					142,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAAOA9AAAAAAAA4D0AAAAAAAACAAAAcmXgPQAAAAAAAOY9AAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOI9AAAAAAAA4j0AAAAAAAAAAAAAAADwvw"
				],
				[
					143,
					1,
					"insert",
					{
						"characters": " f"
					},
					"AgAAAOY9AAAAAAAA5z0AAAAAAAAAAAAA5z0AAAAAAADoPQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOY9AAAAAAAA5j0AAAAAAAAAAAAAAADwvw"
				],
				[
					144,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "false"
					},
					"AgAAAOc9AAAAAAAA5z0AAAAAAAABAAAAZuc9AAAAAAAA7D0AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOg9AAAAAAAA6D0AAAAAAAAAAAAAAADwvw"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOw9AAAAAAAA7T0AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOw9AAAAAAAA7D0AAAAAAAAAAAAAAADwvw"
				],
				[
					152,
					1,
					"left_delete",
					null,
					"AQAAAGM9AAAAAAAAYz0AAAAAAAA+AAAAPDwgIlRleHR1cmUgIiA8PCBzcmNGaWxlbmFtZSA8PCAiIGNvbnZlcnNpb24gZmFpbGVkLlxuIiAKCQkJPDw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKE9AAAAAAAAYz0AAAAAAAAAAAAAAADwvw"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": "<<"
					},
					"AgAAAGM9AAAAAAAAZD0AAAAAAAAAAAAAZD0AAAAAAABlPQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGM9AAAAAAAAYz0AAAAAAAAAAAAAAADwvw"
				],
				[
					156,
					1,
					"right_delete",
					null,
					"AQAAAPdIAAAAAAAA90gAAAAAAAAOAAAAb3BlbiBmaWxlIGFuZCA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPdIAAAAAAAABUkAAAAAAAAAAAAAAADwvw"
				],
				[
					160,
					1,
					"left_delete",
					null,
					"AQAAAAVJAAAAAAAABUkAAAAAAADJAAAARklMRSAqcEZpbGUgPSBmb3Blbihkc3RGaWxlbmFtZS5jX3N0cigpLCAid2IiKTsKCWlmKCFwRmlsZSkgewoJCUxMT0dfRVJSIDw8ICJUZXh0dXJlICIgPDwgc3JjRmlsZW5hbWUgPDwgIiBjb252ZXJzaW9uIGZhaWxlZC5cbiIgCgkJCTw8ICJFcnJvciBvcGVuaW5nIGZpbGUgIiA8PCBkc3RGaWxlbmFtZSA8PCAiIGZvciB3cml0aW5nICEhISI7Cgl9CgoJ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAVJAAAAAAAAzkkAAAAAAAAAAAAAAABCQA"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": "if(!"
					},
					"BAAAAAVJAAAAAAAABkkAAAAAAAAAAAAABkkAAAAAAAAHSQAAAAAAAAAAAAAHSQAAAAAAAAhJAAAAAAAAAAAAAAhJAAAAAAAACUkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAVJAAAAAAAABUkAAAAAAAAAAAAAAADwvw"
				],
				[
					162,
					1,
					"left_delete",
					null,
					"AQAAAAhJAAAAAAAACEkAAAAAAAABAAAAIQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAlJAAAAAAAACUkAAAAAAAAAAAAAAADwvw"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": " !="
					},
					"AwAAAElJAAAAAAAASkkAAAAAAAAAAAAASkkAAAAAAABLSQAAAAAAAAAAAABLSQAAAAAAAExJAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAElJAAAAAAAASUkAAAAAAAAAAAAAAADwvw"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": " s"
					},
					"AgAAAExJAAAAAAAATUkAAAAAAAAAAAAATUkAAAAAAABOSQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAExJAAAAAAAATEkAAAAAAAAAAAAAAADwvw"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAE5JAAAAAAAAT0kAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE5JAAAAAAAATkkAAAAAAAAAAAAAAADwvw"
				],
				[
					168,
					1,
					"insert_completion",
					{
						"completion": "sizeof",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "sizeof"
					},
					"AgAAAE1JAAAAAAAATUkAAAAAAAACAAAAc2lNSQAAAAAAAFNJAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE9JAAAAAAAAT0kAAAAAAAAAAAAAAADwvw"
				],
				[
					169,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFNJAAAAAAAAVUkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFNJAAAAAAAAU0kAAAAAAAAAAAAAAADwvw"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": "L"
					},
					"AQAAAFRJAAAAAAAAVUkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFRJAAAAAAAAVEkAAAAAAAAAAAAAAADwvw"
				],
				[
					171,
					1,
					"insert_completion",
					{
						"completion": "LTX_Header",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "LTX_Header"
					},
					"AgAAAFRJAAAAAAAAVEkAAAAAAAABAAAATFRJAAAAAAAAXkkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFVJAAAAAAAAVUkAAAAAAAAAAAAAAADwvw"
				],
				[
					173,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAF9JAAAAAAAAYEkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF9JAAAAAAAAX0kAAAAAAAAAAAAAAADwvw"
				],
				[
					174,
					1,
					"right_delete",
					null,
					"AQAAAGBJAAAAAAAAYEkAAAAAAAABAAAAOw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGBJAAAAAAAAYEkAAAAAAAAAAAAAAADwvw"
				],
				[
					175,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGBJAAAAAAAAYUkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGBJAAAAAAAAYEkAAAAAAAAAAAAAAADwvw"
				],
				[
					176,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAGFJAAAAAAAAY0kAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGFJAAAAAAAAYUkAAAAAAAAAAAAAAADwvw"
				],
				[
					177,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAGJJAAAAAAAAY0kAAAAAAAAAAAAAY0kAAAAAAABkSQAAAAAAAAAAAABkSQAAAAAAAGVJAAAAAAAAAAAAAGVJAAAAAAAAZkkAAAAAAAAAAAAAY0kAAAAAAABjSQAAAAAAAAEAAAAJY0kAAAAAAABlSQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGJJAAAAAAAAYkkAAAAAAAAAAAAAAADwvw"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": "LLO"
					},
					"AwAAAGVJAAAAAAAAZkkAAAAAAAAAAAAAZkkAAAAAAABnSQAAAAAAAAAAAABnSQAAAAAAAGhJAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGVJAAAAAAAAZUkAAAAAAAAAAAAAAADwvw"
				],
				[
					179,
					1,
					"insert_completion",
					{
						"completion": "LLOG_ERR",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "LLOG_ERR"
					},
					"AgAAAGVJAAAAAAAAZUkAAAAAAAADAAAATExPZUkAAAAAAABtSQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGhJAAAAAAAAaEkAAAAAAAAAAAAAAADwvw"
				],
				[
					180,
					1,
					"insert",
					{
						"characters": " <<"
					},
					"AwAAAG1JAAAAAAAAbkkAAAAAAAAAAAAAbkkAAAAAAABvSQAAAAAAAAAAAABvSQAAAAAAAHBJAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG1JAAAAAAAAbUkAAAAAAAAAAAAAAADwvw"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": " E"
					},
					"AgAAAHBJAAAAAAAAcUkAAAAAAAAAAAAAcUkAAAAAAABySQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHBJAAAAAAAAcEkAAAAAAAAAAAAAAADwvw"
				],
				[
					182,
					1,
					"left_delete",
					null,
					"AQAAAHFJAAAAAAAAcUkAAAAAAAABAAAARQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHJJAAAAAAAAckkAAAAAAAAAAAAAAADwvw"
				],
				[
					183,
					1,
					"insert",
					{
						"characters": "|"
					},
					"AQAAAHFJAAAAAAAAckkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHFJAAAAAAAAcUkAAAAAAAAAAAAAAADwvw"
				],
				[
					184,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAHJJAAAAAAAAdEkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHJJAAAAAAAAckkAAAAAAAAAAAAAAADwvw"
				],
				[
					185,
					1,
					"insert",
					{
						"characters": "E"
					},
					"AQAAAHNJAAAAAAAAdEkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHNJAAAAAAAAc0kAAAAAAAAAAAAAAADwvw"
				],
				[
					186,
					1,
					"left_delete",
					null,
					"AQAAAHNJAAAAAAAAc0kAAAAAAAABAAAARQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHRJAAAAAAAAdEkAAAAAAAAAAAAAAADwvw"
				],
				[
					187,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAHJJAAAAAAAAckkAAAAAAAABAAAAInJJAAAAAAAAckkAAAAAAAABAAAAIg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHNJAAAAAAAAc0kAAAAAAAAAAAAAAADwvw"
				],
				[
					188,
					1,
					"left_delete",
					null,
					"AQAAAHFJAAAAAAAAcUkAAAAAAAABAAAAfA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHJJAAAAAAAAckkAAAAAAAAAAAAAAADwvw"
				],
				[
					189,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAHFJAAAAAAAAc0kAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHFJAAAAAAAAcUkAAAAAAAAAAAAAAADwvw"
				],
				[
					190,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAHJJAAAAAAAAc0kAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHJJAAAAAAAAckkAAAAAAAAAAAAAAADwvw"
				],
				[
					191,
					1,
					"left_delete",
					null,
					"AQAAAHJJAAAAAAAAckkAAAAAAAABAAAAOg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHNJAAAAAAAAc0kAAAAAAAAAAAAAAADwvw"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": "Er"
					},
					"AgAAAHJJAAAAAAAAc0kAAAAAAAAAAAAAc0kAAAAAAAB0SQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHJJAAAAAAAAckkAAAAAAAAAAAAAAADwvw"
				],
				[
					193,
					1,
					"insert_completion",
					{
						"completion": "Error",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Error"
					},
					"AgAAAHJJAAAAAAAAckkAAAAAAAACAAAARXJySQAAAAAAAHdJAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHRJAAAAAAAAdEkAAAAAAAAAAAAAAADwvw"
				],
				[
					194,
					1,
					"insert",
					{
						"characters": " writing"
					},
					"CAAAAHdJAAAAAAAAeEkAAAAAAAAAAAAAeEkAAAAAAAB5SQAAAAAAAAAAAAB5SQAAAAAAAHpJAAAAAAAAAAAAAHpJAAAAAAAAe0kAAAAAAAAAAAAAe0kAAAAAAAB8SQAAAAAAAAAAAAB8SQAAAAAAAH1JAAAAAAAAAAAAAH1JAAAAAAAAfkkAAAAAAAAAAAAAfkkAAAAAAAB/SQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHdJAAAAAAAAd0kAAAAAAAAAAAAAAADwvw"
				],
				[
					195,
					1,
					"insert",
					{
						"characters": " herad"
					},
					"BgAAAH9JAAAAAAAAgEkAAAAAAAAAAAAAgEkAAAAAAACBSQAAAAAAAAAAAACBSQAAAAAAAIJJAAAAAAAAAAAAAIJJAAAAAAAAg0kAAAAAAAAAAAAAg0kAAAAAAACESQAAAAAAAAAAAACESQAAAAAAAIVJAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH9JAAAAAAAAf0kAAAAAAAAAAAAAAADwvw"
				],
				[
					196,
					3,
					"left_delete",
					null,
					"AwAAAIRJAAAAAAAAhEkAAAAAAAABAAAAZINJAAAAAAAAg0kAAAAAAAABAAAAYYJJAAAAAAAAgkkAAAAAAAABAAAAcg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIVJAAAAAAAAhUkAAAAAAAAAAAAAAADwvw"
				],
				[
					197,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAIJJAAAAAAAAg0kAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIJJAAAAAAAAgkkAAAAAAAAAAAAAAADwvw"
				],
				[
					198,
					1,
					"insert_completion",
					{
						"completion": "header",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "header"
					},
					"AgAAAIBJAAAAAAAAgEkAAAAAAAADAAAAaGVhgEkAAAAAAACGSQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAINJAAAAAAAAg0kAAAAAAAAAAAAAAADwvw"
				],
				[
					199,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAAIZJAAAAAAAAh0kAAAAAAAAAAAAAh0kAAAAAAACISQAAAAAAAAAAAACISQAAAAAAAIlJAAAAAAAAAAAAAIlJAAAAAAAAikkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIZJAAAAAAAAhkkAAAAAAAAAAAAAAADwvw"
				],
				[
					200,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIpJAAAAAAAAi0kAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIpJAAAAAAAAikkAAAAAAAAAAAAAAADwvw"
				],
				[
					201,
					1,
					"insert",
					{
						"characters": "texture"
					},
					"BwAAAItJAAAAAAAAjEkAAAAAAAAAAAAAjEkAAAAAAACNSQAAAAAAAAAAAACNSQAAAAAAAI5JAAAAAAAAAAAAAI5JAAAAAAAAj0kAAAAAAAAAAAAAj0kAAAAAAACQSQAAAAAAAAAAAACQSQAAAAAAAJFJAAAAAAAAAAAAAJFJAAAAAAAAkkkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAItJAAAAAAAAi0kAAAAAAAAAAAAAAADwvw"
				],
				[
					202,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJJJAAAAAAAAk0kAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJJJAAAAAAAAkkkAAAAAAAAAAAAAAADwvw"
				],
				[
					204,
					1,
					"insert",
					{
						"characters": " <<"
					},
					"AwAAAJRJAAAAAAAAlUkAAAAAAAAAAAAAlUkAAAAAAACWSQAAAAAAAAAAAACWSQAAAAAAAJdJAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJRJAAAAAAAAlEkAAAAAAAAAAAAAAADwvw"
				],
				[
					205,
					1,
					"insert",
					{
						"characters": " f"
					},
					"AgAAAJdJAAAAAAAAmEkAAAAAAAAAAAAAmEkAAAAAAACZSQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJdJAAAAAAAAl0kAAAAAAAAAAAAAAADwvw"
				],
				[
					206,
					1,
					"left_delete",
					null,
					"AQAAAJhJAAAAAAAAmEkAAAAAAAABAAAAZg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJlJAAAAAAAAmUkAAAAAAAAAAAAAAADwvw"
				],
				[
					207,
					1,
					"insert",
					{
						"characters": "ds"
					},
					"AgAAAJhJAAAAAAAAmUkAAAAAAAAAAAAAmUkAAAAAAACaSQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJhJAAAAAAAAmEkAAAAAAAAAAAAAAADwvw"
				],
				[
					208,
					1,
					"insert_completion",
					{
						"completion": "dstFilename",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "dstFilename"
					},
					"AgAAAJhJAAAAAAAAmEkAAAAAAAACAAAAZHOYSQAAAAAAAKNJAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJpJAAAAAAAAmkkAAAAAAAAAAAAAAADwvw"
				],
				[
					209,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKNJAAAAAAAApEkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKNJAAAAAAAAo0kAAAAAAAAAAAAAAADwvw"
				],
				[
					211,
					1,
					"insert",
					{
						"characters": " <<"
					},
					"AwAAAKNJAAAAAAAApEkAAAAAAAAAAAAApEkAAAAAAAClSQAAAAAAAAAAAAClSQAAAAAAAKZJAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKNJAAAAAAAAo0kAAAAAAAAAAAAAAADwvw"
				],
				[
					212,
					1,
					"insert",
					{
						"characters": " |\""
					},
					"AwAAAKZJAAAAAAAAp0kAAAAAAAAAAAAAp0kAAAAAAACoSQAAAAAAAAAAAACoSQAAAAAAAKlJAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKZJAAAAAAAApkkAAAAAAAAAAAAAAADwvw"
				],
				[
					213,
					2,
					"left_delete",
					null,
					"AgAAAKhJAAAAAAAAqEkAAAAAAAABAAAAIqdJAAAAAAAAp0kAAAAAAAABAAAAfA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKlJAAAAAAAAqUkAAAAAAAAAAAAAAADwvw"
				],
				[
					214,
					1,
					"insert",
					{
						"characters": "\""
					},
					"AQAAAKdJAAAAAAAAqEkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKdJAAAAAAAAp0kAAAAAAAAAAAAAAADwvw"
				],
				[
					215,
					1,
					"insert",
					{
						"characters": " !\""
					},
					"AwAAAKhJAAAAAAAAqUkAAAAAAAAAAAAAqUkAAAAAAACqSQAAAAAAAAAAAACqSQAAAAAAAKtJAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKhJAAAAAAAAqEkAAAAAAAAAAAAAAADwvw"
				],
				[
					217,
					1,
					"insert",
					{
						"characters": "\nre"
					},
					"BAAAAKxJAAAAAAAArUkAAAAAAAAAAAAArUkAAAAAAACvSQAAAAAAAAAAAACvSQAAAAAAALBJAAAAAAAAAAAAALBJAAAAAAAAsUkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKxJAAAAAAAArEkAAAAAAAAAAAAAAADwvw"
				],
				[
					218,
					1,
					"insert_completion",
					{
						"completion": "return",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "return"
					},
					"AgAAAK9JAAAAAAAAr0kAAAAAAAACAAAAcmWvSQAAAAAAALVJAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALFJAAAAAAAAsUkAAAAAAAAAAAAAAADwvw"
				],
				[
					219,
					1,
					"insert",
					{
						"characters": " f"
					},
					"AgAAALVJAAAAAAAAtkkAAAAAAAAAAAAAtkkAAAAAAAC3SQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALVJAAAAAAAAtUkAAAAAAAAAAAAAAADwvw"
				],
				[
					220,
					1,
					"insert_completion",
					{
						"completion": "false",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "false"
					},
					"AgAAALZJAAAAAAAAtkkAAAAAAAABAAAAZrZJAAAAAAAAu0kAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALdJAAAAAAAAt0kAAAAAAAAAAAAAAADwvw"
				],
				[
					221,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALtJAAAAAAAAvEkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALtJAAAAAAAAu0kAAAAAAAAAAAAAAADwvw"
				],
				[
					223,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAL9JAAAAAAAAwEkAAAAAAAAAAAAAwEkAAAAAAADBSQAAAAAAAAAAAADBSQAAAAAAAMJJAAAAAAAAAAAAAMJJAAAAAAAAw0kAAAAAAAAAAAAAwEkAAAAAAADASQAAAAAAAAEAAAAJ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL9JAAAAAAAAv0kAAAAAAAAAAAAAAKBnQA"
				],
				[
					224,
					1,
					"paste",
					null,
					"AQAAAMJJAAAAAAAAAkoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMJJAAAAAAAAwkkAAAAAAAAAAAAAAADwvw"
				],
				[
					228,
					4,
					"left_delete",
					null,
					"BAAAAMJJAAAAAAAAwkkAAAAAAABAAAAATExPR19FUlIgPDwgIlRleHR1cmUgIiA8PCBzcmNGaWxlbmFtZSA8PCAiIGNvbnZlcnNpb24gZmFpbGVkLlxuIsFJAAAAAAAAwUkAAAAAAAABAAAACcBJAAAAAAAAwEkAAAAAAAABAAAACr9JAAAAAAAAv0kAAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMJJAAAAAAAAAkoAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "src/gfx_lib/vulkan/vk-device.cpp",
			"settings":
			{
				"buffer_size": 90056,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAACIAAQAAAAAAIwABAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiAAEAAAAAACIAAQAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKQABAAAAAAA6AAEAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/gfx_lib/vulkan/vk-device-queue.h",
			"settings":
			{
				"buffer_size": 3098,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/gfx_lib/vulkan/vk-device-queue.cpp",
			"settings":
			{
				"buffer_size": 6019,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: List Packages"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 320.0,
		"history":
		[
			"cd /home/max/dev"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/mnt/misc_hdd/dev/Lava",
		"/mnt/misc_hdd/dev/Lava/src",
		"/mnt/misc_hdd/dev/Lava/src/Falcor",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/Platform",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Image",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/TexturesResolvePass",
		"/mnt/misc_hdd/dev/Lava/third_party",
		"/mnt/misc_hdd/dev/Lava/third_party/external",
		"/mnt/misc_hdd/dev/Lava/third_party/external/openimageio",
		"/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src",
		"/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO"
	],
	"file_history":
	[
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/TexLODTypes.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/ShadingUtils.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/StandardMaterialInstance.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/StandardMaterial.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/BxDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/IBSDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Rendering/RTXDI/RTXDIApplicationBridge.slangh",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/AmbientOcclusionPass/AmbientOcclusionPass.raytrace.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/DeferredLightingCachedPass/DeferredLightingCachedPass.direct.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/DeferredLightingCachedPass/DeferredLightingCachedPass.indirect.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/DeferredLightingPass/DeferredLightingPass.cached.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/StandardMaterial.cpp",
		"/mnt/misc_hdd/dev/Lava/src/houdini/otls/lava/Driver_1lava/DialogScript",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/VBuffer/VBufferRT.slang",
		"/mnt/misc_hdd/dev/Lava/slang.sublime-syntax",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/VBuffer/VBufferSW.builder.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/VBuffer/VBufferSW.rasterizer.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/VBuffer/VBufferSW.rasterizer.cs.slang.old2",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/VBuffer/VBufferSW.rasterizer.cs.slang.old",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/VBuffer/VBufferSW.Meshlet.slangh",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/VBuffer/VBufferSW.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/DebugShadingPass/DebugShadingPass.cpp",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/DebugShadingPass/DebugShadingPass.h",
		"/mnt/misc_hdd/dev/Lava/src/gfx_lib/slang-gfx.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/GFX/GFXComputeContext.cpp",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/VBuffer/VBufferSW.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/SceneDefines.slangh",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/VBuffer/VBufferSW.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/MaterialSystem.slang",
		"/mnt/misc_hdd/dev/Lava/src/gfx_lib/vulkan/vk-command-encoder.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/GFX/GFXCopyContext.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Image/TextureManager.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/TextureHandle.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Image/TextureManager.h",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/DebugShadingPass/DebugShadingPass.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/DeferredLightingPass/DeferredLightingPass.cs.slang.old",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/DeferredLightingPass/DeferredLightingPass.nocache.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/EdgeDetectPass/EdgeDetect.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/EdgeDetectPass/EdgeDetect.lowpass.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/ForwardLightingPass/ForwardLightingPass.3d.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/GBuffer/GBuffer/GBufferRT.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/BSDFIntegrator.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/LayeredBSDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/BasicMaterial.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/MaterialTypeRegistry.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/MaterialTypes.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/MaterialTypeRegistry.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/NDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/BSDFs/BeerBTDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/BSDFs/DielectricPlateBSDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/BSDFs/DiffuseSpecularBRDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/BSDFs/DisneyDiffuseBRDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/BSDFs/FrostbiteDiffuseBRDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/ClothBRDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/HairMaterial.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/BSDFs/StandardBSDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/BSDFs/SpecularMicrofacet.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/BSDFs/SimpleBTDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/BasicMaterial.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/RaytracingInline.slang",
		"/mnt/misc_hdd/dev/Lava/src/houdini/soho/python/LSDlava.py",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/slang-extension/atomic-min-max-u64-byte-address-buffer.slang",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/source/slang/hlsl.meta.slang",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/bugs/vk-image-atomics.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/HitInfo.cpp",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/AccumulatePass/Accumulate.SeparableFilter.cs.slang",
		"/mnt/misc_hdd/dev/Lava/third_party/mikktspace/mikktspace.h",
		"/mnt/misc_hdd/dev/Lava/third_party/mikktspace/mikktspace.c",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/TextureSampler.slang",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/compute/byte-address-buffer.slang",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/pipeline/ray-tracing/ray-query-subroutine.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/RTXDIPass/FinalShading.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/TextureUtils.slang",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/docs/stdlib-doc.md",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/LobeType.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/TexLODTypes.slang",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/external/glslang/SPIRV/SpvBuilder.cpp",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/external/glslang/SPIRV/GlslangToSpv.cpp",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/external/glext.h",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/external/glslang/glslang/MachineIndependent/intermOut.cpp",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/external/glslang/Test/spv.1.4.sparseTexture.frag",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/compute/dynamic-dispatch-16.slang",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/external/glslang/glslang/MachineIndependent/Initialize.cpp",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/hlsl-intrinsic/texture/gather-texture2darray.slang",
		"/mnt/misc_hdd/dev/Lava/third_party/external/slang/src/Slang/tests/hlsl-intrinsic/texture/gather-texture2darray.slang.hlsl",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/SDFs/SparseBrickSet/SDFSBS.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/IMaterial.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/PathTracer/StaticParams.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/DeferredLightingPass/DeferredLightingPass.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/PathTracer/ResolvePass.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/PathTracer/GeneratePaths.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/PathTracer/LoadShadingData.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/PathTracer/NRDHelpers.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/PathTracer/PathState.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/PathTracer/GuideData.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/MaterialSystem.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/MaterialSystem.h",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/PathTracer/PathTracer.cpp",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/PathTracer/PathTracerNRD.slang",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/PathTracer/PathTracer.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/RenderPasses/Shared/Denoising/NRDHelpers.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/Microfacet.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/Material/MaterialFactory.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/TexLODHelpers.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/ClothMaterial.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/ClothMaterialInstance.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/HairChiang16.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/HairMaterialInstance.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/IMaterialInstance.slang",
		"/mnt/misc_hdd/dev/Lava/third_party/mikktspace/README.md",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/DeferredLightingPass/DeferredLightingPass.cs.slang.old3",
		"/mnt/misc_hdd/dev/Lava/src/RenderPasses/DeferredLightingPass/DeferredLightingPass.cs.slang.old2",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/BSDFs/SheenBSDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/BSDFs/OrenNayarBRDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/BSDFs/LambertDiffuseBTDF.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Experimental/Scene/Materials/BSDFs/LambertDiffuseBRDF.slang",
		"/mnt/misc_hdd/dev/Lava/third_party/CMakeLists.txt",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Image/LTX_Bitmap.cpp",
		"/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO/src/cmake/compiler.cmake",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/MaterialX/MxSocket.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/Framework.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Algorithm/BitonicSort.cs.slang",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Utils/Algorithm/BitonicSort.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/GFX/GFXDevice.cpp",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Core/API/Buffer.h",
		"/mnt/misc_hdd/dev/Lava/src/lava_lib/scene_builder.cpp",
		"/mnt/misc_hdd/dev/Lava/src/lava_lib/reader_bgeo/bgeo/Primitive.h",
		"/mnt/misc_hdd/dev/Lava/src/Falcor/Scene/SDFs/SDFSurfaceVoxelCounter.cs.slang"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 125.0,
		"where_history":
		[
			"/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/openimageio,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/openimageio,<project filters>",
			"/mnt/misc_hdd/dev/Lava/third_party/external/openimageio/src/OpenImageIO,<project filters>",
			"/mnt/misc_hdd/dev/Lava/cmake,<project filters>"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"dds.imageio",
			"USE_DDS",
			"squish",
			"OpenCV",
			"OpenCV_LIBS",
			"OpenCV_INCLUDE_DIR",
			"USE_OPENCV"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/Falcor/Utils/Image/TextureManager.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 34240,
						"regions":
						{
						},
						"selection":
						[
							[
								23346,
								23346
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 10237.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/Falcor/Utils/Image/TextureManager.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12764,
						"regions":
						{
						},
						"selection":
						[
							[
								5442,
								5442
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2039.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/Falcor/Scene/Material/MaterialTextureLoader.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3574,
						"regions":
						{
						},
						"selection":
						[
							[
								2442,
								2442
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 643.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/Falcor/Scene/Material/Material.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13617,
						"regions":
						{
						},
						"selection":
						[
							[
								7326,
								7326
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2677.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/Falcor/Scene/Material/MaterialTextureLoader.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3259,
						"regions":
						{
						},
						"selection":
						[
							[
								2696,
								2696
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 540.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/Falcor/Scene/SceneBuilder.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 124509,
						"regions":
						{
						},
						"selection":
						[
							[
								36304,
								36304
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 14431.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/Falcor/Scene/SceneBuilder.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 38086,
						"regions":
						{
						},
						"selection":
						[
							[
								24257,
								24257
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8131.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/lava_lib/reader_lsd/session.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 54659,
						"regions":
						{
						},
						"selection":
						[
							[
								34237,
								34237
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 15243.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/lava_lib/reader_lsd/visitor.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7719,
						"regions":
						{
						},
						"selection":
						[
							[
								3178,
								3178
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1620.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "third_party/freeimage_install_files.cmake",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 606,
						"regions":
						{
						},
						"selection":
						[
							[
								370,
								370
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/Falcor/Core/Platform/OS.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13554,
						"regions":
						{
						},
						"selection":
						[
							[
								2385,
								2385
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 955.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 42080,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions": "",
								"scope": ""
							}
						},
						"selection":
						[
							[
								41920,
								41920
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 7,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 18954.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "third_party/external/openimageio/src/OpenImageIO/src/cmake/compiler.cmake",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25040,
						"regions":
						{
						},
						"selection":
						[
							[
								19134,
								19134
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "third_party/external/openimageio/src/OpenImageIO/src/cmake/modules/FindLibsquish.cmake",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 1635,
						"regions":
						{
						},
						"selection":
						[
							[
								174,
								112
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "third_party/CMakeLists.txt",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 38582,
						"regions":
						{
						},
						"selection":
						[
							[
								19822,
								19822
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12146.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "src/lava_lib/reader_lsd/reader_lsd.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2883,
						"regions":
						{
						},
						"selection":
						[
							[
								2492,
								2492
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1512.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "src/lava_lib/reader_lsd/visitor.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4649,
						"regions":
						{
						},
						"selection":
						[
							[
								1997,
								1997
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 457.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "src/lava_lib/reader_lsd/session.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6197,
						"regions":
						{
						},
						"selection":
						[
							[
								3442,
								3442
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1264.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "src/Falcor/Core/API/GFX/GFXTexture.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7847,
						"regions":
						{
						},
						"selection":
						[
							[
								7782,
								7793
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3252.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "src/Falcor/Core/API/GFX/GFXDevice.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20734,
						"regions":
						{
						},
						"selection":
						[
							[
								8752,
								8752
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3198.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "src/RenderPasses/DeferredLightingPass/DeferredLightingPass.cs.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25072,
						"regions":
						{
						},
						"selection":
						[
							[
								20418,
								20418
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9092.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "src/Falcor/Utils/Image/LTX_Bitmap.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26475,
						"regions":
						{
						},
						"selection":
						[
							[
								18879,
								18879
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 7715.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "src/gfx_lib/vulkan/vk-device.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 90056,
						"regions":
						{
						},
						"selection":
						[
							[
								65577,
								65594
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 31602.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "src/gfx_lib/vulkan/vk-device-queue.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3098,
						"regions":
						{
						},
						"selection":
						[
							[
								1539,
								1539
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 238.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "src/gfx_lib/vulkan/vk-device-queue.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6019,
						"regions":
						{
						},
						"selection":
						[
							[
								5478,
								5478
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2884.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 43.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 33.0
	},
	"pinned_build_system": "Packages/Makefile/Make.sublime-build",
	"project": "falcor.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"src/lava_lib/reader_lsd/grammar_lsd.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 322.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
